[
    {
        "role": "user",
        "content": "Using Python, write a function that checks if a string contains only digits. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I need to write a function in Python that checks if a string contains only digits. So, I should create a function that takes a string as input and returns True if all characters in the string are digits, and False otherwise.\n\nFirst, I need to understand what constitutes a digit. In Python, digits are the characters from 0 to 9. So, any string that consists solely of these characters should return True.\n\nI recall that Python has a method for strings called isdigit(), which returns True if all characters in the string are digits and there are at least one character, otherwise False. So, perhaps I can use this method to solve the problem.\n\nLet me think about some examples to test the function:\n\n1. \"12345\" should return True.\n\n2. \"123a45\" should return False because it contains the letter 'a'.\n\n3. \"\" (empty string) should return False, but I need to confirm because according to the isdigit() method, an empty string returns False.\n\n4. \"00000\" should return True.\n\n5. \"12 345\" should return False because it contains a space.\n\n6. \"12.34\" should return False because it contains a decimal point.\n\nOkay, so using the isdigit() method seems straightforward. But I should make sure that it behaves as expected with different cases, including the empty string.\n\nLet me check the documentation for isdigit() to confirm its behavior.\n\nLooking up the documentation, isdigit() returns True if all characters in the string are digits and the string is not empty.\n\nSo, for an empty string, isdigit() returns False. That matches my earlier thought.\n\nTherefore, I can create a function that simply calls the isdigit() method on the input string and returns the result.\n\nBut wait, I should consider if the input is not a string. What if someone passes an integer or another data type? In Python, integers don't have the isdigit() method, so the function should expect a string as input. I should assume that the input is always a string for this function.\n\nAlso, I should consider if the string contains digits in different languages, like Arabic numerals or other scripts that represent digits. Python's isdigit() method should handle unicode digits correctly, so strings with digits from different scripts should also be recognized as digits.\n\nFor example, the string \"\uff11\uff12\uff13\" (full-width digits) should return True.\n\nLet me test this thinking with a quick example in the Python shell.\n\n>>> s = \"\uff11\uff12\uff13\"\n\n>>> s.isdigit()\n\nTrue\n\nGood, it works.\n\nAnother consideration is whether the string contains leading or trailing spaces. For example, \" 123 \" has spaces, so it should return False.\n\n>>> s = \" 123 \"\n\n>>> s.isdigit()\n\nFalse\n\nPerfect, it correctly identifies the spaces as non-digit characters.\n\nWhat about strings with signs, like \"+123\" or \"-123\"? These are technically not all digits, so should return False.\n\n>>> s = \"+123\"\n\n>>> s.isdigit()\n\nFalse\n\nYes, that's correct.\n\nSimilarly, strings with decimal points should return False.\n\n>>> s = \"123.45\"\n\n>>> s.isdigit()\n\nFalse\n\nGood.\n\nNow, what if the string contains digits and other characters that are still related to numbers, like exponents in scientific notation? For example, \"1.23e4\". This is not all digits, so should return False.\n\n>>> s = \"1.23e4\"\n\n>>> s.isdigit()\n\nFalse\n\nCorrect again.\n\nSo, it seems that using isdigit() is sufficient for this task.\n\nBut let's think about another approach, maybe for learning purposes.\n\nI could iterate through each character in the string and check if each character is a digit.\n\nIn Python, I can use a loop to check each character.\n\nHere's an example:\n\ndef contains_only_digits(s):\n\nfor char in s:\n\nif not char.isdigit():\n\nreturn False\n\nreturn True\n\nThis function will return True only if all characters in the string are digits.\n\nBut this is essentially what isdigit() does under the hood.\n\nAnother way is to use the built-in str.isnumeric() method, which also checks if all characters in the string are numeric characters.\n\nHowever, isnumeric() is slightly different from isdigit() because it also recognizes numeric characters from other scripts and unicode fractions.\n\nBut for the purpose of this function, which is to check if a string contains only digits, isdigit() is more appropriate because it strictly checks for digit characters.\n\nisnumeric() might accept characters like superscripts, subscripts, etc., which might or might not be considered as digits depending on the context.\n\nBut in this case, since the question is to check for digits, isdigit() is the right choice.\n\nLet me consider the performance aspect.\n\nUsing isdigit() is probably faster and more efficient because it's a built-in method optimized for this purpose.\n\nImplementing a loop to check each character might be slightly slower for very long strings, but in practice, the difference would be negligible unless dealing with extremely large strings.\n\nTherefore, using isdigit() is the best approach.\n\nNow, I need to write the function in Python.\n\nI should also add some comments to make it clear what the function does.\n\nHere's how I can write the function:\n\ndef contains_only_digits(s):\n\n\"\"\"\n\nCheck if the string contains only digits.\n\nParameters:\n\ns (str): The string to check.\n\nReturns:\n\nbool: True if the string contains only digits, False otherwise.\n\n\"\"\"\n\nreturn s.isdigit()\n\nThis is simple and straightforward.\n\nI can also add some docstrings to explain the function's purpose, parameters, and return value.\n\nAdditionally, I can write some test cases to verify the function's correctness.\n\nHere are some test cases:\n\nprint(contains_only_digits(\"12345\"))  # Should return True\n\nprint(contains_only_digits(\"123a45\"))  # Should return False\n\nprint(contains_only_digits(\"\"))  # Should return False\n\nprint(contains_only_digits(\"00000\"))  # Should return True\n\nprint(contains_only_digits(\"12 345\"))  # Should return False\n\nprint(contains_only_digits(\"12.34\"))  # Should return False\n\nprint(contains_only_digits(\"\uff11\uff12\uff13\"))  # Should return True\n\nprint(contains_only_digits(\"+123\"))  # Should return False\n\nprint(contains_only_digits(\"1.23e4\"))  # Should return False\n\nThese test cases cover various scenarios, including edge cases like empty strings and strings with different types of characters.\n\nBy running these test cases, I can confirm that the function works as expected.\n\nIn conclusion, using the built-in isdigit() method is the most efficient and straightforward way to check if a string contains only digits in Python.\n\n## Final Solution\nTo create a function that checks if a string contains only digits, we can utilize Python's built-in `isdigit()` method for strings. This method returns `True` if all characters in the string are digits and there is at least one character, otherwise it returns `False`.\n\n### Approach\n1. **Understanding the Task**: We need to determine if a given string consists solely of digits (0-9).\n2. **Using `isdigit()` Method**: This method checks if all characters in the string are digits and the string is not empty.\n3. **Considering Edge Cases**: We need to ensure the function handles edge cases such as empty strings and strings with non-digit characters.\n\n### Solution Code\n\n```python\ndef contains_only_digits(s):\n    \"\"\"\n    Check if the string contains only digits.\n\n    Parameters:\n    s (str): The string to check.\n\n    Returns:\n    bool: True if the string contains only digits, False otherwise.\n    \"\"\"\n    return s.isdigit()\n\n# Test cases to verify the correctness of the function\nprint(contains_only_digits(\"12345\"))    # Should return True\nprint(contains_only_digits(\"123a45\"))   # Should return False\nprint(contains_only_digits(\"\"))         # Should return False\nprint(contains_only_digits(\"00000\"))    # Should return True\nprint(contains_only_digits(\"12 345\"))   # Should return False\nprint(contains_only_digits(\"12.34\"))    # Should return False\nprint(contains_only_digits(\"\uff11\uff12\uff13\"))   # Should return True\nprint(contains_only_digits(\"+123\"))     # Should return False\nprint(contains_only_digits(\"1.23e4\"))   # Should return False\n```\n\n### Explanation\n- **Function Definition**: The function `contains_only_digits` takes a single parameter `s`, which is expected to be a string.\n- **Using `isdigit()`**: The function returns the result of `s.isdigit()`, which is `True` only if all characters in the string are digits and the string is not empty.\n- **Test Cases**: Various test cases are provided to check different scenarios, including strings with only digits, strings with non-digit characters, empty strings, and strings with special characters or full-width digits.\n\nThis approach ensures that the function is both simple and efficient, leveraging Python's built-in capabilities to achieve the desired functionality."
    }
]