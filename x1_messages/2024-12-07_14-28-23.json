[
    {
        "role": "user",
        "content": "Write a Python script that uses the Tweepy library to interact with the Twitter API. The script should fetch tweets containing a specific hashtag, analyze their sentiment using a natural language processing library like TextBlob, and visualize the results as a pie chart.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that interacts with Twitter using Tweepy, fetches tweets with a specific hashtag, analyzes their sentiment with TextBlob, and then visualizes the results in a pie chart. Sounds interesting! Let's break this down step by step.\n\nFirst, I need to make sure I have all the necessary libraries installed. So, I'll need Tweepy for accessing the Twitter API, TextBlob for sentiment analysis, and Matplotlib for visualization. I can install them using pip if they're not already installed.\n\nNext, I need to set up my Twitter API credentials. To access the Twitter API, I'll need to create a Twitter Developer account and get my API keys and access tokens. Once I have those, I can set them up in my script using Tweepy's OAuth handler.\n\nAfter setting up the authentication, I can create a Tweepy API object that I'll use to make requests to the Twitter API.\n\nNow, I need to fetch tweets containing a specific hashtag. I can use the API's search_tweets method for this, specifying the hashtag as the query parameter. I should also decide on the number of tweets I want to fetch, maybe set a limit.\n\nOnce I have the tweets, I'll use TextBlob to analyze the sentiment of each tweet. TextBlob makes it easy to get a polarity score, which indicates the sentiment: positive, negative, or neutral.\n\nI'll categorize each tweet based on its sentiment score: if the polarity is greater than 0, it's positive; if it's less than 0, it's negative; and if it's zero, it's neutral.\n\nAfter analyzing all the tweets, I'll have counts for positive, negative, and neutral sentiments. Then, I'll use Matplotlib to create a pie chart visualizing these counts.\n\nI should also make sure to handle any exceptions or errors that might occur during the API requests or sentiment analysis.\n\nLet me think about the structure of the script. I'll probably have functions for setting up the API, fetching tweets, analyzing sentiment, and plotting the results. This will make the code organized and easier to manage.\n\nAlso, I should consider rate limits imposed by the Twitter API to avoid hitting them, especially if I'm fetching a large number of tweets.\n\nLet me outline the steps again:\n\n1. Install necessary libraries: Tweepy, TextBlob, Matplotlib.\n\n2. Set up Twitter API credentials.\n\n3. Authenticate and create an API object using Tweepy.\n\n4. Define a function to fetch tweets based on a hashtag and a limit.\n\n5. Define a function to analyze sentiment of each tweet using TextBlob.\n\n6. Categorize sentiments into positive, negative, and neutral.\n\n7. Define a function to plot a pie chart of the sentiment categories.\n\n8. Put it all together in the main script, handling any exceptions.\n\nI think that covers the main parts. Now, I'll start working on the code.\n\nFirst, I'll set up the environment and install the required libraries.\n\n## Final Solution\nTo accomplish this task, we will create a Python script that interacts with the Twitter API using the Tweepy library, analyzes the sentiment of tweets containing a specific hashtag using TextBlob, and visualizes the results using Matplotlib.\n\n### Prerequisites\n\n1. **Twitter API Credentials**: You need to create a Twitter Developer account and obtain your API keys and access tokens.\n2. **Python Libraries**: Install the required libraries using pip:\n   ```bash\n   pip install tweepy textblob matplotlib\n   ```\n\n### Solution Code\n\n```python\nimport tweepy\nfrom textblob import TextBlob\nimport matplotlib.pyplot as plt\n\n# Twitter API credentials\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Authenticate with Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ndef fetch_tweets(hashtag, limit=100):\n    \"\"\"Fetch tweets containing the specified hashtag.\"\"\"\n    try:\n        tweets = tweepy.Cursor(api.search_tweets, q=hashtag, lang='en').items(limit)\n        return [tweet.text for tweet in tweets]\n    except tweepy.TweepError as e:\n        print(f\"Error fetching tweets: {e}\")\n        return []\n\ndef analyze_sentiment(tweets):\n    \"\"\"Analyze the sentiment of each tweet and categorize them.\"\"\"\n    positive, negative, neutral = 0, 0, 0\n    for tweet in tweets:\n        analysis = TextBlob(tweet)\n        polarity = analysis.sentiment.polarity\n        if polarity > 0:\n            positive += 1\n        elif polarity < 0:\n            negative += 1\n        else:\n            neutral += 1\n    return positive, negative, neutral\n\ndef plot_sentiment(positive, negative, neutral):\n    \"\"\"Plot the sentiment analysis results in a pie chart.\"\"\"\n    labels = ['Positive', 'Negative', 'Neutral']\n    sizes = [positive, negative, neutral]\n    colors = ['green', 'red', 'yellow']\n    plt.pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%')\n    plt.axis('equal')\n    plt.show()\n\ndef main():\n    hashtag = input(\"Enter the hashtag to search for: \")\n    limit = int(input(\"Enter the number of tweets to fetch: \"))\n    \n    tweets = fetch_tweets(hashtag, limit)\n    if not tweets:\n        print(\"No tweets found.\")\n        return\n    \n    positive, negative, neutral = analyze_sentiment(tweets)\n    plot_sentiment(positive, negative, neutral)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Authentication**: The script authenticates with the Twitter API using credentials provided by the user.\n2. **Fetch Tweets**: It fetches a specified number of tweets containing a given hashtag.\n3. **Sentiment Analysis**: Each tweet's sentiment is analyzed using TextBlob, categorizing it as positive, negative, or neutral.\n4. **Visualization**: The results are visualized using a pie chart to show the distribution of sentiments.\n\nThis script provides a simple way to perform sentiment analysis on Twitter data and visualize the results, which can be useful for understanding public opinion on a particular topic."
    }
]