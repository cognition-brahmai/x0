[
    {
        "role": "user",
        "content": "Write a Java program that interacts with Azure Blob Storage to upload files, download files, list blobs in a container, and delete blobs."
    },
    {
        "role": "assistant",
        "content": "I can definitely help you with that! Working with Azure Blob Storage from a Java application involves using the Azure Storage SDK for Java. Below, I'll guide you through the steps to create a Java program that can upload, download, list, and delete blobs in an Azure Blob Storage container.\n\n### Prerequisites\n\n1. **Azure Storage Account**: You need to have an Azure Storage account. If you don't have one, you can create it from the Azure portal.\n2. **Connection String**: You'll need the connection string for your storage account. This string contains the authentication information to access your storage account.\n3. **Java Development Kit (JDK)**: Make sure you have JDK installed on your machine.\n4. **Maven**: We'll use Maven to manage dependencies.\n\n### Setting Up the Project\n\n1. **Create a new Maven project**: You can create a new Maven project using your favorite IDE or from the command line.\n2. **Add Azure Storage SDK dependency**: Open your `pom.xml` file and add the following dependency:\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n    <version>12.14.1</version>\n</dependency>\n```\n\n### Java Program\n\nBelow is a sample Java program that demonstrates how to interact with Azure Blob Storage:\n\n```java\nimport com.azure.storage.blob.BlobContainerClient;\nimport com.azure.storage.blob.BlobServiceClient;\nimport com.azure.storage.blob.BlobServiceClientBuilder;\nimport com.azure.storage.blob.models.BlobItem;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class AzureBlobStorageExample {\n\n    private static final String CONNECTION_STRING = \"your_connection_string\";\n    private static final String CONTAINER_NAME = \"your_container_name\";\n\n    public static void main(String[] args) {\n        BlobServiceClient blobServiceClient = new BlobServiceClientBuilder()\n                .connectionString(CONNECTION_STRING)\n                .buildClient();\n\n        BlobContainerClient containerClient = blobServiceClient.getBlobContainerClient(CONTAINER_NAME);\n\n        // Upload a file\n        Path filePath = Paths.get(\"path_to_your_local_file\");\n        String blobName = \"uploaded-file.txt\";\n        containerClient.upload(filePath.toString(), true);\n        System.out.println(\"Uploaded blob: \" + blobName);\n\n        // Download a file\n        blobName = \"uploaded-file.txt\";\n        Path downloadPath = Paths.get(\"downloaded-file.txt\");\n        containerClient.getBlobClient(blobName).downloadToFile(downloadPath.toString());\n        System.out.println(\"Downloaded blob: \" + blobName);\n\n        // List blobs in the container\n        System.out.println(\"Listing blobs in the container:\");\n        for (BlobItem blobItem : containerClient.listBlobs()) {\n            System.out.println(blobItem.getName());\n        }\n\n        // Delete a blob\n        blobName = \"uploaded-file.txt\";\n        containerClient.getBlobClient(blobName).delete();\n        System.out.println(\"Deleted blob: \" + blobName);\n    }\n}\n```\n\n### Explanation\n\n1. **Connect to Azure Blob Storage**:\n   - Use `BlobServiceClientBuilder` to create a `BlobServiceClient` using your connection string.\n   - Get a `BlobContainerClient` for your specific container.\n\n2. **Upload a File**:\n   - Specify the local file path and the name you want to give to the blob in the container.\n   - Use the `upload` method of `BlobContainerClient` to upload the file.\n\n3. **Download a File**:\n   - Specify the name of the blob you want to download and the local path where you want to save it.\n   - Use the `downloadToFile` method of `BlobClient` to download the blob.\n\n4. **List Blobs**:\n   - Use the `listBlobs` method of `BlobContainerClient` to get a list of all blobs in the container.\n   - Iterate through the list and print the names of the blobs.\n\n5. **Delete a Blob**:\n   - Specify the name of the blob you want to delete.\n   - Use the `delete` method of `BlobClient` to delete the blob.\n\n### Notes\n\n- Replace `\"your_connection_string\"` with your actual Azure Storage connection string.\n- Replace `\"your_container_name\"` with the name of your container.\n- Ensure that the container exists before running the program. If not, you can create it using the Azure portal or programmatically.\n\nThis should give you a good starting point for interacting with Azure Blob Storage from a Java application. If you have any specific questions or need further assistance, feel free to ask!"
    }
]