[
    {
        "role": "user",
        "content": "Write a Bash script that monitors the CPU usage of a given process. The script should take the process id as an argument and print out the CPU usage every second. If the CPU usage exceeds 50% for more than 5 seconds, the script should kill the process and exit. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Bash script that monitors the CPU usage of a specific process. The script needs to take the process ID (PID) as an argument and then print out the CPU usage every second. If the CPU usage goes above 50% and stays there for more than 5 seconds, the script should kill the process and exit.\n\nFirst, I need to make sure I understand all the requirements:\n\n1. **Take PID as an argument:** So, the script will be run with the process ID provided when it's started.\n\n2. **Monitor CPU usage:** I need to find a way to get the CPU usage of that specific process.\n\n3. **Print CPU usage every second:** So, there should be some kind of loop that runs every second and outputs the current CPU usage.\n\n4. **Check if CPU usage exceeds 50% for more than 5 seconds:** This means I need to keep track of how long the CPU usage has been above 50%.\n\n5. **Kill the process if condition is met:** If the CPU usage is above 50% for more than 5 seconds, the script should terminate the process.\n\nOkay, let's break this down step by step.\n\n**Step 1: Taking PID as an argument**\n\nIn Bash, I can access command-line arguments using $1, $2, etc. Since the PID is the first argument, I'll use $1.\n\nI should also add some error checking to make sure that a PID is provided and that it's a valid process.\n\n**Step 2: Monitoring CPU usage**\n\nTo get the CPU usage of a specific process, I can use the `top` command or `ps` command.\n\n`top` is interactive, so it might be a bit tricky to use in a script. `ps` seems more straightforward for this purpose.\n\nThe `ps` command can show CPU usage with the `-o` option to specify output format.\n\nFor example:\n\n`ps -p $PID -o %cpu`\n\nThis should give me the CPU usage in percentage for the specified PID.\n\n**Step 3: Printing CPU usage every second**\n\nI'll need a loop that runs every second and prints the CPU usage.\n\nI can use a `while` loop combined with `sleep 1` to achieve this.\n\nSomething like:\n\n```\n\nwhile true; do\n\n    cpu_usage=$(ps -p $PID -o %cpu)\n\n    echo \"CPU usage: $cpu_usage%\"\n\n    sleep 1\n\ndone\n\n```\n\n**Step 4: Tracking CPU usage over time**\n\nI need to monitor if the CPU usage exceeds 50% for more than 5 seconds.\n\nThis means I have to keep track of how long the CPU usage has been above 50%.\n\nI can use a counter that increments every second the CPU usage is above 50%, and resets when it drops below.\n\nOnce the counter reaches 5, I'll kill the process.\n\n**Step 5: Killing the process**\n\nIf the CPU usage exceeds 50% for more than 5 seconds, I'll use the `kill` command to terminate the process.\n\n`kill $PID`\n\nAlso, I should probably add some output to indicate that the process was killed.\n\n**Putting it all together**\n\nNow, I'll try to write the script incorporating all these steps.\n\nI'll also add some error handling to make sure that the PID is provided and that it corresponds to a running process.\n\nHere's a rough draft of the script:\n\n```\n\n#!/bin/bash\n\nPID=$1\n\nif [ -z \"$PID\" ]; then\n\n    echo \"Please provide a process ID.\"\n\n    exit 1\n\nfi\n\nif ! ps -p $PID > /dev/null; then\n\n    echo \"Process with PID $PID not found.\"\n\n    exit 1\n\nfi\n\necho \"Monitoring CPU usage for PID $PID...\"\n\ncounter=0\n\nwhile true; do\n\n    cpu_usage=$(ps -p $PID -o %cpu | tail -n1)\n\n    echo \"CPU usage: $cpu_usage%\"\n\n    if (( $(echo \"$cpu_usage > 50\" | bc -l) )); then\n\n        counter=$((counter+1))\n\n        if [ $counter -gt 5 ]; then\n\n            echo \"CPU usage exceeded 50% for more than 5 seconds. Killing process $PID.\"\n\n            kill $PID\n\n            exit 0\n\n        fi\n\n    else\n\n        counter=0\n\n    fi\n\n    sleep 1\n\ndone\n\n```\n\n**Explanation:**\n\n1. **Check for PID argument:** Ensure that a PID is provided; otherwise, exit with an error message.\n\n2. **Validate PID:** Use `ps -p $PID` to check if the process exists. If not, exit with an error message.\n\n3. **Monitoring loop:**\n\n- Use `ps -p $PID -o %cpu | tail -n1` to get the CPU usage. `tail -n1` is used to avoid the header.\n\n- Print the CPU usage.\n\n- If CPU usage is above 50%, increment the counter.\n\n- If the counter exceeds 5, kill the process and exit.\n\n- If CPU usage drops below 50%, reset the counter.\n\n- Wait for 1 second before the next iteration.\n\n**Potential improvements:**\n\n- Handle cases where `ps` command output changes or is not as expected.\n\n- Add more graceful handling for process termination.\n\n- Consider using a more precise way to measure CPU usage, like `top` or `pidstat`, but `ps` should suffice for this purpose.\n\n- Maybe add an option to just warn before killing the process.\n\nBut for the given requirements, this should work fine.\n\n**Testing the script:**\n\nTo test this script, I'll need to:\n\n1. Create a process that consumes CPU.\n\n2. Run the script with that process's PID.\n\n3. Verify that the script correctly monitors the CPU usage and kills the process if it exceeds 50% for more than 5 seconds.\n\nI can create a CPU-intensive process using a loop in another script or use a tool like `stress`.\n\nFor example, using `stress`:\n\n`stress --cpu 2`\n\nThen, find its PID and pass it to my monitoring script.\n\nAlternatively, I can write a simple CPU-intensive script:\n\n```\n\n#!/bin/bash\n\nwhile true; do\n\n    echo \"Working...\"\n\ndone\n\n```\n\nRun this script, get its PID, and then monitor it with my script.\n\nBy observing the output, I can confirm if the monitoring and killing actions are performed as expected.\n\n**Conclusion:**\n\nI've developed a Bash script that meets the requirements for monitoring and managing process CPU usage. The script takes a process ID as an argument, checks if the process exists, and then enters a loop where it checks the CPU usage every second. If the CPU usage exceeds 50% for more than 5 consecutive seconds, the script kills the process. Error handling is included to manage cases where no PID is provided or the specified PID does not correspond to an active process. This script provides a straightforward solution for monitoring and controlling process resource usage on a system."
    }
]