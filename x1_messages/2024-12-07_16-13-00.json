[
    {
        "role": "user",
        "content": "Write a Golang program that connects to an Elasticsearch instance, creates an index, inserts sample documents, and performs a basic text search on the inserted documents. Use command line arguments for specifying the Elasticsearch URL, index name, and search query."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Golang program that connects to an Elasticsearch instance. Let's break down the tasks you need to accomplish:\n\n1. **Connect to an Elasticsearch instance:** You'll need to use the official Elasticsearch Go client.\n2. **Create an index:** Specify the index name via command line arguments.\n3. **Insert sample documents:** You can hardcode some sample documents for this example.\n4. **Perform a basic text search:** Again, the search query should be provided via command line arguments.\n\nFirst, make sure you have the Elasticsearch Go client installed. You can install it using:\n\n```sh\ngo get github.com/elastic/go-elasticsearch/v8\n```\n\nNow, let's start writing the code step by step.\n\n### Step 1: Setting up the main function and command line arguments\n\nWe'll use the `flag` package to handle command line arguments for Elasticsearch URL, index name, and search query.\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\n\t\"github.com/elastic/go-elasticsearch/v8\"\n\t\"github.com/elastic/go-elasticsearch/v8/esapi\"\n)\n\nfunc main() {\n\t// Define command line flags\n\tesURL := flag.String(\"es-url\", \"http://localhost:9200\", \"Elasticsearch URL\")\n\tindexName := flag.String(\"index\", \"sample_index\", \"Index name\")\n\tsearchQuery := flag.String(\"query\", \"\", \"Search query\")\n\n\tflag.Parse()\n\n\t// Create Elasticsearch client\n\tes, err := elasticsearch.NewClient(elasticsearch.Config{\n\t\tAddresses: []*string{stringToPointer(*esURL)},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating Elasticsearch client: %s\", err)\n\t}\n\n\t// Check if index exists\n\texists, err := indexExists(es, *indexName)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error checking index existence: %s\", err)\n\t}\n\n\tif !exists {\n\t\t// Create index\n\t\tif err := createIndex(es, *indexName); err != nil {\n\t\t\tlog.Fatalf(\"Error creating index: %s\", err)\n\t\t}\n\t}\n\n\t// Insert sample documents\n\tif err := insertDocuments(es, *indexName); err != nil {\n\t\tlog.Fatalf(\"Error inserting documents: %s\", err)\n\t}\n\n\t// Perform search\n\tif *searchQuery != \"\" {\n\t\tif err := performSearch(es, *indexName, *searchQuery); err != nil {\n\t\t\tlog.Fatalf(\"Error performing search: %s\", err)\n\t\t}\n\t} else {\n\t\tlog.Println(\"No search query provided.\")\n\t}\n}\n\n// Helper function to convert string to *string\nfunc stringToPointer(s string) *string {\n\treturn &s\n}\n```\n\n### Step 2: Check if index exists\n\nWe need a function to check if the specified index already exists.\n\n```go\nfunc indexExists(es *elasticsearch.Client, index string) (bool, error) {\n\tres, err := es.Indices.Exists([]string{index})\n\tif err != nil {\n\t\treturn false, err\n\t}\n\tdefer res.Body.Close()\n\n\tif res.IsError() {\n\t\treturn false, fmt.Errorf(\"error checking index existence: %s\", res.String())\n\t}\n\n\treturn res.StatusCode == 200, nil\n}\n```\n\n### Step 3: Create an index\n\nIf the index doesn't exist, we'll create it.\n\n```go\nfunc createIndex(es *elasticsearch.Client, index string) error {\n\treq := esapi.IndicesCreateRequest{\n\t\tIndex: index,\n\t\tBody:  strings.NewReader(`{\"settings\": {\"number_of_shards\": 1}}`),\n\t}\n\n\tres, err := req.Do(context.Background(), es)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer res.Body.Close()\n\n\tif res.IsError() {\n\t\treturn fmt.Errorf(\"error creating index: %s\", res.String())\n\t}\n\n\tlog.Printf(\"Index %s created\\n\", index)\n\treturn nil\n}\n```\n\n### Step 4: Insert sample documents\n\nLet's insert a few sample documents into the index.\n\n```go\nfunc insertDocuments(es *elasticsearch.Client, index string) error {\n\tsampleDocs := []map[string]interface{}{\n\t\t{\"title\": \"First document\", \"content\": \"This is the first sample document.\"},\n\t\t{\"title\": \"Second document\", \"content\": \"This is the second sample document.\"},\n\t\t{\"title\": \"Third document\", \"content\": \"This is the third sample document.\"},\n\t}\n\n\tfor i, doc := range sampleDocs {\n\t\tid := fmt.Sprintf(\"%d\", i+1)\n\t\treq := esapi.IndexRequest{\n\t\t\tIndex:      index,\n\t\t\tDocumentID: id,\n\t\t\tBody:       strings.NewReader(fmt.Sprintf(`{\"title\": \"%s\", \"content\": \"%s\"}`, doc[\"title\"], doc[\"content\"])),\n\t\t\tRefresh:    \"true\",\n\t\t}\n\n\t\tres, err := req.Do(context.Background(), es)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t\tdefer res.Body.Close()\n\n\t\tif res.IsError() {\n\t\t\treturn fmt.Errorf(\"error indexing document %s: %s\", id, res.String())\n\t\t}\n\n\t\tlog.Printf(\"Document %s indexed\\n\", id)\n\t}\n\n\treturn nil\n}\n```\n\n### Step 5: Perform a basic text search\n\nFinally, perform a search based on the provided query.\n\n```go\nfunc performSearch(es *elasticsearch.Client, index string, query string) error {\n\tsearchSource := fmt.Sprintf(`{\n\t\t\"query\": {\n\t\t\t\"multi_match\": {\n\t\t\t\t\"query\": \"%s\",\n\t\t\t\t\"fields\": [\"title\", \"content\"]\n\t\t\t}\n\t\t}\n\t}`, query)\n\n\treq := esapi.SearchRequest{\n\t\tIndex: []string{index},\n\t\tBody:  strings.NewReader(searchSource),\n\t}\n\n\tres, err := req.Do(context.Background(), es)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer res.Body.Close()\n\n\tif res.IsError() {\n\t\treturn fmt.Errorf(\"error searching: %s\", res.String())\n\t}\n\n\tvar result map[string]interface{}\n\tif err := json.NewDecoder(res.Body).Decode(&result); err != nil {\n\t\treturn err\n\t}\n\n\tfmt.Println(\"Search results:\")\n\tfor _, hit := range result[\"hits\"].(map[string]interface{})[\"hits\"].([]interface{}) {\n\t\tsource := hit.(map[string]interface{})[\"_source\"]\n\t\tfmt.Printf(\"Title: %s, Content: %s\\n\", source[\"title\"], source[\"content\"])\n\t}\n\n\treturn nil\n}\n```\n\n### Putting it all together\n\nMake sure to import all necessary packages at the top of your file:\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"strings\"\n)\n```\n\nThis should cover all the requirements you've specified. You can run the program with command line arguments like:\n\n```sh\ngo run main.go -es-url http://localhost:9200 -index my_index -query \"sample document\"\n```\n\nThis will connect to Elasticsearch, create the index if it doesn't exist, insert sample documents, and perform a search with the provided query."
    }
]