[
    {
        "role": "user",
        "content": "Create a C# application that uses multithreading to download multiple files concurrently from a list of URLs, displaying progress information and saving downloaded files to disk.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through creating a C# application that downloads multiple files from URLs concurrently using multithreading, shows progress, and saves the files to disk. We'll use .NET's `HttpClient` for downloading and `Task` for handling concurrency.\n\n### Step 1: Set Up Your Project\n\nFirst, create a new Console Application project in Visual Studio or using the .NET CLI.\n\n```bash\ndotnet new console -n MultiThreadedDownloader\ncd MultiThreadedDownloader\n```\n\n### Step 2: Install Required Packages\n\nYou'll need `System.Net.Http` for making HTTP requests. It's usually included by default, but if not, you can add it:\n\n```bash\ndotnet add package System.Net.Http\n```\n\n### Step 3: Design the Application\n\nWe'll create a class to handle downloads, using async methods to manage concurrency and progress reporting.\n\n### Step 4: Implement the Downloader Class\n\nCreate a new class, say `FileDownloader.cs`, and implement the download logic.\n\n```csharp\nusing System;\nusing System.IO;\nusing System.Net.Http;\nusing System.Threading.Tasks;\n\npublic class FileDownloader\n{\n    private readonly HttpClient _httpClient;\n\n    public FileDownloader()\n    {\n        _httpClient = new HttpClient();\n    }\n\n    public async Task DownloadFileAsync(string url, string filePath)\n    {\n        try\n        {\n            using var response = await _httpClient.GetAsync(url, HttpCompletionOption.ResponseHeadersRead);\n            response.EnsureSuccessStatusCode();\n\n            using var contentStream = await response.Content.ReadAsStreamAsync();\n            using var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write, FileShare.None, 8192, true);\n\n            await CopyStreamWithProgress(contentStream, fileStream, response.Content.Headers.ContentLength?.Value ?? 0);\n            Console.WriteLine($\"Download completed: {url}\");\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine($\"Error downloading {url}: {ex.Message}\");\n        }\n    }\n\n    private static async Task CopyStreamWithProgress(Stream input, Stream output, long totalBytes)\n    {\n        byte[] buffer = new byte[8192];\n        int read;\n        long totalRead = 0;\n\n        while ((read = await input.ReadAsync(buffer, 0, buffer.Length)) > 0)\n        {\n            await output.WriteAsync(buffer, 0, read);\n            totalRead += read;\n            double progress = totalBytes > 0 ? (double)totalRead / totalBytes : 0;\n            Console.WriteLine($\"Downloaded: {totalRead} of {totalBytes} bytes ({progress:P})\");\n        }\n    }\n}\n```\n\n### Step 5: Manage Multiple Downloads\n\nIn your `Program.cs`, manage a list of URLs and download them concurrently.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.IO;\nusing System.Threading.Tasks;\n\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        var urls = new List<string>\n        {\n            \"http://example.com/file1.zip\",\n            \"http://example.com/file2.zip\",\n            // Add more URLs as needed\n        };\n\n        var downloader = new FileDownloader();\n        var tasks = new List<Task>();\n\n        foreach (var url in urls)\n        {\n            string fileName = Path.GetFileName(new Uri(url).LocalPath);\n            string filePath = Path.Combine(Directory.GetCurrentDirectory(), fileName);\n            tasks.Add(downloader.DownloadFileAsync(url, filePath));\n        }\n\n        await Task.WhenAll(tasks);\n        Console.WriteLine(\"All downloads completed.\");\n    }\n}\n```\n\n### Explanation\n\n1. **FileDownloader Class**: Handles individual file downloads with progress reporting.\n   - `DownloadFileAsync`: Downloads a file from a URL and saves it to a specified path.\n   - `CopyStreamWithProgress`: Copies data from the HTTP response to the file stream, updating progress.\n\n2. **Program Class**: Manages the list of URLs and initiates downloads concurrently.\n   - Creates a `FileDownloader` instance.\n   - Starts download tasks for each URL and waits for all to complete using `Task.WhenAll`.\n\nThis setup ensures that files are downloaded in parallel, making efficient use of network resources, and provides real-time progress information for each download."
    }
]