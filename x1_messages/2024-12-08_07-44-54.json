[
    {
        "role": "user",
        "content": "Write a C++ program to implement the merge sort algorithm on an array of integers. The program should take input from the user for the size of the array and its elements, then display the sorted array after performing the merge sort."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Merge sort is a popular sorting algorithm that uses the divide-and-conquer approach. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.\n\nHere's a C++ program that implements the merge sort algorithm:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to merge two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nvoid merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    // Create temp arrays\n    int L[n1], R[n2];\n\n    // Copy data to temp arrays L[] and R[]\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n    int i = 0; // Initial index of first subarray\n    int j = 0; // Initial index of second subarray\n    int k = l; // Initial index of merged subarray\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of L[], if there are any\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of R[], if there are any\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// l is for the starting index, r is ending index of the subarray of arr to be sorted\nvoid mergeSort(int arr[], int l, int r) {\n    if (l >= r) {\n        return; // Returns recursively\n    }\n    int m = l + (r - l) / 2;\n    mergeSort(arr, l, m);\n    mergeSort(arr, m + 1, r);\n    merge(arr, l, m, r);\n}\n\n// Function to print an array\nvoid printArray(int A[], int size) {\n    for (int i = 0; i < size; i++)\n        cout << A[i] << \" \";\n    cout << endl;\n}\n\n// Driver code\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n    int arr[n];\n    cout << \"Enter the elements: \";\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n    cout << \"Given array is \\n\";\n    printArray(arr, n);\n    mergeSort(arr, 0, n - 1);\n    cout << \"\\nSorted array is \\n\";\n    printArray(arr, n);\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **merge Function**: This function merges two sorted subarrays of `arr[]`. The first subarray is `arr[l..m]` and the second subarray is `arr[m+1..r]`.\n\n2. **mergeSort Function**: This is a recursive function that divides the array into two halves, sorts the individual halves, and then merges them.\n\n3. **printArray Function**: This function is used to print the elements of the array.\n\n4. **main Function**: This is the driver code where the user inputs the number of elements and the elements themselves. It then calls `mergeSort` to sort the array and prints the sorted array.\n\nYou can compile and run this program using any C++ compiler. Make sure to input the number of elements followed by the elements themselves when prompted. The program will display the sorted array after performing the merge sort."
    }
]