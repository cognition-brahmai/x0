[
    {
        "role": "user",
        "content": "Implement a Java program which simulates a simple banking system. It should have options for creating new accounts, depositing money, withdrawing money, transferring money between accounts, and checking account balance. Use OOP principles and make sure each class has a single responsibility. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple banking system in Java, using object-oriented programming principles. The system should allow users to create new accounts, deposit and withdraw money, transfer money between accounts, and check balances. And importantly, each class should have a single responsibility.\n\nFirst, I need to think about the main components of this system. It seems like there should be a class representing a Bank Account, since that's the core entity in a banking system. Each account should have some basic properties like an account number, account holder's name, and balance. It should also have methods to deposit, withdraw, and transfer money.\n\nBut wait, transferring money is a bit more complex because it involves two accounts: the sender and the receiver. So maybe the transfer functionality should not be in the Account class, but in a higher-level class that manages multiple accounts, like a Bank class.\n\nYes, that makes sense. The Bank class can handle operations that involve multiple accounts, like transfers, and it can also manage the creation of new accounts.\n\nSo, let's sketch out the classes:\n\n1. **Account**\n\n- Properties: accountNumber (unique), holderName, balance\n\n- Methods: deposit(amount), withdraw(amount), getBalance()\n\n2. **Bank**\n\n- Properties: a collection of Account objects\n\n- Methods: createAccount(holderName), deposit(accountNumber, amount), withdraw(accountNumber, amount), transfer(senderAccountNumber, receiverAccountNumber, amount), getBalance(accountNumber)\n\nHmm, I need to think about how to ensure that account numbers are unique. Maybe the Bank class can manage a counter that increments every time a new account is created.\n\nAlso, for the collection of accounts, I can use a Map where the account number is the key and the Account object is the value. That way, I can quickly look up an account by its number.\n\nLet me think about error handling. For example, what if someone tries to withdraw more money than the balance allows? Or what if they try to transfer money to an account that doesn't exist?\n\nI should probably throw exceptions in such cases. For instance, I can create a custom exception called InsufficientBalanceException for withdraws that exceed the balance, and another one called InvalidAccountException if an account doesn't exist.\n\nOkay, so I'll need to define these exceptions as well.\n\nNow, for the user interface, since the task is to implement a Java program, I'll assume a command-line interface where the user can enter commands like \"create account\", \"deposit\", etc.\n\nI can use a simple loop that reads user input and calls the appropriate methods in the Bank class.\n\nLet me outline the steps:\n\n1. Create a Bank object.\n\n2. Start a loop that reads user commands.\n\n3. Parse the command and call the corresponding method in the Bank class.\n\n4. Display the result or any error messages.\n\nFor example, the commands could be:\n\n- \"create [holderName]\" to create a new account\n\n- \"deposit [accountNumber] [amount]\" to deposit money\n\n- \"withdraw [accountNumber] [amount]\" to withdraw money\n\n- \"transfer [senderAccount] [receiverAccount] [amount]\" to transfer money\n\n- \"balance [accountNumber]\" to check balance\n\n- \"exit\" to quit the program\n\nI need to make sure that the program handles invalid commands and inputs gracefully.\n\nAlright, let's start by defining the Account class.\n\n## Final Solution\nTo create a simple banking system in Java using object-oriented principles, we need to design classes that handle account management, transactions, and user interactions effectively. Below is a step-by-step implementation:\n\n### Step 1: Define the Account Class\n\nThe `Account` class represents a bank account with basic properties and methods.\n\n```java\npublic class Account {\n    private String accountNumber;\n    private String holderName;\n    private double balance;\n\n    public Account(String accountNumber, String holderName) {\n        this.accountNumber = accountNumber;\n        this.holderName = holderName;\n        this.balance = 0.0;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n        } else {\n            throw new IllegalArgumentException(\"Amount must be positive.\");\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n            } else {\n                throw new IllegalArgumentException(\"Insufficient balance.\");\n            }\n        } else {\n            throw new IllegalArgumentException(\"Amount must be positive.\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    public String getHolderName() {\n        return holderName;\n    }\n}\n```\n\n### Step 2: Define the Bank Class\n\nThe `Bank` class manages multiple accounts and handles operations involving accounts.\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Bank {\n    private Map<String, Account> accounts;\n    private static int accountCounter = 1000; // Starting account number\n\n    public Bank() {\n        accounts = new HashMap<>();\n    }\n\n    public String createAccount(String holderName) {\n        String accountNumber = String.valueOf(accountCounter++);\n        Account newAccount = new Account(accountNumber, holderName);\n        accounts.put(accountNumber, newAccount);\n        return accountNumber;\n    }\n\n    public void deposit(String accountNumber, double amount) {\n        Account account = accounts.get(accountNumber);\n        if (account != null) {\n            account.deposit(amount);\n        } else {\n            throw new IllegalArgumentException(\"Account does not exist.\");\n        }\n    }\n\n    public void withdraw(String accountNumber, double amount) {\n        Account account = accounts.get(accountNumber);\n        if (account != null) {\n            account.withdraw(amount);\n        } else {\n            throw new IllegalArgumentException(\"Account does not exist.\");\n        }\n    }\n\n    public void transfer(String fromAccount, String toAccount, double amount) {\n        if (accounts.containsKey(fromAccount) && accounts.containsKey(toAccount)) {\n            Account from = accounts.get(fromAccount);\n            Account to = accounts.get(toAccount);\n            from.withdraw(amount);\n            to.deposit(amount);\n        } else {\n            throw new IllegalArgumentException(\"One or both accounts do not exist.\");\n        }\n    }\n\n    public double getBalance(String accountNumber) {\n        Account account = accounts.get(accountNumber);\n        if (account != null) {\n            return account.getBalance();\n        } else {\n            throw new IllegalArgumentException(\"Account does not exist.\");\n        }\n    }\n}\n```\n\n### Step 3: Create a Command-Line Interface\n\nThe `BankingSystem` class handles user interactions through the command line.\n\n```java\nimport java.util.Scanner;\n\npublic class BankingSystem {\n    private Bank bank;\n    private Scanner scanner;\n\n    public BankingSystem() {\n        bank = new Bank();\n        scanner = new Scanner(System.in);\n    }\n\n    public void start() {\n        System.out.println(\"Welcome to the Simple Banking System!\");\n\n        while (true) {\n            System.out.println(\"\\nAvailable commands:\");\n            System.out.println(\"create [holderName] - Create a new account\");\n            System.out.println(\"deposit [accountNumber] [amount] - Deposit money\");\n            System.out.println(\"withdraw [accountNumber] [amount] - Withdraw money\");\n            System.out.println(\"transfer [fromAccount] [toAccount] [amount] - Transfer money\");\n            System.out.println(\"balance [accountNumber] - Check balance\");\n            System.out.println(\"exit - Quit the program\");\n\n            System.out.print(\"\\nEnter a command: \");\n            String input = scanner.nextLine();\n            processCommand(input);\n        }\n    }\n\n    private void processCommand(String input) {\n        String[] parts = input.split(\" \");\n        String command = parts[0].toLowerCase();\n\n        try {\n            switch (command) {\n                case \"create\":\n                    if (parts.length == 2) {\n                        String accountNumber = bank.createAccount(parts[1]);\n                        System.out.println(\"Account created successfully. Account Number: \" + accountNumber);\n                    } else {\n                        System.out.println(\"Invalid command. Usage: create [holderName]\");\n                    }\n                    break;\n                case \"deposit\":\n                    if (parts.length == 3) {\n                        String accountNumber = parts[1];\n                        double amount = Double.parseDouble(parts[2]);\n                        bank.deposit(accountNumber, amount);\n                        System.out.println(\"Deposit successful.\");\n                    } else {\n                        System.out.println(\"Invalid command. Usage: deposit [accountNumber] [amount]\");\n                    }\n                    break;\n                case \"withdraw\":\n                    if (parts.length == 3) {\n                        String accountNumber = parts[1];\n                        double amount = Double.parseDouble(parts[2]);\n                        bank.withdraw(accountNumber, amount);\n                        System.out.println(\"Withdrawal successful.\");\n                    } else {\n                        System.out.println(\"Invalid command. Usage: withdraw [accountNumber] [amount]\");\n                    }\n                    break;\n                case \"transfer\":\n                    if (parts.length == 4) {\n                        String fromAccount = parts[1];\n                        String toAccount = parts[2];\n                        double amount = Double.parseDouble(parts[3]);\n                        bank.transfer(fromAccount, toAccount, amount);\n                        System.out.println(\"Transfer successful.\");\n                    } else {\n                        System.out.println(\"Invalid command. Usage: transfer [fromAccount] [toAccount] [amount]\");\n                    }\n                    break;\n                case \"balance\":\n                    if (parts.length == 2) {\n                        String accountNumber = parts[1];\n                        double balance = bank.getBalance(accountNumber);\n                        System.out.println(\"Balance: \" + balance);\n                    } else {\n                        System.out.println(\"Invalid command. Usage: balance [accountNumber]\");\n                    }\n                    break;\n                case \"exit\":\n                    System.out.println(\"Goodbye!\");\n                    scanner.close();\n                    System.exit(0);\n                    break;\n                default:\n                    System.out.println(\"Unknown command.\");\n            }\n        } catch (Exception e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    public static void main(String[] args) {\n        new BankingSystem().start();\n    }\n}\n```\n\n### Explanation\n\n1. **Account Class**: Manages individual bank accounts with methods for depositing, withdrawing, and checking balances.\n2. **Bank Class**: Manages multiple accounts and handles operations like creating accounts, depositing, withdrawing, transferring funds, and checking balances.\n3. **BankingSystem Class**: Provides a command-line interface for user interactions, allowing users to input commands to perform banking operations.\n\nThis design ensures that each class has a single responsibility, adhering to good OOP principles. The system is simple and handles basic banking operations effectively."
    }
]