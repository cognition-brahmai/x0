[
    {
        "role": "user",
        "content": "Write a program in Java that reads a CSV file and outputs its contents as JSON.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Java program that reads a CSV file and converts it into JSON format. I'm not too familiar with handling files in Java, but I'll give it a shot. First things first, I need to understand what CSV and JSON are.\n\nCSV stands for Comma-Separated Values, which is a simple file format where each line corresponds to a row of data, and each field within the row is separated by a comma. JSON, on the other hand, is JavaScript Object Notation, a lightweight data-interchange format that is easy for humans to read and write and easy for machines to parse and generate.\n\nSo, my goal is to take a CSV file and transform it into a JSON object or array, depending on the structure of the CSV.\n\nI remember that in Java, handling files involves using classes from the `java.io` package, like `FileReader` and `BufferedReader` for reading files. But I also recall that there are libraries that can make handling CSV files easier, such as OpenCSV.\n\nMaybe I should look into using OpenCSV for reading the CSV file, and then use a JSON library to construct the JSON output. For JSON handling, I've heard of libraries like Jackson or Gson. Gson seems straightforward to use, so maybe I'll go with that.\n\nFirst, I need to add the dependencies for OpenCSV and Gson to my project. Since I'm using Maven, I'll add the following dependencies to my `pom.xml`:\n\n```xml\n<dependencies>\n    <!-- Other dependencies -->\n\n    <!-- OpenCSV -->\n    <dependency>\n        <groupId>com.opencsv</groupId>\n        <artifactId>opencsv</artifactId>\n        <version>5.5.2</version>\n    </dependency>\n\n    <!-- Gson -->\n    <dependency>\n        <groupId>com.google.code.gson</groupId>\n        <artifactId>gson</artifactId>\n        <version>2.8.8</version>\n    </dependency>\n</dependencies>\n```\n\nNow, I need to think about the structure of the CSV file. Assuming the first row contains the headers, and the subsequent rows contain the data. For example:\n\n```\nname,age,city\nJohn,30,New York\nAlice,25,Los Angeles\nBob,35,Chicago\n```\n\nI want to read this CSV and convert it into a JSON array of objects, where each object represents a row in the CSV.\n\nSo, the JSON output for the above CSV would look like:\n\n```json\n[\n    {\"name\": \"John\", \"age\": \"30\", \"city\": \"New York\"},\n    {\"name\": \"Alice\", \"age\": \"25\", \"city\": \"Los Angeles\"},\n    {\"name\": \"Bob\", \"age\": \"35\", \"city\": \"Chicago\"}\n]\n```\n\nAlright, to achieve this, I can use OpenCSV's `CSVReader` to read the CSV file line by line. First, I'll read the header row to get the keys for the JSON objects. Then, for each data row, I'll create a JSON object using Gson, mapping the values to the corresponding keys from the header.\n\nHere's a rough outline of the steps:\n\n1. Read the CSV file using `CSVReader`.\n2. Read the first line as headers.\n3. For each subsequent line, create a JSON object using headers as keys and the line values as values.\n4. Collect all JSON objects into a JSON array.\n5. Output the JSON array.\n\nI need to make sure to handle any exceptions that might occur during file reading, such as `FileNotFoundException` or `IOException`.\n\nAlso, I should consider that the CSV file might have different delimiters or quoted fields, but for simplicity, I'll assume the default behavior of OpenCSV, which uses a comma as the separator.\n\nLet me try to write some pseudocode to visualize this:\n\n```\n\nRead CSV file using CSVReader\n\nRead header row\n\nInitialize an empty list to hold JSON objects\n\nFor each data row:\n\nCreate a map to hold key-value pairs\n\nFor each header and corresponding value:\n\nAdd entry to map\n\nCreate a Gson object\n\nConvert map to JSON object\n\nAdd JSON object to the list\n\nConvert the list of JSON objects to a JSON array\n\nPrint the JSON array\n\n```\n\nThis seems straightforward. Now, let's translate this into actual Java code.\n\nFirst, import the necessary classes:\n\n```java\nimport com.opencsv.CSVReader;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n```\n\nWait, OpenCSV has a `CSVReader` that can read the CSV file. But I think OpenCSV has a `CSVParser` that can handle headers as well. Let me check the OpenCSV documentation.\n\nUpon checking, OpenCSV has a `CSVParser` class that can read CSV files and handle headers. It can return a `CSVRecord` for each row, which allows accessing fields by header name.\n\nThis could simplify things. So, instead of reading the header row manually, I can specify the header line number and let OpenCSV handle it.\n\nHere's an updated plan:\n\n1. Create a `CSVParser` with the CSV file and specify that the first line is the header.\n2. Iterate over the records using the `iterator()` method of `CSVParser`.\n3. For each record, create a JSON object using the header as keys and the record values.\n4. Collect these JSON objects into a JSON array.\n5. Output the JSON array.\n\nThis seems even better. Let me adjust the pseudocode:\n\n```\n\nCreate CSVParser with CSV file and header\n\nInitialize an empty JsonArray\n\nFor each CSVRecord in the parser:\n\nCreate a JsonObject\n\nFor each header in the parser's header names:\n\nGet the value from the record using the header\n\nAdd the key-value pair to the JsonObject\n\nAdd the JsonObject to the JsonArray\n\nConvert the JsonArray to a String using Gson\n\nPrint the JSON string\n\n```\n\nThis looks cleaner. Now, let's proceed to write the actual code.\n\nFirst, I need to set up the `CSVParser`. I'll need to specify the schema if needed, but for now, I'll assume the default settings are sufficient.\n\nAlso, I need to handle any exceptions that may occur during file reading.\n\nLet me sketch the code structure:\n\n```java\nimport com.opencsv.CSVParser;\nimport com.opencsv.CSVParserBuilder;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVReaderBuilder;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport com.google.gson.Gson;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.Iterator;\n\npublic class CsvToJsonConverter {\n\n    public static void main(String[] args) {\n        String csvFile = \"path/to/input.csv\";\n        CsvToJsonConverter converter = new CsvToJsonConverter();\n        try {\n            String json = converter.convert(csvFile);\n            System.out.println(json);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public String convert(String csvFile) throws IOException {\n        CSVParser parser = new CSVParserBuilder()\n                .withSeparator(',')\n                .withIgnoreQuotations(true)\n                .build();\n\n        CSVReader reader = new CSVReaderBuilder(new FileReader(csvFile))\n                .withCSVParser(parser)\n                .withSkipLines(0)\n                .build();\n\n        Iterator<String[]> iterator = reader.iterator();\n\n        if (!iterator.hasNext()) {\n            throw new IOException(\"CSV file is empty\");\n        }\n\n        String[] headers = iterator.next();\n\n        JsonArray jsonArray = new JsonArray();\n\n        while (iterator.hasNext()) {\n            String[] values = iterator.next();\n            JsonObject jsonObject = new JsonObject();\n            for (int i = 0; i < headers.length && i < values.length; i++) {\n                jsonObject.addProperty(headers[i], values[i]);\n            }\n            jsonArray.add(jsonObject);\n        }\n\n        reader.close();\n\n        Gson gson = new Gson();\n        return gson.toJson(jsonArray);\n    }\n}\n```\n\nOkay, this is a basic implementation. I need to test this with a sample CSV file to see if it works.\n\nLet me create a sample CSV file named `input.csv` with the following content:\n\n```\n\nname,age,city\n\nJohn,30,New York\n\nAlice,25,Los Angeles\n\nBob,35,Chicago\n\n```\n\nRunning the program with this CSV file should produce the JSON output as expected.\n\nBut wait, I need to make sure that the JSON is properly formatted. Maybe I should use indentation for better readability.\n\nGson has an option to format the JSON with indentation. I can use `GsonBuilder` to achieve that.\n\nHere's how I can do it:\n\n```java\n\nGson gson = new GsonBuilder().setPrettyPrinting().create();\n\nreturn gson.toJson(jsonArray);\n\n```\n\nThat's better.\n\nAlso, I should handle cases where the CSV file has varying numbers of columns. For example, if a row has fewer or more values than headers, it could cause an array index out of bounds exception.\n\nTo handle this, I need to add checks to ensure that I don't access invalid indices.\n\nLet me adjust the code to handle such cases:\n\n```java\n\nfor (int i = 0; i < headers.length; i++) {\n\n    String value = (i < values.length) ? values[i] : null;\n\n    jsonObject.addProperty(headers[i], value);\n\n}\n\n```\n\nThis way, if there are fewer values than headers in a row, the missing values will be set to null in the JSON object.\n\nSimilarly, if there are more values than headers, the extra values will be ignored. Depending on the requirements, I might want to handle this differently, but for now, this should suffice.\n\nAnother consideration is handling quoted fields that may contain commas. OpenCSV should handle this by default, as it understands that commas within quotes are part of the field value.\n\nAlso, I should think about handling different encodings. By default, `FileReader` uses the default character encoding of the platform. If the CSV file is in a different encoding, I need to specify it explicitly.\n\nTo handle different encodings, I can use `InputStreamReader` with the desired charset.\n\nFor example:\n\n```java\n\nimport java.io.FileInputStream;\n\nimport java.io.InputStreamReader;\n\n// ...\n\nnew InputStreamReader(new FileInputStream(csvFile), \"UTF-8\")\n\n```\n\nI'll make this configurable by adding an encoding parameter to the `convert` method.\n\nHere's the updated method signature:\n\n```java\n\npublic String convert(String csvFile, String encoding) throws IOException {\n\n// ...\n\nnew InputStreamReader(new FileInputStream(csvFile), encoding)\n\n```\n\nThis way, the user can specify the encoding of the CSV file.\n\nNow, let's think about making this program more user-friendly. Maybe I can accept the input CSV file path and the output JSON file path as command-line arguments.\n\nAlso, providing options for specifying the delimiter and encoding would be useful.\n\nLet me adjust the `main` method to accept command-line arguments for input file, output file, delimiter, and encoding.\n\nHere's an updated `main` method:\n\n```java\n\npublic static void main(String[] args) {\n\n    if (args.length < 2) {\n\n        System.out.println(\"Usage: java CsvToJsonConverter <input.csv> <output.json> [delimiter] [encoding]\");\n\n        return;\n\n    }\n\n    String csvFile = args[0];\n\n    String jsonFile = args[1];\n\n    String delimiter = (args.length > 2) ? args[2] : \",\";\n\n    String encoding = (args.length > 3) ? args[3] : \"UTF-8\";\n\n    CsvToJsonConverter converter = new CsvToJsonConverter();\n\n    try {\n\n        String json = converter.convert(csvFile, encoding, delimiter);\n\n        // Write JSON to file\n\n        Files.write(Paths.get(jsonFile), json.getBytes(encoding));\n\n        System.out.println(\"Conversion complete. JSON saved to \" + jsonFile);\n\n    } catch (IOException e) {\n\n        e.printStackTrace();\n\n    }\n\n}\n\n```\n\nI need to import `java.nio.file.Files` and `java.nio.file.Paths` for writing the JSON to a file.\n\nAlso, update the `convert` method to accept delimiter as a parameter:\n\n```java\n\npublic String convert(String csvFile, String encoding, String delimiter) throws IOException {\n\n    CSVParser parser = new CSVParserBuilder()\n\n            .withSeparator(delimiter.charAt(0))\n\n            .withIgnoreQuotations(true)\n\n            .build();\n\n    CSVReader reader = new CSVReaderBuilder(new InputStreamReader(new FileInputStream(csvFile), encoding))\n\n            .withCSVParser(parser)\n\n            .withSkipLines(0)\n\n            .build();\n\n    // Rest of the code remains the same\n\n}\n\n```\n\nThis way, the user can specify the delimiter and encoding via command-line arguments.\n\nI should also add error handling for invalid arguments or file I/O errors.\n\nAdditionally, I might want to provide an option to include or exclude headers from the CSV file, in case the file doesn't have headers.\n\nBut for now, assuming the CSV always has headers is fine.\n\nLet me test this program with the sample CSV file.\n\nAssuming the CSV file is named `input.csv` and contains:\n\n```\n\nname,age,city\n\nJohn,30,New York\n\nAlice,25,Los Angeles\n\nBob,35,Chicago\n\n```\n\nRunning the program with:\n\n```\n\njava CsvToJsonConverter input.csv output.json\n\n```\n\nShould generate `output.json` with the following content:\n\n```json\n\n[\n\n    {\n\n        \"name\": \"John\",\n\n        \"age\": \"30\",\n\n        \"city\": \"New York\"\n\n    },\n\n    {\n\n        \"name\": \"Alice\",\n\n        \"age\": \"25\",\n\n        \"city\": \"Los Angeles\"\n\n    },\n\n    {\n\n        \"name\": \"Bob\",\n\n        \"age\": \"35\",\n\n        \"city\": \"Chicago\"\n\n    }\n\n]\n\n```\n\nPerfect.\n\nWait, but in the JSON output, all values are strings. If the CSV contains numeric values, it would be better to parse them as numbers in the JSON.\n\nFor example, the \"age\" column contains numbers, so in JSON, it should be represented as numbers, not strings.\n\nTo achieve this, I need to detect the type of each value and add it to the JSON object accordingly.\n\nGson provides methods like `addProperty` with different overloads for different data types.\n\nSo, I need to check if a value is numeric and add it as a number, otherwise as a string.\n\nHere's how I can do it:\n\n```java\n\nfor (int i = 0; i < headers.length; i++) {\n\n    String value = (i < values.length) ? values[i] : null;\n\n    if (value != null && value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n\n        try {\n\n            // Try to parse as integer\n\n            int intValue = Integer.parseInt(value);\n\n            jsonObject.addProperty(headers[i], intValue);\n\n        } catch (NumberFormatException e) {\n\n            // If not an integer, try to parse as double\n\n            double doubleValue = Double.parseDouble(value);\n\n            jsonObject.addProperty(headers[i], doubleValue);\n\n        }\n\n    } else {\n\n        jsonObject.addProperty(headers[i], value);\n\n    }\n\n}\n\n```\n\nThis code attempts to parse the value as an integer, and if that fails, as a double. If both fail, it falls back to adding it as a string.\n\nThis should handle numeric values correctly.\n\nI need to add import statements for `Integer.parseInt` and `Double.parseDouble`.\n\nNow, let's consider if the CSV file contains quoted fields with line breaks. OpenCSV should handle this appropriately, but I need to ensure that the parser is configured correctly.\n\nAlso, I should think about handling null or empty values. In the current implementation, null values are set directly, but in JSON, null is a valid value.\n\nGson will represent null values as null in JSON, which is fine.\n\nAnother consideration is performance. If the CSV file is very large, reading it line by line and building a list of JSON objects may consume a lot of memory.\n\nTo handle large files, I might want to write the JSON output incrementally, without loading the entire dataset into memory.\n\nGson provides a `JsonWriter` class that allows writing JSON incrementally.\n\nI can use `JsonWriter` to write the JSON array one object at a time.\n\nHere's an outline of how to do this:\n\n1. Create a `JsonWriter` wrapped around a `FileWriter` for the output file.\n\n2. Start the JSON array.\n\n3. For each data row:\n\na. Start an object.\n\nb. For each header and corresponding value, add a name-value pair.\n\nc. End the object.\n\n4. End the JSON array.\n\nThis way, the JSON is written directly to the file without loading the entire array into memory.\n\nThis would be more memory-efficient for large CSV files.\n\nLet me adjust the code to use `JsonWriter`.\n\nFirst, import the necessary classes:\n\n```java\n\nimport com.google.gson.stream.JsonWriter;\n\nimport java.io.FileWriter;\n\n```\n\nThen, modify the `convert` method to accept the output file path and use `JsonWriter`:\n\n```java\n\npublic void convert(String csvFile, String jsonFile, String encoding, String delimiter) throws IOException {\n\n    CSVParser parser = new CSVParserBuilder()\n\n            .withSeparator(delimiter.charAt(0))\n\n            .withIgnoreQuotations(true)\n\n            .build();\n\n    CSVReader reader = new CSVReaderBuilder(new InputStreamReader(new FileInputStream(csvFile), encoding))\n\n            .withCSVParser(parser)\n\n            .withSkipLines(0)\n\n            .build();\n\n    String[] headers = reader.readNext(); // Read header\n\n    try (JsonWriter jsonWriter = new JsonWriter(new FileWriter(jsonFile))) {\n\n        jsonWriter.setIndent(\"  \");\n\n        jsonWriter.beginArray();\n\n        String[] values;\n\n        while ((values = reader.readNext()) != null) {\n\n            jsonWriter.beginObject();\n\n            for (int i = 0; i < headers.length; i++) {\n\n                String value = (i < values.length) ? values[i] : null;\n\n                if (value != null && value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n\n                    try {\n\n                        int intValue = Integer.parseInt(value);\n\n                        jsonWriter.name(headers[i]).value(intValue);\n\n                    } catch (NumberFormatException e) {\n\n                        double doubleValue = Double.parseDouble(value);\n\n                        jsonWriter.name(headers[i]).value(doubleValue);\n\n                    }\n\n                } else {\n\n                    jsonWriter.name(headers[i]).value(value);\n\n                }\n\n            }\n\n            jsonWriter.endObject();\n\n        }\n\n        jsonWriter.endArray();\n\n    }\n\n}\n\n```\n\nIn this version, the JSON is written directly to the output file using `JsonWriter`, which is more memory-efficient for large files.\n\nI need to update the `main` method to call this new `convert` method.\n\nAlso, I should handle any exceptions that may occur during file writing.\n\nNow, let's think about edge cases:\n\n1. Empty CSV file: Should result in an empty JSON array.\n\n2. CSV file with only headers: Should result in a JSON array with no objects.\n\n3. CSV file with missing values: Should set null for missing values.\n\n4. CSV file with extra values in a row: Should ignore extra values.\n\n5. CSV file with quoted fields containing commas: Should handle them correctly as single values.\n\n6. CSV file with different encodings: Should handle them based on the specified encoding.\n\nI need to test each of these cases to ensure the program works correctly.\n\nAdditionally, I should consider adding command-line options for configuration, perhaps using a library like Apache Commons CLI.\n\nBut for now, passing arguments in the specified order should suffice.\n\nAnother enhancement could be to allow reading from standard input and writing to standard output, for pipeline usage.\n\nBut that's beyond the current scope.\n\nFinally, I should consider adding comments or a README file explaining how to run the program and what options are available.\n\nIn summary, here's the final version of the `CsvToJsonConverter` class:\n\n```java\n\nimport com.opencsv.CSVParser;\n\nimport com.opencsv.CSVParserBuilder;\n\nimport com.opencsv.CSVReader;\n\nimport com.opencsv.CSVReaderBuilder;\n\nimport com.google.gson.stream.JsonWriter;\n\nimport java.io.*;\n\npublic class CsvToJsonConverter {\n\n    public static void main(String[] args) {\n\n        if (args.length < 2) {\n\n            System.out.println(\"Usage: java CsvToJsonConverter <input.csv> <output.json> [delimiter] [encoding]\");\n\n            return;\n\n        }\n\n        String csvFile = args[0];\n\n        String jsonFile = args[1];\n\n        String delimiter = (args.length > 2) ? args[2] : \",\";\n\n        String encoding = (args.length > 3) ? args[3] : \"UTF-8\";\n\n        CsvToJsonConverter converter = new CsvToJsonConverter();\n\n        try {\n\n            converter.convert(csvFile, jsonFile, encoding, delimiter);\n\n            System.out.println(\"Conversion complete. JSON saved to \" + jsonFile);\n\n        } catch (IOException e) {\n\n            e.printStackTrace();\n\n        }\n\n    }\n\n    public void convert(String csvFile, String jsonFile, String encoding, String delimiter) throws IOException {\n\n        CSVParser parser = new CSVParserBuilder()\n\n                .withSeparator(delimiter.charAt(0))\n\n                .withIgnoreQuotations(true)\n\n                .build();\n\n        try (InputStreamReader readerStream = new InputStreamReader(new FileInputStream(csvFile), encoding);\n\n             CSVReader reader = new CSVReaderBuilder(readerStream)\n\n                     .withCSVParser(parser)\n\n                     .withSkipLines(0)\n\n                     .build();\n\n             JsonWriter jsonWriter = new JsonWriter(new FileWriter(jsonFile))) {\n\n            jsonWriter.setIndent(\"  \");\n\n            jsonWriter.beginArray();\n\n            String[] headers = reader.readNext(); // Read header\n\n            if (headers != null) {\n\n                String[] values;\n\n                while ((values = reader.readNext()) != null) {\n\n                    jsonWriter.beginObject();\n\n                    for (int i = 0; i < headers.length; i++) {\n\n                        String value = (i < values.length) ? values[i] : null;\n\n                        if (value != null && value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n\n                            try {\n\n                                int intValue = Integer.parseInt(value);\n\n                                jsonWriter.name(headers[i]).value(intValue);\n\n                            } catch (NumberFormatException e) {\n\n                                double doubleValue = Double.parseDouble(value);\n\n                                jsonWriter.name(headers[i]).value(doubleValue);\n\n                            }\n\n                        } else {\n\n                            jsonWriter.name(headers[i]).value(value);\n\n                        }\n\n                    }\n\n                    jsonWriter.endObject();\n\n                }\n\n            }\n\n            jsonWriter.endArray();\n\n        }\n\n    }\n\n}\n\n```\n\nThis program should now handle most common CSV to JSON conversion scenarios efficiently.\n\n## Final Solution\nTo convert a CSV file to JSON in Java, you can use the OpenCSV library to read the CSV file and the Gson library to format the output as JSON. Below is a complete Java program that performs this conversion.\n\n### Prerequisites\n1. Add dependencies for OpenCSV and Gson in your `pom.xml`:\n    ```xml\n    <dependencies>\n        <dependency>\n            <groupId>com.opencsv</groupId>\n            <artifactId>opencsv</artifactId>\n            <version>5.5.2</version>\n        </dependency>\n        <dependency>\n            <groupId>com.google.code.gson</groupId>\n            <artifactId>gson</artifactId>\n            <version>2.8.8</version>\n        </dependency>\n    </dependencies>\n    ```\n\n2. Ensure you have a CSV file to convert. For example, `input.csv`:\n    ```\n    name,age,city\n    John,30,New York\n    Alice,25,Los Angeles\n    Bob,35,Chicago\n    ```\n\n### Solution Code\n```java\nimport com.opencsv.CSVParser;\nimport com.opencsv.CSVParserBuilder;\nimport com.opencsv.CSVReader;\nimport com.opencsv.CSVReaderBuilder;\nimport com.google.gson.stream.JsonWriter;\n\nimport java.io.FileInputStream;\nimport java.io.FileWriter;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\npublic class CsvToJsonConverter {\n\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java CsvToJsonConverter <input.csv> <output.json> [delimiter] [encoding]\");\n            return;\n        }\n        String csvFile = args[0];\n        String jsonFile = args[1];\n        String delimiter = (args.length > 2) ? args[2] : \",\";\n        String encoding = (args.length > 3) ? args[3] : \"UTF-8\";\n        CsvToJsonConverter converter = new CsvToJsonConverter();\n        try {\n            converter.convert(csvFile, jsonFile, encoding, delimiter);\n            System.out.println(\"Conversion complete. JSON saved to \" + jsonFile);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void convert(String csvFile, String jsonFile, String encoding, String delimiter) throws IOException {\n        CSVParser parser = new CSVParserBuilder()\n                .withSeparator(delimiter.charAt(0))\n                .withIgnoreQuotations(true)\n                .build();\n        try (InputStreamReader readerStream = new InputStreamReader(new FileInputStream(csvFile), encoding);\n             CSVReader reader = new CSVReaderBuilder(readerStream)\n                     .withCSVParser(parser)\n                     .withSkipLines(0)\n                     .build();\n             JsonWriter jsonWriter = new JsonWriter(new FileWriter(jsonFile))) {\n            jsonWriter.setIndent(\"  \");\n            jsonWriter.beginArray();\n            String[] headers = reader.readNext(); // Read header\n            if (headers != null) {\n                String[] values;\n                while ((values = reader.readNext()) != null) {\n                    jsonWriter.beginObject();\n                    for (int i = 0; i < headers.length; i++) {\n                        String value = (i < values.length) ? values[i] : null;\n                        if (value != null && value.matches(\"-?\\\\d+(\\\\.\\\\d+)?\")) {\n                            try {\n                                int intValue = Integer.parseInt(value);\n                                jsonWriter.name(headers[i]).value(intValue);\n                            } catch (NumberFormatException e) {\n                                double doubleValue = Double.parseDouble(value);\n                                jsonWriter.name(headers[i]).value(doubleValue);\n                            }\n                        } else {\n                            jsonWriter.name(headers[i]).value(value);\n                        }\n                    }\n                    jsonWriter.endObject();\n                }\n            }\n            jsonWriter.endArray();\n        }\n    }\n}\n```\n\n### Explanation\n1. **Reading the CSV File**: \n   - Use `CSVReader` from OpenCSV to read the CSV file.\n   - Specify the delimiter and encoding.\n\n2. **Processing the Data**:\n   - Read the header row to get the keys for JSON objects.\n   - For each data row, create a JSON object using the headers as keys and the row values as values.\n   - Detect numeric values and add them as numbers in JSON; otherwise, add them as strings.\n\n3. **Writing the JSON Output**:\n   - Use `JsonWriter` from Gson to write the JSON array incrementally.\n   - This approach is memory-efficient for large files as it writes data directly to the file without loading the entire dataset into memory.\n\n4. **Command-Line Usage**:\n   - The program accepts command-line arguments for input CSV file, output JSON file, delimiter, and encoding.\n   - Example usage: \n     ```\n     java CsvToJsonConverter input.csv output.json , UTF-8\n     ```\n\nThis program provides a robust way to convert CSV files to JSON format, handling various data types and ensuring efficient processing even for large files."
    }
]