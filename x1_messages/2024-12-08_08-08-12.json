[
    {
        "role": "user",
        "content": "Develop a Node.js REST API using Express framework that allows users to manage their tasks. The API should support CRUD operations on tasks (create, read, update, delete), with each task having a title, description, due date, and completion status. Use MongoDB as the backend database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To develop a Node.js REST API using the Express framework for managing tasks with MongoDB as the backend database, follow these steps:\n\n### 1. Set Up the Project\n\nFirst, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir task-manager-api\ncd task-manager-api\nnpm init -y\n```\n\nInstall the necessary dependencies:\n\n```bash\nnpm install express mongoose body-parser dotenv\n```\n\n- `express`: Web framework for Node.js\n- `mongoose`: MongoDB object modeling tool\n- `body-parser`: Middleware for parsing request bodies\n- `dotenv`: Loads environment variables from a `.env` file\n\n### 2. Project Structure\n\nOrganize your project with the following structure:\n\n```\ntask-manager-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Task.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 tasks.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### 3. Configuration\n\nCreate a `.env` file to store environment variables:\n\n```\nPORT=3000\nMONGODB_URI=your_mongodb_connection_string\n```\n\nReplace `your_mongodb_connection_string` with your actual MongoDB connection URI.\n\n### 4. Set Up MongoDB Model\n\nCreate a MongoDB model for tasks in `models/Task.js`:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst taskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  dueDate: { type: Date, required: true },\n  completed: { type: Boolean, default: false }\n});\n\nmodule.exports = mongoose.model('Task', taskSchema);\n```\n\n### 5. Set Up Express Server\n\nCreate the main server file `app.js`:\n\n```javascript\nrequire('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst taskRoutes = require('./routes/tasks');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(bodyParser.json());\n\n// Routes\napp.use('/api/tasks', taskRoutes);\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => {\n    console.log('Connected to MongoDB');\n    app.listen(PORT, () => {\n      console.log(`Server is running on port ${PORT}`);\n    });\n  })\n  .catch(err => {\n    console.error('MongoDB connection error:', err);\n  });\n```\n\n### 6. Define Routes\n\nCreate route handlers for tasks in `routes/tasks.js`:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst Task = require('../models/Task');\n\n// Get all tasks\nrouter.get('/', async (req, res) => {\n  try {\n    const tasks = await Task.find();\n    res.json(tasks);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get one task by ID\nrouter.get('/:id', getTask, (req, res) => {\n  res.json(res.task);\n});\n\n// Create a new task\nrouter.post('/', async (req, res) => {\n  const task = new Task({\n    title: req.body.title,\n    description: req.body.description,\n    dueDate: req.body.dueDate,\n    completed: req.body.completed\n  });\n\n  try {\n    const newTask = await task.save();\n    res.status(201).json(newTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update a task\nrouter.patch('/:id', getTask, async (req, res) => {\n  if (req.body.title != null) {\n    res.task.title = req.body.title;\n  }\n\n  if (req.body.description != null) {\n    res.task.description = req.body.description;\n  }\n\n  if (req.body.dueDate != null) {\n    res.task.dueDate = req.body.dueDate;\n  }\n\n  if (req.body.completed != null) {\n    res.task.completed = req.body.completed;\n  }\n\n  try {\n    const updatedTask = await res.task.save();\n    res.json(updatedTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a task\nrouter.delete('/:id', getTask, async (req, res) => {\n  try {\n    await res.task.remove();\n    res.json({ message: 'Deleted Task' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware to get task by ID\nasync function getTask(req, res, next) {\n  let task;\n  try {\n    task = await Task.findById(req.params.id);\n    if (task == null) {\n      return res.status(404).json({ message: 'Cannot find task' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.task = task;\n  next();\n}\n\nmodule.exports = router;\n```\n\n### 7. Run the Server\n\nStart the server by running:\n\n```bash\nnode app.js\n```\n\nYour API should now be running on `http://localhost:3000/api/tasks`.\n\n### 8. Test the API\n\nYou can use tools like Postman or curl to test the API endpoints:\n\n- **Get all tasks:** `GET /api/tasks`\n- **Get one task:** `GET /api/tasks/:id`\n- **Create a task:** `POST /api/tasks` with JSON body\n- **Update a task:** `PATCH /api/tasks/:id` with JSON body\n- **Delete a task:** `DELETE /api/tasks/:id`\n\nThis setup provides a basic CRUD API for managing tasks with Node.js, Express, and MongoDB. You can expand upon this by adding more features, validation, and error handling as needed."
    }
]