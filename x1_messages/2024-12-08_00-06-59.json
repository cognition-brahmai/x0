[
    {
        "role": "user",
        "content": "Write a Python script to implement a singly linked list data structure with methods for insertion, deletion, searching, and displaying elements."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements a singly linked list data structure. It includes methods for insertion, deletion, searching, and displaying elements.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def delete_at_beginning(self):\n        if self.is_empty():\n            print(\"List is empty. Cannot delete.\")\n        else:\n            self.head = self.head.next\n\n    def delete_at_end(self):\n        if self.is_empty():\n            print(\"List is empty. Cannot delete.\")\n        else:\n            if self.head.next is None:\n                self.head = None\n            else:\n                current = self.head\n                while current.next.next:\n                    current = current.next\n                current.next = None\n\n    def search(self, data):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.insert_at_end(10)\n    sll.insert_at_end(20)\n    sll.insert_at_end(30)\n    sll.display()  # Output: 10 -> 20 -> 30\n    sll.insert_at_beginning(5)\n    sll.display()  # Output: 5 -> 10 -> 20 -> 30\n    sll.delete_at_beginning()\n    sll.display()  # Output: 10 -> 20 -> 30\n    sll.delete_at_end()\n    sll.display()  # Output: 10 -> 20\n    print(sll.search(20))  # Output: 1\n    print(sll.search(30))  # Output: -1\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents a single node in the linked list.\n   - Each node contains data and a reference to the next node.\n\n2. **SinglyLinkedList Class**:\n   - Manages the linked list operations.\n   - `__init__`: Initializes the head of the list.\n   - `is_empty`: Checks if the list is empty.\n   - `insert_at_beginning`: Inserts a new node at the beginning of the list.\n   - `insert_at_end`: Inserts a new node at the end of the list.\n   - `delete_at_beginning`: Deletes the first node of the list.\n   - `delete_at_end`: Deletes the last node of the list.\n   - `search`: Searches for a data element and returns its index or -1 if not found.\n   - `display`: Prints the elements of the list.\n\n3. **Example Usage**:\n   - Demonstrates inserting, deleting, searching, and displaying elements in the linked list.\n\nThis script provides a basic implementation of a singly linked list with essential operations."
    }
]