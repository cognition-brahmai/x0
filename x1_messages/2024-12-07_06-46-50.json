[
    {
        "role": "user",
        "content": "Write a python script that implements the Merge Sort algorithm for sorting a list of integers. The program should take a list of integers as input and return the sorted list as output."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Merge Sort is a popular sorting algorithm that uses the divide-and-conquer approach. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge operation is the key process that assumes that the two halves are sorted and merges the two sorted sub-arrays into one.\n\nHere's a step-by-step explanation of how Merge Sort works:\n\n1. **Divide**: Find the midpoint of the list and divide it into two sublists.\n2. **Conquer**: Recursively sort the two sublists.\n3. **Combine**: Merge the two sorted sublists to produce the sorted answer.\n\nNow, let's implement this in Python. I'll provide you with a simple and straightforward implementation.\n\n```python\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    # Find the midpoint\n    mid = len(arr) // 2\n\n    # Divide the array into two halves\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively sort the two halves\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n\n    # Merge the sorted halves\n    return merge(left_sorted, right_sorted)\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    # Merge the two lists into merged list\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    # If there are remaining elements in left or right, append them\n    merged.extend(left[left_index:])\n    merged.extend(right[right_index:])\n\n    return merged\n\n# Example usage:\nif __name__ == \"__main__\":\n    user_input = input(\"Enter numbers separated by commas: \")\n    unsorted_list = [int(x.strip()) for x in user_input.split(\",\")]\n    sorted_list = merge_sort(unsorted_list)\n    print(\"Sorted list:\", sorted_list)\n```\n\n### Explanation of the Code:\n\n1. **merge_sort Function**:\n    - Base case: If the list is of length 0 or 1, it's already sorted.\n    - Divide the list into two halves.\n    - Recursively sort each half.\n    - Merge the two sorted halves using the `merge` function.\n\n2. **merge Function**:\n    - Merges two sorted lists into one sorted list.\n    - Uses two pointers to traverse the lists and append the smaller element to the result list.\n    - After exhausting elements from one list, appends the remaining elements from the other list.\n\n3. **Example Usage**:\n    - Takes user input as a comma-separated string of numbers.\n    - Converts the input string into a list of integers.\n    - Sorts the list using `merge_sort`.\n    - Prints the sorted list.\n\nThis implementation is efficient and maintains the O(n log n) time complexity characteristic of Merge Sort. If you have any questions or need further clarification, feel free to ask!"
    }
]