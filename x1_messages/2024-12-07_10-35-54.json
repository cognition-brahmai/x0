[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple HTTP server that listens on a specified port, serves static files from a given directory, and logs incoming requests to a text file.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple HTTP server in Java that listens on a specific port, serves static files from a directory, and logs incoming requests to a text file. Okay, let's break this down.\n\nFirst, I need to set up a basic HTTP server. In Java, I can use the built-in libraries for handling network connections and HTTP protocols. The `java.net` and `java.net.http` packages should have what I need.\n\nSo, starting with setting up a server socket to listen on a specified port. I'll need to take the port number as an input, probably from command-line arguments. Then, the server should be able to accept multiple connections, so I'll need to handle each client request in a separate thread or use non-blocking I/O.\n\nNext, serving static files from a given directory. That means when a client requests a file, the server should look for that file in the specified directory and send it back if it exists. If not, it should return a 404 error.\n\nAlso, I need to log each incoming request to a text file. So, every time a request is made, I'll write some information about it to a log file.\n\nLet me think about the steps in more detail:\n\n1. **Server Setup:**\n\n- Create a `ServerSocket` bound to the specified port.\n\n- Accept incoming client connections in a loop.\n\n- For each connection, create a new thread to handle the request.\n\n2. **Request Handling:**\n\n- Read the HTTP request from the client.\n\n- Parse the request to extract the requested file path.\n\n- Map the requested path to a file in the specified directory.\n\n- If the file exists, read it and send it back as the response.\n\n- If the file doesn't exist, send a 404 response.\n\n3. **Logging:**\n\n- For each request, write the request method, path, and response status to a log file.\n\nI should also consider handling different types of files, like HTML, CSS, JavaScript, images, etc., by setting the appropriate MIME types in the HTTP response headers.\n\nError handling is crucial. I need to handle cases where the port is already in use, files are not found, or there are issues with reading files or logging.\n\nLet me sketch a basic structure of the program.\n\n## Final Solution\nTo create a simple HTTP server in Java that listens on a specified port, serves static files from a given directory, and logs incoming requests to a text file, you can follow the steps below.\n\n### Approach\n\n1. **Server Setup:**\n   - Use a `ServerSocket` to listen on the specified port.\n   - Accept incoming client connections in a loop.\n   - For each connection, create a new thread to handle the request.\n\n2. **Request Handling:**\n   - Read the HTTP request from the client.\n   - Parse the request to extract the requested file path.\n   - Map the requested path to a file in the specified directory.\n   - If the file exists, read it and send it back as the response.\n   - If the file doesn't exist, send a 404 response.\n\n3. **Logging:**\n   - For each request, write the request method, path, and response status to a log file.\n\n### Solution Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.logging.*;\n\npublic class SimpleHttpServer {\n    private int port;\n    private String rootDirectory;\n    private ExecutorService executor;\n\n    public SimpleHttpServer(int port, String rootDirectory) {\n        this.port = port;\n        this.rootDirectory = rootDirectory;\n        this.executor = Executors.newFixedThreadPool(10);\n        setupLogger();\n    }\n\n    public void start() throws IOException {\n        try (ServerSocket serverSocket = new ServerSocket(port)) {\n            System.out.println(\"Server started on port \" + port);\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                executor.execute(new ClientHandler(clientSocket));\n            }\n        }\n    }\n\n    private void setupLogger() {\n        Logger logger = Logger.getLogger(\"ServerLogger\");\n        FileHandler fileHandler;\n        try {\n            fileHandler = new FileHandler(\"server.log\", true);\n            logger.addHandler(fileHandler);\n            SimpleFormatter formatter = new SimpleFormatter();\n            fileHandler.setFormatter(formatter);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private class ClientHandler implements Runnable {\n        private Socket clientSocket;\n\n        public ClientHandler(Socket socket) {\n            this.clientSocket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                String requestLine = in.readLine();\n                if (requestLine == null) {\n                    return;\n                }\n                String[] parts = requestLine.split(\" \");\n                if (parts.length < 2) {\n                    return;\n                }\n                String requestedPath = parts[1];\n                File file = new File(rootDirectory, requestedPath.startsWith(\"/\") ? requestedPath.substring(1) : requestedPath);\n                if (!file.getPath().startsWith(rootDirectory)) {\n                    sendResponse(out, 403, \"Forbidden\", \"text/plain\", \"Access denied.\");\n                    logRequest(requestLine, 403);\n                    return;\n                }\n                if (file.exists() && file.isFile()) {\n                    String contentType = getContentType(file);\n                    sendFile(out, file, contentType);\n                    logRequest(requestLine, 200);\n                } else {\n                    sendResponse(out, 404, \"Not Found\", \"text/plain\", \"File not found.\");\n                    logRequest(requestLine, 404);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n        }\n\n        private String getContentType(File file) {\n            String fileName = file.getName();\n            if (fileName.endsWith(\".html\") || fileName.endsWith(\".htm\")) {\n                return \"text/html\";\n            } else if (fileName.endsWith(\".css\")) {\n                return \"text/css\";\n            } else if (fileName.endsWith(\".js\")) {\n                return \"application/javascript\";\n            } else if (fileName.endsWith(\".jpg\") || fileName.endsWith(\".jpeg\")) {\n                return \"image/jpeg\";\n            } else if (fileName.endsWith(\".png\")) {\n                return \"image/png\";\n            } else if (fileName.endsWith(\".gif\")) {\n                return \"image/gif\";\n            } else {\n                return \"application/octet-stream\";\n            }\n        }\n\n        private void sendFile(PrintWriter out, File file, String contentType) throws IOException {\n            out.println(\"HTTP/1.1 200 OK\");\n            out.println(\"Content-Type: \" + contentType);\n            out.println();\n\n            try (BufferedInputStream fileIn = new BufferedInputStream(new FileInputStream(file));\n                 BufferedOutputStream outStream = new BufferedOutputStream(clientSocket.getOutputStream())) {\n                byte[] buffer = new byte[1024];\n                int length;\n                while ((length = fileIn.read(buffer)) > 0) {\n                    outStream.write(buffer, 0, length);\n                }\n                outStream.flush();\n            }\n        }\n\n        private void sendResponse(PrintWriter out, int statusCode, String statusMessage, String contentType, String body) {\n            out.println(\"HTTP/1.1 \" + statusCode + \" \" + statusMessage);\n            out.println(\"Content-Type: \" + contentType);\n            out.println(\"Content-Length: \" + body.length());\n            out.println();\n            out.println(body);\n        }\n\n        private void logRequest(String requestLine, int statusCode) {\n            Logger.getLogger(\"ServerLogger\").info(requestLine + \" - \" + statusCode);\n        }\n    }\n\n    public static void main(String[] args) {\n        if (args.length < 2) {\n            System.out.println(\"Usage: java SimpleHttpServer <port> <root_directory>\");\n            return;\n        }\n        int port = Integer.parseInt(args[0]);\n        String rootDirectory = args[1];\n        SimpleHttpServer server = new SimpleHttpServer(port, rootDirectory);\n        try {\n            server.start();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server Setup:**\n   - A `ServerSocket` is created to listen on the specified port.\n   - An executor service is used to handle client requests in separate threads.\n\n2. **Request Handling:**\n   - Each client connection is handled by a `ClientHandler` thread.\n   - The requested file path is extracted from the HTTP request.\n   - The file is served if it exists and is a regular file; otherwise, an appropriate error response is sent.\n\n3. **Logging:**\n   - A logger is set up to write request information and response status to `server.log`.\n\nThis server handles basic static file serving and logs each request, making it suitable for simple web serving tasks."
    }
]