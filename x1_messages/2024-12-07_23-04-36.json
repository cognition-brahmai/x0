[
    {
        "role": "user",
        "content": "Create a Java implementation of the classic game Hangman with the following requirements:\n   - Use a predefined list of words for the game.\n   - Allow the user to guess letters using keyboard input only.\n   - Display the current state of the word after each guess.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Java implementation of the classic game Hangman. Let's see, the requirements are to use a predefined list of words, allow the user to guess letters using keyboard input only, and display the current state of the word after each guess.\n\nFirst things first, I need to understand how Hangman works. In Hangman, there's a word that the player has to guess, and they do this by suggesting letters one at a time. If the letter is in the word, it's revealed in its correct positions; if not, part of a hangman is drawn, representing a wrong guess. The game continues until the player guesses the word correctly or the hangman is fully drawn, which typically means a certain number of wrong guesses, often six or seven.\n\nSo, in this Java version, I don't need to draw the hangman, just keep track of the number of wrong guesses. I'll assume that the player has a limited number of wrong guesses before they lose.\n\nLet's start by planning the structure of the program.\n\n1. **Predefined list of words:** I need to have a list of words from which the game can pick the word to guess. This can be an array or a list in Java.\n\n2. **Selecting a word:** Randomly choose one word from the list for each game.\n\n3. **Tracking guesses:** Keep track of the letters that have been guessed and whether they are correct or not.\n\n4. **Displaying the current state:** Show the word with guessed letters revealed and unguessed letters as placeholders, like underscores.\n\n5. **Input handling:** Read user input for letter guesses and handle errors, like invalid inputs or repeated guesses.\n\n6. **Winning and losing conditions:** Determine when the player has guessed the word correctly or has exceeded the maximum number of wrong guesses.\n\nLet me think about how to implement each part.\n\n**1. Predefined list of words:**\n\nI can create an array of strings containing the words. For example:\n\n```java\nString[] wordList = {\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"mango\", \"orange\"};\n```\n\n**2. Selecting a word:**\n\nI need to select a word randomly from this array. I can use the `Random` class from `java.util` for this.\n\n```java\nimport java.util.Random;\n\nRandom rand = new Random();\nString wordToGuess = wordList[rand.nextInt(wordList.length)];\n```\n\n**3. Tracking guesses:**\n\nI need to keep track of which letters have been guessed. I can use a `Set` to store the guessed letters, as sets don't allow duplicates and can quickly check if a letter has already been guessed.\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\n\nSet<Character> guessedLetters = new HashSet<>();\n```\n\nAdditionally, I need to keep track of the number of wrong guesses. I can use an integer variable for this.\n\n```java\nint wrongGuesses = 0;\nfinal int MAX_WRONG_GUESSES = 6; // for example\n```\n\n**4. Displaying the current state:**\n\nI need to display the word with guessed letters shown and unguessed letters as underscores. I can create a method that takes the word and the set of guessed letters and returns a string with the current state.\n\n```java\nString displayWord(String word, Set<Character> guessed) {\n    StringBuilder display = new StringBuilder();\n    for (char c : word.toCharArray()) {\n        if (guessed.contains(c)) {\n            display.append(c);\n        } else {\n            display.append(\"_\");\n        }\n    }\n    return display.toString();\n}\n```\n\n**5. Input handling:**\n\nI need to read user input for letter guesses. I can use `Scanner` from `java.util` for this.\n\n```java\nimport java.util.Scanner;\n\nScanner scanner = new Scanner(System.in);\nSystem.out.print(\"Guess a letter: \");\nchar guess = scanner.next().toLowerCase().charAt(0);\n```\n\nI need to ensure that the input is a single letter and handle cases where the user enters something else or repeats a guess.\n\n**6. Winning and losing conditions:**\n\n- The player wins if they guess all the letters in the word.\n\n- The player loses if they exceed the maximum number of wrong guesses.\n\nI can check after each guess if the word has been fully guessed or if the number of wrong guesses has reached the limit.\n\nNow, let's think about the flow of the game.\n\n- Start by selecting a word randomly from the list.\n\n- Initialize the set of guessed letters as empty.\n\n- Set the number of wrong guesses to zero.\n\n- Display the initial state of the word with all letters as underscores.\n\n- Enter a loop where the player guesses letters one at a time.\n\n- For each guess:\n\n- Read the input letter.\n\n- Check if the letter has already been guessed.\n\n- If not, check if it's in the word.\n\n- If it is, add it to the guessed letters.\n\n- If not, increment the wrong guesses count.\n\n- Display the current state of the word.\n\n- Check if the game is over (win or lose).\n\n- Continue until the game is over.\n\n- At the end, inform the player whether they won or lost, and ask if they want to play again.\n\nI should also consider edge cases, like if the word contains uppercase letters or special characters, but to keep it simple, I'll assume all words are in lowercase and consist only of letters.\n\nLet me also think about how to handle repeated guesses. I should inform the player if they've already guessed that letter and prompt them to guess again.\n\nAdditionally, I should handle cases where the user enters something other than a single letter, like a number or multiple characters.\n\nI might want to create methods for different parts of the game to keep the code organized. For example, a method to check if the word has been fully guessed, a method to display the current state, and a method to handle user input.\n\nI should also consider using constants for values that might change, like the maximum number of wrong guesses or the list of words.\n\nLet me sketch a rough outline of the classes and methods I might need.\n\n- **Hangman class:**\n\n- `main` method to start the game.\n\n- `selectWord` method to randomly select a word from the list.\n\n- `displayWord` method to display the current state of the word.\n\n- `checkGuess` method to check if a letter is in the word and update guessed letters and wrong guesses.\n\n- `isGameOver` method to check if the game has ended (win or lose).\n\n- `playAgain` method to ask the player if they want to play another game.\n\n- **Constants:**\n\n- List of words.\n\n- Maximum number of wrong guesses.\n\nNow, I'll start writing some code based on this plan.\n\nFirst, I'll create the `Hangman` class and define the word list and maximum wrong guesses as constants.\n\n```java\nimport java.util.*;\n\npublic class Hangman {\n    private static final String[] WORD_LIST = {\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"mango\", \"orange\"};\n    private static final int MAX_WRONG_GUESSES = 6;\n\n    public static void main(String[] args) {\n        // Game logic will go here\n    }\n\n    private static String selectWord(String[] wordList) {\n        Random rand = new Random();\n        return wordList[rand.nextInt(wordList.length)];\n    }\n\n    private static String displayWord(String word, Set<Character> guessedLetters) {\n        StringBuilder display = new StringBuilder();\n        for (char c : word.toCharArray()) {\n            if (guessedLetters.contains(c)) {\n                display.append(c);\n            } else {\n                display.append(\"_\");\n            }\n        }\n        return display.toString();\n    }\n\n    private static boolean checkGuess(String word, Set<Character> guessedLetters, char guess) {\n        if (word.contains(String.valueOf(guess))) {\n            guessedLetters.add(guess);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    private static boolean isWordGuessed(String word, Set<Character> guessedLetters) {\n        for (char c : word.toCharArray()) {\n            if (!guessedLetters.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean playAgain(Scanner scanner) {\n        System.out.print(\"Do you want to play again? (yes/no): \");\n        String response = scanner.next().toLowerCase();\n        return response.equals(\"yes\");\n    }\n}\n```\n\nNow, I need to implement the game logic in the `main` method.\n\n```java\npublic static void main(String[] args) {\n    Scanner scanner = new Scanner(System.in);\n    Set<Character> guessedLetters = new HashSet<>();\n    int wrongGuesses = 0;\n\n    String wordToGuess = selectWord(WORD_LIST);\n    String currentDisplay = displayWord(wordToGuess, guessedLetters);\n\n    System.out.println(\"Welcome to Hangman!\");\n    System.out.println(\"Try to guess the word: \" + currentDisplay);\n\n    while (!isWordGuessed(wordToGuess, guessedLetters) && wrongGuesses < MAX_WRONG_GUESSES) {\n        System.out.print(\"Guess a letter: \");\n        char guess = scanner.next().toLowerCase().charAt(0);\n\n        if (guessedLetters.contains(guess)) {\n            System.out.println(\"You already guessed that letter. Try again.\");\n            continue;\n        }\n\n        if (!Character.isLetter(guess)) {\n            System.out.println(\"Please enter a valid letter.\");\n            continue;\n        }\n\n        guessedLetters.add(guess);\n\n        if (checkGuess(wordToGuess, guessedLetters, guess)) {\n            currentDisplay = displayWord(wordToGuess, guessedLetters);\n            System.out.println(\"Correct! Current word: \" + currentDisplay);\n        } else {\n            wrongGuesses++;\n            System.out.println(\"Wrong guess! You have \" + (MAX_WRONG_GUESSES - wrongGuesses) + \" attempts left.\");\n        }\n    }\n\n    if (isWordGuessed(wordToGuess, guessedLetters)) {\n        System.out.println(\"Congratulations! You've guessed the word: \" + wordToGuess);\n    } else {\n        System.out.println(\"Sorry, you've run out of attempts. The word was: \" + wordToGuess);\n    }\n\n    if (playAgain(scanner)) {\n        main(args);\n    } else {\n        System.out.println(\"Thanks for playing!\");\n    }\n    scanner.close();\n}\n```\n\nI need to make sure that the game handles invalid inputs properly. For example, if the user enters more than one character or a non-letter character, I should prompt them to enter a single letter.\n\nAlso, I should ensure that the game doesn't count multiple guesses of the same letter against the player. That's why I'm checking if the letter has already been guessed before processing it.\n\nLet me test this logic in my mind with an example.\n\nSuppose the word is \"apple\".\n\nInitial display: _ _ _ _ _\n\nPlayer guesses 'a'. It's correct. Display becomes a _ _ _ e.\n\nPlayer guesses 'p'. It's correct. Display becomes a p p _ e.\n\nPlayer guesses 'x'. It's incorrect. Wrong guesses: 1.\n\nPlayer guesses 'l'. It's correct. Display becomes a p p l e.\n\nPlayer has guessed the word, so they win.\n\nAnother scenario:\n\nWord is \"banana\".\n\nDisplay: _ _ _ _ _ _\n\nGuess 'b'. Correct. Display: b _ _ _ _ _.\n\nGuess 'a'. Correct. Display: b a _ a _ a.\n\nGuess 'c'. Incorrect. Wrong guesses: 1.\n\nGuess 'n'. Correct. Display: b a n a n a.\n\nPlayer wins.\n\nScenario where player loses:\n\nWord is \"kiwi\".\n\nDisplay: _ _ _ _\n\nGuess 'k'. Correct. Display: k _ _ _.\n\nGuess 'i'. Correct. Display: k i i _.\n\nGuess 'x'. Incorrect. Wrong guesses: 1.\n\nGuess 'y'. Incorrect. Wrong guesses: 2.\n\nIf MAX_WRONG_GUESSES is 2, player loses.\n\nWait, in this case, the player has guessed two incorrect letters and hasn't completed the word, so they lose.\n\nI should also consider that some letters may appear multiple times in the word, like in \"banana\", where 'a' appears multiple times.\n\nMy `checkGuess` method should handle multiple occurrences of a letter.\n\nAlso, I need to make sure that the game doesn't accept numbers, special characters, or multiple letters as guesses.\n\nIn the `main` method, I have checks to ensure that the input is a single letter and hasn't been guessed before.\n\nI should also handle cases where the user enters something other than a letter, like a number or a symbol, by prompting them to enter a valid letter.\n\nAdditionally, I can add a counter to show how many guesses the player has left before they lose.\n\nLet me think about how to implement the `playAgain` method.\n\nAfter the game ends, either by winning or losing, I ask the player if they want to play again.\n\nIf they enter \"yes\", I restart the game by calling `main(args)` again.\n\nIf they enter anything else, I exit the game.\n\nI should also make sure to close the scanner object at the end to prevent resource leaks.\n\nNow, let's think about how to handle the display of the current state of the word.\n\nIn the `displayWord` method, I'm iterating through each character in the word and appending either the guessed letter or an underscore.\n\nThis should work fine.\n\nI might want to add spaces between the characters for better readability, like \"a _ _ l e\" instead of \"a___e\".\n\nTo do this, I can modify the `displayWord` method to append a space after each character.\n\n```java\nprivate static String displayWord(String word, Set<Character> guessedLetters) {\n    StringBuilder display = new StringBuilder();\n    for (char c : word.toCharArray()) {\n        if (guessedLetters.contains(c)) {\n            display.append(c).append(\" \");\n        } else {\n            display.append(\"_ \");\n        }\n    }\n    return display.toString().trim();\n}\n```\n\nThis will add a space after each character or underscore and then trim any trailing space at the end.\n\nSo, for \"apple\", it would display \"a _ _ _ e\".\n\nThat looks better.\n\nAlso, I should consider that the word might have spaces or other non-letter characters, but since I'm assuming all words consist only of lowercase letters, I don't need to handle those cases.\n\nNow, regarding the hangman's body parts, since I'm not drawing them, I'll just keep track of the number of wrong guesses and inform the player how many attempts they have left.\n\nI can adjust the `MAX_WRONG_GUESSES` constant to make the game easier or harder.\n\nFor example, with 6 wrong guesses allowed, the player has room for 6 mistakes before losing.\n\nI might want to print a message at the start of the game indicating how many wrong guesses are allowed.\n\nSomething like: \"You have 6 attempts to guess the word correctly.\"\n\nAlso, after each incorrect guess, I can inform the player how many attempts they have left.\n\nFor example: \"Wrong guess! You have 5 attempts left.\"\n\nThis will help the player keep track of their progress.\n\nI should also make sure that the game doesn't count the same wrong guess multiple times.\n\nIf the player guesses the same incorrect letter multiple times, it should only count as one wrong guess.\n\nIn my current implementation, I'm adding the guess to the `guessedLetters` set, so if they guess the same letter again, it will be ignored, and I prompt them to try again.\n\nThis should prevent them from losing multiple attempts for the same incorrect letter.\n\nAnother thing to consider is the length of the word.\n\nIf the word is very long, it might be harder to guess, and if it's very short, it might be easier.\n\nI could optionally display the length of the word at the start, but since I'm already displaying the underscores for each letter, the length is already known.\n\nAlright, I think I've covered most of the aspects needed for this implementation.\n\nLet me summarize the steps again:\n\n1. Define a list of words.\n\n2. Randomly select one word.\n\n3. Initialize a set to track guessed letters and a counter for wrong guesses.\n\n4. Display the initial state of the word with underscores.\n\n5. Loop until the word is guessed or the player runs out of attempts:\n\na. Prompt the player to guess a letter.\n\nb. Validate the input to ensure it's a single letter and hasn't been guessed before.\n\nc. If the letter is in the word, reveal its positions; otherwise, increment the wrong guesses counter.\n\nd. Display the current state of the word.\n\n6. After the loop, indicate whether the player won or lost.\n\n7. Ask if the player wants to play again.\n\nI should also think about how to handle edge cases, such as:\n\n- The word contains repeated letters.\n\n- The player guesses a letter that has already been guessed.\n\n- The player enters something other than a single letter.\n\n- The word consists of only one letter.\n\n- The word is empty (though in my list, all words have at least two letters).\n\nI need to make sure that the program handles all these cases correctly without errors.\n\nI should also consider adding comments to the code to make it easier to understand for others who might read it.\n\nLastly, I should test the program with different words and different scenarios to ensure that it works as expected.\n\nI can create a simple test plan:\n\n- Test with a word that the player guesses correctly in fewer guesses.\n\n- Test with a word that the player guesses incorrectly, using up all attempts.\n\n- Test with words that have repeated letters.\n\n- Test with invalid inputs, like numbers, symbols, or multiple letters.\n\n- Test the \"play again\" functionality.\n\nBy covering these test cases, I can be more confident that the program is working correctly.\n\nI think that's a solid plan. Now, I'll proceed to write the actual code based on this design.\n\n## Final Solution\nTo create a Java implementation of the classic game Hangman, follow the steps below. This implementation includes a predefined list of words, allows the user to guess letters using keyboard input only, and displays the current state of the word after each guess.\n\n### Approach\n\n1. **Predefined List of Words:** Use an array of strings containing words to guess.\n2. **Selecting a Word:** Randomly choose one word from the array for each game.\n3. **Tracking Guesses:** Use a `Set` to track guessed letters and an integer to count wrong guesses.\n4. **Displaying the Current State:** Show the word with guessed letters revealed and unguessed letters as underscores.\n5. **Input Handling:** Read user input for letter guesses and handle invalid inputs or repeated guesses.\n6. **Winning and Losing Conditions:** Determine when the player has guessed the word correctly or has exceeded the maximum number of wrong guesses.\n\n### Solution Code\n\n```java\nimport java.util.Set;\nimport java.util.HashSet;\nimport java.util.Scanner;\nimport java.util.Random;\n\npublic class Hangman {\n    private static final String[] WORD_LIST = {\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"mango\", \"orange\"};\n    private static final int MAX_WRONG_GUESSES = 6;\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        Set<Character> guessedLetters = new HashSet<>();\n        int wrongGuesses = 0;\n\n        String wordToGuess = selectWord(WORD_LIST);\n        String currentDisplay = displayWord(wordToGuess, guessedLetters);\n\n        System.out.println(\"Welcome to Hangman!\");\n        System.out.println(\"Try to guess the word: \" + currentDisplay);\n        System.out.println(\"You have \" + MAX_WRONG_GUESSES + \" attempts to guess the word correctly.\");\n\n        while (!isWordGuessed(wordToGuess, guessedLetters) && wrongGuesses < MAX_WRONG_GUESSES) {\n            System.out.print(\"Guess a letter: \");\n            char guess = scanner.next().toLowerCase().charAt(0);\n\n            if (guessedLetters.contains(guess)) {\n                System.out.println(\"You already guessed that letter. Try again.\");\n                continue;\n            }\n\n            if (!Character.isLetter(guess)) {\n                System.out.println(\"Please enter a valid letter.\");\n                continue;\n            }\n\n            guessedLetters.add(guess);\n\n            if (checkGuess(wordToGuess, guessedLetters, guess)) {\n                currentDisplay = displayWord(wordToGuess, guessedLetters);\n                System.out.println(\"Correct! Current word: \" + currentDisplay);\n            } else {\n                wrongGuesses++;\n                System.out.println(\"Wrong guess! You have \" + (MAX_WRONG_GUESSES - wrongGuesses) + \" attempts left.\");\n            }\n        }\n\n        if (isWordGuessed(wordToGuess, guessedLetters)) {\n            System.out.println(\"Congratulations! You've guessed the word: \" + wordToGuess);\n        } else {\n            System.out.println(\"Sorry, you've run out of attempts. The word was: \" + wordToGuess);\n        }\n\n        if (playAgain(scanner)) {\n            main(args);\n        } else {\n            System.out.println(\"Thanks for playing!\");\n        }\n        scanner.close();\n    }\n\n    private static String selectWord(String[] wordList) {\n        Random rand = new Random();\n        return wordList[rand.nextInt(wordList.length)];\n    }\n\n    private static String displayWord(String word, Set<Character> guessedLetters) {\n        StringBuilder display = new StringBuilder();\n        for (char c : word.toCharArray()) {\n            if (guessedLetters.contains(c)) {\n                display.append(c).append(\" \");\n            } else {\n                display.append(\"_ \");\n            }\n        }\n        return display.toString().trim();\n    }\n\n    private static boolean checkGuess(String word, Set<Character> guessedLetters, char guess) {\n        return word.indexOf(guess) != -1;\n    }\n\n    private static boolean isWordGuessed(String word, Set<Character> guessedLetters) {\n        for (char c : word.toCharArray()) {\n            if (!guessedLetters.contains(c)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private static boolean playAgain(Scanner scanner) {\n        System.out.print(\"Do you want to play again? (yes/no): \");\n        String response = scanner.next().toLowerCase();\n        return response.equals(\"yes\");\n    }\n}\n```\n\n### Explanation\n\n1. **Predefined List of Words:** Stored in `WORD_LIST`.\n2. **Selecting a Word:** Uses `Random` to select a word from `WORD_LIST`.\n3. **Tracking Guesses:** Uses a `Set` to track guessed letters and an integer `wrongGuesses` to count incorrect guesses.\n4. **Displaying the Current State:** `displayWord` method shows the word with guessed letters and underscores for unrevealed letters.\n5. **Input Handling:** Reads input using `Scanner`, checks for validity and duplicates.\n6. **Winning and Losing Conditions:** Checks if the word is fully guessed or if the player exceeds the maximum wrong guesses.\n\nThis implementation ensures a simple and effective Hangman game experience in Java."
    }
]