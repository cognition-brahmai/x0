[
    {
        "role": "user",
        "content": "Create a JavaScript function that takes an array of integers as input and returns an object with keys \"even\" and \"odd\", where each key has an array of corresponding even or odd numbers from the input array. Additionally, write unit tests using Jest to validate the correctness of your function.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's start by creating the JavaScript function that processes an array of integers and categorizes them into even and odd numbers.\n\n### Solution Code\n\n```javascript\nfunction categorizeNumbers(arr) {\n    const result = {\n        even: [],\n        odd: []\n    };\n\n    arr.forEach(num => {\n        if (typeof num === 'number' && Number.isInteger(num)) {\n            if (num % 2 === 0) {\n                result.even.push(num);\n            } else {\n                result.odd.push(num);\n            }\n        }\n    });\n\n    return result;\n}\n```\n\n### Explanation\n\n1. **Function Definition**:\n   - The function `categorizeNumbers` takes an array of integers as input.\n   \n2. **Initialization**:\n   - We initialize an object `result` with two empty arrays: one for even numbers and one for odd numbers.\n   \n3. **Processing the Array**:\n   - We iterate over each element in the input array using `forEach`.\n   - For each number, we check if it is an integer using `Number.isInteger`.\n   - If it is an integer, we determine if it is even or odd by checking the remainder when divided by 2 (`num % 2`).\n   - Depending on whether the number is even or odd, we push it into the corresponding array in the `result` object.\n   \n4. **Return the Result**:\n   - Finally, we return the `result` object containing the categorized numbers.\n\n### Unit Tests with Jest\n\nTo ensure the correctness of the `categorizeNumbers` function, we will write unit tests using Jest.\n\n#### Test Code\n\n```javascript\ndescribe('categorizeNumbers', () => {\n    test('it should correctly categorize even and odd numbers', () => {\n        const input = [1, 2, 3, 4, 5, 6];\n        const expected = {\n            even: [2, 4, 6],\n            odd: [1, 3, 5]\n        };\n        expect(categorizeNumbers(input)).toEqual(expected);\n    });\n\n    test('it should handle an array with no numbers', () => {\n        const input = [];\n        const expected = {\n            even: [],\n            odd: []\n        };\n        expect(categorizeNumbers(input)).toEqual(expected);\n    });\n\n    test('it should ignore non-integer values', () => {\n        const input = [1, 2, 3, 4, 5, 6, '7', 8.5, null, undefined];\n        const expected = {\n            even: [2, 4, 6],\n            odd: [1, 3, 5]\n        };\n        expect(categorizeNumbers(input)).toEqual(expected);\n    });\n\n    test('it should handle negative numbers correctly', () => {\n        const input = [-2, -1, 0, 1, 2];\n        const expected = {\n            even: [-2, 0, 2],\n            odd: [-1, 1]\n        };\n        expect(categorizeNumbers(input)).toEqual(expected);\n    });\n\n    test('it should handle an array with single element', () => {\n        const input = [7];\n        const expected = {\n            even: [],\n            odd: [7]\n        };\n        expect(categorizeNumbers(input)).toEqual(expected);\n    });\n});\n```\n\n### Explanation of Tests\n\n1. **Standard Input**:\n   - Tests the function with a standard array of integers including both even and odd numbers.\n   \n2. **Empty Array**:\n   - Verifies that the function correctly handles an empty array by returning empty arrays for both even and odd categories.\n   \n3. **Non-Integer Values**:\n   - Ensures that the function ignores non-integer values and only processes integers.\n   \n4. **Negative Numbers**:\n   - Checks that the function correctly categorizes negative integers as even or odd.\n   \n5. **Single Element Array**:\n   - Validates the function's behavior with an array containing a single element.\n\nThese tests cover various scenarios to ensure the function behaves as expected under different conditions."
    }
]