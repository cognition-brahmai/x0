[
    {
        "role": "user",
        "content": "Write a Python script that performs the following tasks:\n    a. Connects to an AWS EC2 instance using Boto3 library.\n    b. Creates a new S3 bucket and uploads a specified local file to the bucket.\n    c. Configures an Amazon RDS instance running MySQL and creates a new database with a table to store user information (name, email, and password).\n    d. Inserts sample data into the RDS table and queries the data to display it in the console.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a Python script that does a bunch of AWS stuff using the Boto3 library. We'll connect to an EC2 instance, create an S3 bucket, upload a file to it, set up an RDS MySQL database, create a table, insert some data, and then query that data. Sounds like a lot, but I'll break it down step by step.\n\nFirst things first, make sure you have Boto3 installed. You can install it using pip if you haven't already:\n\n```bash\npip install boto3\n```\n\nAlso, ensure that your AWS credentials are configured correctly on your machine. You can do this by setting up the AWS CLI or by setting environment variables for your access key and secret key.\n\nNow, let's start writing the script.\n\n### Part A: Connect to an AWS EC2 instance using Boto3\n\nTo connect to an EC2 instance, you'll need to create an EC2 resource object using Boto3. Here's how you can do it:\n\n```python\nimport boto3\n\n# Create an EC2 resource object\nec2 = boto3.resource('ec2')\n\n# Now you can perform operations on EC2 instances\n# For example, list all instances\ninstances = ec2.instances.all()\nfor instance in instances:\n    print(instance.id, instance.state)\n```\n\nThis code sets up a connection to EC2 and lists all the instances along with their states.\n\n### Part B: Create a new S3 bucket and upload a specified local file to the bucket\n\nNext, we'll create an S3 bucket and upload a file to it.\n\n```python\nimport boto3\n\n# Create an S3 client\ns3_client = boto3.client('s3')\n\n# Specify the bucket name\nbucket_name = 'your-unique-bucket-name'\n\n# Create the bucket\ns3_client.create_bucket(Bucket=bucket_name)\n\n# Specify the local file path\nlocal_file_path = 'path/to/your/local/file.txt'\n\n# Upload the file to the bucket\ns3_client.upload_file(local_file_path, bucket_name, 'file.txt')\n```\n\nMake sure to replace `'your-unique-bucket-name'` with a unique name for your S3 bucket, and `'path/to/your/local/file.txt'` with the actual path to the file you want to upload.\n\n### Part C: Configure an Amazon RDS instance running MySQL and create a new database with a table to store user information\n\nSetting up an RDS instance programmatically is a bit more involved. You'll need to use the Boto3 RDS client to create a DB instance.\n\n```python\nimport boto3\n\n# Create an RDS client\nrds_client = boto3.client('rds')\n\n# Define the DB instance parameters\ndb_instance_identifier = 'your-db-instance-id'\ndb_name = 'your_db_name'\nmaster_username = 'admin'\nmaster_user_password = 'your_password'\nallocated_storage = 20\ndb_instance_class = 'db.t2.micro'\n\n# Create the DB instance\nresponse = rds_client.create_db_instance(\n    DBName=db_name,\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=allocated_storage,\n    DBInstanceClass=db_instance_class,\n    Engine='mysql',\n    MasterUsername=master_username,\n    MasterUserPassword=master_user_password,\n)\n\n# Wait for the DB instance to be available\nwaiter = rds_client.get_waiter('db_instance_available')\nwaiter.wait(DBInstanceIdentifier=db_instance_identifier)\n\n# Now, connect to the DB and create a table\nimport pymysql\n\n# Get the DB endpoint\ndb_endpoint = response['DBInstance']['Endpoint']['Address']\n\n# Connect to the DB\nconnection = pymysql.connect(host=db_endpoint,\n                             user=master_username,\n                             password=master_user_password,\n                             db=db_name,\n                             charset='utf8mb4',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        # Create a table\n        create_table_sql = \"\"\"\n        CREATE TABLE users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            name VARCHAR(100),\n            email VARCHAR(100),\n            password VARCHAR(100)\n        );\n        \"\"\"\n        cursor.execute(create_table_sql)\n        connection.commit()\nfinally:\n    connection.close()\n```\n\nReplace `'your-db-instance-id'`, `'your_db_name'`, `'admin'`, and `'your_password'` with your desired values. Note that creating an RDS instance can take several minutes, so we use a waiter to wait until the instance is available.\n\n### Part D: Insert sample data into the RDS table and query the data to display it in the console\n\nFinally, we'll insert some sample data into the `users` table and query it.\n\n```python\nimport pymysql\n\n# Connect to the DB\nconnection = pymysql.connect(host=db_endpoint,\n                             user=master_username,\n                             password=master_user_password,\n                             db=db_name,\n                             charset='utf8mb4',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        # Insert sample data\n        insert_sql = \"\"\"\n        INSERT INTO users (name, email, password)\n        VALUES (%s, %s, %s);\n        \"\"\"\n        sample_data = [\n            ('John Doe', 'john.doe@example.com', 'password123'),\n            ('Jane Smith', 'jane.smith@example.com', 'password456'),\n        ]\n        cursor.executemany(insert_sql, sample_data)\n        connection.commit()\n\n        # Query the data\n        select_sql = \"SELECT * FROM users;\"\n        cursor.execute(select_sql)\n        results = cursor.fetchall()\n        for row in results:\n            print(row)\nfinally:\n    connection.close()\n```\n\nThis code inserts two sample users into the `users` table and then queries all rows from the table, printing them to the console.\n\n### Complete Script\n\nCombining all parts, your complete script would look like this:\n\n```python\nimport boto3\nimport pymysql\n\n# Part A: Connect to an AWS EC2 instance\nec2 = boto3.resource('ec2')\ninstances = ec2.instances.all()\nfor instance in instances:\n    print(instance.id, instance.state)\n\n# Part B: Create a new S3 bucket and upload a specified local file to the bucket\ns3_client = boto3.client('s3')\nbucket_name = 'your-unique-bucket-name'\ns3_client.create_bucket(Bucket=bucket_name)\nlocal_file_path = 'path/to/your/local/file.txt'\ns3_client.upload_file(local_file_path, bucket_name, 'file.txt')\n\n# Part C: Configure an Amazon RDS instance running MySQL and create a new database with a table\nrds_client = boto3.client('rds')\ndb_instance_identifier = 'your-db-instance-id'\ndb_name = 'your_db_name'\nmaster_username = 'admin'\nmaster_user_password = 'your_password'\nallocated_storage = 20\ndb_instance_class = 'db.t2.micro'\n\nresponse = rds_client.create_db_instance(\n    DBName=db_name,\n    DBInstanceIdentifier=db_instance_identifier,\n    AllocatedStorage=allocated_storage,\n    DBInstanceClass=db_instance_class,\n    Engine='mysql',\n    MasterUsername=master_username,\n    MasterUserPassword=master_user_password,\n)\n\nwaiter = rds_client.get_waiter('db_instance_available')\nwaiter.wait(DBInstanceIdentifier=db_instance_identifier)\n\ndb_endpoint = response['DBInstance']['Endpoint']['Address']\n\nconnection = pymysql.connect(host=db_endpoint,\n                             user=master_username,\n                             password=master_user_password,\n                             db=db_name,\n                             charset='utf8mb4',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        create_table_sql = \"\"\"\n        CREATE TABLE users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            name VARCHAR(100),\n            email VARCHAR(100),\n            password VARCHAR(100)\n        );\n        \"\"\"\n        cursor.execute(create_table_sql)\n        connection.commit()\nfinally:\n    connection.close()\n\n# Part D: Insert sample data into the RDS table and query the data\nconnection = pymysql.connect(host=db_endpoint,\n                             user=master_username,\n                             password=master_user_password,\n                             db=db_name,\n                             charset='utf8mb4',\n                             cursorclass=pymysql.cursors.DictCursor)\n\ntry:\n    with connection.cursor() as cursor:\n        insert_sql = \"\"\"\n        INSERT INTO users (name, email, password)\n        VALUES (%s, %s, %s);\n        \"\"\"\n        sample_data = [\n            ('John Doe', 'john.doe@example.com', 'password123'),\n            ('Jane Smith', 'jane.smith@example.com', 'password456'),\n        ]\n        cursor.executemany(insert_sql, sample_data)\n        connection.commit()\n\n        select_sql = \"SELECT * FROM users;\"\n        cursor.execute(select_sql)\n        results = cursor.fetchall()\n        for row in results:\n            print(row)\nfinally:\n    connection.close()\n```\n\n### Important Notes\n\n1. **AWS Credentials**: Ensure your AWS credentials are correctly configured.\n2. **Unique Bucket Name**: The S3 bucket name must be unique across all AWS S3 buckets.\n3. **RDS Instance Identifier**: The DB instance identifier must be unique within your AWS account.\n4. **Security Groups and VPC**: For RDS, you might need to configure security groups and VPC settings to allow connections.\n5. **Wait for RDS Instance**: Creating an RDS instance can take time, so using a waiter is essential.\n6. **Error Handling**: Add appropriate error handling for production code.\n\nThis script should cover all the tasks you've outlined. Let me know if you need any further assistance!"
    }
]