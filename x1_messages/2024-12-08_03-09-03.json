[
    {
        "role": "user",
        "content": "Implement a simple binary search tree in Java. Each node of the tree should contain an integer value, a reference to a left child node, and a reference to a right child node. Include methods for inserting values into the tree and searching for values within the tree. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Implementing a binary search tree (BST) in Java involves creating a class for the nodes and another class to manage the tree operations like insertion and search. A BST is a data structure where each node has at most two children, referred to as the left child and the right child. For any node, all elements in the left subtree are less than the node, and all elements in the right subtree are greater than the node.\n\nHere's a step-by-step guide to implement a simple BST in Java:\n\n### Step 1: Define the Node Class\n\nFirst, we need a class to represent each node in the BST. Each node will hold an integer value and references to its left and right children.\n\n```java\nclass TreeNode {\n    int value;\n    TreeNode left;\n    TreeNode right;\n\n    public TreeNode(int value) {\n        this.value = value;\n        this.left = null;\n        this.right = null;\n    }\n}\n```\n\n### Step 2: Define the BinarySearchTree Class\n\nNext, we create a class for the BST itself. This class will have methods to insert values and search for values within the tree.\n\n```java\npublic class BinarySearchTree {\n    private TreeNode root;\n\n    public BinarySearchTree() {\n        this.root = null;\n    }\n\n    // Method to insert a value into the BST\n    public void insert(int value) {\n        this.root = insertRecursive(this.root, value);\n    }\n\n    // Helper method to insert a value recursively\n    private TreeNode insertRecursive(TreeNode current, int value) {\n        if (current == null) {\n            return new TreeNode(value);\n        }\n\n        if (value < current.value) {\n            current.left = insertRecursive(current.left, value);\n        } else if (value > current.value) {\n            current.right = insertRecursive(current.right, value);\n        } else {\n            // Duplicate values are not allowed in BST\n            return current;\n        }\n\n        return current;\n    }\n\n    // Method to search for a value in the BST\n    public boolean search(int value) {\n        return searchRecursive(this.root, value);\n    }\n\n    // Helper method to search for a value recursively\n    private boolean searchRecursive(TreeNode current, int value) {\n        if (current == null) {\n            return false;\n        }\n\n        if (value == current.value) {\n            return true;\n        } else if (value < current.value) {\n            return searchRecursive(current.left, value);\n        } else {\n            return searchRecursive(current.right, value);\n        }\n    }\n\n    // Optional: Method to perform an in-order traversal and print the tree\n    public void inOrderTraversal() {\n        inOrderRecursive(this.root);\n    }\n\n    private void inOrderRecursive(TreeNode current) {\n        if (current != null) {\n            inOrderRecursive(current.left);\n            System.out.print(current.value + \" \");\n            inOrderRecursive(current.right);\n        }\n    }\n\n    public static void main(String[] args) {\n        BinarySearchTree bst = new BinarySearchTree();\n        bst.insert(50);\n        bst.insert(30);\n        bst.insert(70);\n        bst.insert(20);\n        bst.insert(40);\n        bst.insert(60);\n        bst.insert(80);\n\n        System.out.println(\"In-order traversal: \");\n        bst.inOrderTraversal(); // Output: 20 30 40 50 60 70 80\n\n        System.out.println(\"\\nSearch for 60: \" + bst.search(60)); // Output: true\n        System.out.println(\"Search for 90: \" + bst.search(90)); // Output: false\n    }\n}\n```\n\n### Explanation\n\n1. **TreeNode Class**: This inner class represents each node in the BST. Each node has an integer value and references to its left and right children.\n\n2. **BinarySearchTree Class**: This is the main class that manages the BST operations.\n   - **insert(int value)**: Inserts a new value into the BST.\n   - **search(int value)**: Searches for a value in the BST and returns true if found, else false.\n   - **inOrderTraversal()**: An optional method to print the tree in-order (left, root, right), which helps verify the correctness of the tree.\n\n3. **Main Method**: Demonstrates inserting values into the BST and searching for values. It also performs an in-order traversal to print the tree's elements in sorted order.\n\nThis implementation ensures that the BST properties are maintained during insertions and searches. The search operation is efficient, with a time complexity of O(log n) in the average case, where n is the number of nodes in the tree."
    }
]