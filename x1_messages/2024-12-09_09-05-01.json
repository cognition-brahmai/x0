[
    {
        "role": "user",
        "content": "Create a basic calculator application in C++. The calculator should support addition, subtraction, multiplication, division and square root operations. Handle possible exceptions such as division by zero."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a basic calculator in C++ that supports addition, subtraction, multiplication, division, and square root operations is a great project. We'll also need to handle exceptions like division by zero to make sure our calculator is robust.\n\nFirst, let's outline the steps we need to follow:\n\n1. **Include necessary headers**: We'll need headers for input/output operations and mathematical functions.\n2. **Display menu options**: Show the user what operations they can perform.\n3. **Get user input**: Ask the user to choose an operation and enter the numbers.\n4. **Perform the operation**: Based on the user's choice, perform the appropriate calculation.\n5. **Handle exceptions**: Ensure that operations like division don't cause errors when dividing by zero.\n6. **Loop until the user wants to exit**: Allow the user to perform multiple calculations without restarting the program.\n\nSounds good? Let's start by including the necessary headers.\n\n### Step 1: Include Necessary Headers\n\nWe need to include `<iostream>` for input and output operations, `<cmath>` for mathematical functions like square root, and `<iomanip>` for controlling the precision of the output.\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n```\n\n### Step 2: Display Menu Options\n\nWe'll create a function to display the menu options to the user.\n\n```cpp\nvoid displayMenu() {\n    std::cout << \"Select operation:\" << std::endl;\n    std::cout << \"1. Addition\" << std::endl;\n    std::cout << \"2. Subtraction\" << std::endl;\n    std::cout << \"3. Multiplication\" << std::endl;\n    std::cout << \"4. Division\" << std::endl;\n    std::cout << \"5. Square Root\" << std::endl;\n    std::cout << \"6. Exit\" << std::endl;\n}\n```\n\n### Step 3: Get User Input\n\nWe need to get the user's choice of operation and the numbers involved.\n\n```cpp\nint getOperationChoice() {\n    int choice;\n    std::cout << \"Enter choice (1/2/3/4/5/6): \";\n    std::cin >> choice;\n    return choice;\n}\n\ndouble getNumber(const std::string& prompt) {\n    double num;\n    std::cout << prompt;\n    std::cin >> num;\n    return num;\n}\n```\n\n### Step 4: Perform the Operation\n\nBased on the user's choice, we'll perform the corresponding operation.\n\n```cpp\ndouble performOperation(int choice) {\n    double num1, num2, result;\n\n    switch (choice) {\n        case 1:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 + num2;\n            break;\n        case 2:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 - num2;\n            break;\n        case 3:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 * num2;\n            break;\n        case 4:\n            num1 = getNumber(\"Enter numerator: \");\n            num2 = getNumber(\"Enter denominator: \");\n            if (num2 == 0) {\n                std::cout << \"Error: Division by zero\" << std::endl;\n                return NAN; // Not a Number\n            }\n            result = num1 / num2;\n            break;\n        case 5:\n            num1 = getNumber(\"Enter number for square root: \");\n            if (num1 < 0) {\n                std::cout << \"Error: Square root of negative number\" << std::endl;\n                return NAN;\n            }\n            result = sqrt(num1);\n            break;\n        default:\n            std::cout << \"Invalid choice\" << std::endl;\n            return NAN;\n    }\n    return result;\n}\n```\n\n### Step 5: Handle Exceptions\n\nWe've already handled division by zero and negative square roots by checking the inputs and returning `NAN` (Not a Number) in those cases.\n\n### Step 6: Loop Until the User Wants to Exit\n\nWe'll use a loop to allow the user to perform multiple operations until they choose to exit.\n\n```cpp\nint main() {\n    int choice;\n    double result;\n\n    do {\n        displayMenu();\n        choice = getOperationChoice();\n\n        if (choice == 6) {\n            std::cout << \"Exiting the calculator.\" << std::endl;\n            break;\n        }\n\n        result = performOperation(choice);\n\n        if (!std::isnan(result)) {\n            std::cout << \"Result: \" << std::fixed << std::setprecision(2) << result << std::endl;\n        }\n\n    } while (choice != 6);\n\n    return 0;\n}\n```\n\n### Complete Code\n\nPutting it all together:\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <iomanip>\n\nvoid displayMenu() {\n    std::cout << \"Select operation:\" << std::endl;\n    std::cout << \"1. Addition\" << std::endl;\n    std::cout << \"2. Subtraction\" << std::endl;\n    std::cout << \"3. Multiplication\" << std::endl;\n    std::cout << \"4. Division\" << std::endl;\n    std::cout << \"5. Square Root\" << std::endl;\n    std::cout << \"6. Exit\" << std::endl;\n}\n\nint getOperationChoice() {\n    int choice;\n    std::cout << \"Enter choice (1/2/3/4/5/6): \";\n    std::cin >> choice;\n    return choice;\n}\n\ndouble getNumber(const std::string& prompt) {\n    double num;\n    std::cout << prompt;\n    std::cin >> num;\n    return num;\n}\n\ndouble performOperation(int choice) {\n    double num1, num2, result;\n\n    switch (choice) {\n        case 1:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 + num2;\n            break;\n        case 2:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 - num2;\n            break;\n        case 3:\n            num1 = getNumber(\"Enter first number: \");\n            num2 = getNumber(\"Enter second number: \");\n            result = num1 * num2;\n            break;\n        case 4:\n            num1 = getNumber(\"Enter numerator: \");\n            num2 = getNumber(\"Enter denominator: \");\n            if (num2 == 0) {\n                std::cout << \"Error: Division by zero\" << std::endl;\n                return NAN;\n            }\n            result = num1 / num2;\n            break;\n        case 5:\n            num1 = getNumber(\"Enter number for square root: \");\n            if (num1 < 0) {\n                std::cout << \"Error: Square root of negative number\" << std::endl;\n                return NAN;\n            }\n            result = sqrt(num1);\n            break;\n        default:\n            std::cout << \"Invalid choice\" << std::endl;\n            return NAN;\n    }\n    return result;\n}\n\nint main() {\n    int choice;\n    double result;\n\n    do {\n        displayMenu();\n        choice = getOperationChoice();\n\n        if (choice == 6) {\n            std::cout << \"Exiting the calculator.\" << std::endl;\n            break;\n        }\n\n        result = performOperation(choice);\n\n        if (!std::isnan(result)) {\n            std::cout << \"Result: \" << std::fixed << std::setprecision(2) << result << std::endl;\n        }\n\n    } while (choice != 6);\n\n    return 0;\n}\n```\n\nThis code provides a simple text-based calculator that can perform basic arithmetic operations and handle potential errors like division by zero or negative square roots. Let me know if you have any questions or need further explanations!"
    }
]