[
    {
        "role": "user",
        "content": "Create a Python script that implements a linked list data structure with methods for adding elements at the beginning, end, and specific index, as well as removing elements by value or index.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a linked list in Python involves defining a class for the nodes and another class to manage the list operations. Here's a step-by-step guide to implementing a singly linked list with the specified methods.\n\n### Step 1: Define the Node Class\nEach node in the linked list will hold data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the LinkedList Class\nThis class will manage the nodes and provide methods to add and remove elements.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Method to add a node at the beginning\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    # Method to add a node at the end\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    # Method to add a node at a specific index\n    def add_at_index(self, index, data):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if index == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        new_node.next = current.next\n        current.next = new_node\n\n    # Method to remove a node by value\n    def remove_by_value(self, value):\n        current = self.head\n        previous = None\n        while current and current.data != value:\n            previous = current\n            current = current.next\n        if not current:\n            raise ValueError(\"Value not found in the list\")\n        if previous is None:\n            self.head = current.next\n        else:\n            previous.next = current.next\n\n    # Method to remove a node by index\n    def remove_by_index(self, index):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if self.head is None:\n            raise IndexError(\"Cannot remove from an empty list\")\n        if index == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current or not current.next:\n            raise IndexError(\"Index out of range\")\n        current.next = current.next.next\n\n    # Method to display the list\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n```\n\n### Explanation\n1. **Node Class**: Each node contains data and a reference to the next node.\n2. **LinkedList Class**:\n   - **add_beginning**: Adds a new node at the start of the list.\n   - **add_end**: Adds a new node at the end of the list.\n   - **add_at_index**: Inserts a new node at the specified index.\n   - **remove_by_value**: Removes the first node containing the specified value.\n   - **remove_by_index**: Removes the node at the specified index.\n   - **display**: Prints the elements of the list.\n\nThis implementation covers the basic operations you requested. You can test these methods by creating an instance of `LinkedList` and calling the respective functions."
    }
]