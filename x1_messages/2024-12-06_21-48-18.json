[
    {
        "role": "user",
        "content": "Utilizing GoLang, write a server application that listens on a specified port and responds with the current time whenever it receives a GET request. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple GoLang server application that listens on a specified port (in this case, port 8080) and responds with the current time whenever it receives a GET request.\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\nCreate a new file, for example, `main.go`, and paste the following code into it:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc currentTimeHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\thttp.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tcurrentTime := time.Now().Format(time.RFC1123)\n\tfmt.Fprintf(w, \"Current Time: %s\", currentTime)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/time\", currentTimeHandler)\n\tfmt.Println(\"Server is listening on port 8080...\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t}\n}\n```\n\n### Explanation:\n\n1. **Import Necessary Packages:**\n   - `fmt`: For formatted I/O operations.\n   - `net/http`: For HTTP server functionalities.\n   - `time`: To handle time-related operations.\n\n2. **Define Handler Function:**\n   - `currentTimeHandler`: This function handles incoming HTTP requests for the `/time` endpoint.\n     - It checks if the request method is GET. If not, it returns a 405 Method Not Allowed error.\n     - It retrieves the current time formatted as per RFC1123 and writes it to the response writer.\n\n3. **Main Function:**\n   - Registers the `currentTimeHandler` function to handle requests to the `/time` URL path.\n   - Starts the HTTP server on port 8080 and prints a message indicating that the server is running.\n   - If there is an error starting the server, it prints the error message.\n\n### How to Run:\n\n1. Save the code in a file named `main.go`.\n2. Open your terminal or command prompt.\n3. Navigate to the directory containing `main.go`.\n4. Run the following command to start the server:\n\n   ```sh\n   go run main.go\n   ```\n\n5. Once the server is running, you can test it by opening a web browser or using a tool like `curl` to make a GET request to `http://localhost:8080/time`. You should see the current time displayed.\n\nThis is a basic example to get you started. In a real-world scenario, you might want to add more features, handle different types of requests, or improve error handling."
    }
]