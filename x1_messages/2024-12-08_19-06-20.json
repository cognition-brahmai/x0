[
    {
        "role": "user",
        "content": "Develop a Node.js script that periodically fetches cryptocurrency price data from a public API and saves it to a MongoDB database. The script should run every 15 minutes and store the latest prices for Bitcoin, Ethereum, and Litecoin. Implement error handling and ensure that duplicate entries are not added to the database."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Node.js script that fetches cryptocurrency prices from a public API and stores them in a MongoDB database. We'll set this up to run every 15 minutes and make sure it handles errors and avoids duplicates.\n\nFirst, we need to choose a public API for cryptocurrency prices. A popular one is CoinGecko, which provides comprehensive crypto data. We'll use their API to get the latest prices for Bitcoin, Ethereum, and Litecoin.\n\nNext, we need to set up a MongoDB database to store the price data. You can use MongoDB Atlas for a cloud-based database or set up a local MongoDB instance.\n\nLet's start by setting up a new Node.js project.\n\n## Step 1: Set Up the Node.js Project\n\n1. **Initialize the project:**\n\n   ```bash\n   mkdir crypto-price-tracker\n   cd crypto-price-tracker\n   npm init -y\n   ```\n\n2. **Install necessary packages:**\n\n   - `mongodb`: For connecting to MongoDB.\n   - `axios`: For making HTTP requests to the API.\n   - `cron`: For scheduling the script to run periodically.\n\n   ```bash\n   npm install mongodb axios cron\n   ```\n\n## Step 2: Set Up MongoDB Connection\n\nFirst, you need to have a MongoDB database set up. If you're using MongoDB Atlas, create a new cluster and note down the connection string.\n\nCreate a file named `db.js`:\n\n```javascript\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'your_mongodb_connection_string';\nconst client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true });\n\nlet db;\n\nasync function connect() {\n  try {\n    await client.connect();\n    console.log('Connected to MongoDB');\n    db = client.db('crypto_prices');\n  } catch (err) {\n    console.error('Failed to connect to MongoDB:', err);\n  }\n}\n\nfunction getDb() {\n  return db;\n}\n\nmodule.exports = { connect, getDb };\n```\n\nReplace `'your_mongodb_connection_string'` with your actual MongoDB connection string.\n\n## Step 3: Fetch Cryptocurrency Prices\n\nWe'll use the CoinGecko API to fetch the latest prices for Bitcoin, Ethereum, and Litecoin.\n\nCreate a file named `api.js`:\n\n```javascript\nconst axios = require('axios');\n\nasync function fetchPrices() {\n  try {\n    const response = await axios.get('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin%2Cethereum%2Clitecoin&vs_currencies=usd');\n    return response.data;\n  } catch (err) {\n    console.error('Error fetching prices:', err);\n    throw err;\n  }\n}\n\nmodule.exports = { fetchPrices };\n```\n\n## Step 4: Save Prices to MongoDB\n\nWe need to save the fetched prices to the MongoDB database, making sure to avoid duplicates.\n\nCreate a file named `data.js`:\n\n```javascript\nconst { getDb } = require('./db');\n\nasync function savePrice(data) {\n  const collection = getDb().collection('prices');\n  \n  // Check if a document for this cryptocurrency and timestamp already exists\n  const existing = await collection.findOne({ id: data.id, timestamp: data.timestamp });\n  if (existing) {\n    console.log(`Duplicate entry for ${data.id} at ${data.timestamp}, skipping.`);\n    return;\n  }\n  \n  await collection.insertOne(data);\n  console.log(`Saved price for ${data.id} at ${data.timestamp}`);\n}\n\nmodule.exports = { savePrice };\n```\n\n## Step 5: Schedule the Script\n\nWe'll use the `cron` package to schedule the script to run every 15 minutes.\n\nCreate a file named `scheduler.js`:\n\n```javascript\nconst cron = require('cron');\nconst { fetchPrices } = require('./api');\nconst { savePrice } = require('./data');\nconst { connect } = require('./db');\n\nasync function main() {\n  await connect();\n  \n  const job = new cron.CronJob('*/15 * * * *', async () => {\n    try {\n      const prices = await fetchPrices();\n      const timestamp = new Date();\n      \n      for (const [coin, priceData] of Object.entries(prices)) {\n        const id = coin;\n        const price = priceData.usd;\n        await savePrice({ id, price, timestamp });\n      }\n    } catch (err) {\n      console.error('Error in job execution:', err);\n    }\n  });\n  \n  job.start();\n}\n\nmain();\n```\n\n## Step 6: Run the Script\n\nMake sure all your files are in the same directory. Then, run the script:\n\n```bash\nnode scheduler.js\n```\n\nThis will start the script, which will fetch the cryptocurrency prices every 15 minutes and save them to the MongoDB database, avoiding duplicates.\n\n## Summary\n\n- Set up a new Node.js project.\n- Installed necessary packages: `mongodb`, `axios`, and `cron`.\n- Configured MongoDB connection in `db.js`.\n- Created `api.js` to fetch prices from CoinGecko.\n- Created `data.js` to save prices to MongoDB, checking for duplicates.\n- Set up a cron job in `scheduler.js` to run the fetching and saving process every 15 minutes.\n- Ran the script to start the scheduled task.\n\nThis setup ensures that you have a periodic script fetching and storing cryptocurrency prices without duplicates, handling potential errors along the way."
    }
]