[
    {
        "role": "user",
        "content": "Construct a PowerShell script that automates the process of creating, starting, stopping, and removing Docker containers. The script should accept command-line arguments to determine which operation to perform. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a PowerShell script that can handle creating, starting, stopping, and removing Docker containers. I'll make sure it accepts command-line arguments to decide which operation to perform. Let's break this down step by step.\n\nFirst, I need to understand how Docker commands work in PowerShell. Docker has a set of commands that can be used to manage containers, and I can call these commands using PowerShell's `docker` cmdlet.\n\nSo, the basic operations are:\n\n1. Create a container\n\n2. Start a container\n\n3. Stop a container\n\n4. Remove a container\n\nI need to design the script so that it takes command-line arguments to specify which of these operations to perform. For example, the user can run the script like this:\n\n`.\\docker-container-manager.ps1 -Action create -ContainerName mycontainer -Image nginx`\n\nOr\n\n`.\\docker-container-manager.ps1 -Action start -ContainerName mycontainer`\n\nAnd so on for stop and remove.\n\nI should also consider adding some error handling to make sure that the script provides useful feedback if something goes wrong, like if the container doesn't exist when trying to start it.\n\nLet me start by defining the parameters for the script. I'll use PowerShell's parameter functionality to accept inputs for the action, container name, and image (only needed when creating a container).\n\nHere's a rough outline of the script structure:\n\n```\n\nparam(\n\n    [string]$Action,\n\n    [string]$ContainerName,\n\n    [string]$Image\n\n)\n\nswitch ($Action) {\n\n    'create' {\n\n        # Code to create a container\n\n    }\n\n    'start' {\n\n        # Code to start a container\n\n    }\n\n    'stop' {\n\n        # Code to stop a container\n\n    }\n\n    'remove' {\n\n        # Code to remove a container\n\n    }\n\n    default {\n\n        Write-Host \"Invalid action specified.\"\n\n    }\n\n}\n\n```\n\nNow, I need to fill in the code for each action.\n\nFor creating a container, I'll use the `docker create` command. I need to pass the image name and the container name.\n\nSomething like:\n\n`docker create --name $ContainerName $Image`\n\nFor starting a container, I'll use `docker start $ContainerName`\n\nSimilarly, for stopping: `docker stop $ContainerName`\n\nAnd for removing: `docker rm $ContainerName`\n\nI should also consider adding some checks to make sure that the container exists before trying to start, stop, or remove it.\n\nFor example, before starting a container, I can check if it exists by running `docker inspect $ContainerName` and checking the exit code.\n\nIn PowerShell, I can do something like:\n\n`if (docker inspect $ContainerName -ErrorAction SilentlyContinue) { ... } else { Write-Host \"Container does not exist.\" }`\n\nBut actually, `docker inspect` returns information about the container if it exists, so I can check if the command succeeds.\n\nWait, better yet, I can check the exit code of the `docker inspect` command.\n\nIn PowerShell, I can capture the exit code like this:\n\n`$exitCode = docker inspect $ContainerName $LASTEXITCODE`\n\nBut actually, `docker inspect` will return a non-zero exit code if the container doesn't exist.\n\nSo, I can do:\n\n`if ($LASTEXITCODE -eq 0) { ... } else { Write-Host \"Container does not exist.\" }`\n\nWait, no. `$LASTEXITCODE` is set after an external command is run, but in PowerShell, `docker` is likely being run as an external command.\n\nSo, I can do:\n\n`docker inspect $ContainerName`\n\n`if ($LASTEXITCODE -eq 0) { ... }`\n\nBut to make it cleaner, I can use `try-catch` blocks or use `-ErrorAction Stop` and catch the exception.\n\nBut for simplicity, I'll stick with checking `$LASTEXITCODE`\n\nAlright, let's proceed.\n\nI also need to think about passing additional parameters to the Docker commands, like ports, environment variables, etc. But to keep it simple, I'll just handle the basic operations for now.\n\nAnother thing to consider is that when removing a container, it might be running, so I might need to stop it first before removing it.\n\nBut to make it more flexible, I can add a force remove option, which stops and removes the container in one go using `docker rm -f $ContainerName`\n\nBut for now, I'll just handle the basic remove.\n\nLet me also think about providing feedback to the user. For example, after creating a container, I can display its container ID or some other information.\n\nSimilarly, after starting or stopping, I can confirm that the action was successful.\n\nI should also handle cases where the action fails, like if the image doesn't exist when trying to create a container.\n\nFor that, I can capture the output or exit code of the Docker commands and provide appropriate messages.\n\nAlright, I think I have a plan. Let's start writing the script.\n\nFirst, define the parameters:\n\nparam(\n\n    [string]$Action,\n\n    [string]$ContainerName,\n\n    [string]$Image\n\n)\n\nThen, use a switch statement to handle different actions.\n\nFor the 'create' action:\n\nswitch ($Action) {\n\n    'create' {\n\n        if (-not $Image) {\n\n            Write-Host \"Image name is required for creating a container.\"\n\n            exit 1\n\n        }\n\n        docker create --name $ContainerName $Image\n\n        if ($LASTEXITCODE -eq 0) {\n\n            Write-Host \"Container created successfully.\"\n\n        } else {\n\n            Write-Host \"Failed to create container.\"\n\n        }\n\n    }\n\n}\n\nSimilarly for 'start':\n\n'start' {\n\n    if (-not $ContainerName) {\n\n        Write-Host \"Container name is required for starting a container.\"\n\n        exit 1\n\n    }\n\n    docker start $ContainerName\n\n    if ($LASTEXITCODE -eq 0) {\n\n        Write-Host \"Container started successfully.\"\n\n    } else {\n\n        Write-Host \"Failed to start container.\"\n\n    }\n\n}\n\nFor 'stop':\n\n'stop' {\n\n    if (-not $ContainerName) {\n\n        Write-Host \"Container name is required for stopping a container.\"\n\n        exit 1\n\n    }\n\n    docker stop $ContainerName\n\n    if ($LASTEXITCODE -eq 0) {\n\n        Write-Host \"Container stopped successfully.\"\n\n    } else {\n\n        Write-Host \"Failed to stop container.\"\n\n    }\n\n}\n\nFor 'remove':\n\n'remove' {\n\n    if (-not $ContainerName) {\n\n        Write-Host \"Container name is required for removing a container.\"\n\n        exit 1\n\n    }\n\n    docker rm $ContainerName\n\n    if ($LASTEXITCODE -eq 0) {\n\n        Write-Host \"Container removed successfully.\"\n\n    } else {\n\n        Write-Host \"Failed to remove container.\"\n\n    }\n\n}\n\nAnd a default case:\n\ndefault {\n\n    Write-Host \"Invalid action specified. Please use create, start, stop, or remove.\"\n\n    exit 1\n\n}\n\nI should also consider adding help or usage information, so the user knows how to use the script.\n\nI can do this by checking if the action is 'help' or if no action is provided.\n\nFor example:\n\nif (-not $Action) {\n\n    Write-Host \"Usage: .\\docker-container-manager.ps1 -Action <create|start|stop|remove> -ContainerName <name> -Image <image>\"\n\n    exit 0\n\n}\n\nAnd perhaps provide more detailed help if the action is 'help'.\n\nBut to keep it simple, I'll just provide a basic usage message if no action is specified.\n\nAlso, I need to make sure that the required parameters are provided for each action.\n\nFor example, for 'create', both ContainerName and Image are required.\n\nFor 'start', 'stop', and 'remove', only ContainerName is required.\n\nI already have some checks in place for this.\n\nI should also consider validating that Docker is installed and accessible from PowerShell.\n\nBut assuming that Docker is properly installed and configured, I'll proceed.\n\nLet me also think about handling errors more gracefully.\n\nFor example, if Docker is not recognized as a command, the script will fail.\n\nI can check if Docker is available by trying to run `docker --version` and checking the exit code.\n\nIf Docker is not found, I can display an error message\u63d0\u793a\u7528\u6237\u5b89\u88c5Docker\u3002\n\n\u4f46\u8fd9\u53ef\u80fd\u6709\u70b9\u590d\u6742\uff0c\u6240\u4ee5\u6682\u65f6\u4e0d\u5904\u7406\u3002\n\n\u73b0\u5728\uff0c\u6211\u5c06\u628a\u8fd9\u4e9b\u90e8\u5206\u7ec4\u5408\u6210\u4e00\u4e2a\u5b8c\u6574\u7684\u811a\u672c\u3002\n\n## \u6700\u7ec8\u89e3\u51b3\u65b9\u6848\n\u4e3a\u4e86\u81ea\u52a8\u5316\u7ba1\u7406Docker\u5bb9\u5668\u7684\u521b\u5efa\u3001\u542f\u52a8\u3001\u505c\u6b62\u548c\u5220\u9664\uff0c\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0bPowerShell\u811a\u672c\u3002\u8be5\u811a\u672c\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u63a5\u53d7\u64cd\u4f5c\u6307\u4ee4\uff0c\u5e76\u6267\u884c\u76f8\u5e94\u7684Docker\u547d\u4ee4\u3002\n\n### \u811a\u672c\u4ee3\u7801\n\n```powershell\nparam(\n    [string]$Action,\n    [string]$ContainerName,\n    [string]$Image\n)\n\nif (-not $Action) {\n    Write-Host \"Usage: .\\docker-container-manager.ps1 -Action <create|start|stop|remove> -ContainerName <name> -Image <image>\"\n    exit 0\n}\n\nswitch ($Action) {\n    'create' {\n        if (-not $Image) {\n            Write-Host \"Image name is required for creating a container.\"\n            exit 1\n        }\n        docker create --name $ContainerName $Image\n        if ($LASTEXITCODE -eq 0) {\n            Write-Host \"Container created successfully.\"\n        } else {\n            Write-Host \"Failed to create container.\"\n        }\n    }\n    'start' {\n        if (-not $ContainerName) {\n            Write-Host \"Container name is required for starting a container.\"\n            exit 1\n        }\n        docker start $ContainerName\n        if ($LASTEXITCODE -eq 0) {\n            Write-Host \"Container started successfully.\"\n        } else {\n            Write-Host \"Failed to start container.\"\n        }\n    }\n    'stop' {\n        if (-not $ContainerName) {\n            Write-Host \"Container name is required for stopping a container.\"\n            exit 1\n        }\n        docker stop $ContainerName\n        if ($LASTEXITCODE -eq 0) {\n            Write-Host \"Container stopped successfully.\"\n        } else {\n            Write-Host \"Failed to stop container.\"\n        }\n    }\n    'remove' {\n        if (-not $ContainerName) {\n            Write-Host \"Container name is required for removing a container.\"\n            exit 1\n        }\n        docker rm $ContainerName\n        if ($LASTEXITCODE -eq 0) {\n            Write-Host \"Container removed successfully.\"\n        } else {\n            Write-Host \"Failed to remove container.\"\n        }\n    }\n    default {\n        Write-Host \"Invalid action specified. Please use create, start, stop, or remove.\"\n        exit 1\n    }\n}\n```\n\n### \u4f7f\u7528\u65b9\u6cd5\n\n1. **\u521b\u5efa\u5bb9\u5668**\uff1a\n   ```powershell\n   .\\docker-container-manager.ps1 -Action create -ContainerName mycontainer -Image nginx\n   ```\n\n2. **\u542f\u52a8\u5bb9\u5668**\uff1a\n   ```powershell\n   .\\docker-container-manager.ps1 -Action start -ContainerName mycontainer\n   ```\n\n3. **\u505c\u6b62\u5bb9\u5668**\uff1a\n   ```powershell\n   .\\docker-container-manager.ps1 -Action stop -ContainerName mycontainer\n   ```\n\n4. **\u5220\u9664\u5bb9\u5668**\uff1a\n   ```powershell\n   .\\docker-container-manager.ps1 -Action remove -ContainerName mycontainer\n   ```\n\n### \u8bf4\u660e\n\n- **\u53c2\u6570**\uff1a\n  - `-Action`\uff1a\u6307\u5b9a\u8981\u6267\u884c\u7684\u64cd\u4f5c\uff08create\u3001start\u3001stop\u3001remove\uff09\u3002\n  - `-ContainerName`\uff1a\u6307\u5b9a\u5bb9\u5668\u7684\u540d\u79f0\u3002\n  - `-Image`\uff1a\u6307\u5b9a\u521b\u5efa\u5bb9\u5668\u65f6\u4f7f\u7528\u7684\u955c\u50cf\uff08\u4ec5\u5728\u521b\u5efa\u5bb9\u5668\u65f6\u9700\u8981\uff09\u3002\n\n- **\u9519\u8bef\u5904\u7406**\uff1a\n  - \u68c0\u67e5\u5fc5\u9700\u7684\u53c2\u6570\u662f\u5426\u63d0\u4f9b\u3002\n  - \u901a\u8fc7\u68c0\u67e5`$LASTEXITCODE`\u6765\u786e\u5b9aDocker\u547d\u4ee4\u662f\u5426\u6267\u884c\u6210\u529f\uff0c\u5e76\u63d0\u4f9b\u76f8\u5e94\u7684\u53cd\u9988\u4fe1\u606f\u3002\n\n\u8fd9\u4e2a\u811a\u672c\u63d0\u4f9b\u4e86\u4e00\u4e2a\u7b80\u5355\u800c\u6709\u6548\u7684\u65b9\u6cd5\u6765\u7ba1\u7406Docker\u5bb9\u5668\uff0c\u901a\u8fc7\u547d\u4ee4\u884c\u53c2\u6570\u7075\u6d3b\u5730\u6267\u884c\u4e0d\u540c\u7684\u64cd\u4f5c\u3002"
    }
]