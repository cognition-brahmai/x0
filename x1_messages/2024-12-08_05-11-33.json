[
    {
        "role": "user",
        "content": "Write a Python script that uses the Twitter API to fetch tweets containing specific keywords and stores them in an Apache Kafka topic. The script should take command line arguments for the keywords, number of tweets to fetch, and Kafka configuration details (bootstrap servers, topic name).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that fetches tweets with certain keywords and sends them to a Kafka topic. I need to make sure it accepts command line arguments for the keywords, how many tweets to fetch, and the Kafka settings like which servers to connect to and what topic to use.\n\nFirst, I need to set up my environment. I'll need to install a few Python packages: Tweepy for the Twitter API and KafkaProducer from kafka-python for Kafka.\n\nI should start by importing the necessary modules:\n\n```python\nimport tweepy\nfrom kafka import KafkaProducer\nimport argparse\nimport json\n```\n\nNext, I need to handle the command line arguments. I'll use the argparse module for that. The arguments should include:\n\n- Keywords to search for (as a string, maybe multiple keywords separated by commas)\n\n- Number of tweets to fetch (an integer)\n\n- Kafka bootstrap servers (a string, maybe multiple servers separated by commas)\n\n- Kafka topic name (a string)\n\nSo, setting up the argument parser:\n\n```python\nparser = argparse.ArgumentParser(description='Fetch tweets and send to Kafka.')\nparser.add_argument('--keywords', required=True, help='Keywords to search for, separated by commas.')\nparser.add_argument('--limit', type=int, required=True, help='Number of tweets to fetch.')\nparser.add_argument('--bootstrap_servers', required=True, help='Kafka bootstrap servers, separated by commas.')\nparser.add_argument('--topic', required=True, help='Kafka topic to send tweets to.')\nargs = parser.parse_args()\n```\n\nNow, I need to set up Tweepy to access the Twitter API. I'll assume that the Twitter API credentials are stored as environment variables to avoid hardcoding them into the script.\n\nFirst, install Tweepy if not already installed:\n\n```bash\npip install tweepy\n```\n\nThen, in the script:\n\n```python\nimport os\n\n# Assuming Twitter API credentials are environment variables\nconsumer_key = os.getenv('TWITTER_CONSUMER_KEY')\nconsumer_secret = os.getenv('TWITTER_CONSUMER_SECRET')\naccess_token = os.getenv('TWITTER_ACCESS_TOKEN')\naccess_token_secret = os.getenv('TWITTER_ACCESS_TOKEN_SECRET')\n\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\n\napi = tweepy.API(auth)\n```\n\nI need to fetch tweets containing the specified keywords. I can use the `tweepy.Cursor` for this purpose.\n\nFirst, split the keywords string into a list:\n\n```python\nkeywords_list = args.keywords.split(',')\n```\n\nThen, use Tweepy to search for tweets:\n\n```python\ntweets = []\nfor tweet in tweepy.Cursor(api.search_tweets, q=' OR '.join(keywords_list), lang='en').items(args.limit):\n    tweets.append(tweet._json)\n```\n\nI'm fetching tweets in English (`lang='en'`), but this can be adjusted based on requirements.\n\nNext, I need to set up a Kafka producer to send these tweets to a Kafka topic.\n\nFirst, install kafka-python if not already installed:\n\n```bash\npip install kafka-python\n```\n\nThen, in the script:\n\n```python\nproducer = KafkaProducer(bootstrap_servers=args.bootstrap_servers,\n                         value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n```\n\nNow, send each tweet to the Kafka topic:\n\n```python\nfor tweet in tweets:\n    producer.send(args.topic, value=tweet)\nproducer.flush()\n```\n\nI'm using JSON serialization for the tweet data.\n\nPutting it all together, the script looks like this:\n\n```python\nimport tweepy\nfrom kafka import KafkaProducer\nimport argparse\nimport json\nimport os\n\ndef main():\n    parser = argparse.ArgumentParser(description='Fetch tweets and send to Kafka.')\n    parser.add_argument('--keywords', required=True, help='Keywords to search for, separated by commas.')\n    parser.add_argument('--limit', type=int, required=True, help='Number of tweets to fetch.')\n    parser.add_argument('--bootstrap_servers', required=True, help='Kafka bootstrap servers, separated by commas.')\n    parser.add_argument('--topic', required=True, help='Kafka topic to send tweets to.')\n    args = parser.parse_args()\n\n    # Twitter API authentication\n    consumer_key = os.getenv('TWITTER_CONSUMER_KEY')\n    consumer_secret = os.getenv('TWITTER_CONSUMER_SECRET')\n    access_token = os.getenv('TWITTER_ACCESS_TOKEN')\n    access_token_secret = os.getenv('TWITTER_ACCESS_TOKEN_SECRET')\n\n    auth = tweepy.OAuthHandler(consumer_key, consumer_secret)\n    auth.set_access_token(access_token, access_token_secret)\n\n    api = tweepy.API(auth)\n\n    # Fetch tweets\n    keywords_list = args.keywords.split(',')\n    tweets = []\n    for tweet in tweepy.Cursor(api.search_tweets, q=' OR '.join(keywords_list), lang='en').items(args.limit):\n        tweets.append(tweet._json)\n\n    # Set up Kafka producer\n    producer = KafkaProducer(bootstrap_servers=args.bootstrap_servers,\n                             value_serializer=lambda v: json.dumps(v).encode('utf-8'))\n\n    # Send tweets to Kafka topic\n    for tweet in tweets:\n        producer.send(args.topic, value=tweet)\n    producer.flush()\n\nif __name__ == '__main__':\n    main()\n```\n\nThis script should work as expected, fetching tweets containing the specified keywords and sending them to the designated Kafka topic."
    }
]