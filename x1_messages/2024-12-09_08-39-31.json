[
    {
        "role": "user",
        "content": "Develop a Python script that generates random math problems, such as addition, subtraction, multiplication, and division, with varying difficulty levels based on user input. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I've got this task to create a Python script that generates random math problems like addition, subtraction, multiplication, and division. The difficulty should change based on what the user says. Okay, let's break this down.\n\nFirst, I need to understand what difficulty levels mean in math problems. Maybe for addition and subtraction, difficulty could mean larger numbers or more digits. For multiplication and division, it could be similar, or perhaps including decimals or fractions for higher levels.\n\nBut to keep it simple, let's assume difficulty levels are based on the range of numbers used in the problems. For example, level 1 could be single-digit numbers, level 2 could be double-digit, and so on.\n\nSo, I need to:\n\n1. Ask the user for the type of math problem they want: addition, subtraction, multiplication, or division.\n\n2. Ask for the difficulty level, maybe from 1 to 5.\n\n3. Generate a random problem based on their choices.\n\n4. Maybe even ask if they want another problem or to change the type or difficulty.\n\nLet me think about how to structure this in Python.\n\nFirst, I'll need to import the random module to generate random numbers.\n\nThen, I'll need to get inputs from the user for the type of problem and the difficulty level.\n\nI should validate the inputs to make sure they make sense. For example, ensure the difficulty level is within the specified range.\n\nThen, based on the difficulty level, determine the range of numbers to use for the problem.\n\nFor addition and subtraction, it's straightforward: just pick two numbers within the range and add or subtract them.\n\nFor multiplication, same thing, but multiply the numbers.\n\nFor division, I need to be careful because division of integers can result in fractions. So, maybe for lower levels, only do division that results in whole numbers, and for higher levels, include divisions that result in decimals.\n\nHmm, that sounds reasonable.\n\nLet me sketch a rough outline of the steps in pseudocode:\n\n```\n\nAsk user for the type of problem: addition, subtraction, multiplication, division\n\nAsk user for difficulty level: 1 to 5\n\nBased on difficulty level, set the range for numbers\n\n    For example:\n\n    Level 1: 0-10\n\n    Level 2: 0-20\n\n    Level 3: 0-50\n\n    Level 4: 0-100\n\n    Level 5: 0-1000\n\nGenerate two random numbers within the range\n\nBased on the type of problem, create the question\n\n    Addition: num1 + num2\n\n    Subtraction: num1 - num2 (ensure result is not negative for lower levels)\n\n    Multiplication: num1 * num2\n\n    Division: num1 / num2 (ensure num2 is not zero, and for lower levels, ensure num1 is divisible by num2)\n\nDisplay the problem to the user\n\nAsk if they want another problem or to change settings\n\n```\n\nI think that covers the basic functionality.\n\nNow, let's think about how to implement this in Python.\n\nFirst, I'll need to handle user input and ensure it's valid.\n\nFor example, for the type of problem, I can accept the first letter: 'a' for addition, 's' for subtraction, etc.\n\nFor difficulty level, I'll ask for a number between 1 and 5 and validate it.\n\nThen, based on the difficulty level, I'll set the range for the random numbers.\n\nI can use the random.randint() function to generate random integers within the range.\n\nFor addition and subtraction, it's straightforward.\n\nFor multiplication, as well.\n\nFor division, I need to ensure that the division makes sense.\n\nMaybe for division, especially at lower levels, I'll generate numbers where num1 is always divisible by num2, so the result is an integer.\n\nFor higher levels, I can include divisions that result in decimals.\n\nLet me think about how to handle that.\n\nPerhaps based on the difficulty level, I can decide whether to allow decimal results in division.\n\nFor example, levels 1-3: only integer results, levels 4-5: allow decimals.\n\nAlso, for subtraction, at lower levels, I might want to ensure that the result is not negative, so num1 should be greater than or equal to num2.\n\nAt higher levels, negative results could be allowed.\n\nAlright, that's a consideration.\n\nLet me think about the range for each difficulty level.\n\nLevel 1: 0-10\n\nLevel 2: 0-20\n\nLevel 3: 0-50\n\nLevel 4: 0-100\n\nLevel 5: 0-1000\n\nThat seems reasonable.\n\nNow, for division at higher levels, if I allow decimals, I need to decide how many decimal places to include.\n\nMaybe up to 2 decimal places.\n\nI can use the round() function for that.\n\nAlso, I should think about how to present the problem to the user.\n\nI need to display the problem in a readable way, like \"What is 5 + 3?\" or \"What is 15 / 3?\"\n\nMoreover, I can ask the user to input their answer and check if it's correct.\n\nThat would make it more interactive.\n\nBut the initial request was just to generate random math problems, so maybe that's optional.\n\nI'll keep it simple for now and just generate and display the problem.\n\nBut generating the correct answer behind the scenes could be useful for future enhancements, like checking the user's answer.\n\nAlright, let's proceed step by step.\n\nFirst, define the difficulty levels and their corresponding number ranges.\n\nI can use a dictionary for that.\n\nSomething like:\n\ndifficulty_levels = {\n\n1: (0, 10),\n\n2: (0, 20),\n\n3: (0, 50),\n\n4: (0, 100),\n\n5: (0, 1000)\n\n}\n\nThen, based on the user's choice, I can pick the range.\n\nNext, generate two random numbers within that range.\n\nFor addition and multiplication, order doesn't matter.\n\nFor subtraction and division, order does matter.\n\nEspecially for subtraction, as mentioned earlier, at lower levels, I might want to ensure num1 >= num2 to avoid negative results.\n\nFor division, ensure num2 is not zero, and for lower levels, ensure num1 is divisible by num2.\n\nIn Python, generating random integers can be done using random.randint(a, b), which includes both a and b.\n\nSo, for difficulty level 1, range is 0 to 10, so numbers from 0 to 10 inclusive.\n\nNow, for division, if I want to ensure num1 is divisible by num2 at lower levels, I can generate num2 first, then generate num1 as a multiple of num2 within the range.\n\nFor example, for level 1, range 0-10:\n\n- Generate num2 randomly from 1 to 10 (can't be zero)\n\n- Then generate a multiplier, say from 1 to (10 // num2), to ensure num1 is within 0-10\n\n- num1 = num2 * multiplier\n\nThis way, num1 is always divisible by num2.\n\nAt higher levels, I can relax this constraint and allow any numbers, resulting in possible decimal answers.\n\nI need to handle the formatting of the problem based on the operation.\n\nFor addition, subtraction, and multiplication, it's straightforward.\n\nFor division, if the result is an integer, display it as \"What is num1 / num2?\".\n\nIf it's a decimal, maybe round it to 2 decimal places.\n\nAlso, I should consider whether to include negative numbers or not.\n\nBased on the difficulty level, perhaps introduce negative numbers at higher levels.\n\nBut to keep it simple, let's assume all numbers are positive for now.\n\nLater, I can add an option to include negative numbers.\n\nAdditionally, for multiplication, at higher levels, I might consider generating multi-digit numbers.\n\nBut since I'm already using a difficulty-based range, that should be covered.\n\nNow, let's think about the user interface.\n\nI need to ask the user for the type of problem and the difficulty level.\n\nI can present a menu for the user to choose from.\n\nFor example:\n\n\"Choose the type of problem:\n\na) Addition\n\ns) Subtraction\n\nm) Multiplication\n\nd) Division\n\n\"\n\nThen, ask for the difficulty level:\n\n\"Choose the difficulty level (1-5):\n\n\"\n\nThen, generate and display the problem.\n\nAfter that, ask if the user wants another problem or to change settings.\n\nThis can be a loop that continues until the user decides to exit.\n\nI should also handle cases where the user enters invalid inputs, like incorrect letters or numbers out of range.\n\nI need to implement input validation to handle such cases gracefully.\n\nFor example, if the user enters an invalid letter for the problem type, prompt them to enter a valid choice.\n\nSimilarly, for difficulty level, ensure it's a number between 1 and 5.\n\nIn Python, I can use a while loop for input until the user enters a valid response.\n\nNow, let's think about the code structure.\n\nI can define functions for each type of operation to generate the problem.\n\nFor example:\n\n- generate_addition_problem(difficulty)\n\n- generate_subtraction_problem(difficulty)\n\n- generate_multiplication_problem(difficulty)\n\n- generate_division_problem(difficulty)\n\nEach function will generate two random numbers based on the difficulty level and return the problem as a string.\n\nThen, in the main part of the script, based on the user's choice, call the corresponding function and display the problem.\n\nThis makes the code organized and manageable.\n\nAlso, I can keep the problem generation logic separate from the user input handling.\n\nLet me sketch a rough code structure:\n\nimport random\n\ndifficulty_levels = {\n\n1: (0, 10),\n\n2: (0, 20),\n\n3: (0, 50),\n\n4: (0, 100),\n\n5: (0, 1000)\n\n}\n\ndef generate_addition_problem(difficulty):\n\n    a, b = random.randint(*difficulty_levels[difficulty]), random.randint(*difficulty_levels[difficulty])\n\n    return f\"What is {a} + {b}?\"\n\ndef generate_subtraction_problem(difficulty):\n\n    a = random.randint(*difficulty_levels[difficulty])\n\n    b = random.randint(0, a)  # to avoid negative results\n\n    return f\"What is {a} - {b}?\"\n\ndef generate_multiplication_problem(difficulty):\n\n    a, b = random.randint(*difficulty_levels[difficulty]), random.randint(*difficulty_levels[difficulty])\n\n    return f\"What is {a} x {b}?\"\n\ndef generate_division_problem(difficulty):\n\n    if difficulty < 4:\n\n        # Ensure num1 is divisible by num2\n\n        num2 = random.randint(1, difficulty_levels[difficulty][1])\n\n        multiplier = random.randint(1, difficulty_levels[difficulty][1] // num2)\n\n        num1 = num2 * multiplier\n\n        return f\"What is {num1} / {num2}?\"\n\n    else:\n\n        # Allow decimal results\n\n        num1 = random.randint(*difficulty_levels[difficulty])\n\n        num2 = random.randint(1, difficulty_levels[difficulty][1])  # avoid division by zero\n\n        result = num1 / num2\n\n        return f\"What is {num1} / {num2}? (rounded to 2 decimal places: {result:.2f})\"\n\ndef main():\n\n    while True:\n\n        print(\"Choose the type of problem:\")\n\n        print(\"a) Addition\")\n\n        print(\"s) Subtraction\")\n\n        print(\"m) Multiplication\")\n\n        print(\"d) Division\")\n\n        problem_type = input(\"Enter a, s, m, or d: \").lower()\n\n        if problem_type not in ['a', 's', 'm', 'd']:\n\n            print(\"Invalid choice. Please enter a, s, m, or d.\")\n\n            continue\n\n        difficulty = input(\"Choose the difficulty level (1-5): \")\n\n        if not difficulty.isdigit() or int(difficulty) not in range(1, 6):\n\n            print(\"Invalid difficulty level. Please enter a number between 1 and 5.\")\n\n            continue\n\n        difficulty = int(difficulty)\n\n        if problem_type == 'a':\n\n            problem = generate_addition_problem(difficulty)\n\n        elif problem_type == 's':\n\n            problem = generate_subtraction_problem(difficulty)\n\n        elif problem_type == 'm':\n\n            problem = generate_multiplication_problem(difficulty)\n\n        elif problem_type == 'd':\n\n            problem = generate_division_problem(difficulty)\n\n        print(problem)\n\n        another = input(\"Do you want another problem? (y/n): \").lower()\n\n        if another != 'y':\n\n            break\n\nif __name__ == \"__main__\":\n\n    main()\n\nThis seems like a solid structure.\n\nNow, I need to test this logic to see if it works as expected.\n\nLet's consider some test cases.\n\nTest case 1:\n\n- User chooses addition, difficulty level 1.\n\n- Expected: \"What is x + y?\", where x and y are random numbers between 0 and 10.\n\nTest case 2:\n\n- User chooses subtraction, difficulty level 1.\n\n- Expected: \"What is a - b?\", where a and b are random numbers between 0 and 10, and a >= b to avoid negative results.\n\nTest case 3:\n\n- User chooses multiplication, difficulty level 3.\n\n- Expected: \"What is c x d?\", where c and d are random numbers between 0 and 50.\n\nTest case 4:\n\n- User chooses division, difficulty level 2.\n\n- Expected: \"What is e / f?\", where e is a multiple of f, and both are within 0-20.\n\nTest case 5:\n\n- User chooses division, difficulty level 5.\n\n- Expected: \"What is g / h? (rounded to 2 decimal places: i)\", where g and h are random numbers between 0 and 1000, and i is the result rounded to two decimal places.\n\nI should also consider edge cases, like division by zero, but in our implementation, for division, we ensure num2 is not zero.\n\nAdditionally, for subtraction at higher levels, if I decide to allow negative results, I need to adjust the generation accordingly.\n\nBut for now, let's keep it simple and avoid negative results.\n\nAlso, for multiplication, I don't see any issues.\n\nAnother consideration is the format of the output.\n\nI used \"x\" for multiplication, but in some regions, they might use \"*\" for multiplication.\n\nI should make sure to use a format that is understood by the target audience.\n\nSimilarly, for division, I used \"/\".\n\nI think these symbols are universally understood, but I can consider using words instead for clarity.\n\nFor example, \"What is five plus three?\" but that might be more work to implement.\n\nFor now, keeping it as symbols is fine.\n\nAlso, I need to think about localizing the script for different languages, but that's beyond the scope of this task.\n\nAssuming the script is for English speakers, the current approach should suffice.\n\nFurthermore, I can enhance the script by allowing the user to specify the number of problems they want to practice.\n\nBut for now, keeping it in a loop where they can choose to continue or exit is acceptable.\n\nI should also consider adding a way for the user to check their answers.\n\nFor example, after displaying the problem, ask for the user's answer and tell them if it's correct.\n\nBut that might be an enhancement for later.\n\nFor the initial version, just generating and displaying the problems is sufficient.\n\nLet me think about any potential errors or exceptions that might occur.\n\nWell, for division, even though I'm trying to avoid division by zero, I should still handle the case where num2 is zero.\n\nBut in our implementation, for division, num2 is generated from 1 to the upper limit, so it should never be zero.\n\nStill, it's good to have a check in place.\n\nAlso, for division at higher levels, where decimal results are allowed, I need to ensure that the result is displayed correctly with two decimal places.\n\nIn Python, using the format specifier {:.2f} should handle that.\n\nMoreover, I need to make sure that the random numbers are inclusive of the upper limit.\n\nIn Python, random.randint(a, b) includes both a and b, so that's fine.\n\nI should also consider if the user enters a non-integer for difficulty level.\n\nIn the code, I'm checking if it's a digit and within the range, so it should be handled.\n\nBut just to be safe, I can add error handling around the input functions.\n\nNow, let's think about how to make the script more user-friendly.\n\nMaybe provide a clear instruction on how to exit the loop, like typing 'exit' or 'quit' to end.\n\nIn the current implementation, the loop continues until the user doesn't want another problem.\n\nBut to make it more flexible, I can allow the user to choose to change settings or exit at any time.\n\nFor example, after solving a problem, ask if they want another problem, to change settings, or to exit.\n\nThis way, they can adjust the type or difficulty without restarting the script.\n\nThat sounds like a good improvement.\n\nLet me adjust the pseudocode accordingly:\n\n```\n\nwhile True:\n\n    Ask user for the type of problem: addition, subtraction, multiplication, division, or change settings\n\n    If user chooses to change settings:\n\n        Ask for new type and difficulty level\n\n    Else:\n\n        Generate a problem based on current settings\n\n        Display the problem\n\n        Ask if they want another problem, to change settings, or to exit\n\n        Based on user's choice, continue, change settings, or exit the loop\n\n```\n\nThis way, the user has more control during the session.\n\nNow, translating this into code:\n\nIn the main loop, after generating and displaying the problem, ask the user if they want another problem, to change settings, or to exit.\n\nBased on their input, take the corresponding action.\n\nFor example:\n\nanother = input(\"Enter 'y' for another problem, 'c' to change settings, or 'n' to exit: \").lower()\n\nif another == 'y':\n\n    continue\n\nelif another == 'c':\n\n    # Ask for new type and difficulty\n\nelif another == 'n':\n\n    break\n\nelse:\n\n    print(\"Invalid choice. Please enter y, c, or n.\")\n\nThis way, the user can choose to continue with the same settings, change settings, or exit.\n\nI need to make sure that the settings are updated correctly when the user chooses to change them.\n\nPerhaps store the current type and difficulty level in variables and update them when needed.\n\nLet me outline this in code:\n\ncurrent_type = None\n\ncurrent_difficulty = None\n\nwhile True:\n\n    if current_type is None:\n\n        # Ask for type and difficulty\n\n        current_type = get_problem_type()\n\n        current_difficulty = get_difficulty_level()\n\n    else:\n\n        # Display current settings and ask for action\n\n        print(f\"Current settings: Type - {current_type}, Difficulty - {current_difficulty}\")\n\n        action = input(\"Enter 'y' for another problem, 'c' to change settings, or 'n' to exit: \").lower()\n\n        if action == 'y':\n\n            pass  # Generate and display problem with current settings\n\n        elif action == 'c':\n\n            current_type = get_problem_type()\n\n            current_difficulty = get_difficulty_level()\n\n            continue\n\n        elif action == 'n':\n\n            break\n\n        else:\n\n            print(\"Invalid choice. Please enter y, c, or n.\")\n\n            continue\n\n    # Generate and display problem based on current settings\n\n    problem = generate_problem(current_type, current_difficulty)\n\n    print(problem)\n\nThis way, the user can choose to continue with the same settings or change them mid-session.\n\nI need to define functions for getting the problem type and difficulty level.\n\nThese functions should handle input validation to ensure the user enters valid choices.\n\nFor example, get_problem_type() should keep asking until the user enters 'a', 's', 'm', or 'd'.\n\nSimilarly, get_difficulty_level() should ensure the input is a number between 1 and 5.\n\nI can write helper functions for getting validated input.\n\nNow, let's think about how to organize the generate_problem() function.\n\nSince I have separate functions for each type of problem, I can use a dictionary to map the problem type to the corresponding generate function.\n\nFor example:\n\nproblem_generators = {\n\n    'a': generate_addition_problem,\n\n    's': generate_subtraction_problem,\n\n    'm': generate_multiplication_problem,\n\n    'd': generate_division_problem\n\n}\n\nThen, based on the current_type, call the corresponding function with the current_difficulty.\n\nSo, problem = problem_generators[current_type](current_difficulty)\n\nThis is efficient and clean.\n\nI need to ensure that current_type is always valid before calling the generate function.\n\nGiven that I'm validating the input when setting current_type, this should be fine.\n\nNow, let's consider implementing the function to get the problem type.\n\ndef get_problem_type():\n\n    while True:\n\n        print(\"Choose the type of problem:\")\n\n        print(\"a) Addition\")\n\n        print(\"s) Subtraction\")\n\n        print(\"m) Multiplication\")\n\n        print(\"d) Division\")\n\n        choice = input(\"Enter a, s, m, or d: \").lower()\n\n        if choice in ['a', 's', 'm', 'd']:\n\n            return choice\n\n        else:\n\n            print(\"Invalid choice. Please enter a, s, m, or d.\")\n\nSimilarly, for getting the difficulty level:\n\ndef get_difficulty_level():\n\n    while True:\n\n        level = input(\"Choose the difficulty level (1-5): \")\n\n        if level.isdigit() and 1 <= int(level) <= 5:\n\n            return int(level)\n\n        else:\n\n            print(\"Invalid difficulty level. Please enter a number between 1 and 5.\")\n\nThese functions will ensure that the user enters valid inputs before proceeding.\n\nNow, let's think about how to make the script more engaging.\n\nMaybe include some feedback after each problem, like \"Correct!\" or \"Wrong, the answer is...\" but that would require checking the user's answer, which is beyond the current scope.\n\nFor now, just generating and displaying the problems is sufficient.\n\nAlternatively, I can include a timer to measure how fast the user solves the problems, but that's also an enhancement for later.\n\nAnother consideration is to log the problems generated for the user's reference, but that might require file I/O, which is also beyond the current scope.\n\nFor the initial version, keeping it simple is best.\n\nLet me summarize the features of the script:\n\n- Asks the user for the type of math problem: addition, subtraction, multiplication, or division.\n\n- Asks for the difficulty level: 1 to 5, each corresponding to a range of numbers.\n\n- Generates a random math problem based on the user's choices.\n\n- Allows the user to choose to generate another problem, change settings, or exit.\n\n- Includes input validation to handle invalid user inputs gracefully.\n\nNow, I need to write the actual Python code based on this design.\n\nI should also add comments in the code for clarity and maintainability.\n\nLet me start writing the code accordingly.\n\n## Final Solution\nTo create a Python script that generates random math problems based on user input, follow the steps below. This script will offer addition, subtraction, multiplication, and division problems with varying difficulty levels.\n\n### Approach\n\n1. **Difficulty Levels**: Define number ranges for each difficulty level (1 to 5).\n2. **User Input**: Get the type of problem and difficulty level from the user.\n3. **Problem Generation**: Generate random numbers within the specified range and create the appropriate math problem.\n4. **User Interaction**: Allow the user to choose to generate another problem, change settings, or exit.\n\n### Solution Code\n\n```python\nimport random\n\ndifficulty_levels = {\n    1: (0, 10),\n    2: (0, 20),\n    3: (0, 50),\n    4: (0, 100),\n    5: (0, 1000)\n}\n\ndef generate_addition_problem(difficulty):\n    a, b = random.randint(*difficulty_levels[difficulty]), random.randint(*difficulty_levels[difficulty])\n    return f\"What is {a} + {b}?\"\n\ndef generate_subtraction_problem(difficulty):\n    a = random.randint(*difficulty_levels[difficulty])\n    b = random.randint(0, a)  # to avoid negative results\n    return f\"What is {a} - {b}?\"\n\ndef generate_multiplication_problem(difficulty):\n    a, b = random.randint(*difficulty_levels[difficulty]), random.randint(*difficulty_levels[difficulty])\n    return f\"What is {a} x {b}?\"\n\ndef generate_division_problem(difficulty):\n    if difficulty < 4:\n        # Ensure num1 is divisible by num2\n        num2 = random.randint(1, difficulty_levels[difficulty][1])\n        multiplier = random.randint(1, difficulty_levels[difficulty][1] // num2)\n        num1 = num2 * multiplier\n        return f\"What is {num1} / {num2}?\"\n    else:\n        # Allow decimal results\n        num1 = random.randint(*difficulty_levels[difficulty])\n        num2 = random.randint(1, difficulty_levels[difficulty][1])  # avoid division by zero\n        result = num1 / num2\n        return f\"What is {num1} / {num2}? (rounded to 2 decimal places: {result:.2f})\"\n\nproblem_generators = {\n    'a': generate_addition_problem,\n    's': generate_subtraction_problem,\n    'm': generate_multiplication_problem,\n    'd': generate_division_problem\n}\n\ndef get_problem_type():\n    while True:\n        print(\"Choose the type of problem:\")\n        print(\"a) Addition\")\n        print(\"s) Subtraction\")\n        print(\"m) Multiplication\")\n        print(\"d) Division\")\n        choice = input(\"Enter a, s, m, or d: \").lower()\n        if choice in ['a', 's', 'm', 'd']:\n            return choice\n        else:\n            print(\"Invalid choice. Please enter a, s, m, or d.\")\n\ndef get_difficulty_level():\n    while True:\n        level = input(\"Choose the difficulty level (1-5): \")\n        if level.isdigit() and 1 <= int(level) <= 5:\n            return int(level)\n        else:\n            print(\"Invalid difficulty level. Please enter a number between 1 and 5.\")\n\ndef main():\n    current_type = None\n    current_difficulty = None\n    \n    while True:\n        if current_type is None:\n            current_type = get_problem_type()\n            current_difficulty = get_difficulty_level()\n        else:\n            print(f\"Current settings: Type - {current_type}, Difficulty - {current_difficulty}\")\n            action = input(\"Enter 'y' for another problem, 'c' to change settings, or 'n' to exit: \").lower()\n            if action == 'y':\n                pass  # Continue with current settings\n            elif action == 'c':\n                current_type = get_problem_type()\n                current_difficulty = get_difficulty_level()\n                continue\n            elif action == 'n':\n                break\n            else:\n                print(\"Invalid choice. Please enter y, c, or n.\")\n                continue\n        \n        generate_problem = problem_generators[current_type]\n        problem = generate_problem(current_difficulty)\n        print(problem)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Difficulty Levels**: Defined in a dictionary with tuples representing number ranges.\n2. **Problem Generation Functions**: Separate functions for each type of math problem that generate problems based on the difficulty level.\n3. **Input Handling**: Functions to get and validate user input for problem type and difficulty level.\n4. **Main Loop**: Manages user interactions, problem generation, and session control, allowing users to generate new problems, change settings, or exit the program."
    }
]