[
    {
        "role": "user",
        "content": "Write a Python script to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified index; removing elements by value or index; and displaying the entire list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. Implementing a singly linked list in Python involves creating a Node class to represent each element in the list and a LinkedList class to manage these nodes. Here's a step-by-step guide to creating such a data structure:\n\n1. **Node Class**: This class will have two attributes - `data` to store the value of the node and `next` to point to the next node in the list.\n\n2. **LinkedList Class**: This class will manage the nodes. It will have methods to:\n   - Add elements at the beginning (`add_at_beginning`).\n   - Add elements at the end (`add_at_end`).\n   - Add elements at a specified index (`add_at_index`).\n   - Remove elements by value (`remove_by_value`).\n   - Remove elements by index (`remove_by_index`).\n   - Display the entire list (`display`).\n\nHere's the complete Python script:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def add_at_index(self, index, data):\n        if index == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if current is None:\n            raise IndexError(\"Index out of bounds\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, key):\n        current = self.head\n        previous = None\n        while current and current.data != key:\n            previous = current\n            current = current.next\n        if current is None:\n            raise ValueError(\"Value not found in list\")\n        if previous is None:\n            self.head = current.next\n        else:\n            previous.next = current.next\n\n    def remove_by_index(self, index):\n        if index == 0:\n            if self.head is None:\n                raise IndexError(\"Index out of bounds\")\n            self.head = self.head.next\n            return\n        current = self.head\n        position = 0\n        previous = None\n        while current and position < index:\n            previous = current\n            current = current.next\n            position += 1\n        if current is None:\n            raise IndexError(\"Index out of bounds\")\n        previous.next = current.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.add_at_beginning(3)\n    ll.add_at_end(5)\n    ll.add_at_index(1, 4)\n    ll.display()  # Output: 3 -> 4 -> 5 -> None\n    ll.remove_by_value(4)\n    ll.display()  # Output: 3 -> 5 -> None\n    ll.remove_by_index(1)\n    ll.display()  # Output: 3 -> None\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Initializes with `data` and `next` pointer.\n\n2. **LinkedList Class**:\n   - Initializes with a `head` pointer set to `None`.\n   - `add_at_beginning`: Adds a new node at the start by updating the `head`.\n   - `add_at_end`: Traverses to the end and adds a new node.\n   - `add_at_index`: Inserts a new node at the specified index.\n   - `remove_by_value`: Removes the first node containing the specified value.\n   - `remove_by_index`: Removes the node at the specified index.\n   - `display`: Prints the entire list from head to tail.\n\nThis script provides a basic implementation of a singly linked list with essential operations. You can expand upon this by adding more features like counting elements, reversing the list, etc."
    }
]