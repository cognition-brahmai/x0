[
    {
        "role": "user",
        "content": "Write a Java program that implements the merge sort algorithm on an array of integers, with the following requirements:\n   - The input should be read from the command line as space-separated integers.\n   - The sorted output should be printed to the console."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's break down the task into smaller steps to make it easier to understand and implement.\n\nFirst, we need to implement the merge sort algorithm in Java. Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, sorts them, and then merges them back together.\n\nHere's a step-by-step plan:\n\n1. **Read input from the command line:** We'll take space-separated integers as input and store them in an array.\n\n2. **Implement the merge sort algorithm:**\n   - **Divide:** Split the array into two halves until each sub-array has only one element.\n   - **Conquer:** Recursively sort the sub-arrays.\n   - **Combine:** Merge the sorted sub-arrays back together.\n\n3. **Print the sorted array:** After sorting, print the sorted array to the console.\n\nLet's start by writing the code to read input from the command line and store it in an array.\n\n## Final Solution\nTo solve this problem, we need to implement the merge sort algorithm in Java, taking an array of integers as input from the command line and printing the sorted array to the console.\n\n### Approach\n\n1. **Input Handling:** Read the input from the command line, split it by spaces, and convert it into an array of integers.\n2. **Merge Sort Algorithm:**\n   - **Divide:** Recursively split the array into two halves until each sub-array contains a single element.\n   - **Merge:** Combine the sub-arrays in a sorted manner.\n3. **Output the Sorted Array:** Print the sorted array to the console.\n\n### Solution Code\n\n```java\npublic class MergeSort {\n\n    public static void main(String[] args) {\n        // Read input from command line\n        String input = String.join(\" \", args);\n        String[] parts = input.split(\" \");\n        int[] array = new int[parts.length];\n        for (int i = 0; i < parts.length; i++) {\n            array[i] = Integer.parseInt(parts[i]);\n        }\n        \n        // Sort the array using merge sort\n        mergeSort(array, 0, array.length - 1);\n        \n        // Print the sorted array\n        for (int num : array) {\n            System.out.print(num + \" \");\n        }\n    }\n\n    public static void mergeSort(int[] array, int left, int right) {\n        if (left < right) {\n            int mid = left + (right - left) / 2;\n            mergeSort(array, left, mid);\n            mergeSort(array, mid + 1, right);\n            merge(array, left, mid, right);\n        }\n    }\n\n    public static void merge(int[] array, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n        \n        // Create temporary arrays\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n        \n        // Copy data to temporary arrays\n        System.arraycopy(array, left, L, 0, n1);\n        System.arraycopy(array, mid + 1, R, 0, n2);\n        \n        // Merge the temporary arrays back into the original array\n        int i = 0, j = 0, k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                array[k] = L[i];\n                i++;\n            } else {\n                array[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        \n        // Copy any remaining elements of L, if any\n        while (i < n1) {\n            array[k] = L[i];\n            i++;\n            k++;\n        }\n        \n        // Copy any remaining elements of R, if any\n        while (j < n2) {\n            array[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Input Handling:** The input is read from the command line as space-separated integers, converted to an array of integers.\n2. **Merge Sort Algorithm:**\n   - **Divide:** The `mergeSort` function recursively splits the array into halves.\n   - **Merge:** The `merge` function combines two halves into a sorted array by comparing elements from each half.\n3. **Output the Sorted Array:** After sorting, the array is printed to the console.\n\nThis implementation ensures that the array is sorted efficiently using the merge sort algorithm, which has a time complexity of \\(O(n \\log n)\\)."
    }
]