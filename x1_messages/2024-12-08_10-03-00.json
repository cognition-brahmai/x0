[
    {
        "role": "user",
        "content": "Write a Python script that uses the Keras library to create a simple neural network for classifying handwritten digits from the MNIST dataset."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that uses the Keras library to create a simple neural network for classifying handwritten digits from the MNIST dataset.\n\n```python\n# Import necessary libraries\nimport numpy as np\nfrom keras.datasets import mnist\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten\nfrom keras.utils import to_categorical\n\n# Load the MNIST dataset\n(X_train, y_train), (X_test, y_test) = mnist.load_data()\n\n# Preprocess the data\n# Normalize the images to [0,1]\nX_train = X_train.astype('float32') / 255\nX_test = X_test.astype('float32') / 255\n\n# One-hot encode the labels\ny_train = to_categorical(y_train, 10)\ny_test = to_categorical(y_test, 10)\n\n# Create the model\nmodel = Sequential()\nmodel.add(Flatten(input_shape=(28, 28)))  # Flatten the input images\nmodel.add(Dense(128, activation='relu'))  # Fully connected layer with 128 units and ReLU activation\nmodel.add(Dense(10, activation='softmax'))  # Output layer with 10 units and softmax activation\n\n# Compile the model\nmodel.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])\n\n# Train the model\nmodel.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=5, batch_size=32)\n\n# Evaluate the model\nloss, accuracy = model.evaluate(X_test, y_test)\nprint(f'Test accuracy: {accuracy*100:.2f}%')\n```\n\n### Explanation:\n\n1. **Import Libraries**:\n   - `numpy` for numerical operations.\n   - `mnist` from `keras.datasets` to load the MNIST dataset.\n   - `Sequential` from `keras.models` to create a sequential model.\n   - `Dense` and `Flatten` from `keras.layers` to define the layers of the neural network.\n   - `to_categorical` from `keras.utils` to one-hot encode the labels.\n\n2. **Load and Preprocess Data**:\n   - Load the MNIST dataset, which consists of training and testing sets.\n   - Normalize the pixel values of the images to the range [0, 1].\n   - One-hot encode the labels to prepare them for categorical classification.\n\n3. **Create the Model**:\n   - Use a `Sequential` model.\n   - Add a `Flatten` layer to convert the 2D images (28x28 pixels) into a 1D array.\n   - Add a fully connected `Dense` layer with 128 units and ReLU activation.\n   - Add an output `Dense` layer with 10 units (for the 10 digits) and softmax activation.\n\n4. **Compile the Model**:\n   - Use the Adam optimizer.\n   - Use categorical cross-entropy as the loss function, suitable for multi-class classification.\n   - Track accuracy as the metric.\n\n5. **Train the Model**:\n   - Train the model for 5 epochs with a batch size of 32.\n   - Validate the model using the test dataset during training.\n\n6. **Evaluate the Model**:\n   - Evaluate the model's performance on the test dataset and print the accuracy.\n\nThis script provides a basic implementation of a neural network for digit classification using Keras and the MNIST dataset."
    }
]