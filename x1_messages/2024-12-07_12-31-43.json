[
    {
        "role": "user",
        "content": "Develop a Node.js script that reads all files in a given directory and compresses them using gzip. The compressed files should be saved in a separate output directory provided as a command line argument."
    },
    {
        "role": "assistant",
        "content": "To create a Node.js script that reads all files in a given directory, compresses them using gzip, and saves the compressed files in a separate output directory, you can follow these steps:\n\n1. **Set up your project**: Make sure you have Node.js installed on your machine. Initialize a new Node.js project by running `npm init` and follow the prompts to create a `package.json` file.\n\n2. **Install necessary packages**: You will need the `fs` (File System) module for reading and writing files, and the `zlib` module for gzip compression. Both of these are built-in modules in Node.js, so you don't need to install anything additional.\n\n3. **Write the script**: Create a JavaScript file, for example, `compressFiles.js`, and write the code to handle reading files from the input directory, compressing them, and saving them to the output directory.\n\n4. **Handle command-line arguments**: Use the `process.argv` array to retrieve the input and output directory paths provided as command-line arguments.\n\n5. **Implement error handling**: Ensure that the script handles cases where the input directory does not exist or if there are issues with file reading or writing.\n\nHere is a sample implementation of the script:\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst zlib = require('zlib');\n\n// Helper function to check if a directory exists\nfunction dirExists(dir) {\n    try {\n        return fs.statSync(dir).isDirectory();\n    } catch (err) {\n        if (err.code === 'ENOENT') {\n            return false;\n        }\n        throw err;\n    }\n}\n\n// Main function to compress files\nfunction compressFiles(inputDir, outputDir) {\n    if (!dirExists(inputDir)) {\n        console.error(`Input directory does not exist: ${inputDir}`);\n        process.exit(1);\n    }\n\n    if (!dirExists(outputDir)) {\n        fs.mkdirSync(outputDir, { recursive: true });\n    }\n\n    fs.readdir(inputDir, (err, files) => {\n        if (err) {\n            console.error(`Error reading directory: ${inputDir}`, err);\n            return;\n        }\n\n        files.forEach(file => {\n            const inputPath = path.join(inputDir, file);\n            const outputPath = path.join(outputDir, `${file}.gz`);\n\n            fs.createReadStream(inputPath)\n                .pipe(zlib.createGzip())\n                .pipe(fs.createWriteStream(outputPath))\n                .on('finish', () => {\n                    console.log(`Compressed: ${inputPath} -> ${outputPath}`);\n                })\n                .on('error', err => {\n                    console.error(`Error compressing file: ${inputPath}`, err);\n                });\n        });\n    });\n}\n\n// Get command-line arguments\nconst args = process.argv.slice(2);\nif (args.length < 2) {\n    console.log('Usage: node compressFiles.js [inputDir] [outputDir]');\n    process.exit(1);\n}\n\nconst [inputDir, outputDir] = args;\ncompressFiles(inputDir, outputDir);\n```\n\n### Explanation:\n\n1. **Helper Function `dirExists`**: This function checks if a given directory exists using `fs.statSync`.\n\n2. **Main Function `compressFiles`**:\n   - It first checks if the input directory exists. If not, it logs an error and exits.\n   - It ensures the output directory exists, creating it if necessary.\n   - It reads all files in the input directory using `fs.readdir`.\n   - For each file, it creates a read stream from the input file, pipes it through a gzip compressor, and writes the compressed data to a new file in the output directory with a `.gz` extension.\n   - It logs messages for each successfully compressed file and handles errors during compression.\n\n3. **Command-Line Argument Handling**:\n   - The script expects two arguments: the input directory and the output directory.\n   - If fewer than two arguments are provided, it displays usage information and exits.\n\n### Usage:\n\nTo run the script, save it as `compressFiles.js` and execute it from the command line:\n\n```sh\nnode compressFiles.js /path/to/input /path/to/output\n```\n\nThis will read all files from `/path/to/input`, compress them using gzip, and save the compressed files in `/path/to/output` with a `.gz` extension."
    }
]