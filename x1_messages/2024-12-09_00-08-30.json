[
    {
        "role": "user",
        "content": "In C#, develop a console application that simulates a library management system. The system should allow adding books, removing books, searching for a book by title or author, and displaying all books in the library. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a console application in C# that simulates a library management system, we'll need to follow these steps:\n\n1. **Define the Book Class**: This class will represent the books in the library. Each book should have properties like Title, Author, and maybe an ID.\n\n2. **Create a Library Class**: This class will manage the collection of books. It should have methods to add a book, remove a book, search for a book by title or author, and display all books.\n\n3. **Implement the Console Application**: This will be the entry point of our application. It will handle user input and interact with the Library class to perform operations.\n\nLet's start by defining the Book class.\n\n### Step 1: Define the Book Class\n\nWe'll create a simple Book class with properties for ID, Title, and Author.\n\n```csharp\npublic class Book\n{\n    public int Id { get; set; }\n    public string Title { get; set; }\n    public string Author { get; set; }\n\n    public Book(int id, string title, string author)\n    {\n        Id = id;\n        Title = title;\n        Author = author;\n    }\n}\n```\n\n### Step 2: Create the Library Class\n\nThis class will manage the list of books. We'll use a List<Book> to store the books.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\npublic class Library\n{\n    private List<Book> books = new List<Book>();\n    private int nextId = 1;\n\n    public void AddBook(string title, string author)\n    {\n        books.Add(new Book(nextId++, title, author));\n    }\n\n    public bool RemoveBook(int id)\n    {\n        var book = books.FirstOrDefault(b => b.Id == id);\n        if (book != null)\n        {\n            books.Remove(book);\n            return true;\n        }\n        return false;\n    }\n\n    public List<Book> SearchByTitle(string title)\n    {\n        return books.Where(b => b.Title.ToLower().Contains(title.ToLower())).ToList();\n    }\n\n    public List<Book> SearchByAuthor(string author)\n    {\n        return books.Where(b => b.Author.ToLower().Contains(author.ToLower())).ToList();\n    }\n\n    public List<Book> GetAllBooks()\n    {\n        return books;\n    }\n}\n```\n\n### Step 3: Implement the Console Application\n\nThis is the main part where we'll handle user interactions.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    private static Library library = new Library();\n\n    public static void Main(string[] args)\n    {\n        bool exit = false;\n        while (!exit)\n        {\n            Console.WriteLine(\"\\nLibrary Management System\");\n            Console.WriteLine(\"1. Add Book\");\n            Console.WriteLine(\"2. Remove Book\");\n            Console.WriteLine(\"3. Search Book by Title\");\n            Console.WriteLine(\"4. Search Book by Author\");\n            Console.WriteLine(\"5. Display All Books\");\n            Console.WriteLine(\"6. Exit\");\n            Console.Write(\"Choose an option: \");\n\n            string choice = Console.ReadLine();\n            switch (choice)\n            {\n                case \"1\":\n                    AddBook();\n                    break;\n                case \"2\":\n                    RemoveBook();\n                    break;\n                case \"3\":\n                    SearchByTitle();\n                    break;\n                case \"4\":\n                    SearchByAuthor();\n                    break;\n                case \"5\":\n                    DisplayAllBooks();\n                    break;\n                case \"6\":\n                    exit = true;\n                    break;\n                default:\n                    Console.WriteLine(\"Invalid option. Please try again.\");\n                    break;\n            }\n        }\n    }\n\n    private static void AddBook()\n    {\n        Console.Write(\"Enter book title: \");\n        string title = Console.ReadLine();\n        Console.Write(\"Enter book author: \");\n        string author = Console.ReadLine();\n        library.AddBook(title, author);\n        Console.WriteLine(\"Book added successfully.\");\n    }\n\n    private static void RemoveBook()\n    {\n        Console.Write(\"Enter book ID to remove: \");\n        if (int.TryParse(Console.ReadLine(), out int id))\n        {\n            if (library.RemoveBook(id))\n            {\n                Console.WriteLine(\"Book removed successfully.\");\n            }\n            else\n            {\n                Console.WriteLine(\"Book not found.\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid ID.\");\n        }\n    }\n\n    private static void SearchByTitle()\n    {\n        Console.Write(\"Enter title to search: \");\n        string title = Console.ReadLine();\n        var results = library.SearchByTitle(title);\n        DisplayBooks(results);\n    }\n\n    private static void SearchByAuthor()\n    {\n        Console.Write(\"Enter author to search: \");\n        string author = Console.ReadLine();\n        var results = library.SearchByAuthor(author);\n        DisplayBooks(results);\n    }\n\n    private static void DisplayAllBooks()\n    {\n        var books = library.GetAllBooks();\n        DisplayBooks(books);\n    }\n\n    private static void DisplayBooks(List<Book> books)\n    {\n        if (books.Count == 0)\n        {\n            Console.WriteLine(\"No books found.\");\n            return;\n        }\n\n        foreach (var book in books)\n        {\n            Console.WriteLine($\"ID: {book.Id}, Title: {book.Title}, Author: {book.Author}\");\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Book Class**: Represents a book with ID, title, and author.\n2. **Library Class**: Manages a collection of books, allowing addition, removal, searching, and displaying.\n3. **Console Application**: Provides a menu-driven interface for users to interact with the library system.\n\nThis basic implementation should cover the core functionalities you mentioned. You can expand upon this by adding more features like updating book details, handling multiple copies of the same book, or even persisting data to a file or database."
    }
]