[
    {
        "role": "user",
        "content": "Design a Python web scraper that extracts information about movies from a website like IMDb or Rotten Tomatoes. The scraper should accept a list of movie titles as input and output a CSV file containing relevant information such as title, release year, director, cast, and rating. Additionally, implement functionality to download movie posters and save them locally with appropriate filenames.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you design a Python web scraper that can extract movie information from a website like IMDb or Rotten Tomatoes. We'll make sure it can take a list of movie titles as input and output a CSV file with details such as title, release year, director, cast, and rating. Additionally, we'll include functionality to download movie posters and save them locally with appropriate filenames.\n\nFirst, we need to choose which website to scrape. IMDb is a popular choice for comprehensive movie data. However, it's important to note that scraping websites may violate their terms of service, so make sure to check the website's robots.txt file and terms of service before proceeding.\n\nFor this example, I'll assume we're scraping IMDb. Here's a step-by-step guide to building this scraper:\n\n### Step 1: Set Up Your Environment\n\nMake sure you have Python installed on your system. You'll also need to install some libraries that will help with web scraping and handling data.\n\n```bash\npip install beautifulsoup4 requests pandas requests-html\n```\n\n- `beautifulsoup4`: For parsing HTML.\n- `requests`: For making HTTP requests.\n- `pandas`: For handling and saving data to CSV.\n- `requests-html`: For rendering JavaScript-heavy pages (if needed).\n\n### Step 2: Find the Structure of the Movie Page\n\nVisit IMDb and look at a movie page to understand the HTML structure. For example, go to https://www.imdb.com/title/tt0111161/ (The Shawshank Redemption).\n\nInspect elements to find where title, release year, director, cast, rating, and poster are located.\n\n### Step 3: Write a Function to Extract Movie Information\n\nWe'll write a function that takes a movie title as input, searches for it on IMDb, and extracts the required information from the movie's page.\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nimport os\nfrom requests_html import HTMLSession\n\ndef get_movie_info(movie_title):\n    base_url = \"https://www.imdb.com/find?q=\" + movie_title.replace(\" \", \"+\")\n    response = requests.get(base_url)\n    soup = BeautifulSoup(response.text, 'html.parser')\n    \n    # Find the first search result\n    search_results = soup.select('.findResult')\n    if not search_results:\n        return None\n    first_result = search_results[0]\n    movie_url = \"https://www.imdb.com\" + first_result['href']\n    \n    # Get the movie page\n    movie_response = requests.get(movie_url)\n    movie_soup = BeautifulSoup(movie_response.text, 'html.parser')\n    \n    # Extract information\n    title = movie_soup.select_one('.title_wrapper > h1').text.strip()\n    release_year = movie_soup.select_one('.title_wrapper > h1 > a').text.strip()\n    director = movie_soup.select_one('.credit_summary_item > a').text.strip()\n    cast_list = movie_soup.select('.cast_list > tr')\n    cast = [actor.text.strip() for actor in cast_list[:5]]  # Get top 5 cast\n    rating = movie_soup.select_one('.imdbRating > strong').text.strip()\n    \n    # Extract poster URL\n    poster_tag = movie_soup.select_one('.poster > a > img')\n    if poster_tag and 'loadlate' in poster_tag.attrs:\n        poster_url = poster_tag['loadlate']\n    else:\n        poster_url = None\n    \n    return {\n        'title': title,\n        'release_year': release_year,\n        'director': director,\n        'cast': ', '.join(cast),\n        'rating': rating,\n        'poster_url': poster_url\n    }\n\n### Step 4: Download Posters\n\ndef download_poster(poster_url, movie_title):\n    if not poster_url:\n        return\n    response = requests.get(poster_url)\n    filename = f\"{movie_title.replace(' ', '_')}.jpg\"\n    with open(filename, 'wb') as f:\n        f.write(response.content)\n    print(f\"Downloaded {filename}\")\n\n### Step 5: Main Function to Process List of Movies\n\ndef main(movie_titles):\n    data = []\n    for title in movie_titles:\n        print(f\"Processing {title}...\")\n        movie_info = get_movie_info(title)\n        if movie_info:\n            data.append(movie_info)\n            download_poster(movie_info['poster_url'], movie_info['title'])\n        else:\n            print(f\"Movie not found: {title}\")\n    \n    # Save data to CSV\n    df = pd.DataFrame(data)\n    df.to_csv('movies.csv', index=False)\n    print(\"Data saved to movies.csv\")\n\nif __name__ == \"__main__\":\n    movies = [\"The Shawshank Redemption\", \"The Godfather\", \"Pulp Fiction\"]\n    main(movies)\n```\n\n### Explanation:\n\n1. **Setting Up:** Install necessary libraries.\n2. **Finding Structure:** Inspect IMDb movie pages to understand HTML structure.\n3. **Extracting Info:** Write a function to search for a movie and extract details.\n4. **Downloading Posters:** Function to download and save movie posters.\n5. **Main Function:** Process a list of movies, collect data, download posters, and save to CSV.\n\n### Notes:\n\n- **Robots.txt and ToS:** Always check the website's robots.txt and terms of service before scraping.\n- **Error Handling:** Add error handling for cases where elements are not found.\n- **Rate Limiting:** Be respectful and add delays between requests to avoid overloading the server.\n\nThis should give you a solid starting point for building your movie scraper. You can expand upon this by adding more features, such as handling paginated results or extracting additional movie details."
    }
]