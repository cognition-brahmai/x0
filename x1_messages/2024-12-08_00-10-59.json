[
    {
        "role": "user",
        "content": "Implement a simple RESTful API using Node.js and Express framework. The API should have endpoints to create, read, update, and delete records of books (title, author, publication year) stored in a JSON file. Include validation checks for required fields and proper data types.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To implement a simple RESTful API using Node.js and Express framework for managing books, follow these steps:\n\n### Step 1: Set up the project\n\n1. **Initialize a new Node.js project:**\n   ```bash\n   mkdir book-api\n   cd book-api\n   npm init -y\n   ```\n\n2. **Install necessary packages:**\n   ```bash\n   npm install express body-parser fs path\n   ```\n\n### Step 2: Create the project structure\n\nCreate the following files and folders:\n\n```\nbook-api/\n\u251c\u2500\u2500 data/\n\u2502   \u2514\u2500\u2500 books.json\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 controllers/\n\u2502   \u2502   \u2514\u2500\u2500 books.js\n\u2502   \u251c\u2500\u2500 middlewares/\n\u2502   \u2502   \u2514\u2500\u2500 validateBook.js\n\u2502   \u251c\u2500\u2500 routes/\n\u2502   \u2502   \u2514\u2500\u2500 books.js\n\u2502   \u2514\u2500\u2500 server.js\n\u2514\u2500\u2500 .gitignore\n```\n\n### Step 3: Set up the server\n\n**src/server.js:**\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst booksRouter = require('./routes/books');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\napp.use(bodyParser.json());\napp.use('/api/books', booksRouter);\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 4: Define routes\n\n**src/routes/books.js:**\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst booksController = require('../controllers/books');\n\nrouter.get('/', booksController.getAllBooks);\nrouter.get('/:id', booksController.getBookById);\nrouter.post('/', booksController.createBook);\nrouter.put('/:id', booksController.updateBook);\nrouter.delete('/:id', booksController.deleteBook);\n\nmodule.exports = router;\n```\n\n### Step 5: Implement controllers\n\n**src/controllers/books.js:**\n\n```javascript\nconst fs = require('fs');\nconst path = require('path');\nconst validateBook = require('../middlewares/validateBook');\n\nconst booksFilePath = path.join(__dirname, '../data/books.json');\n\nfunction readBooks() {\n  const rawdata = fs.readFileSync(booksFilePath);\n  return JSON.parse(rawdata);\n}\n\nfunction writeBooks(books) {\n  fs.writeFileSync(booksFilePath, JSON.stringify(books, null, 2));\n}\n\nexports.getAllBooks = (req, res) => {\n  const books = readBooks();\n  res.json(books);\n};\n\nexports.getBookById = (req, res) => {\n  const books = readBooks();\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).json({ message: 'Book not found' });\n  res.json(book);\n};\n\nexports.createBook = (req, res) => {\n  const { error, book } = validateBook(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n\n  const books = readBooks();\n  const newBook = {\n    id: books.length + 1,\n    title: book.title,\n    author: book.author,\n    publicationYear: book.publicationYear\n  };\n  books.push(newBook);\n  writeBooks(books);\n  res.status(201).json(newBook);\n};\n\nexports.updateBook = (req, res) => {\n  const books = readBooks();\n  const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (bookIndex === -1) return res.status(404).json({ message: 'Book not found' });\n\n  const { error, book } = validateBook(req.body);\n  if (error) return res.status(400).json({ message: error.details[0].message });\n\n  books[bookIndex] = {\n    ...books[bookIndex],\n    ...book\n  };\n  writeBooks(books);\n  res.json(books[bookIndex]);\n};\n\nexports.deleteBook = (req, res) => {\n  const books = readBooks();\n  const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (bookIndex === -1) return res.status(404).json({ message: 'Book not found' });\n\n  const deletedBook = books.splice(bookIndex, 1);\n  writeBooks(books);\n  res.json(deletedBook[0]);\n};\n```\n\n### Step 6: Implement validation middleware\n\n**src/middlewares/validateBook.js:**\n\n```javascript\nconst Joi = require('joi');\n\nconst bookSchema = Joi.object({\n  title: Joi.string().required(),\n  author: Joi.string().required(),\n  publicationYear: Joi.number().integer().min(1900).max(2100).required()\n});\n\nexports.validateBook = (data) => {\n  const { error, value } = bookSchema.validate(data);\n  return { error, book: value };\n};\n```\n\n### Step 7: Initialize data file\n\n**data/books.json:**\n\n```json\n[]\n```\n\n### Step 8: Run the server\n\n1. **Start the server:**\n   ```bash\n   node src/server.js\n   ```\n\n2. **Test the API using tools like Postman or curl.**\n\n### Example Usage\n\n- **Get all books:**\n  ```bash\n  curl http://localhost:3000/api/books\n  ```\n\n- **Get a book by ID:**\n  ```bash\n  curl http://localhost:3000/api/books/1\n  ```\n\n- **Create a new book:**\n  ```bash\n  curl -X POST http://localhost:3000/api/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationYear\":2021}'\n  ```\n\n- **Update a book:**\n  ```bash\n  curl -X PUT http://localhost:3000/api/books/1 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publicationYear\":2022}'\n  ```\n\n- **Delete a book:**\n  ```bash\n  curl -X DELETE http://localhost:3000/api/books/1\n  ```\n\nThis setup provides a basic RESTful API for managing books with CRUD operations and validation checks."
    }
]