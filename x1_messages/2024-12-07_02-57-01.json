[
    {
        "role": "user",
        "content": "Write a Node.js server that accepts incoming WebSocket connections and broadcasts messages received from clients to all connected clients. Ensure proper error handling and connection management."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a Node.js server that handles WebSocket connections and broadcasts messages to all connected clients, you can use the `ws` library, which is a popular WebSocket library for Node.js.\n\nFirst, make sure you have Node.js installed on your machine. Then, you can set up a new project and install the necessary dependencies.\n\n### Step 1: Set Up the Project\n\n1. **Create a new directory for your project:**\n\n    ```bash\n    mkdir websocket-server\n    cd websocket-server\n    ```\n\n2. **Initialize a new Node.js project:**\n\n    ```bash\n    npm init -y\n    ```\n\n3. **Install the `ws` library:**\n\n    ```bash\n    npm install ws\n    ```\n\n### Step 2: Create the Server\n\nCreate a new file called `server.js` and set up the WebSocket server.\n\n```javascript\nconst WebSocket = require('ws');\n\n// Create a new WebSocket server\nconst wss = new WebSocket.Server({ port: 8080 });\n\n// Set up an array to hold all connected clients\nconst clients = new Set();\n\n// Event fired when a client connects\nwss.on('connection', function connection(ws) {\n    console.log('Client connected');\n\n    // Add the new client to the set\n    clients.add(ws);\n\n    // Send a welcome message to the newly connected client\n    ws.send('Welcome to the WebSocket server!');\n\n    // Event fired when a message is received from a client\n    ws.on('message', function incoming(message) {\n        console.log('Received message:', message);\n\n        // Broadcast the message to all connected clients\n        broadcast(message);\n    });\n\n    // Event fired when a client disconnects\n    ws.on('close', function close() {\n        console.log('Client disconnected');\n        clients.delete(ws);\n    });\n\n    // Handle errors\n    ws.on('error', function error(err) {\n        console.error('WebSocket error:', err);\n        clients.delete(ws);\n    });\n});\n\n// Function to broadcast messages to all connected clients\nfunction broadcast(message) {\n    for (const client of clients) {\n        if (client.readyState === WebSocket.OPEN) {\n            client.send(message);\n        }\n    }\n}\n\nconsole.log('WebSocket server is running on ws://localhost:8080');\n```\n\n### Step 3: Run the Server\n\n1. **Start the server:**\n\n    ```bash\n    node server.js\n    ```\n\n2. **You should see the message:**\n\n    ```\n    WebSocket server is running on ws://localhost:8080\n    ```\n\n### Step 4: Test the Server\n\nTo test the server, you can use a WebSocket client or create a simple HTML page with JavaScript to connect to the server.\n\n#### Example HTML Client\n\nCreate a file called `index.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>WebSocket Client</title>\n</head>\n<body>\n    <h1>WebSocket Client</h1>\n    <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message...\">\n    <button onclick=\"sendMessage()\">Send</button>\n    <ul id=\"messagesList\"></ul>\n\n    <script>\n        const socket = new WebSocket('ws://localhost:8080');\n\n        socket.onopen = function() {\n            console.log('Connected to WebSocket server');\n        };\n\n        socket.onmessage = function(event) {\n            const messagesList = document.getElementById('messagesList');\n            const message = document.createElement('li');\n            message.textContent = event.data;\n            messagesList.appendChild(message);\n        };\n\n        socket.onerror = function(error) {\n            console.error('WebSocket error:', error);\n        };\n\n        socket.onclose = function() {\n            console.log('Disconnected from WebSocket server');\n        };\n\n        function sendMessage() {\n            const input = document.getElementById('messageInput');\n            const message = input.value;\n            socket.send(message);\n            input.value = '';\n        }\n    </script>\n</body>\n</html>\n```\n\nOpen this HTML file in multiple browser windows to simulate multiple clients connected to the server. Type messages in one window and see them broadcasted to all other connected clients.\n\n### Explanation\n\n- **Server Setup:** We create a WebSocket server listening on port 8080.\n- **Client Management:** We maintain a set of connected clients to broadcast messages to all of them.\n- **Message Handling:** When a message is received from a client, it is broadcasted to all connected clients.\n- **Error Handling:** We handle disconnections and errors gracefully to manage client connections properly.\n\nThis setup ensures that your server can handle multiple WebSocket connections and broadcast messages efficiently. If you have any questions or need further assistance, feel free to ask!"
    }
]