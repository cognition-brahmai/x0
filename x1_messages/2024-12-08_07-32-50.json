[
    {
        "role": "user",
        "content": "Implement a C++ class called \"BankAccount\" with private member variables for account number, account holder's name, and balance. Provide public member functions for depositing money, withdrawing money, checking the balance, and displaying account details. Ensure that withdrawal transactions do not result in a negative balance."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Let's create a C++ class called \"BankAccount\" with the specified features.\n\nFirst, we need to include the necessary headers. Since we'll be working with strings and input/output operations, we'll include `<iostream>` and `<string>`.\n\nNext, we'll define the class \"BankAccount\" with private member variables for account number (an integer), account holder's name (a string), and balance (a double). We'll make these private to encapsulate the data and control access through public member functions.\n\nThe public member functions will include:\n\n1. A constructor to initialize the account details.\n\n2. A function to deposit money into the account.\n\n3. A function to withdraw money from the account, with a check to ensure the balance doesn't go negative.\n\n4. A function to check the current balance.\n\n5. A function to display the account details.\n\nLet's proceed to write the code accordingly.\n\n## Final Solution\nTo solve this problem, we need to implement a `BankAccount` class in C++ that encapsulates the properties and behaviors of a bank account. The class should handle account number, holder's name, and balance, and provide methods to deposit, withdraw, check balance, and display account details.\n\n### Approach\n\n1. **Encapsulation**: Use private member variables to store account number, holder's name, and balance. Provide public member functions to manipulate and access these variables.\n2. **Constructor**: Initialize the account with an account number, holder's name, and initial balance.\n3. **Deposit Function**: Add money to the balance.\n4. **Withdraw Function**: Subtract money from the balance if sufficient funds are available.\n5. **Check Balance Function**: Return the current balance.\n6. **Display Function**: Print the account details.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    std::string accountHolderName;\n    double balance;\n\npublic:\n    // Constructor\n    BankAccount(int accNum, const std::string& accHolderName, double initialBalance)\n        : accountNumber(accNum), accountHolderName(accHolderName), balance(initialBalance) {}\n\n    // Function to deposit money\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            std::cout << \"Deposited: \" << amount << \", New Balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Invalid deposit amount.\" << std::endl;\n        }\n    }\n\n    // Function to withdraw money\n    void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n                std::cout << \"Withdrew: \" << amount << \", New Balance: \" << balance << std::endl;\n            } else {\n                std::cout << \"Insufficient funds for withdrawal.\" << std::endl;\n            }\n        } else {\n            std::cout << \"Invalid withdrawal amount.\" << std::endl;\n        }\n    }\n\n    // Function to check balance\n    double checkBalance() const {\n        return balance;\n    }\n\n    // Function to display account details\n    void display() const {\n        std::cout << \"Account Number: \" << accountNumber << std::endl;\n        std::cout << \"Account Holder Name: \" << accountHolderName << std::endl;\n        std::cout << \"Current Balance: \" << balance << std::endl;\n    }\n};\n\nint main() {\n    // Example usage\n    BankAccount myAccount(123456, \"John Doe\", 1000.0);\n    myAccount.display();\n\n    myAccount.deposit(500.0);\n    myAccount.withdraw(200.0);\n    myAccount.withdraw(1500.0); // This should fail due to insufficient funds\n\n    std::cout << \"Final Balance: \" << myAccount.checkBalance() << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation\n\n- **Class Definition**: The `BankAccount` class has private members for account number, holder's name, and balance.\n- **Constructor**: Initializes the account with provided values.\n- **deposit()**: Adds a positive amount to the balance.\n- **withdraw()**: Subtracts a positive amount from the balance if sufficient funds are available.\n- **checkBalance()**: Returns the current balance.\n- **display()**: Prints the account details.\n\nThis design ensures that the account balance cannot go negative due to withdrawals and provides a clear interface for interacting with the bank account object."
    }
]