[
    {
        "role": "user",
        "content": "Write a Golang program that converts temperatures between Celsius, Fahrenheit, and Kelvin.\n   - The input temperature and unit should be provided as command-line arguments.\n   - The output should display the converted temperature in all three units.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Golang program that converts temperatures between Celsius, Fahrenheit, and Kelvin. The input temperature and its unit should come from command-line arguments, and the program should output the temperature converted into all three units. Sounds straightforward, but I need to make sure I handle everything correctly, especially since temperature conversions can be a bit tricky if you're not careful with the formulas.\n\nFirst things first, I need to recall the conversion formulas between these units:\n\n1. **Celsius to Fahrenheit**: \\( F = C \\times \\frac{9}{5} + 32 \\)\n\n2. **Celsius to Kelvin**: \\( K = C + 273.15 \\)\n\n3. **Fahrenheit to Celsius**: \\( C = (F - 32) \\times \\frac{5}{9} \\)\n\n4. **Fahrenheit to Kelvin**: \\( K = (F - 32) \\times \\frac{5}{9} + 273.15 \\)\n\n5. **Kelvin to Celsius**: \\( C = K - 273.15 \\)\n\n6. **Kelvin to Fahrenheit**: \\( F = (K - 273.15) \\times \\frac{9}{5} + 32 \\)\n\nI need to make sure that whichever unit the input is in, I can convert it to the other two.\n\nNow, for the command-line arguments:\n\n- The first argument will be the temperature value.\n\n- The second argument will be the unit of that temperature ('C' for Celsius, 'F' for Fahrenheit, 'K' for Kelvin).\n\nI should also think about error handling:\n\n- What if the user provides the wrong number of arguments?\n\n- What if the temperature value is not a valid number?\n\n- What if the unit is not recognized?\n\nI need to handle these cases gracefully and provide useful error messages.\n\nLet me sketch out the steps the program should follow:\n\n1. Check if exactly two command-line arguments are provided. If not, print an error message and exit.\n\n2. Try to parse the first argument as a float64. If it fails, print an error message and exit.\n\n3. Check if the second argument is 'C', 'F', or 'K'. If not, print an error message and exit.\n\n4. Based on the unit, perform the necessary conversions:\n\n- If the input is Celsius, convert to Fahrenheit and Kelvin.\n\n- If the input is Fahrenheit, convert to Celsius and Kelvin.\n\n- If the input is Kelvin, convert to Celsius and Fahrenheit.\n\n5. Print the original temperature and its unit, followed by the converted temperatures in the other two units.\n\nI should also think about the precision of the output. Temperatures are often represented with one or two decimal places, so I'll use formatting to keep the output clean.\n\nLet me consider an example:\n\n- Input: 100 C\n\n- Output: 100\u00b0C is 212\u00b0F and 373.15K\n\nAnother example:\n\n- Input: 32 F\n\n- Output: 32\u00b0F is 0\u00b0C and 273.15K\n\nAnd for Kelvin:\n\n- Input: 273.15 K\n\n- Output: 273.15K is 0\u00b0C and 32\u00b0F\n\nWait, that last one seems off. Let me double-check the conversion from Kelvin to Fahrenheit:\n\n\\( F = (K - 273.15) \\times \\frac{9}{5} + 32 \\)\n\nSo, for K = 273.15:\n\n\\( F = (273.15 - 273.15) \\times \\frac{9}{5} + 32 = 0 \\times \\frac{9}{5} + 32 = 0 + 32 = 32\u00b0F \\)\n\nYes, that's correct.\n\nI should also consider that temperatures in Kelvin cannot be negative, so if the input is Kelvin and the value is negative, I should handle that as an error.\n\nSimilarly, for Celsius and Fahrenheit, negative temperatures are acceptable, so no need to check for that.\n\nLet me think about how to structure the code:\n\n- I'll need to import the \"fmt\" package for formatting the output.\n\n- I'll need the \"os\" package to access command-line arguments.\n\n- I might want to define functions for each conversion to keep the code clean and reusable.\n\nDefining functions for each conversion is a good idea. It will make the code more organized and easier to maintain.\n\nHere's a rough outline of the functions I'll need:\n\n- celsiusToFahrenheit(c float64) float64\n\n- celsiusToKelvin(c float64) float64\n\n- fahrenheitToCelsius(f float64) float64\n\n- fahrenheitToKelvin(f float64) float64\n\n- kelvinToCelsius(k float64) float64\n\n- kelvinToFahrenheit(k float64) float64\n\nBut, thinking about it, I might not need all of these if I convert the input to one standard unit first and then convert to the other two from there.\n\nFor example:\n\n- If the input is Celsius, convert it to Kelvin and Fahrenheit.\n\n- If the input is Fahrenheit, convert it to Celsius and Kelvin.\n\n- If the input is Kelvin, convert it to Celsius and Fahrenheit.\n\nThis way, I don't need to create all possible conversion functions, but only the necessary ones.\n\nWait, actually, it might be simpler to have functions that take the temperature and the unit, and then output the converted temperatures in all three units.\n\nBut, that might be overkill for this simple program.\n\nLet me stick with defining specific conversion functions:\n\n- celsiusToFahrenheit\n\n- celsiusToKelvin\n\n- fahrenheitToCelsius\n\n- fahrenheitToKelvin\n\n- kelvinToCelsius\n\n- kelvinToFahrenheit\n\nThen, based on the input unit, I can call the appropriate functions to get the conversions.\n\nNow, for the main function:\n\n1. Check the number of command-line arguments.\n\n2. Parse the temperature value.\n\n3. Validate the unit.\n\n4. Perform the conversions based on the input unit.\n\n5. Print the results.\n\nI should also consider making the program case-insensitive for the unit, so 'c', 'C', 'f', 'F', 'k', 'K' are all accepted.\n\nLet me think about the error handling in more detail:\n\n- If there are fewer than two arguments, print a message like \"Please provide temperature and unit.\"\n\n- If there are more than two arguments, print a message like \"Too many arguments provided.\"\n\n- If the temperature value cannot be parsed to float64, print a message like \"Invalid temperature value.\"\n\n- If the unit is not 'C', 'c', 'F', 'f', 'K', or 'k', print a message like \"Invalid unit. Please use 'C', 'F', or 'K'.\"\n\n- If the input unit is 'K' or 'k' and the temperature is negative, print a message like \"Temperature in Kelvin cannot be negative.\"\n\nI should use the fmt package to format the output nicely, perhaps using verb commands to control the decimal places.\n\nFor example, \"%.2f\" to display floats with two decimal places.\n\nI should also make sure to include the degree symbol in the output for Celsius and Fahrenheit.\n\nIn Go, the degree symbol can be represented as '\\u00B0'.\n\nSo, for example, \"\\u00B0C\" for Celsius.\n\nLet me write a sample output:\n\n\"100.00\u00b0C is 212.00\u00b0F and 373.15K\"\n\nThat looks good.\n\nNow, let's think about implementing the conversion functions.\n\nStarting with Celsius to Fahrenheit:\n\n\\( F = C \\times \\frac{9}{5} + 32 \\)\n\nIn Go, that would be:\n\nfunc celsiusToFahrenheit(c float64) float64 {\n\nreturn c * 9/5 + 32\n\n}\n\nSimilarly, Celsius to Kelvin:\n\n\\( K = C + 273.15 \\)\n\nfunc celsiusToKelvin(c float64) float64 {\n\nreturn c + 273.15\n\n}\n\nFahrenheit to Celsius:\n\n\\( C = (F - 32) \\times \\frac{5}{9} \\)\n\nfunc fahrenheitToCelsius(f float64) float64 {\n\nreturn (f - 32) * 5/9\n\n}\n\nFahrenheit to Kelvin:\n\n\\( K = (F - 32) \\times \\frac{5}{9} + 273.15 \\)\n\nfunc fahrenheitToKelvin(f float64) float64 {\n\nreturn (f - 32) * 5/9 + 273.15\n\n}\n\nKelvin to Celsius:\n\n\\( C = K - 273.15 \\)\n\nfunc kelvinToCelsius(k float64) float64 {\n\nreturn k - 273.15\n\n}\n\nKelvin to Fahrenheit:\n\n\\( F = (K - 273.15) \\times \\frac{9}{5} + 32 \\)\n\nfunc kelvinToFahrenheit(k float64) float64 {\n\nreturn (k - 273.15) * 9/5 + 32\n\n}\n\nI should make sure that these functions handle float64 types for precision.\n\nNow, in the main function, I need to parse the command-line arguments.\n\nIn Go, command-line arguments are accessible via os.Args, which is a slice of strings where os.Args[0] is the program name, os.Args[1] is the first argument, and so on.\n\nSo, the temperature value would be os.Args[1], and the unit would be os.Args[2].\n\nI need to check if len(os.Args) is exactly 3. If not, print an error message and exit.\n\nTo parse the temperature value, I can use fmt.Sscan or strconv.ParseFloat.\n\nI'll use strconv.ParseFloat for this purpose.\n\nHere's a rough outline:\n\npackage main\n\nimport (\n\n\"fmt\"\n\n\"os\"\n\n\" strconv\"\n\n)\n\nfunc main() {\n\nif len(os.Args) != 3 {\n\nfmt.Println(\"Usage: tempconv temperature unit\")\n\nos.Exit(1)\n\n}\n\ntempStr := os.Args[1]\n\nunit := strings.ToUpper(os.Args[2])\n\ntemp, err := strconv.ParseFloat(tempStr, 64)\n\nif err != nil {\n\nfmt.Println(\"Invalid temperature value.\")\n\nos.Exit(1)\n\n}\n\nswitch unit {\n\ncase \"C\":\n\nf := celsiusToFahrenheit(temp)\n\nk := celsiusToKelvin(temp)\n\nfmt.Printf(\"%.2f\\u00B0C is %.2f\\u00B0F and %.2fK\\n\", temp, f, k)\n\ncase \"F\":\n\nc := fahrenheitToCelsius(temp)\n\nk := fahrenheitToKelvin(temp)\n\nfmt.Printf(\"%.2f\\u00B0F is %.2f\\u00B0C and %.2fK\\n\", temp, c, k)\n\ncase \"K\":\n\nif temp < 0 {\n\nfmt.Println(\"Temperature in Kelvin cannot be negative.\")\n\nos.Exit(1)\n\n}\n\nc := kelvinToCelsius(temp)\n\nf := kelvinToFahrenheit(temp)\n\nfmt.Printf(\"%.2fK is %.2f\\u00B0C and %.2f\\u00B0F\\n\", temp, c, f)\n\ndefault:\n\nfmt.Println(\"Invalid unit. Please use 'C', 'F', or 'K'.\")\n\nos.Exit(1)\n\n}\n\n}\n\nI need to import \"strings\" to use strings.ToUpper, so I'll add that to the imports.\n\nAlso, I should ensure that the unit is exactly one character and is either 'C', 'F', or 'K'.\n\nIn the switch statement, I'm converting the unit to uppercase to make it case-insensitive.\n\nI should also think about trimming any whitespace from the unit, just in case.\n\nSo, unit := strings.ToUpper(strings.TrimSpace(os.Args[2]))\n\nSimilarly for the temperature string, although it's less critical.\n\nI should also consider that the user might input temperatures with decimal points, so using float64 is appropriate.\n\nLet me think about edge cases:\n\n- Input: -273.15 C (absolute zero)\n\n- Output: -273.15\u00b0C is -459.67\u00b0F and 0.00K\n\n- Input: 0 K (absolute zero)\n\n- Output: 0K is -273.15\u00b0C and -459.67\u00b0F\n\n- Input: 32 F (freezing point of water)\n\n- Output: 32.00\u00b0F is 0.00\u00b0C and 273.15K\n\n- Input: 212 F (boiling point of water)\n\n- Output: 212.00\u00b0F is 100.00\u00b0C and 373.15K\n\nI should also consider very high or very low temperatures to ensure there's no floating-point precision issues.\n\nNow, let's think about how to compile and run this program.\n\nIn Go, I can save this code to a file, say tempconv.go, and then run:\n\ngo run tempconv.go 100 C\n\nor\n\ngo build tempconv.go\n\nThen\n\n./tempconv 100 C\n\nI should make sure that the program works as expected with different inputs.\n\nI might also want to add comments to the code for clarity, especially for someone who is not familiar with Go or temperature conversions.\n\nLet me also consider formatting the output consistently, with two decimal places for Celsius and Fahrenheit, and no decimal places for Kelvin, as Kelvin is often written without decimals in scientific contexts, but for consistency, I'll keep two decimal places for all.\n\nSo, I'll use \"%.2f\" for all temperature values.\n\nAlso, ensuring that the degree symbol is properly displayed, depending on the terminal or console being used.\n\nIn some terminals, Unicode characters like the degree symbol might not display correctly, but in most modern terminals, it should be fine.\n\nI should also think about localizing the output, but for simplicity, I'll stick with English units and symbols.\n\nOne more thing: I should consider that the user might input units in full words, like \"Celsius\", \"Fahrenheit\", or \"Kelvin\", but to keep it simple, I'll stick with single characters 'C', 'F', 'K'.\n\nIf I have time, I can extend it to accept full words, but for now, single characters will suffice.\n\nAlright, I think I've covered all the necessary aspects for this program.\n\nLet me summarize the steps again:\n\n1. Check for exactly two command-line arguments.\n\n2. Parse the temperature value as float64.\n\n3. Validate and standardize the unit to uppercase.\n\n4. Perform the appropriate conversions based on the unit.\n\n5. Handle any errors gracefully with informative messages.\n\n6. Print the converted temperatures in all three units with two decimal places.\n\nNow, I'll proceed to write the actual code accordingly.\n\n## Final Solution\nTo solve this problem, we need a program that converts a given temperature from one unit (Celsius, Fahrenheit, or Kelvin) to the other two units. The input temperature and its unit are provided as command-line arguments, and the output displays the temperature in all three units.\n\n### Approach\n\n1. **Input Handling:**\n   - Check if exactly two command-line arguments are provided. If not, print an error message and exit.\n   - Parse the first argument as the temperature value.\n   - Validate the second argument as the unit ('C', 'F', or 'K'). Handle case insensitivity and ensure the unit is recognized.\n\n2. **Temperature Conversions:**\n   - Define functions to convert between Celsius, Fahrenheit, and Kelvin.\n   - Based on the input unit, compute the temperatures in the other two units.\n\n3. **Error Handling:**\n   - Ensure the temperature value is a valid number.\n   - Validate the unit and handle invalid units or values (e.g., negative Kelvin temperatures).\n\n4. **Output:**\n   - Print the original temperature and its unit.\n   - Print the converted temperatures in the other two units with appropriate units and symbols.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc celsiusToFahrenheit(c float64) float64 {\n\treturn c*9/5 + 32\n}\n\nfunc celsiusToKelvin(c float64) float64 {\n\treturn c + 273.15\n}\n\nfunc fahrenheitToCelsius(f float64) float64 {\n\treturn (f - 32) * 5 / 9\n}\n\nfunc fahrenheitToKelvin(f float64) float64 {\n\treturn fahrenheitToCelsius(f) + 273.15\n}\n\nfunc kelvinToCelsius(k float64) float64 {\n\treturn k - 273.15\n}\n\nfunc kelvinToFahrenheit(k float64) float64 {\n\treturn celsiusToFahrenheit(kelvinToCelsius(k))\n}\n\nfunc main() {\n\tif len(os.Args) != 3 {\n\t\tfmt.Println(\"Usage: tempconv temperature unit\")\n\t\tos.Exit(1)\n\t}\n\n\ttempStr := os.Args[1]\n\tunit := strings.ToUpper(strings.TrimSpace(os.Args[2]))\n\n\ttemp, err := strconv.ParseFloat(tempStr, 64)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid temperature value.\")\n\t\tos.Exit(1)\n\t}\n\n\tswitch unit {\n\tcase \"C\":\n\t\tf := celsiusToFahrenheit(temp)\n\t\tk := celsiusToKelvin(temp)\n\t\tfmt.Printf(\"%.2f\\u00B0C is %.2f\\u00B0F and %.2fK\\n\", temp, f, k)\n\tcase \"F\":\n\t\tc := fahrenheitToCelsius(temp)\n\t\tk := fahrenheitToKelvin(temp)\n\t\tfmt.Printf(\"%.2f\\u00B0F is %.2f\\u00B0C and %.2fK\\n\", temp, c, k)\n\tcase \"K\":\n\t\tif temp < 0 {\n\t\t\tfmt.Println(\"Temperature in Kelvin cannot be negative.\")\n\t\t\tos.Exit(1)\n\t\t}\n\t\tc := kelvinToCelsius(temp)\n\t\tf := kelvinToFahrenheit(temp)\n\t\tfmt.Printf(\"%.2fK is %.2f\\u00B0C and %.2f\\u00B0F\\n\", temp, c, f)\n\tdefault:\n\t\tfmt.Println(\"Invalid unit. Please use 'C', 'F', or 'K'.\")\n\t\tos.Exit(1)\n\t}\n}\n```\n\n### Explanation\n\n1. **Input Handling:**\n   - The program checks for exactly two command-line arguments. If not provided, it prints a usage message and exits.\n   - The temperature value is parsed from the first argument.\n   - The unit is extracted from the second argument, converted to uppercase, and trimmed of any whitespace.\n\n2. **Temperature Conversions:**\n   - Conversion functions are defined for each pair of units.\n   - Based on the input unit, the appropriate conversion functions are called to get the temperatures in the other units.\n\n3. **Error Handling:**\n   - The program checks if the temperature value is a valid float.\n   - It validates the unit and ensures that Kelvin temperatures are not negative.\n   - Appropriate error messages are displayed for invalid inputs.\n\n4. **Output:**\n   - The original temperature and its unit are displayed.\n   - The converted temperatures in the other two units are displayed with two decimal places and appropriate units."
    }
]