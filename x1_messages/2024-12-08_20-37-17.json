[
    {
        "role": "user",
        "content": "Implement a Python program that simulates the behavior of a doubly linked list, including methods for inserting elements at the beginning, end, and specified index, as well as deleting elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Implementing a doubly linked list in Python involves creating a structure where each node has references to both the next and previous nodes. This allows for efficient insertion and deletion operations from both ends of the list. Below is a Python program that simulates such a doubly linked list with the specified methods.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n        self.size = 0\n\n    def is_empty(self):\n        return self.head is None\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n        self.size += 1\n\n    def prepend(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n        self.size += 1\n\n    def insert_at_index(self, index, data):\n        if index < 0 or index > self.size:\n            raise IndexError(\"Index out of range\")\n        if index == 0:\n            self.prepend(data)\n        elif index == self.size:\n            self.append(data)\n        else:\n            new_node = Node(data)\n            current = self.head\n            for _ in range(index):\n                current = current.next\n            new_node.next = current\n            new_node.prev = current.prev\n            current.prev.next = new_node\n            current.prev = new_node\n            self.size += 1\n\n    def delete_by_value(self, value):\n        current = self.head\n        found = False\n        while current:\n            if current.data == value:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                self.size -= 1\n                found = True\n                break\n            current = current.next\n        if not found:\n            raise ValueError(\"Value not found in the list\")\n\n    def delete_by_index(self, index):\n        if index < 0 or index >= self.size:\n            raise IndexError(\"Index out of range\")\n        current = self.head\n        for _ in range(index):\n            current = current.next\n        if current.prev:\n            current.prev.next = current.next\n        else:\n            self.head = current.next\n        if current.next:\n            current.next.prev = current.prev\n        else:\n            self.tail = current.prev\n        self.size -= 1\n\n    def __str__(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        return \" <-> \".join(elements)\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.append(1)\n    dll.append(2)\n    dll.append(3)\n    print(\"After append:\", dll)\n    dll.prepend(0)\n    print(\"After prepend:\", dll)\n    dll.insert_at_index(2, \"a\")\n    print(\"After insert at index 2:\", dll)\n    dll.delete_by_value(0)\n    print(\"After deleting value 0:\", dll)\n    dll.delete_by_index(2)\n    print(\"After deleting index 2:\", dll)\n```\n\n### Explanation:\n\n1. **Node Class**: Represents each element in the doubly linked list with `data`, `next`, and `prev` attributes.\n\n2. **DoublyLinkedList Class**:\n   - **Initialization**: Starts with `head` and `tail` as `None` and `size` as 0.\n   - **is_empty**: Checks if the list is empty.\n   - **append**: Adds an element to the end of the list.\n   - **prepend**: Adds an element to the beginning of the list.\n   - **insert_at_index**: Inserts an element at a specified index.\n   - **delete_by_value**: Deletes the first occurrence of a specified value.\n   - **delete_by_index**: Deletes the element at a specified index.\n   - **__str__**: Returns a string representation of the list for easy visualization.\n\n3. **Example Usage**: Demonstrates appending, prepending, inserting at an index, deleting by value, and deleting by index, along with printing the list after each operation."
    }
]