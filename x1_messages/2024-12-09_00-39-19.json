[
    {
        "role": "user",
        "content": "Create a Python function that sorts a list of numbers in ascending order using bubble sort algorithm. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere's a Python function that implements the bubble sort algorithm to sort a list of numbers in ascending order:\n\n```python\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        # Track if any swaps are made in this pass\n        swapped = False\n        for j in range(0, n-i-1):\n            if numbers[j] > numbers[j+1]:\n                # Swap the elements\n                numbers[j], numbers[j+1] = numbers[j+1], numbers[j]\n                swapped = True\n        # If no two elements were swapped in the inner loop, the list is already sorted\n        if not swapped:\n            break\n    return numbers\n```\n\nYou can use this function by passing a list of numbers to it. For example:\n\n```python\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nsorted_numbers = bubble_sort(numbers)\nprint(\"Sorted list:\", sorted_numbers)\n```\n\nThis will output:\n\n```\nSorted list: [11, 12, 22, 25, 34, 64, 90]\n```\n\nThe bubble sort algorithm has a worst-case and average time complexity of O(n^2), where n is the number of items being sorted. This makes it inefficient on large lists, and generally inferior to other sorting algorithms like quicksort or mergesort. However, it's simple to understand and implement, making it a good starting point for learning about sorting algorithms."
    }
]