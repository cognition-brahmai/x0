[
    {
        "role": "user",
        "content": "Write a Python script to implement the bubble sort algorithm on an array of integers and print the sorted array.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere's a Python script that implements the bubble sort algorithm on an array of integers and prints the sorted array:\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # Traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j)\n\n# Example usage:\narr = [64, 34, 25, 12, 22, 11, 90]\nprint(\"Unsorted array is:\", arr)\nbubble_sort(arr)\nprint(\"Sorted array is:\", arr)\n```\n\nIn this script:\n\n- We define a function `bubble_sort` that takes an array `arr` as input.\n\n- We determine the length of the array `n`.\n\n- We use two nested loops:\n\n- The outer loop runs `n` times, where `n` is the length of the array.\n\n- The inner loop runs from the start of the array to `n-i-1`, where `i` is the current iteration of the outer loop.\n\n- In the inner loop, we compare each pair of adjacent elements and swap them if they are in the wrong order.\n\n- After the sorting is complete, we print the sorted array.\n\nThis is a basic implementation of bubble sort. It's important to note that bubble sort has a time complexity of O(n\u00b2), so it's not efficient for large lists. However, it's a good algorithm to understand the basics of sorting.\n\nIf you have any questions or need further explanation, feel free to ask!"
    }
]