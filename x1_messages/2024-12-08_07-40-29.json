[
    {
        "role": "user",
        "content": "Design a Golang REST API that interacts with Azure Storage to perform CRUD operations on blobs within a container. The API should support endpoints for uploading, downloading, listing, and deleting blobs.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a REST API using Golang that interacts with Azure Storage to perform CRUD operations on blobs within a container. The API should have endpoints for uploading, downloading, listing, and deleting blobs.\n\nFirst, I need to set up a basic Go project structure. I'll create a directory for my project, say `azure-storage-api`, and within that, I'll have subdirectories for `controllers`, `models`, `handlers`, and `utils`.\n\nI'll start by initializing a new Go module:\n\n```bash\nmkdir azure-storage-api\ncd azure-storage-api\ngo mod init azure-storage-api\n```\n\nNext, I need to set up the Azure Storage client in Go. I'll be using the Azure SDK for Go. So, I'll add the necessary dependencies to my `go.mod` file:\n\n```bash\ngo get -u github.com/Azure/azure-storage-blob-go/azblob\n```\n\nI also need to handle HTTP requests, so I'll use the standard `net/http` package.\n\nLet's start by setting up the basic structure of the application. I'll create a `main.go` file where I'll set up the router and define the endpoints.\n\n## Main Application Setup\n\n### main.go\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\tr := mux.NewRouter()\n\n\t// Define endpoints\n\tr.HandleFunc(\"/blobs\", UploadBlob).Methods(\"POST\")\n\tr.HandleFunc(\"/blobs/{blobName}\", DownloadBlob).Methods(\"GET\")\n\tr.HandleFunc(\"/blobs\", ListBlobs).Methods(\"GET\")\n\tr.HandleFunc(\"/blobs/{blobName}\", DeleteBlob).Methods(\"DELETE\")\n\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```\n\nIn this setup, I'm using the `gorilla/mux` router for handling HTTP requests. I've defined endpoints for uploading, downloading, listing, and deleting blobs.\n\n## Azure Storage Client Setup\n\nI need to set up the Azure Storage client to interact with the blob service. I'll create a utility package to handle the Azure Storage operations.\n\n### utils/azure_storage.go\n\n```go\npackage utils\n\nimport (\n\t\"context\"\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n\n\t\"github.com/Azure/azure-storage-blob-go/azblob\"\n)\n\ntype AzureStorageClient struct {\n\tContainerURL azblob.ContainerURL\n}\n\nfunc NewAzureStorageClient(accountName, accountKey, containerName string) (*AzureStorageClient, error) {\n\tcredential, err := azblob.NewSharedKeyCredential(accountName, accountKey)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tpipeline := azblob.NewPipeline(credential, azblob.PipelineOptions{})\n\tserviceURL := azblob.NewServiceURL(\n\t\tfmt.Sprintf(\"https://%s.blob.core.windows.net\", accountName),\n\t\tpipeline,\n\t)\n\n\tcontainerURL := serviceURL.NewContainerURL(containerName)\n\n\treturn &AzureStorageClient{\n\t\tContainerURL: containerURL,\n\t}, nil\n}\n\nfunc (c *AzureStorageClient) UploadBlob(ctx context.Context, blobName string, data io.Reader) error {\n\tblockBlobURL := c.ContainerURL.NewBlockBlobURL(blobName)\n\t_, err := blockBlobURL.Upload(ctx, data, azblob.BlobHTTPHeaders{}, azblob.Metadata{}, azblob.BlobAccessConditions{})\n\treturn err\n}\n\nfunc (c *AzureStorageClient) DownloadBlob(ctx context.Context, blobName string) (io.ReadCloser, error) {\n\tblockBlobURL := c.ContainerURL.NewBlockBlobURL(blobName)\n\tresp, err := blockBlobURL.Download(ctx, 0, azblob.CountToEnd, azblob.BlobAccessConditions{}, false)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\treturn resp.Body(azblob.RetryReaderOptions{}), nil\n}\n\nfunc (c *AzureStorageClient) ListBlobs(ctx context.Context) ([]string, error) {\n\tlistBlob, err := c.ContainerURL.ListBlobsFlatSegment(ctx, azblob.Marker{}, azblob.ListBlobsSegmentOptions{})\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar blobNames []string\n\tfor _, blobInfo := range listBlob.Segment.BlobItems {\n\t\tblobNames = append(blobNames, blobInfo.Name)\n\t}\n\treturn blobNames, nil\n}\n\nfunc (c *AzureStorageClient) DeleteBlob(ctx context.Context, blobName string) error {\n\tblockBlobURL := c.ContainerURL.NewBlockBlobURL(blobName)\n\t_, err := blockBlobURL.Delete(ctx, azblob.DeleteSnapshotsOptionInclude, azblob.BlobAccessConditions{})\n\treturn err\n}\n```\n\nIn this file, I've created an `AzureStorageClient` struct that encapsulates the operations for uploading, downloading, listing, and deleting blobs.\n\n## Controllers\n\nNow, I'll create controllers to handle the HTTP requests and interact with the Azure Storage client.\n\n### controllers/blobs.go\n\n```go\npackage controllers\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/azure-storage-api/utils\"\n)\n\nvar azureClient *utils.AzureStorageClient\n\nfunc InitializeAzureClient(accountName, accountKey, containerName string) {\n\tvar err error\n\tazureClient, err = utils.NewAzureStorageClient(accountName, accountKey, containerName)\n\tif err != nil {\n\t\tfmt.Printf(\"Error initializing Azure Storage client: %v\\n\", err)\n\t}\n}\n\nfunc UploadBlob(w http.ResponseWriter, r *http.Request) {\n\tctx := context.Background()\n\tfile, header, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\thttp.Error(w, \"Error retrieving file from form-data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tblobName := header.Filename\n\terr = azureClient.UploadBlob(ctx, blobName, file)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Error uploading blob: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusCreated)\n\tfmt.Fprintf(w, \"Blob %s uploaded successfully\\n\", blobName)\n}\n\nfunc DownloadBlob(w http.ResponseWriter, r *http.Request) {\n\tctx := context.Background()\n\tparams := mux.Vars(r)\n\tblobName := params[\"blobName\"]\n\n\treader, err := azureClient.DownloadBlob(ctx, blobName)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Error downloading blob: %v\", err), http.StatusNotFound)\n\t\treturn\n\t}\n\tdefer reader.Close()\n\n\tio.Copy(w, reader)\n}\n\nfunc ListBlobs(w http.ResponseWriter, r *http.Request) {\n\tctx := context.Background()\n\tblobNames, err := azureClient.ListBlobs(ctx)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Error listing blobs: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfor _, blobName := range blobNames {\n\t\tfmt.Fprintln(w, blobName)\n\t}\n}\n\nfunc DeleteBlob(w http.ResponseWriter, r *http.Request) {\n\tctx := context.Background()\n\tparams := mux.Vars(r)\n\tblobName := params[\"blobName\"]\n\n\terr := azureClient.DeleteBlob(ctx, blobName)\n\tif err != nil {\n\t\thttp.Error(w, fmt.Sprintf(\"Error deleting blob: %v\", err), http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusNoContent)\n\tfmt.Fprintf(w, \"Blob %s deleted successfully\\n\", blobName)\n}\n```\n\nIn this file, I've defined the controller functions for each endpoint. These functions handle the HTTP requests, interact with the Azure Storage client, and return appropriate responses.\n\n## Main Function Updates\n\nI need to initialize the Azure Storage client in the `main` function.\n\n### main.go (updated)\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/azure-storage-api/controllers\"\n)\n\nfunc main() {\n\taccountName := \"your_account_name\"\n\taccountKey := \"your_account_key\"\n\tcontainerName := \"your_container_name\"\n\n\tcontrollers.InitializeAzureClient(accountName, accountKey, containerName)\n\n\tr := mux.NewRouter()\n\n\t// Define endpoints\n\tr.HandleFunc(\"/blobs\", controllers.UploadBlob).Methods(\"POST\")\n\tr.HandleFunc(\"/blobs/{blobName}\", controllers.DownloadBlob).Methods(\"GET\")\n\tr.HandleFunc(\"/blobs\", controllers.ListBlobs).Methods(\"GET\")\n\tr.HandleFunc(\"/blobs/{blobName}\", controllers.DeleteBlob).Methods(\"DELETE\")\n\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", r))\n}\n```\n\nReplace `\"your_account_name\"`, `\"your_account_key\"`, and `\"your_container_name\"` with your actual Azure Storage account name, account key, and container name.\n\n## Running the Application\n\nTo run the application, ensure you have Go installed, and then execute:\n\n```bash\ngo run main.go\n```\n\nThis will start the server on port 8080. You can then use tools like `curl` or Postman to test the endpoints.\n\n### Example Usage\n\n1. **Upload Blob**\n\n   ```bash\n   curl -X POST -H \"Content-Type: multipart/form-data\" -F \"file=@/path/to/your/file.txt\" http://localhost:8080/blobs\n   ```\n\n2. **Download Blob**\n\n   ```bash\n   curl -X GET http://localhost:8080/blobs/your_blob_name.txt -o downloaded_file.txt\n   ```\n\n3. **List Blobs**\n\n   ```bash\n   curl -X GET http://localhost:8080/blobs\n   ```\n\n4. **Delete Blob**\n\n   ```bash\n   curl -X DELETE http://localhost:8080/blobs/your_blob_name.txt\n   ```\n\nThis setup provides a basic REST API for performing CRUD operations on Azure Blob Storage using Golang. You can further enhance this by adding error handling, authentication, and more features as needed."
    }
]