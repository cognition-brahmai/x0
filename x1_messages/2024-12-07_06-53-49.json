[
    {
        "role": "user",
        "content": "Write a JavaScript function that checks if a number is a power of 2."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, you need a JavaScript function that determines whether a given number is a power of 2. Powers of 2 are numbers like 1, 2, 4, 8, 16, 32, and so on. Each of these numbers is obtained by multiplying 2 by itself a certain number of times.\n\nTo solve this, we can use a simple mathematical property. A number is a power of 2 if it's greater than zero and the binary representation of the number has only one '1' and all other digits are '0'. For example:\n\n- 1 in binary is 1\n\n- 2 in binary is 10\n\n- 4 in binary is 100\n\n- 8 in binary is 1000\n\n- and so on.\n\nIn JavaScript, we can check this by using bitwise operations. Specifically, we can use the AND operator (&) to check if only one bit is set in the number.\n\nHere's how you can implement this:\n\n```javascript\nfunction isPowerOfTwo(n) {\n    if (n <= 0) {\n        return false;\n    }\n    return (n & (n - 1)) === 0;\n}\n```\n\nLet me explain how this works:\n\n1. **Check if n is greater than zero:** Since powers of 2 are positive integers, any number less than or equal to zero cannot be a power of 2.\n\n2. **Bitwise AND operation:** `(n & (n - 1))` will be zero only if n is a power of 2. Here's why:\n\n- When you subtract 1 from a power of 2, all the bits flip up to and including the first '1' from the right.\n\n- For example:\n\n- 4 in binary is 100\n\n- 3 in binary is 011\n\n- So, 4 & 3 = 100 & 011 = 000\n\n- Similarly, 8 in binary is 1000\n\n- 7 in binary is 0111\n\n- 8 & 7 = 1000 & 0111 = 0000\n\n- If n is not a power of 2, then n & (n - 1) will not be zero because there will be more than one '1' in the binary representation of n.\n\nLet's test this function with some examples:\n\n- isPowerOfTwo(1): true (1 is 2^0)\n\n- isPowerOfTwo(2): true (2 is 2^1)\n\n- isPowerOfTwo(3): false (3 is not a power of 2)\n\n- isPowerOfTwo(4): true (4 is 2^2)\n\n- isPowerOfTwo(5): false (5 is not a power of 2)\n\n- isPowerOfTwo(16): true (16 is 2^4)\n\n- isPowerOfTwo(0): false (0 is not a power of 2)\n\n- isPowerOfTwo(-8): false (negative numbers are not powers of 2)\n\nThis should cover all the cases you need. If you have any questions or need further clarification, feel free to ask!"
    }
]