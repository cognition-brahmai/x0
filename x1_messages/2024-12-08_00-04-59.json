[
    {
        "role": "user",
        "content": "In Python, create a function that determines if a number is a perfect square."
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a function in Python that determines if a number is a perfect square, we can follow these steps:\n\n1. **Understand Perfect Squares**: A perfect square is an integer that is the square of another integer. For example, 16 is a perfect square because it is 4 squared, but 14 is not a perfect square.\n\n2. **Handle Edge Cases**: We need to consider edge cases such as negative numbers, zero, and positive integers.\n\n3. **Implement the Function**: We can implement this by taking the square root of the number and checking if it is an integer.\n\nHere's how we can implement this:\n\n```python\nimport math\n\ndef is_perfect_square(n):\n    if n < 0:\n        return False\n    sqrt_n = math.isqrt(n)\n    return sqrt_n * sqrt_n == n\n\n# Example usage:\nprint(is_perfect_square(16))  # True\nprint(is_perfect_square(14))  # False\nprint(is_perfect_square(-4))  # False\nprint(is_perfect_square(0))   # True\nprint(is_perfect_square(1))   # True\n```\n\n### Explanation:\n\n1. **Import the math Module**: This module provides mathematical functions, including `isqrt`, which returns the integer square root of a non-negative integer.\n\n2. **Check for Negative Numbers**: Since negative numbers cannot be perfect squares, we immediately return `False` for any negative input.\n\n3. **Calculate the Square Root**: Use `math.isqrt(n)` to get the integer square root of `n`.\n\n4. **Verify the Square**: Multiply the square root by itself and check if it equals the original number `n`. If it does, `n` is a perfect square; otherwise, it is not.\n\nThis function efficiently determines whether a given number is a perfect square, handling various edge cases appropriately."
    }
]