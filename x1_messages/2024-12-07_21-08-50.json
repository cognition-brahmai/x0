[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a basic banking system with classes for accounts, customers, and transactions, along with methods for depositing, withdrawing, and transferring funds between accounts.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Creating a C++ program that simulates a basic banking system involves several steps. We need to design classes for accounts, customers, and transactions, and implement methods for depositing, withdrawing, and transferring funds between accounts.\n\n### Approach\n\n1. **Classes Design:**\n   - **Customer:** Holds customer information like name and address.\n   - **Account:** Represents a bank account with a balance and account number.\n   - **Transaction:** Represents a transaction with type (deposit, withdrawal, transfer), amount, and timestamp.\n\n2. **Methods:**\n   - **Account:**\n     - Deposit: Adds amount to the balance.\n     - Withdraw: Subtracts amount from the balance if sufficient funds.\n     - Transfer: Transfers amount to another account if sufficient funds.\n   - **Transaction:** Records transaction details.\n\n3. **Data Structures:**\n   - Use vectors to store lists of customers and accounts.\n\n4. **Error Handling:**\n   - Check for sufficient funds before withdrawal or transfer.\n   - Validate account numbers during transfer.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n\nclass Customer {\npublic:\n    std::string name;\n    std::string address;\n\n    Customer(const std::string& n, const std::string& a)\n        : name(n), address(a) {}\n};\n\nclass Account {\nprivate:\n    int accountNumber;\n    double balance;\n    Customer* customer;\n    std::vector<Transaction> transactionHistory;\n\npublic:\n    Account(int accNum, double initialBalance, Customer* cust)\n        : accountNumber(accNum), balance(initialBalance), customer(cust) {}\n\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            transactionHistory.push_back(Transaction(\"Deposit\", amount));\n            std::cout << \"Deposited \" << amount << \". New balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Invalid deposit amount.\" << std::endl;\n        }\n    }\n\n    bool withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            transactionHistory.push_back(Transaction(\"Withdrawal\", amount));\n            std::cout << \"Withdrew \" << amount << \". New balance: \" << balance << std::endl;\n            return true;\n        } else {\n            std::cout << \"Insufficient funds or invalid withdrawal amount.\" << std::endl;\n            return false;\n        }\n    }\n\n    bool transfer(Account& toAccount, double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            toAccount.balance += amount;\n            transactionHistory.push_back(Transaction(\"Transfer to \" + std::to_string(toAccount.accountNumber), amount));\n            std::cout << \"Transferred \" << amount << \" to account \" << toAccount.accountNumber << \". New balance: \" << balance << std::endl;\n            return true;\n        } else {\n            std::cout << \"Insufficient funds or invalid transfer amount.\" << std::endl;\n            return false;\n        }\n    }\n\n    void printStatement() {\n        std::cout << \"Account Number: \" << accountNumber << std::endl;\n        std::cout << \"Customer: \" << customer->name << \", \" << customer->address << std::endl;\n        std::cout << \"Balance: \" << balance << std::endl;\n        std::cout << \"Transaction History:\" << std::endl;\n        for (const auto& tx : transactionHistory) {\n            std::cout << tx.type << \" - \" << tx.amount << \" - \" << tx.timestamp << std::endl;\n        }\n    }\n};\n\nclass Transaction {\npublic:\n    std::string type;\n    double amount;\n    std::string timestamp;\n\n    Transaction(const std::string& t, double a) : type(t), amount(a) {\n        time_t now = time(0);\n        char* dt = ctime(&now);\n        timestamp = dt;\n    }\n};\n\nint main() {\n    Customer cust1(\"Alice\", \"123 Main St\");\n    Customer cust2(\"Bob\", \"456 Oak Ave\");\n\n    Account acc1(12345, 1000.0, &cust1);\n    Account acc2(67890, 500.0, &cust2);\n\n    acc1.deposit(500.0);\n    acc1.withdraw(200.0);\n    acc1.transfer(acc2, 300.0);\n\n    acc1.printStatement();\n    acc2.printStatement();\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Customer Class:**\n   - Holds name and address of the customer.\n\n2. **Account Class:**\n   - Manages account number, balance, associated customer, and transaction history.\n   - Methods to deposit, withdraw, and transfer funds.\n   - Prints account statement including transaction history.\n\n3. **Transaction Class:**\n   - Records type of transaction, amount, and timestamp.\n\n4. **Main Function:**\n   - Creates customers and accounts.\n   - Performs deposits, withdrawals, and transfers.\n   - Prints account statements to verify transactions.\n\nThis basic banking system can be expanded with additional features like multiple account types, interest calculations, and a user interface."
    }
]