[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple HTTP server with the following features: support for GET and POST requests, ability to serve static files from a specified directory, and an endpoint for uploading files (using their MD5 hash as the filename). The server should be configurable via command line arguments for port number, IP address, and the static file directory.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a simple HTTP server in Java that supports GET and POST requests, serves static files from a specified directory, and allows file uploads using MD5 hash as filenames involves several steps. Below is a basic implementation using Java's built-in libraries.\n\n### Prerequisites\n- Java Development Kit (JDK) installed on your system.\n- Basic understanding of Java programming, HTTP protocols, and MD5 hashing.\n\n### Server Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class SimpleHttpServer {\n    private int port;\n    private String ipAddress;\n    private String staticDir;\n\n    public SimpleHttpServer(int port, String ipAddress, String staticDir) {\n        this.port = port;\n        this.ipAddress = ipAddress;\n        this.staticDir = staticDir;\n    }\n\n    public void start() throws IOException {\n        ServerSocket serverSocket = new ServerSocket(port, 0, InetAddress.getByName(ipAddress));\n        System.out.println(\"Server started on \" + ipAddress + \":\" + port);\n\n        while (true) {\n            Socket clientSocket = serverSocket.accept();\n            new ClientHandler(clientSocket).start();\n        }\n    }\n\n    private class ClientHandler extends Thread {\n        private Socket clientSocket;\n\n        public ClientHandler(Socket socket) {\n            this.clientSocket = socket;\n        }\n\n        public void run() {\n            try {\n                handleRequest();\n            } catch (IOException | NoSuchAlgorithmException e) {\n                System.err.println(\"Error handling client: \" + e.getMessage());\n            } finally {\n                try {\n                    clientSocket.close();\n                } catch (IOException e) {\n                    System.err.println(\"Error closing client socket: \" + e.getMessage());\n                }\n            }\n        }\n\n        private void handleRequest() throws IOException, NoSuchAlgorithmException {\n            InputStream input = clientSocket.getInputStream();\n            OutputStream output = clientSocket.getOutputStream();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n            String requestLine = reader.readLine();\n            if (requestLine == null) {\n                return;\n            }\n\n            String[] parts = requestLine.split(\" \");\n            if (parts.length < 3) {\n                sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"Bad Request\");\n                return;\n            }\n\n            String method = parts[0];\n            String uri = parts[1];\n            String version = parts[2];\n\n            if (!version.equalsIgnoreCase(\"HTTP/1.1\")) {\n                sendResponse(output, 505, \"HTTP Version Not Supported\", \"text/plain\", \"HTTP Version Not Supported\");\n                return;\n            }\n\n            if (method.equalsIgnoreCase(\"GET\")) {\n                handleGet(output, uri);\n            } else if (method.equalsIgnoreCase(\"POST\")) {\n                handlePost(output, input, uri);\n            } else {\n                sendResponse(output, 501, \"Not Implemented\", \"text/plain\", \"Not Implemented\");\n            }\n        }\n\n        private void handleGet(OutputStream output, String uri) throws IOException {\n            if (uri.equals(\"/\")) {\n                uri = \"/index.html\";\n            }\n\n            File file = new File(staticDir, uri.substring(1));\n            if (file.exists() && file.isFile()) {\n                sendResponse(output, 200, \"OK\", getContentType(uri), readFile(file));\n            } else {\n                sendResponse(output, 404, \"Not Found\", \"text/plain\", \"File not found\");\n            }\n        }\n\n        private void handlePost(OutputStream output, InputStream input, String uri) throws IOException, NoSuchAlgorithmException {\n            if (uri.equals(\"/upload\")) {\n                handleFileUpload(output, input);\n            } else {\n                sendResponse(output, 404, \"Not Found\", \"text/plain\", \"Endpoint not found\");\n            }\n        }\n\n        private void handleFileUpload(OutputStream output, InputStream input) throws IOException, NoSuchAlgorithmException {\n            BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n            StringBuilder requestBody = new StringBuilder();\n            String line;\n            while ((line = reader.readLine()) != null) {\n                requestBody.append(line);\n            }\n\n            String boundary = getBoundary(requestBody.toString());\n            if (boundary == null) {\n                sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"Invalid request\");\n                return;\n            }\n\n            String[] parts = requestBody.toString().split(boundary);\n            for (String part : parts) {\n                if (part.trim().isEmpty()) continue;\n                String[] lines = part.split(\"\\r\\n\");\n                if (lines.length < 3) continue;\n\n                String contentDisposition = lines[0];\n                if (contentDisposition.contains(\"filename\")) {\n                    String filename = extractFilename(contentDisposition);\n                    if (filename == null) {\n                        sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"Invalid filename\");\n                        return;\n                    }\n\n                    String fileContent = String.join(\"\\r\\n\", Arrays.copyOfRange(lines, 3, lines.length - 1));\n\n                    String md5Filename = md5(fileContent) + \".\" + getExtension(filename);\n                    File uploadedFile = new File(staticDir, md5Filename);\n                    try (PrintWriter writer = new PrintWriter(new FileOutputStream(uploadedFile))) {\n                        writer.print(fileContent);\n                    }\n\n                    sendResponse(output, 200, \"OK\", \"text/plain\", \"File uploaded successfully as \" + md5Filename);\n                    return;\n                }\n            }\n\n            sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"No file found in request\");\n        }\n\n        private String getBoundary(String requestBody) {\n            int startIndex = requestBody.indexOf(\"boundary=\");\n            if (startIndex == -1) return null;\n            int endIndex = requestBody.indexOf(\"\\r\\n\", startIndex);\n            if (endIndex == -1) return null;\n            String boundary = requestBody.substring(startIndex + 9, endIndex);\n            return \"--\" + boundary;\n        }\n\n        private String extractFilename(String contentDisposition) {\n            int startIndex = contentDisposition.indexOf(\"filename=\\\"\");\n            if (startIndex == -1) return null;\n            int endIndex = contentDisposition.indexOf(\"\\\"\", startIndex + 10);\n            if (endIndex == -1) return null;\n            return contentDisposition.substring(startIndex + 10, endIndex);\n        }\n\n        private String md5(String input) throws NoSuchAlgorithmException {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(input.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : messageDigest) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        }\n\n        private String getExtension(String filename) {\n            int dotIndex = filename.lastIndexOf('.');\n            if (dotIndex == -1) return \"\";\n            return filename.substring(dotIndex + 1);\n        }\n\n        private void sendResponse(OutputStream output, int statusCode, String statusMessage, String contentType, String body) throws IOException {\n            PrintWriter writer = new PrintWriter(output, true);\n            writer.println(\"HTTP/1.1 \" + statusCode + \" \" + statusMessage);\n            writer.println(\"Content-Type: \" + contentType);\n            writer.println(\"Content-Length: \" + body.getBytes().length);\n            writer.println(); // Blank line to indicate end of headers\n            writer.println(body);\n        }\n\n        private String getContentType(String uri) {\n            if (uri.endsWith(\".html\")) return \"text/html\";\n            if (uri.endsWith(\".css\")) return \"text/css\";\n            if (uri.endsWith(\".js\")) return \"application/javascript\";\n            if (uri.endsWith(\".jpg\") || uri.endsWith(\".jpeg\")) return \"image/jpeg\";\n            if (uri.endsWith(\".png\")) return \"image/png\";\n            if (uri.endsWith(\".gif\")) return \"image/gif\";\n            return \"application/octet-stream\";\n        }\n\n        private String readFile(File file) throws IOException {\n            StringBuilder content = new StringBuilder();\n            try (BufferedReader reader = new BufferedReader(new FileReader(file))) {\n                String line;\n                while ((line = reader.readLine()) != null) {\n                    content.append(line).append(\"\\n\");\n                }\n            }\n            return content.toString();\n        }\n    }\n\n    public static void main(String[] args) {\n        if (args.length != 3) {\n            System.out.println(\"Usage: java SimpleHttpServer <port> <ip_address> <static_dir>\");\n            return;\n        }\n\n        int port;\n        try {\n            port = Integer.parseInt(args[0]);\n        } catch (NumberFormatException e) {\n            System.out.println(\"Port must be an integer.\");\n            return;\n        }\n\n        String ipAddress = args[1];\n        String staticDir = args[2];\n\n        SimpleHttpServer server = new SimpleHttpServer(port, ipAddress, staticDir);\n        try {\n            server.start();\n        } catch (IOException e) {\n            System.err.println(\"Could not start server: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server Setup**:\n   - The server is initialized with a specified port, IP address, and directory for static files.\n   - It uses `ServerSocket` to listen for incoming connections.\n\n2. **Request Handling**:\n   - Each client connection is handled by a separate thread (`ClientHandler`).\n   - The server supports GET and POST methods.\n   - For GET requests, it serves static files from the specified directory.\n   - For POST requests to `/upload`, it handles file uploads, generating filenames based on the MD5 hash of the file content.\n\n3. **File Upload**:\n   - The uploaded file's content is read from the request body.\n   - The MD5 hash of the file content is calculated and used as the filename.\n   - The file is saved in the static directory with the generated filename.\n\n4. **Response Handling**:\n   - Appropriate HTTP responses are sent back to the client, including status codes, headers, and response bodies.\n\n### Running the Server\n\n1. **Compile the Java Code**:\n   ```sh\n   javac SimpleHttpServer.java\n   ```\n\n2. **Run the Server**:\n   ```sh\n   java SimpleHttpServer <port> <ip_address> <static_dir>\n   ```\n   - Replace `<port>`, `<ip_address>`, and `<static_dir>` with appropriate values.\n\nThis is a basic implementation and may require enhancements for production use, such as handling different types of files, improving error handling, and ensuring security measures are in place."
    }
]