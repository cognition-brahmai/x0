[
    {
        "role": "user",
        "content": "Write a Python script that monitors system resource usage (CPU, memory, disk space) and sends email notifications when any of these resources exceed a predefined threshold.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that keeps an eye on the system's resources like CPU usage, memory, and disk space. And not only that, but it should also send email alerts if any of these resources go beyond a certain limit that we set. Sounds pretty useful for system administration tasks!\n\nFirst things first, I need to figure out how to monitor these system resources. For CPU and memory usage, I've heard that the `psutil` library in Python is really good. It provides a cross-platform way to access system details and process utilities. As for disk space, `psutil` can handle that too, which is convenient because I won't have to juggle multiple libraries.\n\nSo, step one is to install `psutil`. I can do that using pip:\n\n```bash\npip install psutil\n```\n\nNext, I need to think about how to measure these resources. For CPU usage, I can get the percentage of CPU that's being used. Memory usage can be tracked by looking at the available memory or the percentage of memory used. Disk space can be monitored by checking the used space on different partitions.\n\nI should define thresholds for each of these resources. For example, if CPU usage goes above 80%, or memory usage exceeds 90%, or disk usage is over 95%, then trigger an alert.\n\nNow, for sending email notifications, I can use the `smtplib` library, which is part of Python's standard library, so no need to install anything extra for that. I'll need to set up an email account that will be used to send these alerts. It's important to handle credentials safely, maybe by using environment variables or a config file that's not version-controlled.\n\nLet me sketch out the basic structure of the script:\n\n1. Import necessary libraries: `psutil`, `smtplib`, `os` (for environment variables), maybe `datetime` to include timestamps in the emails.\n\n2. Define thresholds for CPU, memory, and disk usage.\n\n3. Write functions to check current usage for each resource.\n\n4. Write a function to send emails using SMTP, incorporating the recipient's email address and the message.\n\n5. Periodically check the resource usage and if any usage exceeds its threshold, send an email notification.\n\nI should also consider how often the script should check the resource usage. Maybe every 5 minutes or so. To achieve this, I can use a loop with `time.sleep()`.\n\nWait, but running this in an infinite loop might not be the best approach, especially if I'm planning to run this script on a server. Maybe it's better to set up a cron job on Linux or a task scheduler on Windows to run the script at regular intervals.\n\nAlternatively, I can write the script to run continuously, checking the resource usage every few minutes, which might be more straightforward for testing purposes.\n\nLet me think about the email part in more detail. The email should contain information about which resource exceeded the threshold and the current usage percentage. It might also be helpful to include a timestamp for when the alert was sent.\n\nHere's a rough idea of what the email content could look like:\n\n```\nSubject: Resource Alert - High CPU Usage\n\nMessage:\nAlert: CPU usage exceeded 80%.\nCurrent CPU usage: 85%\nTimestamp: [current date and time]\n```\n\nI should make sure that the email is formatted properly and that the subject is clear so that it can be easily identified.\n\nAlso, I should consider if multiple resources exceed their thresholds at the same time. Maybe collect all the resources that are above their thresholds and include all of them in a single email to avoid spamming the recipient with multiple emails.\n\nFor disk space, I might need to check specific mount points or disks, depending on the system configuration. `psutil` can provide disk usage information for all partitions, so I can iterate through them and check each one.\n\nSecurity is also a concern, especially with handling email credentials. Hardcoding them into the script is not a good idea. Using environment variables is a better approach. I can store the email username and password as environment variables and access them in the script using `os.environ`.\n\nLet me outline the steps in code terms:\n\n- Import required modules.\n\n- Set thresholds (e.g., CPU_THRESHOLD = 80, MEMORY_THRESHOLD = 90, DISK_THRESHOLD = 95).\n\n- Define a function to get current CPU usage using `psutil.cpu_percent()`.\n\n- Define a function to get current memory usage using `psutil.virtual_memory().percent`.\n\n- Define a function to get disk usage for all partitions using `psutil.disk_partitions()` and `psutil.disk_usage()` for each partition.\n\n- Define a function to send email using `smtplib`, which takes the recipient's email and the message body.\n\n- In the main part of the script, check each resource's usage against its threshold.\n\n- If any usage is above the threshold, collect the details and prepare the email message.\n\n- Send the email with the collected alerts.\n\nI should also consider adding some logging to the script so that I can track when checks were performed and what the usage was, which might be helpful for debugging or auditing.\n\nPerhaps use Python's `logging` module to write logs to a file.\n\nAdditionally, I might want to customize the email sender's address, recipient's address, and the SMTP server settings.\n\nTo make the script more flexible, I could allow these settings to be configured via a config file or environment variables.\n\nLet me think about error handling. What if the script can't send an email because of network issues or invalid credentials? I should handle such exceptions gracefully and perhaps log the error.\n\nAlso, what if `psutil` can't access certain system information due to permission issues? I need to handle those cases as well.\n\nI should make sure that the script doesn't crash because of exceptions but instead continues running and logs the errors.\n\nNow, let's think about testing this script. I should test it on a local machine first to ensure that it correctly reads the resource usage and sends emails.\n\nI can artificially increase CPU or memory usage to see if the alerts are triggered correctly.\n\nAlso, test with different threshold values to make sure it's responsive.\n\nI should also consider edge cases, like when the system is under very low load or when disk space is almost full.\n\nAnother thing to consider is the performance impact of the script itself. Since it's monitoring system resources, it should be lightweight and not consume too many resources itself.\n\nUsing `psutil` should be fine for this purpose, as it's optimized for performance.\n\nLet me start drafting some code snippets.\n\nFirst, importing the necessary modules:\n\n```python\nimport psutil\nimport smtplib\nfrom email.mime.text import MIMEText\nimport os\nimport logging\nfrom datetime import datetime\n```\n\nSetting up logging:\n\n```python\nlogging.basicConfig(filename='resource_monitor.log', level=logging.INFO,\n                    format='%(asctime)s - %(levelname)s - %(message)s')\n```\n\nDefining thresholds:\n\n```python\nCPU_THRESHOLD = 80\nMEMORY_THRESHOLD = 90\nDISK_THRESHOLD = 95\n```\n\nFunction to get CPU usage:\n\n```python\ndef get_cpu_usage():\n    return psutil.cpu_percent(interval=1)\n```\n\nFunction to get memory usage:\n\n```python\ndef get_memory_usage():\n    mem = psutil.virtual_memory()\n    return mem.percent\n```\n\nFunction to get disk usage:\n\n```python\ndef get_disk_usage():\n    partitions = psutil.disk_partitions()\n    disk_usage = {}\n    for partition in partitions:\n        usage = psutil.disk_usage(partition.mountpoint)\n        disk_usage[partition.mountpoint] = usage.percent\n    return disk_usage\n```\n\nFunction to send email:\n\n```python\ndef send_email(recipient, message):\n    try:\n        smtp_server = os.environ.get('SMTP_SERVER', 'smtp.example.com')\n        smtp_port = os.environ.get('SMTP_PORT', 587)\n        smtp_user = os.environ.get('SMTP_USER')\n        smtp_password = os.environ.get('SMTP_PASSWORD')\n        \n        msg = MIMEText(message)\n        msg['Subject'] = \"Resource Alert\"\n        msg['From'] = smtp_user\n        msg['To'] = recipient\n        \n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_user, smtp_password)\n            server.sendmail(smtp_user, recipient, msg.as_string())\n        \n        logging.info(\"Email sent successfully.\")\n    except Exception as e:\n        logging.error(f\"Failed to send email: {e}\")\n```\n\nMain function to check resource usage and send alerts:\n\n```python\ndef main():\n    alerts = []\n    \n    # Check CPU usage\n    cpu_usage = get_cpu_usage()\n    if cpu_usage > CPU_THRESHOLD:\n        alerts.append(f\"CPU usage exceeded {CPU_THRESHOLD}%. Current usage: {cpu_usage}%\")\n    \n    # Check memory usage\n    memory_usage = get_memory_usage()\n    if memory_usage > MEMORY_THRESHOLD:\n        alerts.append(f\"Memory usage exceeded {MEMORY_THRESHOLD}%. Current usage: {memory_usage}%\")\n    \n    # Check disk usage\n    disk_usage = get_disk_usage()\n    for mountpoint, usage in disk_usage.items():\n        if usage > DISK_THRESHOLD:\n            alerts.append(f\"Disk usage on {mountpoint} exceeded {DISK_THRESHOLD}%. Current usage: {usage}%\")\n    \n    if alerts:\n        recipient = os.environ.get('ALERT_RECIPIENT')\n        if recipient:\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            alert_message = f\"Alert triggered at {timestamp}:\\n\\n\" + \"\\n\".join(alerts)\n            send_email(recipient, alert_message)\n        else:\n            logging.error(\"Alert recipient not configured.\")\n    else:\n        logging.info(\"All resource usage is within thresholds.\")\n```\n\nTo run this script periodically, I can either use a while loop with sleep, or set up a cron job.\n\nFor testing purposes, running it in a loop might be okay, but for production, cron jobs are more reliable and efficient.\n\nHere's how I might set up a loop for testing:\n\n```python\nif __name__ == \"__main__\":\n    while True:\n        main()\n        time.sleep(300)  # Check every 5 minutes\n```\n\nBut for production, I'd recommend setting up a cron job to run the script every 5 minutes.\n\nTo set up a cron job, I can use the crontab:\n\n```bash\n*/5 * * * * /usr/bin/python3 /path/to/script.py >> /path/to/output.log 2>&1\n```\n\nThis will run the script every 5 minutes, appending output and errors to a log file.\n\nI should also make sure that the script has the necessary permissions to run, and that the environment variables are set correctly.\n\nIn terms of security, using environment variables for credentials is better than hardcoding them, but I should ensure that the environment variables are set securely and not exposed in any scripts or version control.\n\nAlternatively, I could use a configuration file that's not checked into version control, but I have to be careful to ignore it in version control.\n\nIn Python, I can read config files using the `configparser` module or JSON config files.\n\nBut for simplicity, environment variables should suffice.\n\nLet me think about how to set up environment variables.\n\nOn Linux, I can set them in the shell before running the script:\n\n```bash\nexport SMTP_SERVER=smtp.example.com\nexport SMTP_PORT=587\nexport SMTP_USER=user@example.com\nexport SMTP_PASSWORD=secret-password\nexport ALERT_RECIPIENT=admin@example.com\n```\n\nOn Windows, it's similar but using the set command.\n\nI should also consider using more secure methods for handling credentials, like using a vault or secret management tool, but that might be overkill for this script.\n\nAlright, I think I've covered the main aspects of the script.\n\nI should test it thoroughly to make sure it works as expected.\n\nSome test cases to consider:\n\n- All resources within thresholds: should log that all is well.\n\n- CPU usage above threshold: should send an email alert for high CPU usage.\n\n- Memory usage above threshold: should send an email alert for high memory usage.\n\n- Disk usage above threshold on one or more partitions: should include all such alerts in a single email.\n\n- Multiple resources above threshold: should include all relevant alerts in one email.\n\n- Network issues preventing email sending: should log the error without crashing.\n\n- Invalid credentials: should log the error.\n\n- Permission issues with psutil: unlikely, but log any errors encountered.\n\nI should also make sure that the script doesn't send multiple alerts for the same condition repeatedly. Maybe implement some logic to suppress alerts if an alert has already been sent for a particular resource within a certain time frame.\n\nBut that might be adding unnecessary complexity for now. I can consider it for future enhancements.\n\nOverall, this script should serve as a basic but effective resource monitor and alert system.\n\n## Final Solution\nTo create a Python script that monitors system resource usage (CPU, memory, disk space) and sends email notifications when any of these resources exceed a predefined threshold, follow the steps below.\n\n### Solution Code\n\n```python\nimport psutil\nimport smtplib\nfrom email.mime.text import MIMEText\nimport os\nimport logging\nfrom datetime import datetime\nimport time\n\n# Set up logging\nlogging.basicConfig(filename='resource_monitor.log', level=logging.INFO,\n                    format='%(asctime)s - %(levelname)s - %(message)s')\n\n# Define thresholds\nCPU_THRESHOLD = 80\nMEMORY_THRESHOLD = 90\nDISK_THRESHOLD = 95\n\ndef get_cpu_usage():\n    return psutil.cpu_percent(interval=1)\n\ndef get_memory_usage():\n    mem = psutil.virtual_memory()\n    return mem.percent\n\ndef get_disk_usage():\n    partitions = psutil.disk_partitions()\n    disk_usage = {}\n    for partition in partitions:\n        usage = psutil.disk_usage(partition.mountpoint)\n        disk_usage[partition.mountpoint] = usage.percent\n    return disk_usage\n\ndef send_email(recipient, message):\n    try:\n        smtp_server = os.environ.get('SMTP_SERVER', 'smtp.example.com')\n        smtp_port = int(os.environ.get('SMTP_PORT', 587))\n        smtp_user = os.environ.get('SMTP_USER')\n        smtp_password = os.environ.get('SMTP_PASSWORD')\n        \n        msg = MIMEText(message)\n        msg['Subject'] = \"Resource Alert\"\n        msg['From'] = smtp_user\n        msg['To'] = recipient\n        \n        with smtplib.SMTP(smtp_server, smtp_port) as server:\n            server.starttls()\n            server.login(smtp_user, smtp_password)\n            server.sendmail(smtp_user, recipient, msg.as_string())\n        \n        logging.info(\"Email sent successfully.\")\n    except Exception as e:\n        logging.error(f\"Failed to send email: {e}\")\n\ndef main():\n    alerts = []\n    \n    # Check CPU usage\n    cpu_usage = get_cpu_usage()\n    if cpu_usage > CPU_THRESHOLD:\n        alerts.append(f\"CPU usage exceeded {CPU_THRESHOLD}%. Current usage: {cpu_usage}%\")\n    \n    # Check memory usage\n    memory_usage = get_memory_usage()\n    if memory_usage > MEMORY_THRESHOLD:\n        alerts.append(f\"Memory usage exceeded {MEMORY_THRESHOLD}%. Current usage: {memory_usage}%\")\n    \n    # Check disk usage\n    disk_usage = get_disk_usage()\n    for mountpoint, usage in disk_usage.items():\n        if usage > DISK_THRESHOLD:\n            alerts.append(f\"Disk usage on {mountpoint} exceeded {DISK_THRESHOLD}%. Current usage: {usage}%\")\n    \n    if alerts:\n        recipient = os.environ.get('ALERT_RECIPIENT')\n        if recipient:\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            alert_message = f\"Alert triggered at {timestamp}:\\n\\n\" + \"\\n\".join(alerts)\n            send_email(recipient, alert_message)\n        else:\n            logging.error(\"Alert recipient not configured.\")\n    else:\n        logging.info(\"All resource usage is within thresholds.\")\n\nif __name__ == \"__main__\":\n    while True:\n        main()\n        time.sleep(300)  # Check every 5 minutes\n```\n\n### Explanation\n\n1. **Monitoring System Resources**:\n   - **CPU Usage**: Measured using `psutil.cpu_percent(interval=1)`.\n   - **Memory Usage**: Measured using `psutil.virtual_memory().percent`.\n   - **Disk Usage**: Measured for all partitions using `psutil.disk_partitions()` and `psutil.disk_usage()`.\n\n2. **Email Notifications**:\n   - Email alerts are sent using SMTP through the `smtplib` library.\n   - Credentials and server configurations are retrieved from environment variables for security.\n\n3. **Thresholds**:\n   - Predefined thresholds for CPU, memory, and disk usage. Alerts are triggered if usage exceeds these thresholds.\n\n4. **Logging**:\n   - Systematic logging is implemented to track resource usage checks and any errors encountered.\n\n5. **Periodic Checks**:\n   - The script runs in an infinite loop, checking resource usage every 5 minutes using `time.sleep(300)`.\n\n6. **Configuration**:\n   - Environment variables are used for configuration, including SMTP server details, user credentials, and alert recipient email.\n\nThis script provides a robust way to monitor critical system resources and notifies administrators via email when usage exceeds safe thresholds, ensuring proactive management of system health."
    }
]