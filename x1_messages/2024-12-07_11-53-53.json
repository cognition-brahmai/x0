[
    {
        "role": "user",
        "content": "Develop a Node.js script that connects to an Elasticsearch instance, creates an index, inserts sample documents, and performs a basic text search on the inserted documents. The script should accept command line arguments for the Elasticsearch URL and index name.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Node.js script that interacts with Elasticsearch. I need to make sure it connects to an Elasticsearch instance, creates an index, inserts some sample documents, and then performs a basic text search on those documents. Also, it should take command line arguments for the Elasticsearch URL and the index name.\n\nFirst things first, I need to set up a new Node.js project. I should create a directory for this project and initialize it with npm.\n\n```bash\nmkdir elasticsearch-node-script\ncd elasticsearch-node-script\nnpm init -y\n```\n\nNext, I need to install the Elasticsearch client for Node.js. The official Elasticsearch JavaScript client should do the job.\n\n```bash\nnpm install @elastic/elasticsearch\n```\n\nNow, I need to create a script that accepts command line arguments for the Elasticsearch URL and the index name. In Node.js, I can use the `minimist` package to parse command line arguments easily.\n\n```bash\nnpm install minimist\n```\n\nLet's start by writing a script that reads these arguments.\n\n```javascript\nconst minimist = require('minimist');\n\nconst args = minimist(process.argv.slice(2));\nconst esUrl = args.url;\nconst indexName = args.index;\n\nif (!esUrl || !indexName) {\n  console.log('Usage: node script.js --url=http://localhost:9200 --index=sample_index');\n  process.exit(1);\n}\n```\n\nI need to connect to the Elasticsearch instance using the provided URL.\n\n```javascript\nconst { Client } = require('@elastic/elasticsearch');\n\nconst client = new Client({ node: esUrl });\n\nasync function checkConnection() {\n  try {\n    await client.ping();\n    console.log('Connected to Elasticsearch');\n  } catch (error) {\n    console.error('Error connecting to Elasticsearch:', error);\n    process.exit(1);\n  }\n}\n\ncheckConnection();\n```\n\nNow, I need to create an index with the specified name. I should check if the index already exists and create it if it doesn't.\n\n```javascript\nasync function createIndex() {\n  try {\n    const exists = await client.indices.exists({ index: indexName });\n    if (!exists.body) {\n      await client.indices.create({ index: indexName });\n      console.log(`Index ${indexName} created`);\n    } else {\n      console.log(`Index ${indexName} already exists`);\n    }\n  } catch (error) {\n    console.error('Error creating index:', error);\n    process.exit(1);\n  }\n}\n\ncreateIndex();\n```\n\nNext, I need to insert some sample documents into this index. Let's define a few sample documents.\n\n```javascript\nconst sampleDocuments = [\n  { title: 'First Document', content: 'This is the first sample document.' },\n  { title: 'Second Document', content: 'This is the second sample document.' },\n  { title: 'Third Document', content: 'This is the third sample document.' },\n];\n```\n\nI'll use the bulk API to insert these documents efficiently.\n\n```javascript\nasync function insertDocuments() {\n  try {\n    const body = sampleDocuments.flatMap(doc => [\n      { index: { _index: indexName } },\n      doc,\n    ]);\n\n    const { body: bulkResponse } = await client.bulk({ refresh: true, body });\n\n    if (bulkResponse.errors) {\n      console.error('Some errors occurred during bulk indexing:', bulkResponse);\n    } else {\n      console.log('All documents indexed successfully');\n    }\n  } catch (error) {\n    console.error('Error inserting documents:', error);\n    process.exit(1);\n  }\n}\n\ninsertDocuments();\n```\n\nAfter inserting the documents, I need to perform a basic text search. Let's assume I want to search for the term 'sample' in the 'content' field.\n\n```javascript\nasync function performSearch() {\n  try {\n    const { body } = await client.search({\n      index: indexName,\n      body: {\n        query: {\n          match: {\n            content: 'sample',\n          },\n        },\n      },\n    });\n\n    console.log('Search results:', body.hits.hits);\n  } catch (error) {\n    console.error('Error performing search:', error);\n    process.exit(1);\n  }\n}\n\nperformSearch();\n```\n\nFinally, I need to make sure that all these asynchronous operations are executed in sequence. I can wrap them in an async function and call it.\n\n```javascript\nasync function run() {\n  await checkConnection();\n  await createIndex();\n  await insertDocuments();\n  await performSearch();\n}\n\nrun();\n```\n\nPutting it all together, here's the complete script:\n\n```javascript\nconst minimist = require('minimist');\nconst { Client } = require('@elastic/elasticsearch');\n\nconst args = minimist(process.argv.slice(2));\nconst esUrl = args.url;\nconst indexName = args.index;\n\nif (!esUrl || !indexName) {\n  console.log('Usage: node script.js --url=http://localhost:9200 --index=sample_index');\n  process.exit(1);\n}\n\nconst client = new Client({ node: esUrl });\n\nasync function checkConnection() {\n  try {\n    await client.ping();\n    console.log('Connected to Elasticsearch');\n  } catch (error) {\n    console.error('Error connecting to Elasticsearch:', error);\n    process.exit(1);\n  }\n}\n\nasync function createIndex() {\n  try {\n    const exists = await client.indices.exists({ index: indexName });\n    if (!exists.body) {\n      await client.indices.create({ index: indexName });\n      console.log(`Index ${indexName} created`);\n    } else {\n      console.log(`Index ${indexName} already exists`);\n    }\n  } catch (error) {\n    console.error('Error creating index:', error);\n    process.exit(1);\n  }\n}\n\nconst sampleDocuments = [\n  { title: 'First Document', content: 'This is the first sample document.' },\n  { title: 'Second Document', content: 'This is the second sample document.' },\n  { title: 'Third Document', content: 'This is the third sample document.' },\n];\n\nasync function insertDocuments() {\n  try {\n    const body = sampleDocuments.flatMap(doc => [\n      { index: { _index: indexName } },\n      doc,\n    ]);\n\n    const { body: bulkResponse } = await client.bulk({ refresh: true, body });\n\n    if (bulkResponse.errors) {\n      console.error('Some errors occurred during bulk indexing:', bulkResponse);\n    } else {\n      console.log('All documents indexed successfully');\n    }\n  } catch (error) {\n    console.error('Error inserting documents:', error);\n    process.exit(1);\n  }\n}\n\nasync function performSearch() {\n  try {\n    const { body } = await client.search({\n      index: indexName,\n      body: {\n        query: {\n          match: {\n            content: 'sample',\n          },\n        },\n      },\n    });\n\n    console.log('Search results:', body.hits.hits);\n  } catch (error) {\n    console.error('Error performing search:', error);\n    process.exit(1);\n  }\n}\n\nasync function run() {\n  await checkConnection();\n  await createIndex();\n  await insertDocuments();\n  await performSearch();\n}\n\nrun();\n```\n\nTo run this script, I need to make sure that Elasticsearch is running and accessible at the provided URL. Then, I can execute the script with the required command line arguments.\n\n```bash\nnode script.js --url=http://localhost:9200 --index=sample_index\n```\n\nThis should connect to Elasticsearch, create the index if it doesn't exist, insert the sample documents, and perform a search for the term 'sample' in the 'content' field, printing the results to the console.\n\n## Final Solution\nTo achieve the task of interacting with an Elasticsearch instance using a Node.js script, follow these steps to set up and run the script.\n\n### Prerequisites\n- Ensure you have Node.js installed.\n- Have an Elasticsearch instance running and accessible at the specified URL.\n\n### Solution Code\n\n```javascript\nconst minimist = require('minimist');\nconst { Client } = require('@elastic/elasticsearch');\n\nconst args = minimist(process.argv.slice(2));\nconst esUrl = args.url;\nconst indexName = args.index;\n\nif (!esUrl || !indexName) {\n  console.log('Usage: node script.js --url=http://localhost:9200 --index=sample_index');\n  process.exit(1);\n}\n\nconst client = new Client({ node: esUrl });\n\nasync function checkConnection() {\n  try {\n    await client.ping();\n    console.log('Connected to Elasticsearch');\n  } catch (error) {\n    console.error('Error connecting to Elasticsearch:', error);\n    process.exit(1);\n  }\n}\n\nasync function createIndex() {\n  try {\n    const exists = await client.indices.exists({ index: indexName });\n    if (!exists.body) {\n      await client.indices.create({ index: indexName });\n      console.log(`Index ${indexName} created`);\n    } else {\n      console.log(`Index ${indexName} already exists`);\n    }\n  } catch (error) {\n    console.error('Error creating index:', error);\n    process.exit(1);\n  }\n}\n\nconst sampleDocuments = [\n  { title: 'First Document', content: 'This is the first sample document.' },\n  { title: 'Second Document', content: 'This is the second sample document.' },\n  { title: 'Third Document', content: 'This is the third sample document.' },\n];\n\nasync function insertDocuments() {\n  try {\n    const body = sampleDocuments.flatMap(doc => [\n      { index: { _index: indexName } },\n      doc,\n    ]);\n\n    const { body: bulkResponse } = await client.bulk({ refresh: true, body });\n\n    if (bulkResponse.errors) {\n      console.error('Some errors occurred during bulk indexing:', bulkResponse);\n    } else {\n      console.log('All documents indexed successfully');\n    }\n  } catch (error) {\n    console.error('Error inserting documents:', error);\n    process.exit(1);\n  }\n}\n\nasync function performSearch() {\n  try {\n    const { body } = await client.search({\n      index: indexName,\n      body: {\n        query: {\n          match: {\n            content: 'sample',\n          },\n        },\n      },\n    });\n\n    console.log('Search results:', body.hits.hits);\n  } catch (error) {\n    console.error('Error performing search:', error);\n    process.exit(1);\n  }\n}\n\nasync function run() {\n  await checkConnection();\n  await createIndex();\n  await insertDocuments();\n  await performSearch();\n}\n\nrun();\n```\n\n### Instructions\n\n1. **Set up the project directory and initialize it:**\n   ```bash\n   mkdir elasticsearch-node-script\n   cd elasticsearch-node-script\n   npm init -y\n   ```\n\n2. **Install required dependencies:**\n   ```bash\n   npm install @elastic/elasticsearch minimist\n   ```\n\n3. **Create the script file (e.g., `script.js`):**\n   Copy the provided solution code into `script.js`.\n\n4. **Run the script:**\n   Ensure your Elasticsearch instance is running and accessible. Then execute the script with the necessary arguments:\n   ```bash\n   node script.js --url=http://localhost:9200 --index=sample_index\n   ```\n\nThis script will connect to the specified Elasticsearch instance, create the indicated index if it doesn't exist, insert sample documents, and perform a basic text search for the term 'sample' within the 'content' field of the documents. The results will be printed to the console."
    }
]