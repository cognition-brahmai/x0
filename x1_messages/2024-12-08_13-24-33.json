[
    {
        "role": "user",
        "content": "Develop a Python program that implements a simple client-server chat application using sockets. The server should support multiple clients, broadcasting messages received from one client to all other connected clients.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple client-server chat application using Python's socket library. This application will allow multiple clients to connect to a central server, and any message sent by one client will be broadcasted to all other connected clients.\n\n### Server Side\n\nFirst, let's tackle the server side. The server needs to handle multiple clients simultaneously, so we'll use threading to manage each client in a separate thread.\n\n#### Server Code\n\n```python\nimport socket\nimport threading\n\n# Server configuration\nHOST = '127.0.0.1'  # Server's IP address\nPORT = 12345        # Port to listen on\n\n# List to keep track of connected clients\nclients = []\n\ndef handle_client(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if message:\n                print(f\"Received: {message}\")\n                # Broadcast the message to all clients except the sender\n                for client in clients:\n                    if client != client_socket:\n                        client.send(message.encode('utf-8'))\n        except:\n            # Remove the client from the list if an error occurs\n            clients.remove(client_socket)\n            client_socket.close()\n            break\n\ndef main():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind((HOST, PORT))\n    server.listen(5)\n    print(f\"Server listening on {HOST}:{PORT}\")\n    \n    while True:\n        client_socket, addr = server.accept()\n        print(f\"Connected by {addr}\")\n        clients.append(client_socket)\n        # Start a new thread to handle the client\n        client_handler = threading.Thread(target=handle_client, args=(client_socket,))\n        client_handler.start()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Client Side\n\nNow, let's create the client side. Each client will connect to the server and can send messages which will be broadcasted to other clients.\n\n#### Client Code\n\n```python\nimport socket\nimport threading\n\n# Server configuration\nHOST = '127.0.0.1'  # Server's IP address\nPORT = 12345        # Server's port\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if message:\n                print(message)\n        except:\n            print(\"Connection lost\")\n            client_socket.close()\n            break\n\ndef main():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect((HOST, PORT))\n    print(f\"Connected to {HOST}:{PORT}\")\n    \n    # Start a new thread to handle incoming messages\n    receive_thread = threading.Thread(target=receive_messages, args=(client_socket,))\n    receive_thread.start()\n    \n    while True:\n        message = input()\n        if message.lower() == 'exit':\n            break\n        client_socket.send(message.encode('utf-8'))\n    \n    client_socket.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Server Side:**\n   - The server listens on a specified host and port.\n   - When a client connects, it's added to the `clients` list and a new thread is started to handle that client.\n   - Each client-handling thread listens for messages from its client and broadcasts any received message to all other clients.\n\n2. **Client Side:**\n   - The client connects to the server.\n   - A separate thread is started to handle incoming messages from the server.\n   - The main thread allows the user to input messages, which are then sent to the server.\n\nThis setup ensures that multiple clients can connect to the server and communicate with each other by broadcasting messages."
    }
]