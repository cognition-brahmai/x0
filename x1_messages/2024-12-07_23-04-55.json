[
    {
        "role": "user",
        "content": "Utilizing C#, create a console application that mimics a simple banking system. It should allow creation of accounts, processing deposits/withdrawals, and transferring money between accounts. Ensure there is proper exception handling for scenarios like overdrafts."
    },
    {
        "role": "assistant",
        "content": "I'd be happy to help you with that! Building a simple banking system in C# is a great way to practice object-oriented programming and understand basic banking operations. We'll create a console application that allows users to create accounts, deposit and withdraw funds, and transfer money between accounts. We'll also implement exception handling to manage scenarios like overdrafts.\n\n### Step 1: Planning the System\n\nFirst, let's plan out the components of our banking system.\n\n1. **Account Class**: This will represent a bank account and will have properties like account number, account holder name, and balance.\n2. **Bank Class**: This will manage multiple accounts, handle operations like creating new accounts, depositing, withdrawing, and transferring funds.\n3. **Exception Handling**: We'll create custom exceptions for scenarios like insufficient funds.\n\n### Step 2: Implementing the Account Class\n\nWe'll start by creating the `Account` class.\n\n```csharp\npublic class Account\n{\n    public int AccountNumber { get; private set; }\n    public string AccountHolderName { get; set; }\n    public decimal Balance { get; private set; }\n\n    public Account(int accountNumber, string accountHolderName)\n    {\n        AccountNumber = accountNumber;\n        AccountHolderName = accountHolderName;\n        Balance = 0;\n    }\n\n    public void Deposit(decimal amount)\n    {\n        if (amount < 0)\n        {\n            throw new ArgumentException(\"Deposit amount cannot be negative.\");\n        }\n        Balance += amount;\n    }\n\n    public void Withdraw(decimal amount)\n    {\n        if (amount < 0)\n        {\n            throw new ArgumentException(\"Withdrawal amount cannot be negative.\");\n        }\n        if (Balance < amount)\n        {\n            throw new InsufficientFundsException(\"Insufficient funds for withdrawal.\");\n        }\n        Balance -= amount;\n    }\n}\n```\n\n### Step 3: Implementing the Bank Class\n\nNext, we'll create the `Bank` class to manage multiple accounts.\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\npublic class Bank\n{\n    private Dictionary<int, Account> accounts = new Dictionary<int, Account>();\n    private int nextAccountNumber = 1;\n\n    public void CreateAccount(string accountHolderName)\n    {\n        int accountNumber = nextAccountNumber++;\n        Account newAccount = new Account(accountNumber, accountHolderName);\n        accounts.Add(accountNumber, newAccount);\n        Console.WriteLine($\"Account created successfully. Your account number is: {accountNumber}\");\n    }\n\n    public void Deposit(int accountNumber, decimal amount)\n    {\n        if (accounts.TryGetValue(accountNumber, out Account account))\n        {\n            account.Deposit(amount);\n            Console.WriteLine($\"Deposited {amount} into account {accountNumber}. New balance: {account.Balance}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Account not found.\");\n        }\n    }\n\n    public void Withdraw(int accountNumber, decimal amount)\n    {\n        if (accounts.TryGetValue(accountNumber, out Account account))\n        {\n            try\n            {\n                account.Withdraw(amount);\n                Console.WriteLine($\"Withdrew {amount} from account {accountNumber}. New balance: {account.Balance}\");\n            }\n            catch (InsufficientFundsException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Account not found.\");\n        }\n    }\n\n    public void Transfer(int fromAccountNumber, int toAccountNumber, decimal amount)\n    {\n        if (accounts.TryGetValue(fromAccountNumber, out Account fromAccount) &&\n            accounts.TryGetValue(toAccountNumber, out Account toAccount))\n        {\n            try\n            {\n                fromAccount.Withdraw(amount);\n                toAccount.Deposit(amount);\n                Console.WriteLine($\"Transferred {amount} from account {fromAccountNumber} to account {toAccountNumber}.\");\n            }\n            catch (InsufficientFundsException ex)\n            {\n                Console.WriteLine(ex.Message);\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"One or both accounts not found.\");\n        }\n    }\n\n    public void CheckBalance(int accountNumber)\n    {\n        if (accounts.TryGetValue(accountNumber, out Account account))\n        {\n            Console.WriteLine($\"Account {accountNumber} balance: {account.Balance}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Account not found.\");\n        }\n    }\n}\n```\n\n### Step 4: Creating Custom Exceptions\n\nWe'll create a custom exception for insufficient funds.\n\n```csharp\npublic class InsufficientFundsException : Exception\n{\n    public InsufficientFundsException(string message) : base(message)\n    {\n    }\n}\n```\n\n### Step 5: Implementing the Console Application\n\nNow, let's create the console application to interact with the bank system.\n\n```csharp\nusing System;\n\npublic class Program\n{\n    public static void Main(string[] args)\n    {\n        Bank bank = new Bank();\n        while (true)\n        {\n            Console.WriteLine(\"\\nOptions:\");\n            Console.WriteLine(\"1. Create Account\");\n            Console.WriteLine(\"2. Deposit\");\n            Console.WriteLine(\"3. Withdraw\");\n            Console.WriteLine(\"4. Transfer\");\n            Console.WriteLine(\"5. Check Balance\");\n            Console.WriteLine(\"6. Exit\");\n            Console.Write(\"Choose an option: \");\n            string choice = Console.ReadLine();\n\n            switch (choice)\n            {\n                case \"1\":\n                    Console.Write(\"Enter account holder name: \");\n                    string name = Console.ReadLine();\n                    bank.CreateAccount(name);\n                    break;\n                case \"2\":\n                    Console.Write(\"Enter account number: \");\n                    if (int.TryParse(Console.ReadLine(), out int accountNumber))\n                    {\n                        Console.Write(\"Enter deposit amount: \");\n                        if (decimal.TryParse(Console.ReadLine(), out decimal amount))\n                        {\n                            bank.Deposit(accountNumber, amount);\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"Invalid amount.\");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid account number.\");\n                    }\n                    break;\n                case \"3\":\n                    Console.Write(\"Enter account number: \");\n                    if (int.TryParse(Console.ReadLine(), out accountNumber))\n                    {\n                        Console.Write(\"Enter withdrawal amount: \");\n                        if (decimal.TryParse(Console.ReadLine(), out decimal amount))\n                        {\n                            bank.Withdraw(accountNumber, amount);\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"Invalid amount.\");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid account number.\");\n                    }\n                    break;\n                case \"4\":\n                    Console.Write(\"Enter from account number: \");\n                    if (int.TryParse(Console.ReadLine(), out int fromAccountNumber))\n                    {\n                        Console.Write(\"Enter to account number: \");\n                        if (int.TryParse(Console.ReadLine(), out int toAccountNumber))\n                        {\n                            Console.Write(\"Enter transfer amount: \");\n                            if (decimal.TryParse(Console.ReadLine(), out decimal amount))\n                            {\n                                bank.Transfer(fromAccountNumber, toAccountNumber, amount);\n                            }\n                            else\n                            {\n                                Console.WriteLine(\"Invalid amount.\");\n                            }\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"Invalid to account number.\");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid from account number.\");\n                    }\n                    break;\n                case \"5\":\n                    Console.Write(\"Enter account number: \");\n                    if (int.TryParse(Console.ReadLine(), out accountNumber))\n                    {\n                        bank.CheckBalance(accountNumber);\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid account number.\");\n                    }\n                    break;\n                case \"6\":\n                    Environment.Exit(0);\n                    break;\n                default:\n                    Console.WriteLine(\"Invalid option. Please choose again.\");\n                    break;\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Account Class**: Represents a bank account with methods to deposit and withdraw funds. It includes basic validation for negative amounts and insufficient funds.\n2. **Bank Class**: Manages multiple accounts using a dictionary. It provides methods to create accounts, deposit, withdraw, transfer funds, and check balances. It handles cases where accounts are not found.\n3. **Custom Exception**: `InsufficientFundsException` is used to handle scenarios where a withdrawal or transfer cannot be completed due to insufficient funds.\n4. **Console Application**: Provides a menu-driven interface for users to interact with the banking system. It handles user inputs and displays appropriate messages.\n\nThis simple banking system demonstrates fundamental concepts of object-oriented programming, exception handling, and basic console interaction in C#. You can expand upon this by adding more features like interest calculation, different types of accounts, or a more user-friendly interface."
    }
]