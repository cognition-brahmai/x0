[
    {
        "role": "user",
        "content": "Write a C++ program to implement a singly linked list data structure with functions for insertion, deletion, and traversal."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a singly linked list in C++. This program includes functions for inserting elements at the beginning, end, and a specific position, deleting elements by value, and traversing the list to display its elements.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Definition for a node in the linked list\nstruct Node {\n    int data;\n    Node* next;\n    Node(int val) : data(val), next(nullptr) {}\n};\n\n// Singly Linked List class\nclass LinkedList {\npublic:\n    LinkedList() : head(nullptr) {}\n\n    // Insert a new node at the beginning\n    void insertAtBeginning(int value) {\n        Node* newNode = new Node(value);\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Insert a new node at the end\n    void insertAtEnd(int value) {\n        Node* newNode = new Node(value);\n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n        Node* temp = head;\n        while (temp->next != nullptr) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n\n    // Insert a new node after a specific position\n    void insertAfterPosition(int position, int value) {\n        if (position < 0) {\n            cout << \"Position should be zero or positive.\" << endl;\n            return;\n        }\n        Node* newNode = new Node(value);\n        if (position == 0) {\n            newNode->next = head;\n            head = newNode;\n            return;\n        }\n        Node* temp = head;\n        for (int i = 0; temp != nullptr && i < position - 1; ++i) {\n            temp = temp->next;\n        }\n        if (temp == nullptr) {\n            cout << \"Position out of range.\" << endl;\n            delete newNode;\n            return;\n        }\n        newNode->next = temp->next;\n        temp->next = newNode;\n    }\n\n    // Delete a node by value\n    void deleteByValue(int value) {\n        if (head == nullptr) {\n            cout << \"List is empty.\" << endl;\n            return;\n        }\n        if (head->data == value) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n        Node* temp = head;\n        while (temp->next != nullptr && temp->next->data != value) {\n            temp = temp->next;\n        }\n        if (temp->next == nullptr) {\n            cout << \"Value not found in the list.\" << endl;\n            return;\n        }\n        Node* toDelete = temp->next;\n        temp->next = temp->next->next;\n        delete toDelete;\n    }\n\n    // Traverse and print the list\n    void traverse() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            cout << temp->data << \" -> \";\n            temp = temp->next;\n        }\n        cout << \"NULL\" << endl;\n    }\n\nprivate:\n    Node* head;\n};\n\nint main() {\n    LinkedList list;\n\n    list.insertAtEnd(1);\n    list.insertAtEnd(2);\n    list.insertAtEnd(3);\n    list.traverse();  // Output: 1 -> 2 -> 3 -> NULL\n\n    list.insertAtBeginning(0);\n    list.traverse();  // Output: 0 -> 1 -> 2 -> 3 -> NULL\n\n    list.insertAfterPosition(2, 10);\n    list.traverse();  // Output: 0 -> 1 -> 10 -> 2 -> 3 -> NULL\n\n    list.deleteByValue(10);\n    list.traverse();  // Output: 0 -> 1 -> 2 -> 3 -> NULL\n\n    list.deleteByValue(5);\n    // Output: Value not found in the list.\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Node Structure**: Each node contains an integer value and a pointer to the next node.\n2. **LinkedList Class**: Manages the operations on the linked list.\n   - **insertAtBeginning(int value)**: Adds a new node with the given value at the start of the list.\n   - **insertAtEnd(int value)**: Adds a new node with the given value at the end of the list.\n   - **insertAfterPosition(int position, int value)**: Inserts a new node with the given value after the specified position.\n   - **deleteByValue(int value)**: Removes the first node that matches the given value.\n   - **traverse()**: Prints all elements of the list from start to end.\n3. **Main Function**: Demonstrates the usage of the LinkedList class by performing insertions, deletions, and traversals.\n\nThis code provides a basic framework for working with singly linked lists in C++. You can extend it further based on your requirements."
    }
]