[
    {
        "role": "user",
        "content": "Write a Golang function that performs the merge sort algorithm on an array of integers. The function should take an integer array as input and return the sorted array.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge function is used for merging two halves. The merge(arr, l, m, r) is a key process that assumes that arr[l..m] and arr[m+1..r] are sorted and merges the two sorted sub-arrays into one.\n\nHere's how you can implement merge sort in Golang:\n\n```go\npackage main\n\nimport \"fmt\"\n\n// mergeSort function to sort the array\nfunc mergeSort(arr []int) []int {\n    if len(arr) <= 1 {\n        return arr\n    }\n\n    // Find the middle point\n    mid := len(arr) / 2\n\n    // Dividing the array elements into 2 halves\n    left := mergeSort(arr[:mid])\n    right := mergeSort(arr[mid:])\n\n    // Merge the two halves sorted\n    return merge(left, right)\n}\n\n// merge function to merge two halves\nfunc merge(left, right []int) []int {\n    result := make([]int, 0, len(left)+len(right))\n    i, j := 0, 0\n\n    // Merge the two arrays into result[]\n    for i < len(left) && j < len(right) {\n        if left[i] <= right[j] {\n            result = append(result, left[i])\n            i++\n        } else {\n            result = append(result, right[j])\n            j++\n        }\n    }\n\n    // Copy the remaining elements of left[], if there are any\n    for i < len(left) {\n        result = append(result, left[i])\n        i++\n    }\n\n    // Copy the remaining elements of right[], if there are any\n    for j < len(right) {\n        result = append(result, right[j])\n        j++\n    }\n\n    return result\n}\n\nfunc main() {\n    arr := []int{12, 11, 13, 5, 6, 7}\n    fmt.Println(\"Given array is\")\n    fmt.Println(arr)\n    fmt.Println(\"\\nSorted array is\")\n    sortedArr := mergeSort(arr)\n    fmt.Println(sortedArr)\n}\n```\n\n### Explanation:\n\n1. **mergeSort Function**:\n   - If the array has only one element, it is already sorted.\n   - Otherwise, find the middle point and divide the array into two halves.\n   - Recursively sort the two halves.\n   - Merge the two sorted halves.\n\n2. **merge Function**:\n   - Create a result slice to store the merged result.\n   - Use two indices to traverse the left and right slices.\n   - Compare elements from both slices and append the smaller one to the result slice.\n   - If there are remaining elements in either left or right slice, append them to the result slice.\n\n3. **main Function**:\n   - Define an array.\n   - Print the original array.\n   - Sort the array using mergeSort.\n   - Print the sorted array.\n\nThis implementation ensures that the array is sorted in ascending order using the merge sort algorithm."
    }
]