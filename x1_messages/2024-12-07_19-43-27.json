[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to insert, delete, and search for elements."
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Python class for a doubly linked list with methods to insert, delete, and search for elements:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n            new_node.prev = current\n\n    def delete(self, data):\n        if self.head is None:\n            return\n        current = self.head\n        if current.data == data:\n            if current.next:\n                self.head = current.next\n                self.head.prev = None\n            else:\n                self.head = None\n            return\n        while current.next:\n            if current.data == data:\n                if current.next:\n                    current.prev.next = current.next\n                    current.next.prev = current.prev\n                else:\n                    current.prev.next = None\n                return\n            current = current.next\n        if current.data == data:\n            current.prev.next = None\n\n    def search(self, data):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(current.data)\n            current = current.next\n        print(elements)\n```\n\nYou can use this class to create a doubly linked list and perform operations like inserting elements at the beginning or end, deleting elements, searching for elements, and displaying the list.\n\nExample usage:\n\n```python\ndll = DoublyLinkedList()\ndll.insert_at_beginning(3)\ndll.insert_at_beginning(2)\ndll.insert_at_end(4)\ndll.insert_at_end(5)\ndll.display()  # Output: [2, 3, 4, 5]\n\ndll.delete(3)\ndll.display()  # Output: [2, 4, 5]\n\nindex = dll.search(4)\nprint(index)  # Output: 1\n```\n\nI hope this helps! Let me know if you have any questions."
    }
]