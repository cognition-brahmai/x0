[
    {
        "role": "user",
        "content": "Create a C++ implementation of a singly linked list, including methods for adding elements, deleting elements, and searching for elements by value.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in C++ involves defining a structure for the nodes and then implementing functions to add, delete, and search for elements. I'll walk you through the process step by step.\n\nFirst, let's define what a singly linked list is. It's a linear data structure where each element (node) points to the next one, forming a sequence. The basic operations we'll implement are:\n\n1. **Adding elements**: We'll support adding elements at the beginning, end, or at a specific position.\n2. **Deleting elements**: We'll implement deletion by value or by position.\n3. **Searching for elements**: We'll create a function to check if a specific value exists in the list.\n\n### Step 1: Define the Node Structure\n\nEach node in the linked list will contain two parts:\n\n- The data (value)\n- A pointer to the next node\n\nHere's how you can define it in C++:\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n    Node(int val) : data(val), next(nullptr) {}\n};\n```\n\n### Step 2: Implement the Singly Linked List Class\n\nNow, we'll create a class for the singly linked list that uses these nodes.\n\n#### 2.1 Class Definition\n\n```cpp\nclass SinglyLinkedList {\nprivate:\n    Node* head;\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Utility function to display the list\n    void display();\n\n    // Adding elements\n    void addAtBeginning(int val);\n    void addAtEnd(int val);\n    void addAtPosition(int pos, int val);\n\n    // Deleting elements\n    void deleteByValue(int val);\n    void deleteAtPosition(int pos);\n\n    // Searching for elements\n    bool search(int val);\n};\n```\n\n#### 2.2 Implementing the Methods\n\n##### 2.2.1 Display the List\n\nThis function traverses the list and prints each node's value.\n\n```cpp\nvoid SinglyLinkedList::display() {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n```\n\n##### 2.2.2 Adding Elements\n\n###### Add at Beginning\n\nThis function adds a new node at the start of the list.\n\n```cpp\nvoid SinglyLinkedList::addAtBeginning(int val) {\n    Node* newNode = new Node(val);\n    newNode->next = head;\n    head = newNode;\n}\n```\n\n###### Add at End\n\nThis function traverses the list to the end and adds a new node there.\n\n```cpp\nvoid SinglyLinkedList::addAtEnd(int val) {\n    Node* newNode = new Node(val);\n    if (head == nullptr) {\n        head = newNode;\n        return;\n    }\n    Node* current = head;\n    while (current->next != nullptr) {\n        current = current->next;\n    }\n    current->next = newNode;\n}\n```\n\n###### Add at Position\n\nThis function adds a new node at a specified position.\n\n```cpp\nvoid SinglyLinkedList::addAtPosition(int pos, int val) {\n    if (pos <= 0) {\n        std::cout << \"Invalid position\" << std::endl;\n        return;\n    }\n    if (pos == 1) {\n        addAtBeginning(val);\n        return;\n    }\n    Node* newNode = new Node(val);\n    Node* current = head;\n    for (int i = 1; i < pos - 1; ++i) {\n        if (current == nullptr) {\n            std::cout << \"Position out of range\" << std::endl;\n            delete newNode;\n            return;\n        }\n        current = current->next;\n    }\n    newNode->next = current->next;\n    current->next = newNode;\n}\n```\n\n##### 2.2.3 Deleting Elements\n\n###### Delete by Value\n\nThis function searches for the first occurrence of a value and deletes that node.\n\n```cpp\nvoid SinglyLinkedList::deleteByValue(int val) {\n    if (head == nullptr) {\n        std::cout << \"List is empty\" << std::endl;\n        return;\n    }\n    if (head->data == val) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        return;\n    }\n    Node* current = head;\n    while (current->next != nullptr && current->next->data != val) {\n        current = current->next;\n    }\n    if (current->next == nullptr) {\n        std::cout << \"Value not found\" << std::endl;\n        return;\n    }\n    Node* temp = current->next;\n    current->next = current->next->next;\n    delete temp;\n}\n```\n\n###### Delete at Position\n\nThis function deletes the node at a specified position.\n\n```cpp\nvoid SinglyLinkedList::deleteAtPosition(int pos) {\n    if (head == nullptr) {\n        std::cout << \"List is empty\" << std::endl;\n        return;\n    }\n    if (pos == 1) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        return;\n    }\n    Node* current = head;\n    for (int i = 1; i < pos - 1; ++i) {\n        if (current == nullptr) {\n            std::cout << \"Position out of range\" << std::endl;\n            return;\n        }\n        current = current->next;\n    }\n    if (current->next == nullptr) {\n        std::cout << \"Position out of range\" << std::endl;\n        return;\n    }\n    Node* temp = current->next;\n    current->next = current->next->next;\n    delete temp;\n}\n```\n\n##### 2.2.4 Searching for Elements\n\nThis function checks if a value exists in the list.\n\n```cpp\nbool SinglyLinkedList::search(int val) {\n    Node* current = head;\n    while (current != nullptr) {\n        if (current->data == val) {\n            return true;\n        }\n        current = current->next;\n    }\n    return false;\n}\n```\n\n### Step 3: Testing the Singly Linked List\n\nFinally, let's write a main function to test our implementation.\n\n```cpp\nint main() {\n    SinglyLinkedList list;\n\n    list.addAtBeginning(10);\n    list.addAtEnd(20);\n    list.addAtPosition(2, 15);\n    list.display();  // Output: 10 -> 15 -> 20 -> nullptr\n\n    list.deleteByValue(15);\n    list.display();  // Output: 10 -> 20 -> nullptr\n\n    list.deleteAtPosition(2);\n    list.display();  // Output: 10 -> nullptr\n\n    std::cout << \"Search for 10: \" << (list.search(10) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Found\n    std::cout << \"Search for 15: \" << (list.search(15) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Not Found\n\n    return 0;\n}\n```\n\n### Explanation\n\n- **Node Structure**: Defines the basic unit of the linked list with data and a pointer to the next node.\n- **SinglyLinkedList Class**: Manages the list operations.\n  - **Display**: Prints the list.\n  - **Adding Elements**:\n    - **AddAtBeginning**: Adds a node at the start.\n    - **AddAtEnd**: Adds a node at the end.\n    - **AddAtPosition**: Adds a node at a specified position.\n  - **Deleting Elements**:\n    - **DeleteByValue**: Deletes the first occurrence of a value.\n    - **DeleteAtPosition**: Deletes the node at a specified position.\n  - **Searching**: Checks if a value exists in the list.\n\nThis implementation covers the basic operations needed for a singly linked list in C++. You can expand upon this by adding more features like counting the number of nodes, reversing the list, etc., based on your requirements."
    }
]