[
    {
        "role": "user",
        "content": "Write a Java program to implement a stack data structure using an array with push, pop, and peek methods. The stack should have a fixed size and throw an exception when trying to push onto a full stack or pop from an empty stack."
    },
    {
        "role": "assistant",
        "content": "I'd be happy to help you with that! Implementing a stack data structure using an array in Java is a great way to understand both data structures and exception handling. A stack follows the Last In, First Out (LIFO) principle, meaning the last element added is the first one to be removed.\n\nTo create this stack, we'll need to define a class that uses an array to store the elements. We'll also need to keep track of the top of the stack to efficiently perform push, pop, and peek operations. Since the stack has a fixed size, we'll need to handle cases where the stack is full (when pushing) or empty (when popping or peeking) by throwing exceptions.\n\nHere's a step-by-step plan:\n\n1. **Define the Stack Class:** This class will have a private array to store the elements and an integer to keep track of the top of the stack.\n\n2. **Constructor:** Initialize the array with a fixed size and set the top to -1 (indicating an empty stack).\n\n3. **Push Method:** Add an element to the top of the stack. If the stack is full, throw an exception.\n\n4. **Pop Method:** Remove and return the element from the top of the stack. If the stack is empty, throw an exception.\n\n5. **Peek Method:** Return the element at the top of the stack without removing it. If the stack is empty, throw an exception.\n\n6. **Helper Methods:** Optionally, you can add methods to check if the stack is full or empty.\n\nNow, let's translate this plan into Java code.\n\n## Final Solution\nTo implement a stack data structure using an array in Java with push, pop, and peek methods, and to handle exceptions for empty and full stack scenarios, you can use the following code:\n\n```java\npublic class FixedSizeStack {\n    private int[] stackArray;\n    private int top;\n    private int capacity;\n\n    // Constructor to initialize the stack with a fixed capacity\n    public FixedSizeStack(int size) {\n        stackArray = new int[size];\n        top = -1;\n        capacity = size;\n    }\n\n    // Method to add an element to the stack\n    public void push(int value) {\n        if (isFull()) {\n            throw new StackOverflowError(\"Stack is full. Cannot push \" + value);\n        }\n        stackArray[++top] = value;\n    }\n\n    // Method to remove and return the top element from the stack\n    public int pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty. Cannot pop\");\n        }\n        return stackArray[top--];\n    }\n\n    // Method to return the top element without removing it\n    public int peek() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty. Cannot peek\");\n        }\n        return stackArray[top];\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return top == capacity - 1;\n    }\n\n    // Optional: Method to display the stack elements\n    public void display() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty\");\n            return;\n        }\n        System.out.println(\"Stack elements:\");\n        for (int i = top; i >= 0; i--) {\n            System.out.println(stackArray[i]);\n        }\n    }\n\n    public static void main(String[] args) {\n        FixedSizeStack stack = new FixedSizeStack(5);\n        try {\n            stack.push(1);\n            stack.push(2);\n            stack.push(3);\n            stack.push(4);\n            stack.push(5);\n            // stack.push(6); // This would throw StackOverflowError\n\n            System.out.println(\"Top element is: \" + stack.peek());\n            stack.pop();\n            System.out.println(\"After popping, top element is: \" + stack.peek());\n\n            stack.display();\n        } catch (Exception e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Class Definition:** `FixedSizeStack` class is defined with a private integer array `stackArray` to store the elements, an integer `top` to track the top of the stack, and an integer `capacity` to store the size of the stack.\n\n2. **Constructor:** Initializes the array with the given size and sets `top` to -1, indicating an empty stack.\n\n3. **Push Method:** Adds an element to the top of the stack. It first checks if the stack is full using the `isFull` method. If the stack is full, it throws a `StackOverflowError`. Otherwise, it increments `top` and adds the element.\n\n4. **Pop Method:** Removes and returns the element at the top of the stack. It checks if the stack is empty using the `isEmpty` method. If the stack is empty, it throws an `IllegalStateException`. Otherwise, it decrements `top` after returning the element.\n\n5. **Peek Method:** Returns the element at the top of the stack without removing it. It also checks if the stack is empty and throws an `IllegalStateException` if it is.\n\n6. **Helper Methods:** `isEmpty` and `isFull` methods check if the stack is empty or full, respectively.\n\n7. **Display Method:** Optionally displays the elements in the stack from top to bottom.\n\n8. **Main Method:** Demonstrates the usage of the stack by pushing elements, peeking at the top element, popping an element, and displaying the stack. It also handles exceptions that may be thrown during these operations."
    }
]