[
    {
        "role": "user",
        "content": "Create a Python implementation of a singly linked list with methods for adding elements at the beginning, end, and a specified position, as well as removing elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a Python implementation of a singly linked list with the specified methods. A singly linked list is a data structure where each node contains a value and a reference (or link) to the next node in the sequence.\n\n### Implementation Steps:\n\n1. **Define the Node Class:**\n   - Each node will have a value and a reference to the next node.\n\n2. **Define the SinglyLinkedList Class:**\n   - This class will manage the nodes and provide methods to add elements at the beginning, end, and at a specified position.\n   - It will also provide methods to remove elements by value or by index.\n\n3. **Implement the Methods:**\n   - `append(data)`: Add a new node with the given data at the end of the list.\n   - `prepend(data)`: Add a new node with the given data at the beginning of the list.\n   - `insert(data, position)`: Add a new node with the given data at the specified position.\n   - `remove_by_value(data)`: Remove the first occurrence of a node with the given data.\n   - `remove_by_index(index)`: Remove the node at the specified index.\n\n4. **Handle Edge Cases:**\n   - Ensure that methods handle cases where the list is empty or the position/index is out of bounds.\n\n### Solution Code:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def append(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def prepend(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert(self, data, position):\n        if position == 0:\n            self.prepend(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            raise IndexError(\"Position out of bounds\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, data):\n        current = self.head\n        previous = None\n        while current and current.data != data:\n            previous = current\n            current = current.next\n        if not current:\n            raise ValueError(\"Value not found in the list\")\n        if previous:\n            previous.next = current.next\n        else:\n            self.head = current.next\n\n    def remove_by_index(self, index):\n        if index < 0:\n            raise IndexError(\"Negative index is invalid\")\n        if index == 0:\n            if self.head:\n                self.head = self.head.next\n            else:\n                raise IndexError(\"Index out of bounds\")\n            return\n        current = self.head\n        count = 0\n        previous = None\n        while current and count < index:\n            previous = current\n            current = current.next\n            count += 1\n        if not current:\n            raise IndexError(\"Index out of bounds\")\n        previous.next = current.next\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.append(1)\n    sll.append(2)\n    sll.prepend(0)\n    sll.insert(3, 2)\n    sll.display()  # Output: 0 -> 1 -> 3 -> 2\n    sll.remove_by_value(3)\n    sll.display()  # Output: 0 -> 1 -> 2\n    sll.remove_by_index(1)\n    sll.display()  # Output: 0 -> 2\n```\n\n### Explanation:\n\n1. **Node Class:**\n   - Initializes with data and a next pointer set to None.\n\n2. **SinglyLinkedList Class:**\n   - Initializes with a head pointer set to None.\n   - `append(data)`: Adds a new node at the end.\n   - `prepend(data)`: Adds a new node at the beginning.\n   - `insert(data, position)`: Inserts a new node at the specified position.\n   - `remove_by_value(data)`: Removes the first node containing the specified data.\n   - `remove_by_index(index)`: Removes the node at the specified index.\n   - `display()`: Prints the list in a readable format.\n\n3. **Edge Cases:**\n   - Appending/prepending to an empty list.\n   - Inserting at position 0 or beyond the current list length.\n   - Removing values or indices that do not exist.\n\nThis implementation should cover all the required functionalities for a basic singly linked list in Python."
    }
]