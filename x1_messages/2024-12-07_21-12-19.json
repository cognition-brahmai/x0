[
    {
        "role": "user",
        "content": "Implement a Java program that simulates a bank account system with classes for Account, SavingsAccount, and CheckingAccount. Include methods for depositing, withdrawing, and transferring funds between accounts, while handling potential exceptions like insufficient balance.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Okay, so I need to create a Java program that simulates a bank account system. There should be classes for a general Account, and then specific types like SavingsAccount and CheckingAccount. I need to include methods for depositing money, withdrawing money, and transferring funds between accounts. Also, I have to handle exceptions, like when someone tries to withdraw more money than they have in their account.\n\nFirst, I should probably start by thinking about the basic structure of the Account class since SavingsAccount and CheckingAccount will likely inherit from it. What are the common features that all types of bank accounts have? Well, they all have a balance, an account number, and probably an account holder's name. They all can deposit and withdraw money. So, maybe the Account class should have properties for balance, account number, and account holder's name, and methods for deposit and withdraw.\n\nBut wait, transferring funds between accounts isn't directly a method of a single account; it involves two accounts: the one giving the money and the one receiving it. So, maybe I should have a separate method for transferring funds, perhaps in a Bank class that manages multiple accounts.\n\nLet me jot down some ideas:\n\n- Account class:\n\n- Properties: accountNumber (String), accountHolder (String), balance (double)\n\n- Methods: deposit(double amount), withdraw(double amount), getBalance()\n\n- SavingsAccount class (extends Account):\n\n- Maybe has interest rate?\n\n- Methods: calculateInterest()\n\n- CheckingAccount class (extends Account):\n\n- Maybe has overdraft limit?\n\n- Methods: withdraw(double amount) with overdraft consideration\n\n- Bank class:\n\n- Manages multiple accounts\n\n- Method: transferFunds(fromAccount, toAccount, amount)\n\nNow, about exceptions. If someone tries to withdraw more money than they have, I should throw an exception, maybe something like InsufficientBalanceException. Similarly, if there's an issue with transferring funds, like one of the accounts doesn't exist, I should handle that appropriately.\n\nLet me think about how to implement the transferFunds method. It needs to ensure that the 'from' account has enough money, then withdraw from it and deposit into the 'to' account. This should be done in a way that ensures consistency, meaning if one part fails, nothing should be changed.\n\nWait, that sounds like a transaction. In database terms, I need to make sure that the withdrawal and deposit happen atomically, so if something goes wrong, like the 'to' account doesn't exist, neither account is affected.\n\nBut in Java, unless I'm using some transaction management system, I need to handle this manually. Maybe I can implement it by first checking if both accounts exist, then checking if the 'from' account has enough balance, and only then performing the withdrawal and deposit.\n\nHowever, even that isn't perfectly safe because between checking the balance and performing the withdrawal, the balance could change if multiple threads are accessing it. But since this is a simple program, maybe I can ignore multithreading issues for now.\n\nLet me consider the Account class in more detail. Should the account number be unique? Probably yes. So, maybe the Bank class should have a map that associates account numbers with Account objects, ensuring uniqueness.\n\nAlso, for the account holder's name, should I have a separate Customer class? Maybe not for simplicity, I can just have a String for the account holder's name.\n\nNow, for the deposit and withdraw methods, they should update the balance accordingly. Withdraw should check if the amount is less than or equal to the balance, and if not, throw an exception.\n\nLet me think about error messages. For example, if someone tries to withdraw more money than they have, the exception message should be something like \"Insufficient balance: requested amount exceeds available balance.\"\n\nSimilarly, if someone tries to transfer funds and the 'from' account doesn't have enough money, or if one of the accounts doesn't exist, I need to handle those cases gracefully.\n\nMaybe I should define a custom exception class called BankException, and then have subclasses like InsufficientBalanceException and InvalidAccountException.\n\nWait, or maybe just use the standard Exception class for now to keep it simple.\n\nLet me outline the classes I need:\n\n1. Account\n\n- Properties: accountNumber (String), accountHolder (String), balance (double)\n\n- Methods: deposit(double amount), withdraw(double amount), getBalance()\n\n2. SavingsAccount (extends Account)\n\n- Properties: interestRate (double)\n\n- Methods: calculateInterest()\n\n3. CheckingAccount (extends Account)\n\n- Properties: overdraftLimit (double)\n\n- Methods: withdraw(double amount) - considering overdraft\n\n4. Bank\n\n- Properties: accounts (Map<String, Account>)\n\n- Methods: addAccount(Account), removeAccount(String accountNumber), transferFunds(String fromAccountNumber, String toAccountNumber, double amount)\n\nNow, for the transferFunds method in the Bank class, I need to:\n\n- Check if both accounts exist\n\n- Check if the 'from' account has enough balance (considering overdraft for checking accounts)\n\n- If yes, withdraw from 'from' account and deposit into 'to' account\n\n- If any step fails, rollback any changes\n\nBut in Java, without transactions, I can't really rollback. So, I need to make sure that both operations succeed or neither does.\n\nMaybe I can first withdraw from the 'from' account, and if that succeeds, then deposit into the 'to' account. If the deposit fails for some reason, I'll have to deal with that.\n\nWait, but in this simple program, deposit can only fail if the amount is negative, which I can check beforehand.\n\nSo, perhaps it's manageable.\n\nLet me think about the overdraft in CheckingAccount. If a checking account has an overdraft limit, that means the account can have a negative balance up to the overdraft limit.\n\nSo, in the withdraw method of CheckingAccount, I need to check if the withdrawal amount is greater than the balance plus the overdraft limit. If it is, throw an exception; else, proceed with the withdrawal.\n\nSavingsAccount, on the other hand, probably doesn't have an overdraft limit, so it can't go negative.\n\nAlso, SavingsAccount has an interest rate, and maybe a method to calculate interest based on the balance.\n\nFor the Bank class, I need to manage multiple accounts. Using a Map seems appropriate, with account numbers as keys and Account objects as values.\n\nI need to make sure that account numbers are unique. So, when adding an account, I should check if the account number already exists in the map.\n\nIf it does, perhaps throw an exception or reject the addition.\n\nNow, for the transferFunds method:\n\n- Retrieve both accounts from the map using account numbers\n\n- If either account doesn't exist, throw an exception\n\n- If both exist, call withdraw on the 'from' account\n\n- If withdraw succeeds, call deposit on the 'to' account\n\n- If deposit succeeds, the transfer is complete\n\n- If deposit fails, perhaps need to handle that, but in this simple program, deposit only fails if amount is negative, which we can prevent\n\nWait, actually, deposit should probably not allow negative amounts. So, in the deposit method, check if amount is positive, and if not, throw an exception.\n\nSimilarly, withdraw should check if amount is positive before proceeding.\n\nAlso, in the withdraw method, check if the amount is less than or equal to the available balance (considering overdraft for checking accounts).\n\nIn the Account class, since both SavingsAccount and CheckingAccount extend it, but CheckingAccount has an overdraft limit, I need to handle that differently.\n\nMaybe in the Account class, the withdraw method should be abstract, and then implemented differently in SavingsAccount and CheckingAccount.\n\nWait, but SavingsAccount doesn't have an overdraft limit, so it should only allow withdrawal up to the current balance.\n\nCheckingAccount can allow withdrawal up to balance + overdraft limit.\n\nSo, perhaps in the Account class, have an abstract withdraw method, and let subclasses implement their own logic.\n\nAlternatively, in the Account class, have a non-abstract withdraw method that only allows withdrawal up to the balance, and in CheckingAccount, override it to allow up to balance + overdraft limit.\n\nI think overriding makes sense here.\n\nSo, in Account class:\n\npublic void withdraw(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n\n}\n\nif (amount > balance) {\n\nthrow new InsufficientBalanceException(\"Insufficient balance for withdrawal.\");\n\n}\n\nbalance -= amount;\n\n}\n\nThen, in CheckingAccount class:\n\n@Override\n\npublic void withdraw(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n\n}\n\nif (amount > balance + overdraftLimit) {\n\nthrow new InsufficientBalanceException(\"Insufficient balance for withdrawal including overdraft limit.\");\n\n}\n\nbalance -= amount;\n\n}\n\nThis way, SavingsAccount uses the default withdraw method from Account, which doesn't allow overdraft, and CheckingAccount overrides it to allow overdraft up to the limit.\n\nGood.\n\nNow, for the transferFunds method in the Bank class:\n\npublic void transferFunds(String fromAccountNumber, String toAccountNumber, double amount) {\n\nAccount fromAccount = accounts.get(fromAccountNumber);\n\nAccount toAccount = accounts.get(toAccountNumber);\n\nif (fromAccount == null) {\n\nthrow new InvalidAccountException(\"From account does not exist.\");\n\n}\n\nif (toAccount == null) {\n\nthrow new InvalidAccountException(\"To account does not exist.\");\n\n}\n\nfromAccount.withdraw(amount);\n\ntoAccount.deposit(amount);\n\n}\n\nAlso, perhaps I should ensure that the 'to' account is not the same as the 'from' account, to prevent self-transfers, which might not make sense.\n\nAlthough, transferring to oneself could be a valid operation, maybe to move money between different types of accounts.\n\nSo, perhaps I'll allow it.\n\nNow, about exceptions. I need to define custom exceptions like InsufficientBalanceException and InvalidAccountException.\n\nIn Java, I can create custom exceptions by extending the Exception class.\n\nSo, something like:\n\npublic class InsufficientBalanceException extends Exception {\n\npublic InsufficientBalanceException(String message) {\n\nsuper(message);\n\n}\n\n}\n\nSimilarly for InvalidAccountException.\n\nBut actually, since I'm just throwing these exceptions and maybe just displaying the error message, maybe using the standard Exception class is sufficient for now.\n\nTo keep it simple, I'll use Exception for now.\n\nNow, for the deposit method in the Account class:\n\npublic void deposit(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Deposit amount must be positive.\");\n\n}\n\nbalance += amount;\n\n}\n\nSimilar in both SavingsAccount and CheckingAccount, unless there are specific rules for each.\n\nFor example, maybe SavingsAccount has restrictions on the number of withdrawals, but according to the requirements, nothing like that is mentioned.\n\nSo, for now, I'll keep deposit the same for both.\n\nNow, for the SavingsAccount class, it has an interest rate, and a method to calculate interest.\n\nPerhaps the interest is calculated based on the current balance.\n\nSo, something like:\n\npublic class SavingsAccount extends Account {\n\nprivate double interestRate;\n\npublic SavingsAccount(String accountNumber, String accountHolder, double balance, double interestRate) {\n\nsuper(accountNumber, accountHolder, balance);\n\nthis.interestRate = interestRate;\n\n}\n\npublic void calculateInterest() {\n\ndouble interest = balance * (interestRate / 100);\n\nbalance += interest;\n\n}\n\n}\n\nAssuming interestRate is in percentage.\n\nSimilarly, for CheckingAccount:\n\npublic class CheckingAccount extends Account {\n\nprivate double overdraftLimit;\n\npublic CheckingAccount(String accountNumber, String accountHolder, double balance, double overdraftLimit) {\n\nsuper(accountNumber, accountHolder, balance);\n\nthis.overdraftLimit = overdraftLimit;\n\n}\n\n@Override\n\npublic void withdraw(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n\n}\n\nif (amount > balance + overdraftLimit) {\n\nthrow new InsufficientBalanceException(\"Insufficient balance for withdrawal including overdraft limit.\");\n\n}\n\nbalance -= amount;\n\n}\n\n}\n\nNow, in the Bank class, I need to manage multiple accounts.\n\nI'll use a Map to store accounts, with account numbers as keys.\n\npublic class Bank {\n\nprivate Map<String, Account> accounts = new HashMap<>();\n\npublic void addAccount(Account account) {\n\nif (accounts.containsKey(account.getAccountNumber())) {\n\nthrow new IllegalArgumentException(\"Account number already exists.\");\n\n}\n\naccounts.put(account.getAccountNumber(), account);\n\n}\n\npublic void removeAccount(String accountNumber) {\n\naccounts.remove(accountNumber);\n\n}\n\npublic void transferFunds(String fromAccountNumber, String toAccountNumber, double amount) throws Exception {\n\nAccount fromAccount = accounts.get(fromAccountNumber);\n\nAccount toAccount = accounts.get(toAccountNumber);\n\nif (fromAccount == null) {\n\nthrow new Exception(\"From account does not exist.\");\n\n}\n\nif (toAccount == null) {\n\nthrow new Exception(\"To account does not exist.\");\n\n}\n\nfromAccount.withdraw(amount);\n\ntoAccount.deposit(amount);\n\n}\n\n}\n\nI should also probably have methods to get account details, maybe list all accounts, etc., but for the scope of this program, adding and removing accounts, and transferring funds should suffice.\n\nNow, I need to test this system. I'll write a simple main method to demonstrate creating accounts, transferring funds, and handling exceptions.\n\nHere's a rough outline:\n\npublic class Main {\n\npublic static void main(String[] args) {\n\nBank bank = new Bank();\n\ntry {\n\n// Create accounts\n\nAccount savings = new SavingsAccount(\"A123\", \"John Doe\", 1000.0, 2.5);\n\nAccount checking = new CheckingAccount(\"B456\", \"Jane Smith\", 500.0, 200.0);\n\n// Add accounts to bank\n\nbank.addAccount(savings);\n\nbank.addAccount(checking);\n\n// Transfer funds\n\nbank.transferFunds(\"A123\", \"B456\", 150.0);\n\nSystem.out.println(\"Transfer successful.\");\n\n// Attempt to transfer more than balance\n\nbank.transferFunds(\"B456\", \"A123\", 1000.0);\n\n} catch (Exception e) {\n\nSystem.err.println(\"Error: \" + e.getMessage());\n\n}\n\n}\n\n}\n\nIn this example, transferring 150.0 from savings to checking should succeed.\n\nThen, trying to transfer 1000.0 from checking to savings should fail because checking has balance 500.0 and overdraft limit 200.0, so total available is 700.0, which is less than 1000.0.\n\nThus, it should throw an InsufficientBalanceException.\n\nI need to make sure that the exception is caught and an appropriate error message is displayed.\n\nAlso, I should verify that the balances are updated correctly after a successful transfer.\n\nLet me think about how to display balances.\n\nMaybe add a getBalance method in the Account class, and call it to print balances before and after transfers.\n\nYes, that would be useful for verification.\n\nSo, in the Account class:\n\npublic double getBalance() {\n\nreturn balance;\n\n}\n\nThen, in the main method, I can print the balances before and after transfers.\n\nHere's an updated main method:\n\npublic class Main {\n\npublic static void main(String[] args) {\n\nBank bank = new Bank();\n\ntry {\n\n// Create accounts\n\nAccount savings = new SavingsAccount(\"A123\", \"John Doe\", 1000.0, 2.5);\n\nAccount checking = new CheckingAccount(\"B456\", \"Jane Smith\", 500.0, 200.0);\n\n// Add accounts to bank\n\nbank.addAccount(savings);\n\nbank.addAccount(checking);\n\n// Print initial balances\n\nSystem.out.println(\"Initial balances:\");\n\nSystem.out.println(\"Savings: \" + savings.getBalance());\n\nSystem.out.println(\"Checking: \" + checking.getBalance());\n\n// Transfer funds\n\nbank.transferFunds(\"A123\", \"B456\", 150.0);\n\nSystem.out.println(\"Transfer successful.\");\n\n// Print balances after transfer\n\nSystem.out.println(\"Balances after transfer:\");\n\nSystem.out.println(\"Savings: \" + savings.getBalance());\n\nSystem.out.println(\"Checking: \" + checking.getBalance());\n\n// Attempt to transfer more than available\n\nbank.transferFunds(\"B456\", \"A123\", 1000.0);\n\n} catch (Exception e) {\n\nSystem.err.println(\"Error: \" + e.getMessage());\n\n}\n\n}\n\n}\n\nThis should demonstrate the functionality and error handling.\n\nI should also test other scenarios, like transferring more than the savings account has (which doesn't have an overdraft), or transferring to non-existent accounts.\n\nLet me add those tests.\n\n// Attempt to transfer from non-existent account\n\nbank.transferFunds(\"C789\", \"B456\", 100.0);\n\n// Attempt to transfer to non-existent account\n\nbank.transferFunds(\"A123\", \"C789\", 100.0);\n\n// Attempt to overdraw savings account beyond balance\n\nbank.transferFunds(\"A123\", \"B456\", 1200.0);\n\nIn the first two cases, it should throw an InvalidAccountException, and in the third case, an InsufficientBalanceException.\n\nWait, but in my current implementation, transferFunds throws a general Exception if the account doesn't exist. Maybe I should define specific exceptions for better error handling.\n\nLet me define custom exceptions:\n\npublic class InvalidAccountException extends Exception {\n\npublic InvalidAccountException(String message) {\n\nsuper(message);\n\n}\n\n}\n\npublic class InsufficientBalanceException extends Exception {\n\npublic InsufficientBalanceException(String message) {\n\nsuper(message);\n\n}\n\n}\n\nThen, in the transferFunds method:\n\npublic void transferFunds(String fromAccountNumber, String toAccountNumber, double amount) throws InvalidAccountException, InsufficientBalanceException {\n\nAccount fromAccount = accounts.get(fromAccountNumber);\n\nAccount toAccount = accounts.get(toAccountNumber);\n\nif (fromAccount == null) {\n\nthrow new InvalidAccountException(\"From account does not exist.\");\n\n}\n\nif (toAccount == null) {\n\nthrow new InvalidAccountException(\"To account does not exist.\");\n\n}\n\ntry {\n\nfromAccount.withdraw(amount);\n\ntoAccount.deposit(amount);\n\n} catch (IllegalArgumentException | InsufficientBalanceException e) {\n\nthrow new InsufficientBalanceException(\"Error in transfer: \" + e.getMessage());\n\n}\n\n}\n\nThis way, I can catch specific exceptions from the withdraw and deposit methods and rethrow them as InsufficientBalanceException in the transfer method.\n\nIn the main method, I can catch these exceptions and handle them accordingly.\n\nNow, I need to make sure that the withdraw and deposit methods throw appropriate exceptions.\n\nIn the Account class:\n\npublic void deposit(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Deposit amount must be positive.\");\n\n}\n\nbalance += amount;\n\n}\n\npublic void withdraw(double amount) throws InsufficientBalanceException {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n\n}\n\nif (amount > balance) {\n\nthrow new InsufficientBalanceException(\"Insufficient balance for withdrawal.\");\n\n}\n\nbalance -= amount;\n\n}\n\nSimilarly, in CheckingAccount:\n\n@Override\n\npublic void withdraw(double amount) throws InsufficientBalanceException {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n\n}\n\nif (amount > balance + overdraftLimit) {\n\nthrow new InsufficientBalanceException(\"Insufficient balance for withdrawal including overdraft limit.\");\n\n}\n\nbalance -= amount;\n\n}\n\nThis should cover the exception handling for now.\n\nI should also consider that if an account is deleted, any references to it are removed.\n\nIn the removeAccount method, I can simply remove the account from the map.\n\nNow, to make this program more interactive, maybe I can create a simple menu-based system where users can create accounts, deposit, withdraw, transfer funds, and check balances.\n\nBut for the scope of this task, implementing the classes and demonstrating their usage in the main method should suffice.\n\nI think this covers the requirements: having Account, SavingsAccount, and CheckingAccount classes with deposit, withdraw, and transfer functionalities, along with appropriate exception handling.\n\n**Final Solution**\n\nTo create a simple bank account system in Java, we need to simulate the behavior of different types of bank accounts and manage transactions between them. This solution involves creating classes for a general `Account`, specifically `SavingsAccount` and `CheckingAccount`, and a `Bank` class to handle multiple accounts and transactions.\n\n### Approach\n\n1. **Account Class**: \n   - Serves as the base class with common properties and methods for all account types.\n   - Includes methods for depositing and withdrawing funds, ensuring basic validation.\n\n2. **SavingsAccount Class**:\n   - Extends `Account` and includes an interest rate.\n   - Provides a method to calculate interest based on the current balance.\n\n3. **CheckingAccount Class**:\n   - Extends `Account` and includes an overdraft limit.\n   - Overrides the withdraw method to allow withdrawals up to the balance plus overdraft limit.\n\n4. **Bank Class**:\n   - Manages multiple accounts using a map.\n   - Provides methods to add, remove accounts, and transfer funds between accounts.\n\n5. **Exception Handling**:\n   - Custom exceptions (`InvalidAccountException` and `InsufficientBalanceException`) are used to handle errors gracefully.\n\n### Solution Code\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass InvalidAccountException extends Exception {\n    public InvalidAccountException(String message) {\n        super(message);\n    }\n}\n\nclass InsufficientBalanceException extends Exception {\n    public InsufficientBalanceException(String message) {\n        super(message);\n    }\n}\n\nclass Account {\n    private String accountNumber;\n    private String accountHolder;\n    private double balance;\n\n    public Account(String accountNumber, String accountHolder, double balance) {\n        this.accountNumber = accountNumber;\n        this.accountHolder = accountHolder;\n        this.balance = balance;\n    }\n\n    public void deposit(double amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Deposit amount must be positive.\");\n        }\n        balance += amount;\n    }\n\n    public void withdraw(double amount) throws InsufficientBalanceException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n        }\n        if (amount > balance) {\n            throw new InsufficientBalanceException(\"Insufficient balance for withdrawal.\");\n        }\n        balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n}\n\nclass SavingsAccount extends Account {\n    private double interestRate;\n\n    public SavingsAccount(String accountNumber, String accountHolder, double balance, double interestRate) {\n        super(accountNumber, accountHolder, balance);\n        this.interestRate = interestRate;\n    }\n\n    public void calculateInterest() {\n        double interest = balance * (interestRate / 100);\n        balance += interest;\n    }\n}\n\nclass CheckingAccount extends Account {\n    private double overdraftLimit;\n\n    public CheckingAccount(String accountNumber, String accountHolder, double balance, double overdraftLimit) {\n        super(accountNumber, accountHolder, balance);\n        this.overdraftLimit = overdraftLimit;\n    }\n\n    @Override\n    public void withdraw(double amount) throws InsufficientBalanceException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n        }\n        if (amount > balance + overdraftLimit) {\n            throw new InsufficientBalanceException(\"Insufficient balance for withdrawal including overdraft limit.\");\n        }\n        balance -= amount;\n    }\n}\n\nclass Bank {\n    private Map<String, Account> accounts = new HashMap<>();\n\n    public void addAccount(Account account) {\n        if (accounts.containsKey(account.getAccountNumber())) {\n            throw new IllegalArgumentException(\"Account number already exists.\");\n        }\n        accounts.put(account.getAccountNumber(), account);\n    }\n\n    public void removeAccount(String accountNumber) {\n        accounts.remove(accountNumber);\n    }\n\n    public void transferFunds(String fromAccountNumber, String toAccountNumber, double amount) \n            throws InvalidAccountException, InsufficientBalanceException {\n        Account fromAccount = accounts.get(fromAccountNumber);\n        Account toAccount = accounts.get(toAccountNumber);\n        if (fromAccount == null) {\n            throw new InvalidAccountException(\"From account does not exist.\");\n        }\n        if (toAccount == null) {\n            throw new InvalidAccountException(\"To account does not exist.\");\n        }\n        try {\n            fromAccount.withdraw(amount);\n            toAccount.deposit(amount);\n        } catch (IllegalArgumentException | InsufficientBalanceException e) {\n            throw new InsufficientBalanceException(\"Error in transfer: \" + e.getMessage());\n        }\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n\n        try {\n            // Create accounts\n            Account savings = new SavingsAccount(\"A123\", \"John Doe\", 1000.0, 2.5);\n            Account checking = new CheckingAccount(\"B456\", \"Jane Smith\", 500.0, 200.0);\n\n            // Add accounts to bank\n            bank.addAccount(savings);\n            bank.addAccount(checking);\n\n            // Print initial balances\n            System.out.println(\"Initial balances:\");\n            System.out.println(\"Savings: \" + savings.getBalance());\n            System.out.println(\"Checking: \" + checking.getBalance());\n\n            // Transfer funds\n            bank.transferFunds(\"A123\", \"B456\", 150.0);\n            System.out.println(\"Transfer successful.\");\n\n            // Print balances after transfer\n            System.out.println(\"Balances after transfer:\");\n            System.out.println(\"Savings: \" + savings.getBalance());\n            System.out.println(\"Checking: \" + checking.getBalance());\n\n            // Attempt to transfer more than available\n            bank.transferFunds(\"B456\", \"A123\", 1000.0);\n        } catch (InvalidAccountException | InsufficientBalanceException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n\n- **Account Class**: Manages basic account operations like deposit and withdrawal with balance checks.\n- **SavingsAccount Class**: Inherits from `Account` and adds interest calculation based on the balance and interest rate.\n- **CheckingAccount Class**: Inherits from `Account` and allows withdrawals up to the balance plus an overdraft limit.\n- **Bank Class**: Manages multiple accounts and facilitates fund transfers between them, ensuring account validity and sufficient balances.\n- **Exception Handling**: Custom exceptions are used to handle cases where accounts do not exist or balances are insufficient, providing clear error messages for better debugging and user interaction."
    }
]