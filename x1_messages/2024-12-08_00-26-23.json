[
    {
        "role": "user",
        "content": "In Java, implement a class representing a stack data structure with methods for push, pop, peek, and check if empty. Include error handling for situations like popping from an empty stack."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! In Java, a stack is a linear data structure that follows the Last In, First Out (LIFO) principle. To implement a stack, we can use an array or a linked list. For this example, I'll use an array for simplicity.\n\nHere's a basic implementation of a stack class in Java:\n\n```java\npublic class Stack {\n    private int maxSize;\n    private int top;\n    private int[] stackArray;\n\n    // Constructor\n    public Stack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n\n    // Push an item onto the stack\n    public void push(int item) {\n        if (top < maxSize - 1) {\n            top++;\n            stackArray[top] = item;\n            System.out.println(\"Pushed \" + item);\n        } else {\n            System.out.println(\"Stack is full. Cannot push \" + item);\n        }\n    }\n\n    // Pop an item from the stack\n    public int pop() {\n        if (!isEmpty()) {\n            int poppedItem = stackArray[top];\n            top--;\n            return poppedItem;\n        } else {\n            System.out.println(\"Stack is empty. Cannot pop.\");\n            return -1; // or throw an exception\n        }\n    }\n\n    // Peek at the top item of the stack without removing it\n    public int peek() {\n        if (!isEmpty()) {\n            return stackArray[top];\n        } else {\n            System.out.println(\"Stack is empty. Cannot peek.\");\n            return -1; // or throw an exception\n        }\n    }\n\n    // Check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        Stack stack = new Stack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        stack.push(6); // Should print \"Stack is full. Cannot push 6\"\n\n        System.out.println(\"Popped: \" + stack.pop()); // Should print \"Popped: 5\"\n        System.out.println(\"Peek: \" + stack.peek());  // Should print \"Peek: 4\"\n        System.out.println(\"Is empty? \" + stack.isEmpty()); // Should print \"Is empty? false\"\n\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop(); // Should print \"Stack is empty. Cannot pop.\"\n        System.out.println(\"Is empty? \" + stack.isEmpty()); // Should print \"Is empty? true\"\n    }\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `Stack` class has private fields: `maxSize` (maximum size of the stack), `top` (index of the top element), and `stackArray` (array to store stack elements).\n\n2. **Constructor:**\n   - Initializes the stack with a given size.\n   - Sets `top` to -1 indicating the stack is empty.\n\n3. **Push Method:**\n   - Adds an item to the top of the stack if the stack is not full.\n   - Increments `top` and assigns the item to `stackArray[top]`.\n\n4. **Pop Method:**\n   - Removes and returns the top item from the stack if the stack is not empty.\n   - Decrements `top`.\n   - If the stack is empty, prints an error message and returns -1 (or you can throw an exception).\n\n5. **Peek Method:**\n   - Returns the top item without removing it if the stack is not empty.\n   - If the stack is empty, prints an error message and returns -1 (or throw an exception).\n\n6. **IsEmpty Method:**\n   - Returns true if the stack is empty (i.e., `top == -1`), otherwise false.\n\n7. **Main Method:**\n   - Demonstrates pushing, popping, peeking, and checking if the stack is empty.\n   - Includes tests for stack full and stack empty conditions.\n\nThis implementation includes basic error handling for pushing to a full stack and popping from an empty stack. You can expand this by using exceptions instead of returning -1 and adding more features as needed."
    }
]