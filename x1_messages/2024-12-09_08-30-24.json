[
    {
        "role": "user",
        "content": "Write a Python program to implement the Quick Sort algorithm on an array of integers. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Quick Sort is a popular sorting algorithm that uses the divide-and-conquer approach. It works by selecting a 'pivot' element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then sorted recursively.\n\nHere's a step-by-step explanation of how Quick Sort works:\n\n1. **Choose a pivot element**: This can be any element in the array, but commonly it's the last element.\n\n2. **Partitioning**: Rearrange the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it. After this partitioning, the pivot is in its final position.\n\n3. **Recursively apply the above steps to the sub-array of elements less than the pivot and the sub-array of elements greater than the pivot.**\n\nNow, let's implement this in Python.\n\n## Final Solution\nTo implement the Quick Sort algorithm in Python, we need to define two main functions: one for partitioning the array and another for recursively sorting the sub-arrays.\n\n### Approach\n\n1. **Partition Function**:\n   - Select the last element in the array as the pivot.\n   - Reorder the array so that all elements less than the pivot come before it, and all elements greater than the pivot come after it.\n   - Return the index of the pivot after partitioning.\n\n2. **Quick Sort Function**:\n   - Recursively call the quick sort on the sub-array of elements less than the pivot.\n   - Recursively call the quick sort on the sub-array of elements greater than the pivot.\n\n### Solution Code\n\n```python\ndef quick_sort(arr):\n    \"\"\"\n    Sorts an array using the quick sort algorithm.\n\n    Args:\n     arr (list): The list of numbers to be sorted.\n\n    Returns:\n     list: The sorted list.\n    \"\"\"\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[-1]\n        less = [x for x in arr[:-1] if x <= pivot]\n        greater = [x for x in arr[:-1] if x > pivot]\n        return quick_sort(less) + [pivot] + quick_sort(greater)\n\n# Example usage:\nif __name__ == \"__main__\":\n    example_array = [10, 7, 8, 9, 1, 5]\n    print(\"Original array:\", example_array)\n    sorted_array = quick_sort(example_array)\n    print(\"Sorted array:\", sorted_array)\n```\n\n### Explanation\n\n1. **Base Case**:\n   - If the array has one or no elements, it is already sorted.\n\n2. **Partitioning**:\n   - Choose the last element as the pivot.\n   - Create two lists: `less` for elements less than or equal to the pivot, and `greater` for elements greater than the pivot.\n\n3. **Recursive Sort**:\n   - Recursively sort the `less` and `greater` lists.\n   - Combine the sorted `less` list, pivot, and sorted `greater` list to get the final sorted array.\n\nThis implementation is efficient and maintains the essence of the quick sort algorithm while being easy to understand and implement in Python."
    }
]