[
    {
        "role": "user",
        "content": "Write a C++ program to implement a singly linked list data structure with functions for adding elements at the beginning, end, and any specified position in the list."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Implementing a singly linked list in C++ involves creating a structure for the nodes and then defining functions to manipulate the list. Below is a step-by-step guide and a complete program that demonstrates how to create a singly linked list with functions to add elements at the beginning, end, and at a specified position.\n\n### Step-by-Step Explanation\n\n1. **Node Structure**: Define a structure for the nodes that will make up the linked list. Each node should contain data and a pointer to the next node.\n2. **Class Definition**: Create a class for the linked list that includes:\n   - A private pointer to the head of the list.\n   - Public member functions to add nodes at the beginning, end, and at a specified position.\n3. **Adding at the Beginning**: Create a function to add a new node at the start of the list. This involves updating the head pointer.\n4. **Adding at the End**: Create a function to add a new node at the end of the list. This requires traversing the list to find the last node.\n5. **Adding at a Specified Position**: Create a function to add a new node at a given position in the list. This involves traversing the list to find the node before the specified position and updating the pointers accordingly.\n6. **Display Function**: Optionally, create a function to display the elements of the list to verify the operations.\n\n### Complete C++ Program\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Define the structure for a node\nstruct Node {\n    int data;\n    Node* next;\n};\n\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Function to insert a node at the beginning\n    void insertAtBeginning(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Function to insert a node at the end\n    void insertAtEnd(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n        } else {\n            Node* temp = head;\n            while (temp->next != nullptr) {\n                temp = temp->next;\n            }\n            temp->next = newNode;\n        }\n    }\n\n    // Function to insert a node at a specified position\n    void insertAtPosition(int position, int value) {\n        if (position <= 0) {\n            cout << \"Invalid position. Position should be greater than 0.\" << endl;\n            return;\n        }\n\n        if (position == 1) {\n            insertAtBeginning(value);\n            return;\n        }\n\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        Node* temp = head;\n        int currentPos = 1;\n\n        while (temp != nullptr && currentPos < position - 1) {\n            temp = temp->next;\n            currentPos++;\n        }\n\n        if (temp == nullptr) {\n            cout << \"Position out of range. Cannot insert.\" << endl;\n            delete newNode;\n            return;\n        }\n\n        newNode->next = temp->next;\n        temp->next = newNode;\n    }\n\n    // Function to display the list\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            cout << temp->data << \" -> \";\n            temp = temp->next;\n        }\n        cout << \"nullptr\" << endl;\n    }\n\n    // Destructor to free the memory\n    ~SinglyLinkedList() {\n        Node* current = head;\n        while (current != nullptr) {\n            Node* next = current->next;\n            delete current;\n            current = next;\n        }\n    }\n};\n\nint main() {\n    SinglyLinkedList list;\n\n    // Inserting elements\n    list.insertAtBeginning(10);\n    list.insertAtEnd(20);\n    list.insertAtPosition(1, 15); // Should insert at the beginning\n    list.insertAtPosition(2, 25); // Should insert after the first node\n    list.insertAtPosition(5, 30); // Should insert at the end\n\n    // Display the list\n    list.display();\n\n    return 0;\n}\n```\n\n### Explanation of the Code\n\n1. **Node Structure**: Defines a node with `data` and `next` pointer.\n2. **SinglyLinkedList Class**:\n   - **Constructor**: Initializes the head to `nullptr`.\n   - **insertAtBeginning**: Adds a new node at the start and updates the head.\n   - **insertAtEnd**: Traverses to the end and adds a new node.\n   - **insertAtPosition**: Adds a new node at the specified position after validating the position.\n   - **display**: Prints the elements of the list.\n   - **Destructor**: Frees the memory allocated for the list.\n3. **main Function**: Demonstrates inserting elements at different positions and displays the list.\n\nThis program should give you a good starting point for working with singly linked lists in C++. If you have any questions or need further clarification, feel free to ask!"
    }
]