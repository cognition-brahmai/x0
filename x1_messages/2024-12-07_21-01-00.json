[
    {
        "role": "user",
        "content": "Build a basic REST API using the Flask web framework in Python. The API should support CRUD operations for a \"Task\" resource with fields like title, description, and due date."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through building a basic REST API using Flask in Python that supports CRUD operations for a \"Task\" resource. We'll cover creating, reading, updating, and deleting tasks, each with fields like title, description, and due date.\n\nFirst, make sure you have Python installed on your system. I'll assume you're using Python 3. If you don't have it, download it from python.org.\n\nNext, you'll need to install Flask. Open your terminal or command prompt and run:\n\n```bash\npip install Flask\n```\n\nNow, let's set up our project structure. Create a new directory for your project, say `task_api`, and navigate into it:\n\n```bash\nmkdir task_api\ncd task_api\n```\n\nInside `task_api`, create a new Python file, for example, `app.py`. This will be the main file for our Flask application.\n\nLet's start by setting up a basic Flask app. Open `app.py` and add the following code:\n\n```python\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return \"Welcome to the Task API!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nThis sets up a Flask application and defines a single route `/` that returns a welcome message. The `debug=True` argument allows the app to automatically reload upon changes and provides useful debug information.\n\nTo run your app, use the following command in your terminal:\n\n```bash\npython app.py\n```\n\nYou should see output indicating that the server is running, usually on `http://127.0.0.1:5000/`. Open this URL in your web browser, and you should see \"Welcome to the Task API!\".\n\nNow, let's define our Task resource. For simplicity, we'll store tasks in memory using a list of dictionaries. In a real-world application, you'd probably use a database.\n\nAdd the following code to `app.py` above the `if __name__ == '__main__':` block:\n\n```python\ntasks = []\n\ndef get_task(task_id):\n    for task in tasks:\n        if task['id'] == task_id:\n            return task\n    return None\n```\n\nHere, `tasks` is a list that will hold our task dictionaries. Each task will have an 'id', 'title', 'description', and 'due_date'. The `get_task` function helps us retrieve a task by its ID.\n\nNext, let's implement the CRUD operations.\n\n**1. Create a Task (POST /tasks)**\n\nWe'll need to handle JSON input for creating a new task.\n\nAdd this route to `app.py`:\n\n```python\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'No data provided'}), 400\n\n    title = data.get('title')\n    description = data.get('description')\n    due_date = data.get('due_date')\n\n    if not title or not due_date:\n        return jsonify({'error': 'Title and due_date are required'}), 400\n\n    task_id = len(tasks) + 1\n    task = {\n        'id': task_id,\n        'title': title,\n        'description': description,\n        'due_date': due_date\n    }\n    tasks.append(task)\n    return jsonify(task), 201\n```\n\nThis route expects a JSON payload with 'title' and 'due_date' fields. It assigns a new ID to the task and adds it to the `tasks` list.\n\n**2. Retrieve All Tasks (GET /tasks)**\n\nLet's create a route to fetch all tasks.\n\nAdd this to `app.py`:\n\n```python\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    return jsonify(tasks), 200\n```\n\nThis simply returns the list of all tasks.\n\n**3. Retrieve a Single Task (GET /tasks/<int:task_id>)**\n\nWe'll need a route to get a specific task by its ID.\n\nAdd this route:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['GET'])\ndef get_single_task(task_id):\n    task = get_task(task_id)\n    if task:\n        return jsonify(task), 200\n    else:\n        return jsonify({'error': 'Task not found'}), 404\n```\n\nThis uses the `get_task` function to find the task by ID and returns it if found, otherwise returns a 404 error.\n\n**4. Update a Task (PUT /tasks/<int:task_id>)**\n\nImplementing an update function allows us to modify existing tasks.\n\nAdd this route:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['PUT'])\ndef update_task(task_id):\n    task = get_task(task_id)\n    if not task:\n        return jsonify({'error': 'Task not found'}), 404\n\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'No data provided'}), 400\n\n    task['title'] = data.get('title', task['title'])\n    task['description'] = data.get('description', task['description'])\n    task['due_date'] = data.get('due_date', task['due_date'])\n\n    return jsonify(task), 200\n```\n\nThis route updates the task fields with the provided JSON data. If a field is not provided in the JSON, it retains its original value.\n\n**5. Delete a Task (DELETE /tasks/<int:task_id>)**\n\nFinally, we need a way to delete tasks.\n\nAdd this route:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['DELETE'])\ndef delete_task(task_id):\n    task = get_task(task_id)\n    if not task:\n        return jsonify({'error': 'Task not found'}), 404\n\n    tasks.remove(task)\n    return jsonify({'message': 'Task deleted successfully'}), 200\n```\n\nThis removes the task from the `tasks` list.\n\nThat's it! You've now implemented a basic REST API for managing tasks with CRUD operations using Flask.\n\nTo test your API, you can use tools like Postman or curl. Here are some example curl commands:\n\n- Create a task:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Task 1\",\"due_date\":\"2023-10-01\"}' http://127.0.0.1:5000/tasks\n```\n\n- Get all tasks:\n\n```bash\ncurl http://127.0.0.1:5000/tasks\n```\n\n- Get a single task:\n\n```bash\ncurl http://127.0.0.1:5000/tasks/1\n```\n\n- Update a task:\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Task 1\",\"due_date\":\"2023-10-02\"}' http://127.0.0.1:5000/tasks/1\n```\n\n- Delete a task:\n\n```bash\ncurl -X DELETE http://127.0.0.1:5000/tasks/1\n```\n\nRemember, this is a very basic implementation. In a production environment, you'd want to handle errors more gracefully, validate input more thoroughly, and persist data using a database.\n\n## Final Solution\nTo create a basic REST API using Flask in Python that supports CRUD operations for a \"Task\" resource, follow these steps:\n\n### Prerequisites\n- Python installed on your system (Python 3 recommended)\n- Flask library installed (`pip install Flask`)\n\n### Project Structure\nCreate a new directory for your project and set up the main Flask application file.\n\n```bash\nmkdir task_api\ncd task_api\ntouch app.py\n```\n\n### Implementation Code\n\n1. **Set up the Flask application:**\n\n    ```python\n    from flask import Flask, jsonify, request\n\n    app = Flask(__name__)\n\n    @app.route('/')\n    def home():\n        return \"Welcome to the Task API!\"\n\n    if __name__ == '__main__':\n        app.run(debug=True)\n    ```\n\n2. **Define the Task resource and helper function:**\n\n    ```python\n    tasks = []\n\n    def get_task(task_id):\n        for task in tasks:\n            if task['id'] == task_id:\n                return task\n        return None\n    ```\n\n3. **Implement CRUD operations:**\n\n    - **Create a Task (POST /tasks):**\n\n        ```python\n        @app.route('/tasks', methods=['POST'])\n        def create_task():\n            data = request.get_json()\n            if not data:\n                return jsonify({'error': 'No data provided'}), 400\n\n            title = data.get('title')\n            description = data.get('description')\n            due_date = data.get('due_date')\n\n            if not title or not due_date:\n                return jsonify({'error': 'Title and due_date are required'}), 400\n\n            task_id = len(tasks) + 1\n            task = {\n                'id': task_id,\n                'title': title,\n                'description': description,\n                'due_date': due_date\n            }\n            tasks.append(task)\n            return jsonify(task), 201\n        ```\n\n    - **Retrieve All Tasks (GET /tasks):**\n\n        ```python\n        @app.route('/tasks', methods=['GET'])\n        def get_tasks():\n            return jsonify(tasks), 200\n        ```\n\n    - **Retrieve a Single Task (GET /tasks/<int:task_id>):**\n\n        ```python\n        @app.route('/tasks/<int:task_id>', methods=['GET'])\n        def get_single_task(task_id):\n            task = get_task(task_id)\n            if task:\n                return jsonify(task), 200\n            else:\n                return jsonify({'error': 'Task not found'}), 404\n        ```\n\n    - **Update a Task (PUT /tasks/<int:task_id>):**\n\n        ```python\n        @app.route('/tasks/<int:task_id>', methods=['PUT'])\n        def update_task(task_id):\n            task = get_task(task_id)\n            if not task:\n                return jsonify({'error': 'Task not found'}), 404\n\n            data = request.get_json()\n            if not data:\n                return jsonify({'error': 'No data provided'}), 400\n\n            task['title'] = data.get('title', task['title'])\n            task['description'] = data.get('description', task['description'])\n            task['due_date'] = data.get('due_date', task['due_date'])\n\n            return jsonify(task), 200\n        ```\n\n    - **Delete a Task (DELETE /tasks/<int:task_id>):**\n\n        ```python\n        @app.route('/tasks/<int:task_id>', methods=['DELETE'])\n        def delete_task(task_id):\n            task = get_task(task_id)\n            if not task:\n                return jsonify({'error': 'Task not found'}), 404\n\n            tasks.remove(task)\n            return jsonify({'message': 'Task deleted successfully'}), 200\n        ```\n\n### Testing the API\n\nYou can test the API using `curl` or any API testing tool like Postman.\n\n- **Create a task:**\n\n    ```bash\n    curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Task 1\",\"due_date\":\"2023-10-01\"}' http://127.0.0.1:5000/tasks\n    ```\n\n- **Get all tasks:**\n\n    ```bash\n    curl http://127.0.0.1:5000/tasks\n    ```\n\n- **Get a single task:**\n\n    ```bash\n    curl http://127.0.0.1:5000/tasks/1\n    ```\n\n- **Update a task:**\n\n    ```bash\n    curl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Task 1\",\"due_date\":\"2023-10-02\"}' http://127.0.0.1:5000/tasks/1\n    ```\n\n- **Delete a task:**\n\n    ```bash\n    curl -X DELETE http://127.0.0.1:5000/tasks/1\n    ```\n\nThis basic API allows you to manage tasks with CRUD operations. For a production-level application, consider adding more robust error handling, input validation, and data persistence using a database."
    }
]