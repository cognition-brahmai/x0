[
    {
        "role": "user",
        "content": "Implement a RESTful API using Node.js and Express that supports CRUD operations on a collection of books. Each book should have a title, author, publication date, and ISBN number. The API should support endpoints for creating, reading, updating, and deleting individual books, as well as listing all books in the collection."
    },
    {
        "role": "assistant",
        "content": "To implement a RESTful API using Node.js and Express for managing a collection of books, you'll need to follow these steps:\n\n1. **Set up the project**: Initialize a new Node.js project and install necessary dependencies.\n2. **Set up Express server**: Create an Express application and define routes for CRUD operations.\n3. **Define book data model**: Create a simple in-memory data structure to store books.\n4. **Implement API endpoints**: Create endpoints for creating, reading, updating, and deleting books, as well as listing all books.\n\n### Step 1: Set up the project\n\nFirst, create a new directory for your project and initialize a new Node.js application:\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express body-parser\n```\n\n### Step 2: Set up Express server\n\nCreate a new file `app.js` and set up the basic Express server:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n### Step 3: Define book data model\n\nFor simplicity, use an in-memory array to store books. Each book will have `title`, `author`, `publicationDate`, and `isbn`.\n\n```javascript\nlet books = [];\nlet idCounter = 1;\n\nfunction getNextId() {\n  return idCounter++;\n}\n```\n\n### Step 4: Implement API endpoints\n\nDefine routes for CRUD operations:\n\n- **GET /books**: List all books.\n- **GET /books/:id**: Get a single book by ID.\n- **POST /books**: Create a new book.\n- **PUT /books/:id**: Update an existing book.\n- **DELETE /books/:id**: Delete a book.\n\n#### List all books\n\n```javascript\napp.get('/books', (req, res) => {\n  res.json(books);\n});\n```\n\n#### Get a single book by ID\n\n```javascript\napp.get('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('Book not found');\n  res.json(book);\n});\n```\n\n#### Create a new book\n\n```javascript\napp.post('/books', (req, res) => {\n  const { title, author, publicationDate, isbn } = req.body;\n  if (!title || !author || !publicationDate || !isbn) {\n    return res.status(400).send('All fields are required');\n  }\n\n  const newBook = {\n    id: getNextId(),\n    title,\n    author,\n    publicationDate,\n    isbn\n  };\n  books.push(newBook);\n  res.status(201).json(newBook);\n});\n```\n\n#### Update an existing book\n\n```javascript\napp.put('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('Book not found');\n\n  const { title, author, publicationDate, isbn } = req.body;\n  if (!title || !author || !publicationDate || !isbn) {\n    return res.status(400).send('All fields are required');\n  }\n\n  book.title = title;\n  book.author = author;\n  book.publicationDate = publicationDate;\n  book.isbn = isbn;\n  res.json(book);\n});\n```\n\n#### Delete a book\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n  const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (bookIndex === -1) return res.status(404).send('Book not found');\n\n  const deletedBook = books.splice(bookIndex, 1);\n  res.json(deletedBook[0]);\n});\n```\n\n### Complete `app.js`\n\nPutting it all together:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nlet books = [];\nlet idCounter = 1;\n\nfunction getNextId() {\n  return idCounter++;\n}\n\n// Get all books\napp.get('/books', (req, res) => {\n  res.json(books);\n});\n\n// Get a single book by ID\napp.get('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('Book not found');\n  res.json(book);\n});\n\n// Create a new book\napp.post('/books', (req, res) => {\n  const { title, author, publicationDate, isbn } = req.body;\n  if (!title || !author || !publicationDate || !isbn) {\n    return res.status(400).send('All fields are required');\n  }\n\n  const newBook = {\n    id: getNextId(),\n    title,\n    author,\n    publicationDate,\n    isbn\n  };\n  books.push(newBook);\n  res.status(201).json(newBook);\n});\n\n// Update an existing book\napp.put('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).send('Book not found');\n\n  const { title, author, publicationDate, isbn } = req.body;\n  if (!title || !author || !publicationDate || !isbn) {\n    return res.status(400).send('All fields are required');\n  }\n\n  book.title = title;\n  book.author = author;\n  book.publicationDate = publicationDate;\n  book.isbn = isbn;\n  res.json(book);\n});\n\n// Delete a book\napp.delete('/books/:id', (req, res) => {\n  const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (bookIndex === -1) return res.status(404).send('Book not found');\n\n  const deletedBook = books.splice(bookIndex, 1);\n  res.json(deletedBook[0]);\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n### Testing the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n- **List all books**: `GET http://localhost:3000/books`\n- **Get a single book**: `GET http://localhost:3000/books/1`\n- **Create a new book**: `POST http://localhost:3000/books` with JSON body\n- **Update a book**: `PUT http://localhost:3000/books/1` with JSON body\n- **Delete a book**: `DELETE http://localhost:3000/books/1`\n\nThis setup provides a basic RESTful API for managing a collection of books using Node.js and Express. For a production-level application, consider using a database to persist data and adding more robust error handling and validation."
    }
]