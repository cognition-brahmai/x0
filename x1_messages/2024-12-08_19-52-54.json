[
    {
        "role": "user",
        "content": "Develop a Python script that reads all files in a given directory and calculates the MD5 hash of each file's content. The output should be a dictionary where keys are filenames and values are their corresponding MD5 hashes.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To create a Python script that reads all files in a given directory and calculates the MD5 hash of each file's content, we'll need to use a few built-in modules: `os` for directory traversal, `hashlib` for generating MD5 hashes, and `sys` to handle the directory path from command line arguments.\n\nFirst, make sure you have Python installed on your system. You can download it from python.org if you haven't already.\n\nHere's a step-by-step guide to achieve this:\n\n1. **Import necessary modules**:\n   - `os` for interacting with the operating system.\n   - `hashlib` for hash functions.\n   - `sys` for command line arguments.\n\n2. **Get the directory path**:\n   - We'll take the directory path as a command line argument.\n\n3. **List all files in the directory**:\n   - Use `os.listdir()` to get all files in the specified directory.\n\n4. **Read each file and calculate its MD5 hash**:\n   - Open each file in binary mode.\n   - Read the content and update the MD5 hash object.\n   - Store the filename and its hash in a dictionary.\n\n5. **Print or return the dictionary**:\n   - You can print the dictionary or return it based on your needs.\n\nHere's a sample script that accomplishes this:\n\n```python\nimport os\nimport hashlib\nimport sys\n\ndef calculate_md5(file_path):\n    hash_md5 = hashlib.md5()\n    with open(file_path, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_md5.update(chunk)\n    return hash_md5.hexdigest()\n\ndef main(directory_path):\n    md5_dict = {}\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        if os.path.isfile(file_path):\n            md5_hash = calculate_md5(file_path)\n            md5_dict[filename] = md5_hash\n    return md5_dict\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py /path/to/directory\")\n        sys.exit(1)\n    \n    directory_path = sys.argv[1]\n    if not os.path.isdir(directory_path):\n        print(\"Error: Invalid directory path.\")\n        sys.exit(1)\n    \n    md5_hashes = main(directory_path)\n    for filename, md5 in md5_hashes.items():\n        print(f\"{filename}: {md5}\")\n```\n\n### Explanation:\n\n1. **calculate_md5 function**:\n   - This function takes a file path, reads the file in chunks (to handle large files efficiently), and updates the MD5 hash object with each chunk.\n   - It returns the hexadecimal representation of the MD5 hash.\n\n2. **main function**:\n   - This function iterates over all files in the specified directory.\n   - For each file, it calculates the MD5 hash using the `calculate_md5` function and stores the filename and hash in a dictionary.\n\n3. **Command-line interface**:\n   - The script expects one command line argument: the directory path.\n   - It checks if the provided path is a valid directory.\n   - It calls the `main` function and prints the dictionary of filenames and their MD5 hashes.\n\nTo run the script, save it to a file, for example, `calculate_md5.py`, and run it from the command line like this:\n\n```sh\npython calculate_md5.py /path/to/directory\n```\n\nReplace `/path/to/directory` with the actual directory path you want to scan.\n\nThis script should work on both Windows and Unix-like systems. If you have any issues or need further customization, feel free to ask!"
    }
]