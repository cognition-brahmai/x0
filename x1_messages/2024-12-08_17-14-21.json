[
    {
        "role": "user",
        "content": "Write a Python program to implement a stack data structure with push, pop and peek operations."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. So, a stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack will be the first one to be removed.\n\nIn Python, we can implement a stack using a list, where the end of the list acts as the top of the stack. This way, we can use the append() method to push elements onto the stack and the pop() method to remove elements from the stack.\n\nI'll guide you through creating a simple stack class with push, pop, and peek operations. Here's how we can do it step by step.\n\nFirst, let's define the class and the push operation.\n\n## Step 1: Define the Stack Class and the Push Operation\nWe'll start by creating a class called Stack. Inside this class, we'll initialize an empty list to serve as our stack. The push method will add elements to the top of the stack.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n```\n\nIn this code:\n- We define a class named Stack.\n- The `__init__` method initializes an empty list called items, which will hold the elements of the stack.\n- The push method takes an item as an argument and appends it to the end of the items list, which represents the top of the stack.\n\n## Step 2: Implement the Pop Operation\nNext, we need a way to remove the top element from the stack. This is done using the pop operation.\n\n```python\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return \"Stack is empty\"\n```\n\nHere:\n- The pop method checks if the stack is not empty using the is_empty method (which we'll define next).\n- If the stack is not empty, it removes and returns the last element of the items list using the pop() method.\n- If the stack is empty, it returns a message indicating that the stack is empty.\n\n## Step 3: Add the Peek Operation\nThe peek operation allows us to look at the top element of the stack without removing it.\n\n```python\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            return \"Stack is empty\"\n```\n\nIn this method:\n- We check if the stack is not empty.\n- If it's not empty, we return the last element of the items list (the top of the stack) without removing it.\n- If the stack is empty, we return a message saying the stack is empty.\n\n## Step 4: Implement the is_empty and size Operations\nIt's also useful to have methods to check if the stack is empty and to get the number of elements in the stack.\n\n```python\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n\nHere:\n- The is_empty method returns True if the stack has no elements, otherwise False.\n- The size method returns the number of elements in the stack.\n\n## Complete Stack Class\nPutting it all together, here's the complete Stack class:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return \"Stack is empty\"\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            return \"Stack is empty\"\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n\n## Example Usage\nLet's see how to use this Stack class:\n\n```python\n# Create a new stack\nstack = Stack()\n\n# Check if the stack is empty\nprint(stack.is_empty())  # Output: True\n\n# Push some items onto the stack\nstack.push(1)\nstack.push(2)\nstack.push(3)\n\n# Check the size of the stack\nprint(stack.size())  # Output: 3\n\n# Peek at the top item\nprint(stack.peek())  # Output: 3\n\n# Pop an item from the stack\nprint(stack.pop())  # Output: 3\n\n# Peek again\nprint(stack.peek())  # Output: 2\n\n# Pop all items\nprint(stack.pop())  # Output: 2\nprint(stack.pop())  # Output: 1\n\n# Try to pop from an empty stack\nprint(stack.pop())  # Output: Stack is empty\n\n# Check if the stack is empty\nprint(stack.is_empty())  # Output: True\n```\n\nThis should give you a good starting point for implementing a stack in Python. Let me know if you have any questions or need further explanation on any part of this implementation!"
    }
]