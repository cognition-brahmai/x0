[
    {
        "role": "user",
        "content": "Create a GoLang program that compresses a folder containing multiple files into a single ZIP archive. The program should support command line arguments for the source folder path and destination ZIP file path. Ensure proper error handling and clean up resources after compression is complete."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a GoLang program that compresses a folder containing multiple files into a single ZIP archive. The program accepts command-line arguments for the source folder path and the destination ZIP file path. It includes proper error handling and ensures that resources are cleaned up after compression is complete.\n\n```go\npackage main\n\nimport (\n\t\"archive/zip\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n\t\"path/filepath\"\n)\n\nfunc main() {\n\tif len(os.Args) != 3 {\n\t\tfmt.Println(\"Usage: go run main.go <source_folder> <destination_zip>\")\n\t\tos.Exit(1)\n\t}\n\n\tsrc := os.Args[1]\n\tdst := os.Args[2]\n\n\terr := compressFolder(src, dst)\n\tif err != nil {\n\t\tfmt.Printf(\"Error compressing folder: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"Successfully compressed '%s' to '%s'\\n\", src, dst)\n}\n\nfunc compressFolder(src, dst string) error {\n\t// Create a new zip archive.\n\tzipfile, err := os.Create(dst)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create zip file: %w\", err)\n\t}\n\tdefer zipfile.Close()\n\n\t// Create a new zip archive writer.\n\tzipwriter := zip.NewWriter(zipfile)\n\tdefer zipwriter.Close()\n\n\t// Walk through all files and directories within the source folder.\n\terr = filepath.Walk(src, func(path string, info os.FileInfo, err error) error {\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error walking path %s: %w\", path, err)\n\t\t}\n\n\t\t// Skip the source folder itself.\n\t\tif path == src {\n\t\t\treturn nil\n\t\t}\n\n\t\t// Calculate the relative path for the zip entry.\n\t\trelativePath, err := filepath.Rel(src, path)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error getting relative path for %s: %w\", path, err)\n\t\t}\n\n\t\t// Create a zip file header.\n\t\theader, err := zip.FileInfoHeader(info)\n\t\tif err != nil {\n\t\t\treturn fmt.Errorf(\"error creating header for %s: %w\", path, err)\n\t\t}\n\n\t\t// Set the correct path for the entry.\n\t\theader.Name = filepath.ToSlash(relativePath)\n\n\t\t// If it's a directory, set the name to end with a slash.\n\t\tif info.IsDir() {\n\t\t\theader.Name += \"/\"\n\t\t} else {\n\t\t\t// Add the file to the zip archive.\n\t\t\twriter, err := zipwriter.CreateHeader(header)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error creating zip entry for %s: %w\", path, err)\n\t\t\t}\n\n\t\t\t// Copy file data to the zip archive.\n\t\t\tfile, err := os.Open(path)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error opening file %s: %w\", path, err)\n\t\t\t}\n\t\t\tdefer file.Close()\n\n\t\t\t_, err = io.Copy(writer, file)\n\t\t\tif err != nil {\n\t\t\t\treturn fmt.Errorf(\"error copying file %s to zip: %w\", path, err)\n\t\t\t}\n\t\t}\n\n\t\treturn nil\n\t})\n\n\tif err != nil {\n\t\treturn fmt.Errorf(\"error walking source folder: %w\", err)\n\t}\n\n\treturn nil\n}\n```\n\n### Explanation:\n\n1. **Command Line Arguments:**\n   - The program expects two command-line arguments: the source folder path and the destination ZIP file path.\n   - If the number of arguments is incorrect, it prints usage information and exits.\n\n2. **ZIP File Creation:**\n   - A new ZIP file is created using `os.Create`.\n   - A `zip.Writer` is associated with this file to handle writing ZIP entries.\n\n3. **Walking the Source Folder:**\n   - The `filepath.Walk` function traverses all files and directories within the source folder.\n   - For each file or directory, a ZIP entry is created with the appropriate header and name.\n\n4. **Adding Files to ZIP:**\n   - For each file, a ZIP entry is created using `zipwriter.CreateHeader`.\n   - The file content is read and copied to the ZIP entry using `io.Copy`.\n\n5. **Error Handling:**\n   - The program includes comprehensive error handling at each step to ensure any issues are caught and reported.\n   - Resources like open files and the ZIP writer are properly closed using defer statements to avoid leaks.\n\nThis program should effectively compress a folder into a ZIP archive while handling various edge cases and ensuring resource cleanliness."
    }
]