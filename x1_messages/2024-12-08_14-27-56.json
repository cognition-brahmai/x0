[
    {
        "role": "user",
        "content": "Create a Java program that simulates a simple banking system. Users should be able to create accounts, deposit money, withdraw money, and check their balance. Use SQLite as the database for storing account information.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I've got this task to create a simple banking system in Java that uses SQLite for storing account information. Users should be able to create accounts, deposit and withdraw money, and check their balance. I'm excited to work on this, but I need to make sure I get it right.\n\nFirst things first, I need to set up the SQLite database. I'm not super familiar with SQLite, but I know it's a lightweight database that doesn't require a separate server process. That should make things easier. I need to create a table to store account information. What fields should I include? Probably something like account number, customer name, and balance.\n\nLet me think about the account number. It should be unique for each account. Maybe I can generate it automatically when a new account is created. Maybe using some kind of counter or perhaps using UUIDs. But UUIDs might be overkill for a simple system. Maybe just starting from 1 and incrementing by 1 for each new account.\n\nOkay, so the table schema could be something like:\n\n- account_number INTEGER PRIMARY KEY AUTOINCREMENT\n\n- name TEXT NOT NULL\n\n- balance REAL NOT NULL DEFAULT 0.0\n\nThat should work. I need to make sure that the account_number is unique and automatically incremented, and that the name is not null, and balance is a real number with a default value of 0.0.\n\nNow, I need to set up the Java environment to connect to SQLite. I need to include the SQLite JDBC driver in my project. Since I'm using IntelliJ IDEA, I can add the dependency in Maven or Gradle. I think I'll go with Maven for this project.\n\nSo, I need to add the SQLite JDBC dependency in my pom.xml file. A quick search tells me that the group ID is org.xerial and the artifact ID is sqlite-jdbc. I'll add the latest version available.\n\nAlright, with the database set up, now I need to think about the program's structure. It should have a menu where users can choose to create an account, deposit money, withdraw money, check balance, or exit the program.\n\nI need to handle user inputs carefully to avoid errors. For example, when withdrawing money, I need to make sure that the account has sufficient funds. If not, I should display an error message.\n\nAlso, I need to ensure that the database transactions are handled properly, meaning that I need to commit changes after deposits and withdrawals to persist the data.\n\nLet me sketch out the steps for each operation:\n\n1. Create Account:\n\n- Prompt user for name\n\n- Generate account number\n\n- Insert into database with initial balance of 0.0\n\n- Display account number to user\n\n2. Deposit Money:\n\n- Prompt user for account number\n\n- Verify if account exists\n\n- If exists, prompt for deposit amount\n\n- Update balance in database\n\n- Display success message\n\n3. Withdraw Money:\n\n- Prompt user for account number\n\n- Verify if account exists\n\n- If exists, prompt for withdrawal amount\n\n- Check if sufficient balance is available\n\n- If yes, update balance in database\n\n- Else, display insufficient funds message\n\n4. Check Balance:\n\n- Prompt user for account number\n\n- Verify if account exists\n\n- If exists, display balance\n\n5. Exit:\n\n- Close database connection\n\n- Exit the program\n\nI need to make sure that the program keeps running until the user chooses to exit. So, I'll probably use a loop in the main method that displays the menu and waits for user input.\n\nNow, let's think about how to implement this. I'll need to create a class, say, BankingSystem, which will have methods for each operation: createAccount, deposit, withdraw, checkBalance.\n\nI'll also need a method to connect to the SQLite database and another to close the connection.\n\nLet me start by setting up the database connection. I can create a method named connectToDatabase that establishes a connection to the SQLite database file.\n\nI need to handle exceptions properly, especially when dealing with database operations. So, I'll use try-catch blocks wherever necessary.\n\nAlso, for generating account numbers, I can query the database to get the highest account number and then increment it by 1 for a new account.\n\nWait, but I've set account_number as AUTOINCREMENT, so maybe I don't need to worry about generating it manually. I can let the database handle it.\n\nYes, that's a better approach. So, when inserting a new account, I can omit the account_number field, and the database will assign a unique value automatically.\n\nThat simplifies things.\n\nNow, for the createAccount method:\n\n- Prompt user for name\n\n- Prepare an SQL INSERT statement to add a new row with the provided name and default balance of 0.0\n\n- Execute the INSERT statement\n\n- Retrieve the generated account_number (using lastInsertRowId or similar)\n\n- Display the account_number to the user\n\nFor deposit and withdrawal, I'll need to update the balance field in the database for the specified account_number.\n\nI need to make sure that the account exists before performing any operations. So, I'll need a helper method to check if an account exists given an account_number.\n\nSimilarly, for withdrawal, I need to check if the current balance is greater than or equal to the withdrawal amount.\n\nI should also consider scenarios like invalid account numbers, negative deposit amounts, and so on. I need to handle these edge cases appropriately.\n\nLet me think about the user interface. It should be text-based, probably using the console for input and output.\n\nI can use Scanner class to read user inputs.\n\nI need to display a menu with options, something like:\n\n--------------------\n\nSimple Banking System\n\nPlease choose an option:\n\n1. Create Account\n\n2. Deposit Money\n\n3. Withdraw Money\n\n4. Check Balance\n\n5. Exit\n\n--------------------\n\nThen, based on the user's choice, call the corresponding method.\n\nI need to make sure that the program loops back to the menu after each operation, except when the user chooses to exit.\n\nFor the exit option, I need to close the database connection properly before terminating the program.\n\nAlright, I think I have a plan. Let me start implementing this step by step.\n\nFirst, set up the database schema.\n\nI'll create a script to create the accounts table.\n\nCREATE TABLE accounts (\n\naccount_number INTEGER PRIMARY KEY AUTOINCREMENT,\n\nname TEXT NOT NULL,\n\nbalance REAL NOT NULL DEFAULT 0.0\n\n);\n\nI can run this script using SQLite command line or include it in my Java code during the first run.\n\nProbably, it's better to include it in the Java code to make sure the table exists before performing any operations.\n\nSo, in the connectToDatabase method, I can check if the table exists, and if not, create it.\n\nNow, let's think about the BankingSystem class.\n\nIt should have the following methods:\n\n- connectToDatabase(): to establish a connection to the SQLite database\n\n- closeDatabase(): to close the database connection\n\n- createAccount(): to create a new account\n\n- deposit(): to deposit money into an account\n\n- withdraw(): to withdraw money from an account\n\n- checkBalance(): to check the balance of an account\n\n- displayMenu(): to display the menu and handle user choices\n\n- main(): to run the program\n\nI need to handle exceptions properly, especially SQLExceptions.\n\nAlso, I need to make sure that the program doesn't crash if there are any errors, but instead displays a user-friendly error message and continues running.\n\nNow, let's think about how to structure the methods.\n\nFor createAccount:\n\n- Prompt user for name\n\n- Insert into accounts table with the provided name and default balance of 0.0\n\n- Retrieve the generated account_number\n\n- Display the account_number to the user\n\nIn Java, after executing an INSERT statement, I can use ResultSet's getGeneratedKeys method to retrieve the auto-generated account_number.\n\nFor deposit:\n\n- Prompt user for account_number\n\n- Verify if the account exists\n\n- If exists, prompt for deposit amount\n\n- Update the balance by adding the deposit amount\n\n- Commit the transaction\n\n- Display success message\n\nFor withdraw:\n\n- Prompt user for account_number\n\n- Verify if the account exists\n\n- If exists, prompt for withdrawal amount\n\n- Check if current balance >= withdrawal amount\n\n- If yes, update the balance by subtracting the withdrawal amount\n\n- Commit the transaction\n\n- Else, display insufficient funds message\n\nFor checkBalance:\n\n- Prompt user for account_number\n\n- Verify if the account exists\n\n- If exists, retrieve and display the balance\n\nI need to make sure that the account exists before performing any operations on it.\n\nSo, I can create a helper method, say, doesAccountExist(accountNumber), which queries the database and returns true if the account exists, else false.\n\nNow, let's think about how to handle user inputs.\n\nI'll use Scanner class to read inputs from the console.\n\nI need to handle cases where the user enters non-numeric values for account numbers or amounts.\n\nSo, I should validate the inputs and prompt the user to enter valid data if necessary.\n\nFor example, when asking for an account_number, I should check if it's a positive integer.\n\nSimilarly, for amounts, I should ensure that they are positive numbers.\n\nI can use Scanner's nextInt() or nextDouble() methods, but I need to handle InputMismatchException in case the user enters invalid data.\n\nSo, I'll wrap these calls in try-catch blocks and prompt the user again if an exception occurs.\n\nAlso, I need to make sure that the program doesn't crash if there are any database errors, but instead displays an error message and continues running.\n\nNow, let's think about how to display the menu and handle user choices.\n\nI can create a loop in the main method that displays the menu and waits for user input.\n\nBased on the user's choice, it calls the corresponding method.\n\nAfter each operation, it loops back to the menu until the user chooses to exit.\n\nFor the exit option, I need to make sure that the database connection is closed properly before terminating the program.\n\nI can use a boolean variable to control the loop, say, running = true, and set it to false when the user chooses to exit.\n\nNow, let's think about how to organize the code.\n\nI can have a BankingSystem class that contains all the methods mentioned above.\n\nIn the main method, I can create an instance of BankingSystem and call the displayMenu method.\n\nAlternatively, I can have the displayMenu method in the main class itself.\n\nI think having everything in one class is fine for a simple program like this.\n\nNow, let's think about how to test the program.\n\nI need to test each functionality separately:\n\n1. Create Account:\n\n- Test creating a new account with valid name\n\n- Check if the account is created successfully and the account_number is assigned\n\n- Test creating multiple accounts\n\n2. Deposit Money:\n\n- Test depositing money into an existing account\n\n- Check if the balance is updated correctly\n\n- Test depositing zero or negative amounts (should be rejected)\n\n- Test depositing into a non-existent account (should display error)\n\n3. Withdraw Money:\n\n- Test withdrawing money from an existing account with sufficient balance\n\n- Check if the balance is updated correctly\n\n- Test withdrawing more than the balance (should display insufficient funds)\n\n- Test withdrawing zero or negative amounts (should be rejected)\n\n- Test withdrawing from a non-existent account (should display error)\n\n4. Check Balance:\n\n- Test checking balance of an existing account\n\n- Check if the correct balance is displayed\n\n- Test checking balance of a non-existent account (should display error)\n\nI need to make sure that the database persists the data between program runs. That is, if I create an account, exit the program, and run it again, the account should still exist.\n\nAlso, I need to make sure that account_numbers are unique and automatically incremented.\n\nNow, let's think about potential issues and how to handle them.\n\n1. Concurrent access: Since this is a simple program running on a single thread, I don't need to worry about concurrent access to the database.\n\n2. Data validation: I need to validate user inputs to prevent SQL injection or other errors.\n\n   - For example, when inserting the name, I need to escape any special characters.\n\n   - But since I'm using prepared statements, this should be handled automatically.\n\n3. Error handling: I need to handle exceptions gracefully and provide meaningful error messages to the user.\n\n4. Database connection: Make sure that the database connection is closed properly when the program exits.\n\nNow, let's start implementing the code.\n\nFirst, set up the Maven project and add the SQLite JDBC dependency.\n\nThen, create the BankingSystem class.\n\nIn the connectToDatabase method, establish a connection to the SQLite database.\n\nI need to specify the database file path. I can use a file named \"banking.db\" in the current directory.\n\nIf the database file doesn't exist, it will be created automatically.\n\nThen, create the accounts table if it doesn't already exist.\n\nIn the createAccount method, prompt the user for the name, insert into the table, and retrieve the generated account_number.\n\nIn the deposit method, prompt for account_number and deposit amount, update the balance, and commit the transaction.\n\nSimilarly, in the withdraw method, prompt for account_number and withdrawal amount, check balance, update balance if sufficient funds, else display error.\n\nIn the checkBalance method, prompt for account_number and display the balance if the account exists.\n\nIn the displayMenu method, show the menu and wait for user input. Based on the choice, call the corresponding method.\n\nUse a loop to keep displaying the menu until the user chooses to exit.\n\nIn the main method, create an instance of BankingSystem, connect to the database, display the menu, and finally close the database connection when exiting.\n\nNow, let's think about how to handle the database connection.\n\nI can have a instance variable for the Connection object in the BankingSystem class.\n\nInitialize it in the connectToDatabase method and close it in the closeDatabase method.\n\nMake sure to call closeDatabase when the program is exiting.\n\nAlso, I need to handle SQLExceptions properly, displaying error messages without crashing the program.\n\nNow, let's think about the user interface.\n\nI need to make it user-friendly, with clear instructions and error messages.\n\nFor example, when creating an account, prompt the user to enter their name.\n\nAfter creating the account, display the assigned account_number.\n\nWhen depositing or withdrawing, prompt for the account_number and the amount.\n\nDisplay success or error messages accordingly.\n\nWhen checking balance, prompt for the account_number and display the current balance.\n\nMake sure that the program doesn't crash if the user enters invalid inputs, but instead displays an error message and asks for valid input.\n\nNow, let's think about how to implement the doesAccountExist method.\n\nIt can take an account_number as parameter, query the database for a row with that account_number, and return true if found, else false.\n\nI can execute a SELECT query with account_number as condition and check if any rows are returned.\n\nNow, let's consider implementing the methods one by one.\n\nFirst, connectToDatabase:\n\n- Use DriverManager.getConnection to connect to the SQLite database file\n\n- If successful, store the Connection object in an instance variable\n\n- Handle SQLExceptions and display error messages\n\nSecond, closeDatabase:\n\n- Check if the Connection object is not null\n\n- Call conn.close()\n\n- Set the Connection object to null\n\n- Handle SQLExceptions\n\nThird, createAccount:\n\n- Prompt user for name\n\n- Prepare an INSERT statement to insert the name into accounts table\n\n- Execute the INSERT statement\n\n- Get the generated account_number using getGeneratedKeys()\n\n- Display the account_number to the user\n\n- Handle SQLExceptions and display error messages\n\nFourth, deposit:\n\n- Prompt user for account_number\n\n- Validate if it's a positive integer\n\n- Check if the account exists using doesAccountExist()\n\n- If exists, prompt for deposit amount\n\n- Validate if it's a positive number\n\n- Update the balance by adding the deposit amount\n\n- Commit the transaction\n\n- Display success message\n\n- If account doesn't exist, display error message\n\n- Handle SQLExceptions and display error messages\n\nFifth, withdraw:\n\n- Prompt user for account_number\n\n- Validate if it's a positive integer\n\n- Check if the account exists using doesAccountExist()\n\n- If exists, prompt for withdrawal amount\n\n- Validate if it's a positive number\n\n- Retrieve the current balance\n\n- If current balance >= withdrawal amount, update the balance by subtracting the withdrawal amount\n\n- Commit the transaction\n\n- Else, display insufficient funds message\n\n- If account doesn't exist, display error message\n\n- Handle SQLExceptions and display error messages\n\nSixth, checkBalance:\n\n- Prompt user for account_number\n\n- Validate if it's a positive integer\n\n- Check if the account exists using doesAccountExist()\n\n- If exists, retrieve and display the balance\n\n- If account doesn't exist, display error message\n\n- Handle SQLExceptions and display error messages\n\nSeventh, displayMenu:\n\n- Use a loop to repeatedly display the menu and wait for user input\n\n- Based on the choice, call the corresponding method\n\n- If choice is 5, set running = false to exit the loop\n\n- Handle invalid choices by displaying an error message\n\nNow, let's think about how to handle user inputs.\n\nI'll use Scanner class to read inputs from the console.\n\nFor getting the account_number and amounts, I'll use nextInt() and nextDouble() methods.\n\nBut these methods can throw InputMismatchException if the user enters non-numeric values.\n\nSo, I need to wrap these calls in try-catch blocks and handle the exceptions by displaying error messages and prompting the user again.\n\nI can create helper methods for getting valid inputs, like getValidAccountNumber() and getValidAmount(), which keep asking the user until a valid input is provided.\n\nThis will make the code cleaner and more manageable.\n\nNow, let's think about implementing these helper methods.\n\nFor getValidAccountNumber():\n\n- Prompt the user to enter the account_number\n\n- Use scanner.nextInt() to read the input\n\n- Handle InputMismatchException by displaying an error message and prompting again\n\n- Also, check if the account_number is positive\n\n- If not, display an error message and prompt again\n\n- Return the valid account_number\n\nSimilarly, for getValidAmount():\n\n- Prompt the user to enter the amount\n\n- Use scanner.nextDouble() to read the input\n\n- Handle InputMismatchException by displaying an error message and prompting again\n\n- Also, check if the amount is positive\n\n- If not, display an error message and prompt again\n\n- Return the valid amount\n\nBy using these helper methods, I can ensure that the program doesn't proceed with invalid inputs.\n\nNow, let's think about how to display messages to the user.\n\nI need to use System.out.println() to display information and prompts.\n\nAlso, after each operation, I should display a message indicating success or failure.\n\nFor example, after creating an account, display \"Account created successfully. Your account number is: XXXX\"\n\nAfter depositing, display \"Deposit successful. New balance: XXXX\"\n\nAfter withdrawing, display \"Withdrawal successful. New balance: XXXX\" or \"Insufficient funds\"\n\nAfter checking balance, display \"Your balance is: XXXX\" or \"Account not found\"\n\nI need to make sure that the messages are clear and helpful to the user.\n\nNow, let's think about how to structure the code for better readability.\n\nI can organize the methods in the following order:\n\n- connectToDatabase()\n\n- closeDatabase()\n\n- doesAccountExist()\n\n- createAccount()\n\n- deposit()\n\n- withdraw()\n\n- checkBalance()\n\n- displayMenu()\n\n- main()\n\nI can add comments to explain what each method does.\n\nAlso, I can use meaningful variable names and follow Java naming conventions.\n\nNow, let's consider writing some test cases to verify the functionality.\n\nSince it's a console-based application, I need to manually test each feature.\n\nI can create a few accounts, deposit some money, withdraw money, and check balances to ensure that everything works as expected.\n\nI should also test edge cases, like depositing zero or negative amounts, withdrawing more than the balance, and operating on non-existent accounts.\n\nAdditionally, I need to ensure that the data persists across program runs. That is, if I create an account, exit the program, and run it again, the account should still be there.\n\nNow, let's think about potential improvements or extensions.\n\n- Currently, the program only handles one type of account. We could extend it to support different types of accounts, like savings or checking.\n\n- We could add features like transferring money between accounts.\n\n- Implementing user authentication to protect account access.\n\n- Adding transaction history for each account.\n\n- Using a more robust database system for better performance and features.\n\nBut for now, I'll stick to the basic requirements.\n\nAlright, I think I've planned this out sufficiently. Time to start coding.\n\n## Final Solution\nTo create a simple banking system in Java that uses SQLite for storing account information, follow these steps:\n\n### Prerequisites\n1. Ensure you have Java installed.\n2. Set up a Maven project.\n3. Add the SQLite JDBC dependency in your `pom.xml`:\n    ```xml\n    <dependency>\n        <groupId>org.xerial</groupId>\n        <artifactId>sqlite-jdbc</artifactId>\n        <version>3.36.0.3</version>\n    </dependency>\n    ```\n\n### Solution Code\n\n```java\nimport java.sql.*;\nimport java.util.Scanner;\n\npublic class BankingSystem {\n    private Connection conn;\n\n    public static void main(String[] args) {\n        BankingSystem bankingSystem = new BankingSystem();\n        try {\n            bankingSystem.connectToDatabase();\n            bankingSystem.displayMenu();\n        } catch (SQLException e) {\n            System.err.println(\"Database error: \" + e.getMessage());\n        } finally {\n            bankingSystem.closeDatabase();\n        }\n    }\n\n    public void connectToDatabase() throws SQLException {\n        String url = \"jdbc:sqlite:banking.db\";\n        conn = DriverManager.getConnection(url);\n        createTableIfNotExists();\n    }\n\n    private void createTableIfNotExists() {\n        String sql = \"CREATE TABLE IF NOT EXISTS accounts (\" +\n                \"account_number INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                \"name TEXT NOT NULL,\" +\n                \"balance REAL NOT NULL DEFAULT 0.0\" +\n                \");\";\n        try (Statement stmt = conn.createStatement()) {\n            stmt.execute(sql);\n        } catch (SQLException e) {\n            System.err.println(\"Error creating table: \" + e.getMessage());\n        }\n    }\n\n    public void closeDatabase() {\n        try {\n            if (conn != null) {\n                conn.close();\n            }\n        } catch (SQLException ex) {\n            System.err.println(\"Error closing database: \" + ex.getMessage());\n        }\n    }\n\n    public void createAccount() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter your name: \");\n        String name = scanner.nextLine();\n\n        String sql = \"INSERT INTO accounts(name) VALUES(?)\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {\n            pstmt.setString(1, name);\n            pstmt.executeUpdate();\n            try (ResultSet generatedKeys = pstmt.getGeneratedKeys()) {\n                if (generatedKeys.next()) {\n                    int accountNumber = generatedKeys.getInt(1);\n                    System.out.println(\"Account created successfully. Your account number is: \" + accountNumber);\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error creating account: \" + e.getMessage());\n        }\n    }\n\n    public void deposit() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter account number: \");\n        int accountNumber = scanner.nextInt();\n        if (!doesAccountExist(accountNumber)) {\n            System.out.println(\"Account not found.\");\n            return;\n        }\n\n        System.out.print(\"Enter deposit amount: \");\n        double amount = scanner.nextDouble();\n        if (amount <= 0) {\n            System.out.println(\"Deposit amount must be positive.\");\n            return;\n        }\n\n        String sql = \"UPDATE accounts SET balance = balance + ? WHERE account_number = ?\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setDouble(1, amount);\n            pstmt.setInt(2, accountNumber);\n            pstmt.executeUpdate();\n            System.out.println(\"Deposit successful.\");\n        } catch (SQLException e) {\n            System.err.println(\"Error depositing amount: \" + e.getMessage());\n        }\n    }\n\n    public void withdraw() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter account number: \");\n        int accountNumber = scanner.nextInt();\n        if (!doesAccountExist(accountNumber)) {\n            System.out.println(\"Account not found.\");\n            return;\n        }\n\n        System.out.print(\"Enter withdrawal amount: \");\n        double amount = scanner.nextDouble();\n        if (amount <= 0) {\n            System.out.println(\"Withdrawal amount must be positive.\");\n            return;\n        }\n\n        String sql = \"SELECT balance FROM accounts WHERE account_number = ?\";\n        double currentBalance = 0.0;\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, accountNumber);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                if (rs.next()) {\n                    currentBalance = rs.getDouble(\"balance\");\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error checking balance: \" + e.getMessage());\n            return;\n        }\n\n        if (currentBalance < amount) {\n            System.out.println(\"Insufficient funds.\");\n            return;\n        }\n\n        sql = \"UPDATE accounts SET balance = balance - ? WHERE account_number = ?\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setDouble(1, amount);\n            pstmt.setInt(2, accountNumber);\n            pstmt.executeUpdate();\n            System.out.println(\"Withdrawal successful.\");\n        } catch (SQLException e) {\n            System.err.println(\"Error withdrawing amount: \" + e.getMessage());\n        }\n    }\n\n    public void checkBalance() {\n        Scanner scanner = new Scanner(System.in);\n        System.out.print(\"Enter account number: \");\n        int accountNumber = scanner.nextInt();\n        if (!doesAccountExist(accountNumber)) {\n            System.out.println(\"Account not found.\");\n            return;\n        }\n\n        String sql = \"SELECT balance FROM accounts WHERE account_number = ?\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, accountNumber);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                if (rs.next()) {\n                    double balance = rs.getDouble(\"balance\");\n                    System.out.println(\"Your balance is: \" + balance);\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error checking balance: \" + e.getMessage());\n        }\n    }\n\n    private boolean doesAccountExist(int accountNumber) {\n        String sql = \"SELECT 1 FROM accounts WHERE account_number = ?\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, accountNumber);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                return rs.next();\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error checking account existence: \" + e.getMessage());\n            return false;\n        }\n    }\n\n    public void displayMenu() {\n        Scanner scanner = new Scanner(System.in);\n        boolean running = true;\n        while (running) {\n            System.out.println(\"--------------------\");\n            System.out.println(\"Simple Banking System\");\n            System.out.println(\"Please choose an option:\");\n            System.out.println(\"1. Create Account\");\n            System.out.println(\"2. Deposit Money\");\n            System.out.println(\"3. Withdraw Money\");\n            System.out.println(\"4. Check Balance\");\n            System.out.println(\"5. Exit\");\n            System.out.println(\"--------------------\");\n\n            int choice = scanner.nextInt();\n            switch (choice) {\n                case 1:\n                    createAccount();\n                    break;\n                case 2:\n                    deposit();\n                    break;\n                case 3:\n                    withdraw();\n                    break;\n                case 4:\n                    checkBalance();\n                    break;\n                case 5:\n                    running = false;\n                    break;\n                default:\n                    System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Database Setup**:\n   - Connect to an SQLite database named `banking.db`.\n   - Create a table `accounts` if it doesn't exist, with fields for account number, name, and balance.\n\n2. **Banking Operations**:\n   - **Create Account**: Insert a new row into the `accounts` table with the provided name and a default balance of 0.0, and display the generated account number.\n   - **Deposit Money**: Update the balance by adding the deposit amount for the specified account number.\n   - **Withdraw Money**: Update the balance by subtracting the withdrawal amount if sufficient funds are available.\n   - **Check Balance**: Retrieve and display the balance for the specified account number.\n\n3. **User Interface**:\n   - A menu-driven interface allows users to select operations via console input.\n   - The program loops back to the menu after each operation until the user chooses to exit.\n\n4. **Error Handling**:\n   - Handles invalid inputs and database errors, ensuring the program remains stable and provides useful feedback to the user.\n\nThis solution provides a basic framework for a banking system, suitable for educational and initial prototyping purposes. For production systems, additional features like transaction management, security measures, and scalability considerations should be implemented."
    }
]