[
    {
        "role": "user",
        "content": "Create a Node.js Express server with endpoints to perform CRUD operations on a MongoDB collection of \"Books\". Each book document should have title, author, publication date, and genre fields. Implement proper error handling and validation for each endpoint.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through setting up a Node.js Express server that interacts with a MongoDB database to perform CRUD operations on a collection of books. Each book will have fields for title, author, publication date, and genre. We'll also implement validation and error handling for each endpoint.\n\n### Step 1: Set Up Your Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\n### Step 2: Install Necessary Packages\n\nYou'll need several npm packages for this project:\n\n- `express`: For setting up the server.\n- `mongoose`: For interacting with MongoDB.\n- `body-parser`: For parsing request bodies.\n- `validator`: For input validation.\n\nInstall these packages using npm:\n\n```bash\nnpm install express mongoose body-parser validator\n```\n\n### Step 3: Set Up Your MongoDB Connection\n\nCreate a `.env` file to store your MongoDB connection string.\n\n```\nMONGODB_URI=mongodb://localhost:27017/bookdb\n```\n\nThen, create a `config.js` file to read this environment variable.\n\n```javascript\nrequire('dotenv').config();\nmodule.exports = {\n  MONGODB_URI: process.env.MONGODB_URI,\n};\n```\n\n### Step 4: Connect to MongoDB\n\nCreate a `db.js` file to handle the MongoDB connection.\n\n```javascript\nconst mongoose = require('mongoose');\nconst config = require('./config');\n\nmongoose.connect(config.MONGODB_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\n\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\n\nmodule.exports = db;\n```\n\n### Step 5: Define the Book Schema and Model\n\nCreate a `book.model.js` file to define the book schema and model.\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  genre: { type: String, required: true },\n});\n\nmodule.exports = mongoose.model('Book', bookSchema);\n```\n\n### Step 6: Set Up the Express Server\n\nCreate an `app.js` file to set up your Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst bookRoutes = require('./routes/book.routes');\nconst db = require('./db');\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\napp.use('/books', bookRoutes);\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n```\n\n### Step 7: Create Routes for CRUD Operations\n\nCreate a `routes` directory and inside it, create a `book.routes.js` file.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst bookController = require('../controllers/book.controller');\n\nrouter.get('/', bookController.getAllBooks);\nrouter.get('/:id', bookController.getBookById);\nrouter.post('/', bookController.createBook);\nrouter.put('/:id', bookController.updateBook);\nrouter.delete('/:id', bookController.deleteBook);\n\nmodule.exports = router;\n```\n\n### Step 8: Implement Controllers for Each Endpoint\n\nCreate a `controllers` directory and inside it, create a `book.controller.js` file.\n\n```javascript\nconst Book = require('../models/book.model');\nconst validator = require('validator');\n\n// Get all books\nexports.getAllBooks = async (req, res) => {\n  try {\n    const books = await Book.find();\n    res.json(books);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\n// Get book by ID\nexports.getBookById = async (req, res) => {\n  try {\n    const book = await Book.findById(req.params.id);\n    if (!book) return res.status(404).json({ message: 'Book not found' });\n    res.json(book);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\n// Create a new book\nexports.createBook = async (req, res) => {\n  const { title, author, publicationDate, genre } = req.body;\n\n  // Validation\n  if (!title || !author || !publicationDate || !genre) {\n    return res.status(400).json({ message: 'All fields are required' });\n  }\n\n  if (!validator.isDate(publicationDate)) {\n    return res.status(400).json({ message: 'Invalid publication date' });\n  }\n\n  const book = new Book({\n    title,\n    author,\n    publicationDate,\n    genre,\n  });\n\n  try {\n    const newBook = await book.save();\n    res.status(201).json(newBook);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\n// Update a book\nexports.updateBook = async (req, res) => {\n  const { title, author, publicationDate, genre } = req.body;\n\n  // Validation\n  if (!title && !author && !publicationDate && !genre) {\n    return res.status(400).json({ message: 'At least one field must be provided' });\n  }\n\n  const updateData = {};\n  if (title) updateData.title = title;\n  if (author) updateData.author = author;\n  if (publicationDate) {\n    if (!validator.isDate(publicationDate)) {\n      return res.status(400).json({ message: 'Invalid publication date' });\n    }\n    updateData.publicationDate = publicationDate;\n  }\n  if (genre) updateData.genre = genre;\n\n  try {\n    const book = await Book.findByIdAndUpdate(req.params.id, updateData, { new: true });\n    if (!book) return res.status(404).json({ message: 'Book not found' });\n    res.json(book);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\n// Delete a book\nexports.deleteBook = async (req, res) => {\n  try {\n    const book = await Book.findByIdAndDelete(req.params.id);\n    if (!book) return res.status(404).json({ message: 'Book not found' });\n    res.json({ message: 'Book deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n```\n\n### Step 9: Run Your Server\n\nMake sure your MongoDB server is running, then start your Node.js server.\n\n```bash\nnode app.js\n```\n\nYour server should now be running on `http://localhost:3000`. You can use tools like Postman or curl to test the CRUD endpoints.\n\n### Summary of Endpoints\n\n- **GET /books**: Retrieve all books.\n- **GET /books/:id**: Retrieve a book by ID.\n- **POST /books**: Create a new book.\n- **PUT /books/:id**: Update a book by ID.\n- **DELETE /books/:id**: Delete a book by ID.\n\nEach endpoint includes basic validation and error handling to ensure data integrity and provide meaningful responses."
    }
]