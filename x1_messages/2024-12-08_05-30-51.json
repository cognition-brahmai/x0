[
    {
        "role": "user",
        "content": "Design a Node.js server that serves a static HTML page displaying a form to upload images. Once uploaded, the server should resize the image to a specified width and height using the Sharp library and save it to disk.\n   - Criteria 1: Serving static HTML page\n   - Criteria 2: Image resizing and saving\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Node.js server that serves a static HTML page with a form for uploading images. After the image is uploaded, I need to resize it to a specific width and height using the Sharp library and then save it to disk. Let's break this down into manageable parts.\n\nFirst, I need to set up a basic Node.js server. For this, I'll use the Express framework because it's lightweight and easy to handle routing and static files.\n\n### Step 1: Set up the project\n\nI'll start by creating a new directory for my project and initializing it with npm.\n\n```bash\nmkdir image-upload-resize\ncd image-upload-resize\nnpm init -y\n```\n\nNext, I'll install Express and Sharp.\n\n```bash\nnpm install express sharp\n```\n\nI'll also need a package to handle form data since I'm dealing with file uploads. For that, I'll use `multer`.\n\n```bash\nnpm install multer\n```\n\n### Step 2: Create the server\n\nI'll create a file named `server.js` and set up a basic Express server.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server running at http://localhost:${port}/`);\n});\n```\n\nThis sets up a server that listens on port 3000 and responds with \"Hello World!\" for the root route.\n\n### Step 3: Serve the static HTML page\n\nI need to serve a static HTML page that contains a form for uploading images. I'll create a directory named `public` to hold this HTML file.\n\n```bash\nmkdir public\ntouch public/index.html\n```\n\nIn `public/index.html`, I'll create a simple form that allows users to select an image file.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Image Upload</title>\n</head>\n<body>\n  <h1>Upload an Image</h1>\n  <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n    <input type=\"file\" name=\"image\" accept=\"image/*\">\n    <button type=\"submit\">Upload</button>\n  </form>\n</body>\n</html>\n```\n\nNow, I'll configure Express to serve this static HTML page.\n\nIn `server.js`:\n\n```javascript\napp.use(express.static('public'));\n```\n\nAnd update the root route to serve the `index.html` file.\n\n```javascript\napp.get('/', (req, res) => {\n  res.sendFile(__dirname + '/public/index.html');\n});\n```\n\n### Step 4: Handle file uploads\n\nI need to handle the file upload when the form is submitted. For this, I'll use `multer` to parse the form data.\n\nFirst, set up `multer` to handle single file uploads.\n\nIn `server.js`:\n\n```javascript\nconst multer = require('multer');\nconst upload = multer({ dest: 'uploads/' });\n\napp.post('/upload', upload.single('image'), (req, res) => {\n  // Image is uploaded to 'uploads/' directory\n  // Now, resize the image using Sharp\n});\n```\n\nI need to create the `uploads` directory to store the uploaded files.\n\n```bash\nmkdir uploads\n```\n\n### Step 5: Resize the image using Sharp\n\nNow, I need to resize the uploaded image using the Sharp library and save it to disk.\n\nFirst, install Sharp if you haven't already.\n\n```bash\nnpm install sharp\n```\n\nThen, in `server.js`, require Sharp and use it to resize the image.\n\n```javascript\nconst sharp = require('sharp');\n\napp.post('/upload', upload.single('image'), (req, res) => {\n  const uploadPath = req.file.path;\n  const resizeWidth = 800; // Specify the desired width\n  const resizeHeight = 600; // Specify the desired height\n  const resizedPath = `resized-${req.file.filename}`;\n\n  sharp(uploadPath)\n    .resize(resizeWidth, resizeHeight)\n    .toFile(resizedPath, (err, info) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send('Error resizing image');\n      } else {\n        res.send('Image uploaded and resized successfully');\n      }\n    });\n});\n```\n\nI need to create a directory to store the resized images or save them in the same `uploads` directory. For clarity, I'll save them in the `uploads` directory with a modified filename.\n\n### Step 6: Clean up\n\nTo keep the `uploads` directory tidy, I can delete the original uploaded file after resizing.\n\nInstall `fs` module to handle file operations.\n\nIn `server.js`:\n\n```javascript\nconst fs = require('fs');\n\napp.post('/upload', upload.single('image'), (req, res) => {\n  const uploadPath = req.file.path;\n  const resizeWidth = 800; // Specify the desired width\n  const resizeHeight = 600; // Specify the desired height\n  const resizedPath = `uploads/resized-${req.file.filename}`;\n\n  sharp(uploadPath)\n    .resize(resizeWidth, resizeHeight)\n    .toFile(resizedPath, (err, info) => {\n      if (err) {\n        console.error(err);\n        res.status(500).send('Error resizing image');\n      } else {\n        // Delete the original file\n        fs.unlink(uploadPath, (err) => {\n          if (err) {\n            console.error(err);\n          }\n        });\n        res.send('Image uploaded and resized successfully');\n      }\n    });\n});\n```\n\n### Step 7: Test the application\n\nStart the server:\n\n```bash\nnode server.js\n```\n\nOpen a web browser and go to `http://localhost:3000`. You should see the upload form. Select an image and upload it. The server should resize the image and save it to the `uploads` directory.\n\n### Conclusion\n\nI've successfully created a Node.js server using Express that serves a static HTML page with an image upload form. Upon uploading, the server resizes the image using Sharp and saves it to disk. This meets both criteria: serving a static HTML page and resizing and saving the uploaded image.\n\n**Final Solution**\n\nTo solve this problem, we need to create a Node.js server that serves a static HTML page with a form for uploading images. Once an image is uploaded, the server should resize it to a specified width and height using the Sharp library and save it to disk.\n\n#### Solution Code\n\n1. **Project Setup**\n\n   - Initialize the project and install necessary packages:\n\n     ```bash\n     mkdir image-upload-resize\n     cd image-upload-resize\n     npm init -y\n     npm install express sharp multer\n     ```\n\n2. **Directory Structure**\n\n   - Create necessary directories and files:\n\n     ```bash\n     mkdir public uploads\n     touch public/index.html server.js\n     ```\n\n3. **HTML Form (public/index.html)**\n\n   - Create a simple HTML form for image upload:\n\n     ```html\n     <!DOCTYPE html>\n     <html lang=\"en\">\n     <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>Image Upload</title>\n     </head>\n     <body>\n       <h1>Upload an Image</h1>\n       <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n         <input type=\"file\" name=\"image\" accept=\"image/*\">\n         <button type=\"submit\">Upload</button>\n       </form>\n     </body>\n     </html>\n     ```\n\n4. **Server Setup (server.js)**\n\n   - Set up the Express server to handle static files and image uploads:\n\n     ```javascript\n     const express = require('express');\n     const multer = require('multer');\n     const sharp = require('sharp');\n     const fs = require('fs');\n     const app = express();\n     const port = 3000;\n\n     // Configure multer for handling file uploads\n     const upload = multer({ dest: 'uploads/' });\n\n     // Serve static files from 'public' directory\n     app.use(express.static('public'));\n\n     // Root route to serve the HTML form\n     app.get('/', (req, res) => {\n       res.sendFile(__dirname + '/public/index.html');\n     });\n\n     // POST route to handle image upload and resizing\n     app.post('/upload', upload.single('image'), (req, res) => {\n       const uploadPath = req.file.path;\n       const resizeWidth = 800; // Specify desired width\n       const resizeHeight = 600; // Specify desired height\n       const resizedPath = `uploads/resized-${req.file.filename}`;\n\n       // Resize the image using Sharp\n       sharp(uploadPath)\n         .resize(resizeWidth, resizeHeight)\n         .toFile(resizedPath, (err, info) => {\n           if (err) {\n             console.error(err);\n             res.status(500).send('Error resizing image');\n           } else {\n             // Delete the original file\n             fs.unlink(uploadPath, (err) => {\n               if (err) {\n                 console.error(err);\n               }\n             });\n             res.send('Image uploaded and resized successfully');\n           }\n         });\n     });\n\n     // Start the server\n     app.listen(port, () => {\n       console.log(`Server running at http://localhost:${port}/`);\n     });\n     ```\n\n5. **Running the Server**\n\n   - Start the server by running:\n\n     ```bash\n     node server.js\n     ```\n\n   - Access the upload form at `http://localhost:3000` in your web browser.\n\nThis solution sets up a basic Node.js server using Express that serves a static HTML page for uploading images. Upon uploading, it uses the Sharp library to resize the image and saves the resized version to disk, deleting the original upload to keep the directory clean."
    }
]