[
    {
        "role": "user",
        "content": "Implement a Golang REST API that integrates with a third-party weather service. The API should accept a city name as input, fetch the current weather for that city, and return the temperature, humidity, and description of the weather conditions.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a Golang REST API that integrates with a third-party weather service involves several steps. For this example, I'll guide you through creating an API that uses the OpenWeatherMap service to fetch weather data based on a city name. You'll need to sign up for an API key from OpenWeatherMap to proceed.\n\n### Prerequisites\n\n1. **Golang** installed on your machine.\n2. **Go modules** for dependency management.\n3. **Third-party weather API key** from OpenWeatherMap.\n\n### Steps to Implement\n\n#### 1. Set Up Your Go Project\n\nCreate a new directory for your project and initialize a Go module:\n\n```sh\nmkdir weather-api\ncd weather-api\ngo mod init weatherapi\n```\n\n#### 2. Install Required Packages\n\nYou'll need the following packages:\n\n- `net/http` for creating the HTTP server.\n- `encoding/json` for JSON marshaling and unmarshaling.\n- `fmt` and `log` for formatting and logging.\n- `os` for environment variables.\n\nInstall any additional packages using `go get`. For example, if you need to parse URL queries, you might use `net/url`.\n\n#### 3. Get an API Key from OpenWeatherMap\n\nSign up at [OpenWeatherMap](https://openweathermap.org/api) and obtain an API key. This key will be used to make requests to their weather API.\n\n#### 4. Create the Weather Service Client\n\nYou need to create a client that can make HTTP requests to the OpenWeatherMap API.\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"net/http\"\n\t\"os\"\n)\n\ntype WeatherResponse struct {\n\tMain struct {\n\t\tTemp     float64 `json:\"temp\"`\n\t\tHumidity int     `json:\"humidity\"`\n\t} `json:\"main\"`\n\tWeather []struct {\n\t\tDescription string `json:\"description\"`\n\t} `json:\"weather\"`\n}\n\nfunc getWeather(city string) (*WeatherResponse, error) {\n\tapiKey := os.Getenv(\"OPENWEATHERMAP_API_KEY\")\n\turl := fmt.Sprintf(\"http://api.openweathermap.org/data/2.5/weather?q=%s&appid=%s\", city, apiKey)\n\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tdefer resp.Body.Close()\n\n\tbody, err := ioutil.ReadAll(resp.Body)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\tvar weather WeatherResponse\n\terr = json.Unmarshal(body, &weather)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\n\treturn &weather, nil\n}\n```\n\n#### 5. Create the REST API Handler\n\nDefine an HTTP handler that accepts a city name via a query parameter, fetches the weather data, and returns it in JSON format.\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"net/http\"\n)\n\ntype Weather struct {\n\tTemperature float64 `json:\"temperature\"`\n\tHumidity    int     `json:\"humidity\"`\n\tDescription string  `json:\"description\"`\n}\n\nfunc weatherHandler(w http.ResponseWriter, r *http.Request) {\n\tcity := r.URL.Query().Get(\"city\")\n\tif city == \"\" {\n\t\thttp.Error(w, \"City name is required\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tweatherResp, err := getWeather(city)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to get weather data\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n(weather := Weather{\n\t\tTemperature: weatherResp.Main.Temp,\n\t\tHumidity:    weatherResp.Main.Humidity,\n\t\tDescription: weatherResp.Weather[0].Description,\n\t})\n\n\trespJSON, err := json.Marshal(weather)\n\tif err != nil {\n\t\thttp.Error(w, \"Failed to marshal JSON\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.Header().Set(\"Content-Type\", \"application/json\")\n\tw.Write(respJSON)\n}\n```\n\n#### 6. Set Up the HTTP Server\n\nConfigure and start the HTTP server to handle requests.\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/weather\", weatherHandler)\n\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\tlog.Printf(\"Starting server on port %s\\n\", port)\n\tlog.Fatal(http.ListenAndServe(fmt.Sprintf(\":%s\", port), nil))\n}\n```\n\n#### 7. Run Your API\n\nSet the `OPENWEATHERMAP_API_KEY` environment variable with your API key and run your application:\n\n```sh\nexport OPENWEATHERMAP_API_KEY=your_api_key_here\ngo run main.go\n```\n\nYour API should now be running on `http://localhost:8080/weather?city=London` (replace \"London\" with any city name).\n\n### Conclusion\n\nYou've successfully created a simple Golang REST API that integrates with the OpenWeatherMap service to fetch and return current weather data for a specified city. This API accepts a city name as a query parameter, retrieves the weather information, and responds with JSON containing temperature, humidity, and weather description."
    }
]