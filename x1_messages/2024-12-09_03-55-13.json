[
    {
        "role": "user",
        "content": "Write a Node.js server that accepts incoming WebSocket connections and broadcasts messages received from clients to all connected clients. Ensure proper error handling and connection management.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you set up a simple WebSocket server using Node.js that can handle multiple connections and broadcast messages to all connected clients. We'll use the `ws` library, which is a popular and powerful WebSocket library for Node.js.\n\nFirst, make sure you have Node.js installed on your machine. You can download it from [nodejs.org](https://nodejs.org/).\n\nNext, create a new directory for your project and initialize a new Node.js project by running:\n\n```bash\nmkdir websocket-server\ncd websocket-server\nnpm init -y\n```\n\nNow, install the `ws` library:\n\n```bash\nnpm install ws\n```\n\nOnce that's done, you can create a new file called `server.js` and open it in your favorite text editor.\n\nWe'll start by setting up the basic structure of the server. Here's a step-by-step guide:\n\n1. **Import the required modules:**\n\n   ```javascript\n   const WebSocket = require('ws');\n   ```\n\n2. **Create a new WebSocket server:**\n\n   ```javascript\n   const wss = new WebSocket.Server({ port: 8080 });\n   ```\n\n   This sets up a WebSocket server listening on port 8080.\n\n3. **Handle new connections:**\n\n   ```javascript\n   wss.on('connection', function connection(ws) {\n       console.log('Client connected');\n\n       // Handle incoming messages\n       ws.on('message', function incoming(message) {\n           console.log('Received: %s', message);\n\n           // Broadcast the message to all connected clients\n           wss.clients.forEach(function each(client) {\n               if (client !== ws && client.readyState === WebSocket.OPEN) {\n                   client.send(message);\n               }\n           });\n       });\n\n       // Handle connection close\n       ws.on('close', function close() {\n           console.log('Client disconnected');\n       });\n\n       // Handle errors\n       ws.on('error', function error(err) {\n           console.error('WebSocket error:', err);\n       });\n   });\n   ```\n\n   - When a new client connects, we log a message.\n   - For each incoming message, we log it and then broadcast it to all other connected clients.\n   - We also handle disconnections and errors gracefully.\n\n4. **Start the server:**\n\n   ```javascript\n   console.log('WebSocket server is running on ws://localhost:8080');\n   ```\n\nPutting it all together, your `server.js` should look like this:\n\n```javascript\nconst WebSocket = require('ws');\n\nconst wss = new WebSocket.Server({ port: 8080 });\n\nwss.on('connection', function connection(ws) {\n    console.log('Client connected');\n\n    ws.on('message', function incoming(message) {\n        console.log('Received: %s', message);\n\n        wss.clients.forEach(function each(client) {\n            if (client !== ws && client.readyState === WebSocket.OPEN) {\n                client.send(message);\n            }\n        });\n    });\n\n    ws.on('close', function close() {\n        console.log('Client disconnected');\n    });\n\n    ws.on('error', function error(err) {\n        console.error('WebSocket error:', err);\n    });\n});\n\nconsole.log('WebSocket server is running on ws://localhost:8080');\n```\n\n### Running the Server\n\nTo run the server, use the following command in your terminal:\n\n```bash\nnode server.js\n```\n\nYou should see the message:\n\n```\nWebSocket server is running on ws://localhost:8080\n```\n\n### Testing the Server\n\nTo test the server, you can use a WebSocket client or write a simple HTML page that connects to the server and sends/receives messages.\n\nHere's a simple HTML example:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>WebSocket Test</title>\n</head>\n<body>\n    <script>\n        const socket = new WebSocket('ws://localhost:8080');\n\n        socket.addEventListener('open', function (event) {\n            socket.send('Hello Server!');\n        });\n\n        socket.addEventListener('message', function (event) {\n            console.log('Message from server ', event.data);\n        });\n\n        socket.addEventListener('close', function (event) {\n            console.log('Disconnected from server');\n        });\n\n        socket.addEventListener('error', function (event) {\n            console.error('WebSocket error:', event);\n        });\n    </script>\n</body>\n</html>\n```\n\nOpen this HTML file in multiple browser tabs and you should see messages being broadcasted to all connected clients.\n\n### Error Handling and Connection Management\n\nIn the server code, we handle the following:\n\n- **Connection events:** Log when a client connects or disconnects.\n- **Message events:** Log incoming messages and broadcast them to other clients.\n- **Error events:** Log any errors that occur on the WebSocket connection.\n\nThis basic setup should get you started with a WebSocket server in Node.js that can handle multiple connections and broadcast messages effectively.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]