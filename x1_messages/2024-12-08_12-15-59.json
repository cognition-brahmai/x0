[
    {
        "role": "user",
        "content": "Create a Java program that implements a stack data structure with push, pop, and peek operations, along with a method to check if the stack is empty."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a Java program that implements a stack data structure with the specified operations. A stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle, meaning the last element added is the first one to be removed.\n\nIn Java, we can implement a stack using an array or a linked list. For this example, I'll use an array to keep it simple. We'll create a class called `Stack` that will have the following methods:\n\n1. `push(item)`: Adds an item to the top of the stack.\n2. `pop()`: Removes and returns the item at the top of the stack.\n3. `peek()`: Returns the item at the top of the stack without removing it.\n4. `isEmpty()`: Checks if the stack is empty.\n\nAdditionally, we'll need to handle cases where the stack is full or empty. For simplicity, I'll assume a fixed size for the stack.\n\nHere's a step-by-step implementation:\n\n### Step 1: Define the Stack Class\n\nFirst, we'll define the `Stack` class with a fixed size and necessary variables.\n\n```java\npublic class Stack {\n    private int top;\n    private int[] stackArray;\n    private int capacity;\n\n    // Constructor to initialize the stack with a given capacity\n    public Stack(int size) {\n        capacity = size;\n        stackArray = new int[capacity];\n        top = -1; // Indicates an empty stack\n    }\n}\n```\n\n### Step 2: Implement the push Method\n\nThe `push` method adds an item to the top of the stack. We need to check if the stack is full before adding an item.\n\n```java\npublic void push(int item) {\n    if (top == capacity - 1) {\n        System.out.println(\"Stack is full. Cannot push \" + item);\n        return;\n    }\n    stackArray[++top] = item;\n    System.out.println(\"Pushed \" + item + \" to stack\");\n}\n```\n\n### Step 3: Implement the pop Method\n\nThe `pop` method removes and returns the item at the top of the stack. We need to check if the stack is empty before popping an item.\n\n```java\npublic int pop() {\n    if (isEmpty()) {\n        System.out.println(\"Stack is empty. Cannot pop.\");\n        return -1; // Assuming -1 as an error value\n    }\n    return stackArray[top--];\n}\n```\n\n### Step 4: Implement the peek Method\n\nThe `peek` method returns the item at the top of the stack without removing it. Again, check if the stack is empty.\n\n```java\npublic int peek() {\n    if (isEmpty()) {\n        System.out.println(\"Stack is empty. Cannot peek.\");\n        return -1; // Assuming -1 as an error value\n    }\n    return stackArray[top];\n}\n```\n\n### Step 5: Implement the isEmpty Method\n\nThe `isEmpty` method checks if the stack is empty.\n\n```java\npublic boolean isEmpty() {\n    return top == -1;\n}\n```\n\n### Step 6: Test the Stack Class\n\nFinally, we'll write a `main` method to test our stack implementation.\n\n```java\npublic static void main(String[] args) {\n    Stack stack = new Stack(5);\n    \n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    stack.push(40);\n    stack.push(50);\n    stack.push(60); // Should print \"Stack is full. Cannot push 60\"\n    \n    System.out.println(\"Top element is \" + stack.peek());\n    \n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop(); // Should print \"Stack is empty. Cannot pop.\"\n    \n    System.out.println(\"Is stack empty? \" + stack.isEmpty());\n}\n```\n\n### Explanation\n\n- **push(item)**: Adds an item to the top of the stack. If the stack is full, it prints a message and does nothing.\n- **pop()**: Removes and returns the top item from the stack. If the stack is empty, it prints a message and returns -1.\n- **peek()**: Returns the top item without removing it. If the stack is empty, it prints a message and returns -1.\n- **isEmpty()**: Returns true if the stack is empty, otherwise false.\n\nThis implementation uses an array to store stack elements and maintains a `top` index to track the top element. The stack size is fixed, and we handle full and empty conditions appropriately.\n\nI hope this helps! Let me know if you have any questions or need further clarification."
    }
]