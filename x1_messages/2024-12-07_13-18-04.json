[
    {
        "role": "user",
        "content": "Develop a Python Flask API with two endpoints: one for adding key-value pairs to a Memcached server and another for retrieving values by their keys.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python Flask API with two endpoints that interact with a Memcached server. One endpoint will add key-value pairs, and the other will retrieve values by their keys. Sounds straightforward!\n\nFirst things first, you'll need to make sure you have Flask and python-memcached installed in your Python environment. If you're using a virtual environment, which is a good practice, make sure to activate it before installing the packages.\n\nYou can install Flask and python-memcached using pip:\n\n```bash\npip install Flask python-memcached\n```\n\nOnce you have those installed, you can start writing your Flask application.\n\nLet's begin by importing the necessary modules:\n\n```python\nfrom flask import Flask, request, jsonify\nimport memcache\n```\n\nNext, you'll need to set up your Flask app and configure the Memcached client.\n\nAssuming you have a Memcached server running locally on the default port (11211), you can set it up like this:\n\n```python\napp = Flask(__name__)\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n```\n\nNow, let's define the endpoint for adding key-value pairs to Memcached.\n\nYou'll likely want this to be a POST request, where the client sends JSON data containing the key and value.\n\nHere's how you can define that endpoint:\n\n```python\n@app.route('/set', methods=['POST'])\ndef set_key():\n    data = request.get_json()\n    if 'key' not in data or 'value' not in data:\n        return jsonify({\"error\": \"Missing key or value\"}), 400\n    \n    key = data['key']\n    value = data['value']\n    mc.set(key, value)\n    return jsonify({\"message\": \"Key-value pair set successfully\"}), 200\n```\n\nThis endpoint expects a JSON payload with \"key\" and \"value\" fields. It then uses the Memcached client to set that key-value pair.\n\nNext, let's create the endpoint for retrieving values by their keys.\n\nThis should be a GET request where the client specifies the key as a query parameter.\n\nHere's how you can implement that:\n\n```python\n@app.route('/get', methods=['GET'])\ndef get_key():\n    key = request.args.get('key')\n    if not key:\n        return jsonify({\"error\": \"Missing key parameter\"}), 400\n    \n    value = mc.get(key)\n    if value is None:\n        return jsonify({\"error\": \"Key not found\"}), 404\n    \n    return jsonify({\"key\": key, \"value\": value}), 200\n```\n\nIn this endpoint, we extract the \"key\" parameter from the query string, retrieve the value from Memcached, and return it in JSON format. If the key doesn't exist, we return an error message with a 404 status code.\n\nFinally, don't forget to run the Flask app if the script is executed as the main program:\n\n```python\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nPutting it all together, your Flask API should look something like this:\n\n```python\nfrom flask import Flask, request, jsonify\nimport memcache\n\napp = Flask(__name__)\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\n@app.route('/set', methods=['POST'])\ndef set_key():\n    data = request.get_json()\n    if 'key' not in data or 'value' not in data:\n        return jsonify({\"error\": \"Missing key or value\"}), 400\n    \n    key = data['key']\n    value = data['value']\n    mc.set(key, value)\n    return jsonify({\"message\": \"Key-value pair set successfully\"}), 200\n\n@app.route('/get', methods=['GET'])\ndef get_key():\n    key = request.args.get('key')\n    if not key:\n        return jsonify({\"error\": \"Missing key parameter\"}), 400\n    \n    value = mc.get(key)\n    if value is None:\n        return jsonify({\"error\": \"Key not found\"}), 404\n    \n    return jsonify({\"key\": key, \"value\": value}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nTo test this API, you can use tools like curl or Postman.\n\nFor example, to set a key-value pair:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"key\":\"test\", \"value\":\"hello\"}' http://127.0.0.1:5000/set\n```\n\nAnd to retrieve a value:\n\n```bash\ncurl http://127.0.0.1:5000/get?key=test\n```\n\nThis should give you a basic Flask API interacting with Memcached. Depending on your needs, you might want to add more features, such as handling different data types, expiration times for keys, or error handling for network issues with the Memcached server.\n\nLet me know if you have any questions or need further assistance!"
    }
]