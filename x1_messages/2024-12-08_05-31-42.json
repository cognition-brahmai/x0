[
    {
        "role": "user",
        "content": "Write a Python program that implements a basic calculator with addition, subtraction, multiplication, and division functions. The calculator should accept infix notation expressions and evaluate them correctly according to the order of operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python program that implements a basic calculator capable of handling addition, subtraction, multiplication, and division using infix notation. This calculator respects the order of operations (multiplication and division before addition and subtraction).\n\n```python\ndef precedence(op):\n    if op == '+' or op == '-':\n        return 1\n    if op == '*' or op == '/':\n        return 2\n    return 0\n\ndef apply_operator(operators, values):\n    operator = operators.pop()\n    right = values.pop()\n    left = values.pop()\n    if operator == '+':\n        values.append(left + right)\n    elif operator == '-':\n        values.append(left - right)\n    elif operator == '*':\n        values.append(left * right)\n    elif operator == '/':\n        values.append(left / right)\n\ndef greater_precedence(op1, op2):\n    return precedence(op1) > precedence(op2)\n\ndef evaluate(expression):\n    tokens = expression.split()\n    values = []\n    operators = []\n    \n    for token in tokens:\n        if token.isdigit():\n            values.append(float(token))\n        elif token == '(':\n            operators.append(token)\n        elif token == ')':\n            while operators and operators[-1] != '(':\n                apply_operator(operators, values)\n            operators.pop()  # Remove the '('\n        else:\n            while (operators and greater_precedence(operators[-1], token)):\n                apply_operator(operators, values)\n            operators.append(token)\n    \n    while operators:\n        apply_operator(operators, values)\n    \n    return values[0]\n\nif __name__ == \"__main__\":\n    expression = input(\"Enter an infix expression (use spaces between tokens): \")\n    result = evaluate(expression)\n    print(\"Result:\", result)\n```\n\n### Explanation:\n1. **Precedence Function**: Determines the precedence of operators.\n2. **Apply Operator Function**: Applies the operator to the top two values on the stack.\n3. **Greater Precedence Function**: Checks if one operator has greater precedence than another.\n4. **Evaluate Function**: Parses the infix expression, uses two stacks (one for operators and one for values), and evaluates the expression according to the rules of precedence.\n5. **Main Block**: Takes user input and prints the result.\n\n### Usage:\n- Enter the infix expression with spaces between tokens.\n- For example: `3 + 5 * ( 2 - 8 )`\n\nThis program handles basic arithmetic operations and respects the order of operations by using stacks to manage operators and operands effectively."
    }
]