[
    {
        "role": "user",
        "content": "Design a C++ class hierarchy representing geometric shapes (e.g., circle, rectangle, triangle). Include methods for calculating area and perimeter in each class. Demonstrate polymorphism by writing a function that takes a base class pointer and calls these methods. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a C++ class hierarchy for geometric shapes like circles, rectangles, and triangles. I need to include methods for calculating the area and perimeter in each class and demonstrate polymorphism with a function that takes a base class pointer to call these methods.\n\nFirst, I need to decide on the base class. Since all shapes have areas and perimeters, I'll create a base class called \"Shape\" with pure virtual functions for area and perimeter. This way, it forces derived classes to implement these methods.\n\nSo, the base class will look like this:\n\n```cpp\nclass Shape {\npublic:\n    virtual double area() const = 0;\n    virtual double perimeter() const = 0;\n};\n```\n\nNow, I'll create derived classes for Circle, Rectangle, and Triangle.\n\nStarting with Circle:\n\nIt needs a radius to calculate area and perimeter.\n\nArea = \u03c0 * r^2\n\nPerimeter = 2 * \u03c0 * r\n\nSo, the Circle class will have a private member for radius and implement the area and perimeter methods.\n\n```cpp\nclass Circle : public Shape {\nprivate:\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() const override {\n        return 3.1415926535 * radius * radius;\n    }\n    double perimeter() const override {\n        return 2 * 3.1415926535 * radius;\n    }\n};\n```\n\nNext, Rectangle:\n\nIt needs length and width.\n\nArea = length * width\n\nPerimeter = 2 * (length + width)\n\nSo, the Rectangle class will have private members for length and width.\n\n```cpp\nclass Rectangle : public Shape {\nprivate:\n    double length;\n    double width;\npublic:\n    Rectangle(double l, double w) : length(l), width(w) {}\n    double area() const override {\n        return length * width;\n    }\n    double perimeter() const override {\n        return 2 * (length + width);\n    }\n};\n```\n\nNow, Triangle:\n\nFor simplicity, I'll assume it's a right-angled triangle and take the base and height.\n\nArea = 0.5 * base * height\n\nPerimeter = base + height + sqrt(base^2 + height^2)\n\nSo, the Triangle class will have private members for base and height.\n\n```cpp\nclass Triangle : public Shape {\nprivate:\n    double base;\n    double height;\npublic:\n    Triangle(double b, double h) : base(b), height(h) {}\n    double area() const override {\n        return 0.5 * base * height;\n    }\n    double perimeter() const override {\n        double hypotenuse = sqrt(base * base + height * height);\n        return base + height + hypotenuse;\n    }\n};\n```\n\nNow, to demonstrate polymorphism, I'll write a function that takes a Shape pointer and calls the area and perimeter methods.\n\n```cpp\nvoid printShapeDetails(const Shape* shape) {\n    std::cout << \"Area: \" << shape->area() << std::endl;\n    std::cout << \"Perimeter: \" << shape->perimeter() << std::endl;\n}\n```\n\nFinally, I'll create objects of Circle, Rectangle, and Triangle, and pass their addresses to this function to show that the correct methods are called based on the object's type.\n\nHere's the complete code:\n\n```cpp\n#include <iostream>\n#include <cmath>\n\nclass Shape {\npublic:\n    virtual double area() const = 0;\n    virtual double perimeter() const = 0;\n};\n\nclass Circle : public Shape {\nprivate:\n    double radius;\npublic:\n    Circle(double r) : radius(r) {}\n    double area() const override {\n        return 3.1415926535 * radius * radius;\n    }\n    double perimeter() const override {\n        return 2 * 3.1415926535 * radius;\n    }\n};\n\nclass Rectangle : public Shape {\nprivate:\n    double length;\n    double width;\npublic:\n    Rectangle(double l, double w) : length(l), width(w) {}\n    double area() const override {\n        return length * width;\n    }\n    double perimeter() const override {\n        return 2 * (length + width);\n    }\n};\n\nclass Triangle : public Shape {\nprivate:\n    double base;\n    double height;\npublic:\n    Triangle(double b, double h) : base(b), height(h) {}\n    double area() const override {\n        return 0.5 * base * height;\n    }\n    double perimeter() const override {\n        double hypotenuse = sqrt(base * base + height * height);\n        return base + height + hypotenuse;\n    }\n};\n\nvoid printShapeDetails(const Shape* shape) {\n    std::cout << \"Area: \" << shape->area() << std::endl;\n    std::cout << \"Perimeter: \" << shape->perimeter() << std::endl;\n}\n\nint main() {\n    Circle circle(5);\n    Rectangle rectangle(4, 6);\n    Triangle triangle(3, 4);\n\n    printShapeDetails(&circle);\n    printShapeDetails(&rectangle);\n    printShapeDetails(&triangle);\n\n    return 0;\n}\n```\n\nThis code defines a Shape hierarchy with Circle, Rectangle, and Triangle classes, each implementing area and perimeter calculations. The printShapeDetails function demonstrates polymorphism by working with Shape pointers and correctly calling the derived class methods based on the object type."
    }
]