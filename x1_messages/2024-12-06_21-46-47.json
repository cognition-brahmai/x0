[
    {
        "role": "user",
        "content": "Create a Python script to implement a doubly linked list data structure with methods for adding nodes at the beginning, end, and middle of the list, as well as deleting nodes by value."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a Python script for a doubly linked list with the specified methods. A doubly linked list is a type of linked list in which each node contains a reference to the previous as well as the next node in the sequence. This allows traversal in both directions, which can be very useful in certain scenarios.\n\nFirst, let's understand the basic structure of a doubly linked list. Each node in the list has three components:\n\n1. **Data**: The value stored in the node.\n\n2. **Prev**: A reference to the previous node.\n\n3. **Next**: A reference to the next node.\n\nWe'll need to implement the following methods:\n\n- **add_at_beginning(value)**: Adds a new node with the given value at the start of the list.\n\n- **add_at_end(value)**: Adds a new node with the given value at the end of the list.\n\n- **add_after_node(node, value)**: Inserts a new node with the given value after the specified node.\n\n- **delete_by_value(value)**: Removes the first node that contains the specified value.\n\nAdditionally, we should have methods to display the list to verify our operations:\n\n- **display_forward()**: Prints the list from the beginning to the end.\n\n- **display_backward()**: Prints the list from the end to the beginning.\n\nLet's start by defining the Node class, which will represent each element in the doubly linked list.\n\n## Final Solution\nTo implement a doubly linked list in Python, we need to create a `Node` class to represent each element in the list and a `DoublyLinkedList` class to manage the nodes and provide the required operations.\n\n### Approach\n\n1. **Node Class**:\n   - Each node has three attributes: `data` to store the value, `prev` to point to the previous node, and `next` to point to the next node.\n\n2. **DoublyLinkedList Class**:\n   - `__init__`: Initializes the head and tail of the list.\n   - `add_at_beginning(value)`: Adds a new node with the given value at the start of the list.\n   - `add_at_end(value)`: Adds a new node with the given value at the end of the list.\n   - `add_after_node(node, value)`: Inserts a new node with the given value after the specified node.\n   - `delete_by_value(value)`: Removes the first node that contains the specified value.\n   - `display_forward()`: Prints the list from the beginning to the end.\n   - `display_backward()`: Prints the list from the end to the beginning.\n\n### Solution Code\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.prev = None\n        self.next = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add_at_beginning(self, value):\n        new_node = Node(value)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def add_at_end(self, value):\n        new_node = Node(value)\n        if self.tail is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def add_after_node(self, node, value):\n        if node is None:\n            print(\"Node not found.\")\n            return\n        new_node = Node(value)\n        new_node.next = node.next\n        new_node.prev = node\n        if node.next is not None:\n            node.next.prev = new_node\n        node.next = new_node\n        if node == self.tail:\n            self.tail = new_node\n\n    def delete_by_value(self, value):\n        current = self.head\n        while current:\n            if current.data == value:\n                if current.prev is not None:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next is not None:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def display_forward(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n    def display_backward(self):\n        current = self.tail\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.prev\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.add_at_end(1)\n    dll.add_at_end(2)\n    dll.add_at_end(3)\n    dll.display_forward()  # Output: 1 <-> 2 <-> 3 <-> None\n    dll.display_backward() # Output: 3 <-> 2 <-> 1 <-> None\n    dll.add_at_beginning(0)\n    dll.display_forward()  # Output: 0 <-> 1 <-> 2 <-> 3 <-> None\n    dll.add_after_node(dll.head.next, 1.5)\n    dll.display_forward()  # Output: 0 <-> 1 <-> 1.5 <-> 2 <-> 3 <-> None\n    dll.delete_by_value(1)\n    dll.display_forward()  # Output: 0 <-> 1.5 <-> 2 <-> 3 <-> None\n```\n\n### Explanation\n\n- **Node Class**:\n  - Initializes with `data`, `prev`, and `next` attributes.\n\n- **DoublyLinkedList Class**:\n  - Initializes with `head` and `tail` as `None`.\n  - `add_at_beginning(value)`: Adds a new node at the start, updating `head` and `tail` accordingly.\n  - `add_at_end(value)`: Adds a new node at the end, updating `head` and `tail` accordingly.\n  - `add_after_node(node, value)`: Inserts a new node after a specified node.\n  - `delete_by_value(value)`: Deletes the first node containing the specified value.\n  - `display_forward()`: Prints the list from head to tail.\n  - `display_backward()`: Prints the list from tail to head.\n\nThis implementation ensures that all operations maintain the integrity of the doubly linked list, allowing for efficient insertion and deletion operations."
    }
]