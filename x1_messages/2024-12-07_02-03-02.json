[
    {
        "role": "user",
        "content": "Create a Golang program that emulates a simple calculator capable of performing addition, subtraction, multiplication, and division operations. The calculator should:\n   - Accept input from the command line.\n   - Display the result after each operation.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! I'll create a simple command-line calculator in Golang that can perform addition, subtraction, multiplication, and division. The program will repeatedly prompt the user for input until they choose to exit.\n\n### Approach\n1. **Input Handling**: Read input from the command line.\n2. **Operation Parsing**: Determine the operation (add, subtract, multiply, divide) based on user input.\n3. **Calculation**: Perform the specified operation on the given numbers.\n4. **Output Result**: Display the result of the operation.\n5. **Loop**: Continue prompting for input until the user decides to exit.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\nfunc main() {\n\treader := bufio.NewReader(os.Stdin)\n\n\tfor {\n\t\tfmt.Println(\"Simple Calculator\")\n\t\tfmt.Println(\"Supported operations: add, subtract, multiply, divide\")\n\t\tfmt.Println(\"Enter 'exit' to quit.\")\n\n\t\tfmt.Print(\"Enter operation and numbers (e.g., add 2 3): \")\n\t\tinput, _ := reader.ReadString('\\n')\n\t\tinput = strings.TrimSpace(input)\n\n\t\tif input == \"exit\" {\n\t\t\tbreak\n\t\t}\n\n\t\tparts := strings.Split(input, \" \")\n\t\tif len(parts) != 3 {\n\t\t\tfmt.Println(\"Invalid input format. Please try again.\")\n\t\t\tcontinue\n\t\t}\n\n\t-operation := parts[0]\n\tnum1, err1 := strconv.ParseFloat(parts[1], 64)\n\tnum2, err2 := strconv.ParseFloat(parts[2], 64)\n\n\tif err1 != nil || err2 != nil {\n\t\tfmt.Println(\"Invalid numbers. Please enter numeric values.\")\n\t\tcontinue\n\t}\n\n\tvar result float64\n\tvar operationStr string\n\n\tswitch operation {\n\tcase \"add\":\n\t\tresult = num1 + num2\n\t\toperationStr = \"Addition\"\n\tcase \"subtract\":\n\t\tresult = num1 - num2\n\t\toperationStr = \"Subtraction\"\n\tcase \"multiply\":\n\t\tresult = num1 * num2\n\t\toperationStr = \"Multiplication\"\n\tcase \"divide\":\n\t\tif num2 == 0 {\n\t\t\tfmt.Println(\"Error: Division by zero.\")\n\t\t\tcontinue\n\t\t}\n\t\tresult = num1 / num2\n\t\toperationStr = \"Division\"\n\tdefault:\n\t\tfmt.Println(\"Invalid operation. Please try again.\")\n\t\tcontinue\n\t}\n\n\tfmt.Printf(\"%s: %f %s %f = %f\\n\", operationStr, num1, operation, num2, result)\n\t}\n\n\tfmt.Println(\"Exiting calculator.\")\n}\n```\n\n### Explanation\n1. **Input Handling**:\n   - Use `bufio.NewReader(os.Stdin)` to read input from the command line.\n   - Prompt the user to enter the operation and numbers in a specific format (e.g., \"add 2 3\").\n\n2. **Operation Parsing**:\n   - Split the input string into parts to extract the operation and the numbers.\n   - Check if the input format is correct (exactly three parts: operation and two numbers).\n\n3. **Calculation**:\n   - Convert the number strings to float64.\n   - Use a switch statement to perform the specified operation.\n   - Handle division by zero error by checking if the divisor is zero.\n\n4. **Output Result**:\n   - Print the result of the operation in a formatted string.\n\n5. **Loop**:\n   - Continue prompting for input until the user types \"exit\".\n\nThis simple calculator provides a basic framework and can be extended with more features like handling more operations or improving error handling."
    }
]