[
    {
        "role": "user",
        "content": "Implement an AWS Lambda function using Node.js that listens for S3 bucket events (e.g., object creation) and triggers an email notification via Amazon Simple Email Service (SES) whenever a new file is uploaded."
    },
    {
        "role": "assistant",
        "content": "To implement an AWS Lambda function using Node.js that listens for S3 bucket events and triggers an email notification via Amazon Simple Email Service (SES) whenever a new file is uploaded, you can follow these steps:\n\n1. **Set up your AWS environment:**\n   - Ensure you have an AWS account.\n   - Set up the AWS CLI and configure it with your credentials.\n   - Create an S3 bucket where files will be uploaded.\n   - Set up SES and verify an email address that will be used to send emails.\n\n2. **Create the Lambda function:**\n   - Write the Node.js code for the Lambda function.\n   - Package the code and any dependencies.\n   - Upload the package to AWS Lambda.\n\n3. **Set up the S3 event trigger:**\n   - Configure the S3 bucket to trigger the Lambda function on specific events, such as object creation.\n\n4. **Test the setup:**\n   - Upload a file to the S3 bucket and verify that an email is sent via SES.\n\n### Step 1: Set up your AWS environment\n\n#### Create an S3 bucket\n\n1. Go to the AWS Management Console.\n2. Navigate to S3 and create a new bucket. Note the bucket name; you'll need it later.\n\n#### Set up SES\n\n1. Navigate to SES in the AWS Management Console.\n2. Verify an email address that you will use to send emails.\n\n### Step 2: Create the Lambda function\n\n#### Write the Lambda function code\n\nCreate a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir s3-email-notifier\ncd s3-email-notifier\nnpm init -y\n```\n\nInstall the necessary AWS SDK packages:\n\n```bash\nnpm install aws-sdk\n```\n\nCreate a file named `index.js` with the following content:\n\n```javascript\nconst AWS = require('aws-sdk');\n\nconst ses = new AWS.SES({ apiVersion: '2010-12-01' });\n\nexports.handler = async (event) => {\n    console.log('Received event:', JSON.stringify(event, null, 2));\n\n    const bucketName = event.Records[0].s3.bucket.name;\n    const objectKey = event.Records[0].s3.object.key;\n\n    const params = {\n        Source: 'your-verified-email@example.com',\n        Destination: {\n            ToAddresses: ['recipient@example.com']\n        },\n        Message: {\n            Subject: {\n                Data: 'New file uploaded to S3'\n            },\n            Body: {\n                Text: {\n                    Data: `A new file has been uploaded to the S3 bucket: ${bucketName}/${objectKey}`\n                }\n            }\n        }\n    };\n\n    try {\n        await ses.sendEmail(params).promise();\n        console.log('Email sent successfully');\n    } catch (error) {\n        console.error('Error sending email:', error);\n        throw error;\n    }\n};\n```\n\nReplace `'your-verified-email@example.com'` and `'recipient@example.com'` with your verified SES email and the recipient's email address, respectively.\n\n#### Package the code and dependencies\n\nZip the contents of your project directory:\n\n```bash\nzip -r function.zip .\n```\n\n### Step 3: Upload the Lambda function\n\n1. Go to the AWS Lambda console.\n2. Click on \"Create function\".\n3. Choose \"Author from scratch\".\n4. Enter a function name, select Node.js as the runtime, and choose or create a new execution role with basic Lambda permissions.\n5. Under \"Function code\", upload the `function.zip` file you created earlier.\n6. Save the function.\n\n### Step 4: Set up the S3 event trigger\n\n1. Go to the S3 console.\n2. Select the bucket you created earlier.\n3. Navigate to the \"Properties\" tab.\n4. Click on \"Events\".\n5. Click on \"Add event notification\".\n6. Give the event a name.\n7. For \"Event type\", select \"All object create events\".\n8. For \"Send to\", select \"Lambda function\".\n9. Choose the Lambda function you created.\n10. Save the event notification.\n\n### Step 5: Test the setup\n\n1. Upload a test file to your S3 bucket.\n2. Check your email inbox to see if you received the notification email.\n\nThis setup will trigger an email notification every time a new file is uploaded to the specified S3 bucket."
    }
]