[
    {
        "role": "user",
        "content": "Write a Python script that connects to a Cassandra database, creates a table called \"users\" with columns for id, name, email, and age, and inserts 5 sample records into the table."
    },
    {
        "role": "assistant",
        "content": "Sure! To create a Python script that connects to a Cassandra database, creates a table named \"users,\" and inserts five sample records, you'll need to use the `cassandra-driver` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install cassandra-driver\n```\n\nHere's a step-by-step guide to achieve this:\n\n1. **Connect to the Cassandra cluster.**\n2. **Create a keyspace (if it doesn't exist).**\n3. **Set the keyspace for operations.**\n4. **Create the \"users\" table.**\n5. **Insert five sample records into the table.**\n\nBelow is the complete Python script that accomplishes these tasks:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\n\n# Connect to the Cassandra cluster\ncluster = Cluster(['127.0.0.1'])  # Assuming Cassandra is running on localhost\nsession = cluster.connect()\n\n# Create a keyspace (if it doesn't exist)\nkeyspace = \"mykeyspace\"\nsession.execute(\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS %s\n    WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n\"\"\" % keyspace)\n\n# Set the keyspace for operations\nsession.set_keyspace(keyspace)\n\n# Create the users table\nsession.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY,\n        name TEXT,\n        email TEXT,\n        age INT\n    )\n\"\"\")\n\n# Insert sample records\nsample_users = [\n    {'id': '123e4567-e89b-12d3-a456-426614174000', 'name': 'Alice', 'email': 'alice@example.com', 'age': 30},\n    {'id': '123e4567-e89b-12d3-a456-426614174001', 'name': 'Bob', 'email': 'bob@example.com', 'age': 25},\n    {'id': '123e4567-e89b-12d3-a456-426614174002', 'name': 'Charlie', 'email': 'charlie@example.com', 'age': 35},\n    {'id': '123e4567-e89b-12d3-a456-426614174003', 'name': 'David', 'email': 'david@example.com', 'age': 28},\n    {'id': '123e4567-e89b-12d3-a456-426614174004', 'name': 'Eve', 'email': 'eve@example.com', 'age': 22}\n]\n\nfor user in sample_users:\n    query = SimpleStatement(\"\"\"\n        INSERT INTO users (id, name, email, age)\n        VALUES (%(id)s, %(name)s, %(email)s, %(age)s)\n    \"\"\")\n    session.execute(query, user)\n\nprint(\"Users inserted successfully.\")\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation:\n\n1. **Connecting to the Cluster:**\n   - We use `Cluster(['127.0.0.1'])` to connect to a Cassandra cluster running on localhost.\n\n2. **Creating a Keyspace:**\n   - We create a keyspace named `mykeyspace` with a simple replication strategy and a replication factor of 1. If the keyspace already exists, this step is skipped.\n\n3. **Setting the Keyspace:**\n   - We set the keyspace to `mykeyspace` for all subsequent operations.\n\n4. **Creating the Table:**\n   - We create a table named `users` with columns for `id` (primary key), `name`, `email`, and `age`. If the table already exists, this step is skipped.\n\n5. **Inserting Sample Records:**\n   - We define a list of dictionaries, each representing a user with an `id`, `name`, `email`, and `age`.\n   - We use a `SimpleStatement` to insert each user into the `users` table.\n\n6. **Closing the Connection:**\n   - Finally, we shut down the connection to the cluster.\n\nMake sure that your Cassandra server is running and accessible at the specified address before executing this script."
    }
]