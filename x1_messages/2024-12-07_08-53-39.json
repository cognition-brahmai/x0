[
    {
        "role": "user",
        "content": "Create a Java class for a singly linked list with methods to add, remove, and search elements within the list."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Java class for a singly linked list that includes methods to add, remove, and search for elements:\n\n```java\npublic class SinglyLinkedList {\n    // Node inner class to represent each element in the list\n    private static class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    // Head of the list\n    private Node head;\n\n    // Constructor initializes an empty list\n    public SinglyLinkedList() {\n        this.head = null;\n    }\n\n    // Method to add an element at the end of the list\n    public void add(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n    }\n\n    // Method to remove the first occurrence of an element\n    public void remove(int data) {\n        if (head == null) return;\n\n        if (head.data == data) {\n            head = head.next;\n            return;\n        }\n\n        Node current = head;\n        while (current.next != null) {\n            if (current.next.data == data) {\n                current.next = current.next.next;\n                return;\n            }\n            current = current.next;\n        }\n    }\n\n    // Method to search for an element and return true if found, else false\n    public boolean search(int data) {\n        Node current = head;\n        while (current != null) {\n            if (current.data == data) {\n                return true;\n            }\n            current = current.next;\n        }\n        return false;\n    }\n\n    // Method to display the list\n    public void display() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.add(1);\n        list.add(2);\n        list.add(3);\n        list.display(); // Output: 1 -> 2 -> 3 -> null\n\n        list.remove(2);\n        list.display(); // Output: 1 -> 3 -> null\n\n        System.out.println(list.search(3)); // Output: true\n        System.out.println(list.search(2)); // Output: false\n    }\n}\n```\n\n### Explanation:\n\n1. **Node Inner Class:**\n   - Represents each element in the list with `data` and `next` pointers.\n\n2. **SinglyLinkedList Class:**\n   - Contains a private `head` node to track the start of the list.\n   - **Constructor:** Initializes the list as empty (`head = null`).\n   - **add(int data):** Adds a new node with the given data at the end of the list.\n   - **remove(int data):** Removes the first occurrence of the node with the specified data.\n   - **search(int data):** Searches for the specified data in the list and returns `true` if found, otherwise `false`.\n   - **display():** Prints the elements of the list for visualization.\n\n3. **Main Method:**\n   - Demonstrates the usage of the singly linked list by adding elements, removing an element, searching for elements, and displaying the list."
    }
]