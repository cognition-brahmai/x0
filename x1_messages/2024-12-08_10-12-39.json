[
    {
        "role": "user",
        "content": "Write a JavaScript/Node.js script that fetches data from an API (e.g., weather, news) and displays it in a user-friendly format. The script should:\n    - Accept command line arguments for the type of information to retrieve (e.g., current weather, top headlines).\n    - Cache the fetched data locally and use it if available instead of making another API call.\n    - Allow users to set their preferred location for weather or news updates."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's create a Node.js script that fetches data from an API, caches it locally, and displays it in a user-friendly format. We'll use the OpenWeatherMap API for weather data and the NewsAPI for news updates.\n\nFirst, you'll need to sign up for API keys from both services:\n\n1. **OpenWeatherMap**: Go to [OpenWeatherMap](https://openweathermap.org/api) and sign up for a free account to get your API key.\n\n2. **NewsAPI**: Go to [NewsAPI](https://newsapi.org/) and sign up for a free account to get your API key.\n\nOnce you have both API keys, let's proceed to set up the script.\n\n### Step 1: Set Up Project\n\nInitialize a new Node.js project and install necessary dependencies.\n\n```bash\nmkdir api-fetcher\ncd api-fetcher\nnpm init -y\nnpm install axios fs-extra yargs\n```\n\n- **axios**: For making HTTP requests.\n- **fs-extra**: For file system operations (caching).\n- **yargs**: For parsing command line arguments.\n\n### Step 2: Create Configuration File\n\nCreate a `.env` file to store your API keys and preferred location.\n\n```plaintext\nWEATHER_API_KEY=your_openweathermap_api_key\nNEWS_API_KEY=your_newsapi_api_key\nPREFERRED_LOCATION=CityName,CountryCode  # e.g., London,UK\n```\n\n### Step 3: Create Main Script\n\nCreate a file named `index.js` and set up the script.\n\n```javascript\nconst axios = require('axios');\nconst fs = require('fs-extra');\nconst path = require('path');\nconst yargs = require('yargs');\nrequire('dotenv').config();\n\nconst weatherApiKey = process.env.WEATHER_API_KEY;\nconst newsApiKey = process.env.NEWS_API_KEY;\nconst preferredLocation = process.env.PREFERRED_LOCATION;\n\nconst cacheDir = path.join(__dirname, 'cache');\nfs.ensureDirSync(cacheDir);\n\nconst weatherCacheFile = path.join(cacheDir, 'weather.json');\nconst newsCacheFile = path.join(cacheDir, 'news.json');\n\nconst argv = yargs\n  .option('type', {\n    alias: 't',\n    describe: 'Type of information to retrieve',\n    choices: ['weather', 'news'],\n    demandOption: true\n  })\n  .option('location', {\n    alias: 'l',\n    describe: 'Location for weather or news updates',\n    default: preferredLocation\n  })\n  .help()\n  .alias('help', 'h')\n  .argv;\n\nasync function fetchWeather(location) {\n  const cache = await fs.readJson(weatherCacheFile).catch(() => null);\n  if (cache && cache.location === location && cache.timestamp > Date.now() - 1800000) { // Cache for 30 minutes\n    console.log('Using cached weather data.');\n    return cache.data;\n  }\n\n  const response = await axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=${weatherApiKey}&units=metric`);\n  const data = response.data;\n\n  await fs.writeJson(weatherCacheFile, {\n    location,\n    timestamp: Date.now(),\n    data\n  });\n\n  return data;\n}\n\nasync function fetchNews(location) {\n  const cache = await fs.readJson(newsCacheFile).catch(() => null);\n  if (cache && cache.location === location && cache.timestamp > Date.now() - 1800000) { // Cache for 30 minutes\n    console.log('Using cached news data.');\n    return cache.data;\n  }\n\n  const response = await axios.get(`https://newsapi.org/v2/top-headlines?q=${location}&apiKey=${newsApiKey}`);\n  const data = response.data;\n\n  await fs.writeJson(newsCacheFile, {\n    location,\n    timestamp: Date.now(),\n    data\n  });\n\n  return data;\n}\n\nasync function displayWeather(data) {\n  console.log(`\\nWeather in ${data.name}, ${data.sys.country}`);\n  console.log(`Temperature: ${data.main.temp}\u00b0C`);\n  console.log(`Weather: ${data.weather[0].description}`);\n  console.log(`Humidity: ${data.main.humidity}%`);\n  console.log(`Wind Speed: ${data.wind.speed} m/s`);\n}\n\nasync function displayNews(data) {\n  console.log(`\\nTop Headlines in ${argv.location}`);\n  data.articles.forEach(article => {\n    console.log(`\\nTitle: ${article.title}`);\n    console.log(`Source: ${article.source.name}`);\n    console.log(`Description: ${article.description}`);\n    console.log(`URL: ${article.url}`);\n  });\n}\n\n(async () => {\n  try {\n    switch (argv.type) {\n      case 'weather':\n        const weatherData = await fetchWeather(argv.location);\n        displayWeather(weatherData);\n        break;\n      case 'news':\n        const newsData = await fetchNews(argv.location);\n        displayNews(newsData);\n        break;\n      default:\n        console.log('Invalid type specified.');\n    }\n  } catch (error) {\n    console.error('Error fetching data:', error.message);\n  }\n})();\n```\n\n### Step 4: Run the Script\n\nYou can run the script using Node.js from the command line.\n\nTo get the current weather:\n\n```bash\nnode index.js --type weather --location \"London,UK\"\n```\n\nTo get top news headlines:\n\n```bash\nnode index.js --type news --location \"London,UK\"\n```\n\n### Explanation\n\n1. **Configuration**: API keys and preferred location are stored in a `.env` file.\n2. **Caching**: Data is cached locally in a `cache` directory. The cache is valid for 30 minutes.\n3. **Command Line Arguments**: The script accepts options for the type of information (`weather` or `news`) and the location.\n4. **Fetching Data**: Uses Axios to make HTTP requests to the OpenWeatherMap and NewsAPI.\n5. **Displaying Data**: Formats and prints the fetched data in a user-friendly manner.\n\nThis script provides a basic structure. You can expand it by adding more features like handling different units for weather, more detailed news filtering, or better error handling."
    }
]