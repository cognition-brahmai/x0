[
    {
        "role": "user",
        "content": "Develop a Python script that integrates with the Google Maps API to geocode addresses, calculate distances between locations, and display the results on an interactive map."
    },
    {
        "role": "assistant",
        "content": "I'm excited to help you with this project! Integrating with the Google Maps API can be really powerful for location-based applications. Let's break down the tasks you need to accomplish:\n\n1. **Geocode addresses**: This means converting addresses into geographic coordinates (latitude and longitude).\n2. **Calculate distances between locations**: Once you have the coordinates, you can calculate the distances between them.\n3. **Display results on an interactive map**: Visualizing the data on a map makes it easier to understand the relationships between locations.\n\nTo achieve this, we'll need to use the Google Maps Geocoding API and the Google Maps JavaScript API. Since you want a Python script, we'll also need to consider how to handle the API calls from Python and how to display the map, which is typically done in a web browser using HTML and JavaScript.\n\nHere's a step-by-step plan:\n\n### Step 1: Set up Google Maps API Credentials\n\nFirst, you need to get API keys for the Google Maps Geocoding API and the Google Maps JavaScript API.\n\n1. Go to the [Google Cloud Console](https://console.cloud.google.com/).\n2. Create a new project or select an existing one.\n3. Enable the Geocoding API and the JavaScript API for your project.\n4. Create API keys for both APIs.\n\nMake sure to handle your API keys securely. In a production environment, you should avoid hardcoding them into your script. For this example, we'll keep it simple and store them in environment variables.\n\n### Step 2: Geocode Addresses Using Python\n\nWe'll use the `requests` library in Python to make HTTP requests to the Geocoding API.\n\nFirst, install the required library:\n\n```bash\npip install requests\n```\n\nThen, create a Python script to geocode addresses:\n\n```python\nimport requests\nimport os\n\n# Replace with your own API key\nAPI_KEY = os.getenv('GOOGLE_MAPS_API_KEY')\n\ndef geocode_address(address):\n    base_url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        'address': address,\n        'key': API_KEY\n    }\n    response = requests.get(base_url, params=params)\n    data = response.json()\n    if data['status'] == 'OK':\n        location = data['results'][0]['geometry']['location']\n        return location['lat'], location['lng']\n    else:\n        print(f\"Geocoding failed for {address}: {data['status']}\")\n        return None\n\n# Example usage\naddress = \"1600 Amphitheatre Parkway, Mountain View, CA\"\ncoordinates = geocode_address(address)\nif coordinates:\n    print(f\"Coordinates for {address}: {coordinates}\")\n```\n\n### Step 3: Calculate Distances Between Locations\n\nTo calculate distances between two points, we can use the Haversine formula, which calculates the great-circle distance between two points on a sphere given their longitudes and latitudes.\n\nHere's a function to calculate the distance in kilometers:\n\n```python\nimport math\n\ndef haversine(lat1, lon1, lat2, lon2):\n    # Radius of the Earth in kilometers\n    R = 6371.0\n\n    # Convert degrees to radians\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n\n    # Differences in coordinates\n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n\n    # Haversine formula\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = R * c\n\n    return distance\n\n# Example usage\naddress1 = \"1600 Amphitheatre Parkway, Mountain View, CA\"\naddress2 = \"1 Infinite Loop, Cupertino, CA\"\n\ncoords1 = geocode_address(address1)\ncoords2 = geocode_address(address2)\n\nif coords1 and coords2:\n    distance = haversine(coords1[0], coords1[1], coords2[0], coords2[1])\n    print(f\"Distance between {address1} and {address2}: {distance:.2f} km\")\n```\n\n### Step 4: Display Results on an Interactive Map\n\nTo display the locations on an interactive map, we'll create an HTML file that uses the Google Maps JavaScript API. Our Python script will generate this HTML file with the markers and any other data we want to display.\n\nFirst, ensure you have the JavaScript API key.\n\nThen, create a function in your Python script to generate the HTML:\n\n```python\ndef create_map_html(locations):\n    # locations is a list of dictionaries with 'address', 'lat', and 'lng' keys\n    map_html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Locations Map</title>\n        <script src=\"https://maps.googleapis.com/maps/api/js?key={API_KEY}\"></script>\n        <style>\n            #map {{\n                height: 100%;\n            }}\n            html, body {{\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }}\n        </style>\n    </head>\n    <body>\n        <div id=\"map\"></div>\n        <script>\n            var locations = {locations};\n            var map;\n            function initMap() {{\n                map = new google.maps.Map(document.getElementById('map'), {{\n                    center: {{lat: locations[0].lat, lng: locations[0].lng}},\n                    zoom: 10\n                }});\n\n                locations.forEach(function(location) {{\n                    new google.maps.Marker({{\n                        position: {{lat: location.lat, lng: location.lng}},\n                        map: map,\n                        title: location.address\n                    }});\n                }});\n            }}\n        </script>\n    </body>\n    </html>\n    \"\"\"\n    with open('map.html', 'w') as f:\n        f.write(map_html)\n\n# Example usage\nlocations = [\n    {'address': address1, 'lat': coords1[0], 'lng': coords1[1]},\n    {'address': address2, 'lat': coords2[0], 'lng': coords2[1]}\n]\ncreate_map_html(locations)\nprint(\"Map created. Open map.html in your browser.\")\n```\n\n### Step 5: Putting It All Together\n\nNow, let's combine all the parts into a single script that geocodes addresses, calculates distances, and generates an interactive map.\n\n```python\nimport requests\nimport os\nimport math\n\n# Replace with your own API key\nAPI_KEY = os.getenv('GOOGLE_MAPS_API_KEY')\n\ndef geocode_address(address):\n    base_url = \"https://maps.googleapis.com/maps/api/geocode/json\"\n    params = {\n        'address': address,\n        'key': API_KEY\n    }\n    response = requests.get(base_url, params=params)\n    data = response.json()\n    if data['status'] == 'OK':\n        location = data['results'][0]['geometry']['location']\n        return location['lat'], location['lng']\n    else:\n        print(f\"Geocoding failed for {address}: {data['status']}\")\n        return None\n\ndef haversine(lat1, lon1, lat2, lon2):\n    R = 6371.0\n    lat1_rad = math.radians(lat1)\n    lon1_rad = math.radians(lon1)\n    lat2_rad = math.radians(lat2)\n    lon2_rad = math.radians(lon2)\n    dlon = lon2_rad - lon1_rad\n    dlat = lat2_rad - lat1_rad\n    a = math.sin(dlat / 2)**2 + math.cos(lat1_rad) * math.cos(lat2_rad) * math.sin(dlon / 2)**2\n    c = 2 * math.atan2(math.sqrt(a), math.sqrt(1 - a))\n    distance = R * c\n    return distance\n\ndef create_map_html(locations):\n    map_html = f\"\"\"\n    <!DOCTYPE html>\n    <html>\n    <head>\n        <title>Locations Map</title>\n        <script src=\"https://maps.googleapis.com/maps/api/js?key={API_KEY}\"></script>\n        <style>\n            #map {{\n                height: 100%;\n            }}\n            html, body {{\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }}\n        </style>\n    </head>\n    <body>\n        <div id=\"map\"></div>\n        <script>\n            var locations = {locations};\n            var map;\n            function initMap() {{\n                map = new google.maps.Map(document.getElementById('map'), {{\n                    center: {{lat: locations[0].lat, lng: locations[0].lng}},\n                    zoom: 10\n                }});\n\n                locations.forEach(function(location) {{\n                    new google.maps.Marker({{\n                        position: {{lat: location.lat, lng: location.lng}},\n                        map: map,\n                        title: location.address\n                    }});\n                }});\n            }}\n        </script>\n    </body>\n    </html>\n    \"\"\"\n    with open('map.html', 'w') as f:\n        f.write(map_html)\n\ndef main():\n    addresses = [\n        \"1600 Amphitheatre Parkway, Mountain View, CA\",\n        \"1 Infinite Loop, Cupertino, CA\"\n    ]\n    locations = []\n    for address in addresses:\n        coords = geocode_address(address)\n        if coords:\n            locations.append({'address': address, 'lat': coords[0], 'lng': coords[1]})\n    \n    if len(locations) >= 2:\n        distance = haversine(locations[0]['lat'], locations[0]['lng'], locations[1]['lat'], locations[1]['lng'])\n        print(f\"Distance between {addresses[0]} and {addresses[1]}: {distance:.2f} km\")\n    \n    create_map_html(locations)\n    print(\"Map created. Open map.html in your browser.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Geocoding**: The `geocode_address` function sends a request to the Google Maps Geocoding API to get the latitude and longitude of an address.\n2. **Distance Calculation**: The `haversine` function calculates the distance between two points on the Earth's surface given their latitudes and longitudes.\n3. **Map Generation**: The `create_map_html` function generates an HTML file that uses the Google Maps JavaScript API to display markers for each location.\n\nThis script provides a basic framework. You can expand it by adding more addresses, handling errors more gracefully, or incorporating additional features like directions or more detailed markers."
    }
]