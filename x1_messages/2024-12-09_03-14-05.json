[
    {
        "role": "user",
        "content": "Develop a Python script that calculates the factorial of a given number using recursion. The script should accept an integer as input and print the result. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that calculates the factorial of a number using recursion. I need to make sure it accepts an integer as input and prints the result. Let's break this down.\n\nFirst, I need to understand what a factorial is. Factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It's denoted by n!. For example, 5! = 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 120.\n\nNow, recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem. So, for factorial, the recursive relation is n! = n \u00d7 (n-1)! and we know that 0! = 1.\n\nSo, I need to write a function that calls itself with a smaller value each time until it reaches the base case, which is when n is 0 or 1.\n\nLet me think about the steps:\n\n1. Define a function, say `factorial`, that takes an integer n as its parameter.\n\n2. Check if n is 0 or 1. If yes, return 1 because 0! and 1! are both 1.\n\n3. If n is greater than 1, return n multiplied by the factorial of n-1.\n\n4. Take an integer input from the user.\n\n5. Call the factorial function with this input.\n\n6. Print the result.\n\nI should also consider edge cases, like what if the user inputs a negative number? Factorial is not defined for negative numbers, so I should handle that appropriately, maybe by raising an error or printing a message.\n\nAlright, let's start writing some pseudocode.\n\n```\n\ndef factorial(n):\n\nif n == 0 or n == 1:\n\nreturn 1\n\nelse:\n\nreturn n * factorial(n-1)\n\nnum = get integer input from user\n\nif num < 0:\n\nprint \"Factorial is not defined for negative numbers.\"\n\nelse:\n\nprint \"Factorial of\", num, \"is\", factorial(num)\n\n```\n\nLooks good. Now, I need to implement this in Python. I need to make sure that the input is an integer. Maybe I should use a try-except block to handle cases where the user enters something that's not an integer.\n\nAlso, I should consider the possibility of a stack overflow error if the input number is too large, but for now, I'll keep it simple.\n\nLet me think about how to get integer input from the user. I can use the `input()` function and convert it to an integer using `int()`, but I need to handle exceptions if the input is not a valid integer.\n\nHere's an improved version:\n\n```\n\ndef factorial(n):\n\nif n == 0 or n == 1:\n\nreturn 1\n\nelse:\n\nreturn n * factorial(n-1)\n\ntry:\n\nnum = int(input(\"Enter a non-negative integer: \"))\n\nif num < 0:\n\nprint(\"Factorial is not defined for negative numbers.\")\n\nelse:\n\nprint(\"Factorial of\", num, \"is\", factorial(num))\n\nexcept ValueError:\n\nprint(\"Invalid input. Please enter an integer.\")\n\n```\n\nThis should cover most cases. Let me test this logic with some examples.\n\nExample 1:\n\nInput: 5\n\nExpected Output: 120\n\nCalculation: 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 120\n\nExample 2:\n\nInput: 0\n\nExpected Output: 1\n\nExample 3:\n\nInput: -3\n\nExpected Output: \"Factorial is not defined for negative numbers.\"\n\nExample 4:\n\nInput: \"abc\"\n\nExpected Output: \"Invalid input. Please enter an integer.\"\n\nSeems correct.\n\nNow, I should also think about the limitations. Recursion in Python has a maximum depth, and for large numbers, this could lead to a stack overflow. To handle larger numbers, I could implement an iterative approach, but since the task specifically asks for recursion, I'll stick with this.\n\nAlternatively, I could set a recursive depth limit using `sys.setrecursionlimit()`, but that might not be necessary for this simple script.\n\nI should also make sure that the user understands what a factorial is, maybe by including a brief explanation in the script, but that's optional.\n\nAlright, I think this should do it. Let me write the actual Python code accordingly.\n\n## Final Solution\nTo solve this problem, we need to develop a Python script that calculates the factorial of a given number using recursion. The script should accept an integer as input and print the result.\n\n### Approach\n1. **Understanding Factorial**: The factorial of a non-negative integer \\( n \\) is the product of all positive integers less than or equal to \\( n \\). It is denoted by \\( n! \\). For example, \\( 5! = 5 \\times 4 \\times 3 \\times 2 \\times 1 = 120 \\).\n2. **Recursion**: We use a recursive function to calculate the factorial. The recursive case is \\( n! = n \\times (n-1)! \\) and the base case is \\( 0! = 1 \\).\n3. **Input Handling**: The script should handle integer inputs and check for invalid cases such as negative numbers and non-integer inputs.\n\n### Solution Code\n```python\ndef factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n-1)\n\ntry:\n    num = int(input(\"Enter a non-negative integer: \"))\n    if num < 0:\n        print(\"Factorial is not defined for negative numbers.\")\n    else:\n        print(\"Factorial of\", num, \"is\", factorial(num))\nexcept ValueError:\n    print(\"Invalid input. Please enter an integer.\")\n```\n\n### Explanation\n1. **Factorial Function**: This recursive function computes the factorial of the given number. It returns 1 when the input is 0 or 1, and for larger numbers, it calls itself with the decremented value.\n2. **Input Handling**: The script prompts the user for input and attempts to convert it to an integer. If the input is not a valid integer, it catches the `ValueError` and prints an error message.\n3. **Negative Numbers**: If the user enters a negative number, the script informs them that factorial is not defined for negative numbers.\n\nThis script provides a simple and effective way to calculate the factorial of a non-negative integer using recursion, with proper handling for invalid inputs.\n"
    }
]