[
    {
        "role": "user",
        "content": "Implement a C++ class representing a simple stack data structure with methods for push, pop, top, and checking if the stack is empty. Additionally, write a main function that demonstrates the usage of this stack class by performing a series of operations and printing the results.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a simple stack data structure in C++, along with a `main` function that demonstrates its usage.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Stack {\nprivate:\n    std::vector<int> elements;\n\npublic:\n    // Push an element onto the stack\n    void push(int value) {\n        elements.push_back(value);\n    }\n\n    // Pop an element from the stack\n    void pop() {\n        if (isEmpty()) {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n            return;\n        }\n        elements.pop_back();\n    }\n\n    // Get the top element of the stack\n    int top() const {\n        if (isEmpty()) {\n            std::cout << \"Stack is empty.\" << std::endl;\n            return -1; // Assuming -1 is an invalid value\n        }\n        return elements.back();\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() const {\n        return elements.empty();\n    }\n};\n\nint main() {\n    Stack stack;\n\n    // Demonstrate pushing elements\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    // Demonstrate top\n    std::cout << \"Top element: \" << stack.top() << std::endl; // Should print 30\n\n    // Demonstrate popping elements\n    stack.pop();\n    std::cout << \"Top element after pop: \" << stack.top() << std::endl; // Should print 20\n\n    // Demonstrate checking if empty\n    std::cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Should print No\n\n    // Pop all elements\n    stack.pop();\n    stack.pop();\n\n    // Check if empty after popping all elements\n    std::cout << \"Is stack empty after popping all elements? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Should print Yes\n\n    // Try to pop from empty stack\n    stack.pop(); // Should print \"Stack is empty. Cannot pop.\"\n\n    // Try to get top from empty stack\n    std::cout << \"Top element of empty stack: \" << stack.top() << std::endl; // Should print \"Stack is empty.\" and -1\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Stack Class**:\n   - Uses a `std::vector<int>` to store elements.\n   - `push(int value)`: Adds an element to the end of the vector.\n   - `pop()`: Removes the last element if the stack is not empty.\n   - `top() const`: Returns the last element if the stack is not empty; otherwise, prints a message and returns -1.\n   - `isEmpty() const`: Returns true if the vector is empty, otherwise false.\n\n2. **Main Function**:\n   - Creates an instance of the `Stack` class.\n   - Pushes elements onto the stack and demonstrates the `top` method.\n   - Pops elements and checks if the stack is empty.\n   - Handles cases where operations are performed on an empty stack, printing appropriate messages.\n\nThis implementation ensures that the stack behaves as expected and handles edge cases gracefully."
    }
]