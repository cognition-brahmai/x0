[
    {
        "role": "user",
        "content": "Implement a simple stack data structure in Java, with methods for push, pop, and peek operations. The stack should have a fixed size and throw an exception when trying to push an element onto a full stack."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, you want to implement a simple stack data structure in Java, right? A stack is a Last-In-First-Out (LIFO) data structure, which means the last element you add is the first one to be removed.\n\nWe'll create a class called `Stack` that has the following methods:\n\n1. `push(item)`: Adds an item to the top of the stack. If the stack is full, it should throw an exception.\n\n2. `pop()`: Removes and returns the top item from the stack. If the stack is empty, it should throw an exception.\n\n3. `peek()`: Returns the top item from the stack without removing it. If the stack is empty, it should throw an exception.\n\nAdditionally, the stack should have a fixed size, meaning it can only hold a certain number of elements.\n\nLet's start by defining the class and its properties.\n\n## Final Solution\nTo implement a simple stack data structure in Java with fixed size and methods for push, pop, and peek operations, we can use an array to store the elements. The stack will have a fixed capacity, and we will throw exceptions when attempting to push onto a full stack or pop/peek from an empty stack.\n\n### Approach\n\n1. **Initialization**:\n   - Create a private array to hold the stack elements.\n   - Maintain a private integer variable to keep track of the current size of the stack.\n   - Set the top of the stack to -1 initially since the stack is empty.\n\n2. **Push Operation**:\n   - Check if the stack is full (i.e., current size equals the capacity).\n   - If full, throw an `IllegalArgumentException`.\n   - If not full, add the element to the top of the stack and increment the size.\n\n3. **Pop Operation**:\n   - Check if the stack is empty (i.e., size is 0).\n   - If empty, throw an `IllegalArgumentException`.\n   - If not empty, remove the element from the top of the stack and decrement the size.\n\n4. **Peek Operation**:\n   - Check if the stack is empty.\n   - If empty, throw an `IllegalArgumentException`.\n   - If not empty, return the element at the top of the stack without removing it.\n\n### Solution Code\n\n```java\npublic class Stack {\n    private int[] elements;\n    private int size;\n    private int top;\n\n    public Stack(int capacity) {\n        if (capacity <= 0) {\n            throw new IllegalArgumentException(\"Capacity must be positive\");\n        }\n        elements = new int[capacity];\n        size = 0;\n        top = -1;\n    }\n\n    public void push(int item) {\n        if (isFull()) {\n            throw new IllegalArgumentException(\"Stack is full\");\n        }\n        top++;\n        elements[top] = item;\n        size++;\n    }\n\n    public int pop() {\n        if (isEmpty()) {\n            throw new IllegalArgumentException(\"Stack is empty\");\n        }\n        int item = elements[top];\n        top--;\n        size--;\n        return item;\n    }\n\n    public int peek() {\n        if (isEmpty()) {\n            throw new IllegalArgumentException(\"Stack is empty\");\n        }\n        return elements[top];\n    }\n\n    public boolean isEmpty() {\n        return size == 0;\n    }\n\n    public boolean isFull() {\n        return size == elements.length;\n    }\n\n    public int size() {\n        return size;\n    }\n}\n```\n\n### Explanation\n\n- **Initialization**: The constructor initializes the stack with a given capacity. It throws an `IllegalArgumentException` if the capacity is not positive.\n\n- **Push Operation**: Adds an element to the top of the stack and increments the size. Throws an exception if the stack is full.\n\n- **Pop Operation**: Removes the element from the top of the stack and decrements the size. Throws an exception if the stack is empty.\n\n- **Peek Operation**: Returns the element at the top of the stack without removing it. Throws an exception if the stack is empty.\n\n- **Helper Methods**: `isEmpty`, `isFull`, and `size` provide additional functionality to check the state of the stack.\n\nThis implementation ensures that the stack operates within its defined capacity and handles edge cases appropriately by throwing exceptions when necessary."
    }
]