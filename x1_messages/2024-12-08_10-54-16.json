[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a basic text editor with undo and redo functionality. The editor should accept keyboard input and store the text in memory, allowing the user to undo and redo changes made to the text."
    },
    {
        "role": "assistant",
        "content": "Creating a C++ program that simulates a basic text editor with undo and redo functionality is an interesting project. To achieve this, we'll need to manage the text buffer and keep track of changes made by the user so that we can undo and redo those changes as needed.\n\n### Approach\n\n1. **Text Buffer**: Use a string to store the current text.\n2. **Undo/Redo Mechanism**: Use two stacks to manage undo and redo operations. One stack will store the states before each change (for undo), and another will store the states after each change (for redo).\n3. **User Input**: Read user input character by character to simulate keyboard input.\n4. **Commands**: Implement specific commands for undo and redo, possibly using special key combinations or commands.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <stack>\n#include <string>\n\nclass TextEditor {\nprivate:\n    std::string text;\n    std::stack<std::string> undoStack;\n    std::stack<std::string> redoStack;\n\npublic:\n    TextEditor() : text(\"\") {}\n\n    void type(const std::string& str) {\n        undoStack.push(text);\n        text += str;\n        redoStack.clear(); // Clear redo stack on new action\n    }\n\n    void undo() {\n        if (!undoStack.empty()) {\n            redoStack.push(text);\n            text = undoStack.top();\n            undoStack.pop();\n        } else {\n            std::cout << \"Nothing to undo.\\n\";\n        }\n    }\n\n    void redo() {\n        if (!redoStack.empty()) {\n            undoStack.push(text);\n            text = redoStack.top();\n            redoStack.pop();\n        } else {\n            std::cout << \"Nothing to redo.\\n\";\n        }\n    }\n\n    void display() const {\n        std::cout << \"Current text: \" << text << std::endl;\n    }\n};\n\nint main() {\n    TextEditor editor;\n    std::string input;\n\n    while (true) {\n        std::cout << \"Enter text (type 'undo', 'redo', or 'exit' to perform actions): \";\n        std::getline(std::cin, input);\n\n        if (input == \"undo\") {\n            editor.undo();\n        } else if (input == \"redo\") {\n            editor.redo();\n        } else if (input == \"exit\") {\n            break;\n        } else {\n            editor.type(input);\n        }\n\n        editor.display();\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **TextEditor Class**:\n   - **Attributes**:\n     - `text`: Stores the current text.\n     - `undoStack`: Stack to keep track of previous states for undo operations.\n     - `redoStack`: Stack to keep track of states for redo operations.\n   - **Methods**:\n     - `type(const std::string& str)`: Adds the given string to the text buffer, pushes the current state to the undo stack, and clears the redo stack.\n     - `undo()`: Restores the previous state from the undo stack and pushes the current state to the redo stack.\n     - `redo()`: Restores the last undone state from the redo stack and pushes the current state to the undo stack.\n     - `display() const`: Prints the current text.\n\n2. **main Function**:\n   - Creates an instance of `TextEditor`.\n   - Reads input from the user in a loop.\n   - Processes commands like 'undo', 'redo', and 'exit', or appends text to the editor.\n   - Displays the current text after each operation.\n\nThis basic implementation provides a foundation for a text editor with undo and redo functionality. Further enhancements could include handling individual keystrokes, implementing more advanced editing features, or improving the user interface."
    }
]