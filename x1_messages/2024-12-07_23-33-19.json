[
    {
        "role": "user",
        "content": "Design a Ruby script that reads a CSV file containing employee data (name, age, salary) and outputs the average salary grouped by age ranges (e.g., 20-29, 30-39)."
    },
    {
        "role": "assistant",
        "content": "To design a Ruby script that reads a CSV file containing employee data (name, age, salary) and outputs the average salary grouped by age ranges (e.g., 20-29, 30-39), you can follow these steps:\n\n1. **Read the CSV file**: Use Ruby's CSV library to read the data.\n2. **Group employees by age ranges**: Categorize employees into different age groups.\n3. **Calculate the average salary for each age group**: Compute the average salary for each group.\n4. **Output the results**: Print or return the average salaries for each age range.\n\nHere is a sample script that accomplishes this:\n\n```ruby\nrequire 'csv'\n\n# Define age ranges\nage_ranges = {\n  '20-29' => (20..29),\n  '30-39' => (30..39),\n  '40-49' => (40..49),\n  '50-59' => (50..59),\n  '60+' => (60..Float::INFINITY)\n}\n\n# Function to determine the age range\ndef get_age_range(age, ranges)\n  ranges.find { |range, range_values| range_values.include?(age) }&.first\nend\n\n# Read CSV file\nfile_path = 'employees.csv' # Replace with your CSV file path\ndata = CSV.read(file_path, headers: true)\n\n# Group salaries by age ranges\nsalary_groups = Hash.new { |h, k| h[k] = [] }\n\ndata.each do |row|\n  age = row['age'].to_i\n  salary = row['salary'].to_f\n  age_range = get_age_range(age, age_ranges)\n  salary_groups[age_range] << salary unless age_range.nil?\nend\n\n# Calculate average salaries\naverage_salaries = {}\nsalary_groups.each do |range, salaries|\n  average_salaries[range] = salaries.reduce(:+) / salaries.size if salaries.any?\nend\n\n# Output the results\naverage_salaries.each do |range, avg_salary|\n  puts \"#{range}: #{'%.2f' % avg_salary}\"\nend\n```\n\n### Explanation:\n\n1. **Define Age Ranges**: \n   - We define age ranges using a hash where keys are range labels and values are range objects.\n\n2. **Determine Age Range**:\n   - The `get_age_range` function finds the appropriate age range for a given age.\n\n3. **Read CSV File**:\n   - Use `CSV.read` to read the CSV file with headers.\n\n4. **Group Salaries by Age Ranges**:\n   - Iterate through each row of the CSV data.\n   - Convert age and salary to appropriate types.\n   - Determine the age range and group salaries accordingly.\n\n5. **Calculate Average Salaries**:\n   - For each age group, calculate the average salary if there are salaries in the group.\n\n6. **Output Results**:\n   - Print the average salary for each age range formatted to two decimal places.\n\nMake sure to replace `'employees.csv'` with the path to your actual CSV file. This script assumes that the CSV has columns named 'name', 'age', and 'salary'. Adjust the column names if they differ in your CSV file."
    }
]