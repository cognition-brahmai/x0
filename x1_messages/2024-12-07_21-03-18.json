[
    {
        "role": "user",
        "content": "Write a Python script that connects to an Elasticsearch instance, indexes sample documents, and performs a search query with pagination support.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python script that interacts with an Elasticsearch instance. We'll cover connecting to Elasticsearch, indexing some sample documents, and performing a search query with pagination support.\n\nFirst, make sure you have Elasticsearch installed and running on your machine or have access to an Elasticsearch instance. You'll also need the `elasticsearch` Python client library. You can install it using pip if you haven't already:\n\n```bash\npip install elasticsearch\n```\n\nNow, let's start by importing the necessary modules and connecting to your Elasticsearch instance.\n\n### Connecting to Elasticsearch\n\nAssuming your Elasticsearch instance is running locally on the default port, you can connect like this:\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Connect to the local Elasticsearch instance\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\n# Check if connected\nif es.ping():\n    print(\"Connected to Elasticsearch!\")\nelse:\n    print(\"Could not connect to Elasticsearch\")\n```\n\n### Indexing Sample Documents\n\nLet's index some sample documents into an index called `sample_index`. Each document will have a `title` and `content`.\n\n```python\n# Define sample documents\ndocuments = [\n    {\"title\": \"Document 1\", \"content\": \"This is the first document.\"},\n    {\"title\": \"Document 2\", \"content\": \"This is the second document.\"},\n    {\"title\": \"Document 3\", \"content\": \"This is the third document.\"},\n    {\"title\": \"Document 4\", \"content\": \"This is the fourth document.\"},\n    {\"title\": \"Document 5\", \"content\": \"This is the fifth document.\"}\n]\n\n# Index each document\nfor idx, doc in enumerate(documents):\n    res = es.index(index=\"sample_index\", id=idx+1, body=doc)\n    print(f\"Indexed document {idx+1}: {res['result']}\")\n```\n\n### Performing a Search Query with Pagination\n\nTo support pagination, we'll use the `from` and `size` parameters in our search query. This allows us to retrieve a specific page of results.\n\nLet's define a function that performs a search query with pagination:\n\n```python\ndef search_with_pagination(query, page=1, page_size=10):\n    from_val = (page - 1) * page_size\n    to_val = from_val + page_size\n    \n    search_body = {\n        \"query\": {\n            \"multi_match\": {\n                \"query\": query,\n                \"fields\": [\"title\", \"content\"]\n            }\n        },\n        \"from\": from_val,\n        \"size\": page_size\n    }\n    \n    res = es.search(index=\"sample_index\", body=search_body)\n    return res\n\n# Example usage:\nquery = \"document\"\npage = 1\npage_size = 2\n\nresults = search_with_pagination(query, page, page_size)\nfor hit in results['hits']['hits']:\n    print(hit[\"_source\"])\n```\n\nIn this example, the `search_with_pagination` function takes a search query, page number, and page size as parameters. It calculates the `from` value based on the page and page size, constructs the search body, and executes the search using the `es.search` method.\n\n### Full Script\n\nHere's the full script combining all the parts:\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Connect to the local Elasticsearch instance\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\n# Check if connected\nif es.ping():\n    print(\"Connected to Elasticsearch!\")\nelse:\n    print(\"Could not connect to Elasticsearch\")\n\n# Define sample documents\ndocuments = [\n    {\"title\": \"Document 1\", \"content\": \"This is the first document.\"},\n    {\"title\": \"Document 2\", \"content\": \"This is the second document.\"},\n    {\"title\": \"Document 3\", \"content\": \"This is the third document.\"},\n    {\"title\": \"Document 4\", \"content\": \"This is the fourth document.\"},\n    {\"title\": \"Document 5\", \"content\": \"This is the fifth document.\"}\n]\n\n# Index each document\nfor idx, doc in enumerate(documents):\n    res = es.index(index=\"sample_index\", id=idx+1, body=doc)\n    print(f\"Indexed document {idx+1}: {res['result']}\")\n\ndef search_with_pagination(query, page=1, page_size=10):\n    from_val = (page - 1) * page_size\n    to_val = from_val + page_size\n    \n    search_body = {\n        \"query\": {\n            \"multi_match\": {\n                \"query\": query,\n                \"fields\": [\"title\", \"content\"]\n            }\n        },\n        \"from\": from_val,\n        \"size\": page_size\n    }\n    \n    res = es.search(index=\"sample_index\", body=search_body)\n    return res\n\n# Example usage:\nquery = \"document\"\npage = 1\npage_size = 2\n\nresults = search_with_pagination(query, page, page_size)\nfor hit in results['hits']['hits']:\n    print(hit[\"_source\"])\n```\n\nThis script connects to Elasticsearch, indexes some sample documents, and performs a searchable query with pagination support. You can modify the `query`, `page`, and `page_size` variables to test different search scenarios.\n\n### Notes\n\n- Ensure that the Elasticsearch instance is running and accessible at the specified host and port.\n- Adjust the `index` name and `fields` in the search query as per your requirements.\n- Handle exceptions and errors as needed in a production environment.\n\nThis should give you a good starting point for working with Elasticsearch in Python, including indexing documents and performing paginated searches."
    }
]