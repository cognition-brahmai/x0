[
    {
        "role": "user",
        "content": "Implement a stack data structure in Python with push, pop, and peek operations. Include error handling for empty stacks."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Implementing a stack in Python is straightforward because stacks follow the Last In, First Out (LIFO) principle. We can use a list to create a stack, as lists in Python have append and pop methods that allow us to add and remove elements from the end efficiently.\n\nHere's a simple implementation of a stack with push, pop, and peek operations, including error handling for empty stacks:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"Pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"Peek from empty stack\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(\"Top element is:\", stack.peek())\n    print(\"Popped element is:\", stack.pop())\n    print(\"Now, top element is:\", stack.peek())\n    print(\"Is the stack empty?\", stack.is_empty())\n```\n\n### Explanation:\n\n1. **Initialization (`__init__`)**:\n   - We initialize the stack with an empty list.\n\n2. **is_empty**:\n   - This method checks if the stack is empty by returning `True` if the list is empty, otherwise `False`.\n\n3. **push**:\n   - This method adds an item to the top of the stack using the `append` method of the list.\n\n4. **pop**:\n   - This method removes and returns the top element of the stack using the `pop` method of the list.\n   - If the stack is empty, it raises an `IndexError` with an appropriate message.\n\n5. **peek**:\n   - This method returns the top element of the stack without removing it.\n   - It accesses the last element of the list using index `-1`.\n   - If the stack is empty, it raises an `IndexError` with an appropriate message.\n\nThis implementation ensures that all stack operations are performed efficiently, and error handling is in place to prevent issues when trying to pop or peek from an empty stack."
    }
]