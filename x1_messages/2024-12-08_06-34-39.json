[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a basic calculator supporting addition, subtraction, multiplication, and division operations. The program should use object-oriented programming principles and include unit tests to verify correct functionality."
    },
    {
        "role": "assistant",
        "content": "Creating a C++ program that functions as a basic calculator using object-oriented programming (OOP) principles is a great way to understand classes, objects, and encapsulation. Additionally, incorporating unit tests ensures that the calculator functions correctly under various scenarios.\n\n### Approach\n\n1. **Class Design**:\n   - Create a class named `Calculator` that handles basic arithmetic operations: addition, subtraction, multiplication, and division.\n   - Each operation will be a method within this class.\n\n2. **Encapsulation**:\n   - Use private member variables to store the operands.\n   - Provide public methods to set operands and perform operations.\n\n3. **Error Handling**:\n   - Handle division by zero appropriately.\n\n4. **Unit Testing**:\n   - Use the Google Test framework to write tests for each operation to ensure correctness.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass Calculator {\nprivate:\n    double operand1;\n    double operand2;\n\npublic:\n    void setOperand1(double num) {\n        operand1 = num;\n    }\n\n    void setOperand2(double num) {\n        operand2 = num;\n    }\n\n    double add() const {\n        return operand1 + operand2;\n    }\n\n    double subtract() const {\n        return operand1 - operand2;\n    }\n\n    double multiply() const {\n        return operand1 * operand2;\n    }\n\n    double divide() const {\n        if (operand2 == 0) {\n            throw std::runtime_error(\"Division by zero is not allowed.\");\n        }\n        return operand1 / operand2;\n    }\n};\n\n// Example usage\nint main() {\n    Calculator calc;\n    calc.setOperand1(10);\n    calc.setOperand2(5);\n\n    std::cout << \"Addition: \" << calc.add() << std::endl;\n    std::cout << \"Subtraction: \" << calc.subtract() << std::endl;\n    std::cout << \"Multiplication: \" << calc.multiply() << std::endl;\n    try {\n        std::cout << \"Division: \" << calc.divide() << std::endl;\n    } catch (const std::runtime_error& e) {\n        std::cerr << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Unit Tests with Google Test\n\nTo ensure the calculator works correctly, we can write unit tests using the Google Test framework.\n\n```cpp\n#include \"gtest/gtest.h\"\n#include \"Calculator.h\"\n\nTEST(CalculatorTest, Addition) {\n    Calculator calc;\n    calc.setOperand1(5);\n    calc.setOperand2(3);\n    EXPECT_DOUBLE_EQ(calc.add(), 8);\n}\n\nTEST(CalculatorTest, Subtraction) {\n    Calculator calc;\n    calc.setOperand1(5);\n    calc.setOperand2(3);\n    EXPECT_DOUBLE_EQ(calc.subtract(), 2);\n}\n\nTEST(CalculatorTest, Multiplication) {\n    Calculator calc;\n    calc.setOperand1(5);\n    calc.setOperand2(3);\n    EXPECT_DOUBLE_EQ(calc.multiply(), 15);\n}\n\nTEST(CalculatorTest, Division) {\n    Calculator calc;\n    calc.setOperand1(6);\n    calc.setOperand2(3);\n    EXPECT_DOUBLE_EQ(calc.divide(), 2);\n}\n\nTEST(CalculatorTest, DivisionByZero) {\n    Calculator calc;\n    calc.setOperand1(5);\n    calc.setOperand2(0);\n    EXPECT_THROW(calc.divide(), std::runtime_error);\n}\n\nint main(int argc, char **argv) {\n    ::testing::InitGoogleTest(&argc, argv);\n    return RUN_ALL_TESTS();\n}\n```\n\n### Explanation\n\n1. **Calculator Class**:\n   - **setOperand1 and setOperand2**: Methods to set the operands.\n   - **add, subtract, multiply, divide**: Methods to perform arithmetic operations.\n   - **divide**: Includes error handling for division by zero.\n\n2. **Main Function**:\n   - Demonstrates setting operands and performing operations.\n   - Handles potential exceptions during division.\n\n3. **Unit Tests**:\n   - Tests addition, subtraction, multiplication, and division with expected results.\n   - Tests division by zero to ensure it throws an exception.\n\nThis approach ensures that the calculator is both functional and robust, with clear separation of concerns and comprehensive testing."
    }
]