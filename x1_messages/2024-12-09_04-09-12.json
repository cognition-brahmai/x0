[
    {
        "role": "user",
        "content": "Implement a C++ class called \"BankAccount\" with member variables for account number, account holder's name, and balance. Include methods for depositing money, withdrawing money, and displaying account details. Ensure proper encapsulation and error handling for invalid operations like withdrawing more than the available balance."
    },
    {
        "role": "assistant",
        "content": "Sure! I'll help you create a C++ class called \"BankAccount\" with the specified features. We'll make sure to encapsulate the data properly and handle errors for operations like withdrawing more than the available balance.\n\nHere's a step-by-step implementation:\n\n1. **Class Definition**: Define the class with private member variables for account number, account holder's name, and balance.\n\n2. **Constructors**: Create a constructor to initialize these member variables.\n\n3. **Methods**:\n   - `deposit(double amount)`: Add the specified amount to the balance.\n   - `withdraw(double amount)`: Subtract the specified amount from the balance if sufficient funds are available.\n   - `display()`: Print the account details.\n\n4. **Encapsulation**: Use private member variables and public methods to access and modify them.\n\n5. **Error Handling**: Check for invalid operations like withdrawing more than the available balance and handle such cases appropriately.\n\nHere's the complete code:\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    std::string accountHolderName;\n    double balance;\n\npublic:\n    // Constructor\n    BankAccount(int accNum, const std::string& accHolderName, double initialBalance)\n        : accountNumber(accNum), accountHolderName(accHolderName), balance(initialBalance) {}\n\n    // Deposit money\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            std::cout << \"Deposited: \" << amount << \" New balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Invalid deposit amount.\" << std::endl;\n        }\n    }\n\n    // Withdraw money\n    void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n                std::cout << \"Withdrew: \" << amount << \" New balance: \" << balance << std::endl;\n            } else {\n                std::cout << \"Insufficient funds. Cannot withdraw \" << amount << std::endl;\n            }\n        } else {\n            std::cout << \"Invalid withdrawal amount.\" << std::endl;\n        }\n    }\n\n    // Display account details\n    void display() const {\n        std::cout << \"Account Number: \" << accountNumber << std::endl;\n        std::cout << \"Account Holder Name: \" << accountHolderName << std::endl;\n        std::cout << \"Balance: \" << balance << std::endl;\n    }\n};\n\nint main() {\n    // Create a BankAccount object\n    BankAccount myAccount(123456, \"John Doe\", 1000.0);\n\n    // Display initial account details\n    myAccount.display();\n\n    // Deposit money\n    myAccount.deposit(500.0);\n\n    // Withdraw money\n    myAccount.withdraw(200.0);\n\n    // Attempt to withdraw more than balance\n    myAccount.withdraw(2000.0);\n\n    // Display final account details\n    myAccount.display();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - `accountNumber`: Integer to store the account number.\n   - `accountHolderName`: String to store the account holder's name.\n   - `balance`: Double to store the account balance.\n\n2. **Constructor**:\n   - Initializes the account number, account holder's name, and initial balance.\n\n3. **deposit(double amount)**:\n   - Adds the specified amount to the balance if the amount is positive.\n   - Prints an error message for invalid deposit amounts.\n\n4. **withdraw(double amount)**:\n   - Subtracts the specified amount from the balance if sufficient funds are available and the amount is positive.\n   - Prints an error message for insufficient funds or invalid withdrawal amounts.\n\n5. **display()**:\n   - Prints the account number, account holder's name, and balance.\n\nThis implementation ensures that the account details are encapsulated, and error handling is in place for invalid operations."
    }
]