[
    {
        "role": "user",
        "content": "Develop a Python script that monitors CPU usage and memory consumption every 5 seconds and sends an email alert if either value exceeds 80% for more than 30 seconds. Use smtplib for sending emails.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that keeps an eye on the CPU usage and memory consumption of my system. It needs to check these every 5 seconds, and if either the CPU usage or the memory usage goes above 80% and stays there for more than 30 seconds, it should send an email alert. I'm supposed to use the smtplib for sending emails. Okay, let's break this down.\n\nFirst, I need to monitor CPU and memory usage. I remember there's a module in Python called 'psutil' that can help with that. Psutil provides a cross-platform way to access system details and process utilities. I should probably start by installing that if I don't have it already.\n\nSo, I'll need to:\n\n1. Install psutil if it's not installed.\n\n2. Import the necessary modules: psutil, time, and smtplib.\n\n3. Set up email parameters like sender email, password, recipient email, and the SMTP server details.\n\n4. Continuously monitor CPU and memory usage every 5 seconds.\n\n5. Check if either CPU or memory usage exceeds 80%.\n\n6. If it does, start a timer to see how long it stays above 80%.\n\n7. If it stays above 80% for more than 30 seconds, send an email alert.\n\n8. Continue monitoring even after sending the alert.\n\nLet me think about the structure of the script. I'll probably need some variables to keep track of whether the usage is high and how long it's been high. Maybe something like a flag that gets set when usage goes above 80%, and then I can start counting the time.\n\nI also need to make sure that the email gets sent only once during a continuous period of high usage. So, maybe after sending the email, I can set a flag to indicate that an alert has been sent, and reset that flag only when the usage goes back below 80%.\n\nWait, but the task says to send an email if the usage exceeds 80% for more than 30 seconds. So, I need to measure the time that the usage is above 80% and only send the email after it surpasses 30 seconds.\n\nLet me sketch a rough plan:\n\n- Initialize variables:\n\n- high_cpu_time = 0\n\n- high_memory_time = 0\n\n- email_sent = False\n\n- Start an infinite loop:\n\n- Get CPU usage using psutil.cpu_percent()\n\n- Get memory usage using psutil.virtual_memory().percent\n\n- If CPU usage > 80:\n\n- If high_cpu_time == 0:\n\n- Set high_cpu_time to the current time\n\n- Else:\n\n- Calculate the time difference since high_cpu_time\n\n- If time difference > 30 seconds and not email_sent:\n\n- Send email alert\n\n- Set email_sent = True\n\n- Else if CPU usage <= 80:\n\n- Reset high_cpu_time to 0\n\n- Reset email_sent to False\n\n- Do the same for memory usage.\n\n- Wait for 5 seconds before the next check.\n\nI think that makes sense. Now, for the email part, I need to use smtplib. I'll have to set up the email message, including the subject and body, and then send it using the SMTP server of the email provider I'm using.\n\nI should also handle any exceptions that might occur during email sending, like network issues or incorrect email credentials.\n\nAdditionally, I should make sure that the script can run continuously without stopping, maybe by placing it in a try-except block to catch any errors and keep running.\n\nLet me think about how to implement the time measurements. I can use the time module, specifically time.time() to get the current time in seconds since the epoch. Then, by subtracting the high_cpu_time from the current time, I can get the duration that the CPU usage has been high.\n\nSimilarly for memory usage.\n\nI should also consider that both CPU and memory usage are being monitored independently, so I need separate variables for each.\n\nMaybe I can have:\n\n- cpu_high_time = None\n\n- memory_high_time = None\n\n- email_sent = False\n\nThen, in the loop:\n\n- Get CPU usage\n\n- If CPU usage > 80:\n\n- If cpu_high_time is None:\n\n- Set cpu_high_time = time.time()\n\n- Else:\n\n- Calculate current_time - cpu_high_time\n\n- If difference > 30 seconds and not email_sent:\n\n- Send email\n\n- Set email_sent = True\n\n- Else if CPU usage <= 80:\n\n- Set cpu_high_time = None\n\n- Set email_sent = False\n\n- Do the same for memory usage.\n\nWait, but email_sent is shared between CPU and memory. Maybe I need separate flags for each.\n\nProbably better to have:\n\n- cpu_email_sent = False\n\n- memory_email_sent = False\n\n- cpu_high_time = None\n\n- memory_high_time = None\n\nThat way, I can handle them independently.\n\nSo, in the loop:\n\n- Check CPU usage:\n\n- If >80:\n\n- If cpu_high_time is None:\n\n- Set cpu_high_time = time.time()\n\n- Else:\n\n- Calculate time elapsed since cpu_high_time\n\n- If elapsed > 30 seconds and not cpu_email_sent:\n\n- Send email for CPU\n\n- Set cpu_email_sent = True\n\n- Else if <=80:\n\n- Set cpu_high_time = None\n\n- Set cpu_email_sent = False\n\n- Do the same for memory usage.\n\nYes, that seems better.\n\nNow, for the email part, I need to set up the SMTP server details. If I'm using Gmail, the SMTP server is 'smtp.gmail.com' and port 587. I'll need to provide the sender's email and password.\n\nBut wait, Google has security measures in place that might block sign-in attempts from less secure apps, which includes using smtplib. So, I might need to allow less secure apps in my Google account settings, or use app passwords if two-factor authentication is enabled.\n\nAlternatively, I can use OAuth2 to authenticate, but that might be more complicated.\n\nFor simplicity, I'll assume that the user has allowed less secure apps or is using an email provider that doesn't have such restrictions.\n\nI should also consider that the user might be using a different email provider, so I'll need to make the SMTP server and port configurable.\n\nMaybe I can have configuration variables at the top of the script for email settings.\n\nSomething like:\n\nEMAIL_ADDRESS = 'your_email@example.com'\n\nEMAIL_PASSWORD = 'your_password'\n\nSMTP_SERVER = 'smtp.example.com'\n\nSMTP_PORT = 587\n\nRECIPIENT_EMAIL = 'recipient@example.com'\n\nThen, in the script, I can use smtplib to connect to the SMTP server, log in, and send the email.\n\nThe email message should include the subject and body. Maybe something like:\n\nSubject: Resource Usage Alert\n\nBody: CPU usage exceeds 80% for more than 30 seconds.\n\nor\n\nMemory usage exceeds 80% for more than 30 seconds.\n\nDepending on which resource is high.\n\nI should also include the current usage percentage in the email.\n\nAdditionally, it might be useful to include the current time when the alert was sent.\n\nTo get the current time, I can use datetime.datetime.now().\n\nSo, in the email body, I can have:\n\n\"Alert: CPU usage is at XX%, which is above the threshold for more than 30 seconds. Time: HH:MM:SS\"\n\nSame for memory.\n\nNow, let's think about how to structure the script.\n\nI can have the following sections:\n\n1. Import necessary modules:\n\nimport psutil\n\nimport time\n\nimport smtplib\n\nfrom email.mime.text import MIMEText\n\nfrom email.mime.multipart import MIMEMultipart\n\n2. Define email configuration variables:\n\nEMAIL_ADDRESS = 'your_email@example.com'\n\nEMAIL_PASSWORD = 'your_password'\n\nSMTP_SERVER = 'smtp.example.com'\n\nSMTP_PORT = 587\n\nRECIPIENT_EMAIL = 'recipient@example.com'\n\n3. Function to send email:\n\ndef send_email(subject, body):\n\nmsg = MIMEMultipart()\n\nmsg['From'] = EMAIL_ADDRESS\n\nmsg['To'] = RECIPIENT_EMAIL\n\nmsg['Subject'] = subject\n\nmsg.attach(MIMEText(body, 'plain'))\n\nserver = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n\nserver.starttls()\n\nserver.login(EMAIL_ADDRESS, EMAIL_PASSWORD)\n\ntext = msg.as_string()\n\nserver.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, text)\n\nserver.quit()\n\n4. Main monitoring loop:\n\ncpu_high_time = None\n\nmemory_high_time = None\n\ncpu_email_sent = False\n\nmemory_email_sent = False\n\nwhile True:\n\ncpu_usage = psutil.cpu_percent()\n\nmemory_usage = psutil.virtual_memory().percent\n\nif cpu_usage > 80:\n\nif cpu_high_time is None:\n\ncpu_high_time = time.time()\n\nelse:\n\nelapsed_time = time.time() - cpu_high_time\n\nif elapsed_time > 30 and not cpu_email_sent:\n\nsubject = 'CPU Usage Alert'\n\nbody = f'CPU usage is at {cpu_usage}%, which is above the threshold for more than 30 seconds. Time: {time.strftime(\"%Y-%m-%d %H:%M:%S\")}\n\nsend_email(subject, body)\n\ncpu_email_sent = True\n\nelif cpu_usage <= 80:\n\ncpu_high_time = None\n\ncpu_email_sent = False\n\nif memory_usage > 80:\n\nif memory_high_time is None:\n\nmemory_high_time = time.time()\n\nelse:\n\nelapsed_time = time.time() - memory_high_time\n\nif elapsed_time > 30 and not memory_email_sent:\n\nsubject = 'Memory Usage Alert'\n\nbody = f'Memory usage is at {memory_usage}%, which is above the threshold for more than 30 seconds. Time: {time.strftime(\"%Y-%m-%d %H:%M:%S\")}\n\nsend_email(subject, body)\n\nmemory_email_sent = True\n\nelif memory_usage <= 80:\n\nmemory_high_time = None\n\nmemory_email_sent = False\n\ntime.sleep(5)\n\nI think that covers the basic functionality.\n\nNow, I should consider error handling. For example, what if the email credentials are incorrect? Or if there's no internet connection to send the email? I should wrap the email sending function in a try-except block to handle such exceptions.\n\nAlso, the main loop should be resilient to errors. If an error occurs during the monitoring, it should log the error and continue running.\n\nI can use a try-except block around the entire loop, and print the error message.\n\nAdditionally, I might want to log the resource usage periodically, even without sending an email, for monitoring purposes. Maybe print the usage every 5 seconds.\n\nSomething like:\n\nprint(f'Time: {time.strftime(\"%Y-%m-%d %H:%M:%S\")}, CPU: {cpu_usage}%, Memory: {memory_usage}%')\n\nThis way, I can see the output in the console.\n\nAlso, I should consider if the script should run indefinitely or if there should be a way to stop it. Maybe accept a command-line argument to specify the runtime or provide a way to interrupt it with Ctrl+C.\n\nFor now, I'll assume it's intended to run indefinitely until manually stopped.\n\nAnother thing to consider is that psutil.cpu_percent() gives a instantaneous CPU usage percentage, but it's sometimes more accurate to take an average over a short period. Psutil allows specifying an interval for CPU usage, like psutil.cpu_percent(interval=1), which will give the average CPU usage over 1 second.\n\nI should decide whether to use an interval or not. If I use interval=1, it will wait for 1 second to calculate the usage, which might add up with the 5-second sleep, making the total loop time longer.\n\nProbably, it's better to use interval=0, which is instantaneous, and then sleep for 5 seconds.\n\nSo, psutil.cpu_percent(interval=0).\n\nSimilarly for memory usage.\n\nAlright, I think I have a solid plan now. Let me proceed to write the script accordingly.\n\n## Final Solution\nTo create a Python script that monitors CPU usage and memory consumption every 5 seconds and sends an email alert if either value exceeds 80% for more than 30 seconds, follow the steps below.\n\n### Solution Code\n\n```python\nimport psutil\nimport time\nimport smtplib\nfrom email.mime.text import MIMEText\nfrom email.mime.multipart import MIMEMultipart\n\n# Email configuration\nEMAIL_ADDRESS = 'your_email@example.com'\nEMAIL_PASSWORD = 'your_password'\nSMTP_SERVER = 'smtp.example.com'\nSMTP_PORT = 587\nRECIPIENT_EMAIL = 'recipient@example.com'\n\ndef send_email(subject, body):\n    msg = MIMEMultipart()\n    msg['From'] = EMAIL_ADDRESS\n    msg['To'] = RECIPIENT_EMAIL\n    msg['Subject'] = subject\n    msg.attach(MIMEText(body, 'plain'))\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)\n        text = msg.as_string()\n        server.sendmail(EMAIL_ADDRESS, RECIPIENT_EMAIL, text)\n        server.quit()\n        print(\"Email sent successfully.\")\n    except Exception as e:\n        print(f\"Failed to send email: {e}\")\n\ndef monitor_resources():\n    cpu_high_time = None\n    memory_high_time = None\n    cpu_email_sent = False\n    memory_email_sent = False\n\n    while True:\n        cpu_usage = psutil.cpu_percent(interval=0)\n        memory_usage = psutil.virtual_memory().percent\n        current_time = time.strftime(\"%Y-%m-%d %H:%M:%S\")\n        print(f\"Time: {current_time}, CPU: {cpu_usage}%, Memory: {memory_usage}%\")\n\n        if cpu_usage > 80:\n            if cpu_high_time is None:\n                cpu_high_time = time.time()\n            else:\n                elapsed_time = time.time() - cpu_high_time\n                if elapsed_time > 30 and not cpu_email_sent:\n                    subject = 'CPU Usage Alert'\n                    body = f'CPU usage is at {cpu_usage}%, which is above the threshold for more than 30 seconds. Time: {current_time}'\n                    send_email(subject, body)\n                    cpu_email_sent = True\n        else:\n            cpu_high_time = None\n            cpu_email_sent = False\n\n        if memory_usage > 80:\n            if memory_high_time is None:\n                memory_high_time = time.time()\n            else:\n                elapsed_time = time.time() - memory_high_time\n                if elapsed_time > 30 and not memory_email_sent:\n                    subject = 'Memory Usage Alert'\n                    body = f'Memory usage is at {memory_usage}%, which is above the threshold for more than 30 seconds. Time: {current_time}'\n                    send_email(subject, body)\n                    memory_email_sent = True\n        else:\n            memory_high_time = None\n            memory_email_sent = False\n\n        time.sleep(5)\n\nif __name__ == \"__main__\":\n    monitor_resources()\n```\n\n### Explanation\n\n1. **Install Required Modules**:\n    - Ensure `psutil` is installed using `pip install psutil`.\n\n2. **Email Configuration**:\n    - Set up your email details in the configuration variables at the top of the script.\n\n3. **Send Email Function**:\n    - The `send_email` function constructs and sends an email using SMTP.\n\n4. **Monitor Resources Function**:\n    - Continuously monitors CPU and memory usage every 5 seconds.\n    - Tracks the time duration for which the usage exceeds 80%.\n    - Sends an email alert if the usage remains above 80% for more than 30 seconds.\n\n5. **Error Handling**:\n    - The script includes basic error handling for email sending failures.\n\n6. **Infinite Loop**:\n    - The monitoring runs indefinitely until manually stopped.\n\nThis script provides a robust way to monitor system resources and receive timely alerts via email when resource usage exceeds specified thresholds for a\u6301\u7eed\u65f6\u95f4\u8d85\u8fc730\u79d2\u7684\u9ad8\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\u3002"
    }
]