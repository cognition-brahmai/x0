[
    {
        "role": "user",
        "content": "Design a RESTful API using Node.js and Express framework that supports CRUD operations on a collection of books. Each book should have a title, author, publication date, and ISBN number. Use MongoDB as the backend database and ensure proper validation for the required fields."
    },
    {
        "role": "assistant",
        "content": "To design a RESTful API using Node.js and Express framework that supports CRUD operations on a collection of books, we'll need to set up a project with the necessary dependencies, define the data model, create routes for handling HTTP requests, and implement validation for the required fields.\n\n### Step 1: Set Up the Project\n\nFirst, initialize a new Node.js project and install the required dependencies.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\nnpm install express mongoose body-parser validator cors\n```\n\n### Step 2: Project Structure\n\nOrganize the project with the following structure:\n\n```\nbook-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Book.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 books.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### Step 3: Define the Mongoose Model\n\nCreate a `Book` model in `models/Book.js` to define the structure of a book document in MongoDB.\n\n```javascript\n// models/Book.js\nconst mongoose = require('mongoose');\n\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  isbn: { type: String, required: true, unique: true }\n});\n\nmodule.exports = mongoose.model('Book', bookSchema);\n```\n\n### Step 4: Set Up Routes\n\nCreate routes for CRUD operations in `routes/books.js`.\n\n```javascript\n// routes/books.js\nconst express = require('express');\nconst router = express.Router();\nconst Book = require('../models/Book');\nconst { body, validationResult } = require('express-validator');\n\n// Get all books\nrouter.get('/', async (req, res) => {\n  try {\n    const books = await Book.find();\n    res.json(books);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get a single book by ISBN\nrouter.get('/:isbn', getBookByISBN, (req, res) => {\n  res.json(res.book);\n});\n\n// Create a new book\nrouter.post(\n  '/',\n  [\n    body('title').notEmpty().withMessage('Title is required'),\n    body('author').notEmpty().withMessage('Author is required'),\n    body('publicationDate').notEmpty().withMessage('Publication date is required'),\n    body('isbn').notEmpty().withMessage('ISBN is required').isISBN().withMessage('Invalid ISBN format')\n  ],\n  async (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(400).json({ errors: errors.array() });\n    }\n\n    const book = new Book({\n      title: req.body.title,\n      author: req.body.author,\n      publicationDate: new Date(req.body.publicationDate),\n      isbn: req.body.isbn\n    });\n\n    try {\n      const newBook = await book.save();\n      res.status(201).json(newBook);\n    } catch (err) {\n      res.status(400).json({ message: err.message });\n    }\n  }\n);\n\n// Update a book\nrouter.put('/:isbn', getBookByISBN, [\n  body('title').notEmpty().withMessage('Title is required'),\n  body('author').notEmpty().withMessage('Author is required'),\n  body('publicationDate').notEmpty().withMessage('Publication date is required'),\n], async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  res.book.title = req.body.title;\n  res.book.author = req.body.author;\n  res.book.publicationDate = new Date(req.body.publicationDate);\n\n  try {\n    const updatedBook = await res.book.save();\n    res.json(updatedBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a book\nrouter.delete('/:isbn', getBookByISBN, async (req, res) => {\n  try {\n    await res.book.remove();\n    res.json({ message: 'Deleted Book' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nasync function getBookByISBN(req, res, next) {\n  let book;\n  try {\n    book = await Book.findOne({ isbn: req.params.isbn });\n    if (book === null) {\n      return res.status(404).json({ message: 'Cannot find book' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.book = book;\n  next();\n}\n\nmodule.exports = router;\n```\n\n### Step 5: Set Up the App\n\nSet up the Express app in `app.js`, connect to MongoDB, and define the routes.\n\n```javascript\n// app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst booksRouter = require('./routes/books');\nconst cors = require('cors');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use(cors());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/bookstore', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n})\n.then(() => {\n  console.log('Connected to MongoDB');\n})\n.catch(err => {\n  console.error('Connection error:', err.message);\n});\n\n// Routes\napp.use('/books', booksRouter);\n\n// Start the server\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 6: Run the Application\n\nStart the MongoDB server and run the Node.js application.\n\n```bash\nnpm start\n```\n\nNow, your RESTful API is up and running, supporting CRUD operations on a collection of books with validation for required fields."
    }
]