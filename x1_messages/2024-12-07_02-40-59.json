[
    {
        "role": "user",
        "content": "Develop a Ruby script that calculates the area of various geometric shapes (circle, rectangle, triangle) using object-oriented programming principles.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Ruby script that calculates the area of different geometric shapes like circles, rectangles, and triangles using object-oriented programming (OOP) principles. OOP is a programming paradigm based on the concept of \"objects\", which can contain data and code: data in the form of fields (often known as attributes or properties), and code, in the form of procedures (often known as methods).\n\nIn Ruby, everything is an object, which makes it a great language for learning and applying OOP concepts. We'll define classes for each shape, and each class will have a method to calculate its area.\n\n### Step-by-Step Plan\n\n1. **Define a base class `Shape`**: This class will have a method `area` that will be overridden by subclasses.\n2. **Create subclasses for each shape**:\n   - `Circle`: Requires radius.\n   - `Rectangle`: Requires width and height.\n   - `Triangle`: Requires base and height.\n3. **Implement the `area` method in each subclass**:\n   - For `Circle`: \u03c0 * radius\u00b2\n   - For `Rectangle`: width * height\n   - For `Triangle`: (base * height) / 2\n4. **Create instances of these classes and calculate their areas**.\n\n### Solution Code\n\n```ruby\nclass Shape\n  def area\n    raise NotImplementedError, \"Subclasses must implement this method\"\n  end\nend\n\nclass Circle < Shape\n  attr_accessor :radius\n\n  def initialize(radius)\n    @radius = radius\n  end\n\n  def area\n    Math::PI * @radius**2\n  end\nend\n\nclass Rectangle < Shape\n  attr_accessor :width, :height\n\n  def initialize(width, height)\n    @width = width\n    @height = height\n  end\n\n  def area\n    @width * @height\n  end\nend\n\nclass Triangle < Shape\n  attr_accessor :base, :height\n\n  def initialize(base, height)\n    @base = base\n    @height = height\n  end\n\n  def area\n    (@base * @height) / 2.0\n  end\nend\n\n# Example usage:\ncircle = Circle.new(5)\nputs \"Area of circle: #{circle.area}\"\n\nrectangle = Rectangle.new(4, 6)\nputs \"Area of rectangle: #{rectangle.area}\"\n\ntriangle = Triangle.new(3, 8)\nputs \"Area of triangle: #{triangle.area}\"\n```\n\n### Explanation\n\n1. **Base Class `Shape`**:\n   - Defines a method `area` that raises a `NotImplementedError`. This ensures that any subclass must implement this method.\n\n2. **Subclass `Circle`**:\n   - Has an attribute `radius`.\n   - Implements the `area` method using the formula for the area of a circle.\n\n3. **Subclass `Rectangle`**:\n   - Has attributes `width` and `height`.\n   - Implements the `area` method using the formula for the area of a rectangle.\n\n4. **Subclass `Triangle`**:\n   - Has attributes `base` and `height`.\n   - Implements the `area` method using the formula for the area of a triangle.\n\n5. **Example Usage**:\n   - Creates instances of each shape with specific dimensions.\n   - Calls the `area` method on each instance and prints the result.\n\nThis approach adheres to OOP principles by using inheritance (subclasses inheriting from a base class) and method overriding (each subclass provides its own implementation of the `area` method)."
    }
]