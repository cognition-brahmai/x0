[
    {
        "role": "user",
        "content": "Develop a Python script that uses TensorFlow to train a neural network on the MNIST dataset of handwritten digits. The program should accept command-line arguments for the number of training epochs and batch size, and display the accuracy of the trained model on the test set.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that uses TensorFlow to train a neural network on the MNIST dataset of handwritten digits. The script will accept command-line arguments for the number of training epochs and batch size, and it will display the accuracy of the trained model on the test set.\n\nFirst, make sure you have TensorFlow installed. You can install it using pip if you haven't already:\n\n```bash\npip install tensorflow\n```\n\nNow, let's start by importing the necessary libraries:\n\n```python\nimport argparse\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n```\n\nNext, we'll parse the command-line arguments for the number of epochs and batch size:\n\n```python\nparser = argparse.ArgumentParser(description='Train a neural network on MNIST.')\nparser.add_argument('--epochs', type=int, default=5, help='Number of training epochs')\nparser.add_argument('--batch_size', type=int, default=32, help='Batch size for training')\nargs = parser.parse_args()\n```\n\nNow, let's load the MNIST dataset. TensorFlow provides a convenient way to load it:\n\n```python\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n```\n\nWe need to preprocess the data. We'll normalize the images to have pixel values between 0 and 1:\n\n```python\nx_train, x_test = x_train / 255.0, x_test / 255.0\n```\n\nNow, let's define the neural network model. We'll use a simple sequential model with a few layers:\n\n```python\nmodel = models.Sequential([\n    layers.Flatten(input_shape=(28, 28)),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.2),\n    layers.Dense(10, activation='softmax')\n])\n```\n\nNext, we'll compile the model, specifying the optimizer, loss function, and metrics:\n\n```python\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n```\n\nNow, it's time to train the model using the training data:\n\n```python\nmodel.fit(x_train, y_train, epochs=args.epochs, batch_size=args.batch_size)\n```\n\nFinally, we'll evaluate the model on the test set and print the accuracy:\n\n```python\ntest_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\nprint('\\nTest accuracy:', test_acc)\n```\n\nPutting it all together, here's the complete script:\n\n```python\nimport argparse\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\nparser = argparse.ArgumentParser(description='Train a neural network on MNIST.')\nparser.add_argument('--epochs', type=int, default=5, help='Number of training epochs')\nparser.add_argument('--batch_size', type=int, default=32, help='Batch size for training')\nargs = parser.parse_args()\n\nmnist = tf.keras.datasets.mnist\n(x_train, y_train), (x_test, y_test) = mnist.load_data()\n\nx_train, x_test = x_train / 255.0, x_test / 255.0\n\nmodel = models.Sequential([\n    layers.Flatten(input_shape=(28, 28)),\n    layers.Dense(128, activation='relu'),\n    layers.Dropout(0.2),\n    layers.Dense(10, activation='softmax')\n])\n\nmodel.compile(optimizer='adam',\n              loss='sparse_categorical_crossentropy',\n              metrics=['accuracy'])\n\nmodel.fit(x_train, y_train, epochs=args.epochs, batch_size=args.batch_size)\n\ntest_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\nprint('\\nTest accuracy:', test_acc)\n```\n\nTo run this script from the command line, you can specify the number of epochs and batch size like this:\n\n```bash\npython mnist_trainer.py --epochs 10 --batch_size 64\n```\n\nThis will train the neural network for 10 epochs with a batch size of 64 and then print the test accuracy.\n\nI hope this helps! Let me know if you have any questions."
    }
]