[
    {
        "role": "user",
        "content": "Write a Java program that implements the merge sort algorithm on an array of integers.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Java program that implements the merge sort algorithm on an array of integers. Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves.\n\n```java\npublic class MergeSort {\n\n    // Main function to test the merge sort implementation\n    public static void main(String[] args) {\n        int[] array = {38, 27, 43, 3, 9, 82, 10};\n        mergeSort(array, 0, array.length - 1);\n        // Print the sorted array\n        for (int value : array) {\n            System.out.print(value + \" \");\n        }\n    }\n\n    // Merge sort function\n    public static void mergeSort(int[] array, int left, int right) {\n        if (left < right) {\n            // Find the middle point\n            int mid = left + (right - left) / 2;\n\n            // Sort first and second halves\n            mergeSort(array, left, mid);\n            mergeSort(array, mid + 1, right);\n\n            // Merge the sorted halves\n            merge(array, left, mid, right);\n        }\n    }\n\n    // Merge function to merge two halves\n    public static void merge(int[] array, int left, int mid, int right) {\n        // Find sizes of two subarrays to be merged\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n\n        // Create temp arrays\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        // Copy data to temp arrays\n        for (int i = 0; i < n1; ++i) {\n            L[i] = array[left + i];\n        }\n        for (int j = 0; j < n2; ++j) {\n            R[j] = array[mid + 1 + j];\n        }\n\n        // Merge the temp arrays back into the original array\n        int i = 0, j = 0;\n        int k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                array[k] = L[i];\n                i++;\n            } else {\n                array[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        // Copy the remaining elements of L[], if there are any\n        while (i < n1) {\n            array[k] = L[i];\n            i++;\n            k++;\n        }\n\n        // Copy the remaining elements of R[], if there are any\n        while (j < n2) {\n            array[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Main Function**:\n   - Initializes an array of integers.\n   - Calls the `mergeSort` function to sort the array.\n   - Prints the sorted array.\n\n2. **mergeSort Function**:\n   - Recursively divides the array into two halves until the subarrays are trivially sorted (i.e., of length one).\n   - Calls the `merge` function to merge the sorted halves.\n\n3. **merge Function**:\n   - Merges two sorted subarrays into a single sorted subarray.\n   - Uses temporary arrays to hold the subarrays.\n   - Compares elements from the two subarrays and merges them in sorted order back into the original array.\n\nThis implementation ensures that the array is sorted efficiently using the merge sort algorithm, which has a time complexity of O(n log n)."
    }
]