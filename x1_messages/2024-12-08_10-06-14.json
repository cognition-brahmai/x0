[
    {
        "role": "user",
        "content": "Design a Python script that scrapes weather data from a public API and displays the current temperature, humidity, and wind speed for a given city. The script should accept the city name as a command-line argument.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that scrapes weather data from a public API and displays the current temperature, humidity, and wind speed for a city that the user specifies when running the script. The city name should be accepted as a command-line argument. Okay, let's break this down.\n\nFirst things first, I need to find a public API that provides weather data. There are several options out there, but one of the most popular is the OpenWeatherMap API. It's widely used and has a lot of documentation, which should make my life easier. I'll need to sign up for an API key to access their data.\n\nOnce I have the API key, I need to structure my API request to get the current weather data for a specific city. The API probably has an endpoint something like `api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}`. I'll need to replace `{city name}` with the city provided by the user and `{API key}` with my actual API key.\n\nNow, about accepting the city name as a command-line argument. In Python, I can use the `sys` module to access command-line arguments. The city name will probably be the first argument after the script name, so I can access it with `sys.argv[1]`.\n\nOnce I have the city name, I can construct the API URL and use the `requests` module to make a GET request to that URL. Then, I'll get a JSON response containing the weather data. I need to parse this JSON to extract the current temperature, humidity, and wind speed.\n\nTemperature might be in Kelvin by default, so I should check the API documentation to see if I can get it in Celsius or Fahrenheit, whichever is more appropriate for the user. Maybe I can add an option to choose the unit, but for simplicity, I'll stick to just displaying Celsius.\n\nWait, how do I convert Kelvin to Celsius? It's simply Celsius = Kelvin - 273.15, right?\n\nOkay, so in the JSON response, temperature might be under something like `main.temp`, humidity under `main.humidity`, and wind speed under `wind.speed`. I'll need to navigate the JSON structure accordingly.\n\nAlso, I should handle cases where the city is not found or there's an error in the API response. Maybe display an error message to the user in such cases.\n\nLet me think about the structure of the script:\n\n1. Import necessary modules: `sys` for command-line arguments and `requests` for making API requests.\n\n2. Check if the city name is provided as a command-line argument. If not, display an error message.\n\n3. Construct the API URL with the city name and API key.\n\n4. Make a GET request to the API URL.\n\n5. Check the response status code. If it's 200, proceed to parse the JSON data. Otherwise, display an error message.\n\n6. Extract the temperature, humidity, and wind speed from the JSON data.\n\n7. Convert temperature from Kelvin to Celsius.\n\n8. Display the data to the user in a readable format.\n\n9. Handle any exceptions that might occur during the process.\n\nI should also consider adding some comments to the script for clarity, especially since this might be used by others or reviewed by someone.\n\nAlright, I think that covers the basic requirements. Now, let's think about how to implement each step.\n\nFirst, importing the necessary modules. I'll need `sys` and `requests`. I should also import `json` in case I need to pretty-print the JSON response for debugging purposes, but maybe that's optional.\n\nNext, checking for the city name argument. If the user doesn't provide a city name, I should tell them how to use the script, like \"Please provide a city name as an argument.\"\n\nThen, constructing the API URL. I'll need to concatenate the city name and API key into the URL. Make sure to handle any special characters in the city name, but for simplicity, I'll assume the city name is straightforward.\n\nMaking the API request. Use `requests.get(url)` to send the request.\n\nChecking the response status code. If it's 200, that means the request was successful, and I can proceed to parse the JSON data. Otherwise, I should print an error message like \"City not found\" or \"API error.\"\n\nExtracting the required data from the JSON response. I'll need to access specific keys in the JSON object.\n\nConverting temperature from Kelvin to Celsius. As mentioned earlier, Celsius = Kelvin - 273.15.\n\nDisplaying the data in a user-friendly way. Maybe something like:\n\nTemperature: {temp}\u00b0C\n\nHumidity: {humidity}%\n\nWind Speed: {wind_speed} m/s\n\nAlso, I should handle cases where some data might be missing in the JSON response. Maybe some cities don't have wind speed data, or something like that. I should add checks to ensure that the required keys exist before trying to access them.\n\nAdditionally, I can add some error handling around the API request, in case there's no internet connection or the API is down.\n\nLet me think about how to organize the code. Maybe I can encapsulate the API request in a function, like `get_weather_data(city, api_key)`, which returns the JSON data or None if there's an error.\n\nThen, another function to parse the JSON data and extract the required information, like `parse_weather_data(data)`, which returns a dictionary with temperature, humidity, and wind speed.\n\nThis way, the main part of the script can call these functions in sequence and handle the output accordingly.\n\nAlso, I should consider storing the API key securely. Hardcoding it in the script isn't the best practice, but since this is a simple script, I'll do it for now. Maybe later, I can read it from an environment variable or a config file.\n\nWait, reading from an environment variable is a better idea. I can use the `os` module to access environment variables. So, the user can set an environment variable like `WEATHER_API_KEY` and the script can read it from there.\n\nThis adds a layer of security because the API key isn't hardcoded in the script.\n\nSo, I'll import `os` and try to get the API key from an environment variable. If it's not set, display an error message\u63d0\u793a\u7528\u6237\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf\u3002\n\n\u53e6\u5916\uff0c\u6211\u5e94\u8be5\u5904\u7406\u53ef\u80fd\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u6bd4\u5982\u7f51\u7edc\u9519\u8bef\u3001API\u9650\u5236\u7b49\u3002\u53ef\u4ee5\u4f7f\u7528try-except\u5757\u6765\u6355\u83b7\u5f02\u5e38\uff0c\u5e76\u7ed9\u51fa\u76f8\u5e94\u7684\u9519\u8bef\u4fe1\u606f\u3002\n\n\u8fd8\u6709\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u529f\u80fd\uff0c\u6bd4\u5982\u663e\u793a\u5929\u6c14\u72b6\u51b5\u63cf\u8ff0\u3001\u538b\u529b\u3001\u4e91\u91cf\u7b49\uff0c\u4f46\u6839\u636e\u4efb\u52a1\u8981\u6c42\uff0c\u53ea\u9700\u8981\u663e\u793a\u6e29\u5ea6\u3001\u6e7f\u5ea6\u548c\u98ce\u901f\uff0c\u6240\u4ee5\u5148\u5b9e\u73b0\u8fd9\u4e9b\u57fa\u672c\u529f\u80fd\u3002\n\n\u53e6\u5916\uff0c\u8003\u8651\u5230\u4e0d\u540c\u56fd\u5bb6\u7684\u5355\u4f4d\u7cfb\u7edf\u53ef\u80fd\u4e0d\u540c\uff0c\u6bd4\u5982\u7f8e\u56fd\u4e60\u60ef\u4f7f\u7528\u534e\u6c0f\u5ea6\u548c\u82f1\u91cc\u6bcf\u5c0f\u65f6\uff0c\u800c\u5176\u4ed6\u56fd\u5bb6\u53ef\u80fd\u4f7f\u7528\u6444\u6c0f\u5ea6\u548c\u7c73\u6bcf\u79d2\u3002\u4e5f\u8bb8\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e2a\u9009\u9879\uff0c\u8ba9\u7528\u6237\u4f53\u9a8c\u9009\u62e9\u5355\u4f4d\uff0c\u4f46\u4e3a\u4e86\u7b80\u5316\uff0c\u8fd9\u6b21\u5148\u4e0d\u5b9e\u73b0\u8fd9\u4e2a\u529f\u80fd\u3002\n\n\u603b\u4e4b\uff0c\u6309\u7167\u4efb\u52a1\u8981\u6c42\uff0c\u5b9e\u73b0\u57fa\u672c\u7684\u7684\u529f\u80fd\u5373\u53ef\u3002\n\n\u73b0\u5728\uff0c\u6211\u5f00\u59cb\u7740\u624b\u7f16\u5199\u4ee3\u7801\u3002\n\n\u9996\u5148\uff0c\u5bfc\u5165\u5fc5\u8981\u7684\u6a21\u5757\uff1a\n\nimport sys\n\nimport requests\n\nimport os\n\n\u7136\u540e\uff0c\u68c0\u67e5\u547d\u4ee4\u884c\u53c2\u6570\uff1a\n\nif len(sys.argv) < 2:\n\nprint(\"Please provide a city name as an argument.\")\n\nsys.exit(1)\n\ncity = sys.argv[1]\n\n\u63a5\u4e0b\u6765\uff0c\u83b7\u53d6API\u5bc6\u94a5\u3002\u6211\u5c06\u4ece\u73af\u5883\u53d8\u91cf\u4e2d\u83b7\u53d6\uff1a\n\napi_key = os.getenv('WEATHER_API_KEY')\n\nif not api_key:\n\nprint(\"Please set the WEATHER_API_KEY environment variable.\")\n\nsys.exit(1)\n\n\u7136\u540e\uff0c\u6784\u5efaAPI URL\uff1a\n\nurl = f\"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}\"\n\n\u73b0\u5728\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u83b7\u53d6\u5929\u6c14\u6570\u636e\uff1a\n\ndef get_weather_data(url):\n\ntry:\n\nresponse = requests.get(url)\n\nif response.status_code == 200:\n\nreturn response.json()\n\nelse:\n\nprint(f\"Error: {response.status_code}\")\n\nreturn None\n\nexcept requests.exceptions.RequestException as e:\n\nprint(f\"Network error: {e}\")\n\nreturn None\n\n\u7136\u540e\uff0c\u5b9a\u4e49\u4e00\u4e2a\u51fd\u6570\u6765\u89e3\u6790JSON\u6570\u636e\uff1a\n\ndef parse_weather_data(data):\n\ntry:\n\nmain = data['main']\n\nwind = data['wind']\n\ntemperature = main['temp'] - 273.15  # Convert Kelvin to Celsius\n\nhumidity = main['humidity']\n\nwind_speed = wind['speed']\n\nreturn {\n\n'temperature': temperature,\n\n'humidity': humidity,\n\n'wind_speed': wind_speed\n\n}\n\nexcept KeyError:\n\nprint(\"Required data not found in API response.\")\n\nreturn None\n\n\u5728\u4e3b\u7a0b\u5e8f\u4e2d\uff0c\u8c03\u7528\u8fd9\u4e9b\u51fd\u6570\uff1a\n\ndata = get_weather_data(url)\n\nif data:\n\nweather = parse_weather_data(data)\n\nif weather:\n\nprint(f\"Temperature: {weather['temperature']:.1f}\u00b0C\")\n\nprint(f\"Humidity: {weather['humidity']}%\")\n\nprint(f\"Wind Speed: {weather['wind_speed']} m/s\")\n\nelse:\n\nsys.exit(1)\n\nelse:\n\nsys.exit(1)\n\n\u6700\u540e\uff0c\u786e\u4fdd\u811a\u672c\u53ef\u4ee5\u4f5c\u4e3a\u4e3b\u7a0b\u5e8f\u8fd0\u884c\uff1a\n\nif __name__ == \"__main__\":\n\nmain()\n\n\u55ef\uff0c\u770b\u8d77\u6765\u5dee\u4e0d\u591a\u3002\u6211\u9700\u8981\u6d4b\u8bd5\u8fd9\u4e2a\u811a\u672c\uff0c\u770b\u770b\u662f\u5426\u6309\u9884\u671f\u5de5\u4f5c\u3002\n\n\u9996\u5148\uff0c\u6211\u9700\u8981\u8bbe\u7f6e\u73af\u5883\u53d8\u91cfWEATHER_API_KEY\uff0c\u5c06\u5176\u8bbe\u7f6e\u4e3a\u6211\u7684OpenWeatherMap API\u5bc6\u94a5\u3002\n\n\u7136\u540e\uff0c\u8fd0\u884c\u811a\u672c\u5e76\u63d0\u4f9b\u4e00\u4e2a\u57ce\u5e02\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\uff0c\u6bd4\u5982\"London\"\u3002\n\n\u671f\u671b\u8f93\u51fa\u5e94\u8be5\u662f\u5f53\u524d\u7684\u6e29\u5ea6\u3001\u6e7f\u5ea6\u548c\u98ce\u901f\u3002\n\n\u5982\u679c\u57ce\u5e02\u540d\u79f0\u65e0\u6548\uff0c\u5e94\u8be5\u663e\u793a\u9519\u8bef\u6d88\u606f\u3002\n\n\u53e6\u5916\uff0c\u5982\u679c\u7f51\u7edc\u6709\u95ee\u9898\uff0c\u5e94\u8be5\u663e\u793a\u7f51\u7edc\u9519\u8bef\u3002\n\n\u597d\u7684\uff0c\u6211\u6765\u6a21\u62df\u4e00\u4e0b\u3002\n\n\u5047\u8bbe\u6211\u8fd0\u884c\uff1a\n\npython weather.py London\n\n\u5e94\u8be5\u663e\u793a\u4f26\u6566\u7684\u5f53\u524d\u5929\u6c14\u6570\u636e\u3002\n\n\u5982\u679cAPI\u9650\u5236\u6bcf\u5929\u7684\u8bf7\u6c42\u6b21\u6570\uff0c\u6211\u53ef\u80fd\u9700\u8981\u7b49\u5f85\u4e00\u6bb5\u65f6\u95f4\u6216\u83b7\u53d6\u4e00\u4e2a\u65b0\u7684API\u5bc6\u94a5\u3002\n\n\u53e6\u5916\uff0c\u6211\u5e94\u8be5\u786e\u4fddAPI\u5bc6\u94a5\u662f\u6709\u6743\u9650\u8bbf\u95ee\u5f53\u524d\u5929\u6c14\u6570\u636e\u7684\u3002\n\n\u6211\u8fd8\u5e94\u8be5\u8003\u8651\u57ce\u5e02\u540d\u79f0\u53ef\u80fd\u5305\u542b\u591a\u4e2a\u5355\u8bcd\uff0c\u6bd4\u5982\"New York\"\u3002\u6240\u4ee5\uff0c\u5728\u6784\u5efaURL\u65f6\uff0c\u53ef\u80fd\u9700\u8981\u5c06\u7a7a\u683c\u66ff\u6362\u4e3a+\u53f7\uff0c\u6216\u8005\u4f7f\u7528requests\u7684params\u53c2\u6570\u6765\u5904\u7406\u3002\n\n\u6539\u8fdb\u4e00\u4e0b\uff0c\u4f7f\u7528params\u53c2\u6570\u6765\u6784\u5efaURL\uff0c\u8fd9\u6837\u66f4\u5e72\u51c0\u3002\n\n\u4fee\u6539\u4ee3\u7801\uff1a\n\nparams = {\n\n'q': city,\n\n'appid': api_key\n\n}\n\nresponse = requests.get('http://api.openweathermap.org/data/2.5/weather', params=params)\n\n\u8fd9\u6837\uff0crequests\u4f1a\u6b63\u786e\u5904\u7406\u53c2\u6570\u7684\u7f16\u7801\u3002\n\n\u53e6\u5916\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u7684\u9519\u8bef\u68c0\u67e5\uff0c\u6bd4\u5982\u68c0\u67e5API\u54cd\u5e94\u4e2d\u7684\"cod\"\u5b57\u6bb5\uff0c\u770b\u770b\u662f\u5426\u6210\u529f\u3002\n\n\u5728OpenWeatherMap API\u4e2d\uff0c\u6210\u529f\u54cd\u5e94\u7684\"cod\"\u662f200\u3002\n\n\u6240\u4ee5\uff0c\u5728get_weather_data\u51fd\u6570\u4e2d\uff0c\u53ef\u4ee5\u68c0\u67e5data['cod']\u662f\u5426\u7b49\u4e8e200\u3002\n\n\u5982\u679c\u4e0d\u662f\uff0c\u6253\u5370\u51fadata['message']\uff0c\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u77e5\u9053\u5177\u4f53\u7684\u9519\u8bef\u4fe1\u606f\u3002\n\n\u4fee\u6539parse_weather_data\u51fd\u6570\uff1a\n\nif data['cod'] != 200:\n\nprint(f\"Error: {data['message']}\")\n\nreturn None\n\n\u7136\u540e\uff0c\u7ee7\u7eed\u89e3\u6790\u6570\u636e\u3002\n\n\u53e6\u5916\uff0c\u4e5f\u8bb8\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u7684\u5b57\u6bb5\uff0c\u6bd4\u5982\u5929\u6c14\u63cf\u8ff0\uff0c\u8fd9\u6837\u7528\u6237\u53ef\u4ee5\u77e5\u9053\u5929\u6c14\u72b6\u51b5\uff0c\u6bd4\u5982\u6674\u5929\u3001\u591a\u4e91\u7b49\u3002\n\n\u4f46\u8fd9\u8d85\u51fa\u4e86\u4efb\u52a1\u8981\u6c42\uff0c\u6240\u4ee5\u5148\u4e0d\u5b9e\u73b0\u3002\n\n\u6700\u540e\uff0c\u786e\u4fdd\u6240\u6709\u7684\u8fdb\u53e3\u90fd\u662f\u5fc5\u8981\u7684\uff0c\u6ca1\u6709\u591a\u4f59\u7684\u8fdb\u53e3\u3002\n\n\u770b\u8d77\u6765\u53ea\u6709sys\u3001requests\u548cos\u662f\u9700\u8981\u7684\u3002\n\n\u597d\u7684\uff0c\u6211\u89c9\u5f97\u8fd9\u4e2a\u811a\u672c\u5e94\u8be5\u53ef\u4ee5\u5de5\u4f5c\u4e86\u3002\n\n## \u6700\u7ec8\u89e3\u51b3\u65b9\u6848\n\u4e3a\u4e86\u5b8c\u6210\u8fd9\u4e2a\u4efb\u52a1\uff0c\u6211\u4eec\u9700\u8981\u521b\u5efa\u4e00\u4e2aPython\u811a\u672c\uff0c\u8be5\u811a\u672c\u80fd\u591f\u901a\u8fc7\u516c\u5171API\u6293\u53d6\u5929\u6c14\u6570\u636e\uff0c\u5e76\u663e\u793a\u7ed9\u5b9a\u57ce\u5e02\u7684\u5f53\u524d\u6e29\u5ea6\u3001\u6e7f\u5ea6\u548c\u98ce\u901f\u3002\u811a\u672c\u5e94\u63a5\u53d7\u57ce\u5e02\u540d\u79f0\u4f5c\u4e3a\u547d\u4ee4\u884c\u53c2\u6570\u3002\n\n### \u65b9\u6cd5\n\n1. **\u9009\u62e9API**\uff1a\u6211\u4eec\u9009\u62e9OpenWeatherMap API\uff0c\u56e0\u4e3a\u5b83\u5e7f\u6cdb\u4f7f\u7528\u4e14\u6587\u6863\u4e30\u5bcc\u3002\n2. **\u83b7\u53d6API\u5bc6\u94a5**\uff1a\u9700\u8981\u5728OpenWeatherMap\u7f51\u7ad9\u4e0a\u6ce8\u518c\u4ee5\u83b7\u53d6API\u5bc6\u94a5\u3002\n3. **\u63a5\u53d7\u547d\u4ee4\u884c\u53c2\u6570**\uff1a\u4f7f\u7528`sys`\u6a21\u5757\u83b7\u53d6\u57ce\u5e02\u540d\u79f0\u3002\n4. **\u6784\u5efaAPI\u8bf7\u6c42**\uff1a\u4f7f\u7528`requests`\u6a21\u5757\u6784\u5efa\u548c\u53d1\u9001API\u8bf7\u6c42\u3002\n5. **\u89e3\u6790JSON\u54cd\u5e94**\uff1a\u4eceJSON\u6570\u636e\u4e2d\u63d0\u53d6\u6e29\u5ea6\u3001\u6e7f\u5ea6\u548c\u98ce\u901f\u3002\n6. **\u5904\u7406\u5355\u4f4d**\uff1a\u5c06\u6e29\u5ea6\u4ece Kelvin \u8f6c\u6362\u4e3a Celsius\u3002\n7. **\u9519\u8bef\u5904\u7406**\uff1a\u5904\u7406\u57ce\u5e02\u672a\u627e\u5230\u6216API\u9519\u8bef\u7684\u60c5\u51b5\u3002\n\n### \u89e3\u51b3\u65b9\u6848\u4ee3\u7801\n\n```python\nimport sys\nimport requests\nimport os\n\ndef main():\n    # \u68c0\u67e5\u547d\u4ee4\u884c\u53c2\u6570\n    if len(sys.argv) < 2:\n        print(\"\u8bf7\u63d0\u4f9b\u57ce\u5e02\u540d\u79f0\u4f5c\u4e3a\u53c2\u6570\u3002\")\n        sys.exit(1)\n    \n    city = sys.argv[1]\n    \n    # \u83b7\u53d6API\u5bc6\u94a5\n    api_key = os.getenv('WEATHER_API_KEY')\n    if not api_key:\n        print(\"\u8bf7\u8bbe\u7f6eWEATHER_API_KEY\u73af\u5883\u53d8\u91cf\u3002\")\n        sys.exit(1)\n    \n    # \u6784\u5efaAPI\u8bf7\u6c42\u53c2\u6570\n    params = {\n        'q': city,\n        'appid': api_key\n    }\n    \n    # \u83b7\u53d6\u5929\u6c14\u6570\u636e\n    data = get_weather_data(params)\n    if not data:\n        sys.exit(1)\n    \n    # \u89e3\u6790\u5929\u6c14\u6570\u636e\n    weather = parse_weather_data(data)\n    if not weather:\n        sys.exit(1)\n    \n    # \u663e\u793a\u5929\u6c14\u6570\u636e\n    print(f\"\u6e29\u5ea6: {weather['temperature']:.1f}\u00b0C\")\n    print(f\"\u6e7f\u5ea6: {weather['humidity']}%\")\n    print(f\"\u98ce\u901f: {weather['wind_speed']} m/s\")\n\ndef get_weather_data(params):\n    try:\n        response = requests.get('http://api.openweathermap.org/data/2.5/weather', params=params)\n        if response.status_code == 200:\n            data = response.json()\n            if data['cod'] == 200:\n                return data\n            else:\n                print(f\"\u9519\u8bef: {data['message']}\")\n                return None\n        else:\n            print(f\"HTTP\u9519\u8bef: {response.status_code}\")\n            return None\n    except requests.exceptions.RequestException as e:\n        print(f\"\u7f51\u7edc\u9519\u8bef: {e}\")\n        return None\n\ndef parse_weather_data(data):\n    try:\n        main = data['main']\n        wind = data['wind']\n        temperature = main['temp'] - 273.15  # Kelvin to Celsius\n        humidity = main['humidity']\n        wind_speed = wind['speed']\n        return {\n            'temperature': temperature,\n            'humidity': humidity,\n            'wind_speed': wind_speed\n        }\n    except KeyError:\n        print(\"\u65e0\u6cd5\u4eceAPI\u54cd\u5e94\u4e2d\u627e\u5230\u6240\u9700\u6570\u636e\u3002\")\n        return None\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### \u8bf4\u660e\n\n1. **\u547d\u4ee4\u884c\u53c2\u6570**\uff1a\u811a\u672c\u63a5\u53d7\u4e00\u4e2a\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u5373\u57ce\u5e02\u540d\u79f0\u3002\n2. **\u73af\u5883\u53d8\u91cf**\uff1aAPI\u5bc6\u94a5\u901a\u8fc7\u73af\u5883\u53d8\u91cf`WEATHER_API_KEY`\u4f20\u9012\uff0c\u4ee5\u786e\u4fdd\u5b89\u5168\u6027\u3002\n3. **API\u8bf7\u6c42**\uff1a\u4f7f\u7528`requests`\u6a21\u5757\u53d1\u9001GET\u8bf7\u6c42\u5230OpenWeatherMap API\u3002\n4. **\u6570\u636e\u89e3\u6790**\uff1a\u4eceJSON\u54cd\u5e94\u4e2d\u63d0\u53d6\u6e29\u5ea6\u3001\u6e7f\u5ea6\u548c\u98ce\u901f\uff0c\u5e76\u5c06\u6e29\u5ea6\u4eceKelvin\u8f6c\u6362\u4e3aCelsius\u3002\n5. **\u9519\u8bef\u5904\u7406**\uff1a\u5904\u7406HTTP\u9519\u8bef\u3001API\u9519\u8bef\u548c\u6570\u636e\u89e3\u6790\u9519\u8bef\uff0c\u5e76\u63d0\u4f9b\u76f8\u5e94\u7684\u9519\u8bef\u6d88\u606f\u3002\n\n\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u811a\u672c\u80fd\u591f robustly \u548c efficiently \u5730\u63d0\u4f9b\u6240\u9700\u7684\u57ce\u5e02\u5929\u6c14\u6570\u636e\u3002"
    }
]