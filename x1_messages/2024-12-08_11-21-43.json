[
    {
        "role": "user",
        "content": "Write a Bash script that monitors the usage of system resources like CPU utilization, memory usage, disk space, and network traffic every minute. If any of these exceed a certain threshold, the script should send an email alert to a specified address. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Bash script that keeps an eye on the system's vital signs\u2014CPU usage, memory, disk space, and network traffic. It needs to check these every minute and if anything goes beyond what's considered normal, it should shoot off an email to let someone know. Sounds pretty straightforward, but I need to make sure I cover all the bases.\n\nFirst things first, I need to figure out how to get these system metrics in Bash. For CPU usage, I can use 'top' or 'mpstat', but 'top' might be more universally available. For memory, 'free' is a common command. Disk space can be checked with 'df', and for network traffic, 'ifconfig' or 'ip' commands could be useful. I should also think about whether I want to measure incoming and outgoing traffic separately, but for now, maybe just total traffic will do.\n\nNext, I need to set thresholds for each of these metrics. What's considered high CPU usage? Maybe 80%? Memory usage? Perhaps 90%? Disk space? 95% full might be a good alert point. For network traffic, it's a bit trickier because it depends on the network interface's capacity. Maybe I can set a threshold in terms of bytes per second.\n\nNow, about sending emails. In a Bash script, I can use 'mail' or 'mutt' for sending emails. I need to make sure that whichever command I choose is installed on the system where this script will run. Let's assume 'mail' is available.\n\nI also need to think about how to structure the script. It should run indefinitely, checking the metrics every minute. So, some kind of infinite loop with a sleep command inside seems appropriate. But I should also consider making it graceful\u2014allowing it to be stopped with a control-C or similar.\n\nLet me sketch out a basic outline:\n\n1. Infinite loop:\n\na. Check CPU usage\n\nb. If above threshold, send email\n\nc. Check memory usage\n\nd. If above threshold, send email\n\ne. Check disk space\n\nf. If above threshold, send email\n\ng. Check network traffic\n\nh. If above threshold, send email\n\ni. Sleep for 1 minute\n\n2. Exit on interrupt\n\nNow, for each of these checks, I need to capture the output of the relevant command and parse it to get the numerical value I'm interested in.\n\nStarting with CPU usage: 'top' can display CPU usage, but its output is dynamic and designed for human reading, not scripting. Maybe 'mpstat' is better, but not all systems have it by default. Alternatively, 'vmstat' could be an option. Wait, 'awk' can be used with 'top' to get a single-line output. Let me look that up.\n\nAfter a quick search, I find that 'top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}'' gives me the combined user and system CPU usage in percentage. That might work.\n\nFor memory, 'free -m' gives me memory usage in megabytes. I can use 'awk' to extract the percentage used.\n\nFor disk space, 'df -h' shows usage in human-readable terms, but again, 'awk' can help extract the percentage.\n\nFor network traffic, 'ifconfig' or 'ip -s link' can show transmit and receive bytes. I need to capture these values, wait a second, capture again, and calculate the difference to get bytes per second.\n\nWait a minute, for network traffic, maybe using 'sar' or 'nload' would be easier, but not all systems have them by default. Maybe I should look into 'iftop' or 'nload', but those are interactive. Hmm.\n\nAlternatively, I can read from '/proc/net/dev', which has network interface statistics. I can read the bytes sent and received from there, wait a second, read again, and calculate the difference.\n\nSo, in the script, I need to:\n\n1. Read network stats\n\n2. Wait for 1 second\n\n3. Read network stats again\n\n4. Calculate the difference and divide by time elapsed to get bytes per second.\n\nThen, compare that to the threshold.\n\nFor email sending, I need to have an email address to send to. Maybe I can make that a variable at the top of the script so it's easy to change.\n\nAlso, I should think about whether to send one email per alert or combine multiple alerts into one email. Maybe combining them makes more sense to avoid email spam.\n\nWait, but if multiple thresholds are crossed, it's important to know all of them. So, perhaps accumulate all the alerts and send them in one email.\n\nI also need to think about the email subject and body. Maybe include the timestamp of when the alert was triggered.\n\nSecurity is also a concern. If I'm sending emails with system information, I need to make sure that only authorized people can receive these alerts.\n\nAdditionally, I should consider logging the alerts to a file in case email delivery fails or is unreliable.\n\nWait, maybe I should send emails and log to a file for redundancy.\n\nNow, about thresholds: these should be configurable. Maybe define them as variables at the top of the script.\n\nLet me start drafting some code.\n\nFirst, define variables for thresholds and email recipient.\n\n```\n\nCPU_THRESHOLD=80\n\nMEMORY_THRESHOLD=90\n\nDISK_THRESHOLD=95\n\nNETWORK_THRESHOLD=1000000  # 1 MB/s\n\nEMAILRecipient=\"admin@example.com\"\n\nLOGFILE=\"/var/log/system_monitor.log\"\n\n```\n\nThen, the infinite loop:\n\n```\n\nwhile true; do\n\n    # Check CPU usage\n\n    cpu_usage=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}')\n\n    if (( $(echo \"$cpu_usage > $CPU_THRESHOLD\" | bc -l) )); then\n\n        echo \"High CPU usage: $cpu_usage%\" >> $LOGFILE\n\n        alerts+=\"High CPU usage: $cpu_usage%\"\n\n    fi\n\n    # Check memory usage\n\n    memory_usage=$(free -m | awk 'NR==2{printf \"%s%%\", $3/$2*100}')\n\n    if (( $(echo \"$memory_usage > $MEMORY_THRESHOLD\" | bc -l) )); then\n\n        echo \"High memory usage: $memory_usage%\" >> $LOGFILE\n\n        alerts+=\"High memory usage: $memory_usage%\"\n\n    fi\n\n    # Check disk space\n\n    disk_usage=$(df / | awk 'NR==2{print $5}')\n\n    if (( $(echo \"$disk_usage > $DISK_THRESHOLD\" | bc -l) )); then\n\n        echo \"Low disk space: $disk_usage%\" >> $LOGFILE\n\n        alerts+=\"Low disk space: $disk_usage%\"\n\n    fi\n\n    # Check network traffic\n\n    # Read initial network stats\n\n    rx1=$(cat /proc/net/dev | grep eth0 | awk '{print $2}')\n\n    tx1=$(cat /proc/net/dev | grep eth0 | awk '{print $10}')\n\n    sleep 1\n\n    rx2=$(cat /proc/net/dev | grep eth0 | awk '{print $2}')\n\n    tx2=$(cat /proc/net/dev | grep eth0 | awk '{print $10}')\n\n    rx=$((rx2 - rx1))\n\n    tx=$((tx2 - tx1))\n\n    total_traffic=$((rx + tx))\n\n    if (( total_traffic > $NETWORK_THRESHOLD )); then\n\n        echo \"High network traffic: $total_traffic bytes/s\" >> $LOGFILE\n\n        alerts+=\"High network traffic: $total_traffic bytes/s\"\n\n    fi\n\n    # Send email if there are alerts\n\n    if [ -n \"$alerts\" ]; then\n\n        echo -e \"System alerts:\\n$alerts\" | mail -s \"System Alert\" $EMAILRecipient\n\n        alerts=\"\"\n\n    fi\n\n    sleep 60\n\ndone\n\n```\n\nWait, there are a few issues here.\n\nFirst, '/proc/net/dev' might not have the interface named 'eth0'. It could be 'enp0s3' or something else, depending on the system. I need to make the interface name configurable.\n\nSecond, 'top' might not be installed or might behave differently on various systems. Maybe 'vmstat' is a more universal choice for CPU usage.\n\nLet me look up 'vmstat' for CPU usage.\n\n'vmstat 1 2' gives two samples, one second apart. The last row shows average values.\n\nI can parse that to get CPU usage.\n\nSimilarly, for network traffic, using 'ip -s link show eth0' might be more straightforward.\n\nWait, but again, the interface name needs to be configurable.\n\nLet me make the interface name a variable.\n\nAlso, for email sending, I need to ensure that 'mail' is installed and configured properly on the system.\n\nAlternatively, I could use 'sendmail' or 'msmtp'.\n\nTo make it more flexible, maybe I should allow the user to specify which mail command to use.\n\nThis is getting a bit complicated. Maybe I should keep it simple and assume 'mail' is available.\n\nAlso, I need to think about rate limiting the emails. If multiple alerts trigger in quick succession, I don't want to flood the inbox. Maybe only send an email if there's a new alert since the last check.\n\nWait, but with the current setup, alerts are accumulated per loop, which is every minute. That should be fine for now.\n\nAnother thing: disk space check is for the root filesystem only. Maybe I should check all mounted filesystems or allow specifying which filesystems to check.\n\nThat might be too advanced for this script. I'll stick with checking the root filesystem.\n\nAlso, perhaps include the current time in the log entries.\n\nLet me update the script accordingly.\n\n```\n\n#!/bin/bash\n\n# Configuration variables\n\nCPU_THRESHOLD=80\n\nMEMORY_THRESHOLD=90\n\nDISK_THRESHOLD=95\n\nNETWORK_THRESHOLD=1000000  # 1 MB/s\n\nEMAILRecipient=\"admin@example.com\"\n\nLOGFILE=\"/var/log/system_monitor.log\"\n\nINTERFACE=\"eth0\"\n\nMAILCOMMAND=\"mail -s\"\n\n# Infinite loop\n\nwhile true; do\n\n    alerts=\"\"\n\n    # Check CPU usage\n\n    cpu_usage=$(vmstat 1 2 | tail -1 | awk '{print ($14/$4)*100}')\n\n    if (( $(echo \"$cpu_usage > $CPU_THRESHOLD\" | bc -l) )); then\n\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n\n        echo \"[$timestamp] High CPU usage: $cpu_usage%\" >> $LOGFILE\n\n        alerts+=\"[$timestamp] High CPU usage: $cpu_usage%\\n\"\n\n    fi\n\n    # Check memory usage\n\n    memory_usage=$(free -m | awk 'NR==2{printf \"%.2f%%\", $3/$2*100}')\n\n    if (( $(echo \"$memory_usage > $MEMORY_THRESHOLD\" | bc -l) )); then\n\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n\n        echo \"[$timestamp] High memory usage: $memory_usage%\" >> $LOGFILE\n\n        alerts+=\"[$timestamp] High memory usage: $memory_usage%\\n\"\n\n    fi\n\n    # Check disk space\n\n    disk_usage=$(df / | awk 'NR==2{print $5}')\n\n    if (( $(echo \"$disk_usage > $DISK_THRESHOLD\" | bc -l) )); then\n\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n\n        echo \"[$timestamp] Low disk space: $disk_usage%\" >> $LOGFILE\n\n        alerts+=\"[$timestamp] Low disk space: $disk_usage%\\n\"\n\n    fi\n\n    # Check network traffic\n\n    # Read initial network stats\n\n    rx1=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $2}')\n\n    tx1=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $10}')\n\n    sleep 1\n\n    rx2=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $2}')\n\n    tx2=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $10}')\n\n    rx=$((rx2 - rx1))\n\n    tx=$((tx2 - tx1))\n\n    total_traffic=$((rx + tx))\n\n    if (( total_traffic > $NETWORK_THRESHOLD )); then\n\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n\n        echo \"[$timestamp] High network traffic: $total_traffic bytes/s\" >> $LOGFILE\n\n        alerts+=\"[$timestamp] High network traffic: $total_traffic bytes/s\\n\"\n\n    fi\n\n    # Send email if there are alerts\n\n    if [ -n \"$alerts\" ]; then\n\n        echo -e \"System alerts:\\n$alerts\" | $MAILCOMMAND \"System Alert\" $EMAILRecipient\n\n        alerts=\"\"\n\n    fi\n\n    sleep 60\n\ndone\n\n```\n\nI think this is a good start. I need to test this script on a real system to make sure all the commands work as expected.\n\nFirst, I need to make sure that 'vmstat' is installed and that it reports CPU usage correctly.\n\nAlso, '/proc/net/dev' might have multiple interfaces, so specifying the correct interface is important.\n\nMaybe I should add a check to see if the specified interface exists.\n\nAdditionally, for disk space, maybe check multiple mount points, but that complicates things.\n\nFor now, checking the root filesystem is sufficient.\n\nI should also think about permissions. This script might need to be run as root to access certain system information.\n\nAlternatively, I can set up 'sudo' permissions so that the user running the script can execute the necessary commands without entering a password.\n\nAnother consideration is that email sending might require authentication, depending on the mail server configuration.\n\nIf 'mail' doesn't work, perhaps I need to use 'mutt' with SMTP settings.\n\nThis is getting a bit too involved for a simple script. I'll assume that 'mail' works out of the box.\n\nAlso, I need to make sure that the log file has the correct permissions so that the script can write to it.\n\nMaybe I should create the log file if it doesn't exist.\n\nWait, Bash will create the file if it doesn't exist when redirecting output with '>>'.\n\nAlright, I think this is a reasonable first draft.\n\nTo summarize, the script does the following every minute:\n\n1. Checks CPU usage with 'vmstat' and alerts if it's above 80%.\n\n2. Checks memory usage with 'free' and alerts if it's above 90%.\n\n3. Checks disk space with 'df' and alerts if it's above 95%.\n\n4. Checks network traffic on a specified interface by reading '/proc/net/dev' and alerts if it's above 1 MB/s.\n\nIf any of these conditions are met, it accumulates the alerts and sends them via email using the 'mail' command.\n\nThe alerts are also logged to a file for reference.\n\nThis should provide a basic level of system monitoring and notification.\n\n## Final Solution\nTo monitor system resources like CPU utilization, memory usage, disk space, and network traffic, and send email alerts when thresholds are exceeded, you can use the following Bash script. This script checks the system metrics every minute and sends an email alert if any metric exceeds the predefined threshold.\n\n### Solution Code\n\n```bash\n#!/bin/bash\n\n# Configuration variables\nCPU_THRESHOLD=80\nMEMORY_THRESHOLD=90\nDISK_THRESHOLD=95\nNETWORK_THRESHOLD=1000000  # 1 MB/s\nEMAIL_RECIPIENT=\"admin@example.com\"\nLOGFILE=\"/var/log/system_monitor.log\"\nINTERFACE=\"eth0\"\nMAIL_COMMAND=\"mail -s\"\n\n# Ensure the log file exists\ntouch $LOGFILE\n\n# Infinite loop\nwhile true; do\n    alerts=\"\"\n\n    # Check CPU usage\n    cpu_usage=$(vmstat 1 2 | tail -1 | awk '{print ($14/$4)*100}')\n    if (( $(echo \"$cpu_usage > $CPU_THRESHOLD\" | bc -l) )); then\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n        echo \"[$timestamp] High CPU usage: $cpu_usage%\" >> $LOGFILE\n        alerts+=\"[$timestamp] High CPU usage: $cpu_usage%\\n\"\n    fi\n\n    # Check memory usage\n    memory_usage=$(free -m | awk 'NR==2{printf \"%.2f%%\", $3/$2*100}')\n    if (( $(echo \"$memory_usage > $MEMORY_THRESHOLD\" | bc -l) )); then\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n        echo \"[$timestamp] High memory usage: $memory_usage%\" >> $LOGFILE\n        alerts+=\"[$timestamp] High memory usage: $memory_usage%\\n\"\n    fi\n\n    # Check disk space\n    disk_usage=$(df / | awk 'NR==2{print $5}')\n    if (( $(echo \"$disk_usage > $DISK_THRESHOLD\" | bc -l) )); then\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n        echo \"[$timestamp] Low disk space: $disk_usage%\" >> $LOGFILE\n        alerts+=\"[$timestamp] Low disk space: $disk_usage%\\n\"\n    fi\n\n    # Check network traffic\n    # Read initial network stats\n    rx1=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $2}')\n    tx1=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $10}')\n    sleep 1\n    rx2=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $2}')\n    tx2=$(cat /proc/net/dev | grep $INTERFACE | awk '{print $10}')\n    rx=$((rx2 - rx1))\n    tx=$((tx2 - tx1))\n    total_traffic=$((rx + tx))\n    if (( total_traffic > $NETWORK_THRESHOLD )); then\n        timestamp=$(date +%Y-%m-%d_%H:%M:%S)\n        echo \"[$timestamp] High network traffic: $total_traffic bytes/s\" >> $LOGFILE\n        alerts+=\"[$timestamp] High network traffic: $total_traffic bytes/s\\n\"\n    fi\n\n    # Send email if there are alerts\n    if [ -n \"$alerts\" ]; then\n        echo -e \"System alerts:\\n$alerts\" | $MAIL_COMMAND \"System Alert\" $EMAIL_RECIPIENT\n        alerts=\"\"\n    fi\n\n    sleep 60\ndone\n```\n\n### Explanation\n\n1. **Configuration Variables**:\n    - `CPU_THRESHOLD`, `MEMORY_THRESHOLD`, `DISK_THRESHOLD`, and `NETWORK_THRESHOLD` define the usage limits for CPU, memory, disk, and network traffic respectively.\n    - `EMAIL_RECIPIENT` is the email address where alerts are sent.\n    - `LOGFILE` is the path to the log file where alerts are also recorded.\n    - `INTERFACE` specifies the network interface to monitor.\n    - `MAIL_COMMAND` is the command used to send emails.\n\n2. **Infinite Loop**:\n    - The script runs indefinitely, checking system metrics every minute.\n    - **CPU Usage**: Monitored using `vmstat` and alerted if above threshold.\n    - **Memory Usage**: Checked with `free` and alerted if above threshold.\n    - **Disk Space**: Verified using `df` and alerted if above threshold.\n    - **Network Traffic**: Measured via `/proc/net/dev` and alerted if above threshold.\n\n3. **Alerting Mechanism**:\n    - If any metric exceeds its threshold, an alert message is logged and accumulated.\n    - All alerts are sent via email using the `mail` command.\n\n4. **Logging**:\n    - All alerts are also logged to a specified log file for reference.\n\nThis script provides a basic yet effective way to monitor critical system resources and receive timely alerts when issues arise."
    }
]