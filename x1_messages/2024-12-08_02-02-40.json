[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple RESTful API using the Spring Boot framework. The API should support basic CRUD operations for managing a collection of books, where each book has a title, author, and publication year. Implement appropriate validation checks for the input data.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple RESTful API for managing a collection of books using Java and the Spring Boot framework. This API will support basic CRUD operations: Create, Read, Update, and Delete. Each book will have a title, author, and publication year, and we'll include some validation checks to ensure the data is correct.\n\nFirst, make sure you have Java and Maven installed on your machine, as Spring Boot projects are typically built with Maven. Also, having an IDE like IntelliJ IDEA or Eclipse can make development easier, but it's not mandatory.\n\n### Step 1: Set Up a Spring Boot Project\n\nWe'll start by creating a new Spring Boot project. You can do this manually or use a tool like Spring Initializr (https://start.spring.io/).\n\n- **Project:** Maven Project\n- **Language:** Java\n- **Spring Boot Version:** Latest stable version\n- **Project Metadata:**\n  - Group: com.example\n  - Artifact: bookapi\n  - Name: bookapi\n  - Description: Simple Book API\n  - Package name: com.example.bookapi\n- **Packaging:** Jar\n- **Java Version:** 11 or higher\n\n- **Dependencies:**\n  - Spring Web\n  - Spring Data JPA\n  - H2 Database (for in-memory database)\n\nAfter generating the project, extract it and open it in your IDE.\n\n### Step 2: Define the Book Entity\n\nCreate a new package under `com.example.bookapi` called `model`, and inside it, create a `Book` class.\n\n```java\npackage com.example.bookapi.model;\n\nimport javax.persistence.Entity;\nimport javax.persistence.GeneratedValue;\nimport javax.persistence.GenerationType;\nimport javax.persistence.Id;\nimport javax.validation.constraints.NotBlank;\nimport javax.validation.constraints.NotNull;\nimport javax.validation.constraints.PastOrPresent;\nimport java.util.Date;\n\n@Entity\npublic class Book {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.AUTO)\n    private Long id;\n\n    @NotBlank(message = \"Title is mandatory\")\n    private String title;\n\n    @NotBlank(message = \"Author is mandatory\")\n    private String author;\n\n    @NotNull\n    @PastOrPresent(message = \"Publication year cannot be in the future\")\n    private Integer publicationYear;\n\n    // Getters and Setters\n    public Long getId() {\n        return id;\n    }\n\n    public void setId(Long id) {\n        this.id = id;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public void setTitle(String title) {\n        this.title = title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public void setAuthor(String author) {\n        this.author = author;\n    }\n\n    public Integer getPublicationYear() {\n        return publicationYear;\n    }\n\n    public void setPublicationYear(Integer publicationYear) {\n        this.publicationYear = publicationYear;\n    }\n}\n```\n\n### Step 3: Create a Repository Interface\n\nCreate another package called `repository`, and inside it, create an interface that extends `JpaRepository`.\n\n```java\npackage com.example.bookapi.repository;\n\nimport com.example.bookapi.model.Book;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface BookRepository extends JpaRepository<Book, Long> {\n}\n```\n\n### Step 4: Create a Service Layer\n\nCreate a package named `service`, and inside it, create a `BookService` class.\n\n```java\npackage com.example.bookapi.service;\n\nimport com.example.bookapi.model.Book;\nimport com.example.bookapi.repository.BookRepository;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\nimport org.springframework.validation.annotation.Validated;\n\nimport javax.validation.Valid;\nimport java.util.List;\nimport java.util.Optional;\n\n@Service\n@Validated\npublic class BookService {\n\n    @Autowired\n    private BookRepository bookRepository;\n\n    public List<Book> getAllBooks() {\n        return bookRepository.findAll();\n    }\n\n    public Optional<Book> getBookById(Long id) {\n        return bookRepository.findById(id);\n    }\n\n    public Book createBook(@Valid Book book) {\n        return bookRepository.save(book);\n    }\n\n    public Book updateBook(Long id, @Valid Book bookDetails) {\n        Book book = bookRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Book not found\"));\n        book.setTitle(bookDetails.getTitle());\n        book.setAuthor(bookDetails.getAuthor());\n        book.setPublicationYear(bookDetails.getPublicationYear());\n        return bookRepository.save(book);\n    }\n\n    public void deleteBook(Long id) {\n        Book book = bookRepository.findById(id).orElseThrow(() -> new RuntimeException(\"Book not found\"));\n        bookRepository.delete(book);\n    }\n}\n```\n\n### Step 5: Create a Controller\n\nCreate a package named `controller`, and inside it, create a `BookController` class.\n\n```java\npackage com.example.bookapi.controller;\n\nimport com.example.bookapi.model.Book;\nimport com.example.bookapi.service.BookService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.validation.annotation.Validated;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.validation.Valid;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/books\")\n@Validated\npublic class BookController {\n\n    @Autowired\n    private BookService bookService;\n\n    @GetMapping\n    public List<Book> getAllBooks() {\n        return bookService.getAllBooks();\n    }\n\n    @GetMapping(\"/{id}\")\n    public ResponseEntity<Book> getBookById(@PathVariable Long id) {\n        return bookService.getBookById(id)\n                .map(book -> ResponseEntity.ok().body(book))\n                .orElse(ResponseEntity.notFound().build());\n    }\n\n    @PostMapping\n    public Book createBook(@Valid @RequestBody Book book) {\n        return bookService.createBook(book);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<Book> updateBook(@PathVariable Long id, @Valid @RequestBody Book bookDetails) {\n        Book updatedBook = bookService.updateBook(id, bookDetails);\n        return ResponseEntity.ok(updatedBook);\n    }\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteBook(@PathVariable Long id) {\n        bookService.deleteBook(id);\n        return ResponseEntity.noContent().build();\n    }\n}\n```\n\n### Step 6: Configure Application Properties\n\nOpen the `application.properties` file in the `src/main/resources` directory and add the following configurations for the H2 database:\n\n```properties\nspring.datasource.url=jdbc:h2:mem:testdb\nspring.datasource.driverClassName=org.h2.Driver\nspring.datasource.username=sa\nspring.datasource.password=\nspring.jpa.database-platform=org.hibernate.dialect.H2Dialect\nspring.h2.console.enabled=true\n```\n\n### Step 7: Run the Application\n\nYou can run the Spring Boot application by executing the `main` method in the `BookApiApplication` class, or by using the Maven command:\n\n```sh\nmvn spring-boot:run\n```\n\n### Step 8: Test the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n- **Get all books:** `GET http://localhost:8080/api/books`\n- **Get a single book:** `GET http://localhost:8080/api/books/{id}`\n- **Create a book:** `POST http://localhost:8080/api/books` with JSON body\n- **Update a book:** `PUT http://localhost:8080/api/books/{id}` with JSON body\n- **Delete a book:** `DELETE http://localhost:8080/api/books/{id}`\n\n### Conclusion\n\nYou've successfully created a simple RESTful API for managing books using Spring Boot. This API includes basic CRUD operations with validation checks for the book's title, author, and publication year. You can further enhance this API by adding more features like searching, pagination, and integrating with a different database if needed."
    }
]