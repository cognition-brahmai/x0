[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with the Kubernetes API to list all running pods in a specific namespace and prints their names and statuses.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To interact with the Kubernetes API from a Python script, you can use the official Kubernetes Python client library. Below is a step-by-step guide to create a script that lists all running pods in a specific namespace and prints their names and statuses.\n\n### Prerequisites\n\n1. **Kubernetes Cluster**: Ensure you have access to a Kubernetes cluster.\n2. **kubectl**: Make sure `kubectl` is configured to communicate with your cluster.\n3. **Python**: Have Python installed on your machine.\n4. **Kubernetes Python Client**: Install the Kubernetes Python client library.\n\n### Installation\n\nFirst, install the Kubernetes Python client library using pip:\n\n```sh\npip install kubernetes\n```\n\n### Script\n\nCreate a Python script named `list_pods.py` with the following content:\n\n```python\nfrom kubernetes import client, config\n\ndef main():\n    # Load Kubernetes configuration\n    config.load_kube_config()\n\n    # Create an instance of the CoreV1Api\n    v1 = client.CoreV1Api()\n\n    # Specify the namespace\n    namespace = \"your-namespace\"  # Replace with your namespace\n\n    # List pods in the specified namespace\n    print(f\"Listing pods in namespace: {namespace}\")\n    ret = v1.list_namespaced_pod(namespace)\n    for i in ret.items:\n        print(f\"Pod Name: {i.metadata.name}, Status: {i.status.phase}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n\n1. **Loading Configuration**:\n   - `config.load_kube_config()`: Loads the in-cluster configuration or the kube-config file from the default location.\n\n2. **Creating API Instance**:\n   - `client.CoreV1Api()`: Creates an instance of the CoreV1Api class to interact with the Kubernetes API.\n\n3. **Specifying Namespace**:\n   - Set the `namespace` variable to the desired namespace.\n\n4. **Listing Pods**:\n   - `v1.list_namespaced_pod(namespace)`: Lists all pods in the specified namespace.\n   - Iterates through the list and prints each pod's name and status phase.\n\n### Running the Script\n\n1. **Ensure Permissions**:\n   - Make sure your user has the necessary permissions to list pods in the specified namespace.\n\n2. **Execute the Script**:\n   - Run the script using Python:\n\n     ```sh\n     python list_pods.py\n     ```\n\n### Example Output\n\n```\nListing pods in namespace: your-namespace\nPod Name: pod1, Status: Running\nPod Name: pod2, Status: Succeeded\nPod Name: pod3, Status: Failed\n```\n\n### Notes\n\n- **Namespace**: Replace `\"your-namespace\"` with the actual namespace you want to query.\n- **Error Handling**: Consider adding error handling to manage cases where the namespace does not exist or there are connectivity issues.\n- **Authentication**: Ensure that your Kubernetes configuration has the appropriate credentials to access the cluster.\n\nThis script provides a basic example of interacting with the Kubernetes API using Python to list pods in a specific namespace. You can extend this script to perform more complex operations as needed."
    }
]