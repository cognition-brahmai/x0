[
    {
        "role": "user",
        "content": "Create a Java function that takes an integer as input, calculates its factorial using recursion, and returns the result.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Java function that calculates the factorial of an integer using recursion:\n\n```java\npublic class FactorialCalculator {\n\n    /**\n     * Calculate the factorial of a given integer using recursion.\n     * \n     * @param n The integer to calculate the factorial of. Must be non-negative.\n     * @return The factorial of n.\n     * @throws IllegalArgumentException If n is negative.\n     */\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers.\");\n        }\n        if (n == 0 || n == 1) {\n            return 1;\n        }\n        return n * factorial(n - 1);\n    }\n\n    public static void main(String[] args) {\n        try {\n            System.out.println(factorial(5)); // Output: 120\n            System.out.println(factorial(0)); // Output: 1\n            System.out.println(factorial(-1)); // Throws IllegalArgumentException\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation:\n1. **Function Definition**: The `factorial` function takes an integer `n` as input and returns its factorial as a `long`. \n2. **Base Case**: If `n` is 0 or 1, the factorial is 1.\n3. **Recursive Case**: For n > 1, the factorial is n multiplied by the factorial of (n-1).\n4. **Error Handling**: If `n` is negative, an `IllegalArgumentException` is thrown, as factorial is not defined for negative numbers.\n5. **Main Method**: Demonstrates the usage of the `factorial` function with sample inputs and handles exceptions.\n\nThis function handles non-negative integers efficiently using recursion."
    }
]