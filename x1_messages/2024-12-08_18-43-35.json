[
    {
        "role": "user",
        "content": "Design a RESTful API using FastAPI in Python that allows users to manage a collection of movies. Users should be able to add, remove, update, and retrieve movie information. Movie information should include title, director, release year, and rating.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to design a RESTful API using FastAPI in Python for managing a collection of movies. The API should allow users to perform basic CRUD operations: Create, Read, Update, and Delete movies. Each movie should have details like title, director, release year, and rating.\n\nFirst, I need to make sure I have FastAPI installed. I can install it using pip if I don't have it already:\n\n```bash\npip install fastapi\n```\n\nI also need an ASGI server to run the FastAPI application. uvicorn is a good choice:\n\n```bash\npip install uvicorn\n```\n\nNow, I'll start by defining the structure of a movie. Since each movie has a title, director, release year, and rating, I can create a Pydantic model to represent this.\n\nHere's how I can define the Movie model:\n\n```python\nfrom pydantic import BaseModel\n\nclass Movie(BaseModel):\n    title: str\n    director: str\n    release_year: int\n    rating: float\n```\n\nNext, I need to set up the FastAPI app. I'll create a new Python file, say `main.py`, and define the app there.\n\n```python\nfrom fastapi import FastAPI\n\napp = FastAPI()\n```\n\nNow, I need to create endpoints for the CRUD operations.\n\n**Create (POST)**: To add a new movie to the collection.\n\n**Read (GET)**: To retrieve movie(s) from the collection. This could be all movies or a specific movie by some identifier.\n\n**Update (PUT/PATCH)**: To update the details of an existing movie.\n\n**Delete (DELETE)**: To remove a movie from the collection.\n\nI need to decide on an identifier for each movie to distinguish them. For simplicity, I can use an integer ID that increments automatically for each new movie added.\n\nTo store the movies, I can use a list for now, but for a more persistent storage, I might consider using a database like SQLite.\n\nFor now, I'll use a list to keep it simple.\n\n```python\nmovies = []\n```\n\nBut since I need to assign unique IDs, I can use a variable to keep track of the next available ID.\n\n```python\nnext_id = 1\n```\n\nWhen a new movie is added, I'll assign it the current value of `next_id` and then increment it for the next movie.\n\nBut to make it more efficient, perhaps I can use a dictionary with the ID as the key.\n\nLet me rethink this. Using a dictionary where the key is the ID would be more efficient for lookups.\n\nSo, I'll define:\n\n```python\nmovies = {}\n```\n\nAnd each movie will have an ID, title, director, release_year, and rating.\n\nI need to decide how to generate unique IDs. I can either use an auto-incrementing integer or use some UUID library to generate unique identifiers.\n\nFor simplicity, I'll go with auto-incrementing integers.\n\nI'll need to keep track of the current ID and increment it each time a new movie is added.\n\nI can define a variable to store the last used ID.\n\n```python\nlast_id = 0\n```\n\nEach time a new movie is added, I'll assign it `last_id + 1` and then increment `last_id`.\n\nAlternatively, I can use Python's built-in `itertools.count` for generating unique IDs.\n\n```python\nfrom itertools import count\n\nid_counter = count(start=1)\n```\n\nBut I think using a simple variable for `last_id` is sufficient.\n\nNow, let's define the Movie model to include the ID.\n\n```python\nclass Movie(BaseModel):\n    id: int\n    title: str\n    director: str\n    release_year: int\n    rating: float\n```\n\nWait, but in this case, the ID is assigned by the server, so maybe it's better to have the client not provide the ID, to prevent confusion.\n\nSo, perhaps I should have two models: one for creating a movie (without ID) and one for representing a movie with ID.\n\nSomething like:\n\n```python\nclass MovieCreate(BaseModel):\n    title: str\n    director: str\n    release_year: int\n    rating: float\n\nclass Movie(MovieCreate):\n    id: int\n\n    class Config:\n        orm_mode = True\n```\n\nBut since I'm not using an ORM right now, I can simplify it.\n\nLet me define:\n\n```python\nclass Movie(BaseModel):\n    title: str\n    director: str\n    release_year: int\n    rating: float\n\nclass MovieDB(Movie):\n    id: int\n```\n\nBut I think I can manage with one model and assign the ID server-side.\n\nLet me stick with:\n\n```python\nclass Movie(BaseModel):\n    title: str\n    director: str\n    release_year: int\n    rating: float\n```\n\nAnd when adding a new movie, I'll assign an ID and return it.\n\nNow, I need to define the endpoints.\n\n**Create Movie (POST)**:\n\nEndpoint: `/movies`\n\nMethod: POST\n\nRequest Body: Movie model without ID\n\nResponse: Created Movie with ID\n\n**Read Movies (GET)**:\n\nEndpoint: `/movies`\n\nMethod: GET\n\nResponse: List of all movies\n\n**Read Single Movie (GET)**:\n\nEndpoint: `/movies/{id}`\n\nMethod: GET\n\nResponse: Single movie with the given ID\n\n**Update Movie (PUT)**:\n\nEndpoint: `/movies/{id}`\n\nMethod: PUT\n\nRequest Body: Movie model with updated details\n\nResponse: Updated movie\n\n**Delete Movie (DELETE)**:\n\nEndpoint: `/movies/{id}`\n\nMethod: DELETE\n\nResponse: Confirmation message\n\nI need to implement these endpoints in FastAPI.\n\nFirst, I'll set up the movie storage.\n\n```python\nmovies = {}\nlast_id = 0\n```\n\nNow, define the POST endpoint to create a new movie.\n\n```python\n@app.post(\"/movies/\", response_model=MovieDB)\ndef create_movie(movie: Movie):\n    global last_id\n    last_id += 1\n    movie_id = last_id\n    movie_dict = movie.dict()\n    movie_dict[\"id\"] = movie_id\n    movies[movie_id] = movie_dict\n    return movie_dict\n```\n\nFor getting all movies:\n\n```python\n@app.get(\"/movies/\", response_model=List[MovieDB])\ndef read_movies():\n    return list(movies.values())\n```\n\nFor getting a single movie by ID:\n\n```python\nfrom typing import Optional\n\n@app.get(\"/movies/{movie_id}\", response_model=Optional[MovieDB])\ndef read_movie(movie_id: int):\n    return movies.get(movie_id)\n```\n\nFor updating a movie:\n\n```python\n@app.put(\"/movies/{movie_id}\", response_model=MovieDB)\ndef update_movie(movie_id: int, movie: Movie):\n    if movie_id not in movies:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    movie_dict = movie.dict()\n    movie_dict[\"id\"] = movie_id\n    movies[movie_id] = movie_dict\n    return movie_dict\n```\n\nFor deleting a movie:\n\n```python\nfrom fastapi import HTTPException\n\n@app.delete(\"/movies/{movie_id}\", response_model=dict)\ndef delete_movie(movie_id: int):\n    if movie_id not in movies:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    del movies[movie_id]\n    return {\"detail\": \"Movie deleted\"}\n```\n\nI need to make sure to import necessary modules.\n\nFull code so far:\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\nclass Movie(BaseModel):\n    title: str\n    director: str\n    release_year: int\n    rating: float\n\nclass MovieDB(Movie):\n    id: int\n\nmovies = {}\nlast_id = 0\n\n@app.post(\"/movies/\", response_model=MovieDB)\ndef create_movie(movie: Movie):\n    global last_id\n    last_id += 1\n    movie_id = last_id\n    movie_dict = movie.dict()\n    movie_dict[\"id\"] = movie_id\n    movies[movie_id] = movie_dict\n    return movie_dict\n\n@app.get(\"/movies/\", response_model=List[MovieDB])\ndef read_movies():\n    return list(movies.values())\n\n@app.get(\"/movies/{movie_id}\", response_model=Optional[MovieDB])\ndef read_movie(movie_id: int):\n    return movies.get(movie_id)\n\n@app.put(\"/movies/{movie_id}\", response_model=MovieDB)\ndef update_movie(movie_id: int, movie: Movie):\n    if movie_id not in movies:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    movie_dict = movie.dict()\n    movie_dict[\"id\"] = movie_id\n    movies[movie_id] = movie_dict\n    return movie_dict\n\n@app.delete(\"/movies/{movie_id}\", response_model=dict)\ndef delete_movie(movie_id: int):\n    if movie_id not in movies:\n        raise HTTPException(status_code=404, detail=\"Movie not found\")\n    del movies[movie_id]\n    return {\"detail\": \"Movie deleted\"}\n```\n\nI think this covers the basic requirements. Users can add, retrieve, update, and delete movies using this API.\n\nI might want to add some more features, like searching movies by title or director, or filtering by release year or rating, but for now, this should suffice.\n\nTo run this API, I can use uvicorn:\n\n```bash\nuvicorn main:app --reload\n```\n\nAssuming the script is saved as `main.py`.\n\nThis will start the server, and I can test the endpoints using tools like curl or Postman.\n\nFor example, to add a new movie:\n\n```bash\ncurl -X POST \"http://127.0.0.1:8000/movies/\" -H \"Content-Type: application/json\" -d '{\"title\":\"Inception\",\"director\":\"Christopher Nolan\",\"release_year\":2010,\"rating\":8.8}'\n```\n\nTo get all movies:\n\n```bash\ncurl http://127.0.0.1:8000/movies/\n```\n\nTo get a specific movie:\n\n```bash\ncurl http://127.0.0.1:8000/movies/1\n```\n\nTo update a movie:\n\n```bash\ncurl -X PUT \"http://127.0.0.1:8000/movies/1\" -H \"Content-Type: application/json\" -d '{\"title\":\"Inception\",\"director\":\"Christopher Nolan\",\"release_year\":2010,\"rating\":9.0}'\n```\n\nTo delete a movie:\n\n```bash\ncurl -X DELETE http://127.0.0.1:8000/movies/1\n```\n\nThis should cover the basic functionality required.\n\n## Final Solution\nTo create a RESTful API for managing a collection of movies using FastAPI in Python, follow these steps:\n\n### Prerequisites\n\n1. **Install FastAPI and Uvicorn**:\n   ```bash\n   pip install fastapi uvicorn\n   ```\n\n### Solution Code\n\n1. **Define the Movie Model**:\n   ```python\n   from fastapi import FastAPI, HTTPException\n   from pydantic import BaseModel\n   from typing import List, Optional\n\n   app = FastAPI()\n\n   class Movie(BaseModel):\n       title: str\n       director: str\n       release_year: int\n       rating: float\n\n   class MovieDB(Movie):\n       id: int\n   ```\n\n2. **Set Up Movie Storage**:\n   ```python\n   movies = {}\n   last_id = 0\n   ```\n\n3. **Implement CRUD Operations**:\n\n   - **Create a Movie**:\n     ```python\n     @app.post(\"/movies/\", response_model=MovieDB)\n     def create_movie(movie: Movie):\n         global last_id\n         last_id += 1\n         movie_id = last_id\n         movie_dict = movie.dict()\n         movie_dict[\"id\"] = movie_id\n         movies[movie_id] = movie_dict\n         return movie_dict\n     ```\n\n   - **Read All Movies**:\n     ```python\n     @app.get(\"/movies/\", response_model=List[MovieDB])\n     def read_movies():\n         return list(movies.values())\n     ```\n\n   - **Read a Single Movie**:\n     ```python\n     @app.get(\"/movies/{movie_id}\", response_model=Optional[MovieDB])\n     def read_movie(movie_id: int):\n         return movies.get(movie_id)\n     ```\n\n   - **Update a Movie**:\n     ```python\n     @app.put(\"/movies/{movie_id}\", response_model=MovieDB)\n     def update_movie(movie_id: int, movie: Movie):\n         if movie_id not in movies:\n             raise HTTPException(status_code=404, detail=\"Movie not found\")\n         movie_dict = movie.dict()\n         movie_dict[\"id\"] = movie_id\n         movies[movie_id] = movie_dict\n         return movie_dict\n     ```\n\n   - **Delete a Movie**:\n     ```python\n     @app.delete(\"/movies/{movie_id}\", response_model=dict)\n     def delete_movie(movie_id: int):\n         if movie_id not in movies:\n             raise HTTPException(status_code=404, detail=\"Movie not found\")\n         del movies[movie_id]\n         return {\"detail\": \"Movie deleted\"}\n     ```\n\n### Running the API\n\n1. **Start the Server**:\n   ```bash\n   uvicorn main:app --reload\n   ```\n\n2. **Test the API**:\n   - **Add a new movie**:\n     ```bash\n     curl -X POST \"http://127.0.0.1:8000/movies/\" -H \"Content-Type: application/json\" -d '{\"title\":\"Inception\",\"director\":\"Christopher Nolan\",\"release_year\":2010,\"rating\":8.8}'\n     ```\n\n   - **Get all movies**:\n     ```bash\n     curl http://127.0.0.1:8000/movies/\n     ```\n\n   - **Get a specific movie**:\n     ```bash\n     curl http://127.0.0.1:8000/movies/1\n     ```\n\n   - **Update a movie**:\n     ```bash\n     curl -X PUT \"http://127.0.0.1:8000/movies/1\" -H \"Content-Type: application/json\" -d '{\"title\":\"Inception\",\"director\":\"Christopher Nolan\",\"release_year\":2010,\"rating\":9.0}'\n     ```\n\n   - **Delete a movie**:\n     ```bash\n     curl -X DELETE http://127.0.0.1:8000/movies/1\n     ```\n\nThis setup provides a basic RESTful API for managing a collection of movies with operations to create, read, update, and delete movie entries."
    }
]