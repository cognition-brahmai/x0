[
    {
        "role": "user",
        "content": "Write a Java program that connects to a PostgreSQL database, inserts data into a table, queries the table, and displays the results in a formatted manner.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java program that connects to a PostgreSQL database, inserts data into a table, queries the table, and displays the results in a formatted manner. Make sure you have the PostgreSQL JDBC driver in your classpath.\n\nFirst, ensure you have the PostgreSQL JDBC driver added to your project. If you're using Maven, add this dependency to your `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>42.2.18</version>\n</dependency>\n```\n\nHere's the Java code:\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\npublic class PostgreSQLExample {\n\n    // Database credentials\n    static final String URL = \"jdbc:postgresql://localhost:5432/yourdatabase\";\n    static final String USER = \"yourusername\";\n    static final String PASSWORD = \"yourpassword\";\n\n    public static void main(String[] args) {\n        Connection connection = null;\n        try {\n            // Step 1: Establishing a Connection\n            System.out.println(\"Connecting to database...\");\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\n\n            // Step 2: Create a statement\n            Statement statement = connection.createStatement();\n\n            // Step 3: Execute a query to create a table\n            String createTableSQL = \"CREATE TABLE IF NOT EXISTS employees (\" +\n                    \"id SERIAL PRIMARY KEY,\" +\n                    \"name VARCHAR(100),\" +\n                    \"position VARCHAR(50),\" +\n                    \"salary DECIMAL(10,2))\";\n            statement.execute(createTableSQL);\n            System.out.println(\"Table created successfully.\");\n\n            // Step 4: Insert data into the table\n            String insertSQL = \"INSERT INTO employees(name, position, salary) VALUES (?, ?, ?)\";\n            PreparedStatement preparedStatement = connection.prepareStatement(insertSQL);\n            preparedStatement.setString(1, \"John Doe\");\n            preparedStatement.setString(2, \"Software Engineer\");\n            preparedStatement.setDouble(3, 80000);\n            int rowsAffected = preparedStatement.executeUpdate();\n            System.out.println(rowsAffected + \" row(s) inserted.\");\n\n            // Step 5: Query the table\n            String selectSQL = \"SELECT * FROM employees\";\n            ResultSet resultSet = statement.executeQuery(selectSQL);\n\n            // Step 6: Display the results\n            System.out.println(\"\\nEmployees:\");\n            while (resultSet.next()) {\n                int id = resultSet.getInt(\"id\");\n                String name = resultSet.getString(\"name\");\n                String position = resultSet.getString(\"position\");\n                double salary = resultSet.getDouble(\"salary\");\n                System.out.printf(\"%d: %s, %s, $%.2f%n\", id, name, position, salary);\n            }\n\n            // Step 7: Close resources\n            resultSet.close();\n            preparedStatement.close();\n            statement.close();\n        } catch (SQLException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (connection != null) {\n                    connection.close();\n                    System.out.println(\"Database connection closed.\");\n                }\n            } catch (SQLException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Database Connection**: The program connects to a PostgreSQL database using the provided URL, username, and password.\n2. **Create Table**: It creates a table named `employees` if it doesn't already exist.\n3. **Insert Data**: It inserts a new employee record into the `employees` table using a prepared statement to prevent SQL injection.\n4. **Query Data**: It queries all records from the `employees` table.\n5. **Display Results**: It prints the results in a formatted manner.\n6. **Close Resources**: It ensures that all database resources are closed properly to avoid leaks.\n\nMake sure to replace `\"yourdatabase\"`, `\"yourusername\"`, and `\"yourpassword\"` with your actual database credentials.\n\nThis program demonstrates basic database operations in Java using JDBC with PostgreSQL."
    }
]