[
    {
        "role": "user",
        "content": "Write a Golang web server that serves static files from a specified directory and provides endpoints for uploading new files and deleting existing ones. The server should support command line flags for port number, listening IP address, and the static files directory path."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a step-by-step guide to create a simple Golang web server that serves static files, allows file uploads, and supports file deletions. The server will use command-line flags for configuration.\n\n### Step 1: Setting Up the Project\n\nFirst, ensure you have Go installed on your system. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\nCreate a new directory for your project and initialize a new Go module:\n\n```sh\nmkdir static-server\ncd static-server\ngo mod init static-server\n```\n\n### Step 2: Importing Required Packages\n\nIn your `main.go` file, import the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n)\n```\n\n### Step 3: Defining Command-Line Flags\n\nDefine flags for the port number, listening IP address, and the static files directory path:\n\n```go\nvar (\n\tport          = flag.String(\"port\", \"8080\", \"Port number to listen on\")\n\tip            = flag.String(\"ip\", \"127.0.0.1\", \"IP address to listen on\")\n\tstaticDir     = flag.String(\"static\", \"./static\", \"Directory to serve static files from\")\n)\n\nfunc main() {\n\tflag.Parse()\n\n\t// Ensure the static directory exists\n\tif err := ensureDir(*staticDir); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// Start the server\n\taddr := fmt.Sprintf(\"%s:%s\", *ip, *port)\n\tfmt.Printf(\"Starting server at %s\\n\", addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Step 4: Serving Static Files\n\nUse the `http.FileServer` handler to serve static files from the specified directory:\n\n```go\nfunc init() {\n\tfs := http.FileServer(http.Dir(*staticDir))\n\thttp.Handle(\"/\", fs)\n}\n```\n\n### Step 5: Handling File Uploads\n\nCreate an endpoint to handle file uploads. This endpoint will save uploaded files to the static directory:\n\n```go\nfunc uploadHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method Not Allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tr.ParseMultipartForm(10 << 20) // Set maximum upload size to 10MB\n\n\tfile, handler, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\thttp.Error(w, \"Error retrieving file from form-data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfilePath := filepath.Join(*staticDir, handler.Filename)\n\tout, err := os.Create(filePath)\n\tif err != nil {\n\t\thttp.Error(w, \"Error creating file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer out.Close()\n\n\t_, err = io.Copy(out, file)\n\tif err != nil {\n\t\thttp.Error(w, \"Error saving file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"Successfully uploaded file: %s\\n\", handler.Filename)\n}\n\nfunc init() {\n\thttp.HandleFunc(\"/upload\", uploadHandler)\n}\n```\n\n### Step 6: Handling File Deletions\n\nCreate an endpoint to handle file deletions. This endpoint will remove files from the static directory based on the provided filename:\n\n```go\nfunc deleteHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodDelete {\n\t\thttp.Error(w, \"Method Not Allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\tr.ParseForm()\n\n\tfilename := r.FormValue(\"filename\")\n\tif filename == \"\" {\n\t\thttp.Error(w, \"Missing filename parameter\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tfilePath := filepath.Join(*staticDir, filename)\n\n\terr := os.Remove(filePath)\n\tif err != nil {\n\t\thttp.Error(w, \"Error deleting file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"Successfully deleted file: %s\\n\", filename)\n}\n\nfunc init() {\n\thttp.HandleFunc(\"/delete\", deleteHandler)\n}\n```\n\n### Step 7: Ensuring Directory Exists\n\nAdd a helper function to ensure the static directory exists:\n\n```go\nfunc ensureDir(path string) error {\n\terr := os.MkdirAll(path, os.ModePerm)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"failed to create directory: %w\", err)\n\t}\n\treturn nil\n}\n```\n\n### Step 8: Running the Server\n\nCompile and run your server:\n\n```sh\ngo build -o static-server main.go\n./static-server -port=8080 -ip=127.0.0.1 -static=./static\n```\n\n### Summary\n\nYou've now created a simple Golang web server that serves static files, allows file uploads, and supports file deletions. The server uses command-line flags for configuration, making it flexible for different environments and requirements."
    }
]