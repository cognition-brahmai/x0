[
    {
        "role": "user",
        "content": "Create a Python script that interacts with Google Sheets API to manage a simple task list. Users should be able to add tasks, mark them as complete, and delete completed tasks. Authenticate the script using OAuth2 and store the credentials securely.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that interacts with Google Sheets API to manage a simple task list. Users should be able to add tasks, mark them as complete, and delete completed tasks. Also, I need to authenticate the script using OAuth2 and store the credentials securely.\n\nFirst things first, I need to set up the Google Sheets API. I've used Google APIs before, but mostly with services like Gmail or Drive. Sheets should be similar. I need to enable the Sheets API for my project in the Google Cloud Console.\n\nSo, step one: Go to the Google Cloud Console, create a new project, enable the Google Sheets API for that project, and set up OAuth consent screen since I need to authenticate using OAuth2.\n\nWait, actually, I need to think about who will be using this script. Is it for personal use, or will multiple people use it? If it's just for personal use, I might be able to simplify the authentication process. But since the prompt says \"users\" should be able to do things, it might imply that multiple people will use it.\n\nHmm, but Google Sheets already handles authentication per user, so maybe I can set it up so that each user authenticates themselves and the script acts on their behalf.\n\nOkay, so I need to set up OAuth2 credentials in the Google Cloud Console. I'll need to create credentials for OAuth2, specify the application type (probably desktop app), and set up the scopes appropriately. For Sheets API, the scope would be something like 'https://www.googleapis.com/auth/spreadsheets'.\n\nNow, about storing credentials securely. Python's oauth2client library has a function to store credentials in a file, but I need to make sure that this file is handled securely, especially if multiple users are using the script.\n\nWait, but if each user authenticates themselves, their credentials should be stored separately. Maybe I can store credentials in a file named after the user's email or something like that.\n\nBut perhaps a better way is to store credentials in a database, with proper encryption. But that might be overkill for a simple task list manager.\n\nAlternatively, I can use the built-in credential storage from the google-auth-library, which stores credentials in a token file.\n\nI need to make sure that the credentials are refreshed automatically when needed.\n\nOkay, moving on to interacting with the Sheets API. I need to read from and write to a Google Sheet.\n\nFirst, I need to create a Google Sheet that will serve as the task list. Maybe the sheet has columns like \"Task\", \"Due Date\", \"Completed\" etc.\n\nWait, but the prompt says \"manage a simple task list\", so perhaps just a single column for tasks, with an additional column to mark them as complete.\n\nActually, to make it more flexible, maybe have columns like:\n\n- Task ID (auto-incrementing)\n\n- Task Description\n\n- Due Date\n\n- Completed (yes/no)\n\nThat way, users can add tasks with descriptions and due dates, and mark them as complete.\n\nBut to keep it simple, as per the prompt, maybe just \"Task\" and \"Completed\" columns.\n\nI need to decide on the structure of the sheet.\n\nLet's say the sheet has two columns:\n\nA: Task\n\nB: Completed\n\nRows will represent individual tasks.\n\nNow, for adding a task, I need to append a new row to the sheet with the task description and \"Completed\" set to \"No\" or similar.\n\nFor marking a task as complete, I need to update the \"Completed\" column for that row to \"Yes\".\n\nFor deleting completed tasks, I need to filter out rows where \"Completed\" is \"Yes\" and create a new sheet with only incomplete tasks, then replace the original sheet with this new one.\n\nWait, but in Sheets API, I can delete rows directly without creating a new sheet.\n\nI think it's better to delete the rows directly.\n\nNow, I need to find a way to identify which rows to delete. Maybe keep track of row numbers or use some kind of filter.\n\nAlso, need to handle the case where there are no completed tasks.\n\nOkay, now, in Python, I need to use the google-api-python-client to interact with the Sheets API.\n\nFirst, install the required libraries:\n\n- google-auth\n\n- google-auth-oauthlib\n\n- google-auth-httplib2\n\n- google-api-python-client\n\nI can use pip to install these.\n\nOnce installed, I need to authenticate using OAuth2.\n\nI can use the OAuth2 flow to authenticate the user and store the credentials.\n\nThen, use the Sheets API to read and write data to the sheet.\n\nI need to define the spreadsheet ID and the range (e.g., \"Sheet1!A:B\") to interact with.\n\nFor adding a task, I can append a row to the sheet.\n\nFor marking a task as complete, I need to update the specific cell in the \"Completed\" column for that task.\n\nFor deleting completed tasks, I need to find all rows where \"Completed\" is \"Yes\" and delete those rows.\n\nI need to be careful with row indices because deleting rows changes the indices of subsequent rows.\n\nMaybe it's better to collect all the row indices to delete, sort them in reverse order, and delete them one by one.\n\nNow, about the user interface. Since it's a command-line script, I need to provide commands for adding tasks, marking them as complete, and deleting completed tasks.\n\nMaybe something like:\n\n- add \"Task description\"\n\n- complete 1 (where 1 is the task ID or row number)\n\n- delete completed\n\nI need to display the current task list somehow, so users know which tasks to mark as complete or delete.\n\nPerhaps have a \"list\" command to show all tasks with their IDs.\n\nAlso, need to handle errors gracefully, like invalid task IDs, authentication errors, etc.\n\nNow, about the credentials. Since OAuth2 is involved, I need to handle the authentication flow.\n\nIn Python, I can use the oauth2client library to handle the authentication and store the credentials in a file.\n\nBut I need to make sure that the credentials are stored securely and are specific to each user.\n\nWait, but in OAuth2, the credentials are per-user, so each user will have their own credentials file.\n\nI can store the credentials in a file named something like \"credentials.json\" in the user's home directory.\n\nBut if multiple users use the same machine, their credentials should be stored separately.\n\nMaybe use a directory like \"~/.config/mytasklist/\" and store credentials per user.\n\nBut for simplicity, if it's for personal use, maybe just have one credentials file.\n\nWait, but the prompt says \"users\" should be able to do things, so perhaps it's for multiple users.\n\nI need to think about how to handle multiple users' credentials.\n\nOne way is to have a credentials file named after the user's email, but I need to get the user's email during authentication.\n\nAlternatively, use environment variables or command-line arguments to specify the user.\n\nThis might be getting too complicated for a simple task list manager.\n\nMaybe I should assume that the script is used by a single user, and store a single credentials file.\n\nIf others want to use it, they can run their own instance of the script with their own credentials.\n\nThat seems more manageable.\n\nSo, I'll proceed with that assumption.\n\nNow, let's outline the steps:\n\n1. Set up Google Cloud Console project, enable Sheets API, set up OAuth2 credentials.\n\n2. Install required Python libraries.\n\n3. Authenticate using OAuth2 and store credentials in a file.\n\n4. Define the spreadsheet ID and range to work with.\n\n5. Implement functions to add tasks, mark tasks as complete, and delete completed tasks.\n\n6. Provide a command-line interface for users to interact with the task list.\n\nLet me start by setting up the Google Cloud Console project.\n\nI'll go to console.cloud.google.com, create a new project, enable the Sheets API for that project, and set up OAuth consent screen.\n\nFor OAuth consent screen, I need to specify the application name, user support email, and maybe some privacy policy information.\n\nSince this is a personal project, I can fill in my own email and keep it simple.\n\nNext, create credentials for OAuth2. I need to create credentials for desktop app type, since this is a command-line script.\n\nSpecify the scopes required, which in this case is https://www.googleapis.com/auth/spreadsheets.\n\nDownload the credentials file and save it locally.\n\nNow, in Python, I need to install the required libraries.\n\nI can use pip to install them:\n\npip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n\nMake sure to install these in a virtual environment to avoid conflicts.\n\nNow, I need to set up the authentication in Python.\n\nI can use the oauth2client library to handle the authentication flow and store the credentials.\n\nHere's a basic outline of the code for authentication:\n\nfrom google_auth_oauthlib.flow import InstalledAppFlow\n\nfrom google.auth.transport.requests import Request\n\nimport pickle\n\nimport os.path\n\n# If modifying these SCOPES, delete the file token.pickle.\n\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n\ndef authenticate():\n\ncreds = None\n\n# The file token.pickle stores the user's access and refresh tokens, and is\n\n# created automatically when the authorization flow completes for the first time.\n\nif os.path.exists('token.pickle'):\n\nwith open('token.pickle', 'rb') as token:\n\ncreds = pickle.load(token)\n\n# If there are no (valid) credentials available, let the user log in.\n\nif not creds or not creds.valid:\n\nif creds and creds.expired and creds.refresh_token:\n\ncreds.refresh(Request())\n\nelse:\n\nflow = InstalledAppFlow.from_client_secrets_file(\n\n'credentials.json', SCOPES)\n\ncreds = flow.run_local_server(port=0)\n\n# Save the credentials for the next run\n\nwith open('token.pickle', 'wb') as token:\n\npickle.dump(creds, token)\n\nreturn creds\n\nThis code checks if there are stored credentials in token.pickle. If not, it initiates the OAuth2 flow and stores the credentials for future use.\n\nNow, I need to authenticate and get the service object for Sheets API.\n\nfrom googleapiclient.discovery import build\n\ncreds = authenticate()\n\nservice = build('sheets', 'v4', credentials=creds)\n\nNow, I need to define the spreadsheet ID and the range to work with.\n\nI need to create a Google Sheet and note down its spreadsheet ID.\n\nThe spreadsheet ID is the long string in the Sheet's URL.\n\nFor example, if the URL is https://docs.google.com/spreadsheets/d/1234567890abcdef/edit#gid=0, then the spreadsheet ID is 1234567890abcdef.\n\nI need to hardcode this ID in the script or ask the user to input it.\n\nAssuming it's for personal use, I can hardcode it.\n\nLet's say the spreadsheet ID is '1234567890abcdef'.\n\nNow, define the range, say \"Sheet1!A:B\".\n\nBut I need to make sure that the sheet exists and has the correct structure.\n\nMaybe I should create a separate sheet for the task list, say \"TaskList\".\n\nSo, range would be \"TaskList!A:B\".\n\nNow, I need to implement functions to add tasks, mark tasks as complete, and delete completed tasks.\n\nFirst, adding a task.\n\nTo add a task, I need to append a new row to the sheet with the task description and \"Completed\" set to \"No\".\n\nI can use the spreadsheets().values().append() method.\n\nHere's a sample function:\n\ndef add_task(service, spreadsheet_id, range_name, task_description):\n\nvalue_input_option = 'RAW'\n\nvalues = [\n\n[task_description, 'No']\n\n]\n\nbody = {\n\n'values': values\n\n}\n\nresult = service.spreadsheets().values().append(\n\nspreadsheetId=spreadsheet_id, range=range_name,\n\nvalueInputOption=value_input_option, body=body).execute()\n\nprint('{0} cells appended.'.format(result.get('updates').get('updatedCells')))\n\nNow, marking a task as complete.\n\nFor this, I need to know which task to mark as complete. I can ask the user to provide the row number or some unique identifier.\n\nAssuming that the first column is the task description and the second is \"Completed\", and rows are numbered starting from 1.\n\nSo, if the user wants to mark task 3 as complete, I need to update cell B3 to \"Yes\".\n\nI can implement a function like this:\n\ndef mark_task_complete(service, spreadsheet_id, range_name, task_row):\n\nsheet = service.spreadsheets()\n\nresult = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n\nvalues = result.get('values', [])\n\nif task_row > len(values):\n\nprint(\"Task row out of range.\")\n\nreturn\n\ncell_address = f\"B{task_row}\"\n\nbody = {\n\n'values': [['Yes']]\n\n}\n\nresult = sheet.values().update(\n\nspreadsheetId=spreadsheet_id, range=cell_address,\n\nvalueInputOption='RAW', body=body).execute()\n\nprint(f\"Marked task {task_row} as complete.\")\n\nFinally, deleting completed tasks.\n\nI need to find all rows where column B is \"Yes\" and delete those rows.\n\nTo delete rows, I need to use the batchUpdate method with a deleteDimension request.\n\nFirst, I need to get all the rows where \"Completed\" is \"Yes\", collect their row numbers, sort them in reverse order, and then delete them one by one.\n\nHere's a function to do that:\n\ndef delete_completed_tasks(service, spreadsheet_id, range_name):\n\nsheet = service.spreadsheets()\n\nresult = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n\nvalues = result.get('values', [])\n\ncompleted_rows = []\n\nfor i, row in enumerate(values):\n\nif len(row) > 1 and row[1].lower() == 'yes':\n\ncompleted_rows.append(i+1)  # rows are 1-indexed\n\nif not completed_rows:\n\nprint(\"No completed tasks to delete.\")\n\nreturn\n\n# Sort rows to delete in reverse order to avoid index shifting\n\ncompleted_rows.sort(reverse=True)\n\nbatch_requests = []\n\nfor row in completed_rows:\n\nrequest = {\n\n'deleteDimension': {\n\n'dimension': 'ROWS',\n\n'range': {\n\n'sheetId': 0,  # assuming Sheet1\n\n'dimension': 'ROWS',\n\n'startIndex': row-1,\n\n'endIndex': row\n\n}\n\n}\n\n}\n\nbatch_requests.append(request)\n\nbody = {\n\n'requests': batch_requests\n\n}\n\nresponse = sheet.batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()\n\nprint(f\"Deleted {len(completed_rows)} completed tasks.\")\n\nWait, but in the batchUpdate request, I need to specify the sheet ID, not just the sheet name.\n\nHow do I get the sheet ID?\n\nI can fetch the sheet properties to get the sheet ID.\n\nHere's how:\n\ndef get_sheet_id(service, spreadsheet_id, sheet_name):\n\nsheets = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()['sheets']\n\nfor sheet in sheets:\n\nif sheet['properties']['title'] == sheet_name:\n\nreturn sheet['properties']['sheetId']\n\nreturn None\n\nNow, I can modify the delete_completed_tasks function to use the correct sheet ID.\n\nAlso, I need to handle the case where there are no sheets or the sheet doesn't exist.\n\nAlright, now, for the command-line interface, I need to accept commands from the user.\n\nI can use a loop that keeps asking for input until the user decides to exit.\n\nPossible commands:\n\n- add \"task description\"\n\n- complete task_number\n\n- delete completed\n\n- list\n\nFor the \"list\" command, I need to fetch and display the current task list.\n\nI can implement a function like this:\n\ndef list_tasks(service, spreadsheet_id, range_name):\n\nsheet = service.spreadsheets()\n\nresult = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n\nvalues = result.get('values', [])\n\nif not values:\n\nprint(\"No tasks found.\")\n\nelse:\n\nfor i, row in enumerate(values, start=1):\n\ntask_desc = row[0] if row else 'N/A'\n\ncompleted = row[1] if len(row) > 1 else 'No'\n\nprint(f\"{i}. {task_desc} [{'Completed' if completed.lower() == 'yes' else 'Incomplete'}]\")\n\nNow, in the main loop, I can accept user input and call the appropriate functions.\n\nSomething like:\n\nwhile True:\n\ncommand = input(\"Enter command (add/list/complete/delete/exist): \")\n\nif command.startswith('add \"'):\n\ntask_desc = command[5:-1]\n\nadd_task(service, spreadsheet_id, range_name, task_desc)\n\nelif command.startswith('complete '):\n\ntry:\n\ntask_row = int(command.split()[1])\n\nmark_task_complete(service, spreadsheet_id, range_name, task_row)\n\nexcept (ValueError, IndexError):\n\nprint(\"Invalid task row.\")\n\nelif command == 'delete completed':\n\ndelete_completed_tasks(service, spreadsheet_id, range_name)\n\nelif command == 'list':\n\nlist_tasks(service, spreadsheet_id, range_name)\n\nelif command == 'exit':\n\nbreak\n\nelse:\n\nprint(\"Unknown command.\")\n\nI need to make sure to handle exceptions and errors gracefully.\n\nAlso, need to make sure that the sheet exists and has the correct structure before performing operations.\n\nMaybe add some initial setup to create the sheet if it doesn't exist.\n\nBut for simplicity, I'll assume that the sheet is already set up correctly.\n\nAlright, now, to test this, I need to run the script, go through the authentication flow, and then use the commands to add, complete, and delete tasks.\n\nI need to make sure that the operations are reflected correctly in the Google Sheet.\n\nAlso, need to handle cases where the sheet is empty or when trying to mark a non-existent task as complete.\n\nNow, about storing credentials securely. Storing them in token.pickle is okay for personal use, but I need to make sure that this file is not committed to version control or shared with others.\n\nI can add token.pickle to .gitignore if I'm using Git.\n\nAlso, make sure that the credentials.json file is kept secure and not exposed.\n\nNow, writing the complete script.\n\nI'll organize the code into functions as outlined earlier.\n\nI need to make sure to handle exceptions and provide useful error messages to the user.\n\nAlso, maybe add some comments to the code for clarity.\n\nFinally, test the script thoroughly to ensure that all operations work as expected.\n\nI think that's the plan. Now, I'll proceed to implement the script accordingly.\n\n## Final Solution\nTo create a Python script that manages a simple task list using the Google Sheets API, you need to follow these steps:\n\n1. **Set Up Google Cloud Console Project:**\n    - Enable the Google Sheets API.\n    - Set up OAuth2 credentials for desktop app type.\n    - Download the credentials file (`credentials.json`).\n\n2. **Install Required Libraries:**\n    ```bash\n    pip install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib\n    ```\n\n3. **Create the Python Script:**\n\n```python\nimport os.path\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom google.auth.transport.requests import Request\nfrom googleapiclient.discovery import build\nimport pickle\n\n# If modifying these SCOPES, delete the file token.pickle.\nSCOPES = ['https://www.googleapis.com/auth/spreadsheets']\n\ndef authenticate():\n    creds = None\n    # The file token.pickle stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first time.\n    if os.path.exists('token.pickle'):\n        with open('token.pickle', 'rb') as token:\n            creds = pickle.load(token)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.pickle', 'wb') as token:\n            pickle.dump(creds, token)\n    return creds\n\ndef add_task(service, spreadsheet_id, range_name, task_description):\n    value_input_option = 'RAW'\n    values = [\n        [task_description, 'No']\n    ]\n    body = {\n        'values': values\n    }\n    result = service.spreadsheets().values().append(\n        spreadsheetId=spreadsheet_id, range=range_name,\n        valueInputOption=value_input_option, body=body).execute()\n    print(f'{result.get(\"updates\").get(\"updatedCells\")} cells appended.')\n\ndef mark_task_complete(service, spreadsheet_id, range_name, task_row):\n    sheet = service.spreadsheets()\n    result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n    values = result.get('values', [])\n    if task_row > len(values):\n        print(\"Task row out of range.\")\n        return\n    cell_address = f\"B{task_row}\"\n    body = {\n        'values': [['Yes']]\n    }\n    result = sheet.values().update(\n        spreadsheetId=spreadsheet_id, range=cell_address,\n        valueInputOption='RAW', body=body).execute()\n    print(f\"Marked task {task_row} as complete.\")\n\ndef delete_completed_tasks(service, spreadsheet_id, range_name):\n    sheet = service.spreadsheets()\n    result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n    values = result.get('values', [])\n    completed_rows = []\n    for i, row in enumerate(values):\n        if len(row) > 1 and row[1].lower() == 'yes':\n            completed_rows.append(i + 1)  # rows are 1-indexed\n    if not completed_rows:\n        print(\"No completed tasks to delete.\")\n        return\n    # Sort rows to delete in reverse order to avoid index shifting\n    completed_rows.sort(reverse=True)\n    batch_requests = []\n    sheet_id = get_sheet_id(service, spreadsheet_id, 'TaskList')\n    for row in completed_rows:\n        request = {\n            'deleteDimension': {\n                'range': {\n                    'sheetId': sheet_id,\n                    'dimension': 'ROWS',\n                    'startIndex': row - 1,\n                    'endIndex': row\n                }\n            }\n        }\n        batch_requests.append(request)\n    body = {\n        'requests': batch_requests\n    }\n    response = sheet.batchUpdate(spreadsheetId=spreadsheet_id, body=body).execute()\n    print(f\"Deleted {len(completed_rows)} completed tasks.\")\n\ndef get_sheet_id(service, spreadsheet_id, sheet_name):\n    sheets = service.spreadsheets().get(spreadsheetId=spreadsheet_id).execute()['sheets']\n    for sheet in sheets:\n        if sheet['properties']['title'] == sheet_name:\n            return sheet['properties']['sheetId']\n    return None\n\ndef list_tasks(service, spreadsheet_id, range_name):\n    sheet = service.spreadsheets()\n    result = sheet.values().get(spreadsheetId=spreadsheet_id, range=range_name).execute()\n    values = result.get('values', [])\n    if not values:\n        print(\"No tasks found.\")\n    else:\n        for i, row in enumerate(values, start=1):\n            task_desc = row[0] if row else 'N/A'\n            completed = row[1] if len(row) > 1 else 'No'\n            print(f\"{i}. {task_desc} [{'Completed' if completed.lower() == 'yes' else 'Incomplete'}]\")\n\ndef main():\n    creds = authenticate()\n    service = build('sheets', 'v4', credentials=creds)\n    \n    spreadsheet_id = 'YOUR_SPREADSHEET_ID'  # Replace with your spreadsheet ID\n    range_name = 'TaskList!A:B'\n    \n    while True:\n        command = input(\"Enter command (add/list/complete/delete/exit): \")\n        if command.startswith('add \"'):\n            task_desc = command[5:-1]\n            add_task(service, spreadsheet_id, range_name, task_desc)\n        elif command.startswith('complete '):\n            try:\n                task_row = int(command.split()[1])\n                mark_task_complete(service, spreadsheet_id, range_name, task_row)\n            except (ValueError, IndexError):\n                print(\"Invalid task row.\")\n        elif command == 'delete completed':\n            delete_completed_tasks(service, spreadsheet_id, range_name)\n        elif command == 'list':\n            list_tasks(service, spreadsheet_id, range_name)\n        elif command == 'exit':\n            break\n        else:\n            print(\"Unknown command.\")\n\nif __name__ == '__main__':\n    main()\n```\n\n4. **Run the Script:**\n    - Ensure you have replaced `'YOUR_SPREADSHEET_ID'` with your actual Google Sheet ID.\n    - Execute the script, and follow the command-line prompts to add, complete, and delete tasks.\n\nThis script provides a simple command-line interface to manage tasks in a Google Sheet, handling authentication securely with OAuth2 and performing CRUD operations as specified."
    }
]