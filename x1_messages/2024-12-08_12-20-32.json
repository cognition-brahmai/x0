[
    {
        "role": "user",
        "content": "Implement a C++ class for a basic stack data structure with push, pop, and peek methods."
    },
    {
        "role": "assistant",
        "content": "Here's a simple implementation of a stack in C++ using a template class, which allows the stack to hold any data type. This implementation includes the push, pop, and peek methods, along with a method to check if the stack is empty.\n\n```cpp\n#include <iostream>\n#include <vector>\n\ntemplate<typename T>\nclass Stack {\nprivate:\n    std::vector<T> elements;\n\npublic:\n    // Check if the stack is empty\n    bool empty() const {\n        return elements.empty();\n    }\n\n    // Add an element to the top of the stack\n    void push(const T& value) {\n        elements.push_back(value);\n    }\n\n    // Remove the top element from the stack\n    void pop() {\n        if (!empty()) {\n            elements.pop_back();\n        } else {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n        }\n    }\n\n    // Get the top element of the stack without removing it\n    T peek() const {\n        if (!empty()) {\n            return elements.back();\n        } else {\n            throw std::out_of_range(\"Stack is empty. Cannot peek.\");\n        }\n    }\n};\n\nint main() {\n    Stack<int> stack;\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n\n    std::cout << \"Top element: \" << stack.peek() << std::endl;  // Output: 3\n\n    stack.pop();\n    std::cout << \"Top element after pop: \" << stack.peek() << std::endl;  // Output: 2\n\n    std::cout << \"Is stack empty? \" << (stack.empty() ? \"Yes\" : \"No\") << std::endl;  // Output: No\n\n    stack.pop();\n    stack.pop();\n    std::cout << \"Is stack empty after popping two elements? \" << (stack.empty() ? \"Yes\" : \"No\") << std::endl;  // Output: Yes\n\n    stack.pop();  // Output: Stack is empty. Cannot pop.\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Template Class**: The `Stack` class is a template, meaning it can handle elements of any data type.\n2. **Vector Usage**: Internally, it uses a `std::vector` to store the elements, which provides dynamic resizing.\n3. **Methods**:\n   - `empty()`: Checks if the stack is empty.\n   - `push(const T& value)`: Adds an element to the top of the stack.\n   - `pop()`: Removes the top element from the stack. If the stack is empty, it prints a message.\n   - `peek() const`: Returns the top element without removing it. If the stack is empty, it throws an exception.\n4. **Main Function**: Demonstrates pushing and popping elements, checking if the stack is empty, and peeking at the top element.\n\nThis implementation is straightforward and leverages the capabilities of the Standard Template Library (STL) in C++."
    }
]