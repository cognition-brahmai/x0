[
    {
        "role": "user",
        "content": "Create a Node.js Express server with endpoints for creating, reading, updating, and deleting notes. Each note should have a title, content, and timestamp. Store the notes in-memory using JavaScript objects. Add validation checks to ensure that the title and content are not empty and that the title is unique."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you create a Node.js Express server with CRUD (Create, Read, Update, Delete) endpoints for managing notes. We'll store the notes in memory using JavaScript objects and add validation to ensure that titles and content are not empty and that titles are unique.\n\n### Step 1: Set Up the Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with `npm init`.\n\n```bash\nmkdir note-app\ncd note-app\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express body-parser\n```\n\n### Step 2: Create the Server\n\nCreate a file named `server.js` and set up the basic Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 3: Define the Notes Storage\n\nWe'll store notes in memory using an array of objects. Each note will have a `title`, `content`, and `timestamp`.\n\n```javascript\nlet notes = [];\nlet idCounter = 1;\n```\n\n### Step 4: Create the CRUD Endpoints\n\n#### Create a Note\n\nCreate an endpoint to create a new note. Validate that the title and content are not empty and that the title is unique.\n\n```javascript\napp.post('/notes', (req, res) => {\n  const { title, content } = req.body;\n\n  // Validation checks\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required.' });\n  }\n\n  const existingNote = notes.find(note => note.title === title);\n  if (existingNote) {\n    return res.status(400).json({ error: 'Title must be unique.' });\n  }\n\n  const newNote = {\n    id: idCounter++,\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n\n  notes.push(newNote);\n  res.status(201).json(newNote);\n});\n```\n\n#### Read Notes\n\nCreate an endpoint to retrieve all notes.\n\n```javascript\napp.get('/notes', (req, res) => {\n  res.json(notes);\n});\n```\n\n#### Read a Single Note\n\nCreate an endpoint to retrieve a single note by its ID.\n\n```javascript\napp.get('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const note = notes.find(n => n.id === noteId);\n\n  if (!note) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  res.json(note);\n});\n```\n\n#### Update a Note\n\nCreate an endpoint to update an existing note. Validate that the title and content are not empty and that the title is unique if it's being changed.\n\n```javascript\napp.put('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const { title, content } = req.body;\n\n  const noteIndex = notes.findIndex(n => n.id === noteId);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  // Validation checks\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required.' });\n  }\n\n  const existingNoteWithTitle = notes.find(n => n.title === title && n.id !== noteId);\n  if (existingNoteWithTitle) {\n    return res.status(400).json({ error: 'Title must be unique.' });\n  }\n\n  const updatedNote = {\n    ...notes[noteIndex],\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n\n  notes[noteIndex] = updatedNote;\n  res.json(updatedNote);\n});\n```\n\n#### Delete a Note\n\nCreate an endpoint to delete a note by its ID.\n\n```javascript\napp.delete('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const noteIndex = notes.findIndex(n => n.id === noteId);\n\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  const deletedNote = notes.splice(noteIndex, 1)[0];\n  res.json(deletedNote);\n});\n```\n\n### Step 5: Test the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n- **Create a Note**: `POST /notes` with JSON body `{ \"title\": \"My Note\", \"content\": \"This is my note.\" }`\n- **Get All Notes**: `GET /notes`\n- **Get a Single Note**: `GET /notes/:id`\n- **Update a Note**: `PUT /notes/:id` with JSON body `{ \"title\": \"Updated Note\", \"content\": \"This is the updated content.\" }`\n- **Delete a Note**: `DELETE /notes/:id`\n\n### Step 6: Run the Server\n\nStart the server by running:\n\n```bash\nnode server.js\n```\n\nNow, your Node.js Express server with CRUD endpoints for notes is up and running!\n\n### Final Code\n\nHere's the complete code for `server.js`:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\nlet notes = [];\nlet idCounter = 1;\n\napp.post('/notes', (req, res) => {\n  const { title, content } = req.body;\n\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required.' });\n  }\n\n  const existingNote = notes.find(note => note.title === title);\n  if (existingNote) {\n    return res.status(400).json({ error: 'Title must be unique.' });\n  }\n\n  const newNote = {\n    id: idCounter++,\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n\n  notes.push(newNote);\n  res.status(201).json(newNote);\n});\n\napp.get('/notes', (req, res) => {\n  res.json(notes);\n});\n\napp.get('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const note = notes.find(n => n.id === noteId);\n\n  if (!note) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  res.json(note);\n});\n\napp.put('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const { title, content } = req.body;\n\n  const noteIndex = notes.findIndex(n => n.id === noteId);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required.' });\n  }\n\n  const existingNoteWithTitle = notes.find(n => n.title === title && n.id !== noteId);\n  if (existingNoteWithTitle) {\n    return res.status(400).json({ error: 'Title must be unique.' });\n  }\n\n  const updatedNote = {\n    ...notes[noteIndex],\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n\n  notes[noteIndex] = updatedNote;\n  res.json(updatedNote);\n});\n\napp.delete('/notes/:id', (req, res) => {\n  const noteId = parseInt(req.params.id);\n  const noteIndex = notes.findIndex(n => n.id === noteId);\n\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found.' });\n  }\n\n  const deletedNote = notes.splice(noteIndex, 1)[0];\n  res.json(deletedNote);\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\nThis should give you a fully functional Note-taking application with a RESTful API using Node.js and Express."
    }
]