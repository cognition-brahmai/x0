[
    {
        "role": "user",
        "content": "Create a Node.js Express server with two endpoints: one for uploading images (JPEG or PNG) and another for retrieving the uploaded images by their unique ID. Store the images in a local directory using their MD5 hash as the file name. Limit the maximum file size of uploads to 500 KB.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you set up a Node.js Express server with the specified functionalities. We'll create two endpoints: one for uploading images and another for retrieving them by their unique ID. We'll store the images in a local directory, using their MD5 hash as the file name, and limit the upload size to 500 KB.\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir image-upload-server\ncd image-upload-server\nnpm init -y\n```\n\nNext, install the required packages: Express for the server, multer for handling file uploads, md5-file to generate MD5 hashes for files, and fs for file system operations.\n\n```bash\nnpm install express multer md5-file fs\n```\n\nNow, let's set up the server. Create a file named `server.js` in your project directory.\n\nIn `server.js`, we'll set up the Express app, configure multer for file uploads, and define the endpoints for uploading and retrieving images.\n\nHere's the step-by-step code:\n\n1. **Import required modules:**\n\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst md5File = require('md5-file');\nconst fs = require('fs');\nconst path = require('path');\n```\n\n2. **Set up Express app:**\n\n```javascript\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n```\n\n3. **Configure multer for file uploads:**\n\nWe'll set the storage destination and file name using the MD5 hash of the file. We'll also set the file size limit to 500 KB.\n\n```javascript\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    md5File(file.path).then(hash => {\n      const extension = path.extname(file.originalname).toLowerCase();\n      cb(null, hash + extension);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: { fileSize: 500 * 1024 } // 500 KB\n});\n```\n\n4. **Create the uploads directory if it doesn't exist:**\n\n```javascript\nconst uploadDir = 'uploads';\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n```\n\n5. **Define the endpoints:**\n\n- **POST /upload:** For uploading images.\n\n- **GET /images/:id:** For retrieving images by their unique ID (MD5 hash).\n\n```javascript\n// Upload endpoint\napp.post('/upload', upload.single('image'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.status(200).json({ id: path.basename(req.file.filename, path.extname(req.file.filename)) });\n});\n\n// Retrieve image endpoint\napp.get('/images/:id', (req, res) => {\n  const imageId = req.params.id;\n  const imagePaths = fs.readdirSync(uploadDir).filter(file => path.basename(file, path.extname(file)) === imageId);\n  \n  if (imagePaths.length === 0) {\n    return res.status(404).send('Image not found.');\n  }\n  \n  const imagePath = path.join(uploadDir, imagePaths[0]);\n  res.sendFile(imagePath, { root: __dirname });\n});\n```\n\n6. **Start the server:**\n\n```javascript\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\nPutting it all together, your `server.js` should look like this:\n\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst md5File = require('md5-file');\nconst fs = require('fs');\nconst path = require('path');\n\nconst app = express();\nconst PORT = process.env.PORT || 3000;\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/');\n  },\n  filename: function (req, file, cb) {\n    md5File(file.path).then(hash => {\n      const extension = path.extname(file.originalname).toLowerCase();\n      cb(null, hash + extension);\n    }).catch(err => {\n      cb(err);\n    });\n  }\n});\n\nconst upload = multer({\n  storage: storage,\n  limits: { fileSize: 500 * 1024 } // 500 KB\n});\n\nconst uploadDir = 'uploads';\nif (!fs.existsSync(uploadDir)) {\n  fs.mkdirSync(uploadDir);\n}\n\napp.post('/upload', upload.single('image'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.status(200).json({ id: path.basename(req.file.filename, path.extname(req.file.filename)) });\n});\n\napp.get('/images/:id', (req, res) => {\n  const imageId = req.params.id;\n  const imagePaths = fs.readdirSync(uploadDir).filter(file => path.basename(file, path.extname(file)) === imageId);\n  \n  if (imagePaths.length === 0) {\n    return res.status(404).send('Image not found.');\n  }\n  \n  const imagePath = path.join(uploadDir, imagePaths[0]);\n  res.sendFile(imagePath, { root: __dirname });\n});\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Explanation:\n\n1. **Multer Configuration:**\n   - We use `multer` to handle file uploads, specifying the storage destination and filename using the MD5 hash of the file.\n   - The `limits` option ensures that only files up to 500 KB are accepted.\n\n2. **Upload Endpoint:**\n   - Accepts POST requests with a single file under the field name 'image'.\n   - Responds with the unique ID (MD5 hash) of the uploaded image.\n\n3. **Retrieve Image Endpoint:**\n   - Accepts GET requests with the unique ID (MD5 hash) in the URL parameter.\n   - Sends the corresponding image file if found; otherwise, returns a 404 error.\n\n4. **Directory Management:**\n   - Ensures the 'uploads' directory exists before starting the server.\n\nThis setup provides a basic image upload and retrieval server with the specified requirements."
    }
]