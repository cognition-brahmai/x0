[
    {
        "role": "user",
        "content": "Implement a Java application that connects to a PostgreSQL database and performs queries based on user input. The application should display a menu allowing users to choose between different query options, such as listing all records in a table or searching for specific records based on certain criteria.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To implement a Java application that connects to a PostgreSQL database and performs queries based on user input, you'll need to follow several steps. This includes setting up your PostgreSQL database, creating a Java project, adding necessary dependencies, establishing a database connection, and implementing the menu system along with the query functionalities.\n\n### Prerequisites\n\n1. **Java Development Kit (JDK)** installed on your machine.\n2. **PostgreSQL** installed and running.\n3. **IDE** (like IntelliJ IDEA, Eclipse, etc.) for writing Java code.\n4. ** JDBC Driver** for PostgreSQL.\n\n### Step-by-Step Guide\n\n#### 1. Set Up Your PostgreSQL Database\n\n- Create a database and a table. For example, let's create a `books` table:\n\n```sql\nCREATE TABLE books (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255),\n    author VARCHAR(255),\n    published_year INT\n);\n```\n\n- Insert some sample data into the `books` table.\n\n#### 2. Create a New Java Project\n\n- Open your IDE and create a new Java project.\n- Add the PostgreSQL JDBC driver to your project dependencies. If you're using Maven, add the following dependency to your `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>org.postgresql</groupId>\n    <artifactId>postgresql</artifactId>\n    <version>42.2.23</version>\n</dependency>\n```\n\n#### 3. Establish a Database Connection\n\nCreate a class to handle the database connection:\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class DatabaseConnection {\n    private static final String URL = \"jdbc:postgresql://localhost:5432/your_database\";\n    private static final String USER = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n    private static Connection connection;\n\n    public static Connection getConnection() throws SQLException {\n        if (connection == null || connection.isClosed()) {\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\n        }\n        return connection;\n    }\n}\n```\n\n#### 4. Implement Query Functionality\n\nCreate methods to perform different queries based on user input. For example:\n\n- List all records in the `books` table.\n- Search for books by author.\n- Search for books by publication year.\n\n```java\nimport java.sql.Connection;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\n\npublic class BookQueries {\n\n    public void listAllBooks() {\n        String query = \"SELECT id, title, author, published_year FROM books\";\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(query);\n             ResultSet rs = stmt.executeQuery()) {\n\n            while (rs.next()) {\n                int id = rs.getInt(\"id\");\n                String title = rs.getString(\"title\");\n                String author = rs.getString(\"author\");\n                int year = rs.getInt(\"published_year\");\n                System.out.printf(\"%d, %s, %s, %d%n\", id, title, author, year);\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void searchBooksByAuthor(String author) {\n        String query = \"SELECT id, title, author, published_year FROM books WHERE author = ?\";\n        try (Connection conn = DatabaseConnection.getConnection();\n             PreparedStatement stmt = conn.prepareStatement(query)) {\n\n            stmt.setString(1, author);\n            try (ResultSet rs = stmt.executeQuery()) {\n                while (rs.next()) {\n                    int id = rs.getInt(\"id\");\n                    String title = rs.getString(\"title\");\n                    String authorName = rs.getString(\"author\");\n                    int year = rs.getInt(\"published_year\");\n                    System.out.printf(\"%d, %s, %s, %d%n\", id, title, authorName, year);\n                }\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    // Add more methods for other query options\n}\n```\n\n#### 5. Create a Menu System\n\nImplement a simple command-line menu to allow users to select query options:\n\n```java\nimport java.util.Scanner;\n\npublic class MainMenu {\n\n    private BookQueries bookQueries = new BookQueries();\n    private Scanner scanner = new Scanner(System.in);\n\n    public void displayMenu() {\n        boolean exit = false;\n        while (!exit) {\n            System.out.println(\"\\n--- Menu ---\");\n            System.out.println(\"1. List all books\");\n            System.out.println(\"2. Search books by author\");\n            System.out.println(\"3. Exit\");\n            System.out.print(\"Enter your choice: \");\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n                case 1:\n                    bookQueries.listAllBooks();\n                    break;\n                case 2:\n                    System.out.print(\"Enter author name: \");\n                    String author = scanner.nextLine();\n                    bookQueries.searchBooksByAuthor(author);\n                    break;\n                case 3:\n                    exit = true;\n                    break;\n                default:\n                    System.out.println(\"Invalid choice. Please try again.\");\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        MainMenu menu = new MainMenu();\n        menu.displayMenu();\n    }\n}\n```\n\n### Explanation\n\n1. **Database Setup**: Create a PostgreSQL database and table.\n2. **Java Project**: Set up a Java project with PostgreSQL JDBC dependency.\n3. **Database Connection**: Manage database connections using a utility class.\n4. **Query Methods**: Implement methods to perform different SQL queries.\n5. **Menu System**: Create a command-line menu for user interaction.\n\nThis setup provides a basic structure for a Java application interacting with a PostgreSQL database based on user input. You can expand this by adding more query options and improving error handling and user interface."
    }
]