[
    {
        "role": "user",
        "content": "Write a C# program that simulates a simple bank account with methods for depositing, withdrawing, and checking balance.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a simple bank account simulation in C#, we'll need to define a class that represents the bank account. This class will have methods for depositing money, withdrawing money, and checking the current balance.\n\nHere's a step-by-step guide to creating this program:\n\n1. **Define the BankAccount Class:**\n   - This class will have a private field to store the balance.\n   - It will have public methods for depositing, withdrawing, and checking the balance.\n\n2. **Implement the Methods:**\n   - `Deposit(double amount)`: Adds the specified amount to the balance.\n   - `Withdraw(double amount)`: Subtracts the specified amount from the balance if sufficient funds are available.\n   - `CheckBalance()`: Returns the current balance.\n\n3. **Create a Main Method to Test the BankAccount Class:**\n   - Instantiate a BankAccount object.\n   - Perform deposit and withdrawal operations.\n   - Display the balance after each operation.\n\nHere's the complete code:\n\n```csharp\nusing System;\n\npublic class BankAccount\n{\n    // Private field to store the balance\n    private double balance;\n\n    // Constructor to initialize the balance\n    public BankAccount(double initialBalance)\n    {\n        balance = initialBalance;\n    }\n\n    // Method to deposit money into the account\n    public void Deposit(double amount)\n    {\n        if (amount > 0)\n        {\n            balance += amount;\n            Console.WriteLine($\"Deposited: ${amount}\");\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid deposit amount.\");\n        }\n    }\n\n    // Method to withdraw money from the account\n    public void Withdraw(double amount)\n    {\n        if (amount > 0)\n        {\n            if (balance >= amount)\n            {\n                balance -= amount;\n                Console.WriteLine($\"Withdrew: ${amount}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Insufficient funds.\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid withdrawal amount.\");\n        }\n    }\n\n    // Method to check the current balance\n    public double CheckBalance()\n    {\n        return balance;\n    }\n}\n\npublic class Program\n{\n    public static void Main()\n    {\n        // Create a BankAccount object with an initial balance of $100\n        BankAccount myAccount = new BankAccount(100);\n\n        // Deposit $50\n        myAccount.Deposit(50);\n        Console.WriteLine($\"Current balance: ${myAccount.CheckBalance()}\");\n\n        // Withdraw $30\n        myAccount.Withdraw(30);\n        Console.WriteLine($\"Current balance: ${myAccount.CheckBalance()}\");\n\n        // Attempt to withdraw $150 (which is more than the balance)\n        myAccount.Withdraw(150);\n        Console.WriteLine($\"Current balance: ${myAccount.CheckBalance()}\");\n\n        // Deposit $100\n        myAccount.Deposit(100);\n        Console.WriteLine($\"Current balance: ${myAccount.CheckBalance()}\");\n    }\n}\n```\n\n### Explanation:\n\n1. **BankAccount Class:**\n   - **balance:** A private double to store the account balance.\n   - **Constructor:** Initializes the balance with an initial amount.\n   - **Deposit(amount):** Adds the specified amount to the balance if the amount is positive.\n   - **Withdraw(amount):** Subtracts the specified amount from the balance if sufficient funds are available and the amount is positive.\n   - **CheckBalance():** Returns the current balance.\n\n2. **Program Class:**\n   - **Main Method:** Creates a BankAccount object with an initial balance of $100. Performs deposit and withdrawal operations and displays the balance after each operation.\n\nThis simple simulation demonstrates basic bank account functionalities using object-oriented programming principles in C#."
    }
]