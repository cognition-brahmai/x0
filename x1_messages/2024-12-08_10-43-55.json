[
    {
        "role": "user",
        "content": "Create a Python function that checks whether a passed string is a pangram or not. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help with that! A pangram is a sentence that contains every single letter of the alphabet at least once. For example, \"The quick brown fox jumps over the lazy dog\" is a pangram because it uses the letters A through Z at least once.\n\nTo create a Python function that checks if a passed string is a pangram, we need to follow these steps:\n\n1. **Normalize the string**: Convert the entire string to lowercase to ensure that the case doesn't affect our checks.\n\n2. **Remove non-alphabetic characters**: Since pangrams are about containing all letters of the alphabet, we can ignore any non-alphabetic characters like spaces, punctuation, etc.\n\n3. **Check for all letters**: Verify that every letter of the alphabet is present in the string.\n\nHere's how you can implement this:\n\n```python\ndef is_pangram(sentence):\n    # Normalize the sentence to lowercase\n    sentence = sentence.lower()\n    \n    # Define the set of all alphabets\n    alphabets = set('abcdefghijklmnopqrstuvwxyz')\n    \n    # Remove non-alphabetic characters and create a set of the remaining characters\n    sentence_chars = set(char for char in sentence if char.isalpha())\n    \n    # Check if all alphabets are present in the sentence\n    return alphabets == sentence_chars\n\n# Example usage:\ntest_sentence = \"The quick brown fox jumps over the lazy dog\"\nprint(is_pangram(test_sentence))  # Output: True\n```\n\n### Explanation:\n\n1. **Normalization**: By converting the sentence to lowercase, we ensure that the function is case-insensitive.\n\n2. **Alphabet Set**: We create a set of all lowercase alphabets for comparison.\n\n3. **Filtering Alphabet Characters**: We use a set comprehension to collect only the alphabetic characters from the sentence.\n\n4. **Comparison**: Finally, we check if the set of characters in the sentence matches the set of all alphabets. If they are equal, the sentence is a pangram.\n\nThis function should work efficiently for most cases, as set operations in Python are generally fast."
    }
]