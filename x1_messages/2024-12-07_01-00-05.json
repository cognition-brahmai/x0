[
    {
        "role": "user",
        "content": "Utilizing C#, build a console application that accepts user input to perform CRUD operations on a SQLite database. The application should interact with a table named 'Employees' having fields: 'Id', 'Name', 'Position', and 'Salary'. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through building a simple console application in C# that performs CRUD (Create, Read, Update, Delete) operations on an SQLite database. We'll create a table named 'Employees' with fields: 'Id', 'Name', 'Position', and 'Salary'.\n\n### Step 1: Set Up Your Environment\n\nFirst, make sure you have the following installed:\n\n- **Visual Studio** or **Visual Studio Code** with the C# extension.\n\n- **SQLite** and the **System.Data.SQLite** package.\n\n### Step 2: Create a New Console Project\n\n1. Open Visual Studio and create a new Console App project.\n\n2. Name your project, for example, \"EmployeeCRUD\".\n\n### Step 3: Install Required Packages\n\nYou need to install the `System.Data.SQLite` package to interact with SQLite databases in C#. You can install it via NuGet Package Manager:\n\n1. Right-click on your project in Solution Explorer and select \"Manage NuGet Packages\".\n\n2. Search for `System.Data.SQLite` and install it.\n\nAlternatively, you can use the Package Manager Console:\n\n```bash\nInstall-Package System.Data.SQLite\n```\n\n### Step 4: Create the Database and Table\n\nWe'll create a SQLite database and a table named 'Employees' with the specified fields.\n\nCreate a new class named `Database.cs`:\n\n```csharp\nusing System;\nusing System.Data;\nusing System.Data.SQLite;\n\npublic class Database\n{\n    private string _connectionString;\n\n    public Database(string dbPath)\n    {\n        _connectionString = $\"Data Source={dbPath};Version=3;\";\n    }\n\n    public void Initialize()\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            connection.Open();\n            string createTableQuery = @\"\n                CREATE TABLE IF NOT EXISTS Employees (\n                    Id INTEGER PRIMARY KEY AUTOINCREMENT,\n                    Name TEXT NOT NULL,\n                    Position TEXT NOT NULL,\n                    Salary REAL NOT NULL\n                );\n            \";\n            using (var command = new SQLiteCommand(createTableQuery, connection))\n            {\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}\n```\n\n### Step 5: Implement CRUD Operations\n\nCreate a class named `EmployeeManager.cs` to handle CRUD operations:\n\n```csharp\nusing System;\nusing System.Data;\nusing System.Data.SQLite;\n\npublic class EmployeeManager\n{\n    private string _connectionString;\n\n    public EmployeeManager(string dbPath)\n    {\n        _connectionString = $\"Data Source={dbPath};Version=3;\";\n    }\n\n    // Create\n    public void AddEmployee(string name, string position, double salary)\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            connection.Open();\n            string query = \"INSERT INTO Employees (Name, Position, Salary) VALUES (@Name, @Position, @Salary);\";\n            using (var command = new SQLiteCommand(query, connection))\n            {\n                command.Parameters.AddWithValue(\"@Name\", name);\n                command.Parameters.AddWithValue(\"@Position\", position);\n                command.Parameters.AddWithValue(\"@Salary\", salary);\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n\n    // Read\n    public void GetAllEmployees()\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            connection.Open();\n            string query = \"SELECT * FROM Employees;\";\n            using (var command = new SQLiteCommand(query, connection))\n            {\n                using (var reader = command.ExecuteReader())\n                {\n                    while (reader.Read())\n                    {\n                        Console.WriteLine($\"Id: {reader[\"Id\"]}, Name: {reader[\"Name\"]}, Position: {reader[\"Position\"]}, Salary: {reader[\"Salary\"]}\");\n                    }\n                }\n            }\n        }\n    }\n\n    // Update\n    public void UpdateEmployee(int id, string name, string position, double salary)\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            connection.Open();\n            string query = \"UPDATE Employees SET Name=@Name, Position=@Position, Salary=@Salary WHERE Id=@Id;\";\n            using (var command = new SQLiteCommand(query, connection))\n            {\n                command.Parameters.AddWithValue(\"@Id\", id);\n                command.Parameters.AddWithValue(\"@Name\", name);\n                command.Parameters.AddWithValue(\"@Position\", position);\n                command.Parameters.AddWithValue(\"@Salary\", salary);\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n\n    // Delete\n    public void DeleteEmployee(int id)\n    {\n        using (var connection = new SQLiteConnection(_connectionString))\n        {\n            connection.Open();\n            string query = \"DELETE FROM Employees WHERE Id=@Id;\";\n            using (var command = new SQLiteCommand(query, connection))\n            {\n                command.Parameters.AddWithValue(\"@Id\", id);\n                command.ExecuteNonQuery();\n            }\n        }\n    }\n}\n```\n\n### Step 6: Implement User Interaction in Program.cs\n\nNow, modify the `Program.cs` to handle user inputs and call the appropriate methods:\n\n```csharp\nusing System;\n\npublic class Program\n{\n    static void Main(string[] args)\n    {\n        string dbPath = \"employees.db\";\n        var db = new Database(dbPath);\n        db.Initialize();\n\n        var employeeManager = new EmployeeManager(dbPath);\n\n        while (true)\n        {\n            Console.WriteLine(\"\\nEmployee CRUD Operations:\");\n            Console.WriteLine(\"1. Add Employee\");\n            Console.WriteLine(\"2. View All Employees\");\n            Console.WriteLine(\"3. Update Employee\");\n            Console.WriteLine(\"4. Delete Employee\");\n            Console.WriteLine(\"5. Exit\");\n\n            Console.Write(\"Choose an option: \");\n            string choice = Console.ReadLine();\n\n            switch (choice)\n            {\n                case \"1\":\n                    Console.Write(\"Enter Name: \");\n                    string name = Console.ReadLine();\n                    Console.Write(\"Enter Position: \");\n                    string position = Console.ReadLine();\n                    Console.Write(\"Enter Salary: \");\n                    if (double.TryParse(Console.ReadLine(), out double salary))\n                    {\n                        employeeManager.AddEmployee(name, position, salary);\n                        Console.WriteLine(\"Employee added successfully.\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid salary format.\");\n                    }\n                    break;\n                case \"2\":\n                    employeeManager.GetAllEmployees();\n                    break;\n                case \"3\":\n                    Console.Write(\"Enter Employee Id to update: \");\n                    if (int.TryParse(Console.ReadLine(), out int id))\n                    {\n                        Console.Write(\"Enter New Name: \");\n                        name = Console.ReadLine();\n                        Console.Write(\"Enter New Position: \");\n                        position = Console.ReadLine();\n                        Console.Write(\"Enter New Salary: \");\n                        if (double.TryParse(Console.ReadLine(), out salary))\n                        {\n                            employeeManager.UpdateEmployee(id, name, position, salary);\n                            Console.WriteLine(\"Employee updated successfully.\");\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"Invalid salary format.\");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid employee id.\");\n                    }\n                    break;\n                case \"4\":\n                    Console.Write(\"Enter Employee Id to delete: \");\n                    if (int.TryParse(Console.ReadLine(), out id))\n                    {\n                        employeeManager.DeleteEmployee(id);\n                        Console.WriteLine(\"Employee deleted successfully.\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid employee id.\");\n                    }\n                    break;\n                case \"5\":\n                    Environment.Exit(0);\n                    break;\n                default:\n                    Console.WriteLine(\"Invalid option. Please choose again.\");\n                    break;\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Database Class**: Manages the SQLite connection and initializes the 'Employees' table.\n\n2. **EmployeeManager Class**: Contains methods to perform CRUD operations on the 'Employees' table.\n\n3. **Program Class**: Provides a menu-driven interface for the user to interact with the application, calling the appropriate methods based on user input.\n\nThis setup ensures that you have a functional console application that can perform basic database operations using C# and SQLite."
    }
]