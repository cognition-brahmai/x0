[
    {
        "role": "user",
        "content": "Create a Node.js script that connects to a MySQL database and performs CRUD operations on a \"products\" table with columns: id, name, price, and quantity. Use command line arguments to specify the operation (create, read, update, or delete), and relevant data as needed.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Node.js script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table has columns: id, name, price, and quantity. I need to use command line arguments to specify the operation\u2014whether it's create, read, update, or delete\u2014and provide the necessary data for each operation.\n\nFirst things first, I need to set up a Node.js environment and make sure I have the MySQL package installed. I'll need to install the `mysql` package via npm if it's not already installed. So, in the terminal, I'll run:\n\n```bash\nnpm install mysql\n```\n\nOnce that's done, I can start writing the script. I need to handle command line arguments to determine what operation to perform. Node.js provides the `process.argv` array to access command line arguments.\n\nLet me think about how to structure the script. I should probably start by parsing the command line arguments to determine the operation and the data provided. Then, based on the operation, execute the corresponding SQL query.\n\nLet's consider the operations one by one.\n\n**Create (Insert):**\n\nFor creating a new product, I need the name, price, and quantity. The id might be auto-incremented in the database, so I'll assume that's the case.\n\nThe command might look like:\n\n```bash\nnode script.js create --name=\"Product Name\" --price=99.99 --quantity=10\n```\n\nIn the script, I need to parse these arguments and construct an INSERT SQL query.\n\n**Read (Select):**\n\nFor reading products, I might want to read all products or a specific product by id.\n\nAll products:\n\n```bash\nnode script.js read\n```\n\nSpecific product:\n\n```bash\nnode script.js read --id=1\n```\n\nSo, I need to handle cases where an id is provided or not.\n\n**Update (Update):**\n\nFor updating a product, I need the product id and the fields to update, which could be name, price, or quantity.\n\nExample:\n\n```bash\nnode script.js update --id=1 --name=\"Updated Name\" --price=89.99 --quantity=15\n```\n\nI need to construct an UPDATE query that updates the specified fields for the given id.\n\n**Delete (Delete):**\n\nFor deleting a product, I need the product id.\n\n```bash\nnode script.js delete --id=1\n```\n\nI'll need to construct a DELETE query based on the provided id.\n\nNow, to handle command line arguments, I can use a package like `minimist` to make it easier. So, I'll install that:\n\n```bash\nnpm install minimist\n```\n\nThen, in my script, I can require `minimist` to parse the arguments.\n\nLet me sketch a basic structure of the script:\n\n1. Import required modules: `mysql` and `minimist`.\n\n2. Parse command line arguments using `minimist`.\n\n3. Set up the database connection configuration.\n\n4. Connect to the MySQL database.\n\n5. Based on the operation specified, perform the corresponding CRUD operation.\n\n6. Close the database connection after the operation is completed.\n\nI need to make sure to handle errors appropriately, like missing required arguments or database connection errors.\n\nLet me think about how to organize the code. It might be helpful to have separate functions for each CRUD operation to keep the code clean and manageable.\n\nFor example:\n\n- `createProduct(name, price, quantity)`\n\n- `readProducts(id)`\n\n- `updateProduct(id, name, price, quantity)`\n\n- `deleteProduct(id)`\n\nEach function would construct and execute the respective SQL query.\n\nI also need to consider that some operations require certain arguments. For example, create requires name, price, and quantity; update might not always have all fields provided, so I need to handle optional parameters.\n\nLet me think about data validation. It would be good to have some basic validation for the input data, like ensuring that price and quantity are numbers, and name is a string.\n\nBut for the sake of simplicity, I might skip extensive validation in this script, assuming that the user provides correct data types.\n\nAlright, let's start writing some code.\n\nFirst, I'll set up the database connection.\n\nI need to have a MySQL database set up with a table named \"products\" having columns: id (INT, AUTO_INCREMENT, PRIMARY KEY), name (VARCHAR), price (DECIMAL), and quantity (INT).\n\nAssuming the database is set up, I'll define the connection configuration in the script.\n\nFor security reasons, I shouldn't hardcode the database credentials in the script. Maybe I can use environment variables to store sensitive information.\n\nNode.js provides the `process.env` object to access environment variables.\n\nSo, I'll expect the following environment variables to be set:\n\n- DB_HOST\n\n- DB_USER\n\n- DB_PASSWORD\n\n- DB_NAME\n\nI can set these variables in the shell before running the script.\n\nFor example:\n\n```bash\nexport DB_HOST=localhost\nexport DB_USER=root\nexport DB_PASSWORD=password\nexport DB_NAME=mydatabase\n```\n\nIn the script, I'll use these variables to configure the database connection.\n\nNow, let's think about the command line interface.\n\nI need to support the following operations:\n\n- create: to insert a new product\n\n- read: to retrieve products (all or by id)\n\n- update: to update an existing product\n\n- delete: to delete a product by id\n\nI need to ensure that the user provides the correct arguments for each operation.\n\nFor example, for create, they need to provide name, price, and quantity.\n\nFor update, they need to provide id, and at least one of name, price, or quantity to update.\n\nFor delete, they need to provide id.\n\nFor read, they can provide an id to retrieve a specific product, or no id to retrieve all products.\n\nI need to parse these arguments accordingly.\n\nUsing `minimist`, I can define options with specific names and types.\n\nLet me look up how to use `minimist`.\n\nFrom the documentation, I can define options like this:\n\n```javascript\nconst minimist = require('minimist');\n\nconst argv = minimist(process.argv.slice(2), {\n  string: ['name'],\n  number: ['price', 'quantity', 'id'],\n  alias: { h: 'help' },\n  default: { help: false }\n});\n```\n\nThis way, I can specify the types for each option.\n\nI can then access the arguments like `argv.name`, `argv.price`, etc.\n\nI also need to handle the operation type, which would be the first argument after the script name.\n\nSo, `process.argv[2]` would be the operation: 'create', 'read', 'update', or 'delete'.\n\nI need to validate that the operation is one of these four.\n\nIf not, I should display an error message and possibly show help information.\n\nSpeaking of help, it would be useful to have a --help option that displays how to use the script.\n\nI can define a help message that explains the available operations and the required arguments for each.\n\nLet me sketch a basic structure of the script:\n\n```javascript\nconst mysql = require('mysql');\nconst minimist = require('minimist');\n\n// Parse command line arguments\nconst argv = minimist(process.argv.slice(2), {\n  string: ['name'],\n  number: ['price', 'quantity', 'id'],\n  alias: { h: 'help' },\n  default: { help: false }\n});\n\n// Define database connection configuration\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n};\n\n// Create a connection to the database\nconst connection = mysql.createConnection(dbConfig);\n\n// Connect to the database\nconnection.connect((err) => {\n  if (err) {\n    console.error('Error connecting to database: ', err.stack);\n    return;\n  }\n  console.log('Connected to database as id ' + connection.threadId);\n});\n\n// Determine the operation\nconst operation = argv._[0];\n\n// Define CRUD functions\nfunction createProduct(name, price, quantity) {\n  // Implement create logic\n}\n\nfunction readProducts(id) {\n  // Implement read logic\n}\n\nfunction updateProduct(id, name, price, quantity) {\n  // Implement update logic\n}\n\nfunction deleteProduct(id) {\n  // Implement delete logic\n}\n\n// Route the operation to the corresponding function\nswitch (operation) {\n  case 'create':\n    createProduct(argv.name, argv.price, argv.quantity);\n    break;\n  case 'read':\n    readProducts(argv.id);\n    break;\n  case 'update':\n    updateProduct(argv.id, argv.name, argv.price, argv.quantity);\n    break;\n  case 'delete':\n    deleteProduct(argv.id);\n    break;\n  default:\n    console.log('Invalid operation. Use --help for usage information.');\n    if (argv.help) {\n      displayHelp();\n    }\n    break;\n}\n\n// Close the database connection\nconnection.end((err) => {\n  if (err) {\n    console.error('Error closing database connection: ', err.stack);\n    return;\n  }\n  console.log('Database connection closed.');\n});\n```\n\nThis is a rough skeleton. I need to fill in the CRUD functions with actual SQL queries.\n\nLet's start with the create function.\n\n**Create Function:**\n\nThis function should insert a new product into the products table.\n\nThe SQL query would be something like:\n\n```sql\nINSERT INTO products (name, price, quantity) VALUES (?, ?, ?)\n```\n\nI need to use parameterized queries to prevent SQL injection.\n\nIn the create function, I need to check if name, price, and quantity are provided. If not, display an error message.\n\nHere's a draft:\n\n```javascript\nfunction createProduct(name, price, quantity) {\n  if (!name || typeof name !== 'string') {\n    console.error('Name is required and must be a string.');\n    return;\n  }\n  if (typeof price !== 'number' || isNaN(price)) {\n    console.error('Price is required and must be a number.');\n    return;\n  }\n  if (typeof quantity !== 'number' || isNaN(quantity)) {\n    console.error('Quantity is required and must be a number.');\n    return;\n  }\n\n  const query = 'INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)';\n  connection.query(query, [name, price, quantity], (err, result) => {\n    if (err) {\n      console.error('Error creating product: ', err);\n      return;\n    }\n    console.log('Product created with id: ', result.insertId);\n  });\n}\n```\n\n**Read Function:**\n\nThis function should retrieve products from the database.\n\nIf an id is provided, it should retrieve that specific product; otherwise, it should retrieve all products.\n\nFor retrieving all products:\n\n```sql\nSELECT * FROM products\n```\n\nFor retrieving a specific product:\n\n```sql\nSELECT * FROM products WHERE id = ?\n```\n\nHere's a draft for the read function:\n\n```javascript\nfunction readProducts(id) {\n  let query;\n  if (id !== undefined && !isNaN(id)) {\n    query = 'SELECT * FROM products WHERE id = ?';\n    connection.query(query, [id], (err, results) => {\n      if (err) {\n        console.error('Error reading product: ', err);\n        return;\n      }\n      if (results.length === 0) {\n        console.log('Product not found.');\n      } else {\n        console.log(results);\n      }\n    });\n  } else {\n    query = 'SELECT * FROM products';\n    connection.query(query, (err, results) => {\n      if (err) {\n        console.error('Error reading products: ', err);\n        return;\n      }\n      console.log(results);\n    });\n  }\n}\n```\n\n**Update Function:**\n\nThis function should update an existing product.\n\nThe user can provide one or more of name, price, or quantity to update.\n\nI need to construct the SET clause dynamically based on which fields are provided.\n\nFor example, if only name is provided:\n\n```sql\nUPDATE products SET name = ? WHERE id = ?\n```\n\nIf name and price are provided:\n\n```sql\nUPDATE products SET name = ?, price = ? WHERE id = ?\n```\n\nAnd so on.\n\nI need to handle this dynamically.\n\nHere's a draft for the update function:\n\n```javascript\nfunction updateProduct(id, name, price, quantity) {\n  if (id === undefined || isNaN(id)) {\n    console.error('ID is required for update operation.');\n    return;\n  }\n\n  const setClauses = [];\n  const values = [];\n\n  if (name !== undefined && typeof name === 'string') {\n    setClauses.push('name = ?');\n    values.push(name);\n  }\n  if (price !== undefined && typeof price === 'number' && !isNaN(price)) {\n    setClauses.push('price = ?');\n    values.push(price);\n  }\n  if (quantity !== undefined && typeof quantity === 'number' && !isNaN(quantity)) {\n    setClauses.push('quantity = ?');\n    values.push(quantity);\n  }\n\n  if (setClauses.length === 0) {\n    console.error('No fields to update.');\n    return;\n  }\n\n  const query = `UPDATE products SET ${setClauses.join(', ')} WHERE id = ?`;\n  values.push(id);\n\n  connection.query(query, values, (err, result) => {\n    if (err) {\n      console.error('Error updating product: ', err);\n      return;\n    }\n    if (result.affectedRows === 0) {\n      console.log('Product not found.');\n    } else {\n      console.log('Product updated successfully.');\n    }\n  });\n}\n```\n\n**Delete Function:**\n\nThis function should delete a product by id.\n\nThe SQL query would be:\n\n```sql\nDELETE FROM products WHERE id = ?\n```\n\nI need to make sure that the id is provided and is a number.\n\nHere's a draft for the delete function:\n\n```javascript\nfunction deleteProduct(id) {\n  if (id === undefined || isNaN(id)) {\n    console.error('ID is required for delete operation.');\n    return;\n  }\n\n  const query = 'DELETE FROM products WHERE id = ?';\n  connection.query(query, [id], (err, result) => {\n    if (err) {\n      console.error('Error deleting product: ', err);\n      return;\n    }\n    if (result.affectedRows === 0) {\n      console.log('Product not found.');\n    } else {\n      console.log('Product deleted successfully.');\n    }\n  });\n}\n```\n\n**Help Function:**\n\nIt would be helpful to have a --help option that displays how to use the script.\n\nI can define a displayHelp function that prints usage information.\n\nHere's an example:\n\n```javascript\nfunction displayHelp() {\n  console.log('Usage: node script.js <operation> [options]');\n  console.log('Operations:');\n  console.log('  create --name=<name> --price=<price> --quantity=<quantity>');\n  console.log('  read [--id=<id>]');\n  console.log('  update --id=<id> [--name=<name> --price=<price> --quantity=<quantity>]');\n  console.log('  delete --id=<id>');\n}\n```\n\nI can call this function if the --help option is provided or if an invalid operation is specified.\n\n**Putting It All Together:**\n\nNow, I need to put all these pieces together into a single script.\n\nI also need to make sure that the database connection is closed after the operation is completed.\n\nSince the database queries are asynchronous, I need to ensure that the connection is closed after the query has finished executing.\n\nTo handle this, I can pass a callback to the query functions and close the connection once the operation is complete.\n\nHowever, MySQL in Node.js uses connection pooling by default, so closing the connection might not be necessary after each operation, but for the sake of this script, I'll keep it simple and close the connection after the operation.\n\nHere's the complete script:\n\n```javascript\nconst mysql = require('mysql');\nconst minimist = require('minimist');\n\n// Parse command line arguments\nconst argv = minimist(process.argv.slice(2), {\n  string: ['name'],\n  number: ['price', 'quantity', 'id'],\n  alias: { h: 'help' },\n  default: { help: false }\n});\n\n// Define database connection configuration\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n};\n\n// Create a connection to the database\nconst connection = mysql.createConnection(dbConfig);\n\n// Connect to the database\nconnection.connect((err) => {\n  if (err) {\n    console.error('Error connecting to database: ', err.stack);\n    return;\n  }\n  console.log('Connected to database as id ' + connection.threadId);\n\n  // Determine the operation\n  const operation = argv._[0];\n\n  // Define CRUD functions\n  function createProduct(name, price, quantity) {\n    if (!name || typeof name !== 'string') {\n      console.error('Name is required and must be a string.');\n      return;\n    }\n    if (typeof price !== 'number' || isNaN(price)) {\n      console.error('Price is required and must be a number.');\n      return;\n    }\n    if (typeof quantity !== 'number' || isNaN(quantity)) {\n      console.error('Quantity is required and must be a number.');\n      return;\n    }\n\n    const query = 'INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)';\n    connection.query(query, [name, price, quantity], (err, result) => {\n      if (err) {\n        console.error('Error creating product: ', err);\n        return;\n      }\n      console.log('Product created with id: ', result.insertId);\n      connection.end();\n    });\n  }\n\n  function readProducts(id) {\n    let query;\n    if (id !== undefined && !isNaN(id)) {\n      query = 'SELECT * FROM products WHERE id = ?';\n      connection.query(query, [id], (err, results) => {\n        if (err) {\n          console.error('Error reading product: ', err);\n          return;\n        }\n        if (results.length === 0) {\n          console.log('Product not found.');\n        } else {\n          console.log(results);\n        }\n        connection.end();\n      });\n    } else {\n      query = 'SELECT * FROM products';\n      connection.query(query, (err, results) => {\n        if (err) {\n          console.error('Error reading products: ', err);\n          return;\n        }\n        console.log(results);\n        connection.end();\n      });\n    }\n  }\n\n  function updateProduct(id, name, price, quantity) {\n    if (id === undefined || isNaN(id)) {\n      console.error('ID is required for update operation.');\n      return;\n    }\n\n    const setClauses = [];\n    const values = [];\n\n    if (name !== undefined && typeof name === 'string') {\n      setClauses.push('name = ?');\n      values.push(name);\n    }\n    if (price !== undefined && typeof price === 'number' && !isNaN(price)) {\n      setClauses.push('price = ?');\n      values.push(price);\n    }\n    if (quantity !== undefined && typeof quantity === 'number' && !isNaN(quantity)) {\n      setClauses.push('quantity = ?');\n      values.push(quantity);\n    }\n\n    if (setClauses.length === 0) {\n      console.error('No fields to update.');\n      return;\n    }\n\n    const query = `UPDATE products SET ${setClauses.join(', ')} WHERE id = ?`;\n    values.push(id);\n\n    connection.query(query, values, (err, result) => {\n      if (err) {\n        console.error('Error updating product: ', err);\n        return;\n      }\n      if (result.affectedRows === 0) {\n        console.log('Product not found.');\n      } else {\n        console.log('Product updated successfully.');\n      }\n      connection.end();\n    });\n  }\n\n  function deleteProduct(id) {\n    if (id === undefined || isNaN(id)) {\n      console.error('ID is required for delete operation.');\n      return;\n    }\n\n    const query = 'DELETE FROM products WHERE id = ?';\n    connection.query(query, [id], (err, result) => {\n      if (err) {\n        console.error('Error deleting product: ', err);\n        return;\n      }\n      if (result.affectedRows === 0) {\n        console.log('Product not found.');\n      } else {\n        console.log('Product deleted successfully.');\n      }\n      connection.end();\n    });\n  }\n\n  function displayHelp() {\n    console.log('Usage: node script.js <operation> [options]');\n    console.log('Operations:');\n    console.log('  create --name=<name> --price=<price> --quantity=<quantity>');\n    console.log('  read [--id=<id>]');\n    console.log('  update --id=<id> [--name=<name> --price=<price> --quantity=<quantity>]');\n    console.log('  delete --id=<id>');\n  }\n\n  // Route the operation to the corresponding function\n  switch (operation) {\n    case 'create':\n      createProduct(argv.name, argv.price, argv.quantity);\n      break;\n    case 'read':\n      readProducts(argv.id);\n      break;\n    case 'update':\n      updateProduct(argv.id, argv.name, argv.price, argv.quantity);\n      break;\n    case 'delete':\n      deleteProduct(argv.id);\n      break;\n    default:\n      console.log('Invalid operation. Use --help for usage information.');\n      if (argv.help) {\n        displayHelp();\n      }\n      connection.end();\n      break;\n  }\n});\n```\n\nThis script should cover the basic CRUD operations for the products table using command line arguments.\n\nI need to make sure that the environment variables are set correctly before running the script.\n\nAlso, I should test each operation to ensure that it works as expected.\n\nPotential improvements could include:\n\n- Better error handling and validation.\n\n- Support for more query options, like filtering by name or price.\n\n- Using a more modern MySQL driver like `mysql2` for improved performance.\n\n- Implementing transactions for multiple operations.\n\nBut for the scope of this task, this should suffice.\n\n## Final Solution\nTo create a Node.js script that connects to a MySQL database and performs CRUD operations on a \"products\" table, follow these steps:\n\n### Prerequisites\n1. **MySQL Database**: Ensure you have a MySQL database set up with a table named `products` having columns: `id`, `name`, `price`, and `quantity`. Assume `id` is auto-incremented.\n2. **Environment Variables**: Set environment variables for database credentials:\n    ```bash\n    export DB_HOST=localhost\n    export DB_USER=root\n    export DB_PASSWORD=password\n    export DB_NAME=mydatabase\n    ```\n\n### Solution Code\n\n```javascript\nconst mysql = require('mysql');\nconst minimist = require('minimist');\n\n// Parse command line arguments\nconst argv = minimist(process.argv.slice(2), {\n  string: ['name'],\n  number: ['price', 'quantity', 'id'],\n  alias: { h: 'help' },\n  default: { help: false }\n});\n\n// Define database connection configuration\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n};\n\n// Create a connection to the database\nconst connection = mysql.createConnection(dbConfig);\n\n// Connect to the database\nconnection.connect((err) => {\n  if (err) {\n    console.error('Error connecting to database: ', err.stack);\n    return;\n  }\n  console.log('Connected to database as id ' + connection.threadId);\n\n  // Determine the operation\n  const operation = argv._[0];\n\n  // Define CRUD functions\n  function createProduct(name, price, quantity) {\n    if (!name || typeof name !== 'string') {\n      console.error('Name is required and must be a string.');\n      return;\n    }\n    if (typeof price !== 'number' || isNaN(price)) {\n      console.error('Price is required and must be a number.');\n      return;\n    }\n    if (typeof quantity !== 'number' || isNaN(quantity)) {\n      console.error('Quantity is required and must be a number.');\n      return;\n    }\n\n    const query = 'INSERT INTO products (name, price, quantity) VALUES (?, ?, ?)';\n    connection.query(query, [name, price, quantity], (err, result) => {\n      if (err) {\n        console.error('Error creating product: ', err);\n        return;\n      }\n      console.log('Product created with id: ', result.insertId);\n      connection.end();\n    });\n  }\n\n  function readProducts(id) {\n    let query;\n    if (id !== undefined && !isNaN(id)) {\n      query = 'SELECT * FROM products WHERE id = ?';\n      connection.query(query, [id], (err, results) => {\n        if (err) {\n          console.error('Error reading product: ', err);\n          return;\n        }\n        if (results.length === 0) {\n          console.log('Product not found.');\n        } else {\n          console.log(results);\n        }\n        connection.end();\n      });\n    } else {\n      query = 'SELECT * FROM products';\n      connection.query(query, (err, results) => {\n        if (err) {\n          console.error('Error reading products: ', err);\n          return;\n        }\n        console.log(results);\n        connection.end();\n      });\n    }\n  }\n\n  function updateProduct(id, name, price, quantity) {\n    if (id === undefined || isNaN(id)) {\n      console.error('ID is required for update operation.');\n      return;\n    }\n\n    const setClauses = [];\n    const values = [];\n\n    if (name !== undefined && typeof name === 'string') {\n      setClauses.push('name = ?');\n      values.push(name);\n    }\n    if (price !== undefined && typeof price === 'number' && !isNaN(price)) {\n      setClauses.push('price = ?');\n      values.push(price);\n    }\n    if (quantity !== undefined && typeof quantity === 'number' && !isNaN(quantity)) {\n      setClauses.push('quantity = ?');\n      values.push(quantity);\n    }\n\n    if (setClauses.length === 0) {\n      console.error('No fields to update.');\n      return;\n    }\n\n    const query = `UPDATE products SET ${setClauses.join(', ')} WHERE id = ?`;\n    values.push(id);\n\n    connection.query(query, values, (err, result) => {\n      if (err) {\n        console.error('Error updating product: ', err);\n        return;\n      }\n      if (result.affectedRows === 0) {\n        console.log('Product not found.');\n      } else {\n        console.log('Product updated successfully.');\n      }\n      connection.end();\n    });\n  }\n\n  function deleteProduct(id) {\n    if (id === undefined || isNaN(id)) {\n      console.error('ID is required for delete operation.');\n      return;\n    }\n\n    const query = 'DELETE FROM products WHERE id = ?';\n    connection.query(query, [id], (err, result) => {\n      if (err) {\n        console.error('Error deleting product: ', err);\n        return;\n      }\n      if (result.affectedRows === 0) {\n        console.log('Product not found.');\n      } else {\n        console.log('Product deleted successfully.');\n      }\n      connection.end();\n    });\n  }\n\n  function displayHelp() {\n    console.log('Usage: node script.js <operation> [options]');\n    console.log('Operations:');\n    console.log('  create --name=<name> --price=<price> --quantity=<quantity>');\n    console.log('  read [--id=<id>]');\n    console.log('  update --id=<id> [--name=<name> --price=<price> --quantity=<quantity>]');\n    console.log('  delete --id=<id>');\n  }\n\n  // Route the operation to the corresponding function\n  switch (operation) {\n    case 'create':\n      createProduct(argv.name, argv.price, argv.quantity);\n      break;\n    case 'read':\n      readProducts(argv.id);\n      break;\n    case 'update':\n      updateProduct(argv.id, argv.name, argv.price, argv.quantity);\n      break;\n    case 'delete':\n      deleteProduct(argv.id);\n      break;\n    default:\n      console.log('Invalid operation. Use --help for usage information.');\n      if (argv.help) {\n        displayHelp();\n      }\n      connection.end();\n      break;\n  }\n});\n```\n\n### Usage\n\n1. **Install dependencies**:\n    ```bash\n    npm install mysql minimist\n    ```\n\n2. **Set environment variables**:\n    ```bash\n    export DB_HOST=localhost\n    export DB_USER=root\n    export DB_PASSWORD=password\n    export DB_NAME=mydatabase\n    ```\n\n3. **Run the script with appropriate operations**:\n    - **Create a product**:\n        ```bash\n        node script.js create --name=\"Product Name\" --price=99.99 --quantity=10\n        ```\n    - **Read all products**:\n        ```bash\n        node script.js read\n        ```\n    - **Read a specific product**:\n        ```bash\n        node script.js read --id=1\n        ```\n    - **Update a product**:\n        ```bash\n        node script.js update --id=1 --name=\"Updated Name\" --price=89.99 --quantity=15\n        ```\n    - **Delete a product**:\n        ```bash\n        node script.js delete --id=1\n        ```\n    - **Display help**:\n        ```bash\n        node script.js --help\n        ```"
    }
]