[
    {
        "role": "user",
        "content": "In JavaScript, write a function to implement the Caesar cipher encryption technique. The function should take in a plaintext string and a shift value as parameters and return the encrypted text. Also include a decryption function that takes an encrypted string and a shift value to return the original plaintext."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. The Caesar cipher is a type of substitution cipher where each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 1, 'A' would be replaced by 'B', 'B' would become 'C', and so on. The method is named after Julius Caesar, who used it in his private correspondence.\n\n### Encryption Function\n\nFirst, let's create the encryption function. This function will take two parameters: the plaintext string and the shift value. Here's how you can implement it:\n\n1. **Handle Alphabet Characters:** We need to shift only the alphabet letters (both uppercase and lowercase). Non-alphabet characters should remain unchanged.\n2. **Wrap Around the Alphabet:** If the shift takes us beyond 'Z' or 'z', we should wrap around to the beginning of the alphabet.\n\nHere's the code for the encryption function:\n\n```javascript\nfunction caesarEncrypt(plaintext, shift) {\n    let encryptedText = '';\n    for (let i = 0; i < plaintext.length; i++) {\n        let char = plaintext[i];\n        if (char.match(/[a-z]/i)) {\n            // Determine the character's case\n            let base = char === char.toUpperCase() ? 'A'.charCodeAt(0) : 'a'.charCodeAt(0);\n            // Calculate the new character after shifting\n            let newChar = String.fromCharCode(((char.charCodeAt(0) - base + shift) % 26) + base);\n            encryptedText += newChar;\n        } else {\n            // Non-alphabet characters remain the same\n            encryptedText += char;\n        }\n    }\n    return encryptedText;\n}\n```\n\n### Decryption Function\n\nNext, let's create the decryption function. This function will take the encrypted string and the shift value and return the original plaintext. Decryption is essentially shifting the characters in the opposite direction of the encryption shift.\n\nHere's the code for the decryption function:\n\n```javascript\nfunction caesarDecrypt(encryptedText, shift) {\n    // Decryption is just shifting in the opposite direction\n    return caesarEncrypt(encryptedText, 26 - shift % 26);\n}\n```\n\n### Explanation\n\n- **Encryption Function:**\n  - We iterate through each character in the plaintext.\n  - If the character is an alphabet letter, we determine its base ('A' for uppercase, 'a' for lowercase).\n  - We calculate the new character by shifting it by the given shift value and wrap around using modulo 26.\n  - Non-alphabet characters are appended without changes.\n\n- **Decryption Function:**\n  - Decryption is achieved by shifting the characters by `(26 - shift % 26)`. This effectively reverses the encryption shift.\n  - We reuse the encryption function with the adjusted shift value for decryption.\n\n### Example Usage\n\nHere's how you can use these functions:\n\n```javascript\nlet plaintext = \"Hello, World!\";\nlet shift = 3;\n\nlet encrypted = caesarEncrypt(plaintext, shift);\nconsole.log(\"Encrypted:\", encrypted);  // Outputs: \"Khoor, Zruog!\"\n\nlet decrypted = caesarDecrypt(encrypted, shift);\nconsole.log(\"Decrypted:\", decrypted);  // Outputs: \"Hello, World!\"\n```\n\nThis implementation ensures that only alphabet characters are shifted, and non-alphabet characters are left unchanged, preserving the original structure of the text."
    }
]