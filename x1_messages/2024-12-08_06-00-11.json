[
    {
        "role": "user",
        "content": "Write a C++ program that implements a simple stack data structure with push, pop, and peek operations, along with error handling for stack overflow and underflow.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in C++ with push, pop, and peek operations, including error handling for stack overflow and underflow.\n\n```cpp\n#include <iostream>\n#include <stdexcept>\n\nclass Stack {\nprivate:\n    static const int MAX_SIZE = 100; // Maximum size of the stack\n    int arr[MAX_SIZE];\n    int top;\n\npublic:\n    Stack() : top(-1) {} // Constructor to initialize the stack\n\n    // Function to add an element to the stack\n    void push(int value) {\n        if (top >= MAX_SIZE - 1) {\n            throw std::overflow_error(\"Stack overflow\");\n        }\n        arr[++top] = value;\n        std::cout << \"Pushed \" << value << \" to stack\\n\";\n    }\n\n    // Function to remove an element from the stack\n    int pop() {\n        if (top < 0) {\n            throw std::underflow_error(\"Stack underflow\");\n        }\n        int value = arr[top--];\n        return value;\n    }\n\n    // Function to get the top element of the stack without removing it\n    int peek() {\n        if (top < 0) {\n            throw std::underflow_error(\"Stack is empty\");\n        }\n        return arr[top];\n    }\n\n    // Function to check if the stack is empty\n    bool isEmpty() {\n        return top == -1;\n    }\n};\n\nint main() {\n    Stack stack;\n\n    try {\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        std::cout << \"Top element is: \" << stack.peek() << \"\\n\";\n        std::cout << \"Popped \" << stack.pop() << \" from stack\\n\";\n        std::cout << \"Popped \" << stack.pop() << \" from stack\\n\";\n        std::cout << \"Popped \" << stack.pop() << \" from stack\\n\";\n        // Uncommenting the following line will cause an underflow error\n        // std::cout << \"Popped \" << stack.pop() << \" from stack\\n\";\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << \"\\n\";\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `Stack` class has a private array `arr` to store stack elements and an integer `top` to keep track of the top element's index.\n   - The constructor initializes `top` to -1 indicating an empty stack.\n\n2. **Push Operation:**\n   - Adds an element to the top of the stack.\n   - Checks if the stack is full (top >= MAX_SIZE - 1). If full, throws an `std::overflow_error`.\n\n3. **Pop Operation:**\n   - Removes the top element from the stack and returns it.\n   - Checks if the stack is empty (top < 0). If empty, throws an `std::underflow_error`.\n\n4. **Peek Operation:**\n   - Returns the top element without removing it.\n   - Checks if the stack is empty (top < 0). If empty, throws an `std::underflow_error`.\n\n5. **Is Empty Check:**\n   - Returns true if the stack is empty, otherwise false.\n\n6. **Main Function:**\n   - Demonstrates pushing and popping elements.\n   - Handles exceptions for stack overflow and underflow using try-catch blocks.\n\nThis implementation provides a basic stack with essential operations and error handling for common issues like overflow and underflow."
    }
]