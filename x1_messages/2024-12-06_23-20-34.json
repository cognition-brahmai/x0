[
    {
        "role": "user",
        "content": "Design a simple RESTful API using Node.js and Express that supports endpoints for creating, reading, updating, and deleting records from a MongoDB collection called \"books\". Each book record should have fields for title, author, publication date, and ISBN number. Include validation checks for required fields and proper data types.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple RESTful API using Node.js and Express that interacts with a MongoDB database. The API should handle CRUD operations for a collection called \"books\", and each book should have fields for title, author, publication date, and ISBN number. Also, I need to include validation checks for required fields and proper data types.\n\nFirst, I need to set up my project. I'll start by initializing a new Node.js project and installing the necessary dependencies.\n\n### Step 1: Project Setup\n\n1. **Initialize Node.js project:**\n   ```bash\n   mkdir book-api\n   cd book-api\n   npm init -y\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install express mongoose body-parser validator\n   ```\n\n   - `express`: For creating the web server and handling routes.\n   - `mongoose`: For connecting to MongoDB and defining the schema.\n   - `body-parser`: For parsing request bodies.\n   - `validator`: For data validation.\n\n3. **Create project structure:**\n   ```\n   book-api/\n   \u251c\u2500\u2500 models/\n   \u2502   \u2514\u2500\u2500 book.js\n   \u251c\u2500\u2500 routes/\n   \u2502   \u2514\u2500\u2500 books.js\n   \u251c\u2500\u2500 app.js\n   \u251c\u2500\u2500 package.json\n   ```\n\n### Step 2: Define the Book Model\n\nI need to define a Mongoose model for the \"books\" collection with the specified fields.\n\n**models/book.js:**\n```javascript\nconst mongoose = require('mongoose');\n\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  isbn: { type: String, required: true, unique: true }\n});\n\nmodule.exports = mongoose.model('Book', bookSchema);\n```\n\n### Step 3: Set Up the Database Connection\n\nI'll create a connection to the MongoDB database in `app.js`.\n\n**app.js:**\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst bookRouter = require('./routes/books');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/bookdb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'connection error:'));\ndb.once('open', () => {\n  console.log('Connected to MongoDB');\n});\n\napp.use('/api/books', bookRouter);\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 4: Create Routes for CRUD Operations\n\nI'll define the routes for creating, reading, updating, and deleting books in `routes/books.js`.\n\n**routes/books.js:**\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst Book = require('../models/book');\nconst { body, validationResult } = require('express-validator');\n\n// Validate request body\nconst validateBook = [\n  body('title').notEmpty().withMessage('Title is required'),\n  body('author').notEmpty().withMessage('Author is required'),\n  body('publicationDate').isDate().withMessage('Publication date must be a valid date'),\n  body('isbn').isISBN().withMessage('ISBN is invalid')\n];\n\n// Create a new book\nrouter.post('/', validateBook, async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const book = new Book(req.body);\n    await book.save();\n    res.status(201).json(book);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get all books\nrouter.get('/', async (req, res) => {\n  try {\n    const books = await Book.find();\n    res.json(books);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Get a single book by ISBN\nrouter.get('/:isbn', async (req, res) => {\n  try {\n    const book = await Book.findOne({ isbn: req.params.isbn });\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n    res.json(book);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Update a book by ISBN\nrouter.put('/:isbn', validateBook, async (req, res) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n\n  try {\n    const book = await Book.findOneAndUpdate(\n      { isbn: req.params.isbn },\n      req.body,\n      { new: true }\n    );\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n    res.json(book);\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\n// Delete a book by ISBN\nrouter.delete('/:isbn', async (req, res) => {\n  try {\n    const book = await Book.findOneAndDelete({ isbn: req.params.isbn });\n    if (!book) {\n      return res.status(404).json({ message: 'Book not found' });\n    }\n    res.json({ message: 'Book deleted successfully' });\n  } catch (error) {\n    res.status(500).json({ error: error.message });\n  }\n});\n\nmodule.exports = router;\n```\n\n### Step 5: Run the Server\n\nMake sure MongoDB is running on your local machine, then start the server:\n\n```bash\nnode app.js\n```\n\nNow, you can use tools like Postman or curl to test the API endpoints:\n\n- **Create a book:** POST `/api/books`\n- **Get all books:** GET `/api/books`\n- **Get a book by ISBN:** GET `/api/books/:isbn`\n- **Update a book by ISBN:** PUT `/api/books/:isbn`\n- **Delete a book by ISBN:** DELETE `/api/books/:isbn`\n\nThis setup provides a basic RESTful API for managing books with validation for required fields and proper data types."
    }
]