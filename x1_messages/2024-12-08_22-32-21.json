[
    {
        "role": "user",
        "content": "Write a Java program to implement a stack data structure using linked lists. The stack should support push, pop, and peek operations."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Implementing a stack using a linked list in Java is a great way to understand both data structures. A stack follows the Last In, First Out (LIFO) principle, and using a linked list allows efficient additions and removals from the top of the stack.\n\nFirst, we need to define a simple Node class that will represent each element in the linked list. Each node will hold the data and a reference to the next node.\n\nNext, we'll create the Stack class that uses this Node to manage the stack operations:\n\n1. **Push**: Adds an element to the top of the stack.\n\n2. **Pop**: Removes the element from the top of the stack and returns it.\n\n3. **Peek**: Returns the element at the top of the stack without removing it.\n\nAdditionally, it's useful to have a method to check if the stack is empty.\n\nHere's how you can implement this:\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class Stack {\n    private Node top;\n\n    public Stack() {\n        this.top = null;\n    }\n\n    // Push operation\n    public void push(int data) {\n        Node newNode = new Node(data);\n        if (top == null) {\n            top = newNode;\n        } else {\n            newNode.next = top;\n            top = newNode;\n        }\n        System.out.println(data + \" pushed to stack\");\n    }\n\n    // Pop operation\n    public int pop() {\n        if (top == null) {\n            System.out.println(\"Stack is empty\");\n            throw new RuntimeException(\"Stack is empty\");\n        }\n        int popped = top.data;\n        top = top.next;\n        return popped;\n    }\n\n    // Peek operation\n    public int peek() {\n        if (top == null) {\n            System.out.println(\"Stack is empty\");\n            throw new RuntimeException(\"Stack is empty\");\n        }\n        return top.data;\n    }\n\n    // Check if stack is empty\n    public boolean isEmpty() {\n        return top == null;\n    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n\n        System.out.println(stack.pop() + \" popped from stack\");\n        System.out.println(\"Top element is \" + stack.peek());\n    }\n}\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Holds the data and a reference to the next node.\n   - Constructor initializes the data and sets `next` to `null`.\n\n2. **Stack Class**:\n   - Contains a private `top` node that points to the top of the stack.\n   - **push(int data)**: Creates a new node with the given data and places it on top of the stack. Updates the `top` pointer.\n   - **pop()**: Removes the top node from the stack and returns its data. Throws an exception if the stack is empty.\n   - **peek()**: Returns the data of the top node without removing it. Throws an exception if the stack is empty.\n   - **isEmpty()**: Returns `true` if the stack is empty, otherwise `false`.\n\n3. **Main Method**:\n   - Demonstrates pushing elements onto the stack and then popping and peeking.\n\nThis implementation ensures that all stack operations are efficient, running in constant time O(1)."
    }
]