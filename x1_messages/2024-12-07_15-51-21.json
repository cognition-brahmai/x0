[
    {
        "role": "user",
        "content": "Create a Node.js Express server with endpoints for creating, reading, updating, and deleting notes. Each note should have a title, content, and timestamp. Store the notes in-memory using JavaScript objects. Add validation checks to ensure that the title and content are not empty and that the title is unique."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a simple Node.js Express server that handles CRUD operations for notes. Each note will have a title, content, and a timestamp. Since we're storing notes in memory using JavaScript objects, I don't need to set up a database. But I do need to ensure that the data persists as long as the server is running.\n\nFirst, I need to set up a basic Express server. I'll install Express if I haven't already. Then, I'll define the routes for creating, reading, updating, and deleting notes.\n\nFor in-memory storage, I'll use an array of objects, where each object represents a note. Each note will have a unique title, and I'll use the title as the identifier.\n\nI need to add validation checks to make sure that the title and content are not empty and that the title is unique.\n\nLet me start by setting up the basic Express server.\n\n## Final Solution\nTo create a simple Node.js Express server for managing notes with CRUD operations, follow these steps:\n\n### Prerequisites\n- Node.js installed on your machine.\n\n### Solution Code\n\n1. **Initialize the Project:**\n   ```bash\n   mkdir note-app\n   cd note-app\n   npm init -y\n   npm install express body-parser\n   ```\n\n2. **Create the Server:**\n   Create a file named `app.js`:\n\n   ```javascript\n   const express = require('express');\n   const bodyParser = require('body-parser');\n\n   const app = express();\n   app.use(bodyParser.json());\n\n   // In-memory storage for notes\n   let notes = [];\n\n   // Generate unique ID for notes\n   let idCounter = 1;\n\n   // GET all notes\n   app.get('/notes', (req, res) => {\n       res.json(notes);\n   });\n\n   // GET a single note by title\n   app.get('/notes/:title', (req, res) => {\n       const note = notes.find(n => n.title === req.params.title);\n       if (note) {\n           res.json(note);\n       } else {\n           res.status(404).json({ message: 'Note not found' });\n       }\n   });\n\n   // POST a new note\n   app.post('/notes', (req, res) => {\n       const { title, content } = req.body;\n       if (!title || !content) {\n           return res.status(400).json({ message: 'Title and content are required' });\n       }\n       if (notes.some(n => n.title === title)) {\n           return res.status(400).json({ message: 'Title must be unique' });\n       }\n       const newNote = {\n           id: idCounter++,\n           title,\n           content,\n           timestamp: new Date().toISOString()\n       };\n       notes.push(newNote);\n       res.status(201).json(newNote);\n   });\n\n   // PUT update a note\n   app.put('/notes/:title', (req, res) => {\n       const { title } = req.params;\n       const { content } = req.body;\n       const note = notes.find(n => n.title === title);\n       if (!note) {\n           return res.status(404).json({ message: 'Note not found' });\n       }\n       if (content) {\n           note.content = content;\n           note.timestamp = new Date().toISOString();\n           res.json(note);\n       } else {\n           res.status(400).json({ message: 'Content is required' });\n       }\n   });\n\n   // DELETE a note\n   app.delete('/notes/:title', (req, res) => {\n       const title = req.params.title;\n       const index = notes.findIndex(n => n.title === title);\n       if (index !== -1) {\n           const deletedNote = notes.splice(index, 1)[0];\n           res.json(deletedNote);\n       } else {\n           res.status(404).json({ message: 'Note not found' });\n       }\n   });\n\n   // Start the server\n   const PORT = process.env.PORT || 3000;\n   app.listen(PORT, () => {\n       console.log(`Server is running on port ${PORT}`);\n   });\n   ```\n\n### Explanation\n\n1. **Initialization:**\n   - Import required modules: `express` and `body-parser`.\n   - Set up Express app and body parser middleware.\n\n2. **In-Memory Storage:**\n   - Use an array `notes` to store note objects.\n   - Use `idCounter` to generate unique IDs for notes.\n\n3. **Routes:**\n   - **GET /notes:** Retrieve all notes.\n   - **GET /notes/:title:** Retrieve a single note by title.\n   - **POST /notes:** Create a new note. Validate that title and content are provided and that the title is unique.\n   - **PUT /notes/:title:** Update an existing note's content.\n   - **DELETE /notes/:title:** Delete a note by title.\n\n4. **Validation:**\n   - Ensure title and content are not empty.\n   - Check for unique titles when creating notes.\n\n5. **Start the Server:**\n   - Listen on port 3000 or an environment-specified port.\n\nThis setup provides a basic CRUD API for managing notes with in-memory storage and simple validation."
    }
]