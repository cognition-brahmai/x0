[
    {
        "role": "user",
        "content": "Write a Java program that interacts with Azure Blob Storage to upload files, download files, list blobs in a container, and delete blobs."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To interact with Azure Blob Storage using Java, you'll need to use the Azure Storage SDK for Java. Make sure you have the necessary dependencies set up in your project.\n\nFirst, you need to add the Azure Storage Blob dependency to your `pom.xml` if you're using Maven:\n\n```xml\n<dependency>\n    <groupId>com.azure</groupId>\n    <artifactId>azure-storage-blob</artifactId>\n    <version>12.14.1</version> <!-- Check for the latest version -->\n</dependency>\n```\n\nHere's a sample Java program that demonstrates how to upload files, download files, list blobs in a container, and delete blobs:\n\n```java\nimport com.azure.storage.blob.*;\nimport com.azure.storage.blob.models.*;\n\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.time.Duration;\n\npublic class AzureBlobStorageExample {\n\n    private static final String CONNECTION_STRING = \"your_connection_string\";\n    private static final String CONTAINER_NAME = \"your_container_name\";\n\n    public static void main(String[] args) {\n        BlobServiceClient blobServiceClient = new BlobServiceClientBuilder()\n                .connectionString(CONNECTION_STRING)\n                .buildClient();\n\n        // Create a container if it doesn't exist\n        BlobContainerClient containerClient = blobServiceClient.getBlobContainerClient(CONTAINER_NAME);\n        containerClient.createIfNotExists();\n\n        // Upload a file\n        String localFilePath = \"path/to/local/file.txt\";\n        String blobName = \"uploaded-file.txt\";\n        uploadFile(containerClient, localFilePath, blobName);\n\n        // List blobs in the container\n        listBlobs(containerClient);\n\n        // Download a blob\n        String downloadPath = \"path/to/downloaded/file.txt\";\n        downloadBlob(containerClient, blobName, downloadPath);\n\n        // Delete a blob\n        deleteBlob(containerClient, blobName);\n    }\n\n    private static void uploadFile(BlobContainerClient containerClient, String localFilePath, String blobName) {\n        BlobClient blobClient = containerClient.getBlobClient(blobName);\n        try {\n            blobClient.uploadFromFile(localFilePath);\n            System.out.println(\"File uploaded: \" + blobName);\n        } catch (IOException e) {\n            System.err.println(\"Error uploading file: \" + e.getMessage());\n        }\n    }\n\n    private static void listBlobs(BlobContainerClient containerClient) {\n        System.out.println(\"List of blobs in container \" + CONTAINER_NAME + \":\");\n        for (BlobItem blobItem : containerClient.listBlobs()) {\n            System.out.println(blobItem.getName());\n        }\n    }\n\n    private static void downloadBlob(BlobContainerClient containerClient, String blobName, String downloadPath) {\n        BlobClient blobClient = containerClient.getBlobClient(blobName);\n        try {\n            blobClient.downloadToFile(downloadPath);\n            System.out.println(\"Blob downloaded: \" + blobName);\n        } catch (IOException e) {\n            System.err.println(\"Error downloading blob: \" + e.getMessage());\n        }\n    }\n\n    private static void deleteBlob(BlobContainerClient containerClient, String blobName) {\n        BlobClient blobClient = containerClient.getBlobClient(blobName);\n        blobClient.delete();\n        System.out.println(\"Blob deleted: \" + blobName);\n    }\n}\n```\n\n### Explanation:\n\n1. **Setup**:\n   - Add the Azure Storage Blob dependency to your project.\n   - Replace `your_connection_string` and `your_container_name` with your actual Azure Storage connection string and container name.\n\n2. **Upload a File**:\n   - Use `BlobClient.uploadFromFile` to upload a local file to a blob.\n\n3. **List Blobs**:\n   - Use `BlobContainerClient.listBlobs` to list all blobs in the container.\n\n4. **Download a Blob**:\n   - Use `BlobClient.downloadToFile` to download a blob to a local file.\n\n5. **Delete a Blob**:\n   - Use `BlobClient.delete` to delete a blob from the container.\n\nMake sure you handle exceptions and errors appropriately in a production environment. This example provides a basic framework to interact with Azure Blob Storage using Java."
    }
]