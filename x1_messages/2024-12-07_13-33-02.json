[
    {
        "role": "user",
        "content": "Implement a basic HTTP server in Golang that listens on a specified port and serves static files from a specified directory.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a basic HTTP server in Go that serves static files from a specified directory is straightforward thanks to Go's net/http package. Below is a step-by-step guide to achieve this.\n\n### Step 1: Set Up Your Go Environment\n\nEnsure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). After installation, set up your GOPATH and GOROOT environment variables.\n\n### Step 2: Create the Project Directory\n\nCreate a new directory for your project and navigate into it.\n\n```sh\nmkdir static-server\ncd static-server\n```\n\n### Step 3: Create the Main Go File\n\nCreate a file named `main.go` in your project directory.\n\n```sh\ntouch main.go\n```\n\n### Step 4: Write the Code\n\nOpen `main.go` in your favorite text editor and add the following code:\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc main() {\n\t// Define command-line flags\n\tport := flag.Int(\"port\", 8080, \"Port to listen on\")\n\tdir := flag.String(\"dir\", \".\", \"Directory to serve\")\n\n\tflag.Parse()\n\n\t// Serve static files from the specified directory\n\tfs := http.FileServer(http.Dir(*dir))\n\n\t// Handle the directory index properly\n\thttp.Handle(\"/\", http.StripPrefix(\"/\", fs))\n\n\t// Start the server\n\tlog.Printf(\"Starting server on port %d, serving %s\\n\", *port, *dir)\n\terr := http.ListenAndServe(\":\"+strconv.Itoa(*port), nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Step 5: Build and Run the Server\n\nSave the file and build the executable.\n\n```sh\ngo build -o static-server main.go\n```\n\nRun the server with the desired port and directory.\n\n```sh\n./static-server -port=8080 -dir=./static\n```\n\n### Explanation\n\n1. **Flags**: The server accepts two command-line flags:\n   - `-port`: The port number to listen on (default is 8080).\n   - `-dir`: The directory to serve static files from (default is the current directory).\n\n2. **File Server**: `http.FileServer(http.Dir(*dir))` creates a handler that serves files from the specified directory.\n\n3. **URL Handling**: `http.Handle(\"/\", http.StripPrefix(\"/\", fs))` ensures that the server handles URLs correctly, stripping the leading slash before serving files.\n\n4. **Server Start**: `http.ListenAndServe` starts the server on the specified port.\n\nThis setup provides a simple way to serve static content using Go's built-in HTTP server."
    }
]