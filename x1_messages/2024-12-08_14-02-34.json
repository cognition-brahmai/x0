[
    {
        "role": "user",
        "content": "Write a Python script that uses the Cassandra database to store and retrieve user information (name, email, age) with appropriate data validation checks. The script should provide options for adding new users, updating existing user details, and deleting users."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Python script that interacts with a Cassandra database to manage user information. Since I can't execute code or connect to actual databases, I'll guide you through the process and provide you with a sample script that you can adapt to your needs.\n\nFirst, make sure you have Cassandra installed and running on your machine. You'll also need the `cassandra-driver` package for Python, which you can install using pip:\n\n```bash\npip install cassandra-driver\n```\n\nNow, let's outline the steps we need to take:\n\n1. **Connect to the Cassandra cluster.**\n2. **Create a keyspace and a table to store user information.**\n3. **Implement functions to add, update, and delete users.**\n4. **Add data validation checks for user inputs.**\n\n### Sample Script\n\nBelow is a sample Python script that demonstrates these steps. Please note that this is a basic example and may need adjustments based on your specific requirements and Cassandra setup.\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\nimport re\n\n# Connect to the Cassandra cluster\ncluster = Cluster(['127.0.0.1'])\nsession = cluster.connect()\n\n# Create a keyspace\nsession.execute(\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS user_management\n    WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n\"\"\")\n\n# Set the keyspace for the session\nsession.set_keyspace('user_management')\n\n# Create a table for users\nsession.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        name text PRIMARY KEY,\n        email text,\n        age int\n    )\n\"\"\")\n\ndef validate_email(email):\n    # Basic email validation\n    if re.match(r\"[^@]+@[^@]+\\.[^@]+\", email):\n        return True\n    else:\n        return False\n\ndef add_user():\n    name = input(\"Enter user name: \")\n    email = input(\"Enter user email: \")\n    age = input(\"Enter user age: \")\n    \n    if not validate_email(email):\n        print(\"Invalid email format.\")\n        return\n    try:\n        age = int(age)\n        if age <= 0:\n            raise ValueError\n    except ValueError:\n        print(\"Age must be a positive integer.\")\n        return\n    \n    query = \"\"\"\n        INSERT INTO users (name, email, age)\n        VALUES (%s, %s, %s)\n    \"\"\"\n    session.execute(query, (name, email, age))\n    print(\"User added successfully.\")\n\ndef update_user():\n    name = input(\"Enter the name of the user to update: \")\n    field = input(\"Enter the field to update (email/age): \").lower()\n    value = input(\"Enter the new value: \")\n    \n    if field == 'email':\n        if not validate_email(value):\n            print(\"Invalid email format.\")\n            return\n        query = \"\"\"\n            UPDATE users SET email = %s WHERE name = %s\n        \"\"\"\n    elif field == 'age':\n        try:\n            value = int(value)\n            if value <= 0:\n                raise ValueError\n        except ValueError:\n            print(\"Age must be a positive integer.\")\n            return\n        query = \"\"\"\n            UPDATE users SET age = %s WHERE name = %s\n        \"\"\"\n    else:\n        print(\"Invalid field.\")\n        return\n    \n    session.execute(query, (value, name))\n    print(\"User updated successfully.\")\n\ndef delete_user():\n    name = input(\"Enter the name of the user to delete: \")\n    query = \"\"\"\n        DELETE FROM users WHERE name = %s\n    \"\"\"\n    session.execute(query, (name,))\n    print(\"User deleted successfully.\")\n\ndef main():\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Add user\")\n        print(\"2. Update user\")\n        print(\"3. Delete user\")\n        print(\"4. Exit\")\n        choice = input(\"Enter your choice: \")\n        \n        if choice == '1':\n            add_user()\n        elif choice == '2':\n            update_user()\n        elif choice == '3':\n            delete_user()\n        elif choice == '4':\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation\n\n1. **Connecting to Cassandra:** We connect to the local Cassandra cluster.\n2. **Creating Keyspace and Table:** We create a keyspace named `user_management` and a table named `users` to store user information.\n3. **Data Validation:** We include basic validation for email format and age as a positive integer.\n4. **User Operations:**\n   - **Add User:** Prompts for name, email, and age, validates inputs, and inserts the data into the database.\n   - **Update User:** Allows updating the email or age of an existing user after validating the new values.\n   - **Delete User:** Deletes a user based on the provided name.\n\nThis script provides a simple command-line interface to manage user data with basic validation checks. You can expand upon this by adding more features or improving the validation as needed."
    }
]