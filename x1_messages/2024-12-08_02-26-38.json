[
    {
        "role": "user",
        "content": "Write a Java application that connects to an Elasticsearch cluster, creates an index, ingests sample data, and performs basic search queries using the Elasticsearch Java High-Level REST Client."
    },
    {
        "role": "assistant",
        "content": "Sure! I'll guide you through creating a Java application that connects to an Elasticsearch cluster, creates an index, ingests sample data, and performs basic search queries using the Elasticsearch Java High-Level REST Client.\n\n### Prerequisites\n\n1. **Java Development Kit (JDK)**: Ensure you have JDK installed on your machine. You can download it from [Oracle](https://www.oracle.com/java/technologies/javase-downloads.html) or use open-source alternatives like [OpenJDK](https://openjdk.java.net/).\n\n2. **Maven**: You'll need Maven to manage dependencies. Download it from [Apache Maven](https://maven.apache.org/download.cgi).\n\n3. **Elasticsearch**: Make sure you have an Elasticsearch cluster running. You can download and install it from [Elasticsearch](https://www.elastic.co/downloads/elasticsearch).\n\n4. **IDE**: Use any Java IDE like IntelliJ IDEA, Eclipse, or Visual Studio Code.\n\n### Step 1: Set Up the Maven Project\n\nCreate a new Maven project. You can do this by:\n\n- Using your IDE\u2019s Maven project creation wizard.\n\n- Or, create a new directory and run:\n\n```sh\nmvn archetype:generate -DgroupId=com.example -DartifactId=elasticsearch-demo -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```\n\n### Step 2: Add Dependencies\n\nOpen the `pom.xml` file and add the necessary dependencies for Elasticsearch High-Level REST Client and Jackson for JSON processing.\n\n```xml\n<dependencies>\n    <!-- Elasticsearch High-Level REST Client -->\n    <dependency>\n        <groupId>org.elasticsearch.client</groupId>\n        <artifactId>elasticsearch-rest-high-level-client</artifactId>\n        <version>7.10.2</version>\n    </dependency>\n    <!-- Jackson for JSON processing -->\n    <dependency>\n        <groupId>com.fasterxml.jackson.core</groupId>\n        <artifactId>jackson-databind</artifactId>\n        <version>2.12.3</version>\n    </dependency>\n</dependencies>\n```\n\n### Step 3: Create the Elasticsearch Client\n\nCreate a class to handle the Elasticsearch client connection.\n\n```java\npackage com.example;\n\nimport org.apache.http.HttpHost;\nimport org.elasticsearch.client.RestClient;\nimport org.elasticsearch.client.RestHighLevelClient;\n\npublic class ElasticsearchClient {\n\n    private RestHighLevelClient client;\n\n    public ElasticsearchClient() {\n        this.client = new RestHighLevelClient(\n                RestClient.builder(\n                        new HttpHost(\"localhost\", 9200, \"http\")\n                )\n        );\n    }\n\n    public RestHighLevelClient getClient() {\n        return client;\n    }\n\n    public void close() {\n        try {\n            client.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Step 4: Create an Index\n\nCreate a method to create an index in Elasticsearch.\n\n```java\npackage com.example;\n\nimport org.elasticsearch.action.admin.indices.create.CreateIndexRequest;\nimport org.elasticsearch.action.admin.indices.create.CreateIndexResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.indices.GetIndexRequest;\nimport org.elasticsearch.client.RestHighLevelClient;\n\nimport java.io.IOException;\n\npublic class IndexManager {\n\n    private RestHighLevelClient client;\n\n    public IndexManager(ElasticsearchClient esClient) {\n        this.client = esClient.getClient();\n    }\n\n    public boolean createIndex(String indexName) throws IOException {\n        if (client.indices().exists(new GetIndexRequest(indexName), RequestOptions.DEFAULT)) {\n            System.out.println(\"Index already exists: \" + indexName);\n            return false;\n        }\n\n        CreateIndexRequest request = new CreateIndexRequest(indexName);\n        CreateIndexResponse response = client.indices().create(request, RequestOptions.DEFAULT);\n        return response.isAcknowledged();\n    }\n}\n```\n\n### Step 5: Ingest Sample Data\n\nCreate a method to ingest sample data into the index.\n\n```java\npackage com.example;\n\nimport com.fasterxml.jackson.databind.ObjectMapper;\nimport org.elasticsearch.action.index.IndexRequest;\nimport org.elasticsearch.action.index.IndexResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.common.xcontent.XContentType;\n\nimport java.io.IOException;\n\npublic class DataIngestor {\n\n    private RestHighLevelClient client;\n    private ObjectMapper objectMapper;\n\n    public DataIngestor(ElasticsearchClient esClient) {\n        this.client = esClient.getClient();\n        this.objectMapper = new ObjectMapper();\n    }\n\n    public void ingestData(String indexName, Object data) throws IOException {\n        String json = objectMapper.writeValueAsString(data);\n        IndexRequest request = new IndexRequest(indexName).source(json, XContentType.JSON);\n        IndexResponse response = client.index(request, RequestOptions.DEFAULT);\n        System.out.println(\"Document indexed with ID: \" + response.getId());\n    }\n}\n```\n\n### Step 6: Perform Basic Search Queries\n\nCreate a method to perform basic search queries.\n\n```java\npackage com.example;\n\nimport org.elasticsearch.action.search.SearchRequest;\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.client.RequestOptions;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.elasticsearch.index.query.QueryBuilders;\nimport org.elasticsearch.search.builder.SearchSourceBuilder;\n\nimport java.io.IOException;\n\npublic class SearchManager {\n\n    private RestHighLevelClient client;\n\n    public SearchManager(ElasticsearchClient esClient) {\n        this.client = esClient.getClient();\n    }\n\n    public SearchResponse search(String indexName, String query) throws IOException {\n        SearchRequest request = new SearchRequest(indexName);\n        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();\n        sourceBuilder.query(QueryBuilders.matchQuery(\"content\", query));\n        request.source(sourceBuilder);\n        return client.search(request, RequestOptions.DEFAULT);\n    }\n}\n```\n\n### Step 7: Main Application Class\n\nCreate the main application class to orchestrate the operations.\n\n```java\npackage com.example;\n\nimport org.elasticsearch.action.search.SearchResponse;\nimport org.elasticsearch.search.SearchHit;\n\nimport java.io.IOException;\n\npublic class Application {\n\n    public static void main(String[] args) {\n        ElasticsearchClient esClient = new ElasticsearchClient();\n        IndexManager indexManager = new IndexManager(esClient);\n        DataIngestor dataIngestor = new DataIngestor(esClient);\n        SearchManager searchManager = new SearchManager(esClient);\n\n        try {\n            // Create index\n            String indexName = \"sample_index\";\n            boolean isCreated = indexManager.createIndex(indexName);\n            if (isCreated) {\n                System.out.println(\"Index created: \" + indexName);\n            }\n\n            // Ingest sample data\n            SampleData data1 = new SampleData(\"1\", \"Hello Elasticsearch\");\n            dataIngestor.ingestData(indexName, data1);\n\n            SampleData data2 = new SampleData(\"2\", \"Another document\");\n            dataIngestor.ingestData(indexName, data2);\n\n            // Perform search\n            String query = \"hello\";\n            SearchResponse response = searchManager.search(indexName, query);\n            for (SearchHit hit : response.getHits()) {\n                System.out.println(\"Found document: \" + hit.getSourceAsString());\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            esClient.close();\n        }\n    }\n}\n\nclass SampleData {\n    private String id;\n    private String content;\n\n    public SampleData(String id, String content) {\n        this.id = id;\n        this.content = content;\n    }\n\n    // Getters and setters\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getContent() {\n        return content;\n    }\n\n    public void setContent(String content) {\n        this.content = content;\n    }\n}\n```\n\n### Explanation\n\n1. **ElasticsearchClient**: Manages the connection to the Elasticsearch cluster.\n2. **IndexManager**: Handles creating indices.\n3. **DataIngestor**: Ingests sample data into the specified index.\n4. **SearchManager**: Performs basic search queries.\n5. **Application**: The main class that orchestrates the creation of the index, ingestion of data, and execution of search queries.\n\nThis setup provides a basic framework for interacting with Elasticsearch using the Java High-Level REST Client. You can expand upon this by adding more functionalities like updating documents, deleting documents, and performing advanced queries."
    }
]