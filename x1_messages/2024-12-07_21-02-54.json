[
    {
        "role": "user",
        "content": "Develop a Java application that connects to a Redis server and stores key-value pairs. The application should accept user input for keys and values, and provide options to set, get, and delete data in the Redis store.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To develop a Java application that connects to a Redis server and performs operations like setting, getting, and deleting key-value pairs, you'll need to follow these steps:\n\n1. **Set up your development environment:**\n   - Ensure you have Java installed on your machine.\n   - Install a Redis server or use a cloud-based Redis service.\n\n2. **Add dependencies:**\n   - You'll need the Jedis library, which is a Java client for Redis. You can include it via Maven or download the JAR file.\n\n3. **Create the Java application:**\n   - Write code to connect to the Redis server and perform the required operations based on user input.\n\nBelow is a step-by-step guide with sample code to help you achieve this.\n\n### Step 1: Set up your development environment\n\nEnsure you have Java installed. You can download it from [Oracle's official site](https://www.oracle.com/java/technologies/javase-downloads.html) or use OpenJDK.\n\nInstall Redis:\n- For local installation, follow instructions from [Redis official site](https://redis.io/download).\n- Alternatively, use a cloud-based Redis service like Redis Labs or AWS ElastiCache.\n\n### Step 2: Add dependencies\n\nIf you're using Maven, add the Jedis dependency to your `pom.xml`:\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>redis.clients</groupId>\n        <artifactId>jedis</artifactId>\n        <version>4.0.1</version>\n    </dependency>\n</dependencies>\n```\n\nIf not using Maven, download the Jedis JAR from [Maven Central](https://search.maven.org/artifact/redis.clients/jedis/4.0.1/jar) and include it in your project's classpath.\n\n### Step 3: Create the Java application\n\nCreate a new Java class, say `RedisClient`, and implement the required functionalities.\n\n```java\nimport redis.clients.jedis.Jedis;\n\nimport java.util.Scanner;\n\npublic class RedisClient {\n\n    private Jedis jedis;\n\n    public RedisClient(String host, int port) {\n        jedis = new Jedis(host, port);\n        System.out.println(\"Connected to Redis server successfully.\");\n    }\n\n    public void set(String key, String value) {\n        jedis.set(key, value);\n        System.out.println(\"Set key: \" + key + \" with value: \" + value);\n    }\n\n    public String get(String key) {\n        String value = jedis.get(key);\n        System.out.println(\"Get key: \" + key + \" with value: \" + value);\n        return value;\n    }\n\n    public void delete(String key) {\n        jedis.del(key);\n        System.out.println(\"Deleted key: \" + key);\n    }\n\n    public void close() {\n        if (jedis != null) {\n            jedis.close();\n        }\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n\n        // Configure Redis connection details\n        System.out.print(\"Enter Redis host: \");\n        String host = scanner.nextLine();\n        System.out.print(\"Enter Redis port: \");\n        int port = Integer.parseInt(scanner.nextLine());\n\n        RedisClient redisClient = new RedisClient(host, port);\n\n        while (true) {\n            System.out.println(\"\\nOptions:\");\n            System.out.println(\"1. Set key-value\");\n            System.out.println(\"2. Get value by key\");\n            System.out.println(\"3. Delete key\");\n            System.out.println(\"4. Exit\");\n\n            System.out.print(\"Choose an option: \");\n            int option = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (option) {\n                case 1:\n                    System.out.print(\"Enter key: \");\n                    String key = scanner.nextLine();\n                    System.out.print(\"Enter value: \");\n                    String value = scanner.nextLine();\n                    redisClient.set(key, value);\n                    break;\n                case 2:\n                    System.out.print(\"Enter key: \");\n                    key = scanner.nextLine();\n                    redisClient.get(key);\n                    break;\n                case 3:\n                    System.out.print(\"Enter key: \");\n                    key = scanner.nextLine();\n                    redisClient.delete(key);\n                    break;\n                case 4:\n                    redisClient.close();\n                    System.out.println(\"Goodbye!\");\n                    scanner.close();\n                    return;\n                default:\n                    System.out.println(\"Invalid option. Please choose again.\");\n            }\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Connecting to Redis:**\n   - The `RedisClient` class initializes a connection to the Redis server using the provided host and port.\n\n2. **Setting, Getting, and Deleting Keys:**\n   - The `set`, `get`, and `delete` methods interact with the Redis server to perform the respective operations.\n\n3. **User Interface:**\n   - A simple command-line interface allows the user to choose operations and input keys and values.\n\n4. **Resource Management:**\n   - The `close` method ensures the Redis connection is properly closed when the application exits.\n\n### Running the Application:\n\n1. Compile the Java class:\n   ```sh\n   javac RedisClient.java\n   ```\n\n2. Run the application:\n   ```sh\n   java RedisClient\n   ```\n\n3. Follow the prompts to enter Redis connection details and perform operations.\n\nThis setup provides a basic Java application to interact with a Redis server using user inputs for setting, getting, and deleting key-value pairs."
    }
]