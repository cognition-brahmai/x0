[
    {
        "role": "user",
        "content": "Create a Java program to implement a Trie data structure with basic operations like insert, search, and delete.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. A Trie, also known as a prefix tree, is a tree data structure used for efficient retrieval of keys from a set of strings. It is particularly useful for tasks like auto-completion and spell-checking.\n\nTo implement a Trie in Java, we need to define the structure of the Trie and its nodes, and then implement the insert, search, and delete operations.\n\n### Step 1: Define the Trie Node\n\nEach node in the Trie will represent a single character. The node should contain:\n\n- An array of references to its child nodes (one for each possible character).\n- A boolean flag to indicate if the node represents the end of a word.\n\nIn Java, we can represent the child nodes using an array of size 26 (for the English alphabet), assuming we're only dealing with lowercase letters.\n\n### Step 2: Implement the Trie Class\n\nThe Trie class will manage the root node and provide methods for insert, search, and delete operations.\n\n### Solution Code\n\n```java\nclass TrieNode {\n    TrieNode[] children;\n    boolean isEndOfWord;\n\n    public TrieNode() {\n        children = new TrieNode[26];\n        isEndOfWord = false;\n    }\n}\n\npublic class Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    // Inserts a word into the trie\n    public void insert(String word) {\n        TrieNode current = root;\n        for (int i = 0; i < word.length(); i++) {\n            int index = word.charAt(i) - 'a';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEndOfWord = true;\n    }\n\n    // Searches for the word in the trie\n    public boolean search(String word) {\n        TrieNode current = root;\n        for (int i = 0; i < word.length(); i++) {\n            int index = word.charAt(i) - 'a';\n            if (current.children[index] == null) {\n                return false;\n            }\n            current = current.children[index];\n        }\n        return current.isEndOfWord;\n    }\n\n    // Deletes a word from the trie\n    public void delete(String word) {\n        delete(root, word, 0);\n    }\n\n    private boolean delete(TrieNode current, String word, int index) {\n        if (index == word.length()) {\n            if (!current.isEndOfWord) {\n                return false;\n            }\n            current.isEndOfWord = false;\n            return isEmpty(current);\n        }\n        int idx = word.charAt(index) - 'a';\n        TrieNode child = current.children[idx];\n        if (child == null) {\n            return false;\n        }\n        boolean shouldDeleteChild = delete(child, word, index + 1);\n\n        if (shouldDeleteChild) {\n            current.children[idx] = null;\n            return isEmpty(current);\n        }\n        return false;\n    }\n\n    private boolean isEmpty(TrieNode current) {\n        for (TrieNode child : current.children) {\n            if (child != null) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Example usage\n    public static void main(String[] args) {\n        Trie trie = new Trie();\n        trie.insert(\"hello\");\n        trie.insert(\"helmet\");\n        System.out.println(trie.search(\"hello\")); // true\n        System.out.println(trie.search(\"helmet\")); // true\n        System.out.println(trie.search(\"hell\")); // false\n        trie.delete(\"hello\");\n        System.out.println(trie.search(\"hello\")); // false\n        System.out.println(trie.search(\"helmet\")); // true\n    }\n}\n```\n\n### Explanation\n\n1. **TrieNode Class**:\n   - Contains an array of 26 TrieNode objects (for each letter a-z).\n   - A boolean `isEndOfWord` to mark the end of a word.\n\n2. **Trie Class**:\n   - Initializes with a root TrieNode.\n   - **Insert Operation**: Iterates through each character of the word, creating new nodes as necessary and marks the end of the word.\n   - **Search Operation**: Traverses the Trie based on the characters in the word and checks if the word exists by verifying the `isEndOfWord` flag.\n   - **Delete Operation**: Recursively navigates to the node corresponding to the end of the word and unmarks it. It also removes any empty nodes on the path back to the root.\n\nThis implementation assumes that all words are composed of lowercase English letters. For a more general solution, you might need to adjust the size of the child array or handle different character sets."
    }
]