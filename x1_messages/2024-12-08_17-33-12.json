[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a bank account system. The program should allow users to create accounts, deposit money, withdraw money, and check their balance. Implement exception handling for invalid inputs and insufficient funds.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that simulates a basic bank account system. This program allows users to create accounts, deposit money, withdraw money, and check their balance. It includes exception handling for invalid inputs and insufficient funds.\n\n```cpp\n#include <iostream>\n#include <string>\n#include <map>\n\nclass BankAccount {\nprivate:\n    std::string accountNumber;\n    std::string name;\n    double balance;\n\npublic:\n    BankAccount(std::string accNum, std::string accName, double initialBalance)\n        : accountNumber(accNum), name(accName), balance(initialBalance) {}\n\n    void deposit(double amount) {\n        if (amount <= 0) {\n            throw std::invalid_argument(\"Deposit amount must be positive.\");\n        }\n        balance += amount;\n    }\n\n    void withdraw(double amount) {\n        if (amount <= 0) {\n            throw std::invalid_argument(\"Withdrawal amount must be positive.\");\n        }\n        if (balance < amount) {\n            throw std::runtime_error(\"Insufficient funds.\");\n        }\n        balance -= amount;\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n\n    std::string getAccountNumber() const {\n        return accountNumber;\n    }\n\n    std::string getName() const {\n        return name;\n    }\n};\n\nint main() {\n    std::map<std::string, BankAccount> accounts;\n\n    int choice;\n    std::string accountNumber, name;\n    double amount, initialBalance;\n\n    do {\n        std::cout << \"\\nBank Account System\\n\";\n        std::cout << \"1. Create Account\\n\";\n        std::cout << \"2. Deposit Money\\n\";\n        std::cout << \"3. Withdraw Money\\n\";\n        std::cout << \"4. Check Balance\\n\";\n        std::cout << \"5. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        try {\n            switch (choice) {\n                case 1:\n                    std::cout << \"Enter account number: \";\n                    std::cin >> accountNumber;\n                    if (accounts.find(accountNumber) != accounts.end()) {\n                        throw std::invalid_argument(\"Account already exists.\");\n                    }\n                    std::cout << \"Enter name: \";\n                    std::cin.ignore();\n                    std::getline(std::cin, name);\n                    std::cout << \"Enter initial balance: \";\n                    std::cin >> initialBalance;\n                    if (initialBalance < 0) {\n                        throw std::invalid_argument(\"Initial balance cannot be negative.\");\n                    }\n                    accounts[accountNumber] = BankAccount(accountNumber, name, initialBalance);\n                    std::cout << \"Account created successfully.\\n\";\n                    break;\n                case 2:\n                    std::cout << \"Enter account number: \";\n                    std::cin >> accountNumber;\n                    auto it = accounts.find(accountNumber);\n                    if (it == accounts.end()) {\n                        throw std::invalid_argument(\"Account not found.\");\n                    }\n                    std::cout << \"Enter deposit amount: \";\n                    std::cin >> amount;\n                    it->second.deposit(amount);\n                    std::cout << \"Deposit successful.\\n\";\n                    break;\n                case 3:\n                    std::cout << \"Enter account number: \";\n                    std::cin >> accountNumber;\n                    it = accounts.find(accountNumber);\n                    if (it == accounts.end()) {\n                        throw std::invalid_argument(\"Account not found.\");\n                    }\n                    std::cout << \"Enter withdrawal amount: \";\n                    std::cin >> amount;\n                    it->second.withdraw(amount);\n                    std::cout << \"Withdrawal successful.\\n\";\n                    break;\n                case 4:\n                    std::cout << \"Enter account number: \";\n                    std::cin >> accountNumber;\n                    it = accounts.find(accountNumber);\n                    if (it == accounts.end()) {\n                        throw std::invalid_argument(\"Account not found.\");\n                    }\n                    std::cout << \"Balance: \" << it->second.getBalance() << \"\\n\";\n                    break;\n                case 5:\n                    std::cout << \"Exiting...\\n\";\n                    break;\n                default:\n                    std::cout << \"Invalid choice. Please try again.\\n\";\n            }\n        } catch (const std::exception& e) {\n            std::cerr << \"Error: \" << e.what() << \"\\n\";\n        }\n    } while (choice != 5);\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **BankAccount Class**:\n   - Holds account details: account number, name, and balance.\n   - Methods to deposit and withdraw money with exception handling for invalid amounts and insufficient funds.\n\n2. **Main Function**:\n   - Uses a `std::map` to store accounts, indexed by account number for quick access.\n   - Presents a menu for user choices: create account, deposit, withdraw, check balance, or exit.\n   - Implements exception handling to manage errors like invalid inputs, non-existent accounts, and insufficient funds.\n\nThis program provides a basic structure and can be expanded with more features like multiple account types, transaction histories, etc."
    }
]