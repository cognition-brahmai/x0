[
    {
        "role": "user",
        "content": "Create a C++ program that implements a stack data structure using arrays, including push, pop, peek, and isEmpty functions."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple implementation of a stack data structure in C++ using arrays. This implementation includes the `push`, `pop`, `peek`, and `isEmpty` functions.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Stack {\nprivate:\n    static const int MAX_SIZE = 100; // Maximum size of the stack\n    int arr[MAX_SIZE]; // Array to store stack elements\n    int top; // Top of the stack\n\npublic:\n    Stack() {\n        top = -1; // Initialize top to -1 indicating empty stack\n    }\n\n    void push(int value) {\n        if (top >= MAX_SIZE - 1) {\n            cout << \"Stack Overflow. Cannot push \" << value << endl;\n            return;\n        }\n        arr[++top] = value;\n        cout << \"Pushed \" << value << \" to stack.\" << endl;\n    }\n\n    void pop() {\n        if (top < 0) {\n            cout << \"Stack Underflow. Cannot pop from empty stack.\" << endl;\n            return;\n        }\n        cout << \"Popped \" << arr[top] << \" from stack.\" << endl;\n        top--;\n    }\n\n    int peek() {\n        if (top < 0) {\n            cout << \"Stack is empty.\" << endl;\n            return -1; // Assuming -1 as an error value\n        }\n        return arr[top];\n    }\n\n    bool isEmpty() {\n        return (top == -1);\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    cout << \"Top element is: \" << stack.peek() << endl;\n    stack.pop();\n    cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << endl;\n    stack.pop();\n    stack.pop();\n    stack.pop(); // This should show underflow message\n    cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class Definition:**\n   - `Stack` class manages a stack using an array of integers.\n   - `MAX_SIZE` is set to 100, which is the maximum number of elements the stack can hold.\n   - `top` is initialized to -1, indicating that the stack is empty.\n\n2. **Push Operation:**\n   - Adds an element to the top of the stack.\n   - Checks if the stack is full (top >= MAX_SIZE - 1). If full, it displays a \"Stack Overflow\" message.\n   - If not full, it increments `top` and adds the value to `arr[top]`.\n\n3. **Pop Operation:**\n   - Removes the top element from the stack.\n   - Checks if the stack is empty (top < 0). If empty, it displays a \"Stack Underflow\" message.\n   - If not empty, it prints the popped value and decrements `top`.\n\n4. **Peek Operation:**\n   - Returns the top element of the stack without removing it.\n   - Checks if the stack is empty. If empty, it displays a message and returns -1 (assuming -1 as an error value).\n   - If not empty, it returns `arr[top]`.\n\n5. **IsEmpty Operation:**\n   - Returns true if the stack is empty (top == -1), otherwise false.\n\n6. **Main Function:**\n   - Demonstrates the usage of the Stack class by performing push, pop, peek, and isEmpty operations.\n   - Includes cases to show stack overflow and underflow."
    }
]