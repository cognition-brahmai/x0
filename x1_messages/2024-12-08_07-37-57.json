[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add elements at the beginning, end, and any specific position in the list. Also include methods to delete elements by value and position, and to display the contents of the list."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in Python involves defining a Node class to represent each element in the list and a LinkedList class to manage the nodes. Here's a step-by-step guide to building such a class:\n\n### Step 1: Define the Node Class\nEach node in the linked list will hold data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the LinkedList Class\nThis class will manage the nodes. It will have methods to add elements at the beginning, end, and at a specific position. Additionally, it will have methods to delete elements by value and position, and to display the list.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Method to add a node at the beginning\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    # Method to add a node at the end\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    # Method to add a node at a specific position\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position should be positive.\")\n            return\n        if position == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    # Method to delete a node by value\n    def delete_by_value(self, key):\n        current = self.head\n        previous = None\n        while current and current.data != key:\n            previous = current\n            current = current.next\n        if current is None:\n            print(\"Value not found in the list.\")\n            return\n        if previous is None:\n            self.head = current.next\n        else:\n            previous.next = current.next\n\n    # Method to delete a node at a specific position\n    def delete_at_position(self, position):\n        if position < 0:\n            print(\"Position should be positive.\")\n            return\n        if self.head is None:\n            print(\"List is empty.\")\n            return\n        current = self.head\n        if position == 0:\n            self.head = current.next\n            return\n        count = 0\n        previous = None\n        while current and count < position:\n            previous = current\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range.\")\n            return\n        previous.next = current.next\n\n    # Method to display the list\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n```\n\n### Explanation:\n1. **Node Class**: Each node has a `data` attribute to store the value and a `next` attribute to point to the next node.\n2. **LinkedList Class**:\n   - **add_beginning**: Adds a new node at the start of the list.\n   - **add_end**: Adds a new node at the end of the list.\n   - **add_at_position**: Adds a new node at a specified position.\n   - **delete_by_value**: Deletes the first node containing the specified value.\n   - **delete_at_position**: Deletes the node at the specified position.\n   - **display**: Prints the elements of the list.\n\nThis should cover the basic operations for a singly linked list in Python. If you have any specific requirements or need further enhancements, feel free to ask!"
    }
]