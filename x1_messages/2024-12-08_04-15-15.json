[
    {
        "role": "user",
        "content": "Write a Java program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified position, as well as removing elements by value or index.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Implementing a singly linked list in Java involves creating a class for the nodes and another class to manage the list operations. Below is a step-by-step guide and the corresponding code.\n\n### Step 1: Define the Node Class\nFirst, we need a class to represent the nodes of the linked list. Each node will hold a value and a reference to the next node.\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n```\n\n### Step 2: Define the SinglyLinkedList Class\nNext, we create a class for the singly linked list that will contain methods to add elements at the beginning, end, and specified positions, as well as remove elements by value or index.\n\n```java\npublic class SinglyLinkedList {\n    private Node head;\n\n    public SinglyLinkedList() {\n        this.head = null;\n    }\n\n    // Method to add a new node at the beginning\n    public void addFirst(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n    }\n\n    // Method to add a new node at the end\n    public void addLast(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n\n    // Method to add a new node at a specified position\n    public void addAtPosition(int position, int data) {\n        if (position < 0) {\n            System.out.println(\"Invalid position\");\n            return;\n        }\n        if (position == 0) {\n            addFirst(data);\n            return;\n        }\n        Node newNode = new Node(data);\n        Node current = head;\n        int count = 0;\n        while (current != null && count < position - 1) {\n            current = current.next;\n            count++;\n        }\n        if (current == null) {\n            System.out.println(\"Position not available\");\n            return;\n        }\n        newNode.next = current.next;\n        current.next = newNode;\n    }\n\n    // Method to remove a node by value\n    public void removeByValue(int data) {\n        if (head == null) {\n            return;\n        }\n        if (head.data == data) {\n            head = head.next;\n            return;\n        }\n        Node current = head;\n        while (current.next != null && current.next.data != data) {\n            current = current.next;\n        }\n        if (current.next != null) {\n            current.next = current.next.next;\n        }\n    }\n\n    // Method to remove a node by index\n    public void removeAtIndex(int index) {\n        if (index < 0 || head == null) {\n            return;\n        }\n        if (index == 0) {\n            head = head.next;\n            return;\n        }\n        Node current = head;\n        int count = 0;\n        while (current != null && count < index - 1) {\n            current = current.next;\n            count++;\n        }\n        if (current == null || current.next == null) {\n            return;\n        }\n        current.next = current.next.next;\n    }\n\n    // Method to display the list\n    public void display() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.addFirst(10);\n        list.addLast(20);\n        list.addAtPosition(1, 15);\n        list.display(); // Output: 10 -> 15 -> 20 -> null\n        list.removeByValue(15);\n        list.display(); // Output: 10 -> 20 -> null\n        list.removeAtIndex(1);\n        list.display(); // Output: 10 -> null\n    }\n}\n```\n\n### Explanation\n1. **Node Class**: Represents each element in the linked list with `data` and `next` pointers.\n2. **SinglyLinkedList Class**:\n   - `addFirst(int data)`: Adds a new node at the beginning of the list.\n   - `addLast(int data)`: Adds a new node at the end of the list.\n   - `addAtPosition(int position, int data)`: Adds a new node at a specified position.\n   - `removeByValue(int data)`: Removes the first occurrence of a node with the given value.\n   - `removeAtIndex(int index)`: Removes the node at the specified index.\n   - `display()`: Prints the entire list.\n\nThis implementation covers the basic operations for a singly linked list in Java. Let me know if you need any further explanations or have additional questions!"
    }
]