[
    {
        "role": "user",
        "content": "Develop a Python script that uses the FastAPI framework to create a RESTful API with endpoints for creating, reading, updating, and deleting records in a SQLite database."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a RESTful API using FastAPI that interacts with a SQLite database. We'll cover the basics of setting up FastAPI, connecting to SQLite, and implementing CRUD operations.\n\n### Prerequisites\n\n1. **Python**: Make sure you have Python installed on your system. You can download it from [python.org](https://www.python.org/).\n2. **FastAPI**: We'll use FastAPI for building the API.\n3. **SQLite**: SQLite is a lightweight database that doesn't require a separate server process.\n\n### Step 1: Set Up Your Project\n\nFirst, create a new directory for your project:\n\n```bash\nmkdir fastapi_sqlite\ncd fastapi_sqlite\n```\n\nCreate a virtual environment to manage dependencies:\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n```\n\nInstall FastAPI and Uvicorn (as the ASGI server):\n\n```bash\npip install fastapi uvicorn\n```\n\n### Step 2: Create the SQLite Database\n\nWe'll use SQLite for this example. Create a file named `database.py` to handle the database connection.\n\n```python\nimport sqlite3\nfrom sqlite3 import Connection, Cursor\n\ndef get_db_connection() -> Connection:\n    conn = sqlite3.connect('example.db')\n    return conn\n\ndef close_db_connection(conn: Connection):\n    conn.close()\n\ndef create_table():\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute('''\n        CREATE TABLE IF NOT EXISTS items (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            description TEXT\n        )\n    ''')\n    conn.commit()\n    close_db_connection(conn)\n```\n\nInitialize the database by calling `create_table()`:\n\n```python\nif __name__ == \"__main__\":\n    create_table()\n```\n\n### Step 3: Define the Data Model\n\nCreate a file named `models.py` to define the structure of the data.\n\n```python\nfrom pydantic import BaseModel\n\nclass Item(BaseModel):\n    id: int\n    name: str\n    description: str\n\nclass ItemCreate(BaseModel):\n    name: str\n    description: str\n```\n\n### Step 4: Implement CRUD Operations\n\nCreate a file named `crud.py` to handle database operations.\n\n```python\nfrom database import get_db_connection, close_db_connection\nfrom models import Item, ItemCreate\n\ndef get_all_items():\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM items\")\n    rows = cursor.fetchall()\n    items = []\n    for row in rows:\n        item = Item(id=row[0], name=row[1], description=row[2])\n        items.append(item)\n    close_db_connection(conn)\n    return items\n\ndef get_item(item_id: int):\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT * FROM items WHERE id = ?\", (item_id,))\n    row = cursor.fetchone()\n    if row:\n        item = Item(id=row[0], name=row[1], description=row[2])\n    else:\n        item = None\n    close_db_connection(conn)\n    return item\n\ndef create_item(item: ItemCreate):\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"INSERT INTO items (name, description) VALUES (?, ?)\", (item.name, item.description))\n    conn.commit()\n    new_item_id = cursor.lastrowid\n    close_db_connection(conn)\n    return get_item(new_item_id)\n\ndef update_item(item_id: int, item: Item):\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"UPDATE items SET name = ?, description = ? WHERE id = ?\", (item.name, item.description, item_id))\n    conn.commit()\n    close_db_connection(conn)\n    return get_item(item_id)\n\ndef delete_item(item_id: int):\n    conn = get_db_connection()\n    cursor = conn.cursor()\n    cursor.execute(\"DELETE FROM items WHERE id = ?\", (item_id,))\n    conn.commit()\n    close_db_connection(conn)\n    return True\n```\n\n### Step 5: Create the FastAPI Application\n\nCreate a file named `main.py` to set up the FastAPI app and define the endpoints.\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom models import Item, ItemCreate\nfrom crud import get_all_items, get_item, create_item, update_item, delete_item\n\napp = FastAPI()\n\n@app.get(\"/items/\", response_model=list[Item])\ndef read_items():\n    items = get_all_items()\n    if not items:\n        raise HTTPException(status_code=404, detail=\"No items found\")\n    return items\n\n@app.get(\"/items/{item_id}\", response_model=Item)\ndef read_item(item_id: int):\n    item = get_item(item_id)\n    if not item:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return item\n\n@app.post(\"/items/\", response_model=Item)\ndef create_items(item: ItemCreate):\n    return create_item(item)\n\n@app.put(\"/items/{item_id}\", response_model=Item)\ndef update_items(item_id: int, item: Item):\n    updated_item = update_item(item_id, item)\n    if not updated_item:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return updated_item\n\n@app.delete(\"/items/{item_id}\")\ndef delete_items(item_id: int):\n    success = delete_item(item_id)\n    if not success:\n        raise HTTPException(status_code=404, detail=\"Item not found\")\n    return {\"detail\": \"Item deleted\"}\n```\n\n### Step 6: Run the Application\n\nUse Uvicorn to run your FastAPI application:\n\n```bash\nuvicorn main:app --reload\n```\n\nVisit `http://127.0.0.1:8000/docs` in your browser to see the automatically generated API documentation.\n\n### Summary\n\nYou've successfully created a RESTful API using FastAPI that interacts with a SQLite database. This API allows you to perform CRUD operations on a simple `items` table. You can expand this\u57fa\u7840 by adding more features and handling edge cases as needed."
    }
]