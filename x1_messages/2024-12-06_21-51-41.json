[
    {
        "role": "user",
        "content": "Create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table should contain columns for product ID, name, description, price, and quantity. The script should support command line arguments for specifying the operation (create, read, update, or delete) and any necessary parameters.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table should have columns for product ID, name, description, price, and quantity. The script needs to support command line arguments for specifying the operation\u2014whether it's creating, reading, updating, or deleting records\u2014and any necessary parameters for those operations.\n\nFirst, I need to make sure I understand what CRUD operations are. CRUD stands for Create, Read, Update, and Delete. So, in the context of this script:\n\n- **Create**: Insert a new product into the database.\n\n- **Read**: Retrieve and display product information.\n\n- **Update**: Modify existing product information.\n\n- **Delete**: Remove a product from the database.\n\nI also need to consider how to handle command line arguments in PHP. PHP has a built-in superglobal array called `$argv` that contains the command line arguments passed to the script. The first element, `$argv[0]`, is always the script name, and the subsequent elements are the arguments.\n\nGiven that, I can structure the script to accept the operation as the first argument and then additional parameters depending on the operation.\n\nBefore I dive into coding, I should plan out the structure of the script and how it will handle each operation.\n\n## Final Solution\nTo create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table, follow these steps:\n\n### Prerequisites\n\n1. **PHP Installation**: Ensure PHP is installed on your system.\n2. **MySQL Database**: Set up a MySQL database and a `products` table with the following schema:\n\n    ```sql\n    CREATE TABLE products (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(255) NOT NULL,\n        description TEXT,\n        price DECIMAL(10, 2) NOT NULL,\n        quantity INT NOT NULL\n    );\n    ```\n\n3. **Database Credentials**: Have your database host, username, password, and database name ready.\n\n### Solution Code\n\n```php\n<?php\n\n// Database credentials\n$host = 'localhost';\n$username = 'your_username';\n$password = 'your_password';\n$dbname = 'your_database';\n\n// Connect to the database\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Check if operation is provided\nif ($argc < 2) {\n    die(\"Usage: php script.php [operation] [parameters...]\\n\");\n}\n\n$operation = strtolower($argv[1]);\n\nswitch ($operation) {\n    case 'create':\n        if ($argc != 6) {\n            die(\"Usage: php script.php create name description price quantity\\n\");\n        }\n        $name = $argv[2];\n        $description = $argv[3];\n        $price = $argv[4];\n        $quantity = $argv[5];\n        createProduct($conn, $name, $description, $price, $quantity);\n        break;\n    case 'read':\n        if ($argc == 2) {\n            readAllProducts($conn);\n        } elseif ($argc == 3) {\n            $id = $argv[2];\n            readProductById($conn, $id);\n        } else {\n            die(\"Usage: php script.php read [id]\\n\");\n        }\n        break;\n    case 'update':\n        if ($argc != 7) {\n            die(\"Usage: php script.php update id name description price quantity\\n\");\n        }\n        $id = $argv[2];\n        $name = $argv[3];\n        $description = $argv[4];\n        $price = $argv[5];\n        $quantity = $argv[6];\n        updateProduct($conn, $id, $name, $description, $price, $quantity);\n        break;\n    case 'delete':\n        if ($argc != 3) {\n            die(\"Usage: php script.php delete id\\n\");\n        }\n        $id = $argv[2];\n        deleteProduct($conn, $id);\n        break;\n    default:\n        die(\"Invalid operation. Use create, read, update, or delete.\\n\");\n}\n\n// Close connection\n$conn->close();\n\n// Function to create a product\nfunction createProduct($conn, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)\");\n    $stmt->bind_param(\"ssdi\", $name, $description, $price, $quantity);\n    if ($stmt->execute()) {\n        echo \"Product created successfully.\\n\";\n    } else {\n        echo \"Error: \" . $stmt->error . \"\\n\";\n    }\n    $stmt->close();\n}\n\n// Function to read all products\nfunction readAllProducts($conn) {\n    $result = $conn->query(\"SELECT * FROM products\");\n    if ($result->num_rows > 0) {\n        while ($row = $result->fetch_assoc()) {\n            echo \"ID: \" . $row[\"id\"] . \", Name: \" . $row[\"name\"] . \", Description: \" . $row[\"description\"] . \", Price: \" . $row[\"price\"] . \", Quantity: \" . $row[\"quantity\"] . \"\\n\";\n        }\n    } else {\n        echo \"No products found.\\n\";\n    }\n}\n\n// Function to read a product by ID\nfunction readProductById($conn, $id) {\n    $stmt = $conn->prepare(\"SELECT * FROM products WHERE id = ?\");\n    $stmt->bind_param(\"i\", $id);\n    $stmt->execute();\n    $result = $stmt->get_result();\n    if ($result->num_rows == 1) {\n        $row = $result->fetch_assoc();\n        echo \"ID: \" . $row[\"id\"] . \", Name: \" . $row[\"name\"] . \", Description: \" . $row[\"description\"] . \", Price: \" . $row[\"price\"] . \", Quantity: \" . $row[\"quantity\"] . \"\\n\";\n    } else {\n        echo \"Product not found.\\n\";\n    }\n    $stmt->close();\n}\n\n// Function to update a product\nfunction updateProduct($conn, $id, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"UPDATE products SET name = ?, description = ?, price = ?, quantity = ? WHERE id = ?\");\n    $stmt->bind_param(\"ssdii\", $name, $description, $price, $quantity, $id);\n    if ($stmt->execute()) {\n        echo \"Product updated successfully.\\n\";\n    } else {\n        echo \"Error: \" . $stmt->error . \"\\n\";\n    }\n    $stmt->close();\n}\n\n// Function to delete a product\nfunction deleteProduct($conn, $id) {\n    $stmt = $conn->prepare(\"DELETE FROM products WHERE id = ?\");\n    $stmt->bind_param(\"i\", $id);\n    if ($stmt->execute()) {\n        echo \"Product deleted successfully.\\n\";\n    } else {\n        echo \"Error: \" . $stmt->error . \"\\n\";\n    }\n    $stmt->close();\n}\n\n```\n\n### Usage\n\n1. **Create a Product**:\n   ```sh\n   php script.php create \"Product Name\" \"Product Description\" 99.99 10\n   ```\n\n2. **Read All Products**:\n   ```sh\n   php script.php read\n   ```\n\n3. **Read a Product by ID**:\n   ```sh\n   php script.php read 1\n   ```\n\n4. **Update a Product**:\n   ```sh\n   php script.php update 1 \"Updated Name\" \"Updated Description\" 88.88 20\n   ```\n\n5. **Delete a Product**:\n   ```sh\n   php script.php delete 1\n   ```\n\n### Explanation\n\n- **Database Connection**: The script connects to the MySQL database using provided credentials.\n- **Command Line Arguments**: It uses `$argv` to retrieve command line arguments for operations and parameters.\n- **CRUD Operations**:\n  - **Create**: Inserts a new product into the database.\n  - **Read**: Retrieves and displays all products or a specific product by ID.\n  - **Update**: Updates an existing product's information by ID.\n  - **Delete**: Deletes a product by ID.\n- **Prepared Statements**: Used to prevent SQL injection and handle data safely.\n\nThis script provides a basic framework for managing products in a database via the command line."
    }
]