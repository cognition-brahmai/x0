[
    {
        "role": "user",
        "content": "Develop a Node.js server that exposes RESTful APIs for managing a collection of books. The server should use Express.js and store book data in a PostgreSQL database. Implement endpoints for adding, updating, deleting, and retrieving books.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to develop a Node.js server with RESTful APIs for managing a collection of books. I need to use Express.js and store the book data in a PostgreSQL database. Specifically, I need to implement endpoints for adding, updating, deleting, and retrieving books. Sounds straightforward, but let's break it down step by step to ensure I cover everything.\n\nFirst things first, I need to set up a new Node.js project. I'll start by creating a new directory for my project and initializing it with npm.\n\n```\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\nNext, I need to install the necessary dependencies. For this project, I'll need Express for the server, PostgreSQL as the database, and probably some middleware for handling JSON data and database connections.\n\nLet's install Express and pg (the PostgreSQL driver for Node.js):\n\n```\nnpm install express pg\n```\n\nI might also need body-parser to handle JSON request bodies, but since Express 4.16.0, it has built-in JSON parsing, so I can skip that.\n\nNow, I need to set up the basic structure of my server. I'll create an `index.js` file where I'll initialize Express and set up my routes.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nThis sets up a basic Express server listening on port 3000.\n\nNext, I need to connect to the PostgreSQL database. I'll use the `pg` module to create a pool of connections.\n\nFirst, I need to set up my database. I'll assume that I have PostgreSQL installed and running on my local machine. I'll create a new database for this application.\n\n```\ncreatedb bookdb\n```\n\nNow, I'll set up the database connection in my Node.js app. I'll create a separate file for database operations, say `db.js`.\n\n```javascript\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  user: 'yourusername',\n  host: 'localhost',\n  database: 'bookdb',\n  password: 'yourpassword',\n  port: 5432,\n});\n\nmodule.exports = pool;\n```\n\nMake sure to replace `'yourusername'` and `'yourpassword'` with your actual PostgreSQL credentials.\n\nNow, I need to create a table in the database to store book data. Let's assume each book has an ID, title, author, and publication date.\n\nI'll write a SQL script to create the table.\n\n```sql\nCREATE TABLE books (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  author VARCHAR(255) NOT NULL,\n  publication_date DATE\n);\n```\n\nI can run this script using the psql command-line tool.\n\n```\npsql -U yourusername -d bookdb -f create_table.sql\n```\n\nAlternatively, I can execute this SQL from my Node.js app during startup, but for now, I'll keep it separate.\n\nNow, back to my server. I need to implement the RESTful APIs for managing books. The standard REST operations are:\n\n- GET /books: Retrieve all books\n\n- POST /books: Add a new book\n\n- GET /books/:id: Retrieve a specific book by ID\n\n- PUT /books/:id: Update a specific book by ID\n\n- DELETE /books/:id: Delete a specific book by ID\n\nI'll start by implementing the GET /books endpoint to retrieve all books.\n\nFirst, I'll create a router for book-related routes. I'll create a new file `books.js` in a `routes` directory.\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst pool = require('../db');\n\nrouter.get('/', async (req, res) => {\n  try {\n    const result = await pool.query('SELECT * FROM books');\n    res.json(result.rows);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n\nmodule.exports = router;\n```\n\nThen, I'll require this router in my `index.js` and mount it on the `/books` path.\n\n```javascript\nconst booksRouter = require('./routes/books');\n\napp.use('/books', booksRouter);\n```\n\nNext, I'll implement the POST /books endpoint to add a new book.\n\nIn `books.js`:\n\n```javascript\nrouter.post('/', async (req, res) => {\n  const { title, author, publication_date } = req.body;\n  \n  if (!title || !author) {\n    return res.status(400).send('Title and author are required');\n  }\n\n  try {\n    const result = await pool.query(\n      'INSERT INTO books (title, author, publication_date) VALUES ($1, $2, $3) RETURNING *',\n      [title, author, publication_date]\n    );\n    res.status(201).json(result.rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n```\n\nNow, for getting a single book by ID, I'll implement the GET /books/:id endpoint.\n\nIn `books.js`:\n\n```javascript\nrouter.get('/:id', async (req, res) => {\n  const id = parseInt(req.params.id);\n\n  try {\n    const result = await pool.query('SELECT * FROM books WHERE id = $1', [id]);\n    if (result.rows.length === 0) {\n      return res.status(404).send('Book not found');\n    }\n    res.json(result.rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n```\n\nNext, updating a book with PUT /books/:id.\n\nIn `books.js`:\n\n```javascript\nrouter.put('/:id', async (req, res) => {\n  const id = parseInt(req.params.id);\n  const { title, author, publication_date } = req.body;\n\n  if (!title || !author) {\n    return res.status(400).send('Title and author are required');\n  }\n\n  try {\n    const result = await pool.query(\n      'UPDATE books SET title = $1, author = $2, publication_date = $3 WHERE id = $4 RETURNING *',\n      [title, author, publication_date, id]\n    );\n    if (result.rows.length === 0) {\n      return res.status(404).send('Book not found');\n    }\n    res.json(result.rows[0]);\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n```\n\nFinally, deleting a book with DELETE /books/:id.\n\nIn `books.js`:\n\n```javascript\nrouter.delete('/:id', async (req, res) => {\n  const id = parseInt(req.params.id);\n\n  try {\n    const result = await pool.query('DELETE FROM books WHERE id = $1', [id]);\n    if (result.rowCount === 0) {\n      return res.status(404).send('Book not found');\n    }\n    res.status(204).send();\n  } catch (err) {\n    console.error(err);\n    res.status(500).send('Server error');\n  }\n});\n```\n\nThat should cover all the required endpoints for managing books.\n\nNow, to test these APIs, I can use tools like Postman or curl. For example, to get all books:\n\n```\ncurl http://localhost:3000/books\n```\n\nTo add a new book:\n\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publication_date\":\"2023-01-01\"}' http://localhost:3000/books\n```\n\nTo get a specific book:\n\n```\ncurl http://localhost:3000/books/1\n```\n\nTo update a book:\n\n```\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publication_date\":\"2023-02-01\"}' http://localhost:3000/books/1\n```\n\nTo delete a book:\n\n```\ncurl -X DELETE http://localhost:3000/books/1\n```\n\nI should also consider error handling and validation. For example, ensuring that the title and author are provided when creating or updating a book, and handling cases where a book with a given ID doesn't exist.\n\nAdditionally, I might want to format the publication date to ensure it's in the correct format when storing it in the database.\n\nFor a more robust application, I could also implement pagination for the list of books, or add search functionality.\n\nBut for the scope of this task, these endpoints should suffice.\n\n## Final Solution\nTo create a Node.js server that manages a collection of books using Express.js and PostgreSQL, follow these steps:\n\n### Prerequisites\n1. **Node.js** installed.\n2. **PostgreSQL** installed and running.\n\n### Setup\n\n1. **Initialize the project:**\n    ```bash\n    mkdir book-api\n    cd book-api\n    npm init -y\n    ```\n\n2. **Install dependencies:**\n    ```bash\n    npm install express pg\n    ```\n\n3. **Set up the database:**\n    - Create a new database:\n        ```bash\n        createdb bookdb\n        ```\n    - Create the `books` table:\n        ```sql\n        CREATE TABLE books (\n          id SERIAL PRIMARY KEY,\n          title VARCHAR(255) NOT NULL,\n          author VARCHAR(255) NOT NULL,\n          publication_date DATE\n        );\n        ```\n\n### Project Structure\n\n```\nbook-api/\n\u251c\u2500\u2500 db.js\n\u251c\u2500\u2500 index.js\n\u2514\u2500\u2500 routes/\n    \u2514\u2500\u2500 books.js\n```\n\n### Implementation\n\n1. **db.js:**\n    ```javascript\n    const { Pool } = require('pg');\n\n    const pool = new Pool({\n      user: 'yourusername',\n      host: 'localhost',\n      database: 'bookdb',\n      password: 'yourpassword',\n      port: 5432,\n    });\n\n    module.exports = pool;\n    ```\n\n2. **index.js:**\n    ```javascript\n    const express = require('express');\n    const app = express();\n    const port = process.env.PORT || 3000;\n\n    app.use(express.json());\n\n    const booksRouter = require('./routes/books');\n    app.use('/books', booksRouter);\n\n    app.listen(port, () => {\n      console.log(`Server is running on port ${port}`);\n    });\n    ```\n\n3. **routes/books.js:**\n    ```javascript\n    const express = require('express');\n    const router = express.Router();\n    const pool = require('../db');\n\n    // Get all books\n    router.get('/', async (req, res) => {\n      try {\n        const result = await pool.query('SELECT * FROM books');\n        res.json(result.rows);\n      } catch (err) {\n        console.error(err);\n        res.status(500).send('Server error');\n      }\n    });\n\n    // Add a new book\n    router.post('/', async (req, res) => {\n      const { title, author, publication_date } = req.body;\n      \n      if (!title || !author) {\n        return res.status(400).send('Title and author are required');\n      }\n\n      try {\n        const result = await pool.query(\n          'INSERT INTO books (title, author, publication_date) VALUES ($1, $2, $3) RETURNING *',\n          [title, author, publication_date]\n        );\n        res.status(201).json(result.rows[0]);\n      } catch (err) {\n        console.error(err);\n        res.status(500).send('Server error');\n      }\n    });\n\n    // Get a single book by ID\n    router.get('/:id', async (req, res) => {\n      const id = parseInt(req.params.id);\n\n      try {\n        const result = await pool.query('SELECT * FROM books WHERE id = $1', [id]);\n        if (result.rows.length === 0) {\n          return res.status(404).send('Book not found');\n        }\n        res.json(result.rows[0]);\n      } catch (err) {\n        console.error(err);\n        res.status(500).send('Server error');\n      }\n    });\n\n    // Update a book by ID\n    router.put('/:id', async (req, res) => {\n      const id = parseInt(req.params.id);\n      const { title, author, publication_date } = req.body;\n\n      if (!title || !author) {\n        return res.status(400).send('Title and author are required');\n      }\n\n      try {\n        const result = await pool.query(\n          'UPDATE books SET title = $1, author = $2, publication_date = $3 WHERE id = $4 RETURNING *',\n          [title, author, publication_date, id]\n        );\n        if (result.rows.length === 0) {\n          return res.status(404).send('Book not found');\n        }\n        res.json(result.rows[0]);\n      } catch (err) {\n        console.error(err);\n        res.status(500).send('Server error');\n      }\n    });\n\n    // Delete a book by ID\n    router.delete('/:id', async (req, res) => {\n      const id = parseInt(req.params.id);\n\n      try {\n        const result = await pool.query('DELETE FROM books WHERE id = $1', [id]);\n        if (result.rowCount === 0) {\n          return res.status(404).send('Book not found');\n        }\n        res.status(204).send();\n      } catch (err) {\n        console.error(err);\n        res.status(500).send('Server error');\n      }\n    });\n\n    module.exports = router;\n    ```\n\n### Testing\n\nUse tools like Postman or `curl` to test the APIs:\n\n- **Get all books:**\n    ```bash\n    curl http://localhost:3000/books\n    ```\n\n- **Add a new book:**\n    ```bash\n    curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publication_date\":\"2023-01-01\"}' http://localhost:3000/books\n    ```\n\n- **Get a specific book:**\n    ```bash\n    curl http://localhost:3000/books/1\n    ```\n\n- **Update a book:**\n    ```bash\n    curl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publication_date\":\"2023-02-01\"}' http://localhost:3000/books/1\n    ```\n\n- **Delete a book:**\n    ```bash\n    curl -X DELETE http://localhost:3000/books/1\n    ```\n\nThis setup provides a basic CRUD API for managing books in a PostgreSQL database using Express.js."
    }
]