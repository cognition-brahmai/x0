[
    {
        "role": "user",
        "content": "Create a Java program that implements a stack data structure using an array, with push, pop, peek, and isEmpty methods."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a Java program that implements a stack using an array. I need to make sure I include the push, pop, peek, and isEmpty methods. Let's start by understanding what a stack is and how it works.\n\nA stack is a linear data structure that follows the Last In, First Out (LIFO) principle. That means the last element added to the stack is the first one to be removed. It's like a stack of plates; you can only take the top plate off.\n\nIn this implementation, I'll use an array to store the elements of the stack. I need to decide on the size of the array upfront because arrays have a fixed size in Java. I'll make it a generic size for now, say 100, but ideally, I should make it dynamic or allow the user to specify the size.\n\nLet me outline the methods I need to implement:\n\n1. **push**: Adds an element to the top of the stack.\n\n2. **pop**: Removes the element from the top of the stack and returns it.\n\n3. **peek**: Returns the element at the top of the stack without removing it.\n\n4. **isEmpty**: Checks if the stack is empty.\n\nI also need to keep track of the top of the stack. I'll use an integer variable called `top` that points to the top element's index in the array. Initially, `top` will be -1, indicating that the stack is empty.\n\nLet me think about how to handle errors or edge cases:\n\n- If the stack is full and someone tries to push an element, I should handle that, maybe by throwing an exception or returning a specific value.\n\n- If the stack is empty and someone tries to pop or peek, I should also handle that appropriately.\n\nFor simplicity, I'll throw an `IllegalArgumentException` in both cases.\n\nAlright, let's start coding.\n\nFirst, I'll declare the class and the array.\n\n```java\npublic class ArrayStack {\n    private int[] stack;\n    private int top;\n    private static final int DEFAULT_SIZE = 100;\n\n    public ArrayStack() {\n        stack = new int[DEFAULT_SIZE];\n        top = -1;\n    }\n}\n```\n\nI've created a class called `ArrayStack` with a private integer array `stack` and an integer `top` initialized to -1. I've also set a default size of 100 for the stack.\n\nNext, I'll implement the `push` method.\n\n```java\npublic void push(int value) {\n    if (top >= DEFAULT_SIZE - 1) {\n        throw new IllegalArgumentException(\"Stack is full\");\n    }\n    stack[++top] = value;\n}\n```\n\nIn the `push` method, I first check if the stack is full by seeing if `top` is at the maximum index (`DEFAULT_SIZE - 1`). If it is, I throw an `IllegalArgumentException`. Otherwise, I increment `top` and add the value at that index.\n\nNow, the `pop` method.\n\n```java\npublic int pop() {\n    if (top < 0) {\n        throw new IllegalArgumentException(\"Stack is empty\");\n    }\n    return stack[top--];\n}\n```\n\nIn `pop`, I check if `top` is less than 0, which means the stack is empty, and throw an exception. Otherwise, I return the value at `top` and then decrement `top`.\n\nNext, the `peek` method.\n\n```java\npublic int peek() {\n    if (top < 0) {\n        throw new IllegalArgumentException(\"Stack is empty\");\n    }\n    return stack[top];\n}\n```\n\n`Peek` simply returns the value at `top` without modifying the stack, but it still checks if the stack is empty.\n\nLastly, the `isEmpty` method.\n\n```java\npublic boolean isEmpty() {\n    return top < 0;\n}\n```\n\nThis just returns `true` if `top` is less than 0, indicating the stack is empty.\n\nLet me test these methods with some sample inputs to ensure they work correctly.\n\nFirst, create a new `ArrayStack` instance.\n\n```java\nArrayStack stack = new ArrayStack();\n```\n\nPush some elements.\n\n```java\nstack.push(10);\nstack.push(20);\nstack.push(30);\n```\n\nNow, peek at the top element.\n\n```java\nint topElement = stack.peek();\nSystem.out.println(\"Top element: \" + topElement); // Should print 30\n```\n\nPop an element.\n\n```java\nint popped = stack.pop();\nSystem.out.println(\"Popped: \" + popped); // Should print 30\n```\n\nPeek again.\n\n```java\ntopElement = stack.peek();\nSystem.out.println(\"New top element: \" + topElement); // Should print 20\n```\n\nCheck if the stack is empty.\n\n```java\nboolean empty = stack.isEmpty();\nSystem.out.println(\"Is stack empty? \" + empty); // Should print false\n```\n\nNow, pop all elements and check isEmpty.\n\n```java\nstack.pop(); // 20\nstack.pop(); // 10\nempty = stack.isEmpty();\nSystem.out.println(\"Is stack empty after popping all elements? \" + empty); // Should print true\n```\n\nTry popping from an empty stack.\n\n```java\ntry {\n    stack.pop();\n} catch (IllegalArgumentException e) {\n    System.out.println(e.getMessage()); // Should print \"Stack is empty\"\n}\n```\n\nSimilarly, try pushing beyond the stack's capacity.\n\n```java\nfor (int i = 0; i < DEFAULT_SIZE; i++) {\n    stack.push(i);\n}\ntry {\n    stack.push(100);\n} catch (IllegalArgumentException e) {\n    System.out.println(e.getMessage()); // Should print \"Stack is full\"\n}\n```\n\nLooks good. I think this implementation is correct and handles the basic operations of a stack using an array.\n\nOne thing to note is that the stack has a fixed size, which is set to 100 in this case. In a real-world scenario, you might want to make the stack dynamically resizable or allow the user to specify the size when creating the stack.\n\nAlso, in Java, it's more common to use the built-in `Stack` class from the `java.util` package, which provides similar functionality and more. However, implementing a stack from scratch is a good exercise to understand the underlying concepts.\n\nAnother improvement could be to make the stack generic, so it can hold any type of object, not just integers. But for simplicity, I've stuck with integers.\n\nOverall, this should serve as a basic implementation of a stack using an array in Java.\n\n## Final Solution\nTo implement a stack data structure using an array in Java, we need to ensure that the fundamental operations of a stack are correctly handled. These operations include pushing an element onto the stack, popping an element from the stack, peeking at the top element, and checking if the stack is empty. \n\n### Approach\n1. **Array Initialization:** We use a fixed-size array to store the stack elements. The default size is set to 100, but this can be adjusted as needed.\n2. **Top Tracker:** An integer variable `top` is used to keep track of the top element's index in the stack. It is initialized to -1 to indicate an empty stack.\n3. **Push Operation:** Adds an element to the top of the stack. If the stack is full, an `IllegalArgumentException` is thrown.\n4. **Pop Operation:** Removes and returns the top element of the stack. If the stack is empty, an `IllegalArgumentException` is thrown.\n5. **Peek Operation:** Returns the top element without removing it. If the stack is empty, an `IllegalArgumentException` is thrown.\n6. **IsEmpty Operation:** Checks if the stack is empty by verifying if `top` is less than 0.\n\n### Solution Code\n\n```java\npublic class ArrayStack {\n    private int[] stack;\n    private int top;\n    private static final int DEFAULT_SIZE = 100;\n\n    public ArrayStack() {\n        stack = new int[DEFAULT_SIZE];\n        top = -1;\n    }\n\n    public void push(int value) {\n        if (top >= DEFAULT_SIZE - 1) {\n            throw new IllegalArgumentException(\"Stack is full\");\n        }\n        stack[++top] = value;\n    }\n\n    public int pop() {\n        if (top < 0) {\n            throw new IllegalArgumentException(\"Stack is empty\");\n        }\n        return stack[top--];\n    }\n\n    public int peek() {\n        if (top < 0) {\n            throw new IllegalArgumentException(\"Stack is empty\");\n        }\n        return stack[top];\n    }\n\n    public boolean isEmpty() {\n        return top < 0;\n    }\n}\n```\n\n### Explanation\n- **ArrayStack Constructor:** Initializes the stack with a default size of 100 and sets `top` to -1.\n- **Push Method:** Increments `top` and adds the new value to the stack. If the stack is full, throws an exception.\n- **Pop Method:** Returns the top element and decrements `top`. If the stack is empty, throws an exception.\n- **Peek Method:** Returns the top element without modifying the stack. If the stack is empty, throws an exception.\n- **IsEmpty Method:** Returns true if the stack is empty (i.e., `top` is less than 0), otherwise false.\n\nThis implementation provides a simple and efficient way to manage a stack using an array in Java."
    }
]