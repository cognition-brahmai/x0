[
    {
        "role": "user",
        "content": "Write a Python script that interacts with Google Cloud Storage to upload, download, list, and delete objects in a bucket. Use the google-cloud-storage library for this task.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! To interact with Google Cloud Storage using Python, you'll need to use the `google-cloud-storage` library. Below is a Python script that demonstrates how to upload, download, list, and delete objects in a Google Cloud Storage bucket.\n\nFirst, make sure you have the `google-cloud-storage` library installed. You can install it using pip:\n\n```bash\npip install google-cloud-storage\n```\n\nAlso, ensure that you have set up authentication for the Google Cloud SDK. You can do this by setting the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to the path of your service account key file.\n\nHere's the Python script:\n\n```python\nfrom google.cloud import storage\n\ndef upload_blob(bucket_name, source_file_name, destination_blob_name):\n    \"\"\"Uploads a file to the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(destination_blob_name)\n\n    blob.upload_from_filename(source_file_name)\n\n    print(f\"File {source_file_name} uploaded to {destination_blob_name}.\")\n\ndef download_blob(bucket_name, source_blob_name, destination_file_name):\n    \"\"\"Downloads a blob from the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(source_blob_name)\n\n    blob.download_to_filename(destination_file_name)\n\n    print(f\"Blob {source_blob_name} downloaded to {destination_file_name}.\")\n\ndef list_blobs(bucket_name):\n    \"\"\"Lists all the blobs in the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blobs = bucket.list_blobs()\n\n    for blob in blobs:\n        print(blob.name)\n\ndef delete_blob(bucket_name, blob_name):\n    \"\"\"Deletes a blob from the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(blob_name)\n\n    blob.delete()\n\n    print(f\"Blob {blob_name} deleted.\")\n\nif __name__ == \"__main__\":\n    # Set your bucket name\n    bucket_name = \"your-bucket-name\"\n\n    # Upload a file\n    source_file_name = \"local/path/to/file.txt\"\n    destination_blob_name = \"storage-object-name.txt\"\n    upload_blob(bucket_name, source_file_name, destination_blob_name)\n\n    # Download a file\n    source_blob_name = \"storage-object-name.txt\"\n    destination_file_name = \"local/path/to/downloaded_file.txt\"\n    download_blob(bucket_name, source_blob_name, destination_file_name)\n\n    # List all objects in the bucket\n    list_blobs(bucket_name)\n\n    # Delete an object\n    blob_name_to_delete = \"storage-object-name.txt\"\n    delete_blob(bucket_name, blob_name_to_delete)\n```\n\n### Explanation:\n\n1. **Upload a File**:\n   - Use the `upload_blob` function to upload a local file to a bucket.\n   - Provide the bucket name, local file path, and the desired name for the object in the bucket.\n\n2. **Download a File**:\n   - Use the `download_blob` function to download an object from the bucket to a local file.\n   - Provide the bucket name, object name, and the local destination path.\n\n3. **List Objects**:\n   - Use the `list_blobs` function to list all objects in the bucket.\n   - Provide the bucket name.\n\n4. **Delete an Object**:\n   - Use the `delete_blob` function to delete an object from the bucket.\n   - Provide the bucket name and the object name.\n\nMake sure to replace `\"your-bucket-name\"`, `\"local/path/to/file.txt\"`, `\"storage-object-name.txt\"`, and other placeholders with actual values relevant to your setup.\n\nThis script provides basic operations to manage objects in a Google Cloud Storage bucket using Python."
    }
]