[
    {
        "role": "user",
        "content": "Implement a C++ class called \"BankAccount\" with private attributes for account number, account holder's name, and balance. Include public methods for depositing money, withdrawing money, and displaying account details. Ensure proper validation checks are in place for deposits and withdrawals.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a `BankAccount` class in C++ as per your requirements. This class includes private attributes for the account number, account holder's name, and balance, along with public methods for depositing money, withdrawing money, and displaying account details. It also incorporates validation checks to ensure that deposits are positive amounts and that withdrawals do not exceed the available balance.\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    std::string accountHolderName;\n    double balance;\n\npublic:\n    // Constructor to initialize the bank account\n    BankAccount(int accNum, const std::string& accHolderName, double initialBalance)\n        : accountNumber(accNum), accountHolderName(accHolderName), balance(initialBalance) {\n        // Validation for initial balance\n        if (initialBalance < 0) {\n            std::cerr << \"Initial balance cannot be negative.\" << std::endl;\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    // Method to deposit money into the account\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            std::cout << \"Deposited: \" << amount << \" New balance: \" << balance << std::endl;\n        } else {\n            std::cerr << \"Deposit amount must be positive.\" << std::endl;\n        }\n    }\n\n    // Method to withdraw money from the account\n    void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n                std::cout << \"Withdrew: \" << amount << \" New balance: \" << balance << std::endl;\n            } else {\n                std::cerr << \"Insufficient funds. Cannot withdraw \" << amount << std::endl;\n            }\n        } else {\n            std::cerr << \"Withdrawal amount must be positive.\" << std::endl;\n        }\n    }\n\n    // Method to display account details\n    void displayDetails() const {\n        std::cout << \"Account Number: \" << accountNumber << std::endl;\n        std::cout << \"Account Holder Name: \" << accountHolderName << std::endl;\n        std::cout << \"Balance: \" << balance << std::endl;\n    }\n};\n\nint main() {\n    // Example usage\n    BankAccount myAccount(123456, \"John Doe\", 1000.0);\n\n    myAccount.displayDetails();\n    myAccount.deposit(500.0);\n    myAccount.withdraw(200.0);\n    myAccount.displayDetails();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - **Private Attributes**:\n     - `accountNumber` (int): Stores the account number.\n     - `accountHolderName` (std::string): Stores the name of the account holder.\n     - `balance` (double): Stores the current balance in the account.\n   \n   - **Public Methods**:\n     - **Constructor**: Initializes the account with an account number, holder's name, and initial balance. Validates that the initial balance is not negative.\n     - **deposit(double amount)**: Adds the specified amount to the balance if the amount is positive.\n     - **withdraw(double amount)**: Subtracts the specified amount from the balance if the amount is positive and sufficient funds are available.\n     - **displayDetails()**: Prints the account number, holder's name, and current balance.\n\n2. **Main Function**:\n   - Creates an instance of `BankAccount`.\n   - Demonstrates depositing, withdrawing, and displaying account details.\n\nThis implementation ensures basic validation for deposits and withdrawals, preventing invalid operations such as depositing negative amounts or withdrawing more than the available balance."
    }
]