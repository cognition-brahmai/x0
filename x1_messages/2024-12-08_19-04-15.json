[
    {
        "role": "user",
        "content": "Develop a C++ program that simulates a basic banking system with account creation, deposit, withdrawal, and balance checking functionalities. Store the account information in a local SQLite database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a basic banking system using C++ that interacts with a local SQLite database. I need to implement account creation, deposit, withdrawal, and balance checking functionalities. I've never worked with SQLite in C++ before, so I'll have to learn that as well.\n\nFirst things first, I need to set up the SQLite database. I should create a database file and define a table to store account information. Each account should have at least an account number, owner's name, and balance. Maybe I'll also include a unique ID for each record.\n\nSo, the table structure could be something like:\n\n- ID (integer, primary key, auto-increment)\n\n- AccountNumber (integer, unique)\n\n- OwnerName (text)\n\n- Balance (real)\n\nI need to make sure that the AccountNumber is unique to prevent duplicates.\n\nNext, I need to set up the C++ environment to work with SQLite. I'll need to include the SQLite C++ wrapper library. I think there's a library called SQLiteCpp that I can use, but I'm not sure. Maybe I should stick with the C interface for simplicity.\n\nI need to check how to install SQLite in my C++ project. Since I'm on Windows, I can probably download the precompiled binary from the SQLite website and include the header and library files in my project.\n\nOnce I have SQLite set up, I need to write functions to handle account creation, deposit, withdrawal, and balance checking.\n\nLet's start with account creation. The user should input the account number and the owner's name. I need to insert a new record into the database with these details and an initial balance of zero.\n\nFor deposit and withdrawal, I need to update the balance based on the account number provided. I should also ensure that the account exists before performing these operations.\n\nBalance checking is straightforward; just retrieve the balance for a given account number.\n\nI should also handle errors gracefully, like if the account doesn't exist or if there aren't sufficient funds for a withdrawal.\n\nMaybe I'll create a simple text-based menu for the user to interact with the system.\n\nLet me sketch a rough plan:\n\n1. Set up SQLite database and create the accounts table.\n\n2. Write a function to create a new account:\n\n- Prompt for account number and owner's name.\n\n- Insert into database with initial balance 0.\n\n3. Write a function to deposit money:\n\n- Prompt for account number and deposit amount.\n\n- Update the balance.\n\n4. Write a function to withdraw money:\n\n- Prompt for account number and withdrawal amount.\n\n- Check if sufficient balance exists.\n\n- Update the balance if possible.\n\n5. Write a function to check balance:\n\n- Prompt for account number.\n\n- Retrieve and display the balance.\n\n6. Create a main menu with options to perform these operations or exit.\n\nI need to make sure that the database is properly initialized when the program starts and closed when it exits.\n\nAlso, I should consider data validation, like ensuring that account numbers are numeric and that amounts are positive numbers.\n\nSince I'm new to SQLite in C++, I might need to look up tutorials or documentation to understand how to execute SQL statements and handle results.\n\nI think I'll start by setting up the database and creating the table. Then I'll move on to writing the functions for each operation.\n\nLet the coding begin!\n\n## Final Solution\nTo create a basic banking system using C++ that interacts with a local SQLite database, follow these steps:\n\n### Prerequisites\n1. **SQLite Installation**: Ensure SQLite is installed on your system. You can download it from [sqlite.org](https://www.sqlite.org/download.html).\n2. **C++ Compiler**: Make sure you have a C++ compiler installed (e.g., g++).\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <sqlite3.h>\n\n// Function prototypes\nvoid createTable();\nvoid createAccount();\nvoid deposit();\nvoid withdraw();\nvoid checkBalance();\n\nint main() {\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return(0);\n    } else {\n        std::cout << \"Opened database successfully\" << std::endl;\n    }\n\n    createTable();\n\n    int choice;\n    do {\n        std::cout << \"\\nBanking System Menu:\\n\";\n        std::cout << \"1. Create Account\\n\";\n        std::cout << \"2. Deposit\\n\";\n        std::cout << \"3. Withdraw\\n\";\n        std::cout << \"4. Check Balance\\n\";\n        std::cout << \"5. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                createAccount();\n                break;\n            case 2:\n                deposit();\n                break;\n            case 3:\n                withdraw();\n                break;\n            case 4:\n                checkBalance();\n                break;\n            case 5:\n                std::cout << \"Exiting...\\n\";\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\\n\";\n        }\n    } while (choice != 5);\n\n    sqlite3_close(db);\n    return 0;\n}\n\nvoid createTable() {\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return;\n    }\n\n    const char* sql = \"CREATE TABLE IF NOT EXISTS accounts (\"\n                      \"ID INTEGER PRIMARY KEY AUTOINCREMENT,\"\n                      \"AccountNumber INTEGER UNIQUE,\"\n                      \"OwnerName TEXT,\"\n                      \"Balance REAL);\";\n\n    char* errMsg = 0;\n    rc = sqlite3_exec(db, sql, 0, 0, &errMsg);\n    if (rc != SQLITE_OK) {\n        std::cerr << \"SQL error: \" << errMsg << std::endl;\n        sqlite3_free(errMsg);\n    } else {\n        std::cout << \"Table created successfully\" << std::endl;\n    }\n\n    sqlite3_close(db);\n}\n\nvoid createAccount() {\n    int accountNumber;\n    std::string ownerName;\n\n    std::cout << \"Enter account number: \";\n    std::cin >> accountNumber;\n    std::cout << \"Enter owner's name: \";\n    std::cin.ignore();\n    std::getline(std::cin, ownerName);\n\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return;\n    }\n\n    std::string sql = \"INSERT INTO accounts (AccountNumber, OwnerName, Balance) VALUES (\" +\n                      std::to_string(accountNumber) + \", '\" + ownerName + \"', 0);\";\n\n    char* errMsg = 0;\n    rc = sqlite3_exec(db, sql.c_str(), 0, 0, &errMsg);\n    if (rc != SQLITE_OK) {\n        std::cerr << \"SQL error: \" << errMsg << std::endl;\n        sqlite3_free(errMsg);\n    } else {\n        std::cout << \"Account created successfully\" << std::endl;\n    }\n\n    sqlite3_close(db);\n}\n\nvoid deposit() {\n    int accountNumber;\n    double amount;\n\n    std::cout << \"Enter account number: \";\n    std::cin >> accountNumber;\n    std::cout << \"Enter deposit amount: \";\n    std::cin >> amount;\n\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return;\n    }\n\n    std::string sql = \"UPDATE accounts SET Balance = Balance + \" + std::to_string(amount) +\n                      \" WHERE AccountNumber = \" + std::to_string(accountNumber) + \";\";\n\n    char* errMsg = 0;\n    rc = sqlite3_exec(db, sql.c_str(), 0, 0, &errMsg);\n    if (rc != SQLITE_OK) {\n        std::cerr << \"SQL error: \" << errMsg << std::endl;\n        sqlite3_free(errMsg);\n    } else {\n        std::cout << \"Deposit successful\" << std::endl;\n    }\n\n    sqlite3_close(db);\n}\n\nvoid withdraw() {\n    int accountNumber;\n    double amount;\n\n    std::cout << \"Enter account number: \";\n    std::cin >> accountNumber;\n    std::cout << \"Enter withdrawal amount: \";\n    std::cin >> amount;\n\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return;\n    }\n\n    std::string sql = \"SELECT Balance FROM accounts WHERE AccountNumber = \" +\n                      std::to_string(accountNumber) + \";\";\n\n    sqlite3_stmt* stmt;\n    rc = sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, 0);\n    if (rc == SQLITE_OK) {\n        if (sqlite3_step(stmt) == SQLITE_ROW) {\n            double balance = sqlite3_column_double(stmt, 0);\n            if (balance >= amount) {\n                sql = \"UPDATE accounts SET Balance = Balance - \" + std::to_string(amount) +\n                      \" WHERE AccountNumber = \" + std::to_string(accountNumber) + \";\";\n                char* errMsg = 0;\n                rc = sqlite3_exec(db, sql.c_str(), 0, 0, &errMsg);\n                if (rc != SQLITE_OK) {\n                    std::cerr << \"SQL error: \" << errMsg << std::endl;\n                    sqlite3_free(errMsg);\n                } else {\n                    std::cout << \"Withdrawal successful\" << std::endl;\n                }\n            } else {\n                std::cout << \"Insufficient balance\" << std::endl;\n            }\n        } else {\n            std::cout << \"Account not found\" << std::endl;\n        }\n        sqlite3_finalize(stmt);\n    } else {\n        std::cerr << \"SQL error: \" << sqlite3_errmsg(db) << std::endl;\n    }\n\n    sqlite3_close(db);\n}\n\nvoid checkBalance() {\n    int accountNumber;\n\n    std::cout << \"Enter account number: \";\n    std::cin >> accountNumber;\n\n    sqlite3* db;\n    int rc = sqlite3_open(\"bank.db\", &db);\n    if (rc) {\n        std::cerr << \"Can't open database: \" << sqlite3_errmsg(db) << std::endl;\n        return;\n    }\n\n    std::string sql = \"SELECT Balance FROM accounts WHERE AccountNumber = \" +\n                      std::to_string(accountNumber) + \";\";\n\n    sqlite3_stmt* stmt;\n    rc = sqlite3_prepare_v2(db, sql.c_str(), -1, &stmt, 0);\n    if (rc == SQLITE_OK) {\n        if (sqlite3_step(stmt) == SQLITE_ROW) {\n            double balance = sqlite3_column_double(stmt, 0);\n            std::cout << \"Balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Account not found\" << std::endl;\n        }\n        sqlite3_finalize(stmt);\n    } else {\n        std::cerr << \"SQL error: \" << sqlite3_errmsg(db) << std::endl;\n    }\n\n    sqlite3_close(db);\n}\n```\n\n### Explanation\n1. **Database Setup**: The `createTable` function ensures that the `accounts` table exists with columns for ID, AccountNumber, OwnerName, and Balance.\n2. **Account Creation**: The `createAccount` function inserts a new record into the `accounts` table with an initial balance of zero.\n3. **Deposit**: The `deposit` function updates the balance by adding the deposit amount to the existing balance for the specified account.\n4. **Withdrawal**: The `withdraw` function checks if the account has sufficient balance and then updates the balance by subtracting the withdrawal amount.\n5. **Balance Check**: The `checkBalance` function retrieves and displays the current balance for the specified account.\n6. **Main Menu**: The `main` function provides a menu-driven interface for users to interact with the banking system.\n\nThis basic banking system handles fundamental operations and ensures data integrity using a local SQLite database."
    }
]