[
    {
        "role": "user",
        "content": "Write a C++ program to implement a singly linked list data structure with functions for adding elements at the beginning, end, and a specified position, as well as deleting elements by value or position.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'd be happy to help you with that! Implementing a singly linked list in C++ involves creating a structure for the nodes and then defining functions to manipulate the list. Below is a step-by-step guide and a complete program that includes functions to add elements at the beginning, end, and a specified position, as well as to delete elements by value or position.\n\n### Step-by-Step Explanation\n\n1. **Node Structure**: Define a structure for the nodes that will contain the data and a pointer to the next node.\n2. **Class Definition**: Create a class for the singly linked list that includes:\n   - A private pointer to the head node.\n   - Public member functions to:\n     - Add elements at the beginning (`insertAtBeginning`).\n     - Add elements at the end (`insertAtEnd`).\n     - Add elements at a specified position (`insertAtPosition`).\n     - Delete elements by value (`deleteByValue`).\n     - Delete elements at a specified position (`deleteAtPosition`).\n     - Display the list (`display`).\n3. **Implementation of Functions**:\n   - `insertAtBeginning`: Create a new node and make it the new head.\n   - `insertAtEnd`: Traverse to the end of the list and append a new node.\n   - `insertAtPosition`: Traverse to the desired position and insert a new node.\n   - `deleteByValue`: Traverse the list to find the node with the given value and remove it.\n   - `deleteAtPosition`: Traverse to the desired position and remove the node.\n   - `display`: Traverse the list and print the data of each node.\n\n### Complete C++ Program\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Node structure\nstruct Node {\n    int data;\n    Node* next;\n};\n\n// Singly Linked List class\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Insert at beginning\n    void insertAtBeginning(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Insert at end\n    void insertAtEnd(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n\n        Node* temp = head;\n        while (temp->next != nullptr) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n\n    // Insert at a specific position\n    void insertAtPosition(int position, int value) {\n        if (position <= 0) {\n            cout << \"Invalid position\" << endl;\n            return;\n        }\n\n        if (position == 1) {\n            insertAtBeginning(value);\n            return;\n        }\n\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        Node* temp = head;\n        for (int i = 1; i < position - 1; ++i) {\n            if (temp == nullptr) {\n                cout << \"Position out of range\" << endl;\n                delete newNode;\n                return;\n            }\n            temp = temp->next;\n        }\n\n        newNode->next = temp->next;\n        temp->next = newNode;\n    }\n\n    // Delete by value\n    void deleteByValue(int value) {\n        if (head == nullptr) {\n            cout << \"List is empty\" << endl;\n            return;\n        }\n\n        if (head->data == value) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node* temp = head;\n        while (temp->next != nullptr && temp->next->data != value) {\n            temp = temp->next;\n        }\n\n        if (temp->next == nullptr) {\n            cout << \"Value not found\" << endl;\n            return;\n        }\n\n        Node* toDelete = temp->next;\n        temp->next = temp->next->next;\n        delete toDelete;\n    }\n\n    // Delete at a specific position\n    void deleteAtPosition(int position) {\n        if (position <= 0 || head == nullptr) {\n            cout << \"Invalid position or list is empty\" << endl;\n            return;\n        }\n\n        if (position == 1) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node* temp = head;\n        for (int i = 1; i < position - 1; ++i) {\n            if (temp == nullptr) {\n                cout << \"Position out of range\" << endl;\n                return;\n            }\n            temp = temp->next;\n        }\n\n        if (temp->next == nullptr) {\n            cout << \"Position out of range\" << endl;\n            return;\n        }\n\n        Node* toDelete = temp->next;\n        temp->next = temp->next->next;\n        delete toDelete;\n    }\n\n    // Display the list\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            cout << temp->data << \" -> \";\n            temp = temp->next;\n        }\n        cout << \"NULL\" << endl;\n    }\n\n    // Destructor to free memory\n    ~SinglyLinkedList() {\n        while (head != nullptr) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n};\n\nint main() {\n    SinglyLinkedList list;\n\n    list.insertAtEnd(1);\n    list.insertAtEnd(2);\n    list.insertAtEnd(3);\n    list.display();\n\n    list.insertAtBeginning(0);\n    list.display();\n\n    list.insertAtPosition(3, 10);\n    list.display();\n\n    list.deleteByValue(10);\n    list.display();\n\n    list.deleteAtPosition(2);\n    list.display();\n\n    return 0;\n}\n```\n\n### Explanation of the Program\n\n1. **Node Structure**: Defines the basic structure of a node with `data` and `next` pointer.\n2. **SinglyLinkedList Class**:\n   - **Constructor**: Initializes the head to `nullptr`.\n   - **insertAtBeginning**: Adds a new node at the start of the list.\n   - **insertAtEnd**: Adds a new node at the end of the list.\n   - **insertAtPosition**: Adds a new node at a specified position.\n   - **deleteByValue**: Deletes the first node containing the specified value.\n   - **deleteAtPosition**: Deletes the node at the specified position.\n   - **display**: Prints the list.\n   - **Destructor**: Frees the memory allocated for the list.\n3. **main Function**: Demonstrates the usage of the singly linked list by performing various operations and displaying the list after each operation.\n\nThis program should give you a solid foundation for working with singly linked lists in C++. If you have any questions or need further clarification, feel free to ask!"
    }
]