[
    {
        "role": "user",
        "content": "Write SQL queries to perform CRUD operations on a relational database containing tables for employees, departments, and projects. Include queries to calculate aggregate data such as total employees per department and average project duration. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! To perform CRUD operations and calculate aggregate data in a relational database with tables for employees, departments, and projects, you'll need to understand the structure of these tables and their relationships. Below, I'll provide sample SQL queries assuming a basic schema.\n\n### Sample Schema\n\n1. **employees** table:\n   - emp_id (Primary Key)\n   - emp_name\n   - dept_id (Foreign Key referencing departments.dept_id)\n   - hire_date\n\n2. **departments** table:\n   - dept_id (Primary Key)\n   - dept_name\n\n3. **projects** table:\n   - project_id (Primary Key)\n   - project_name\n   - start_date\n   - end_date\n\n4. **emp_projects** table (junction table for many-to-many relationship between employees and projects):\n   - emp_id (Foreign Key referencing employees.emp_id)\n   - project_id (Foreign Key referencing projects.project_id)\n\n### CRUD Operations\n\n#### Create Operations\n\n1. **Insert a new employee:**\n   ```sql\n   INSERT INTO employees (emp_name, dept_id, hire_date)\n   VALUES ('John Doe', 1, '2023-01-01');\n   ```\n\n2. **Insert a new department:**\n   ```sql\n   INSERT INTO departments (dept_name)\n   VALUES ('Human Resources');\n   ```\n\n3. **Insert a new project:**\n   ```sql\n   INSERT INTO projects (project_name, start_date, end_date)\n   VALUES ('HR System Upgrade', '2023-02-01', '2023-03-01');\n   ```\n\n4. **Assign an employee to a project:**\n   ```sql\n   INSERT INTO emp_projects (emp_id, project_id)\n   VALUES (1, 1);\n   ```\n\n#### Read Operations\n\n1. **Select all employees:**\n   ```sql\n   SELECT * FROM employees;\n   ```\n\n2. **Select all departments:**\n   ```sql\n   SELECT * FROM departments;\n   ```\n\n3. **Select all projects:**\n   ```sql\n   SELECT * FROM projects;\n   ```\n\n4. **Select employees in a specific department (e.g., dept_id = 1):**\n   ```sql\n   SELECT e.emp_id, e.emp_name\n   FROM employees e\n   WHERE e.dept_id = 1;\n   ```\n\n5. **Select projects that an employee is assigned to (e.g., emp_id = 1):**\n   ```sql\n   SELECT p.project_id, p.project_name\n   FROM projects p\n   JOIN emp_projects ep ON p.project_id = ep.project_id\n   WHERE ep.emp_id = 1;\n   ```\n\n#### Update Operations\n\n1. **Update an employee's department:**\n   ```sql\n   UPDATE employees\n   SET dept_id = 2\n   WHERE emp_id = 1;\n   ```\n\n2. **Update a project's end date:**\n   ```sql\n   UPDATE projects\n   SET end_date = '2023-04-01'\n   WHERE project_id = 1;\n   ```\n\n#### Delete Operations\n\n1. **Delete an employee (and related assignments):**\n   ```sql\n   DELETE FROM emp_projects WHERE emp_id = 1;\n   DELETE FROM employees WHERE emp_id = 1;\n   ```\n\n2. **Delete a project (and related assignments):**\n   ```sql\n   DELETE FROM emp_projects WHERE project_id = 1;\n   DELETE FROM projects WHERE project_id = 1;\n   ```\n\n### Aggregate Data Queries\n\n1. **Total employees per department:**\n   ```sql\n   SELECT d.dept_id, d.dept_name, COUNT(e.emp_id) AS total_employees\n   FROM departments d\n   LEFT JOIN employees e ON d.dept_id = e.dept_id\n   GROUP BY d.dept_id, d.dept_name;\n   ```\n\n2. **Average project duration:**\n   ```sql\n   SELECT AVG(DATEDIFF(end_date, start_date)) AS avg_duration\n   FROM projects;\n   ```\n\n3. **Employees with no assigned projects:**\n   ```sql\n   SELECT e.emp_id, e.emp_name\n   FROM employees e\n   LEFT JOIN emp_projects ep ON e.emp_id = ep.emp_id\n   WHERE ep.project_id IS NULL;\n   ```\n\n4. **Departments with no employees:**\n   ```sql\n   SELECT d.dept_id, d.dept_name\n   FROM departments d\n   LEFT JOIN employees e ON d.dept_id = e.dept_id\n   WHERE e.emp_id IS NULL;\n   ```\n\nThese queries should cover the basic CRUD operations and some aggregate calculations for the given schema. Adjust the table and column names as per your actual database schema."
    }
]