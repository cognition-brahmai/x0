[
    {
        "role": "user",
        "content": "Write a Python script that interacts with the Memcached caching system to store and retrieve key-value pairs.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! To interact with Memcached from Python, you can use the `pymemcache` library, which is a popular choice for working with Memcached. Below is a simple Python script that demonstrates how to connect to a Memcached server, store key-value pairs, and retrieve them.\n\nFirst, make sure you have `pymemcache` installed. You can install it using pip:\n\n```bash\npip install pymemcache\n```\n\nHere's a basic Python script that performs these operations:\n\n```python\nfrom pymemcache.client.base import Client\n\ndef main():\n    # Connect to the Memcached server\n    client = Client(('localhost', 11211))\n    \n    # Store a key-value pair\n    key = 'example_key'\n    value = 'example_value'\n    client.set(key, value)\n    print(f\"Stored {key}: {value}\")\n    \n    # Retrieve the value by key\n    retrieved_value = client.get(key)\n    print(f\"Retrieved {key}: {retrieved_value}\")\n    \n    # Store another key-value pair with an expiration time (in seconds)\n    key_with_expiry = 'expiry_key'\n    value_with_expiry = 'expires in 10 seconds'\n    expiry_time = 10  # seconds\n    client.set(key_with_expiry, value_with_expiry, expire=expiry_time)\n    print(f\"Stored {key_with_expiry}: {value_with_expiry} with expiry in {expiry_time} seconds\")\n    \n    # Retrieve the value before expiry\n    retrieved_value = client.get(key_with_expiry)\n    print(f\"Retrieved {key_with_expiry}: {retrieved_value}\")\n    \n    # Wait for expiry time to pass\n    import time\n    time.sleep(expiry_time + 1)\n    \n    # Try to retrieve the expired key\n    retrieved_value = client.get(key_with_expiry)\n    print(f\"Retrieved {key_with_expiry} after expiry: {retrieved_value}\")\n    \n    # Delete a key\n    client.delete(key)\n    print(f\"Deleted {key}\")\n    \n    # Try to retrieve the deleted key\n    retrieved_value = client.get(key)\n    print(f\"Retrieved {key} after deletion: {retrieved_value}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation:\n\n1. **Connecting to Memcached:**\n   - We use `pymemcache.client.base.Client` to connect to the Memcached server running on `localhost` at port `11211`.\n\n2. **Storing Key-Value Pairs:**\n   - The `set` method is used to store a key-value pair. You can optionally specify an expiration time in seconds.\n\n3. **Retrieving Values:**\n   - The `get` method retrieves the value associated with a given key.\n\n4. **Handling Expiry:**\n   - When a key has an expiry time set, it automatically gets removed from the cache after that time elapses.\n\n5. **Deleting Keys:**\n   - The `delete` method removes a key from the cache.\n\nMake sure your Memcached server is running and accessible at the specified host and port. You can download and install Memcached from its [official website](https://memcached.org/).\n\nThis script covers the basic operations you might need when working with Memcached in Python. Feel free to expand upon it based on your specific requirements!"
    }
]