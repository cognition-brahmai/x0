[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a basic ATM machine, allowing users to create accounts, deposit money, withdraw money, and check their balance. The account information should be stored in-memory using appropriate data structures.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that simulates a basic ATM machine. This program allows users to create accounts, deposit money, withdraw money, and check their balance. Account information is stored in-memory using a map data structure.\n\n```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nusing namespace std;\n\nclass Account {\npublic:\n    Account(string name, double balance) : name(name), balance(balance) {}\n\n    string getName() const {\n        return name;\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n\n    void deposit(double amount) {\n        balance += amount;\n    }\n\n    bool withdraw(double amount) {\n        if (balance >= amount) {\n            balance -= amount;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\nprivate:\n    string name;\n    double balance;\n};\n\nint main() {\n    map<int, Account> accounts;\n    int accountCount = 0;\n    int choice;\n    int accountNumber;\n    string name;\n    double amount;\n\n    do {\n        cout << \"\\nATM Menu:\\n\";\n        cout << \"1. Create Account\\n\";\n        cout << \"2. Deposit Money\\n\";\n        cout << \"3. Withdraw Money\\n\";\n        cout << \"4. Check Balance\\n\";\n        cout << \"5. Exit\\n\";\n        cout << \"Enter your choice: \";\n        cin >> choice;\n\n        switch (choice) {\n            case 1:\n                cout << \"Enter name: \";\n                cin.ignore();\n                getline(cin, name);\n                Account newAccount(name, 0.0);\n                accountCount++;\n                accounts[accountCount] = newAccount;\n                cout << \"Account created successfully. Your account number is: \" << accountCount << endl;\n                break;\n            case 2:\n                cout << \"Enter account number: \";\n                cin >> accountNumber;\n                if (accounts.find(accountNumber) != accounts.end()) {\n                    cout << \"Enter amount to deposit: \";\n                    cin >> amount;\n                    accounts[accountNumber].deposit(amount);\n                    cout << \"Deposit successful.\" << endl;\n                } else {\n                    cout << \"Account not found.\" << endl;\n                }\n                break;\n            case 3:\n                cout << \"Enter account number: \";\n                cin >> accountNumber;\n                if (accounts.find(accountNumber) != accounts.end()) {\n                    cout << \"Enter amount to withdraw: \";\n                    cin >> amount;\n                    if (accounts[accountNumber].withdraw(amount)) {\n                        cout << \"Withdrawal successful.\" << endl;\n                    } else {\n                        cout << \"Insufficient balance.\" << endl;\n                    }\n                } else {\n                    cout << \"Account not found.\" << endl;\n                }\n                break;\n            case 4:\n                cout << \"Enter account number: \";\n                cin >> accountNumber;\n                if (accounts.find(accountNumber) != accounts.end()) {\n                    cout << \"Balance: $\" << accounts[accountNumber].getBalance() << endl;\n                } else {\n                    cout << \"Account not found.\" << endl;\n                }\n                break;\n            case 5:\n                cout << \"Exiting...\" << endl;\n                break;\n            default:\n                cout << \"Invalid choice. Please try again.\" << endl;\n                break;\n        }\n    } while (choice != 5);\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Account Class**:\n   - Represents a bank account with a name and balance.\n   - Methods to get the name and balance, deposit money, and withdraw money.\n\n2. **Main Function**:\n   - Uses a `map<int, Account>` to store accounts, where the key is the account number.\n   - A counter `accountCount` is used to assign unique account numbers.\n   - The program presents a menu with options to create an account, deposit money, withdraw money, check balance, or exit.\n   - For each choice, it performs the corresponding operation:\n     - **Create Account**: Asks for the name, creates a new account with zero balance, and assigns a unique account number.\n     - **Deposit Money**: Asks for the account number and the amount to deposit.\n     - **Withdraw Money**: Asks for the account number and the amount to withdraw, checks for sufficient balance.\n     - **Check Balance**: Asks for the account number and displays the balance.\n     - **Exit**: Terminates the program.\n\nThis is a basic implementation and does not handle many real-world scenarios such as error checking for invalid inputs, security measures, or persistence of data beyond the program's runtime."
    }
]