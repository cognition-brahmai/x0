[
    {
        "role": "user",
        "content": "Develop a python script that connects to a PostgreSQL database, creates a table for storing information about movies (title, director, release year), and provides functions for adding, updating, and deleting movie records. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that connects to a PostgreSQL database, sets up a table for storing movie information, and includes functions for adding, updating, and deleting movie records. To get started, make sure you have PostgreSQL installed and running on your system, and also install the `psycopg2` library, which is a PostgreSQL adapter for Python. You can install it using pip:\n\n```bash\npip install psycopg2\n```\n\nNow, let's proceed step by step.\n\n### Step 1: Connecting to the PostgreSQL Database\n\nFirst, you need to establish a connection to your PostgreSQL database. You'll need to know your database name, username, password, and the host where your database is running (usually `localhost` if it's on your machine).\n\nHere's a basic example of how to connect to the database:\n\n```python\nimport psycopg2\n\ndef create_conn():\n    try:\n        conn = psycopg2.connect(\n            dbname=\"your_database_name\",\n            user=\"your_username\",\n            password=\"your_password\",\n            host=\"localhost\"\n        )\n        return conn\n    except psycopg2.Error as e:\n        print(f\"Error connecting to database: {e}\")\n        return None\n```\n\nReplace `\"your_database_name\"`, `\"your_username\"`, and `\"your_password\"` with your actual database credentials.\n\n### Step 2: Creating the Movies Table\n\nOnce connected, you can create a table to store movie information. Let's create a table named `movies` with columns for `id`, `title`, `director`, and `release_year`.\n\nHere's how you can do it:\n\n```python\ndef create_table(conn):\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS movies (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        director VARCHAR(255) NOT NULL,\n        release_year INTEGER\n    )\n    \"\"\")\n    conn.commit()\n    print(\"Table created successfully.\")\n```\n\nThis function checks if the `movies` table already exists and creates it if it doesn't. The `id` field is a serial primary key, which increments automatically for each new record.\n\n### Step 3: Adding a Movie\n\nNext, let's create a function to add a new movie to the database.\n\n```python\ndef add_movie(conn, title, director, release_year):\n    cur = conn.cursor()\n    cur.execute(\"INSERT INTO movies (title, director, release_year) VALUES (%s, %s, %s)\", (title, director, release_year))\n    conn.commit()\n    print(\"Movie added successfully.\")\n```\n\nThis function takes the movie's title, director, and release year as parameters and inserts a new row into the `movies` table.\n\n### Step 4: Updating a Movie\n\nNow, let's create a function to update an existing movie's information based on its ID.\n\n```python\ndef update_movie(conn, movie_id, title, director, release_year):\n    cur = conn.cursor()\n    cur.execute(\"UPDATE movies SET title=%s, director=%s, release_year=%s WHERE id=%s\", (title, director, release_year, movie_id))\n    conn.commit()\n    print(\"Movie updated successfully.\")\n```\n\nThis function updates the title, director, and release year of the movie with the specified `movie_id`.\n\n### Step 5: Deleting a Movie\n\nFinally, let's create a function to delete a movie based on its ID.\n\n```python\ndef delete_movie(conn, movie_id):\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM movies WHERE id=%s\", (movie_id,))\n    conn.commit()\n    print(\"Movie deleted successfully.\")\n```\n\nThis function deletes the movie with the specified `movie_id` from the `movies` table.\n\n### Step 6: Putting It All Together\n\nNow, let's put all these functions together in a single script and test them.\n\n```python\nimport psycopg2\n\ndef create_conn():\n    try:\n        conn = psycopg2.connect(\n            dbname=\"your_database_name\",\n            user=\"your_username\",\n            password=\"your_password\",\n            host=\"localhost\"\n        )\n        return conn\n    except psycopg2.Error as e:\n        print(f\"Error connecting to database: {e}\")\n        return None\n\ndef create_table(conn):\n    cur = conn.cursor()\n    cur.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS movies (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        director VARCHAR(255) NOT NULL,\n        release_year INTEGER\n    )\n    \"\"\")\n    conn.commit()\n    print(\"Table created successfully.\")\n\ndef add_movie(conn, title, director, release_year):\n    cur = conn.cursor()\n    cur.execute(\"INSERT INTO movies (title, director, release_year) VALUES (%s, %s, %s)\", (title, director, release_year))\n    conn.commit()\n    print(\"Movie added successfully.\")\n\ndef update_movie(conn, movie_id, title, director, release_year):\n    cur = conn.cursor()\n    cur.execute(\"UPDATE movies SET title=%s, director=%s, release_year=%s WHERE id=%s\", (title, director, release_year, movie_id))\n    conn.commit()\n    print(\"Movie updated successfully.\")\n\ndef delete_movie(conn, movie_id):\n    cur = conn.cursor()\n    cur.execute(\"DELETE FROM movies WHERE id=%s\", (movie_id,))\n    conn.commit()\n    print(\"Movie deleted successfully.\")\n\nif __name__ == \"__main__\":\n    conn = create_conn()\n    if conn:\n        create_table(conn)\n        \n        # Adding a movie\n        add_movie(conn, \"Inception\", \"Christopher Nolan\", 2010)\n        \n        # Updating a movie\n        update_movie(conn, 1, \"Inception\", \"Christopher Nolan\", 2011)\n        \n        # Deleting a movie\n        delete_movie(conn, 1)\n        \n        conn.close()\n    else:\n        print(\"Failed to connect to the database.\")\n```\n\n### Explanation\n\n1. **Connecting to the Database:** The `create_conn` function establishes a connection to the PostgreSQL database using the provided credentials.\n2. **Creating the Table:** The `create_table` function creates a table named `movies` if it doesn't already exist.\n3. **Adding a Movie:** The `add_movie` function inserts a new movie record into the `movies` table.\n4. **Updating a Movie:** The `update_movie` function updates an existing movie record based on its ID.\n5. **Deleting a Movie:** The `delete_movie` function deletes a movie record based on its ID.\n6. **Main Block:** In the `if __name__ == \"__main__\":` block, we connect to the database, create the table, and perform add, update, and delete operations as demonstrations.\n\nMake sure to replace the database connection details with your actual credentials. Also, handle the database connection carefully to avoid leaks; always close the connection when you're done.\n\nThis script provides a basic framework for interacting with a PostgreSQL database using Python. You can expand upon this by adding more functions, error handling, and perhaps a user interface for easier interaction."
    }
]