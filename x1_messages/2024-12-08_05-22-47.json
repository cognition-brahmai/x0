[
    {
        "role": "user",
        "content": "Implement a Java class representing a simple stack data structure with push, pop, and peek methods.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a stack in Java is straightforward. A stack is a Last-In-First-Out (LIFO) data structure, and we can create one using an array or a list. For this example, I'll use an ArrayList from the Java Collections framework because it's dynamic and easy to handle.\n\nHere's a simple implementation of a stack in Java with push, pop, and peek methods:\n\n```java\nimport java.util.ArrayList;\nimport java.util.EmptyStackException;\n\npublic class SimpleStack<T> {\n    private ArrayList<T> stack;\n\n    public SimpleStack() {\n        stack = new ArrayList<>();\n    }\n\n    // Push an item onto the stack\n    public void push(T item) {\n        stack.add(item);\n    }\n\n    // Remove and return the top item from the stack\n    public T pop() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.remove(stack.size() - 1);\n    }\n\n    // Return the top item without removing it\n    public T peek() {\n        if (isEmpty()) {\n            throw new EmptyStackException();\n        }\n        return stack.get(stack.size() - 1);\n    }\n\n    // Check if the stack is empty\n    public boolean isEmpty() {\n        return stack.isEmpty();\n    }\n\n    // Get the number of items in the stack\n    public int size() {\n        return stack.size();\n    }\n}\n```\n\n### Explanation:\n\n1. **Class Definition**: `SimpleStack<T>` is a generic class, allowing it to store any type of object.\n2. **ArrayList Initialization**: An ArrayList is used to store the stack elements.\n3. **Push Method**: Adds an item to the top of the stack.\n4. **Pop Method**: Removes and returns the top item from the stack. Throws `EmptyStackException` if the stack is empty.\n5. **Peek Method**: Returns the top item without removing it. Also throws `EmptyStackException` if the stack is empty.\n6. **IsEmpty Method**: Checks if the stack is empty.\n7. **Size Method**: Returns the number of items in the stack.\n\nThis implementation is simple and effective for most use cases. If you need a more efficient implementation with faster push and pop operations, you might consider using a linked list, but for simplicity, an ArrayList works just fine.\n\nLet me know if you have any questions or need further clarification!"
    }
]