[
    {
        "role": "user",
        "content": "Write a bash script that checks if a given website is up or down. The script should:\n   - Accept a URL as a command line argument.\n   - Send an HTTP request to the provided URL and check the response status code.\n   - Print a message indicating whether the website is up (status code 200) or down (any other status code).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a bash script that checks if a given website is up or down based on its HTTP status code. We'll use the `curl` command for sending the HTTP request and checking the response.\n\nFirst, make sure you have `curl` installed on your system. It's a widely used tool for making HTTP requests from the command line.\n\nHere's a step-by-step guide to create the script:\n\n1. **Create the script file:**\n   Open your favorite text editor and create a new file, let's name it `check_website.sh`.\n\n2. **Add the shebang line:**\n   The first line of the script should be `#!/bin/bash`, which tells the system that this script should be run using Bash.\n\n3. **Check for the URL argument:**\n   We need to ensure that the user provides a URL as a command-line argument. We can check if the argument is present and display an error message if it's missing.\n\n4. **Send an HTTP request:**\n   Use `curl` to send a HEAD request to the provided URL. The HEAD method is sufficient for checking the status code without downloading the entire content.\n\n5. **Check the status code:**\n   Use `curl` with the `-s` (silent), `-o` (output to a file), and `-w` (custom output format) options to capture the HTTP status code.\n\n6. **Print the result:**\n   Based on the status code, print whether the website is up (status code 200) or down (any other status code).\n\nHere's how the script would look:\n\n```bash\n#!/bin/bash\n\n# Check if a URL is provided as an argument\nif [ -z \"$1\" ]; then\n    echo \"Usage: $0 URL\"\n    exit 1\nfi\n\nurl=$1\n\n# Send a HEAD request and get the HTTP status code\nstatus_code=$(curl -s -o /dev/null -w \"%{http_code}\" \"$url\")\n\n# Check the status code and print the result\nif [ \"$status_code\" -eq 200 ]; then\n    echo \"Website is up (Status code: $status_code)\"\nelse\n    echo \"Website is down (Status code: $status_code)\"\nfi\n```\n\n### Explanation:\n\n- **Shebang (`#!/bin/bash`):** Specifies the interpreter for the script.\n- **Argument Check:** Ensures that a URL is provided; otherwise, displays usage and exits.\n- **`curl` Command:**\n  - `-s`: Silent mode to suppress output.\n  - `-o /dev/null`: Discards the output.\n  - `-w \"%{http_code}\"`: Writes the HTTP status code to stdout.\n- **Condition Check:** Compares the status code to 200 and prints the appropriate message.\n\n### How to Use:\n\n1. **Make the script executable:**\n   ```bash\n   chmod +x check_website.sh\n   ```\n\n2. **Run the script with a URL:**\n   ```bash\n   ./check_website.sh https://www.example.com\n   ```\n\nThis script will tell you if the website is up or down based on the HTTP status code received from the server.\n\nI hope this helps! Let me know if you have any questions or need further assistance."
    }
]