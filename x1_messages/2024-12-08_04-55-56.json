[
    {
        "role": "user",
        "content": "Create an HTML/CSS/JavaScript single-page application (SPA) that displays a list of items fetched from a public API (e.g., https://jsonplaceholder.typicode.com/posts). Implement pagination with 10 items per page and allow users to filter the list based on keywords entered in a search box.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a single-page application that displays a list of items from a public API, specifically https://jsonplaceholder.typicode.com/posts. I need to implement pagination with 10 items per page and also add a search functionality so users can filter the list based on keywords.\n\nFirst, I need to understand what a single-page application (SPA) is. An SPA is a web application or website that interacts with the user by dynamically rewriting the current page rather than loading entire new pages from a server. This makes the application feel more responsive and smooth.\n\nOkay, so I need to create an HTML file that will serve as the structure of my page. I'll also need CSS for styling and JavaScript to handle the logic, including fetching data from the API, handling pagination, and filtering the list.\n\nLet me start by sketching out the basic structure of the HTML file.\n\n## Final Solution\nTo create a single-page application (SPA) that displays a list of items fetched from a public API with pagination and search functionality, follow these steps:\n\n### Approach\n\n1. **HTML Structure**:\n   - Create a container for the list of items.\n   - Add a search input field for filtering items.\n   - Include pagination controls.\n\n2. **CSS Styling**:\n   - Style the list, search input, and pagination controls for better usability.\n\n3. **JavaScript Logic**:\n   - Fetch data from the API.\n   - Implement pagination to display 10 items per page.\n   - Add search functionality to filter items based on keywords.\n\n### Solution Code\n\n#### index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>API Item List</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"container\">\n        <h1>Item List</h1>\n        <input type=\"text\" id=\"searchInput\" placeholder=\"Search by title...\">\n        <ul id=\"itemList\"></ul>\n        <div id=\"pagination\">\n            <button id=\"prevPage\" disabled>&lt; Previous</button>\n            <span id=\"pageInfo\">Page 1 of X</span>\n            <button id=\"nextPage\">&gt; Next</button>\n        </div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n#### styles.css\n\n```css\nbody {\n    font-family: Arial, sans-serif;\n    background-color: #f4f4f4;\n    margin: 0;\n    padding: 0;\n}\n\n.container {\n    width: 80%;\n    margin: 0 auto;\n    overflow: auto;\n    padding: 20px;\n    background-color: #fff;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n}\n\nh1 {\n    text-align: center;\n    color: #333;\n}\n\n#searchInput {\n    width: 100%;\n    padding: 10px;\n    margin-bottom: 20px;\n    box-sizing: border-box;\n}\n\nul {\n    list-style-type: none;\n    padding: 0;\n}\n\nli {\n    padding: 15px;\n    background-color: #f9f9f9;\n    margin-bottom: 10px;\n    border-left: 5px solid #007BFF;\n}\n\n#pagination {\n    display: flex;\n    justify-content: center;\n    margin-top: 20px;\n}\n\nbutton {\n    padding: 10px 20px;\n    border: none;\n    background-color: #007BFF;\n    color: white;\n    cursor: pointer;\n}\n\nbutton[disabled] {\n    background-color: #ccc;\n    cursor: not-allowed;\n}\n\n#pageInfo {\n    margin: 0 20px;\n}\n```\n\n#### script.js\n\n```javascript\nconst apiUrl = 'https://jsonplaceholder.typicode.com/posts';\nconst itemsPerPage = 10;\nlet currentPage = 1;\nlet items = [];\nlet filteredItems = [];\n\nasync function fetchItems() {\n    try {\n        const response = await fetch(apiUrl);\n        items = await response.json();\n        filteredItems = items;\n        updatePagination();\n        displayItems();\n    } catch (error) {\n        console.error('Error fetching items:', error);\n    }\n}\n\nfunction displayItems() {\n    const startIndex = (currentPage - 1) * itemsPerPage;\n    const endIndex = startIndex + itemsPerPage;\n    const itemsToDisplay = filteredItems.slice(startIndex, endIndex);\n\n    const itemList = document.getElementById('itemList');\n    itemList.innerHTML = '';\n\n    itemsToDisplay.forEach(item => {\n        const li = document.createElement('li');\n        li.textContent = item.title;\n        itemList.appendChild(li);\n    });\n}\n\nfunction updatePagination() {\n    const totalPages = Math.ceil(filteredItems.length / itemsPerPage);\n    document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages}`;\n\n    const prevPageBtn = document.getElementById('prevPage');\n    const nextPageBtn = document.getElementById('nextPage');\n\n    prevPageBtn.disabled = currentPage === 1;\n    nextPageBtn.disabled = currentPage === totalPages;\n}\n\nfunction updatePage(newPage) {\n    currentPage = newPage;\n    displayItems();\n    updatePagination();\n}\n\ndocument.getElementById('searchInput').addEventListener('input', function (e) {\n    const query = e.target.value.toLowerCase();\n    filteredItems = items.filter(item => item.title.toLowerCase().includes(query));\n    currentPage = 1;\n    updatePagination();\n    displayItems();\n});\n\ndocument.getElementById('prevPage').addEventListener('click', function () {\n    if (currentPage > 1) {\n        updatePage(currentPage - 1);\n    }\n});\n\ndocument.getElementById('nextPage').addEventListener('click', function () {\n    const totalPages = Math.ceil(filteredItems.length / itemsPerPage);\n    if (currentPage < totalPages) {\n        updatePage(currentPage + 1);\n    }\n});\n\nfetchItems();\n```\n\n### Explanation\n\n1. **HTML Structure**:\n   - The HTML file sets up the basic structure including a search input, item list, and pagination controls.\n\n2. **CSS Styling**:\n   - The CSS file styles the container, list items, search input, and pagination buttons for better readability and usability.\n\n3. **JavaScript Logic**:\n   - Fetches data from the API and stores it in the `items` array.\n   - Implements pagination to display 10 items per page.\n   - Filters the list based on keywords entered in the search input.\n   - Updates the pagination controls based on the current page and total pages.\n\nThis solution provides a fully functional SPA that fetches data from an API, displays it with pagination, and allows users to search through the list dynamically."
    }
]