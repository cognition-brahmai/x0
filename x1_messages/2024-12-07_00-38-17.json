[
    {
        "role": "user",
        "content": "Create a Python script that implements the quicksort algorithm for sorting a list of integers.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Python script that implements the quicksort algorithm for sorting a list of integers:\n\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Example usage:\narr = [3,6,8,10,1,2,1]\nprint(\"Unsorted array:\", arr)\nsorted_arr = quicksort(arr)\nprint(\"Sorted array:\", sorted_arr)\n```\n\nThis script defines a function called `quicksort` that takes a list of integers as input and returns a new list with the integers sorted in ascending order. The function uses the quicksort algorithm, which works by selecting a pivot element from the list and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted.\n\nIn this implementation, the pivot is chosen as the middle element of the list. The function then creates three lists: `left`, which contains all elements less than the pivot; `middle`, which contains all elements equal to the pivot; and `right`, which contains all elements greater than the pivot. The function then recursively sorts the `left` and `right` lists and concatenates the sorted lists with the `middle` list to produce the final sorted list.\n\nThe script also includes an example usage of the `quicksort` function, where a sample list of integers is sorted and the original and sorted lists are printed to the console."
    }
]