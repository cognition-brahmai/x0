[
    {
        "role": "user",
        "content": "Create a Java class that implements a stack data structure using an array. The class should have methods for push, pop, peek, and checking if the stack is empty."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in Java using an array. This class includes methods for push, pop, peek, and checking if the stack is empty.\n\n```java\npublic class ArrayStack {\n    private int maxSize;\n    private int top;\n    private int[] stackArray;\n\n    // Constructor to initialize the stack with a given size\n    public ArrayStack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n\n    // Method to add an element to the stack\n    public void push(int value) {\n        if (top < maxSize - 1) {\n            top++;\n            stackArray[top] = value;\n        } else {\n            System.out.println(\"Stack is full. Cannot push \" + value);\n        }\n    }\n\n    // Method to remove and return the top element from the stack\n    public int pop() {\n        if (!isEmpty()) {\n            int poppedValue = stackArray[top];\n            top--;\n            return poppedValue;\n        } else {\n            System.out.println(\"Stack is empty. Cannot pop.\");\n            return -1; // Assuming -1 as an error value\n        }\n    }\n\n    // Method to return the top element without removing it\n    public int peek() {\n        if (!isEmpty()) {\n            return stackArray[top];\n        } else {\n            System.out.println(\"Stack is empty. Cannot peek.\");\n            return -1; // Assuming -1 as an error value\n        }\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Main method for testing the stack operations\n    public static void main(String[] args) {\n        ArrayStack stack = new ArrayStack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        stack.push(6); // Should print \"Stack is full. Cannot push 6\"\n\n        System.out.println(\"Top element is: \" + stack.peek()); // Should print 5\n\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop(); // Should print \"Stack is empty. Cannot pop.\"\n\n        System.out.println(\"Is stack empty? \" + stack.isEmpty()); // Should print true\n    }\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `ArrayStack` class is defined to represent the stack.\n\n2. **Attributes:**\n   - `maxSize`: The maximum size of the stack.\n   - `top`: Index of the top element in the stack.\n   - `stackArray`: Array to store the stack elements.\n\n3. **Constructor:**\n   - Initializes the stack with a given size.\n   - Sets `top` to -1 indicating that the stack is empty.\n\n4. **Push Operation:**\n   - Adds an element to the top of the stack if the stack is not full.\n   - Prints a message if the stack is full.\n\n5. **Pop Operation:**\n   - Removes and returns the top element of the stack if the stack is not empty.\n   - Prints a message and returns -1 if the stack is empty.\n\n6. **Peek Operation:**\n   - Returns the top element without removing it if the stack is not empty.\n   - Prints a message and returns -1 if the stack is empty.\n\n7. **IsEmpty Operation:**\n   - Returns true if the stack is empty, otherwise false.\n\n8. **Main Method:**\n   - Demonstrates the usage of the stack by performing push, pop, peek operations and checking if the stack is empty."
    }
]