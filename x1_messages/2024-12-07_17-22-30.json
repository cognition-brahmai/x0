[
    {
        "role": "user",
        "content": "Write a Python script that connects to a MySQL database, creates a table called \"employees\" with columns for employee ID, name, department, and salary, and inserts sample data into the table. The script should also include a function to query the database and return the average salary for a given department."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Python and MySQL task. Let's break it down step by step.\n\nFirst, you'll need to make sure you have the MySQL connector for Python installed. You can install it using pip if you haven't already:\n\n```bash\npip install mysql-connector-python\n```\n\nNow, let's start by setting up the connection to your MySQL database. You'll need to know the host, user, password, and the name of the database you're connecting to. Here's a basic example of how to connect:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n```\n\nReplace `'your_host'`, `'your_user'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n\nNext, you need to create a table named \"employees\" with the specified columns: employee ID, name, department, and salary. You can do this by executing an SQL `CREATE TABLE` statement.\n\nHere's how you can define the table creation:\n\n```python\ndef create_employees_table(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS employees (\n        employee_id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(100),\n        department VARCHAR(50),\n        salary DECIMAL(10, 2)\n    )\n    \"\"\")\n    connection.commit()\n    cursor.close()\n```\n\nThis function creates the \"employees\" table if it doesn't already exist. The `employee_id` is set as an auto-increment primary key, which means it will automatically generate a unique ID for each new employee.\n\nNow, let's insert some sample data into the \"employees\" table. You can do this with an SQL `INSERT INTO` statement.\n\nHere's an example of how to insert sample data:\n\n```python\ndef insert_sample_data(connection):\n    sample_employees = [\n        ('John Doe', 'Finance', 70000),\n        ('Jane Smith', 'IT', 80000),\n        ('Alice Johnson', 'HR', 65000),\n        ('Bob Brown', 'Finance', 75000),\n        ('Charlie Davis', 'IT', 85000)\n    ]\n    \n    cursor = connection.cursor()\n    query = \"INSERT INTO employees (name, department, salary) VALUES (%s, %s, %s)\"\n    cursor.executemany(query, sample_employees)\n    connection.commit()\n    cursor.close()\n```\n\nThis function inserts a list of tuples, each representing an employee's name, department, and salary.\n\nFinally, you need a function to query the database and return the average salary for a given department.\n\nHere's how you can achieve that:\n\n```python\ndef get_average_salary(connection, department):\n    cursor = connection.cursor()\n    query = \"SELECT AVG(salary) FROM employees WHERE department = %s\"\n    cursor.execute(query, (department,))\n    result = cursor.fetchone()\n    cursor.close()\n    return result[0] if result else None\n```\n\nThis function takes a department name as input, executes a SQL query to calculate the average salary for that department, and returns the result. If no employees are found in the department, it returns `None`.\n\nNow, let's put it all together in a complete script:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n\ndef create_employees_table(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS employees (\n        employee_id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(100),\n        department VARCHAR(50),\n        salary DECIMAL(10, 2)\n    )\n    \"\"\")\n    connection.commit()\n    cursor.close()\n\ndef insert_sample_data(connection):\n    sample_employees = [\n        ('John Doe', 'Finance', 70000),\n        ('Jane Smith', 'IT', 80000),\n        ('Alice Johnson', 'HR', 65000),\n        ('Bob Brown', 'Finance', 75000),\n        ('Charlie Davis', 'IT', 85000)\n    ]\n    \n    cursor = connection.cursor()\n    query = \"INSERT INTO employees (name, department, salary) VALUES (%s, %s, %s)\"\n    cursor.executemany(query, sample_employees)\n    connection.commit()\n    cursor.close()\n\ndef get_average_salary(connection, department):\n    cursor = connection.cursor()\n    query = \"SELECT AVG(salary) FROM employees WHERE department = %s\"\n    cursor.execute(query, (department,))\n    result = cursor.fetchone()\n    cursor.close()\n    return result[0] if result else None\n\nif __name__ == \"__main__\":\n    conn = create_connection()\n    if conn.is_connected():\n        create_employees_table(conn)\n        insert_sample_data(conn)\n        department = 'IT'\n        avg_salary = get_average_salary(conn, department)\n        print(f\"The average salary in {department} is: {avg_salary}\")\n        conn.close()\n    else:\n        print(\"Connection failed.\")\n```\n\nMake sure to replace the placeholder values in `create_connection()` with your actual database credentials.\n\nThis script will connect to your MySQL database, create the \"employees\" table, insert sample data, and then calculate and print the average salary for the 'IT' department.\n\nYou can modify the `department` variable to calculate the average salary for different departments.\n\nI hope this helps! Let me know if you have any questions or need further assistance."
    }
]