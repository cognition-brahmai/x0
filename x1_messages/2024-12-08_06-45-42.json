[
    {
        "role": "user",
        "content": "Implement a binary search tree data structure in C# with insert, delete, and search operations."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a binary search tree (BST) in C# that includes methods for insertion, deletion, and searching.\n\n```csharp\nusing System;\n\npublic class TreeNode\n{\n    public int Key;\n    public TreeNode Left;\n    public TreeNode Right;\n\n    public TreeNode(int key)\n    {\n        Key = key;\n        Left = null;\n        Right = null;\n    }\n}\n\npublic class BinarySearchTree\n{\n    private TreeNode root;\n\n    public BinarySearchTree()\n    {\n        root = null;\n    }\n\n    // Insert a new node with the given key\n    public void Insert(int key)\n    {\n        root = InsertRec(root, key);\n    }\n\n    // Helper method to insert a node recursively\n    private TreeNode InsertRec(TreeNode root, int key)\n    {\n        if (root == null)\n        {\n            root = new TreeNode(key);\n            return root;\n        }\n\n        if (key < root.Key)\n        {\n            root.Left = InsertRec(root.Left, key);\n        }\n        else if (key > root.Key)\n        {\n            root.Right = InsertRec(root.Right, key);\n        }\n\n        return root;\n    }\n\n    // Delete a node with the given key\n    public void Delete(int key)\n    {\n        root = DeleteRec(root, key);\n    }\n\n    // Helper method to delete a node recursively\n    private TreeNode DeleteRec(TreeNode root, int key)\n    {\n        if (root == null) return root;\n\n        if (key < root.Key)\n        {\n            root.Left = DeleteRec(root.Left, key);\n        }\n        else if (key > root.Key)\n        {\n            root.Right = DeleteRec(root.Right, key);\n        }\n        else\n        {\n            // Node with only one child or no child\n            if (root.Left == null)\n            {\n                return root.Right;\n            }\n            else if (root.Right == null)\n            {\n                return root.Left;\n            }\n\n            // Node with two children: get the inorder successor (smallest in the right subtree)\n            root.Key = MinValue(root.Right);\n\n            // Delete the inorder successor\n            root.Right = DeleteRec(root.Right, root.Key);\n        }\n\n        return root;\n    }\n\n    // Find the minimum key value in a tree\n    private int MinValue(TreeNode root)\n    {\n        int minValue = root.Key;\n        while (root.Left != null)\n        {\n            minValue = root.Left.Key;\n            root = root.Left;\n        }\n        return minValue;\n    }\n\n    // Search for a node with the given key\n    public bool Search(int key)\n    {\n        return SearchRec(root, key);\n    }\n\n    // Helper method to search for a node recursively\n    private bool SearchRec(TreeNode root, int key)\n    {\n        if (root == null)\n        {\n            return false;\n        }\n\n        if (root.Key == key)\n        {\n            return true;\n        }\n\n        if (key < root.Key)\n        {\n            return SearchRec(root.Left, key);\n        }\n        else\n        {\n            return SearchRec(root.Right, key);\n        }\n    }\n}\n\nclass Program\n{\n    static void Main()\n    {\n        BinarySearchTree tree = new BinarySearchTree();\n\n        // Insert elements\n        tree.Insert(50);\n        tree.Insert(30);\n        tree.Insert(20);\n        tree.Insert(40);\n        tree.Insert(70);\n        tree.Insert(60);\n        tree.Insert(80);\n\n        // Search elements\n        Console.WriteLine(tree.Search(20)); // true\n        Console.WriteLine(tree.Search(100)); // false\n\n        // Delete elements\n        tree.Delete(20);\n        Console.WriteLine(tree.Search(20)); // false\n        tree.Delete(30);\n        Console.WriteLine(tree.Search(30)); // false\n        tree.Delete(50);\n        Console.WriteLine(tree.Search(50)); // false\n    }\n}\n```\n\n### Explanation\n\n1. **TreeNode Class**: Represents a node in the BST, containing a key value and references to left and right child nodes.\n2. **BinarySearchTree Class**: Manages the BST operations.\n   - **Insert**: Inserts a new node with the given key.\n   - **Delete**: Deletes a node with the given key.\n   - **Search**: Searches for a node with the given key.\n3. **Helper Methods**:\n   - **InsertRec**: Recursively inserts a new node.\n   - **DeleteRec**: Recursively deletes a node.\n   - **MinValue**: Finds the minimum key value in a subtree.\n   - **SearchRec**: Recursively searches for a node.\n\nThis implementation ensures that the BST properties are maintained during insertions and deletions."
    }
]