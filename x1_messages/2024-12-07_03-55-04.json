[
    {
        "role": "user",
        "content": "Write a Golang application that uses the Gorilla WebSocket library to create a real-time chat server. The server should support multiple clients connecting simultaneously, broadcasting messages to all connected clients, and gracefully handling client disconnections.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through building a real-time chat server using Go and the Gorilla WebSocket library. This server will allow multiple clients to connect, send messages that are broadcast to all connected clients, and handle disconnections gracefully.\n\n### Step 1: Set Up Your Go Environment\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). After installation, set up your GOPATH and make sure your environment is ready.\n\n### Step 2: Install Gorilla WebSocket Library\n\nWe'll use the Gorilla WebSocket library for handling WebSocket connections. To install it, run:\n\n```sh\ngo get github.com/gorilla/websocket\n```\n\n### Step 3: Create the Project Structure\n\nCreate a new directory for your project and set up the basic structure:\n\n```\nchat-server/\n\u2502\n\u251c\u2500\u2500 main.go\n\u2514\u2500\u2500 web/\n    \u2514\u2500\u2500 index.html\n```\n\n### Step 4: Implement the Server Logic\n\nOpen `main.go` and set up the basic server structure.\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar addr = flag.String(\"addr\", \"localhost:8080\", \"http service address\")\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n}\n\ntype client struct {\n\tconn *websocket.Conn\n\tsend chan []byte\n}\n\nvar (\n\tclients  map[*client]bool\n\tbroadcast = make(chan []byte)\n\tregister  = make(chan *client)\n\tunregister = make(chan *client)\n)\n\nfunc main() {\n\tflag.Parse()\n\thttp.HandleFunc(\"/\", handler)\n\thttp.HandleFunc(\"/ws\", websocketHandler)\n\thttp.Handle(\"/static/\", http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"web\"))))\n\tgo broadcastMessages()\n\tlog.Fatal(http.ListenAndServe(*addr, nil))\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\thttp.ServeFile(w, r, \"web/index.html\")\n}\n\nfunc websocketHandler(w http.ResponseWriter, r *http.Request) {\n\tconn, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Print(\"upgrade:\", err)\n\t\treturn\n\t}\n\tclient := &client{conn: conn, send: make(chan []byte, 256)}\n\tclients[client] = true\n\tgo client.writePump()\n\tregister <- client\n\tfor {\n\t\t_, message, err := client.conn.ReadMessage()\n\t\tif err != nil {\n\t\t\tunregister <- client\n\t\t\tdelete(clients, client)\n\t\t\tclient.conn.Close()\n\t\t\tbreak\n\t\t}\n\t\tbroadcast <- message\n\t}\n}\n\nfunc broadcastMessages() {\n\tfor {\n\t\tselect {\n\t\tcase client := <-register:\n\t\t\tclients[client] = true\n\t\tcase client := <-unregister:\n\t\t\tif _, ok := clients[client]; ok {\n\t\t\t\tdelete(clients, client)\n\t\t\t\tclose(client.send)\n\t\t\t}\n\t\tcase message := <-broadcast:\n\t\t\tfor client := range clients {\n\t\t\t\tselect {\n\t\t\t\tcase client.send <- message:\n\t\t\t\tdefault:\n\t\t\t\t\tunregister <- client\n\t\t\t\t\tdelete(clients, client)\n\t\t\t\t\tclose(client.send)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc (c *client) writePump() {\n\tfor {\n\t\tselect {\n\t\tcase message, ok := <-c.send:\n\t\t\tif !ok {\n\t\t\t\tc.conn.Close()\n\t\t\t\treturn\n\t\t\t}\n\t\t\terr := c.conn.WriteMessage(websocket.TextMessage, message)\n\t\t\tif err != nil {\n\t\t\t\treturn\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Step 5: Create the Client Interface\n\nCreate an `index.html` file in the `web` directory to serve as the client interface.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Chat Server</title>\n    <style>\n        #chat {\n            height: 300px;\n            width: 400px;\n            border: 1px solid #000;\n            overflow-y: scroll;\n        }\n    </style>\n</head>\n<body>\n    <div id=\"chat\"></div>\n    <input id=\"input\" type=\"text\" />\n    <button onclick=\"sendMessage()\">Send</button>\n\n    <script>\n        const socket = new WebSocket(\"ws://\" + location.host + \"/ws\");\n        const chat = document.getElementById(\"chat\");\n        const input = document.getElementById(\"input\");\n\n        socket.onmessage = function(event) {\n            const message = document.createElement(\"div\");\n            message.textContent = event.data;\n            chat.appendChild(message);\n            chat.scrollTop = chat.scrollHeight;\n        };\n\n        function sendMessage() {\n            const message = input.value;\n            socket.send(message);\n            input.value = \"\";\n        }\n\n        socket.onopen = function() {\n            console.log(\"Connected to server\");\n        };\n\n        socket.onclose = function() {\n            console.log(\"Disconnected from server\");\n        };\n    </script>\n</body>\n</html>\n```\n\n### Step 6: Run the Server\n\nRun your server using:\n\n```sh\ngo run main.go\n```\n\nOpen your browser and navigate to `http://localhost:8080`. You should see a simple chat interface where you can send and receive messages in real-time.\n\n### Explanation\n\n1. **Server Setup**: We set up an HTTP server that serves the chat interface and handles WebSocket connections.\n2. **WebSocket Handling**: The `/ws` endpoint upgrades HTTP connections to WebSocket connections.\n3. **Client Management**: We manage connected clients in a map and broadcast messages to all connected clients.\n4. **Graceful Disconnection**: We handle client disconnections by removing them from the client list and closing their send channel.\n5. **Client Interface**: A simple HTML page with JavaScript to handle sending and receiving messages via WebSocket.\n\nThis setup provides a basic real-time chat server that can be expanded with more features like user authentication, private messaging, and more."
    }
]