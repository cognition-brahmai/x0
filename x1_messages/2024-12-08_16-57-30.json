[
    {
        "role": "user",
        "content": "Develop a Python script that accepts a URL as input and retrieves the HTML content of the webpage using the requests library. Print the status code and the first 100 characters of the retrieved content. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that takes a URL as input, fetches the HTML content of that webpage using the `requests` library, and then prints out the status code along with the first 100 characters of the content. Sounds straightforward, but I need to make sure I cover all the bases here.\n\nFirst things first, I need to make sure that I have the `requests` library installed because it's not part of Python's standard library. I can install it using pip if it's not already available. So, in the script, I should probably include a note about that, but since it's a script, maybe I'll just assume that the user has it installed.\n\nNext, I need to accept a URL as input from the user. That means using the `input()` function to get the URL. I should probably add some instructions to tell the user what to enter, like \"Please enter the URL: \". So, something like `url = input(\"Please enter the URL: \")`.\n\nNow, I need to use the `requests` library to get the content from that URL. I'll use `requests.get(url)` to send a GET request to the URL. But, I should handle possible exceptions here, like if the URL is invalid or if there's no internet connection. So, I'll put this in a try-except block.\n\nIn the try block, I'll make the request and store the response in a variable, say `response`. Then, I can get the status code using `response.status_code` and the content using `response.text`.\n\nAfter that, I need to print the status code and the first 100 characters of the content. So, I'll print the status code directly, and for the content, I'll use slicing to get the first 100 characters: `response.text[:100]`.\n\nBut, I should also think about edge cases. What if the content is less than 100 characters? Well, slicing will handle that gracefully, so it's fine. What if the URL doesn't exist or there's an error connecting? That's why I need that try-except block to catch exceptions like `requests.exceptions.RequestException`.\n\nIn the except block, I'll print an error message informing the user that there was a problem with the request, perhaps something like \"An error occurred: \" followed by the specific error message.\n\nAlso, I should consider if the user enters a URL without \"http://\" or \"https://\". Should I handle that? Maybe I can prepend \"http://\" if the URL doesn't start with it, but that might not always be correct, as some sites use HTTPS. Maybe it's better to assume that the user enters a full, valid URL.\n\nAnother thing to consider is that some websites might block requests from scripts by checking the User-Agent header. To make the request look more like it's coming from a web browser, I can set a custom User-Agent header in the request. For example:\n\n```\nheaders = {\n    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'\n}\nresponse = requests.get(url, headers=headers)\n```\n\nThis might help avoid getting blocked, but it's not always necessary.\n\nAdditionally, I should think about handling different encodings. By default, `requests` tries to decode the content based on the HTTP headers, but sometimes it might not get it right. For now, I'll stick with the default behavior.\n\nLastly, I should make sure that the script is user-friendly and provides clear outputs. So, I'll format the output nicely, perhaps something like:\n\n```\nStatus code: 200\nFirst 100 characters of the content:\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n<meta charset=\"UTF-8\">\n<title>Example Domain</title>\n```\n\nWait, but that might not always be HTML. Some URLs might return other types of content, like JSON or plain text. But since the task specifies HTML content, I'll assume it's HTML.\n\nAlright, let's outline the steps again:\n\n1. Import the `requests` library.\n\n2. Prompt the user to enter a URL.\n\n3. Use `requests.get(url)` to fetch the content.\n\n4. Handle any exceptions that might occur during the request.\n\n5. Print the status code.\n\n6. Print the first 100 characters of the content.\n\nI should also consider adding a main function or a if __name__ == \"__main__\": block to ensure that the script runs correctly when executed directly.\n\nLet me think about writing some pseudocode to organize this:\n\n```\n\nimport requests\n\ndef main():\n\nprint(\"URL Content Fetcher\")\n\nurl = input(\"Please enter the URL: \")\n\ntry:\n\nresponse = requests.get(url)\n\nprint(\"Status code:\", response.status_code)\n\nprint(\"First 100 characters of the content:\n\n\", response.text[:100])\n\nexcept requests.exceptions.RequestException as e:\n\nprint(\"An error occurred:\", e)\n\nif __name__ == \"__main__\":\n\nmain()\n\n```\n\nThat looks pretty good. Now, I need to think about any potential improvements or additional features. Maybe I can add options to save the content to a file or to follow redirects. But for the sake of simplicity, and since the task is to just fetch and print, I'll keep it as is.\n\nWait, but I should consider if the URL needs to be formatted in any way. For example, removing trailing spaces or encoding special characters. `requests.get()` should handle the URL as is, so I might not need to do extra formatting.\n\nAlso, I should think about the possibility of the page requiring authentication or specific headers. But again, for this simple script, I'll assume that the URL can be accessed anonymously.\n\nLet me consider writing a small test to verify if the script works. For example, using a known URL like \"https://www.example.com\" and checking if it prints the status code 200 and the first 100 characters of the HTML.\n\nYeah, that should work.\n\nAnother thing: since we're dealing with URLs and web requests, I should make sure that the script handles different types of URLs correctly, like those with query parameters or fragments. But again, `requests.get()` should handle them appropriately.\n\nI think that's enough for now. I can proceed to write the actual script based on this plan.\n\n## Final Solution\nTo accomplish the task of fetching and displaying the HTML content of a webpage from a given URL, we will use the `requests` library in Python. This script will accept a URL as input, retrieve the HTML content, and print the HTTP status code along with the first 100 characters of the retrieved content.\n\n### Solution Code\n\n```python\nimport requests\n\ndef main():\n    print(\"URL Content Fetcher\")\n    url = input(\"Please enter the URL: \")\n    \n    try:\n        response = requests.get(url)\n        print(\"Status code:\", response.status_code)\n        print(\"First 100 characters of the content:\\n\", response.text[:100])\n    except requests.exceptions.RequestException as e:\n        print(\"An error occurred:\", e)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Import the Requests Library**:\n   - The `requests` library is used to send HTTP requests and handle the responses.\n\n2. **Prompt User for URL**:\n   - The script prompts the user to enter a URL using the `input` function.\n\n3. **Send HTTP GET Request**:\n   - The `requests.get(url)` function is used to send a GET request to the specified URL.\n   - The response from the request is stored in the `response` variable.\n\n4. **Handle Exceptions**:\n   - The script uses a try-except block to catch any exceptions that may occur during the request, such as network problems or invalid URLs.\n   - If an exception occurs, it prints an error message indicating the issue.\n\n5. **Print Status Code and Content**:\n   - The status code of the response is printed using `response.status_code`.\n   - The first 100 characters of the HTML content are printed using `response.text[:100]`.\n\nThis script provides a simple way to check the response from a webpage and view a portion of its content directly from the command line."
    }
]