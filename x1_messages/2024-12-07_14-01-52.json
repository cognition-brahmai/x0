[
    {
        "role": "user",
        "content": "In C language, write a program to implement a stack data structure using linked lists. The program should include functions for push, pop, peek (top element), and checking if the stack is empty."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write a C program that implements a stack using linked lists. I need to make sure I include functions for push, pop, peek, and checking if the stack is empty. Let's start by understanding what a stack is and how it works.\n\nA stack is a linear data structure that follows the Last In, First Out (LIFO) principle, meaning the last element added is the first one to be removed. In this implementation, I'll use a linked list because it allows dynamic growth and efficient additions and removals from the top.\n\nFirst, I need to define the structure for the nodes in the linked list. Each node should hold the data and a pointer to the next node. Since I'm implementing a generic stack, I'll assume the data type is an integer for simplicity.\n\nNext, I need to define the structure for the stack itself, which will hold a pointer to the top node.\n\nNow, let's think about the functions:\n\n1. **Push**: This function will add a new element to the top of the stack. To do this, I need to create a new node with the given data and make it the new top by pointing its next pointer to the current top.\n\n2. **Pop**: This function will remove the top element from the stack and return its data. I need to handle the case where the stack is empty to avoid errors.\n\n3. **Peek**: This function will return the data of the top element without removing it. Again, I need to handle the case where the stack is empty.\n\n4. **IsEmpty**: This function will check if the stack is empty by verifying if the top pointer is NULL.\n\nI should also consider memory management to avoid leaks, especially since I'm using dynamic memory allocation with linked lists.\n\nLet me sketch a rough plan:\n\n- Define the node structure.\n\n- Define the stack structure.\n\n- Implement the push function.\n\n- Implement the pop function.\n\n- Implement the peek function.\n\n- Implement the isEmpty function.\n\n- Write a main function to test these operations.\n\nI need to make sure that I handle all edge cases, such as pushing to an empty stack, popping from an empty stack, etc.\n\nAlso, I should include necessary headers like stdio.h for input/output functions and stdlib.h for memory allocation functions.\n\nLet me start writing the code based on this plan.\n\n## Final Solution\nTo implement a stack using linked lists in C, we need to define a structure for the nodes and another for the stack itself. We will then implement functions to push, pop, peek, and check if the stack is empty.\n\n### Approach\n\n1. **Define Node Structure**: Each node contains an integer data and a pointer to the next node.\n2. **Define Stack Structure**: The stack contains a pointer to the top node.\n3. **Push Operation**: Create a new node with the given data and make it the new top.\n4. **Pop Operation**: Remove the top node and return its data. Handle the case when the stack is empty.\n5. **Peek Operation**: Return the data of the top node without removing it. Handle the case when the stack is empty.\n6. **IsEmpty Operation**: Check if the top pointer is NULL.\n\n### Solution Code\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the structure for a stack node\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n// Define the structure for the stack\nstruct Stack {\n    struct Node* top;\n};\n\n// Function to create a new stack node\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    if (!newNode) {\n        printf(\"Memory allocation failed.\\n\");\n        exit(0);\n    }\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\n// Function to create a new stack\nstruct Stack* createStack() {\n    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));\n    if (!stack) {\n        printf(\"Memory allocation failed.\\n\");\n        exit(0);\n    }\n    stack->top = NULL;\n    return stack;\n}\n\n// Function to push an item to the stack\nvoid push(struct Stack* stack, int data) {\n    struct Node* newNode = createNode(data);\n    newNode->next = stack->top;\n    stack->top = newNode;\n    printf(\"Pushed %d to the stack.\\n\", data);\n}\n\n// Function to pop an item from the stack\nint pop(struct Stack* stack) {\n    if (isEmpty(stack)) {\n        printf(\"Stack is empty. Cannot pop.\\n\");\n        exit(0);\n    }\n    struct Node* temp = stack->top;\n    int poppedData = temp->data;\n    stack->top = temp->next;\n    free(temp);\n    return poppedData;\n}\n\n// Function to peek at the top item of the stack\nint peek(struct Stack* stack) {\n    if (isEmpty(stack)) {\n        printf(\"Stack is empty. Cannot peek.\\n\");\n        exit(0);\n    }\n    return stack->top->data;\n}\n\n// Function to check if the stack is empty\nint isEmpty(struct Stack* stack) {\n    return stack->top == NULL;\n}\n\n// Main function to test the stack operations\nint main() {\n    struct Stack* stack = createStack();\n\n    push(stack, 10);\n    push(stack, 20);\n    push(stack, 30);\n\n    printf(\"Top element is %d\\n\", peek(stack));\n\n    printf(\"Popped %d from the stack\\n\", pop(stack));\n    printf(\"Popped %d from the stack\\n\", pop(stack));\n\n    printf(\"Top element is now %d\\n\", peek(stack));\n\n    printf(\"Popped %d from the stack\\n\", pop(stack));\n\n    if (isEmpty(stack)) {\n        printf(\"Stack is now empty.\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Represents each element in the stack with `data` and `next` pointers.\n2. **Stack Structure**: Contains a pointer to the top node.\n3. **createNode Function**: Allocates memory for a new node and initializes it.\n4. **createStack Function**: Allocates memory for the stack and initializes the top pointer to NULL.\n5. **push Function**: Adds a new node with the given data to the top of the stack.\n6. **pop Function**: Removes the top node from the stack and returns its data.\n7. **peek Function**: Returns the data of the top node without removing it.\n8. **isEmpty Function**: Checks if the stack is empty by verifying if the top pointer is NULL.\n9. **main Function**: Demonstrates the usage of the stack functions by pushing, popping, and peeking elements.\n\nThis implementation ensures that the stack operations are performed efficiently with a time complexity of O(1) for push, pop, and peek operations."
    }
]