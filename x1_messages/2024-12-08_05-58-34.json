[
    {
        "role": "user",
        "content": "Write a python script to implement the binary search algorithm on a sorted list of integers. The script should return the index of the target element if found, or -1 otherwise.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that implements the binary search algorithm on a sorted list of integers. It returns the index of the target element if found, or -1 otherwise.\n\n```python\ndef binary_search(sorted_list, target):\n    left = 0\n    right = len(sorted_list) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        mid_value = sorted_list[mid]\n\n        if mid_value == target:\n            return mid\n        elif mid_value < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Example usage:\nsorted_list = [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\ntarget = 11\nresult = binary_search(sorted_list, target)\nprint(f\"Index of {target}: {result}\")  # Output should be 5\n```\n\n### Explanation:\n1. **Initialization**:\n   - `left` is set to the start index of the list (0).\n   - `right` is set to the end index of the list (`len(sorted_list) - 1`).\n\n2. **While Loop**:\n   - The loop continues as long as `left` is less than or equal to `right`.\n   - In each iteration, the middle index `mid` is calculated as `(left + right) // 2`.\n   - The value at the middle index `mid_value` is compared with the target:\n     - If `mid_value` is equal to the target, return `mid`.\n     - If `mid_value` is less than the target, adjust `left` to `mid + 1` to search the right half.\n     - If `mid_value` is greater than the target, adjust `right` to `mid - 1` to search the left half.\n\n3. **Return -1**:\n   - If the target is not found after the loop, return -1 indicating the target is not in the list.\n\nThis algorithm efficiently finds the target in O(log n) time complexity due to the repeated halving of the search space."
    }
]