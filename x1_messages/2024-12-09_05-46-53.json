[
    {
        "role": "user",
        "content": "Develop a C# application that simulates a simple ATM machine. Users should be able to create accounts, deposit and withdraw money, and check their account balance. Store account information in a local SQLite database and ensure proper validation and error handling for user inputs.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, let's dive into this project. I need to create a simple ATM simulation using C# and store the account information in a local SQLite database. Okay, first things first, I need to set up my development environment.\n\nI'm going to use Visual Studio for this, as it's a powerful IDE for C# development. I should create a new Console App project since this is a command-line application.\n\nNext, I need to set up the SQLite database. I'll need to install the SQLite package via NuGet. In Visual Studio, I can right-click on the project in the Solution Explorer, select Manage NuGet Packages, and search for \"System.Data.SQLite\". I should install the appropriate package for my project.\n\nOnce that's done, I need to design the database schema. For this simple ATM simulation, I'll need at least one table to store account information. Let's think about what fields I need:\n\n- AccountNumber: unique identifier for each account\n\n- FirstName: first name of the account holder\n\n- LastName: last name of the account holder\n\n- Balance: current balance in the account\n\nSo, my table might look like this:\n\nCREATE TABLE Accounts (\n\n    AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\n\n    FirstName TEXT NOT NULL,\n\n    LastName TEXT NOT NULL,\n\n    Balance REAL NOT NULL\n\n);\n\nI need to create this table in my SQLite database. I can write a method in my C# code to create the table if it doesn't already exist.\n\nNow, for the application functionality:\n\n1. Create accounts: Users should be able to enter their first name, last name, and initial deposit amount to create a new account. The account number should be automatically generated.\n\n2. Deposit money: Users should be able to select an account and deposit a specified amount into it.\n\n3. Withdraw money: Users should be able to select an account and withdraw a specified amount from it, provided there are sufficient funds.\n\n4. Check balance: Users should be able to view the current balance of their account.\n\nI need to handle user inputs carefully to ensure data validity and prevent errors. For example, account numbers should be integers, deposit and withdrawal amounts should be positive numbers, and users shouldn't be able to withdraw more money than they have.\n\nLet me sketch out the basic structure of the program:\n\n- Display a menu with options: Create Account, Deposit, Withdraw, Check Balance, Exit\n\n- Based on the user's choice, navigate to the corresponding functionality\n\n- For each functionality, handle the database operations accordingly\n\nI should also consider error handling. For instance, if a user tries to select an account that doesn't exist, I need to display an error message. Similarly, if someone tries to withdraw more money than their balance, I should prevent that and inform the user.\n\nLet's think about how to implement account selection. Since each account has a unique account number, I can prompt the user to enter the account number and then query the database to see if it exists.\n\nFor database operations, I'll need to use SQL commands to insert, update, and select data from the Accounts table.\n\nI should also consider data validation for user inputs. For example, ensuring that names are alphabetic strings, and amounts are positive numbers.\n\nMaybe I can create some helper methods for validation, like IsPositiveNumber and IsAlpha.\n\nAdditionally, I need to make sure that the database connection is properly managed. I should open the connection when needed and close it immediately after the operation is complete to avoid leaks.\n\nLet me outline the steps for each functionality:\n\n1. Create Account:\n\na. Prompt user for first name, last name, and initial deposit amount.\n\nb. Validate the inputs.\n\nc. Insert a new row into the Accounts table with the provided information and an automatically generated account number.\n\nd. Display the newly created account number to the user.\n\n2. Deposit:\n\na. Prompt user to enter the account number.\n\nb. Validate the account number.\n\nc. If the account exists, prompt for the deposit amount.\n\nd. Validate the deposit amount.\n\ne. Update the Balance column for that account by adding the deposit amount.\n\nf. Display the new balance.\n\n3. Withdraw:\n\na. Prompt user to enter the account number.\n\nb. Validate the account number.\n\nc. If the account exists, prompt for the withdrawal amount.\n\nd. Validate the withdrawal amount (ensure it's positive and less than or equal to the current balance).\n\ne. Update the Balance column for that account by subtracting the withdrawal amount.\n\nf. Display the new balance.\n\n4. Check Balance:\n\na. Prompt user to enter the account number.\n\nb. Validate the account number.\n\nc. If the account exists, retrieve and display the current balance.\n\nI should also think about how to keep the program running until the user chooses to exit. Probably using a loop that displays the menu repeatedly until the user selects Exit.\n\nLet me consider how to structure the code. Since it's a console application, I'll have a Program class with a Main method. I can have separate methods for each functionality to keep the code organized.\n\nI should also create a class to represent an Account, with properties for AccountNumber, FirstName, LastName, and Balance. This can help in handling account data within the code.\n\nWait, but since this is a simple console app, maybe creating a class for Account is overkill. I can manage with just static methods and local variables.\n\nBut, for better organization and potential future expansion, maybe it's worth defining an Account class.\n\nLet me define a simple Account class:\n\npublic class Account\n\n{\n\n    public int AccountNumber { get; set; }\n\n    public string FirstName { get; set; }\n\n    public string LastName { get; set; }\n\n    public decimal Balance { get; set; }\n\n}\n\nNow, I can use this class to hold account data when needed.\n\nNext, I need to set up the database connection. I'll need to provide the path to the SQLite database file. Since it's a local database, I can place it in the project directory.\n\nI should also make sure that the database file is created if it doesn't exist.\n\nLet me write a method to get the database connection:\n\nprivate static SQLiteConnection GetConnection()\n\n{\n\n    string dbPath = \"atm.db\";\n\n    return new SQLiteConnection($\"Data Source={dbPath};Version=3;\");\n\n}\n\nThen, in the Main method, I can create the Accounts table if it doesn't already exist.\n\nprivate static void CreateTable()\n\n{\n\n    using (var connection = GetConnection())\n\n    {\n\n        connection.Open();\n\n        string sql = \"CREATE TABLE IF NOT EXISTS Accounts (\" +\n\n                     \"AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n\n                     \"FirstName TEXT NOT NULL,\" +\n\n                     \"LastName TEXT NOT NULL,\" +\n\n                     \"Balance REAL NOT NULL);\";\n\n        using (var command = new SQLiteCommand(sql, connection))\n\n        {\n\n            command.ExecuteNonQuery();\n\n        }\n\n    }\n\n}\n\nI should call this method when the program starts.\n\nNow, let's think about the menu. I can display options like:\n\n1. Create Account\n\n2. Deposit\n\n3. Withdraw\n\n4. Check Balance\n\n5. Exit\n\nThen, based on the user's choice, call the corresponding method.\n\nI need to handle invalid choices as well, perhaps by displaying an error message and prompting again.\n\nFor getting user inputs, I'll use Console.ReadLine() and parse the inputs accordingly.\n\nLet me consider the CreateAccount method.\n\nprivate static void CreateAccount()\n\n{\n\n    Console.Write(\"Enter first name: \");\n\n    string firstName = Console.ReadLine();\n\n    Console.Write(\"Enter last name: \");\n\n    string lastName = Console.ReadLine();\n\n    Console.Write(\"Enter initial deposit amount: \");\n\n    if (decimal.TryParse(Console.ReadLine(), out decimal initialDeposit) && initialDeposit > 0)\n\n    {\n\n        using (var connection = GetConnection())\n\n        {\n\n            connection.Open();\n\n            string sql = \"INSERT INTO Accounts (FirstName, LastName, Balance) VALUES (@firstName, @lastName, @balance);\";\n\n            using (var command = new SQLiteCommand(sql, connection))\n\n            {\n\n                command.Parameters.AddWithValue(\"@firstName\", firstName);\n\n                command.Parameters.AddWithValue(\"@lastName\", lastName);\n\n                command.Parameters.AddWithValue(\"@balance\", initialDeposit);\n\n                command.ExecuteNonQuery();\n\n            }\n\n        }\n\n        // Retrieve the account number of the newly created account\n\n        int accountNumber = GetLastAccountNumber();\n\n        Console.WriteLine($\"Account created successfully. Your account number is: {accountNumber}\");\n\n    }\n\n    else\n\n    {\n\n        Console.WriteLine(\"Invalid initial deposit amount.\");\n\n    }\n\n}\n\nI need to implement GetLastAccountNumber() to retrieve the account number of the recently inserted account.\n\nAlternatively, since SQLite AUTOINCREMENT is used, I can retrieve the last inserted row's account number using the last insert rowid.\n\nprivate static int GetLastAccountNumber()\n\n{\n\n    using (var connection = GetConnection())\n\n    {\n\n        connection.Open();\n\n        string sql = \"SELECT last_insert_rowid();\";\n\n        using (var command = new SQLiteCommand(sql, connection))\n\n        {\n\n            return (int)command.ExecuteScalar();\n\n        }\n\n    }\n\n}\n\nThat should work.\n\nNext, the Deposit method.\n\nprivate static void Deposit()\n\n{\n\n    Console.Write(\"Enter account number: \");\n\n    if (int.TryParse(Console.ReadLine(), out int accountNumber))\n\n    {\n\n        if (AccountExists(accountNumber))\n\n        {\n\n            Console.Write(\"Enter deposit amount: \");\n\n            if (decimal.TryParse(Console.ReadLine(), out decimal depositAmount) && depositAmount > 0)\n\n            {\n\n                using (var connection = GetConnection())\n\n                {\n\n                    connection.Open();\n\n                    string sql = \"UPDATE Accounts SET Balance = Balance + @deposit WHERE AccountNumber = @accountNumber;\";\n\n                    using (var command = new SQLiteCommand(sql, connection))\n\n                    {\n\n                        command.Parameters.AddWithValue(\"@deposit\", depositAmount);\n\n                        command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n\n                        command.ExecuteNonQuery();\n\n                    }\n\n                }\n\n                decimal newBalance = GetBalance(accountNumber);\n\n                Console.WriteLine($\"Deposit successful. New balance: {newBalance}\");\n\n            }\n\n            else\n\n            {\n\n                Console.WriteLine(\"Invalid deposit amount.\");\n\n            }\n\n        }\n\n        else\n\n        {\n\n            Console.WriteLine(\"Account not found.\");\n\n        }\n\n    }\n\n    else\n\n    {\n\n        Console.WriteLine(\"Invalid account number.\");\n\n    }\n\n}\n\nI need to implement AccountExists and GetBalance methods.\n\nprivate static bool AccountExists(int accountNumber)\n\n{\n\n    using (var connection = GetConnection())\n\n    {\n\n        connection.Open();\n\n        string sql = \"SELECT COUNT(*) FROM Accounts WHERE AccountNumber = @accountNumber;\";\n\n        using (var command = new SQLiteCommand(sql, connection))\n\n        {\n\n            command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n\n            int count = (int)command.ExecuteScalar();\n\n            return count > 0;\n\n        }\n\n    }\n\n}\n\nprivate static decimal GetBalance(int accountNumber)\n\n{\n\n    using (var connection = GetConnection())\n\n    {\n\n        connection.Open();\n\n        string sql = \"SELECT Balance FROM Accounts WHERE AccountNumber = @accountNumber;\";\n\n        using (var command = new SQLiteCommand(sql, connection))\n\n        {\n\n            command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n\n            return (decimal)command.ExecuteScalar();\n\n        }\n\n    }\n\n}\n\nSimilar logic can be applied to the Withdraw method, with the additional check that the withdrawal amount doesn't exceed the balance.\n\nprivate static void Withdraw()\n\n{\n\n    Console.Write(\"Enter account number: \");\n\n    if (int.TryParse(Console.ReadLine(), out int accountNumber))\n\n    {\n\n        if (AccountExists(accountNumber))\n\n        {\n\n            Console.Write(\"Enter withdrawal amount: \");\n\n            if (decimal.TryParse(Console.ReadLine(), out decimal withdrawalAmount) && withdrawalAmount > 0)\n\n            {\n\n                decimal currentBalance = GetBalance(accountNumber);\n\n                if (withdrawalAmount <= currentBalance)\n\n                {\n\n                    using (var connection = GetConnection())\n\n                    {\n\n                        connection.Open();\n\n                        string sql = \"UPDATE Accounts SET Balance = Balance - @withdrawal WHERE AccountNumber = @accountNumber;\";\n\n                        using (var command = new SQLiteCommand(sql, connection))\n\n                        {\n\n                            command.Parameters.AddWithValue(\"@withdrawal\", withdrawalAmount);\n\n                            command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n\n                            command.ExecuteNonQuery();\n\n                        }\n\n                    }\n\n                    decimal newBalance = GetBalance(accountNumber);\n\n                    Console.WriteLine($\"Withdrawal successful. New balance: {newBalance}\");\n\n                }\n\n                else\n\n                {\n\n                    Console.WriteLine(\"Insufficient funds.\");\n\n                }\n\n            }\n\n            else\n\n            {\n\n                Console.WriteLine(\"Invalid withdrawal amount.\");\n\n            }\n\n        }\n\n        else\n\n        {\n\n            Console.WriteLine(\"Account not found.\");\n\n        }\n\n    }\n\n    else\n\n    {\n\n        Console.WriteLine(\"Invalid account number.\");\n\n    }\n\n}\n\nAnd for checking the balance:\n\nprivate static void CheckBalance()\n\n{\n\n    Console.Write(\"Enter account number: \");\n\n    if (int.TryParse(Console.ReadLine(), out int accountNumber))\n\n    {\n\n        if (AccountExists(accountNumber))\n\n        {\n\n            decimal balance = GetBalance(accountNumber);\n\n            Console.WriteLine($\"Current balance: {balance}\");\n\n        }\n\n        else\n\n        {\n\n            Console.WriteLine(\"Account not found.\");\n\n        }\n\n    }\n\n    else\n\n    {\n\n        Console.WriteLine(\"Invalid account number.\");\n\n    }\n\n}\n\nI should also think about how to handle the main menu loop. I can use a do-while loop that continues until the user selects Exit.\n\nHere's a rough sketch of the Main method:\n\nstatic void Main(string[] args)\n\n{\n\n    CreateTable();\n\n    bool exit = false;\n\n    do\n\n    {\n\n        Console.WriteLine(\"ATM Simulation\");\n\n        Console.WriteLine(\"1. Create Account\");\n\n        Console.WriteLine(\"2. Deposit\");\n\n        Console.WriteLine(\"3. Withdraw\");\n\n        Console.WriteLine(\"4. Check Balance\");\n\n        Console.WriteLine(\"5. Exit\");\n\n        Console.Write(\"Select an option: \");\n\n        if (int.TryParse(Console.ReadLine(), out int choice))\n\n        {\n\n            switch (choice)\n\n            {\n\n                case 1:\n\n                    CreateAccount();\n\n                    break;\n\n                case 2:\n\n                    Deposit();\n\n                    break;\n\n                case 3:\n\n                    Withdraw();\n\n                    break;\n\n                case 4:\n\n                    CheckBalance();\n\n                    break;\n\n                case 5:\n\n                    exit = true;\n\n                    break;\n\n                default:\n\n                    Console.WriteLine(\"Invalid option. Please try again.\");\n\n                    break;\n\n            }\n\n        }\n\n        else\n\n        {\n\n            Console.WriteLine(\"Invalid input. Please enter a number.\");\n\n        }\n\n        Console.WriteLine(); // For better readability between operations\n\n    } while (!exit);\n\n}\n\nI should also consider adding some validation for names, ensuring they contain only alphabets.\n\nI can create a helper method for that:\n\nprivate static bool IsAlpha(string input)\n\n{\n\n    return input.All(char.IsLetter);\n\n}\n\nThen, in CreateAccount, I can validate the first and last names:\n\nif (!IsAlpha(firstName) || !IsAlpha(lastName))\n\n{\n\n    Console.WriteLine(\"Names should contain only alphabets.\");\n\n    return;\n\n}\n\nSimilarly, I can add validation for positive numbers in deposit and withdrawal amounts.\n\nI should also make sure that the balance is stored as decimal to handle money accurately.\n\nWait, in the Account class, I have Balance as decimal, which is good for money to handle precision.\n\nI should ensure that all monetary operations use decimal instead of float or double to avoid rounding errors.\n\nAlright, I think I've covered the basic functionalities and validations.\n\nLet me think about potential improvements or additional features.\n\n- Maybe allow users to view their account details beyond just the balance.\n\n- Implement transactions with timestamps.\n\n- Add exception handling for database operations.\n\n- Improve the user interface, perhaps using enums for menu choices.\n\nBut for a simple simulation, the current implementation should suffice.\n\nI should also test the application thoroughly, covering all possible scenarios, including edge cases like withdrawing the exact balance, withdrawing more than the balance, creating accounts with invalid inputs, etc.\n\nOkay, I believe this is a solid plan for developing the ATM simulation in C# with SQLite.\n\n**Final Solution**\n\nTo create a simple ATM simulation in C#, we will build a console application that allows users to create accounts, deposit and withdraw money, and check their account balance. We will store account information in a local SQLite database and ensure proper validation and error handling for user inputs.\n\n## Approach\n\n1. **Set Up the Project:**\n   - Create a new Console App project in Visual Studio.\n   - Install the SQLite package via NuGet.\n\n2. **Design the Database:**\n   - Create a table to store account information with fields for account number, first name, last name, and balance.\n\n3. **Implement Functionality:**\n   - **Create Account:** Allow users to input their first name, last name, and initial deposit amount.\n   - **Deposit Money:** Enable users to select an account and deposit a specified amount.\n   - **Withdraw Money:** Permit users to select an account and withdraw a specified amount if sufficient funds are available.\n   - **Check Balance:** Allow users to view the current balance of their account.\n\n4. **Input Validation:**\n   - Validate user inputs for account numbers, names, and amounts to ensure data integrity and prevent errors.\n\n5. **Error Handling:**\n   - Handle exceptions and edge cases, such as withdrawing more than the available balance or entering invalid account numbers.\n\n## Solution Code\n\n```csharp\nusing System;\nusing System.Data;\nusing System.Data.SQLite;\n\nnamespace ATMSimulation\n{\n    public class Program\n    {\n        private static void Main(string[] args)\n        {\n            CreateTable();\n            bool exit = false;\n            do\n            {\n                Console.WriteLine(\"ATM Simulation\");\n                Console.WriteLine(\"1. Create Account\");\n                Console.WriteLine(\"2. Deposit\");\n                Console.WriteLine(\"3. Withdraw\");\n                Console.WriteLine(\"4. Check Balance\");\n                Console.WriteLine(\"5. Exit\");\n                Console.Write(\"Select an option: \");\n                if (int.TryParse(Console.ReadLine(), out int choice))\n                {\n                    switch (choice)\n                    {\n                        case 1:\n                            CreateAccount();\n                            break;\n                        case 2:\n                            Deposit();\n                            break;\n                        case 3:\n                            Withdraw();\n                            break;\n                        case 4:\n                            CheckBalance();\n                            break;\n                        case 5:\n                            exit = true;\n                            break;\n                        default:\n                            Console.WriteLine(\"Invalid option. Please try again.\");\n                            break;\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"Invalid input. Please enter a number.\");\n                }\n                Console.WriteLine(); // For better readability between operations\n            } while (!exit);\n        }\n\n        private static void CreateTable()\n        {\n            using (var connection = GetConnection())\n            {\n                connection.Open();\n                string sql = \"CREATE TABLE IF NOT EXISTS Accounts (\" +\n                             \"AccountNumber INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                             \"FirstName TEXT NOT NULL,\" +\n                             \"LastName TEXT NOT NULL,\" +\n                             \"Balance REAL NOT NULL);\";\n                using (var command = new SQLiteCommand(sql, connection))\n                {\n                    command.ExecuteNonQuery();\n                }\n            }\n        }\n\n        private static SQLiteConnection GetConnection()\n        {\n            string dbPath = \"atm.db\";\n            return new SQLiteConnection($\"Data Source={dbPath};Version=3;\");\n        }\n\n        private static void CreateAccount()\n        {\n            Console.Write(\"Enter first name: \");\n            string firstName = Console.ReadLine();\n            Console.Write(\"Enter last name: \");\n            string lastName = Console.ReadLine();\n            Console.Write(\"Enter initial deposit amount: \");\n            if (decimal.TryParse(Console.ReadLine(), out decimal initialDeposit) && initialDeposit > 0)\n            {\n                using (var connection = GetConnection())\n                {\n                    connection.Open();\n                    string sql = \"INSERT INTO Accounts (FirstName, LastName, Balance) VALUES (@firstName, @lastName, @balance);\";\n                    using (var command = new SQLiteCommand(sql, connection))\n                    {\n                        command.Parameters.AddWithValue(\"@firstName\", firstName);\n                        command.Parameters.AddWithValue(\"@lastName\", lastName);\n                        command.Parameters.AddWithValue(\"@balance\", initialDeposit);\n                        command.ExecuteNonQuery();\n                    }\n                }\n                int accountNumber = GetLastAccountNumber();\n                Console.WriteLine($\"Account created successfully. Your account number is: {accountNumber}\");\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid initial deposit amount.\");\n            }\n        }\n\n        private static int GetLastAccountNumber()\n        {\n            using (var connection = GetConnection())\n            {\n                connection.Open();\n                string sql = \"SELECT last_insert_rowid();\";\n                using (var command = new SQLiteCommand(sql, connection))\n                {\n                    return (int)(long)command.ExecuteScalar();\n                }\n            }\n        }\n\n        private static void Deposit()\n        {\n            Console.Write(\"Enter account number: \");\n            if (int.TryParse(Console.ReadLine(), out int accountNumber))\n            {\n                if (AccountExists(accountNumber))\n                {\n                    Console.Write(\"Enter deposit amount: \");\n                    if (decimal.TryParse(Console.ReadLine(), out decimal depositAmount) && depositAmount > 0)\n                    {\n                        using (var connection = GetConnection())\n                        {\n                            connection.Open();\n                            string sql = \"UPDATE Accounts SET Balance = Balance + @deposit WHERE AccountNumber = @accountNumber;\";\n                            using (var command = new SQLiteCommand(sql, connection))\n                            {\n                                command.Parameters.AddWithValue(\"@deposit\", depositAmount);\n                                command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n                                command.ExecuteNonQuery();\n                            }\n                        }\n                        decimal newBalance = GetBalance(accountNumber);\n                        Console.WriteLine($\"Deposit successful. New balance: {newBalance}\");\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid deposit amount.\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"Account not found.\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid account number.\");\n            }\n        }\n\n        private static void Withdraw()\n        {\n            Console.Write(\"Enter account number: \");\n            if (int.TryParse(Console.ReadLine(), out int accountNumber))\n            {\n                if (AccountExists(accountNumber))\n                {\n                    Console.Write(\"Enter withdrawal amount: \");\n                    if (decimal.TryParse(Console.ReadLine(), out decimal withdrawalAmount) && withdrawalAmount > 0)\n                    {\n                        decimal currentBalance = GetBalance(accountNumber);\n                        if (withdrawalAmount <= currentBalance)\n                        {\n                            using (var connection = GetConnection())\n                            {\n                                connection.Open();\n                                string sql = \"UPDATE Accounts SET Balance = Balance - @withdrawal WHERE AccountNumber = @accountNumber;\";\n                                using (var command = new SQLiteCommand(sql, connection))\n                                {\n                                    command.Parameters.AddWithValue(\"@withdrawal\", withdrawalAmount);\n                                    command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n                                    command.ExecuteNonQuery();\n                                }\n                            }\n                            decimal newBalance = GetBalance(accountNumber);\n                            Console.WriteLine($\"Withdrawal successful. New balance: {newBalance}\");\n                        }\n                        else\n                        {\n                            Console.WriteLine(\"Insufficient funds.\");\n                        }\n                    }\n                    else\n                    {\n                        Console.WriteLine(\"Invalid withdrawal amount.\");\n                    }\n                }\n                else\n                {\n                    Console.WriteLine(\"Account not found.\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid account number.\");\n            }\n        }\n\n        private static void CheckBalance()\n        {\n            Console.Write(\"Enter account number: \");\n            if (int.TryParse(Console.ReadLine(), out int accountNumber))\n            {\n                if (AccountExists(accountNumber))\n                {\n                    decimal balance = GetBalance(accountNumber);\n                    Console.WriteLine($\"Current balance: {balance}\");\n                }\n                else\n                {\n                    Console.WriteLine(\"Account not found.\");\n                }\n            }\n            else\n            {\n                Console.WriteLine(\"Invalid account number.\");\n            }\n        }\n\n        private static bool AccountExists(int accountNumber)\n        {\n            using (var connection = GetConnection())\n            {\n                connection.Open();\n                string sql = \"SELECT COUNT(*) FROM Accounts WHERE AccountNumber = @accountNumber;\";\n                using (var command = new SQLiteCommand(sql, connection))\n                {\n                    command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n                    int count = (int)(long)command.ExecuteScalar();\n                    return count > 0;\n                }\n            }\n        }\n\n        private static decimal GetBalance(int accountNumber)\n        {\n            using (var connection = GetConnection())\n            {\n                connection.Open();\n                string sql = \"SELECT Balance FROM Accounts WHERE AccountNumber = @accountNumber;\";\n                using (var command = new SQLiteCommand(sql, connection))\n                {\n                    command.Parameters.AddWithValue(\"@accountNumber\", accountNumber);\n                    return (decimal)command.ExecuteScalar();\n                }\n            }\n        }\n    }\n}\n```\n\n## Explanation\n\n- **Database Setup:** We create a SQLite database with a table named `Accounts` to store account details.\n- **Menu-Driven Interface:** A simple menu allows users to choose between creating an account, depositing, withdrawing, checking balance, or exiting.\n- **Input Validation:** Ensures that user inputs are valid (e.g., positive numbers for amounts, existing account numbers).\n- **Transaction Handling:** Manages deposit and withdrawal operations with appropriate checks to maintain data integrity.\n- **Error Handling:** Provides feedback for invalid inputs and unsuccessful operations, enhancing user experience."
    }
]