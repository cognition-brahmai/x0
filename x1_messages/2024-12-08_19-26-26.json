[
    {
        "role": "user",
        "content": "Implement a trie data structure in C# for efficient string searching and matching."
    },
    {
        "role": "assistant",
        "content": "Implementing a Trie (also known as a prefix tree) in C# is a great way to handle efficient string searching and matching operations. Tries are particularly useful in scenarios like auto-completion, spell-checking, and routing tables where you need to quickly check if a string starts with a certain prefix or if it exists in a set.\n\nBelow is a simple implementation of a Trie in C#. This implementation includes methods to insert a word into the Trie, check if a word exists, and check if any word in the Trie starts with a given prefix.\n\n### Trie Node Definition\n\nFirst, we define a `TrieNode` class that represents each node in the Trie. Each node contains a dictionary mapping characters to their corresponding child nodes and a boolean flag to indicate if the node marks the end of a word.\n\n```csharp\npublic class TrieNode\n{\n    public Dictionary<char, TrieNode> Children { get; set; }\n    public bool IsEndOfWord { get; set; }\n\n    public TrieNode()\n    {\n        Children = new Dictionary<char, TrieNode>();\n        IsEndOfWord = false;\n    }\n}\n```\n\n### Trie Class Implementation\n\nNext, we implement the `Trie` class, which uses the `TrieNode` objects to build the Trie structure.\n\n```csharp\npublic class Trie\n{\n    private readonly TrieNode _root;\n\n    public Trie()\n    {\n        _root = new TrieNode();\n    }\n\n    // Inserts a word into the trie.\n    public void Insert(string word)\n    {\n        var current = _root;\n        foreach (var ch in word)\n        {\n            if (!current.Children.ContainsKey(ch))\n            {\n                current.Children[ch] = new TrieNode();\n            }\n            current = current.Children[ch];\n        }\n        current.IsEndOfWord = true;\n    }\n\n    // Returns if the word is in the trie.\n    public bool Search(string word)\n    {\n        var node = FindPrefix(word);\n        return node != null && node.IsEndOfWord;\n    }\n\n    // Returns if there is any word in the trie that starts with the given prefix.\n    public bool StartsWith(string prefix)\n    {\n        var node = FindPrefix(prefix);\n        return node != null;\n    }\n\n    // Helper function to find the node corresponding to the prefix.\n    private TrieNode FindPrefix(string prefix)\n    {\n        var current = _root;\n        foreach (var ch in prefix)\n        {\n            if (!current.Children.ContainsKey(ch))\n            {\n                return null;\n            }\n            current = current.Children[ch];\n        }\n        return current;\n    }\n}\n```\n\n### Explanation\n\n1. **TrieNode Class**:\n    - `Children`: A dictionary mapping characters to their corresponding child nodes.\n    - `IsEndOfWord`: A boolean indicating whether this node marks the end of a word.\n\n2. **Trie Class**:\n    - `_root`: The root node of the Trie.\n    - `Insert(string word)`: Inserts a word into the Trie by traversing through the characters and creating new nodes if necessary.\n    - `Search(string word)`: Checks if a word exists in the Trie by traversing through the characters and checking if the final node marks the end of a word.\n    - `StartsWith(string prefix)`: Checks if there is any word in the Trie that starts with the given prefix by traversing through the characters of the prefix.\n\nThis implementation provides efficient operations for inserting words and searching for words or prefixes, making it suitable for applications requiring quick string matching and auto-completion features."
    }
]