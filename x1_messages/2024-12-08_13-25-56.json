[
    {
        "role": "user",
        "content": "Develop a Python script that connects to a Memcached server, stores key-value pairs, and retrieves them based on user input.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that interacts with a Memcached server. Memcached is a distributed memory object caching system, which is great for speeding up dynamic web applications by alleviating database load. We'll write a simple script that allows you to store and retrieve key-value pairs from a Memcached server based on user input.\n\nFirst things first, you'll need to have Memcached installed and running on your machine or have access to a Memcached server. For this example, I'll assume you have Memcached installed and running locally on the default port, which is 11211.\n\nNext, you'll need to install the `python-memcached` package, which is a Python client for Memcached. You can install it using pip:\n\n```bash\npip install python-memcached\n```\n\nNow, let's start writing the script. We'll break it down into smaller parts to make it easier to understand.\n\n### Step 1: Connecting to the Memcached Server\n\nWe need to establish a connection to the Memcached server. The `Memcached` class from the `memcached` module will help us with that.\n\n```python\nimport memcache\n\n# Connect to the local Memcached server\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n```\n\nHere, `mc` is the Memcached client object that we'll use to interact with the server.\n\n### Step 2: Storing Key-Value Pairs\n\nWe'll write a function to store key-value pairs in Memcached. The `set` method of the Memcached client can be used for this purpose.\n\n```python\ndef store_data(key, value):\n    success = mc.set(key, value)\n    if success:\n        print(f\"Data stored successfully for key: {key}\")\n    else:\n        print(f\"Failed to store data for key: {key}\")\n```\n\n### Step 3: Retrieving Key-Value Pairs\n\nSimilarly, we'll write a function to retrieve values based on keys from Memcached. The `get` method will be used here.\n\n```python\ndef retrieve_data(key):\n    value = mc.get(key)\n    if value is not None:\n        print(f\"Value for key '{key}': {value}\")\n    else:\n        print(f\"No data found for key: {key}\")\n```\n\n### Step 4: User Input and Menu\n\nWe'll create a simple menu-driven interface to allow the user to choose between storing and retrieving data.\n\n```python\ndef main():\n    while True:\n        print(\"\\nMemcached Client Menu:\")\n        print(\"1. Store data\")\n        print(\"2. Retrieve data\")\n        print(\"3. Exit\")\n        \n        choice = input(\"Enter your choice (1/2/3): \")\n        \n        if choice == '1':\n            key = input(\"Enter key: \")\n            value = input(\"Enter value: \")\n            store_data(key, value)\n        elif choice == '2':\n            key = input(\"Enter key: \")\n            retrieve_data(key)\n        elif choice == '3':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid choice. Please select 1, 2, or 3.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Complete Script\n\nPutting it all together, here's the complete Python script:\n\n```python\nimport memcache\n\n# Connect to the local Memcached server\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\ndef store_data(key, value):\n    success = mc.set(key, value)\n    if success:\n        print(f\"Data stored successfully for key: {key}\")\n    else:\n        print(f\"Failed to store data for key: {key}\")\n\ndef retrieve_data(key):\n    value = mc.get(key)\n    if value is not None:\n        print(f\"Value for key '{key}': {value}\")\n    else:\n        print(f\"No data found for key: {key}\")\n\ndef main():\n    while True:\n        print(\"\\nMemcached Client Menu:\")\n        print(\"1. Store data\")\n        print(\"2. Retrieve data\")\n        print(\"3. Exit\")\n        \n        choice = input(\"Enter your choice (1/2/3): \")\n        \n        if choice == '1':\n            key = input(\"Enter key: \")\n            value = input(\"Enter value: \")\n            store_data(key, value)\n        elif choice == '2':\n            key = input(\"Enter key: \")\n            retrieve_data(key)\n        elif choice == '3':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid choice. Please select 1, 2, or 3.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### How to Use the Script\n\n1. **Store Data:**\n   - Choose option 1 from the menu.\n   - Enter a key and a value.\n   - The script will store the key-value pair in Memcached.\n\n2. **Retrieve Data:**\n   - Choose option 2 from the menu.\n   - Enter the key for which you want to retrieve the value.\n   - The script will fetch and display the value from Memcached if it exists.\n\n3. **Exit:**\n   - Choose option 3 to exit the script.\n\nThis script provides a basic interface to interact with Memcached using Python. You can expand upon this by adding more features like deleting keys, handling multiple servers, or even integrating it into a larger application.\n\nI hope this helps you get started with Memcached in Python! If you have any questions or need further assistance, feel free to ask."
    }
]