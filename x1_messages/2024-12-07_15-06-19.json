[
    {
        "role": "user",
        "content": "Implement a Python script that performs the merge sort algorithm on an input list of integers."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Merge sort is a popular sorting algorithm that uses the divide-and-conquer approach. It divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves.\n\nHere's a step-by-step explanation of how merge sort works:\n\n1. **Divide**: Find the midpoint of the list and divide it into two sublists.\n2. **Conquer**: Recursively sort the two sublists.\n3. **Combine**: Merge the two sorted sublists to produce the sorted answer.\n\nNow, let's implement this in Python. I'll provide you with a detailed code example, including comments to explain each part of the process.\n\n```python\ndef merge_sort(arr):\n    # Base case: if the list is empty or has one element, it's already sorted\n    if len(arr) <= 1:\n        return arr\n\n    # Divide: Find the midpoint and divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Conquer: Recursively sort the two halves\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n\n    # Combine: Merge the two sorted halves\n    return merge(left_sorted, right_sorted)\n\ndef merge(left, right):\n    # Initialize pointers for left and right arrays\n    left_index = 0\n    right_index = 0\n    merged = []\n\n    # Merge the two arrays by comparing elements\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    # If there are remaining elements in left or right, add them to the merged list\n    merged.extend(left[left_index:])\n    merged.extend(right[right_index:])\n\n    return merged\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_array = [38, 27, 43, 3, 9, 82, 10]\n    sorted_array = merge_sort(sample_array)\n    print(\"Original array:\", sample_array)\n    print(\"Sorted array:\", sorted_array)\n```\n\n### Explanation:\n\n1. **merge_sort function**:\n   - **Base Case**: If the array has one or no elements, it's already sorted, so return it.\n   - **Divide**: Find the midpoint and split the array into two halves.\n   - **Conquer**: Recursively call `merge_sort` on both halves.\n   - **Combine**: Use the `merge` function to merge the two sorted halves.\n\n2. **merge function**:\n   - Initialize pointers for both left and right arrays.\n   - Compare elements from both arrays and append the smaller one to the `merged` list.\n   - After one of the arrays is exhausted, append the remaining elements from the other array to `merged`.\n\n3. **Example Usage**:\n   - A sample array is provided, and `merge_sort` is called on it.\n   - The original and sorted arrays are printed for verification.\n\nThis implementation ensures that the array is sorted efficiently using the merge sort algorithm. If you have any questions or need further clarification, feel free to ask!"
    }
]