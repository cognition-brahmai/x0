[
    {
        "role": "user",
        "content": "Write a C++ program to implement a basic command-line calculator with support for addition, subtraction, multiplication, and division operations. The program should accept input as an expression (e.g., \"3 + 5 * 2\") and output the result.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that implements a basic command-line calculator capable of handling addition, subtraction, multiplication, and division operations. This program parses and evaluates expressions like \"3 + 5 * 2\" according to the standard mathematical precedence rules.\n\nTo achieve this, the program uses two stacks: one for operands and another for operators. It processes the input expression token by token, performing operations based on operator precedence.\n\n## Final Solution\n```cpp\n#include <iostream>\n#include <stack>\n#include <string>\n#include <cctype>\n#include <stdexcept>\n\nusing namespace std;\n\nint precedence(char op) {\n    if (op == '+' || op == '-') return 1;\n    if (op == '*' || op == '/') return 2;\n    return 0;\n}\n\ndouble applyOperator(char op, double b, double a) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': \n            if (b == 0) throw runtime_error(\"Division by zero.\");\n            return a / b;\n        default: \n            throw runtime_error(\"Invalid operator.\");\n    }\n}\n\ndouble evaluateExpression(const string& expression) {\n    stack<double> operands;\n    stack<char> operators;\n    \n    for (size_t i = 0; i < expression.length(); ++i) {\n        if (isspace(expression[i])) continue;\n        \n        if (isdigit(expression[i])) {\n            string numStr;\n            while (i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) {\n                numStr += expression[i++];\n            }\n            --i; // Adjust for the extra increment\n            operands.push(stod(numStr));\n        } else if (expression[i] == '(') {\n            operators.push(expression[i]);\n        } else if (expression[i] == ')') {\n            while (!operators.empty() && operators.top() != '(') {\n                double b = operands.top(); operands.pop();\n                double a = operands.top(); operands.pop();\n                char op = operators.top(); operators.pop();\n                operands.push(applyOperator(op, b, a));\n            }\n            if (operators.empty() || operators.top() != '(') {\n                throw runtime_error(\"Mismatched parentheses.\");\n            }\n            operators.pop(); // Remove the '('\n        } else if (expression[i] == '+' || expression[i] == '-' || expression[i] == '*' || expression[i] == '/') {\n            while (!operators.empty() && precedence(operators.top()) >= precedence(expression[i])) {\n                double b = operands.top(); operands.pop();\n                double a = operands.top(); operands.pop();\n                char op = operators.top(); operators.pop();\n                operands.push(applyOperator(op, b, a));\n            }\n            operators.push(expression[i]);\n        } else {\n            throw runtime_error(\"Invalid character in expression.\");\n        }\n    }\n    \n    while (!operators.empty()) {\n        if (operators.top() == '(') {\n            throw runtime_error(\"Mismatched parentheses.\");\n        }\n        double b = operands.top(); operands.pop();\n        double a = operands.top(); operands.pop();\n        char op = operators.top(); operators.pop();\n        operands.push(applyOperator(op, b, a));\n    }\n    \n    if (operands.size() != 1) {\n        throw runtime_error(\"Invalid expression.\");\n    }\n    \n    return operands.top();\n}\n\nint main() {\n    string expression;\n    cout << \"Enter an expression (e.g., 3 + 5 * 2): \";\n    getline(cin, expression);\n    \n    try {\n        double result = evaluateExpression(expression);\n        cout << \"Result: \" << result << endl;\n    } catch (const exception& e) {\n        cerr << \"Error: \" << e.what() << endl;\n    }\n    \n    return 0;\n}\n```\n\n### Explanation\n1. **precedence function**: Determines the precedence of operators.\n2. **applyOperator function**: Applies the operator to the operands.\n3. **evaluateExpression function**: Parses the expression and computes the result using two stacks for operands and operators.\n4. **main function**: Reads the expression from the user and calls the evaluateExpression function to get and display the result.\n\nThis program handles basic arithmetic operations with proper consideration of operator precedence and parentheses. It also includes error handling for invalid expressions, division by zero, and mismatched parentheses."
    }
]