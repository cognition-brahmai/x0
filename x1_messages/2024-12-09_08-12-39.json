[
    {
        "role": "user",
        "content": "Implement a C++ class called \"Matrix\" that represents a 2D matrix of integers. Include member functions for matrix addition, subtraction, multiplication, and transpose. Also, overload the appropriate operators to perform these operations on Matrix objects."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is an implementation of a `Matrix` class in C++ that represents a 2D matrix of integers. It includes member functions for matrix addition, subtraction, multiplication, and transpose, along with overloaded operators to perform these operations on `Matrix` objects.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Matrix {\nprivate:\n    std::vector<std::vector<int>> data;\n    size_t rows;\n    size_t cols;\n\npublic:\n    // Constructor to initialize a matrix with given rows and columns\n    Matrix(size_t r, size_t c) : rows(r), cols(c), data(r, std::vector<int>(c, 0)) {}\n\n    // Constructor to initialize a matrix with given 2D vector\n    Matrix(const std::vector<std::vector<int>>& mat) : data(mat), rows(mat.size()), cols(mat[0].size()) {}\n\n    // Function to get the number of rows\n    size_t getRows() const {\n        return rows;\n    }\n\n    // Function to get the number of columns\n    size_t getCols() const {\n        return cols;\n    }\n\n    // Function to set value at a specific position\n    void set(size_t r, size_t c, int val) {\n        if (r < rows && c < cols) {\n            data[r][c] = val;\n        } else {\n            throw std::out_of_range(\"Index out of range\");\n        }\n    }\n\n    // Function to get value at a specific position\n    int get(size_t r, size_t c) const {\n        if (r < rows && c < cols) {\n            return data[r][c];\n        } else {\n            throw std::out_of_range(\"Index out of range\");\n        }\n    }\n\n    // Matrix addition\n    Matrix operator+(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions do not match for addition\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] + other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Matrix subtraction\n    Matrix operator-(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions do not match for subtraction\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] - other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Matrix multiplication\n    Matrix operator*(const Matrix& other) const {\n        if (cols != other.rows) {\n            throw std::invalid_argument(\"Number of columns in first matrix must be equal to number of rows in second matrix for multiplication\");\n        }\n        Matrix result(rows, other.cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < other.cols; ++j) {\n                for (size_t k = 0; k < cols; ++k) {\n                    result.data[i][j] += data[i][k] * other.data[k][j];\n                }\n            }\n        }\n        return result;\n    }\n\n    // Matrix transpose\n    Matrix transpose() const {\n        Matrix result(cols, rows);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[j][i] = data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Overload the stream insertion operator to print the matrix\n    friend std::ostream& operator<<(std::ostream& os, const Matrix& mat) {\n        for (const auto& row : mat.data) {\n            for (int val : row) {\n                os << val << \" \";\n            }\n            os << std::endl;\n        }\n        return os;\n    }\n};\n\nint main() {\n    Matrix m1(2, 3);\n    m1.set(0, 0, 1);\n    m1.set(0, 1, 2);\n    m1.set(0, 2, 3);\n    m1.set(1, 0, 4);\n    m1.set(1, 1, 5);\n    m1.set(1, 2, 6);\n\n    Matrix m2(2, 3);\n    m2.set(0, 0, 7);\n    m2.set(0, 1, 8);\n    m2.set(0, 2, 9);\n    m2.set(1, 0, 10);\n    m2.set(1, 1, 11);\n    m2.set(1, 2, 12);\n\n    Matrix m3(3, 2);\n    m3.set(0, 0, 13);\n    m3.set(0, 1, 14);\n    m3.set(1, 0, 15);\n    m3.set(1, 1, 16);\n    m3.set(2, 0, 17);\n    m3.set(2, 1, 18);\n\n    std::cout << \"Matrix m1:\" << std::endl << m1 << std::endl;\n    std::cout << \"Matrix m2:\" << std::endl << m2 << std::endl;\n    std::cout << \"Matrix m3:\" << std::endl << m3 << std::endl;\n\n    Matrix sum = m1 + m2;\n    std::cout << \"Sum of m1 and m2:\" << std::endl << sum << std::endl;\n\n    Matrix diff = m1 - m2;\n    std::cout << \"Difference of m1 and m2:\" << std::endl << diff << std::endl;\n\n    Matrix product = m1 * m3;\n    std::cout << \"Product of m1 and m3:\" << std::endl << product << std::endl;\n\n    Matrix transposed = m1.transpose();\n    std::cout << \"Transpose of m1:\" << std::endl << transposed << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Constructor**: Two constructors are provided\u2014one to initialize a matrix with specified dimensions and another to initialize from a 2D vector.\n2. **Getters and Setters**: Methods to get the number of rows and columns, and to set and get values at specific positions.\n3. **Matrix Operations**:\n   - **Addition (`operator+`)**: Adds two matrices element-wise.\n   - **Subtraction (`operator-`)**: Subtracts one matrix from another element-wise.\n   - **Multiplication (`operator*`)**: Multiplies two matrices according to matrix multiplication rules.\n   - **Transpose**: Returns the transpose of the matrix.\n4. **Overloaded Stream Insertion Operator**: Allows printing the matrix in a readable format.\n\nThis implementation ensures that operations are performed correctly and handles cases where operations cannot be performed due to dimension mismatches by throwing exceptions."
    }
]