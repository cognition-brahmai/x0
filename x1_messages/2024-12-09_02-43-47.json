[
    {
        "role": "user",
        "content": "Develop a Node.js application that interacts with a PostgreSQL database to store and retrieve information about books (title, author, genre, publication date), and allows users to filter the results based on these attributes.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through building a Node.js application that interacts with a PostgreSQL database to manage book information. We'll cover setting up the database, creating the Node.js server, and implementing endpoints to store, retrieve, and filter books based on various attributes like title, author, genre, and publication date.\n\n### Prerequisites\n\nMake sure you have the following installed on your machine:\n\n- Node.js (https://nodejs.org/)\n- PostgreSQL (https://www.postgresql.org/)\n- A code editor (e.g., VSCode)\n\n### Step 1: Set up the PostgreSQL Database\n\nFirst, we need to create a PostgreSQL database and a table to store book information.\n\n1. **Install PostgreSQL:**\n\n   Follow the installation instructions for your operating system from the official PostgreSQL website.\n\n2. **Create a Database:**\n\n   Open a terminal and run:\n\n   ```sql\n   createdb bookdb\n   ```\n\n3. **Create a Table:**\n\n   Connect to your database and create a table to store books:\n\n   ```sql\n   psql -d bookdb\n\n   CREATE TABLE books (\n       id SERIAL PRIMARY KEY,\n       title VARCHAR(255) NOT NULL,\n       author VARCHAR(100) NOT NULL,\n       genre VARCHAR(50),\n       publication_date DATE\n   );\n   ```\n\n### Step 2: Set up the Node.js Project\n\nNow, let's set up a new Node.js project.\n\n1. **Initialize the Project:**\n\n   Create a new directory for your project and initialize it with npm:\n\n   ```bash\n   mkdir book-app\n   cd book-app\n   npm init -y\n   ```\n\n2. **Install Dependencies:**\n\n   Install Express for the server and pg for PostgreSQL client:\n\n   ```bash\n   npm install express pg\n   ```\n\n### Step 3: Connect to the Database\n\nCreate a file named `db.js` to handle the database connection.\n\n```javascript\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  user: 'your_username',\n  host: 'localhost',\n  database: 'bookdb',\n  password: 'your_password',\n  port: 5432,\n});\n\nmodule.exports = pool;\n```\n\nReplace `'your_username'` and `'your_password'` with your PostgreSQL credentials.\n\n### Step 4: Create the Server\n\nCreate a file named `server.js` to set up the Express server.\n\n```javascript\nconst express = require('express');\nconst pool = require('./db');\n\nconst app = express();\napp.use(express.json());\n\n// Get all books\napp.get('/books', async (req, res) => {\n  try {\n    const result = await pool.query('SELECT * FROM books');\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Get books by title\napp.get('/books/title/:title', async (req, res) => {\n  const title = req.params.title;\n  try {\n    const result = await pool.query(\n      'SELECT * FROM books WHERE title ILIKE $1',\n      [`%${title}%`]\n    );\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Get books by author\napp.get('/books/author/:author', async (req, res) => {\n  const author = req.params.author;\n  try {\n    const result = await pool.query(\n      'SELECT * FROM books WHERE author ILIKE $1',\n      [`%${author}%`]\n    );\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Get books by genre\napp.get('/books/genre/:genre', async (req, res) => {\n  const genre = req.params.genre;\n  try {\n    const result = await pool.query(\n      'SELECT * FROM books WHERE genre ILIKE $1',\n      [`%${genre}%`]\n    );\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Get books by publication date\napp.get('/books/publication/:year', async (req, res) => {\n  const year = req.params.year;\n  try {\n    const result = await pool.query(\n      'SELECT * FROM books WHERE EXTRACT(YEAR FROM publication_date) = $1',\n      [year]\n    );\n    res.json(result.rows);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Add a new book\napp.post('/books', async (req, res) => {\n  const { title, author, genre, publication_date } = req.body;\n  try {\n    const result = await pool.query(\n      'INSERT INTO books (title, author, genre, publication_date) VALUES ($1, $2, $3, $4)',\n      [title, author, genre, publication_date]\n    );\n    res.status(201).send('Book added successfully');\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Start the server\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n### Step 5: Test the Application\n\n1. **Start the Server:**\n\n   Run the following command in your terminal:\n\n   ```bash\n   node server.js\n   ```\n\n2. **Test Endpoints:**\n\n   You can use tools like Postman or curl to test the API endpoints.\n\n   - **Get all books:**\n\n     ```\n     GET http://localhost:5000/books\n     ```\n\n   - **Get books by title:**\n\n     ```\n     GET http://localhost:5000/books/title/YourTitle\n     ```\n\n   - **Get books by author:**\n\n     ```\n     GET http://localhost:5000/books/author/YourAuthor\n     ```\n\n   - **Get books by genre:**\n\n     ```\n     GET http://localhost:5000/books/genre/YourGenre\n     ```\n\n   - **Get books by publication year:**\n\n     ```\n     GET http://localhost:5000/books/publication/2020\n     ```\n\n   - **Add a new book:**\n\n     ```\n     POST http://localhost:5000/books\n     Content-Type: application/json\n\n     {\n       \"title\": \"Sample Book\",\n       \"author\": \"Sample Author\",\n       \"genre\": \"Fiction\",\n       \"publication_date\": \"2021-01-01\"\n     }\n     ```\n\n### Conclusion\n\nYou've successfully created a Node.js application that interacts with a PostgreSQL database to manage book information. The application allows users to retrieve and filter books based on various attributes and add new books to the database. This setup provides a solid foundation for further enhancements and features."
    }
]