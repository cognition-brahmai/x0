[
    {
        "role": "user",
        "content": "Write a Python program that simulates a simple bank account system with basic functionalities such as depositing money, withdrawing money, and checking balance. The program should use object-oriented programming principles and handle errors gracefully.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write a Python program that simulates a simple bank account system. I'll use object-oriented programming (OOP) to structure the code, and make sure to handle errors gracefully.\n\nFirst, I need to define what a bank account is in terms of properties and actions it can perform. A bank account typically has a balance, and it allows depositing money, withdrawing money, and checking the balance.\n\nSo, I'll create a class called `BankAccount` that will have methods for deposit, withdraw, and check_balance. I'll also need to make sure that the balance cannot go negative when withdrawing money, and handle such cases appropriately.\n\nLet me start by defining the class and initializing the balance.\n\n```python\nclass BankAccount:\n    def __init__(self):\n        self.balance = 0\n```\n\nThis sets up a new bank account with a zero balance.\n\nNext, I'll add a method to deposit money into the account.\n\n```python\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"Deposited {amount} units. New balance: {self.balance}\")\n        else:\n            print(\"Deposit amount must be positive.\")\n```\n\nThis method takes an amount, checks if it's positive, adds it to the balance, and prints the new balance. If the amount is not positive, it prints an error message.\n\nNow, for withdrawing money, I need to make sure that the account has sufficient funds.\n\n```python\n    def withdraw(self, amount):\n        if amount > 0:\n            if self.balance >= amount:\n                self.balance -= amount\n                print(f\"Withdrew {amount} units. New balance: {self.balance}\")\n            else:\n                print(\"Insufficient funds.\")\n        else:\n            print(\"Withdrawal amount must be positive.\")\n```\n\nThis method checks if the amount is positive and if the balance is sufficient. If both conditions are met, it withdraws the amount and prints the new balance. Otherwise, it prints an appropriate error message.\n\nLastly, I'll add a method to check the current balance.\n\n```python\n    def check_balance(self):\n        print(f\"Current balance: {self.balance}\")\n```\n\nThis is straightforward; it just prints the current balance.\n\nNow, I need to create an instance of the `BankAccount` class and allow the user to interact with it. I'll use a simple command-line interface where the user can choose to deposit, withdraw, or check the balance.\n\nI'll use a loop to keep asking for input until the user decides to exit.\n\n```python\ndef main():\n    account = BankAccount()\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Deposit\")\n        print(\"2. Withdraw\")\n        print(\"3. Check Balance\")\n        print(\"4. Exit\")\n        choice = input(\"Enter choice (1/2/3/4): \")\n        \n        if choice == '1':\n            amount = float(input(\"Enter amount to deposit: \"))\n            account.deposit(amount)\n        elif choice == '2':\n            amount = float(input(\"Enter amount to withdraw: \"))\n            account.withdraw(amount)\n        elif choice == '3':\n            account.check_balance()\n        elif choice == '4':\n            print(\"Goodbye!\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIn this `main` function, I create an instance of `BankAccount`. Then, in a loop, I display a menu of options to the user and ask for their choice. Depending on the choice, I call the corresponding method on the account instance.\n\nI use `float` to convert the input amounts to floating-point numbers, assuming that money can have decimal places. If needed, I could use `decimal.Decimal` for more precise financial calculations, but for simplicity, I'll stick with `float`.\n\nI should also consider error handling for invalid inputs, such as non-numeric amounts. To handle this, I can add try-except blocks when converting the input to float.\n\nLet me update the deposit and withdraw sections to include error handling for invalid inputs.\n\n```python\n        elif choice == '1':\n            try:\n                amount = float(input(\"Enter amount to deposit: \"))\n                account.deposit(amount)\n            except ValueError:\n                print(\"Invalid amount. Please enter a numeric value.\")\n        elif choice == '2':\n            try:\n                amount = float(input(\"Enter amount to withdraw: \"))\n                account.withdraw(amount)\n            except ValueError:\n                print(\"Invalid amount. Please enter a numeric value.\")\n```\n\nNow, if the user enters a non-numeric value for amount, the program will catch the `ValueError` and print an error message instead of crashing.\n\nThis should cover the basic functionalities and error handling for the simple bank account system.\n\n## Final Solution\nTo create a simple bank account system using Python with basic functionalities like depositing money, withdrawing money, and checking balance, we can utilize object-oriented programming (OOP) principles. This approach ensures that the code is structured and errors are handled gracefully.\n\n### Approach\n\n1. **Class Definition**: Define a `BankAccount` class with methods for depositing, withdrawing, and checking the balance.\n2. **Error Handling**: Ensure that all operations handle potential errors, such as withdrawing more than the balance or entering invalid amounts.\n3. **User Interface**: Implement a simple command-line interface to interact with the `BankAccount` instance.\n\n### Solution Code\n\n```python\nclass BankAccount:\n    def __init__(self):\n        self.balance = 0\n\n    def deposit(self, amount):\n        if amount > 0:\n            self.balance += amount\n            print(f\"Deposited {amount} units. New balance: {self.balance}\")\n        else:\n            print(\"Deposit amount must be positive.\")\n\n    def withdraw(self, amount):\n        if amount > 0:\n            if self.balance >= amount:\n                self.balance -= amount\n                print(f\"Withdrew {amount} units. New balance: {self.balance}\")\n            else:\n                print(\"Insufficient funds.\")\n        else:\n            print(\"Withdrawal amount must be positive.\")\n\n    def check_balance(self):\n        print(f\"Current balance: {self.balance}\")\n\ndef main():\n    account = BankAccount()\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Deposit\")\n        print(\"2. Withdraw\")\n        print(\"3. Check Balance\")\n        print(\"4. Exit\")\n        choice = input(\"Enter choice (1/2/3/4): \")\n        \n        if choice == '1':\n            try:\n                amount = float(input(\"Enter amount to deposit: \"))\n                account.deposit(amount)\n            except ValueError:\n                print(\"Invalid amount. Please enter a numeric value.\")\n        elif choice == '2':\n            try:\n                amount = float(input(\"Enter amount to withdraw: \"))\n                account.withdraw(amount)\n            except ValueError:\n                print(\"Invalid amount. Please enter a numeric value.\")\n        elif choice == '3':\n            account.check_balance()\n        elif choice == '4':\n            print(\"Goodbye!\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **BankAccount Class**:\n   - **Initialization**: Starts with a balance of zero.\n   - **deposit(amount)**: Adds the specified amount to the balance if the amount is positive.\n   - **withdraw(amount)**: Subtracts the specified amount from the balance if sufficient funds are available and the amount is positive.\n   - **check_balance()**: Prints the current balance.\n\n2. **Main Function**:\n   - Creates an instance of `BankAccount`.\n   - Presents a menu to the user and processes their choices:\n     - Deposit: Adds money to the account.\n     - Withdraw: Removes money from the account.\n     - Check Balance: Displays the current balance.\n     - Exit: Ends the program.\n   - Includes error handling for invalid inputs to ensure the program runs smoothly.\n\nThis program provides a simple and interactive way to manage a bank account using basic Python OOP concepts and error handling."
    }
]