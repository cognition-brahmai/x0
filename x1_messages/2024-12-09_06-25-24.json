[
    {
        "role": "user",
        "content": "Write a C++ program that calculates the factorial of a given positive integer using recursion.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a C++ program that calculates the factorial of a given positive integer using recursion:\n\n```cpp\n#include <iostream>\n\n// Function to calculate factorial using recursion\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> number;\n\n    if (number < 0) {\n        std::cout << \"Factorial is not defined for negative numbers.\" << std::endl;\n    } else {\n        unsigned long long result = factorial(number);\n        std::cout << \"Factorial of \" << number << \" is \" << result << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Function Definition:**\n   - `unsigned long long factorial(int n)`: This function calculates the factorial of `n` using recursion.\n   - **Base Case:** If `n` is 0 or 1, it returns 1 because the factorial of 0 and 1 is 1.\n   - **Recursive Case:** For any other positive integer `n`, it returns `n` multiplied by the factorial of `n-1`.\n\n2. **Main Function:**\n   - It prompts the user to enter a positive integer.\n   - It reads the input and checks if it is negative. If negative, it displays an error message since factorial is not defined for negative numbers.\n   - If the number is non-negative, it calls the `factorial` function and displays the result.\n\nThis program uses recursion to compute the factorial, which is a straightforward approach for this problem."
    }
]