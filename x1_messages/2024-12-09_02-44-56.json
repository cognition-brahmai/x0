[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with Redis to store and retrieve key-value pairs. The script should support the following commands: SET, GET, DEL, and EXISTS. It should also handle error cases gracefully, such as attempting to get or delete a non-existent key.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that interacts with Redis to perform basic operations like SET, GET, DEL, and EXISTS. We'll make sure it handles errors gracefully, especially when dealing with non-existent keys.\n\nFirst, you'll need to have Redis installed and running on your machine. You can download it from redis.io. Once Redis is set up, you'll also need the Redis Python client library, which you can install using pip:\n\n```bash\npip install redis\n```\n\nNow, let's start by importing the Redis library and setting up a connection to your Redis server. Assuming Redis is running locally on the default port, here's how you can do it:\n\n```python\nimport redis\n\n# Connect to Redis server\nr = redis.StrictRedis(host='localhost', port=6379, db=0)\n```\n\nNext, we'll define functions for each of the supported commands: SET, GET, DEL, and EXISTS.\n\n### SET Command\n\nThe SET command will take a key and a value, and store it in Redis.\n\n```python\ndef set_key(key, value):\n    try:\n        r.set(key, value)\n        print(f\"Key '{key}' set to '{value}'\")\n    except Exception as e:\n        print(f\"Error setting key: {e}\")\n```\n\n### GET Command\n\nThe GET command will retrieve the value associated with a given key.\n\n```python\ndef get_key(key):\n    try:\n        value = r.get(key)\n        if value is not None:\n            print(f\"Value for key '{key}': {value.decode('utf-8')}\")\n        else:\n            print(f\"No value found for key '{key}'\")\n    except Exception as e:\n        print(f\"Error getting key: {e}\")\n```\n\n### DEL Command\n\nThe DEL command will delete a key from Redis.\n\n```python\ndef delete_key(key):\n    try:\n        result = r.delete(key)\n        if result == 1:\n            print(f\"Key '{key}' deleted\")\n        else:\n            print(f\"Key '{key}' not found\")\n    except Exception as e:\n        print(f\"Error deleting key: {e}\")\n```\n\n### EXISTS Command\n\nThe EXISTS command will check if a key exists in Redis.\n\n```python\ndef exists_key(key):\n    try:\n        result = r.exists(key)\n        if result == 1:\n            print(f\"Key '{key}' exists\")\n        else:\n            print(f\"Key '{key}' does not exist\")\n    except Exception as e:\n        print(f\"Error checking existence of key: {e}\")\n```\n\n### Putting it all together\n\nNow, let's create a simple command-line interface where the user can input commands and interact with Redis.\n\n```python\ndef main():\n    while True:\n        command = input(\"Enter command (SET key value, GET key, DEL key, EXISTS key, QUIT): \").strip().upper()\n        parts = command.split()\n        \n        if command == \"QUIT\":\n            print(\"Goodbye!\")\n            break\n        elif parts[0] == \"SET\" and len(parts) == 3:\n            set_key(parts[1], parts[2])\n        elif parts[0] == \"GET\" and len(parts) == 2:\n            get_key(parts[1])\n        elif parts[0] == \"DEL\" and len(parts) == 2:\n            delete_key(parts[1])\n        elif parts[0] == \"EXISTS\" and len(parts) == 2:\n            exists_key(parts[1])\n        else:\n            print(\"Invalid command format. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **SET Command**: Stores a key-value pair in Redis.\n2. **GET Command**: Retrieves the value for a given key. If the key doesn't exist, it informs the user.\n3. **DEL Command**: Deletes a key from Redis. If the key doesn't exist, it informs the user.\n4. **EXISTS Command**: Checks if a key exists in Redis.\n5. **QUIT**: Exits the program.\n\nEach function handles exceptions to ensure that any errors in interacting with Redis are caught and displayed gracefully.\n\nThis script provides a basic interface to interact with Redis using the specified commands. You can extend it further by adding more Redis commands or improving the user interface as needed.\n"
    }
]