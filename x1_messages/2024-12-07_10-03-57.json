[
    {
        "role": "user",
        "content": "Develop a Python script that performs sentiment analysis on tweets fetched using Twitter API. The script should return the overall sentiment score (positive, negative, or neutral) for a given hashtag.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that performs sentiment analysis on tweets fetched using the Twitter API for a given hashtag. We'll need to follow a few steps to achieve this:\n\n1. **Set up the Twitter API**: You'll need to have a Twitter developer account and create an app to get your API keys and access tokens.\n\n2. **Fetch tweets using the Twitter API**: We'll use the Tweepy library, which is a Python library for accessing the Twitter API.\n\n3. **Perform sentiment analysis**: We'll use the TextBlob library, which is a simple library for processing textual data and includes a sentiment analysis feature.\n\n4. **Calculate the overall sentiment score**: We'll aggregate the sentiment scores of individual tweets to determine the overall sentiment for the given hashtag.\n\n### Step 1: Set up the Twitter API\n\nFirst, you need to have a Twitter developer account and create an app to get your API keys and access tokens. Once you have them, you can store them in your script or use environment variables for security.\n\n### Step 2: Install Required Libraries\n\nYou'll need to install Tweepy and TextBlob if you haven't already. You can install them using pip:\n\n```bash\npip install tweepy textblob\n```\n\n### Step 3: Write the Script\n\nHere's a sample script that accomplishes the task:\n\n```python\nimport tweepy\nfrom textblob import TextBlob\nimport os\n\n# Twitter API credentials\nconsumer_key = os.environ.get('TWITTER_CONSUMER_KEY')\nconsumer_secret = os.environ.get('TWITTER_CONSUMER_SECRET')\naccess_token = os.environ.get('TWITTER_ACCESS_TOKEN')\naccess_token_secret = os.environ.get('TWITTER_ACCESS_TOKEN_SECRET')\n\n# Authenticate with Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ndef fetch_tweets(hashtag, count=100):\n    try:\n        # Fetch tweets\n        tweets = tweepy.Cursor(api.search_tweets, q=hashtag, lang=\"en\", tweet_mode='extended').items(count)\n        return [tweet.full_text for tweet in tweets]\n    except tweepy.TweepError as e:\n        print(f\"Error fetching tweets: {e}\")\n        return []\n\ndef analyze_sentiment(tweets):\n    positive = 0\n    negative = 0\n    neutral = 0\n    polarity = 0\n\n    for tweet in tweets:\n        analysis = TextBlob(tweet)\n        polarity += analysis.sentiment.polarity\n\n        if analysis.sentiment.polarity > 0:\n            positive += 1\n        elif analysis.sentiment.polarity < 0:\n            negative += 1\n        else:\n            neutral += 1\n\n    return positive, negative, neutral, polarity\n\ndef main():\n    hashtag = input(\"Enter the hashtag to analyze: \")\n    count = int(input(\"Enter the number of tweets to analyze: \"))\n\n    tweets = fetch_tweets(hashtag, count)\n    if not tweets:\n        print(\"No tweets found.\")\n        return\n\n    positive, negative, neutral, polarity = analyze_sentiment(tweets)\n\n    # Calculate percentages\n    positive_percent = 100 * positive / len(tweets)\n    negative_percent = 100 * negative / len(tweets)\n    neutral_percent = 100 * neutral / len(tweets)\n\n    # Determine overall sentiment\n    if polarity > 0:\n        overall_sentiment = \"Positive\"\n    elif polarity < 0:\n        overall_sentiment = \"Negative\"\n    else:\n        overall_sentiment = \"Neutral\"\n\n    # Print the analysis\n    print(f\"Overall Sentiment: {overall_sentiment}\")\n    print(f\"Positive tweets: {positive_percent:.2f}%\")\n    print(f\"Negative tweets: {negative_percent:.2f}%\")\n    print(f\"Neutral tweets: {neutral_percent:.2f}%\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Authentication**: We use Tweepy to authenticate with the Twitter API using your credentials.\n\n2. **Fetch Tweets**: We fetch a specified number of tweets containing the given hashtag.\n\n3. **Sentiment Analysis**: We use TextBlob to analyze the sentiment of each tweet. TextBlob returns a polarity score between -1 and 1, where -1 is fully negative, 1 is fully positive, and 0 is neutral.\n\n4. **Calculate Overall Sentiment**: We aggregate the polarity scores to determine the overall sentiment.\n\n5. **Output**: We print the overall sentiment and the percentages of positive, negative, and neutral tweets.\n\n### Notes\n\n- Make sure to handle your API keys securely. Using environment variables is a good practice.\n- Tweepy's search_tweets method has rate limits, so be cautious with the number of requests.\n- TextBlob provides a simple sentiment analysis, which might not be accurate for all cases. For more sophisticated analysis, consider using other NLP libraries or models.\n\nThis script should give you a good starting point for performing sentiment analysis on tweets for a given hashtag."
    }
]