[
    {
        "role": "user",
        "content": "Create a Trie data structure in C++ for storing words from a dictionary. Include methods to insert words, search for words, and delete words from the Trie.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a Trie data structure in C++ that can store words from a dictionary. It includes methods to insert words, search for words, and delete words from the Trie.\n\n```cpp\n#include <iostream>\n#include <unordered_map>\n#include <cstring>\n\nclass TrieNode {\npublic:\n    char data;\n    std::unordered_map<char, TrieNode*> children;\n    bool isEndOfWord;\n\n    TrieNode(char ch) {\n        data = ch;\n        isEndOfWord = false;\n    }\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\n    void deleteHelper(TrieNode* current, const std::string& word, int index) {\n        if (index == word.length()) {\n            if (current->isEndOfWord) {\n                current->isEndOfWord = false;\n            }\n            return;\n        }\n\n        char ch = word[index];\n        if (current->children.find(ch) == current->children.end()) {\n            return;\n        }\n\n        deleteHelper(current->children[ch], word, index + 1);\n\n        if (current->children[ch]->children.empty() && !current->children[ch]->isEndOfWord) {\n            delete current->children[ch];\n            current->children.erase(ch);\n        }\n    }\n\npublic:\n    Trie() {\n        root = new TrieNode('\\0');\n    }\n\n    void insert(const std::string& word) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            if (current->children.find(ch) == current->children.end()) {\n                current->children[ch] = new TrieNode(ch);\n            }\n            current = current->children[ch];\n        }\n        current->isEndOfWord = true;\n    }\n\n    bool search(const std::string& word) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            if (current->children.find(ch) == current->children.end()) {\n                return false;\n            }\n            current = current->children[ch];\n        }\n        return current->isEndOfWord;\n    }\n\n    void remove(const std::string& word) {\n        deleteHelper(root, word, 0);\n    }\n\n    ~Trie() {\n        delete root;\n    }\n};\n\nint main() {\n    Trie trie;\n    trie.insert(\"hello\");\n    trie.insert(\"world\");\n    trie.insert(\"helium\");\n\n    std::cout << \"Search 'hello': \" << (trie.search(\"hello\") ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search 'world': \" << (trie.search(\"world\") ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search 'helium': \" << (trie.search(\"helium\") ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search 'hell': \" << (trie.search(\"hell\") ? \"Found\" : \"Not Found\") << std::endl;\n\n    trie.remove(\"hello\");\n    std::cout << \"After deletion of 'hello':\" << std::endl;\n    std::cout << \"Search 'hello': \" << (trie.search(\"hello\") ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search 'helium': \" << (trie.search(\"helium\") ? \"Found\" : \"Not Found\") << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **TrieNode Class**:\n   - Each node contains a character, a map of its children nodes, and a flag to indicate if it's the end of a word.\n\n2. **Trie Class**:\n   - **Insertion**: Traverses the Trie, creating new nodes for characters not present in the path.\n   - **Search**: Checks if the word exists by traversing the Trie and verifying the end-of-word flag.\n   - **Deletion**: Uses a helper function to traverse the Trie and remove nodes appropriately, ensuring that only leaf nodes are deleted if they don't contribute to other words.\n\n3. **Main Function**:\n   - Demonstrates inserting words into the Trie, searching for them, and removing a word, then checking the results.\n\nThis implementation ensures efficient insertion, searching, and deletion operations, typical of Trie data structures."
    }
]