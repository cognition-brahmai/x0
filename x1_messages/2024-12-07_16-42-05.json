[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to insert, delete, and search for elements. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python class for a doubly linked list with methods to insert, delete, and search for elements.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n            new_node.prev = current\n\n    def delete(self, data):\n        if self.head is None:\n            return\n        if self.head.data == data:\n            if self.head.next:\n                self.head = self.head.next\n                self.head.prev = None\n            else:\n                self.head = None\n            return\n        current = self.head\n        while current:\n            if current.data == data:\n                if current.next:\n                    current.next.prev = current.prev\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                return\n            current = current.next\n\n    def search(self, data):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(current.data)\n            current = current.next\n        return elements\n```\n\n### Explanation:\n1. **Node Class**: Represents a node in the doubly linked list with `data`, `next`, and `prev` attributes.\n2. **DoublyLinkedList Class**:\n   - **insert_at_beginning(data)**: Inserts a new node with the given data at the beginning of the list.\n   - **insert_at_end(data)**: Inserts a new node with the given data at the end of the list.\n   - **delete(data)**: Deletes the first occurrence of a node with the given data.\n   - **search(data)**: Searches for the first occurrence of a node with the given data and returns its index (0-based). If not found, returns -1.\n   - **display()**: Returns a list of all elements in the doubly linked list for easy visualization.\n\nThis class provides basic operations for managing a doubly linked list."
    }
]