[
    {
        "role": "user",
        "content": "Develop a Node.js script that connects to a MariaDB database and inserts a new record into a \"users\" table with columns \"id\", \"name\", and \"email\". The script should accept command line arguments for name and email."
    },
    {
        "role": "assistant",
        "content": "To create a Node.js script that connects to a MariaDB database and inserts a new record into a \"users\" table, you'll need to follow these steps:\n\n1. **Set up your project**: Initialize a new Node.js project and install the necessary dependencies.\n2. **Create the database connection**: Use the `mariadb` package to connect to your MariaDB database.\n3. **Parse command line arguments**: Accept name and email from command line arguments.\n4. **Insert the new record**: Prepare and execute an SQL query to insert the new user into the \"users\" table.\n\n### Step 1: Set Up Your Project\n\nFirst, create a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir node-mariadb-insert\ncd node-mariadb-insert\nnpm init -y\n```\n\nInstall the required packages:\n\n```bash\nnpm install mariadb minimist\n```\n\n- `mariadb`: For connecting to the MariaDB database.\n- `minimist`: For parsing command line arguments.\n\n### Step 2: Create the Database Connection\n\nCreate a new file, e.g., `insertUser.js`, and set up the database connection:\n\n```javascript\nconst mariadb = require('mariadb');\nconst minimist = require('minimist');\n\n// Configuration for the database connection\nconst config = {\n  host: 'localhost',\n  user: 'your_username',\n  password: 'your_password',\n  database: 'your_database'\n};\n\n// Create a connection pool\nconst pool = mariadb.createPool(config);\n```\n\nReplace `'your_username'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n\n### Step 3: Parse Command Line Arguments\n\nUse `minimist` to parse the command line arguments for name and email:\n\n```javascript\nconst args = minimist(process.argv.slice(2));\n\nif (!args.name || !args.email) {\n  console.log('Usage: node insertUser.js --name=\"John Doe\" --email=\"john.doe@example.com\"');\n  process.exit(1);\n}\n\nconst name = args.name;\nconst email = args.email;\n```\n\n### Step 4: Insert the New Record\n\nPrepare and execute an SQL query to insert the new user into the \"users\" table:\n\n```javascript\nasync function insertUser(name, email) {\n  let conn;\n  try {\n    conn = await pool.getConnection();\n    const query = 'INSERT INTO users (name, email) VALUES (?, ?)';\n    const result = await conn.query(query, [name, email]);\n    console.log('User inserted with ID:', result.insertId);\n  } catch (err) {\n    console.error('Error:', err);\n  } finally {\n    if (conn) conn.release();\n  }\n}\n\ninsertUser(name, email);\n```\n\n### Complete Script\n\nPutting it all together, your `insertUser.js` should look like this:\n\n```javascript\nconst mariadb = require('mariadb');\nconst minimist = require('minimist');\n\n// Configuration for the database connection\nconst config = {\n  host: 'localhost',\n  user: 'your_username',\n  password: 'your_password',\n  database: 'your_database'\n};\n\n// Create a connection pool\nconst pool = mariadb.createPool(config);\n\nconst args = minimist(process.argv.slice(2));\n\nif (!args.name || !args.email) {\n  console.log('Usage: node insertUser.js --name=\"John Doe\" --email=\"john.doe@example.com\"');\n  process.exit(1);\n}\n\nconst name = args.name;\nconst email = args.email;\n\nasync function insertUser(name, email) {\n  let conn;\n  try {\n    conn = await pool.getConnection();\n    const query = 'INSERT INTO users (name, email) VALUES (?, ?)';\n    const result = await conn.query(query, [name, email]);\n    console.log('User inserted with ID:', result.insertId);\n  } catch (err) {\n    console.error('Error:', err);\n  } finally {\n    if (conn) conn.release();\n  }\n}\n\ninsertUser(name, email);\n```\n\n### Running the Script\n\nTo run the script, use the following command:\n\n```bash\nnode insertUser.js --name=\"John Doe\" --email=\"john.doe@example.com\"\n```\n\nThis will connect to your MariaDB database, insert a new user with the provided name and email into the \"users\" table, and log the ID of the inserted user."
    }
]