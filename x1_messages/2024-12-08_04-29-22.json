[
    {
        "role": "user",
        "content": "Write a Python script that monitors a specified directory for new files with a specific extension (e.g., .txt). When a new file is detected, the script should read its content, count the number of words, and append the result to a log file along with the file's name and timestamp. Use command line arguments for specifying the target directory, file extension, and log file path.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that watches a specific folder for new text files, counts the words in those files, and logs the results with timestamps. And I need to use command line arguments to specify the folder, the file extension to look for, and where to save the log file. Sounds straightforward, but I need to make sure I cover all the parts correctly.\n\nFirst, I need to set up the script to accept command line arguments. Python's argparse module is perfect for this. I'll define arguments for the target directory, the file extension, and the log file path. I should also provide some help text to make it user-friendly.\n\nNext, I need to monitor a directory for new files. For this, I can use the watchdog library, which makes it easy to watch for file system events. I'll set up an event handler that triggers when a new file with the specified extension is created in the directory.\n\nWhen a new file is detected, the script should read its content, count the number of words, and then append the result to a log file along with the file's name and a timestamp. For the word count, I can read the file's content and split it into words, then count the elements in the list. For the timestamp, I'll use Python's datetime module to get the current time.\n\nI should also handle any potential errors, like permission issues when reading files or writing to the log file. It's better to make the script robust so it doesn't crash if something goes wrong.\n\nLet me think about the structure of the script:\n\n1. Import necessary modules: argparse, datetime, os, and watchdog.\n\n2. Set up argparse to handle command line arguments.\n\n3. Define an event handler class that inherits from watchdog's FileSystemEventHandler. In the on_created method, check if the new file has the specified extension. If it does, read its content, count the words, get the current timestamp, and append this information to the log file.\n\n4. In the main part of the script, parse the arguments, set up the observer to watch the specified directory, and start the observer to begin monitoring.\n\nI should also consider how to run the script continuously so that it keeps monitoring the directory indefinitely, or at least for a long time, unless interrupted by the user.\n\nAlright, I think I have a plan. Now, let's start implementing this step by step.\n\nFirst, I need to install the watchdog library if it's not already installed. I can do this using pip:\n\n```bash\npip install watchdog\n```\n\nNow, I'll start writing the script.\n\n## Final Solution\nTo create a Python script that monitors a specified directory for new files with a specific extension (e.g., `.txt`), reads their content, counts the number of words, and appends the result to a log file along with the file's name and timestamp, you can follow the steps below.\n\n### Approach\n\n1. **Command Line Arguments**: Use `argparse` to accept command line arguments for the target directory, file extension, and log file path.\n2. **Directory Monitoring**: Use the `watchdog` library to monitor the specified directory for new files.\n3. **File Handling**: When a new file with the specified extension is detected, read its content, count the words, and log the results along with a timestamp.\n\n### Solution Code\n\n```python\nimport argparse\nimport datetime\nimport time\nimport os\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass NewFileHandler(FileSystemEventHandler):\n    def __init__(self, extension, log_file):\n        self.extension = extension\n        self.log_file = log_file\n\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            if file_path.endswith(self.extension):\n                try:\n                    with open(file_path, 'r', encoding='utf-8') as file:\n                        content = file.read()\n                        word_count = len(content.split())\n                    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                    log_entry = f\"{timestamp} - File: {file_path} - Word Count: {word_count}\\n\"\n                    with open(self.log_file, 'a', encoding='utf-8') as log:\n                        log.write(log_entry)\n                    print(log_entry.strip())\n                except Exception as e:\n                    print(f\"Error processing file {file_path}: {e}\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Monitor a directory for new files with a specific extension, count words, and log results.\")\n    parser.add_argument(\"directory\", help=\"The directory to monitor.\")\n    parser.add_argument(\"extension\", help=\"The file extension to look for (e.g., .txt).\")\n    parser.add_argument(\"log_file\", help=\"The path to the log file.\")\n    args = parser.parse_args()\n\n    event_handler = NewFileHandler(args.extension, args.log_file)\n    observer = Observer()\n    observer.schedule(event_handler, path=args.directory, recursive=False)\n    observer.start()\n    print(f\"Monitoring {args.directory} for new files with extension {args.extension}. Log file: {args.log_file}\")\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Argument Parsing**: The script uses `argparse` to parse command line arguments for the target directory, file extension, and log file path.\n2. **Event Handling**: A custom event handler class `NewFileHandler` is defined, which inherits from `FileSystemEventHandler`. It overrides the `on_created` method to handle new files.\n3. **File Processing**: When a new file with the specified extension is detected, it reads the file's content, counts the words, gets the current timestamp, and appends this information to the log file.\n4. **Continuous Monitoring**: The script uses a `while True` loop to keep monitoring the directory indefinitely until interrupted by the user (e.g., via Ctrl+C).\n\nThis script provides a robust way to monitor a directory for new files, process them as per the requirements, and log the results with timestamps."
    }
]