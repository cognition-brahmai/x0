[
    {
        "role": "user",
        "content": "Develop a Golang program that implements a simple chat server and client using WebSockets. The server should broadcast messages received from clients to all connected clients. Clients should be able to send and receive messages in real-time.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple chat server and client using Go and WebSockets. We'll use the `gorilla/websocket` package for handling WebSocket connections since it's one of the most popular WebSocket libraries for Go.\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). Also, install the `gorilla/websocket` package by running:\n\n```sh\ngo get github.com/gorilla/websocket\n```\n\nNow, let's start by setting up the server.\n\n## Chat Server\n\n### server.go\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n\nvar clients = make(map[*websocket.Conn]bool) // connected clients\nvar broadcast = make(chan Message)           // broadcast channel\n\n// Configure the upgrader\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n\n// Message is the message type\ntype Message struct {\n\tUsername string `json:\"username\"`\n\tMessage  string `json:\"message\"`\n}\n\nfunc main() {\n\tfs := http.FileServer(http.Dir(\"public\"))\n\thttp.Handle(\"/\", fs)\n\thttp.HandleFunc(\"/ws\", handleConnections)\n\n\tgo handleMessages()\n\n\tlog.Println(\"Listening on :8080...\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n\nfunc handleConnections(w http.ResponseWriter, r *http.Request) {\n\tws, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ws.Close()\n\n\tclients[ws] = true\n\n\tfor {\n\t\tvar msg Message\n\t\terr := ws.ReadJSON(&msg)\n\t\tif err != nil {\n\t\t\tdelete(clients, ws)\n\t\t\tfmt.Println(\"Client disconnected\")\n\t\t\tbreak\n\t\t}\n\t\tbroadcast <- msg\n\t}\n}\n\nfunc handleMessages() {\n\tfor {\n\t\tmsg := <-broadcast\n\t\tfmt.Printf(\"Broadcasting: %s - %s\\n\", msg.Username, msg.Message)\n\t\tfor client := range clients {\n\t\t\terr := client.WriteJSON(msg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error: %v\", err)\n\t\t\t\tclient.Close()\n\t\t\t\tdelete(clients, client)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n### Explanation\n\n1. **Upgrader Configuration**: The `upgrader` is configured to upgrade HTTP connections to WebSocket connections.\n2. **Handling Connections**: The `handleConnections` function manages WebSocket connections. It reads messages from clients and broadcasts them to all connected clients.\n3. **Broadcasting Messages**: The `handleMessages` function listens for messages on the `broadcast` channel and sends them to all connected clients.\n\n## Chat Client\n\nFor the client side, we'll create a simple HTML page with JavaScript to handle WebSocket connections.\n\n### public/index.html\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Simple Chat</title>\n</head>\n<body>\n    <h1>Simple Chat</h1>\n    <div id=\"chat\">\n        <ul id=\"messages\"></ul>\n    </div>\n    <input type=\"text\" id=\"username\" placeholder=\"Username\">\n    <input type=\"text\" id=\"message\" placeholder=\"Message\">\n    <button onclick=\"sendMessage()\">Send</button>\n\n    <script>\n        const socket = new WebSocket('ws://localhost:8080/ws');\n\n        socket.onmessage = function(event) {\n            const data = JSON.parse(event.data);\n            const li = document.createElement('li');\n            li.textContent = `${data.username}: ${data.message}`;\n            document.getElementById('messages').appendChild(li);\n        };\n\n        function sendMessage() {\n            const username = document.getElementById('username').value;\n            const message = document.getElementById('message').value;\n            if (username && message) {\n                const msg = { username, message };\n                socket.send(JSON.stringify(msg));\n                document.getElementById('message').value = '';\n            }\n        }\n    </script>\n</body>\n</html>\n```\n\n### Explanation\n\n1. **WebSocket Connection**: A WebSocket connection is established to `ws://localhost:8080/ws`.\n2. **Receiving Messages**: When a message is received, it's parsed and displayed in the chat window.\n3. **Sending Messages**: The `sendMessage` function sends user input to the server via WebSocket.\n\n## Running the Application\n\n1. **Start the Server**:\n   ```sh\n   go run server.go\n   ```\n\n2. **Open the Client**:\n   - Open `public/index.html` in multiple browser windows to simulate multiple clients.\n\nNow, you should be able to send messages from one client and see them appear in real-time on all other connected clients.\n\nThis is a basic implementation. For a production system, consider adding features like user authentication, message history, and better error handling."
    }
]