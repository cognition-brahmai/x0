[
    {
        "role": "user",
        "content": "Develop a PowerShell script that monitors system resources such as CPU usage, memory usage, disk space, and network bandwidth on a Windows machine. If any resource exceeds a certain threshold, the script should send an email alert to a specified address. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a PowerShell script that monitors system resources and sends email alerts when certain thresholds are exceeded. We'll cover CPU usage, memory usage, disk space, and network bandwidth. Let's break this down step by step.\n\n### Step 1: Monitoring CPU Usage\n\nFirst, we need to monitor CPU usage. We can use the `Get-Counter` cmdlet to get real-time CPU usage data.\n\n```powershell\n$cpuUsage = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue\n```\n\nWe'll set a threshold, say 80%, and if the CPU usage goes above that, we'll trigger an alert.\n\n### Step 2: Monitoring Memory Usage\n\nFor memory usage, we can use `Get-WmiObject` to retrieve memory statistics.\n\n```powershell\n$memory = Get-WmiObject -Class Win32_OperatingSystem\n$freeMemory = $memory.FreePhysicalMemory\n$totalMemory = $memory.TotalVisibleMemorySize\n$memoryUsage = (1 - $freeMemory / $totalMemory) * 100\n```\n\nAgain, set a threshold, perhaps 80%, and trigger an alert if it's exceeded.\n\n### Step 3: Monitoring Disk Space\n\nTo check disk space, we can use `Get-WmiObject` with the Win32_LogicalDisk class.\n\n```powershell\n$disks = Get-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\"\nforeach ($disk in $disks) {\n    $freeSpace = $disk.FreeSpace\n    $size = $disk.Size\n    $usage = (1 - $freeSpace / $size) * 100\n    if ($usage -gt 80) {\n        # Trigger alert\n    }\n}\n```\n\nSet a threshold for disk usage, say 80%, and alert if any drive exceeds it.\n\n### Step 4: Monitoring Network Bandwidth\n\nMonitoring network bandwidth is a bit trickier. We can use `Get-Counter` to get network interface data.\n\n```powershell\n$networkIn = (Get-Counter '\\Network Interface(*)\\Bytes Received/sec').CounterSamples\n$networkOut = (Get-Counter '\\Network Interface(*)\\Bytes Sent/sec').CounterSamples\n```\n\nYou might want to set thresholds for incoming and outgoing traffic.\n\n### Step 5: Sending Email Alerts\n\nTo send email alerts, we can use the `Send-MailMessage` cmdlet.\n\n```powershell\n$smtpServer = 'smtp.example.com'\n$from = 'alerts@example.com'\n$to = 'admin@example.com'\n$subject = 'Resource Alert'\n$body = 'Resource usage exceeded threshold.'\n\nSend-MailMessage -SmtpServer $smtpServer -From $from -To $to -Subject $subject -Body $body\n```\n\nMake sure to configure your SMTP server details correctly.\n\n### Step 6: Putting It All Together\n\nNow, let's combine all these parts into a single script. We'll also add logging and perhaps run this script at regular intervals using Task Scheduler.\n\n```powershell\n$thresholdCPU = 80\n$thresholdMemory = 80\n$thresholdDisk = 80\n\n$smtpServer = 'smtp.example.com'\n$from = 'alerts@example.com'\n$to = 'admin@example.com'\n\nfunction Send-Alert {\n    param ($message)\n    $subject = 'Resource Alert'\n    $body = \"Alert: $message\"\n    Send-MailMessage -SmtpServer $smtpServer -From $from -To $to -Subject $subject -Body $body\n}\n\n# Monitor CPU\n$cpuUsage = (Get-Counter '\\Processor(_Total)\\% Processor Time').CounterSamples.CookedValue\nif ($cpuUsage -gt $thresholdCPU) {\n    Send-Alert \"CPU usage is at $cpuUsage%, which is above the threshold of $thresholdCPU%.\"\n}\n\n# Monitor Memory\n$memory = Get-WmiObject -Class Win32_OperatingSystem\n$freeMemory = $memory.FreePhysicalMemory\n$totalMemory = $memory.TotalVisibleMemorySize\n$memoryUsage = (1 - $freeMemory / $totalMemory) * 100\nif ($memoryUsage -gt $thresholdMemory) {\n    Send-Alert \"Memory usage is at $memoryUsage%, which is above the threshold of $thresholdMemory%.\"\n}\n\n# Monitor Disk Space\n$disks = Get-WmiObject -Class Win32_LogicalDisk -Filter \"DriveType=3\"\nforeach ($disk in $disks) {\n    $freeSpace = $disk.FreeSpace\n    $size = $disk.Size\n    $usage = (1 - $freeSpace / $size) * 100\n    if ($usage -gt $thresholdDisk) {\n        Send-Alert \"Disk ${disk.DeviceID} usage is at $usage%, which is above the threshold of $thresholdDisk%.\"\n    }\n}\n\n# Monitor Network Bandwidth\n# This part is more complex and might require averaging over time\n# For simplicity, we're skipping it in this example\n\n# Optionally, add logging\n# Add-Content -Path \"C:\\scripts\\resource_monitor.log\" -Value \"$(Get-Date): CPU=$cpuUsage%, Memory=$memoryUsage%, Disks=$diskUsages\"\n```\n\n### Step 7: Scheduling the Script\n\nTo run this script at regular intervals, you can use Windows Task Scheduler. Create a new task that runs the PowerShell script every 5 minutes or at whatever interval you prefer.\n\n### Conclusion\n\nThis script provides a basic framework for monitoring key system resources and sending email alerts when thresholds are exceeded. You can expand upon this by adding more detailed logging, handling multiple email recipients, or incorporating additional system metrics as needed.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]