[
    {
        "role": "user",
        "content": "Write a Python program that uses the tkinter library to create a simple GUI calculator with basic arithmetic operations (addition, subtraction, multiplication, and division)."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple Python program that creates a graphical user interface (GUI) calculator using the `tkinter` library. This calculator can perform basic arithmetic operations: addition, subtraction, multiplication, and division.\n\nFirst, make sure you have `tkinter` installed. It usually comes pre-installed with Python, but if it's not, you can install it using your package manager.\n\nHere's the code:\n\n```python\nimport tkinter as tk\n\nclass Calculator(tk.Tk):\n    def __init__(self):\n        super().__init__()\n        \n        self.title(\"Simple Calculator\")\n        self.geometry(\"400x400\")\n        \n        self.result_var = tk.StringVar()\n        \n        self.create_widgets()\n        \n    def create_widgets(self):\n        # Entry widget to display expressions and results\n        entry = tk.Entry(self, textvariable=self.result_var, font=('Arial', 24), bd=10, insertwidth=4, width=14, justify='right')\n        entry.grid(row=0, column=0, columnspan=4)\n        \n        # Buttons\n        buttons = [\n            ('7', 1, 0), ('8', 1, 1), ('9', 1, 2), ('/', 1, 3),\n            ('4', 2, 0), ('5', 2, 1), ('6', 2, 2), ('*', 2, 3),\n            ('1', 3, 0), ('2', 3, 1), ('3', 3, 2), ('-', 3, 3),\n            ('0', 4, 0), ('C', 4, 1), ('=', 4, 2), ('+', 4, 3),\n        ]\n        \n        for (text, row, col) in buttons:\n            button = tk.Button(self, text=text, font=('Arial', 18), bd=5, padx=20, pady=20, command=lambda t=text: self.on_button_click(t))\n            button.grid(row=row, column=col)\n    \n    def on_button_click(self, text):\n        if text == '=':\n            try:\n                expression = self.result_var.get()\n                result = eval(expression)\n                self.result_var.set(result)\n            except Exception as e:\n                self.result_var.set(\"Error\")\n        elif text == 'C':\n            self.result_var.set(\"\")\n        else:\n            current_text = self.result_var.get()\n            new_text = current_text + text\n            self.result_var.set(new_text)\n\nif __name__ == \"__main__\":\n    app = Calculator()\n    app.mainloop()\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - We define a class `Calculator` that inherits from `tk.Tk`, which is the main window for the application.\n\n2. **Initialization**:\n   - Set the window title and size.\n   - Create a `StringVar` to hold the display text.\n\n3. **Widgets Creation**:\n   - **Entry Widget**: Used to display the expressions and results.\n   - **Buttons**: Created in a grid layout for digits and operations.\n\n4. **Button Click Handling**:\n   - Digits and operators are appended to the current expression.\n   - 'C' clears the display.\n   - '=' evaluates the expression using `eval()` and displays the result.\n   - Error handling is included to catch and display errors during evaluation.\n\n5. **Main Loop**:\n   - Create an instance of `Calculator` and start the main event loop.\n\nThis is a basic implementation and can be expanded with more features like handling decimal points, improving error handling, etc."
    }
]