[
    {
        "role": "user",
        "content": "Write a Bash script that monitors system resource usage such as CPU load, memory usage, disk space, and network traffic. The script should output this information in a human-readable format and send alerts via email when certain thresholds are exceeded. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a Bash script to monitor system resources and send alerts via email involves several steps. We'll use some standard Linux utilities like `top`, `free`, `df`, and `ifconfig` (or `ip` for newer systems) to gather the necessary data. For sending emails, we'll rely on the `mail` command, which is part of many Linux distributions.\n\nFirst, make sure you have the `mailutils` package installed, as it provides the `mail` command. You can install it using your package manager. For example, on Ubuntu, you can run:\n\n```bash\nsudo apt-get install mailutils\n```\n\nOn CentOS, you can use:\n\n```bash\nsudo yum install mailx\n```\n\nOnce you have `mailutils` installed, you can proceed to write the script.\n\n## Script Breakdown\n\n1. **CPU Load**: We'll use `top` to get the CPU usage.\n2. **Memory Usage**: `free` command will give us memory statistics.\n3. **Disk Space**: `df` command will show disk usage.\n4. **Network Traffic**: `ifconfig` or `ip` can be used to monitor network interfaces.\n\nWe'll set thresholds for each of these metrics and send an email alert if any of them exceed those thresholds.\n\n## The Script\n\n```bash\n#!/bin/bash\n\n# Configuration\nEMAIL=\"your-email@example.com\"\nCPU_THRESHOLD=80  # in percentage\nMEMORY_THRESHOLD=80  # in percentage\nDISK_THRESHOLD=90  # in percentage\n\n# Function to get CPU usage\nget_cpu_usage() {\n    top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}'\n}\n\n# Function to get memory usage\nget_memory_usage() {\n    free | awk '/Mem:/ {print $3/$2 * 100.0}'\n}\n\n# Function to get disk usage\nget_disk_usage() {\n    df / | tail -1 | awk '{print $5}' | sed 's/%//'\n}\n\n# Function to get network traffic\nget_network_traffic() {\n    # This is a placeholder. Monitoring network traffic is more complex and may require additional tools.\n    echo \"Network traffic monitoring not implemented yet.\"\n}\n\n# Function to send email alert\nsend_alert() {\n    echo -e \"Subject: System Alert\\n\\n$1\" | sendmail \"$EMAIL\"\n}\n\n# Main monitoring logic\ncpu_usage=$(get_cpu_usage)\nmemory_usage=$(get_memory_usage)\ndisk_usage=$(get_disk_usage)\nnetwork_traffic=$(get_network_traffic)\n\n# Check thresholds and send alerts\nif (( $(echo \"$cpu_usage > $CPU_THRESHOLD\" | bc -l) )); then\n    send_alert \"High CPU usage: $cpu_usage% \"\nfi\n\nif (( $(echo \"$memory_usage > $MEMORY_THRESHOLD\" | bc -l) )); then\n    send_alert \"High memory usage: $memory_usage% \"\nfi\n\nif (( $(echo \"$disk_usage > $DISK_THRESHOLD\" | bc -l) )); then\n    send_alert \"High disk usage: $disk_usage% \"\nfi\n\n# Output current status\necho \"Current System Status:\"\necho \"CPU Usage: $cpu_usage% \"\necho \"Memory Usage: $memory_usage% \"\necho \"Disk Usage: $disk_usage% \"\necho \"$network_traffic\"\n```\n\n## Explanation\n\n1. **Configuration**: Set the email address where alerts should be sent and define thresholds for CPU, memory, and disk usage.\n2. **Functions**:\n   - `get_cpu_usage`: Uses `top` to get the current CPU usage.\n   - `get_memory_usage`: Uses `free` to calculate memory usage percentage.\n   - `get_disk_usage`: Uses `df` to get disk usage percentage.\n   - `get_network_traffic`: Placeholder for network traffic monitoring (this requires more advanced handling).\n   - `send_alert`: Sends an email using `sendmail` with the given message.\n3. **Main Logic**:\n   - Collects current usage statistics.\n   - Checks if any usage exceeds the defined thresholds and sends an alert via email.\n   - Prints the current status to the console.\n\n## Running the Script\n\n1. Save the script to a file, for example, `monitor_system.sh`.\n2. Make the script executable:\n\n```bash\nchmod +x monitor_system.sh\n```\n\n3. Run the script:\n\n```bash\n./monitor_system.sh\n```\n\n## Scheduling the Script\n\nTo monitor system resources continuously, you can schedule this script to run at regular intervals using `cron`. For example, to run it every 5 minutes, add the following line to your crontab:\n\n```bash\n*/5 * * * * /path/to/monitor_system.sh\n```\n\nThis way, the script will automatically check system resources every 5 minutes and send alerts if necessary.\n\n## Note on Network Traffic\n\nMonitoring network traffic is more complex and may require additional tools like `iftop` or `nload`. Implementing this in the script would involve capturing and parsing network interface data, which is beyond the scope of this basic script. You might need to research and integrate such tools based on your specific requirements.\n\nI hope this helps you monitor your system effectively! If you have any questions or need further assistance, feel free to ask."
    }
]