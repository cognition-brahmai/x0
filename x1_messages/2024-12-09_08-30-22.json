[
    {
        "role": "user",
        "content": "Develop a TypeScript application that connects to Azure Storage and uploads a local JSON file to a specified container. The application should also provide functionality to download the uploaded JSON file and display its content.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To develop a TypeScript application that connects to Azure Storage and performs operations like uploading and downloading a JSON file, you'll need to follow these steps:\n\n### Prerequisites\n1. **Azure Subscription**: Ensure you have an Azure subscription. If not, create a free account at [Azure](https://azure.microsoft.com).\n2. **Azure Storage Account**: Create an Azure Storage account if you don't have one. You can do this via the Azure portal.\n3. **Container in Storage Account**: Create a container within your storage account where the JSON files will be stored.\n4. **Local JSON File**: Have a local JSON file ready to upload.\n\n### Setup\n\n1. **Install Node.js and npm**: Make sure Node.js and npm are installed on your machine. You can download them from [nodejs.org](https://nodejs.org).\n\n2. **Create a new TypeScript project**:\n    - Initialize a new Node.js project:\n      ```bash\n      mkdir azure-storage-app\n      cd azure-storage-app\n      npm init -y\n      ```\n    - Install TypeScript and necessary dependencies:\n      ```bash\n      npm install typescript @types/node @azure/storage-blob dotenv\n      ```\n    - Create a `tsconfig.json` file:\n      ```json\n      {\n        \"compilerOptions\": {\n          \"target\": \"ES6\",\n          \"module\": \"commonjs\",\n          \"outDir\": \"dist\",\n          \"strict\": true,\n          \"esModuleInterop\": true\n        },\n        \"include\": [\"src/**/*.ts\"],\n        \"exclude\": [\"node_modules\"]\n      }\n      ```\n    - Create a `.gitignore` file to ignore node_modules and dist folders:\n      ```\n      node_modules\n      dist\n      ```\n\n3. **Project Structure**:\n    ```\n    azure-storage-app/\n    \u251c\u2500\u2500 src/\n    \u2502   \u2514\u2500\u2500 index.ts\n    \u251c\u2500\u2500 .gitignore\n    \u251c\u2500\u2500 tsconfig.json\n    \u251c\u2500\u2500 .env\n    \u2514\u2500\u2500 package.json\n    ```\n\n4. **Environment Variables**:\n    - Create a `.env` file to store your Azure Storage connection string and other configurations:\n      ```\n      AZURE_STORAGE_CONNECTION_STRING='your_connection_string'\n      CONTAINER_NAME='your_container_name'\n      LOCAL_JSON_PATH='path_to_your_local_json_file.json'\n      ```\n\n5. **Install dotenv for environment variables**:\n    ```bash\n    npm install dotenv\n    ```\n\n### Implementation\n\n1. **Import Required Modules**:\n    - In `src/index.ts`, import necessary modules:\n      ```typescript\n      import * as dotenv from 'dotenv';\n      import { BlobServiceClient, StorageSharedKeyCredential } from '@azure/storage-blob';\n      import fs from 'fs';\n      import path from 'path';\n      ```\n\n2. **Load Environment Variables**:\n    - Load variables from `.env`:\n      ```typescript\n      dotenv.config();\n      ```\n\n3. **Setup Azure Blob Service Client**:\n    - Use the connection string to create a BlobServiceClient:\n      ```typescript\n      const connectionString = process.env.AZURE_STORAGE_CONNECTION_STRING;\n      if (!connectionString) {\n          throw new Error('AZURE_STORAGE_CONNECTION_STRING is not set');\n      }\n\n      const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n      ```\n\n4. **Upload JSON File**:\n    - Define a function to upload a local JSON file to the specified container:\n      ```typescript\n      async function uploadJsonFile(localFilePath: string, containerName: string, blobName: string): Promise<void> {\n          const containerClient = blobServiceClient.getContainerClient(containerName);\n          const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n          const data = fs.readFileSync(localFilePath);\n          await blockBlobClient.uploadData(data);\n          console.log(`Uploaded ${localFilePath} to ${containerName}/${blobName}`);\n      }\n      ```\n\n5. **Download JSON File**:\n    - Define a function to download the JSON file from the container and display its content:\n      ```typescript\n      async function downloadJsonFile(containerName: string, blobName: string): Promise<void> {\n          const containerClient = blobServiceClient.getContainerClient(containerName);\n          const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n          const downloadBlockBlobResponse = await blockBlobClient.download();\n          const downloadedFilePath = path.join(__dirname, 'downloaded.json');\n          fs.writeFileSync(downloadedFilePath, await streamToString(downloadBlockBlobResponse.readableStreamBody));\n          console.log(`Downloaded ${containerName}/${blobName} to ${downloadedFilePath}`);\n\n          // Read and display content\n          const content = fs.readFileSync(downloadedFilePath, 'utf8');\n          console.log('JSON Content:');\n          console.log(JSON.parse(content));\n      }\n\n      function streamToString(readableStream: any): Promise<string> {\n          return new Promise((resolve, reject) => {\n              const_chunks: any[] = [];\n              readableStream.on('data', (chunk: any) => _chunks.push(chunk));\n              readableStream.on('end', () => resolve(Buffer.concat(_chunks).toString()));\n              readableStream.on('error', reject);\n          });\n      }\n      ```\n\n6. **Main Function**:\n    - Define the main function to execute upload and download operations:\n      ```typescript\n      async function main() {\n          const containerName = process.env.CONTAINER_NAME;\n          if (!containerName) {\n              throw new Error('CONTAINER_NAME is not set');\n          }\n\n          const localJsonPath = process.env.LOCAL_JSON_PATH;\n          if (!localJsonPath) {\n              throw new Error('LOCAL_JSON_PATH is not set');\n          }\n\n          const blobName = path.basename(localJsonPath);\n\n          try {\n              // Upload the JSON file\n              await uploadJsonFile(localJsonPath, containerName, blobName);\n\n              // Download and display the JSON file\n              await downloadJsonFile(containerName, blobName);\n          } catch (error) {\n              console.error('Error occurred:', error);\n          }\n      }\n\n      main();\n      ```\n\n### Running the Application\n\n1. **Compile TypeScript**:\n    - Compile the TypeScript code to JavaScript:\n      ```bash\n      npx tsc\n      ```\n\n2. **Run the Application**:\n    - Execute the compiled JavaScript code:\n      ```bash\n      node dist/index.js\n      ```\n\nThis setup will upload your local JSON file to the specified Azure Storage container and then download it back to display its content. Make sure to replace placeholders in the `.env` file with actual values from your Azure Storage account."
    }
]