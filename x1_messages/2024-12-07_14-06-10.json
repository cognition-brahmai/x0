[
    {
        "role": "user",
        "content": "Write a Python script that calculates the nth Fibonacci number using memoization. The user should be able to input the value of n, and the script should output the corresponding Fibonacci number."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that calculates the nth Fibonacci number using memoization. The user can input the value of n, and the script will output the corresponding Fibonacci number.\n\n```python\ndef fibonacci(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n <= 1:\n        return n\n    memo[n] = fibonacci(n-1, memo) + fibonacci(n-2, memo)\n    return memo[n]\n\nif __name__ == \"__main__\":\n    n = int(input(\"Enter the value of n: \"))\n    print(f\"The {n}th Fibonacci number is: {fibonacci(n)}\")\n```\n\n### Explanation:\n1. **Function Definition:**\n   - `fibonacci(n, memo={})`: This function calculates the nth Fibonacci number using memoization to optimize recursive calls.\n   - `memo` is a dictionary used to store previously calculated Fibonacci numbers to avoid redundant calculations.\n\n2. **Base Case:**\n   - If `n` is 0 or 1, it returns `n` since the Fibonacci sequence starts with 0 and 1.\n\n3. **Memoization Check:**\n   - If `n` is already in `memo`, it returns the stored value directly.\n\n4. **Recursive Calculation:**\n   - If `n` is not in `memo`, it calculates the Fibonacci number by recursively calling itself for `n-1` and `n-2`, stores the result in `memo`, and returns the result.\n\n5. **User Input and Output:**\n   - The script prompts the user to enter the value of `n`.\n   - It then calls the `fibonacci` function with the user-provided value and prints the result.\n\nThis approach ensures that each Fibonacci number is calculated only once, making it efficient even for larger values of `n`."
    }
]