[
    {
        "role": "user",
        "content": "Create a Python program that simulates a simple bank account system where users can deposit, withdraw, and check their balance. Use object-oriented programming principles and include appropriate exception handling for invalid inputs."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a simple bank account system in Python using object-oriented programming (OOP) principles. We'll create a class to represent a bank account, and this class will have methods to deposit funds, withdraw funds, and check the balance. We'll also include exception handling to manage invalid inputs.\n\nHere's a step-by-step guide to building this system:\n\n### Step 1: Define the Bank Account Class\n\nFirst, we need to define a class that represents a bank account. This class should have attributes to store the account balance and methods to perform operations like depositing, withdrawing, and checking the balance.\n\n```python\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Deposit amount cannot be negative.\")\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Withdrawal amount cannot be negative.\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds.\")\n        self.balance -= amount\n        return self.balance\n\n    def get_balance(self):\n        return self.balance\n```\n\n### Step 2: Create a Menu-Driven Program\n\nNext, we'll create a simple text-based interface that allows users to interact with their bank account. This interface will present a menu with options to deposit, withdraw, check balance, or exit the program.\n\n```python\ndef main():\n    account = BankAccount()\n    while True:\n        print(\"\\n--- Bank Account Simulator ---\")\n        print(\"1. Deposit funds\")\n        print(\"2. Withdraw funds\")\n        print(\"3. Check balance\")\n        print(\"4. Exit\")\n        \n        choice = input(\"Enter your choice (1-4): \")\n        \n        try:\n            if choice == '1':\n                amount = float(input(\"Enter the deposit amount: \"))\n                account.deposit(amount)\n                print(f\"Deposit successful. New balance: {account.get_balance()}\")\n\n            elif choice == '2':\n                amount = float(input(\"Enter the withdrawal amount: \"))\n                account.withdraw(amount)\n                print(f\"Withdrawal successful. New balance: {account.get_balance()}\")\n\n            elif choice == '3':\n                print(f\"Current balance: {account.get_balance()}\")\n\n            elif choice == '4':\n                print(\"Exiting the program. Goodbye!\")\n                break\n\n            else:\n                print(\"Invalid choice. Please enter a number between 1 and 4.\")\n\n        except ValueError as e:\n            print(f\"Error: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **BankAccount Class**:\n    - **`__init__`**: Initializes the account with an optional initial balance.\n    - **`deposit`**: Adds funds to the account. Raises a ValueError if the amount is negative.\n    - **`withdraw`**: Subtracts funds from the account. Raises a ValueError if the amount is negative or if there are insufficient funds.\n    - **`get_balance`**: Returns the current balance.\n\n2. **Main Function**:\n    - Creates an instance of BankAccount.\n    - Presents a menu to the user and handles their choices.\n    - Uses try-except blocks to handle invalid inputs and ensure the program doesn't crash.\n\nThis simple bank account system demonstrates basic OOP principles and exception handling in Python. You can extend this further by adding more features like multiple accounts, transaction history, or interest calculations."
    }
]