[
    {
        "role": "user",
        "content": "Write a C++ program to implement the merge sort algorithm on an array of integers. The program should take input from the user for the size of the array and its elements, then display the sorted array after performing the merge sort.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C++ program that implements the merge sort algorithm on an array of integers. The program prompts the user for the size of the array and its elements, then displays the sorted array after performing the merge sort.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Function to merge two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nvoid merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    // Create temp arrays\n    int L[n1], R[n2];\n\n    // Copy data to temp arrays L[] and R[]\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n    int i = 0; // Initial index of first subarray\n    int j = 0; // Initial index of second subarray\n    int k = l; // Initial index of merged subarray\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of L[], if there are any\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of R[], if there are any\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// l is for left index and r is right index of the sub-array of arr to be sorted\nvoid mergeSort(int arr[], int l, int r) {\n    if (l >= r) {\n        return; // Returns recursively\n    }\n    int m = l + (r - l) / 2;\n    mergeSort(arr, l, m);\n    mergeSort(arr, m + 1, r);\n    merge(arr, l, m, r);\n}\n\n// Function to print an array\nvoid printArray(int A[], int size) {\n    for (int i = 0; i < size; i++)\n        cout << A[i] << \" \";\n    cout << endl;\n}\n\n// Driver code\nint main() {\n    int n;\n    cout << \"Enter the number of elements: \";\n    cin >> n;\n\n    int arr[n];\n    cout << \"Enter the elements: \";\n    for (int i = 0; i < n; i++) {\n        cin >> arr[i];\n    }\n\n    cout << \"Given array is \\n\";\n    printArray(arr, n);\n\n    mergeSort(arr, 0, n - 1);\n\n    cout << \"\\nSorted array is \\n\";\n    printArray(arr, n);\n    return 0;\n}\n```\n\n### Explanation:\n1. **merge Function**: This function merges two halves of the array in sorted order.\n2. **mergeSort Function**: This function recursively divides the array into two halves until each sub-array contains a single element, and then merges those sub-arrays in sorted order.\n3. **printArray Function**: This function prints the elements of the array.\n4. **main Function**: This is the driver function where the user inputs the size and elements of the array. It then calls the mergeSort function to sort the array and prints the sorted array.\n\nTo run this program, compile it with a C++ compiler and execute it. You will be prompted to enter the number of elements and the elements themselves, and the program will display the sorted array using the merge sort algorithm."
    }
]