[
    {
        "role": "user",
        "content": "Create a Python web scraper that extracts information about movies from IMDb. The scraper should fetch movie titles, release years, ratings, and genres for a given range of pages. Store the extracted data in a SQLite database. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python web scraper that extracts movie information from IMDb and stores it in a SQLite database. We'll cover setting up the environment, scraping the data, and storing it in the database.\n\n### Step 1: Set Up the Environment\n\nFirst, make sure you have Python installed on your system. You can download it from [python.org](https://www.python.org/). We'll also need to install some Python libraries:\n\n- `requests` for making HTTP requests.\n- `beautifulsoup4` for parsing HTML.\n- `sqlite3` for database operations (which is included with Python).\n\nYou can install these libraries using pip:\n\n```bash\npip install requests beautifulsoup4\n```\n\n### Step 2: Understand the IMDb Page Structure\n\nIMDb has a standard structure for its movie lists. For this example, we'll scrape the \"Top Rated Movies\" list. Each movie entry contains the title, release year, rating, and genres.\n\nHere's an example of the URL for the top rated movies: [https://www.imdb.com/chart/top/](https://www.imdb.com/chart/top/)\n\nEach page in the list contains multiple movie entries. We'll need to extract the relevant data from these entries.\n\n### Step 3: Write the Web Scraper\n\nWe'll create a Python script that does the following:\n\n1. Makes a request to the IMDb URL.\n2. Parses the HTML content using BeautifulSoup.\n3. Extracts the required information (title, release year, rating, genres).\n4. Stores the data in a SQLite database.\n\n#### Complete Code\n\n```python\nimport requests\nfrom bs4 import BeautifulSoup\nimport sqlite3\n\ndef create_database():\n    conn = sqlite3.connect('movies.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS movies (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            title TEXT NOT NULL,\n            year INTEGER,\n            rating REAL,\n            genres TEXT\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\ndef insert_movie(title, year, rating, genres):\n    conn = sqlite3.connect('movies.db')\n    c = conn.cursor()\n    c.execute('''\n        INSERT INTO movies (title, year, rating, genres) VALUES (?, ?, ?, ?)\n    ''', (title, year, rating, ', '.join(genres)))\n    conn.commit()\n    conn.close()\n\ndef scrape_imdb(start_page, end_page):\n    base_url = 'https://www.imdb.com/chart/top/?start={}&ref_=adv_nxt'\n    headers = {\n        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3'}\n\n    for page in range(start_page, end_page + 1):\n        url = base_url.format((page - 1) * 50 + 1)\n        response = requests.get(url, headers=headers)\n        soup = BeautifulSoup(response.text, 'html.parser')\n        movie_containers = soup.find_all('tr')\n\n        for container in movie_containers:\n            title_column = container.find('td', class_='titleColumn')\n            if title_column:\n                title = title_column.a.text\n                year = int(title_column.span.text.strip('()'))\n                rating = float(container.find('strong').text)\n                genres = [genre.text.strip() for genre in container.find_all('span', class_='genre')]\n                insert_movie(title, year, rating, genres)\n        print(f\"Finished scraping page {page}\")\n\nif __name__ == \"__main__\":\n    create_database()\n    scrape_imdb(1, 5)  # Scrape pages 1 through 5\n```\n\n### Explanation\n\n1. **Database Setup:**\n   - `create_database`: Creates a SQLite database and a table to store movie data.\n   - `insert_movie`: Inserts a movie's data into the database.\n\n2. **Web Scraping:**\n   - `scrape_imdb`: Scrapes movie data from IMDb's top-rated movies list for a given range of pages.\n   - Uses BeautifulSoup to parse the HTML and extract movie titles, release years, ratings, and genres.\n   - Inserts the extracted data into the SQLite database.\n\n3. **Execution:**\n   - The script creates the database and scrapes pages 1 through 5 by default. You can adjust the page range as needed.\n\n### Note\n\n- **Responsible Scraping:** Always ensure that your scraping activities comply with the website's `robots.txt` file and terms of service.\n- **Error Handling:** This script does basic scraping and may need enhancements for error handling and robustness in real-world scenarios.\n\nThis should get you started with scraping movie data from IMDb and storing it in a SQLite database using Python."
    }
]