[
    {
        "role": "user",
        "content": "Write a Golang program that listens on port 8080 and serves a simple HTML form with fields for name, age, and favorite color. When the form is submitted, display the submitted data back to the user along with the current date and time.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a Go program that sets up a web server listening on port 8080 and serves a simple HTML form. The form should have fields for name, age, and favorite color. When the form is submitted, it should display the submitted data back to the user along with the current date and time.\n\nFirst, make sure you have Go installed on your machine. You can download it from https://golang.org/dl/ if you haven't already.\n\nLet's start by setting up a new directory for our project:\n\n```sh\nmkdir form-app\ncd form-app\n```\n\nNow, create a new Go file, let's call it `main.go`:\n\n```sh\ntouch main.go\n```\n\nOpen `main.go` in your favorite text editor and start by importing the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"encoding/html\"\n\t\"fmt\"\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n)\n```\n\nWe'll need `html/template` for safely rendering HTML templates, `net/http` for the web server, and `time` to get the current date and time.\n\nNext, define a struct to hold the form data:\n\n```go\ntype FormData struct {\n\tName        string\n\tAge         string\n\tFavoriteColor string\n}\n```\n\nNow, let's create two HTML templates: one for the form and another for displaying the submitted data.\n\nFirst, the form template (`form.html`):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Form</title>\n</head>\n<body>\n    <h1>Submit your information</h1>\n    <form action=\"/submit\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\" required><br><br>\n        <label for=\"color\">Favorite Color:</label>\n        <input type=\"text\" id=\"color\" name=\"color\" required><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\nSave this as `form.html` in the same directory as `main.go`.\n\nNext, the template for displaying the submitted data (`submission.html`):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Submission Received</title>\n</head>\n<body>\n    <h1>Thank you for submitting your information!</h1>\n    <p><strong>Name:</strong> {{.Name}}</p>\n    <p><strong>Age:</strong> {{.Age}}</p>\n    <p><strong>Favorite Color:</strong> {{.FavoriteColor}}</p>\n    <p><strong>Submitted on:</strong> {{.SubmittedAt}}</p>\n</body>\n</html>\n```\n\nSave this as `submission.html` in the same directory.\n\nNow, back in `main.go`, we need to read these templates and compile them:\n\n```go\nvar formTemplate *template.Template\nvar submissionTemplate *template.Template\n\nfunc init() {\n    formTemplate = template.Must(template.ParseFiles(\"form.html\"))\n    submissionTemplate = template.Must(template.ParseFiles(\"submission.html\"))\n}\n```\n\nDefine a route to serve the form:\n\n```go\nfunc formHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodGet {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n    formTemplate.Execute(w, nil)\n}\n```\n\nDefine a route to handle form submissions:\n\n```go\nfunc submitHandler(w http.ResponseWriter, r *http.Request) {\n    if r.Method != http.MethodPost {\n        http.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n        return\n    }\n    err := r.ParseForm()\n    if err != nil {\n        http.Error(w, \"Error parsing form\", http.StatusBadRequest)\n        return\n    }\n    name := r.FormValue(\"name\")\n    age := r.FormValue(\"age\")\n    color := r.FormValue(\"color\")\n    submittedAt := time.Now().Format(time.RFC1123)\n\n    data := FormData{\n        Name:        html.EscapeString(name),\n        Age:         html.EscapeString(age),\n        FavoriteColor: html.EscapeString(color),\n    }\n\n    data.SubmittedAt = submittedAt\n\n    submissionTemplate.Execute(w, data)\n}\n```\n\nNote that I've added an extra field `SubmittedAt` to the `FormData` struct to hold the submission timestamp. We need to adjust the `FormData` struct accordingly:\n\n```go\ntype FormData struct {\n\tName        string\n\tAge         string\n\tFavoriteColor string\n\tSubmittedAt string\n}\n```\n\nSet up the routes in the `main` function:\n\n```go\nfunc main() {\n\thttp.HandleFunc(\"/\", formHandler)\n\thttp.HandleFunc(\"/submit\", submitHandler)\n\n\tfmt.Println(\"Starting server at port 8080\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n```\n\nThat's it! Now, save all the files and run the program:\n\n```sh\ngo run main.go\n```\n\nOpen your web browser and go to `http://localhost:8080`. You should see the form. Fill it out and submit it, and you should see the submitted data along with the current date and time.\n\n## Final Solution\nTo create a Golang web server that listens on port 8080 and serves a simple HTML form with fields for name, age, and favorite color, and then displays the submitted data along with the current date and time, follow these steps:\n\n### Solution Code\n\n1. **main.go**\n\n```go\npackage main\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"time\"\n)\n\ntype FormData struct {\n\tName        string\n\tAge         string\n\tFavoriteColor string\n\tSubmittedAt string\n}\n\nvar formTemplate *template.Template\nvar submissionTemplate *template.Template\n\nfunc init() {\n\tformTemplate = template.Must(template.ParseFiles(\"form.html\"))\n\tsubmissionTemplate = template.Must(template.ParseFiles(\"submission.html\"))\n}\n\nfunc formHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\tformTemplate.Execute(w, nil)\n}\n\nfunc submitHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\terr := r.ParseForm()\n\tif err != nil {\n\t\thttp.Error(w, \"Error parsing form\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tname := r.FormValue(\"name\")\n\tage := r.FormValue(\"age\")\n\tcolor := r.FormValue(\"color\")\n\tsubmittedAt := time.Now().Format(time.RFC1123)\n\n\tdata := FormData{\n\t\tName:        name,\n\t\tAge:         age,\n\t\tFavoriteColor: color,\n\t\tSubmittedAt: submittedAt,\n\t}\n\n\tsubmissionTemplate.Execute(w, data)\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", formHandler)\n\thttp.HandleFunc(\"/submit\", submitHandler)\n\n\tfmt.Println(\"Starting server at port 8080\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n```\n\n2. **form.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Form</title>\n</head>\n<body>\n    <h1>Submit your information</h1>\n    <form action=\"/submit\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required><br><br>\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\" required><br><br>\n        <label for=\"color\">Favorite Color:</label>\n        <input type=\"text\" id=\"color\" name=\"color\" required><br><br>\n        <input type=\"submit\" value=\"Submit\">\n    </form>\n</body>\n</html>\n```\n\n3. **submission.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Submission Received</title>\n</head>\n<body>\n    <h1>Thank you for submitting your information!</h1>\n    <p><strong>Name:</strong> {{.Name}}</p>\n    <p><strong>Age:</strong> {{.Age}}</p>\n    <p><strong>Favorite Color:</strong> {{.FavoriteColor}}</p>\n    <p><strong>Submitted on:</strong> {{.SubmittedAt}}</p>\n</body>\n</html>\n```\n\n### Explanation\n\n1. **Packages Imported:**\n   - `html/template`: For securely rendering HTML templates.\n   - `net/http`: For setting up the web server.\n   - `time`: To get the current date and time.\n\n2. **Struct Definition:**\n   - `FormData`: Holds the form data and submission timestamp.\n\n3. **HTML Templates:**\n   - `form.html`: Contains the HTML form for user input.\n   - `submission.html`: Displays the submitted data and the submission timestamp.\n\n4. **Template Parsing:**\n   - Templates are parsed and stored in variables during the `init` function to ensure they are compiled before the server starts.\n\n5. **Handler Functions:**\n   - `formHandler`: Serves the form page via GET requests.\n   - `submitHandler`: Handles form submissions via POST requests, retrieves form data, records the submission time, and displays the submitted data.\n\n6. **Main Function:**\n   - Sets up URL routes and starts the web server on port 8080.\n\nBy following these steps and using the provided code, you can create a simple web application in Go that handles form submissions and displays the data along with the submission timestamp."
    }
]