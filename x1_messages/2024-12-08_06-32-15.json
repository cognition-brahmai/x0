[
    {
        "role": "user",
        "content": "Create a Node.js Express application with two endpoints: one for uploading images (PNG, JPEG) to a specified directory, and another for resizing uploaded images to a given width and height using the Sharp library. The resized image should be saved with a new filename indicating its dimensions."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you set up a Node.js Express application with the functionalities you described. We'll create two endpoints: one for uploading images and another for resizing them using the Sharp library.\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir image-uploader\ncd image-uploader\nnpm init -y\n```\n\nNext, install the necessary dependencies:\n\n```bash\nnpm install express multer sharp\n```\n\n- `express`: A minimalist web framework for Node.js.\n- `multer`: A middleware for handling `multipart/form-data`, which is used for uploading files.\n- `sharp`: A high-performance image processing library.\n\nNow, let's set up the basic structure of your application. Create a file named `app.js` and open it in your favorite code editor.\n\nFirst, import the required modules and set up Express and Multer:\n\n```javascript\nconst express = require('express');\nconst multer = require('multer');\nconst sharp = require('sharp');\nconst path = require('path');\nconst fs = require('fs');\n\nconst app = express();\nconst UPLOAD_DIR = 'uploads';\n\n// Ensure the upload directory exists\nif (!fs.existsSync(UPLOAD_DIR)) {\n  fs.mkdirSync(UPLOAD_DIR);\n}\n\n// Configure Multer storage\nconst storage = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, UPLOAD_DIR);\n  },\n  filename: (req, file, cb) => {\n    cb(null, Date.now() + path.extname(file.originalname)); // Append extension\n  }\n});\n\nconst upload = multer({ storage: storage });\n\n// Check if the file is an image\nconst isImage = (req, file, cb) => {\n  if (!file.originalname.match(/\\.(jpg|jpeg|png)$/)) {\n    return cb(new Error('Only image files are allowed!'), false);\n  }\n  cb(null, true);\n};\n```\n\nIn this code:\n\n- We set up the upload directory and create it if it doesn't exist.\n- We configure Multer to store uploaded files in the `uploads` directory with a unique filename based on the current timestamp.\n- We define a function `isImage` to check if the uploaded file is an image with the allowed extensions (jpg, jpeg, png).\n\nNow, let's create the endpoint for uploading images:\n\n```javascript\napp.post('/upload', upload.single('image'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n  res.send(`File uploaded successfully: ${req.file.filename}`);\n});\n```\n\nThis endpoint expects a single file with the form field name `image`. It uses Multer to handle the file upload and sends a success message with the filename.\n\nNext, create the endpoint for resizing images:\n\n```javascript\napp.post('/resize', upload.single('image'), (req, res) => {\n  if (!req.file) {\n    return res.status(400).send('No file uploaded.');\n  }\n\n  const { width, height } = req.query;\n  if (!width || !height) {\n    return res.status(400).send('Width and height parameters are required.');\n  }\n\n  const inputPath = path.join(UPLOAD_DIR, req.file.filename);\n  const extension = path.extname(req.file.filename).toLowerCase();\n  const outputPath = path.join(UPLOAD_DIR, `${width}x${height}-${req.file.filename}`);\n\n  sharp(inputPath)\n    .resize(parseInt(width), parseInt(height))\n    .toFile(outputPath)\n    .then(() => {\n      res.send(`Resized image saved as: ${outputPath}`);\n    })\n    .catch(err => {\n      res.status(500).send(`Error resizing image: ${err.message}`);\n    });\n});\n```\n\nIn this endpoint:\n\n- We expect a single file with the form field name `image`.\n- We retrieve the `width` and `height` parameters from the query string.\n- We construct the input and output file paths.\n- We use Sharp to resize the image and save it with a new filename indicating its dimensions.\n\nFinally, start the server:\n\n```javascript\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\nNow, you can run your application:\n\n```bash\nnode app.js\n```\n\nYour server will be running on port 3000. You can test the endpoints using tools like Postman or curl.\n\n### Testing the Upload Endpoint\n\nTo test the upload endpoint, send a POST request to `http://localhost:3000/upload` with a form field named `image` containing the image file.\n\n### Testing the Resize Endpoint\n\nTo test the resize endpoint, send a POST request to `http://localhost:3000/resize?width=200&height=200` with a form field named `image` containing the image file. Replace `200` with the desired width and height.\n\nThis setup should meet your requirements for uploading and resizing images using Express and Sharp in a Node.js application. If you have any questions or need further assistance, feel free to ask!"
    }
]