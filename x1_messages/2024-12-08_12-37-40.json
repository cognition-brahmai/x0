[
    {
        "role": "user",
        "content": "Write a Python script that uses the Twitter API to fetch tweets containing a specific hashtag, and then performs sentiment analysis on the fetched tweets using the TextBlob library. Display the results as positive, negative, or neutral sentiments. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that fetches tweets with a specific hashtag and then does sentiment analysis on those tweets. I need to use the Twitter API for fetching the tweets and the TextBlob library for analyzing the sentiment. Finally, I have to display the sentiments as positive, negative, or neutral. Sounds straightforward, but I need to make sure I cover all the steps correctly.\n\nFirst things first, I need to set up the environment. That means installing the necessary libraries. I'll need Tweepy for accessing the Twitter API and TextBlob for sentiment analysis. I should also import any other modules I might need, like pandas for data manipulation if required.\n\nSo, starting with installing the libraries. I can do this using pip:\n\n```bash\npip install tweepy textblob pandas\n```\n\nAssuming that the user has Python and pip set up on their system, this should work. If not, they might need to set up Python and pip first.\n\nNext, I need to set up Twitter API credentials. To access the Twitter API, I need to create a Twitter Developer account and get the API keys and access tokens. I'll need to store these credentials securely. For simplicity, I can hardcode them into the script, but ideally, I should use environment variables or a configuration file.\n\nLet's assume I have the credentials stored in variables:\n\n```python\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n```\n\nI need to authenticate with the Twitter API using these credentials. Tweepy makes this easy.\n\nNow, I need to define the hashtag I want to search for. Let's say the user wants to search for tweets containing \"#python\". I should make this customizable, so I'll probably ask the user to input the hashtag.\n\nOnce I have the hashtag, I can use Tweepy's Cursor to fetch tweets containing that hashtag. I need to decide how many tweets to fetch. For example, I can fetch the last 100 tweets.\n\nAfter fetching the tweets, I need to perform sentiment analysis on each tweet's text. TextBlob provides a simple API for this. I can create a TextBlob object from the tweet text and then access its sentiment property, which gives a polarity score between -1 and 1. I can classify the sentiment based on this score: if polarity is greater than 0, it's positive; if less than 0, it's negative; otherwise, it's neutral.\n\nI should collect the results and display them, perhaps showing the tweet text along with its sentiment classification.\n\nAlso, it might be useful to summarize the overall sentiment distribution, like how many positive, negative, and neutral tweets there are.\n\nI should handle any exceptions that might occur, such as authentication errors or rate limits from the Twitter API.\n\nLet me outline the steps in code:\n\n1. Import necessary libraries:\n\n```python\nimport tweepy\nfrom textblob import TextBlob\nimport pandas as pd\n```\n\n2. Set up Twitter API credentials:\n\n```python\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n```\n\n3. Authenticate with Twitter:\n\n```python\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n```\n\n4. Get the hashtag from the user:\n\n```python\nhashtag = input(\"Enter the hashtag to search for: \")\n```\n\n5. Fetch tweets containing the hashtag:\n\n```python\ntweets = tweepy.Cursor(api.search_tweets, q=f\"#{hashtag}\", lang=\"en\").items(100)\n```\n\n6. Perform sentiment analysis:\n\n```python\ntweet_data = []\nfor tweet in tweets:\n    text = tweet.text\n    analysis = TextBlob(text)\n    sentiment = analysis.sentiment.polarity\n    if sentiment > 0:\n        sentiment_class = 'Positive'\n    elif sentiment < 0:\n        sentiment_class = 'Negative'\n    else:\n        sentiment_class = 'Neutral'\n    tweet_data.append({'Tweet': text, 'Sentiment': sentiment_class})\n```\n\n7. Create a DataFrame and display the results:\n\n```python\ndf = pd.DataFrame(tweet_data)\nprint(df)\n```\n\n8. Summarize the sentiment distribution:\n\n```python\nsentiment_counts = df['Sentiment'].value_counts()\nprint(\"\\nSentiment Distribution:\")\nprint(sentiment_counts)\n```\n\nI should also add some error handling:\n\n```python\ntry:\n    # Code for fetching and analyzing tweets\nexcept tweepy.TweepError as e:\n    print(f\"Error: {e}\")\n```\n\nAdditionally, I can prompt the user to input the number of tweets to fetch, making the script more flexible.\n\nLet me refine the code accordingly:\n\n```python\nimport tweepy\nfrom textblob import TextBlob\nimport pandas as pd\n\n# Set up Twitter API credentials\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Authenticate with Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ndef main():\n    try:\n        # Get user input\n        hashtag = input(\"Enter the hashtag to search for: \")\n        num_tweets = int(input(\"Enter the number of tweets to fetch: \"))\n        \n        # Fetch tweets containing the hashtag\n        tweets = tweepy.Cursor(api.search_tweets, q=f\"#{hashtag}\", lang=\"en\").items(num_tweets)\n        \n        # Perform sentiment analysis\n        tweet_data = []\n        for tweet in tweets:\n            text = tweet.text\n            analysis = TextBlob(text)\n            sentiment = analysis.sentiment.polarity\n            if sentiment > 0:\n                sentiment_class = 'Positive'\n            elif sentiment < 0:\n                sentiment_class = 'Negative'\n            else:\n                sentiment_class = 'Neutral'\n            tweet_data.append({'Tweet': text, 'Sentiment': sentiment_class})\n        \n        # Create a DataFrame and display the results\n        df = pd.DataFrame(tweet_data)\n        print(df)\n        \n        # Summarize the sentiment distribution\n        sentiment_counts = df['Sentiment'].value_counts()\n        print(\"\\nSentiment Distribution:\")\n        print(sentiment_counts)\n    \n    except ValueError:\n        print(\"Invalid input for the number of tweets.\")\n    except tweepy.TweepError as e:\n        print(f\"Error fetching tweets: {e}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script should work as expected. It fetches tweets containing the specified hashtag, performs sentiment analysis on each tweet, classifies the sentiment, and displays the results along with a summary of the sentiment distribution.\n\nI should note that the Twitter API has rate limits, so the user might encounter errors if they exceed the allowed request limits.\n\nAlso, TextBlob's sentiment analysis is based on a simple rule-based approach and might not be highly accurate for all types of text. For more precise sentiment analysis, consider using more advanced NLP models like those from the NLTK library or machine learning-based approaches.\n\nBut for this task, TextBlob should suffice, especially considering its ease of use.\n\n## Final Solution\nTo accomplish the task of fetching tweets containing a specific hashtag and performing sentiment analysis on them, we will use the Tweepy library to interact with the Twitter API and the TextBlob library for sentiment analysis. Here's a step-by-step guide to achieve this:\n\n### Prerequisites\n1. **Twitter Developer Account**: You need to create a Twitter Developer account and obtain API keys and access tokens.\n2. **Python Libraries**: Install the required libraries using pip:\n   ```bash\n   pip install tweepy textblob pandas\n   ```\n\n### Solution Code\n\n```python\nimport tweepy\nfrom textblob import TextBlob\nimport pandas as pd\n\n# Set up Twitter API credentials\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Authenticate with Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\ndef main():\n    try:\n        # Get user input\n        hashtag = input(\"Enter the hashtag to search for: \")\n        num_tweets = int(input(\"Enter the number of tweets to fetch: \"))\n        \n        # Fetch tweets containing the hashtag\n        tweets = tweepy.Cursor(api.search_tweets, q=f\"#{hashtag}\", lang=\"en\").items(num_tweets)\n        \n        # Perform sentiment analysis\n        tweet_data = []\n        for tweet in tweets:\n            text = tweet.text\n            analysis = TextBlob(text)\n            sentiment = analysis.sentiment.polarity\n            if sentiment > 0:\n                sentiment_class = 'Positive'\n            elif sentiment < 0:\n                sentiment_class = 'Negative'\n            else:\n                sentiment_class = 'Neutral'\n            tweet_data.append({'Tweet': text, 'Sentiment': sentiment_class})\n        \n        # Create a DataFrame and display the results\n        df = pd.DataFrame(tweet_data)\n        print(df)\n        \n        # Summarize the sentiment distribution\n        sentiment_counts = df['Sentiment'].value_counts()\n        print(\"\\nSentiment Distribution:\")\n        print(sentiment_counts)\n    \n    except ValueError:\n        print(\"Invalid input for the number of tweets.\")\n    except tweepy.TweepError as e:\n        print(f\"Error fetching tweets: {e}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **Authentication**: We authenticate with the Twitter API using the provided credentials.\n2. **Input Handling**: We take user input for the hashtag and the number of tweets to fetch.\n3. **Fetching Tweets**: We use Tweepy's Cursor to fetch tweets containing the specified hashtag.\n4. **Sentiment Analysis**: For each tweet, we use TextBlob to determine the sentiment polarity and classify it as positive, negative, or neutral.\n5. **Display Results**: We use pandas to create a DataFrame of the tweets and their sentiments and print the results along with a summary of the sentiment distribution.\n6. **Error Handling**: We handle potential errors such as invalid input or issues with the Twitter API.\n\nThis script provides a straightforward way to analyze public sentiment on Twitter for a given hashtag."
    }
]