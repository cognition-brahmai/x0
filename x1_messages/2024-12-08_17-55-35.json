[
    {
        "role": "user",
        "content": "Write a C program that performs matrix multiplication. The matrices should be represented as two-dimensional arrays. The dimensions of the matrices should be defined by the user at runtime. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write a C program that multiplies two matrices. The user will define the dimensions at runtime. So, first things first, I need to understand how matrix multiplication works.\n\nMatrix multiplication is only possible when the number of columns in the first matrix is equal to the number of rows in the second matrix. So, if I have matrix A of size m x n and matrix B of size n x p, the result will be matrix C of size m x p.\n\nI need to get the dimensions from the user: m, n, and p. Then, I'll need to declare two-dimensional arrays for A, B, and C with those dimensions. But in C, arrays need their sizes known at compile time, unless I use dynamic memory allocation. Since the dimensions are determined at runtime, I'll have to use dynamic memory allocation for the arrays.\n\nLet me recall how to dynamically allocate memory for two-dimensional arrays in C. It's a bit tricky because C doesn't have built-in support for dynamic multi-dimensional arrays. One common way is to allocate an array of pointers, where each pointer points to a dynamically allocated row.\n\nSo, for matrix A of size m x n:\n\n- First, allocate an array of m pointers.\n\n- Then, for each of these m pointers, allocate an array of n elements.\n\nSame for matrix B of size n x p, and matrix C of size m x p.\n\nAfter allocating memory, I need to take input from the user for matrix A and matrix B. Then, perform the multiplication and store the result in matrix C. Finally, print matrix C.\n\nLet me think about the multiplication step. For each element C[i][j], it's the dot product of the i-th row of A and the j-th column of B. So, for each C[i][j], I need to iterate through the common dimension n, multiplying corresponding elements and summing them up.\n\nI should also handle cases where the number of columns in A doesn't match the number of rows in B, as matrix multiplication isn't defined in that case.\n\nLet me sketch a rough structure of the program:\n\n1. Include necessary headers: stdio.h for input/output, stdlib.h for dynamic memory allocation.\n\n2. Prompt the user to enter the dimensions: m, n for matrix A; n for matrix B (since it has to be the same as columns of A), and p for matrix B.\n\n3. Dynamically allocate memory for matrices A, B, and C based on the input dimensions.\n\n4. Prompt the user to enter the elements of matrix A and matrix B.\n\n5. Perform matrix multiplication:\n\n- For each row i in A:\n\n- For each column j in B:\n\n- For each k in the common dimension n:\n\n- C[i][j] += A[i][k] * B[k][j]\n\n6. Print the resulting matrix C.\n\n7. Free the allocated memory to avoid memory leaks.\n\nI need to be careful with the indices, making sure they don't go out of bounds.\n\nAlso, I should validate the user input to ensure they enter positive integers for dimensions.\n\nLet me consider writing functions to allocate memory for the matrices and to free the memory.\n\nMaybe I can write a function to allocate a 2D array given its rows and columns.\n\nSimilarly, a function to free the allocated memory.\n\nThis will make the code cleaner and more manageable.\n\nLet me think about error handling. If memory allocation fails, I should handle that gracefully, perhaps by checking if the allocation was successful and exiting with an error message if not.\n\nAlso, I need to make sure that the user doesn't enter zero or negative dimensions, as that wouldn't make sense for matrices.\n\nI should prompt the user to enter only positive integers for dimensions.\n\nLet me also consider the data type for the matrices. Since we're dealing with integers, I'll use int for simplicity.\n\nBut perhaps I should use float or double to handle non-integer values as well. Hmm.\n\nFor now, I'll stick with int to keep it simple.\n\nLet me start writing some code.\n\nFirst, include the necessary headers:\n\n#include <stdio.h>\n\n#include <stdlib.h>\n\nThen, define a function to allocate a 2D array:\n\nint** allocate2D(int rows, int cols) {\n\nint** array = (int**)malloc(rows * sizeof(int*));\n\nif (array == NULL) {\n\nprintf(\"Memory allocation failed.\n\n\");\n\nexit(1);\n\n}\n\nfor (int i = 0; i < rows; i++) {\n\narray[i] = (int*)malloc(cols * sizeof(int));\n\nif (array[i] == NULL) {\n\nprintf(\"Memory allocation failed.\n\n\");\n\nexit(1);\n\n}\n\n}\n\nreturn array;\n\n}\n\nSimilarly, a function to free the allocated memory:\n\nvoid free2D(int** array, int rows) {\n\nfor (int i = 0; i < rows; i++) {\n\nfree(array[i]);\n\n}\n\nfree(array);\n\n}\n\nNow, in the main function, I'll prompt the user for dimensions.\n\nBut first, I need to ensure that the number of columns in A is equal to the number of rows in B.\n\nSo, something like:\n\nprintf(\"Enter dimensions for matrix A (m n): \");\n\nscanf(\"%d %d\", &m, &n);\n\nprintf(\"Enter dimensions for matrix B (n p): \");\n\nint p;\n\nscanf(\"%d %d\", &n2, &p);\n\nIf n != n2, error out.\n\nWait, but in the second prompt, I'm asking for n and p, but I need to ensure that n2 == n.\n\nSo, perhaps:\n\nprintf(\"Enter dimensions for matrix B (rows columns): \");\n\nscanf(\"%d %d\", &n2, &p);\n\nif (n != n2) {\n\nprintf(\"Number of columns in A must match number of rows in B.\n\n\");\n\nexit(1);\n\n}\n\nThen, proceed to allocate memory for A, B, and C.\n\nNext, take input for matrix A:\n\nprintf(\"Enter elements of matrix A:\n\n\");\n\nfor (int i = 0; i < m; i++) {\n\nfor (int j = 0; j < n; j++) {\n\nscanf(\"%d\", &A[i][j]);\n\n}\n\n}\n\nSimilarly for matrix B.\n\nThen, perform the multiplication.\n\nfor (int i = 0; i < m; i++) {\n\nfor (int j = 0; j < p; j++) {\n\nC[i][j] = 0;\n\nfor (int k = 0; k < n; k++) {\n\nC[i][j] += A[i][k] * B[k][j];\n\n}\n\n}\n\n}\n\nFinally, print matrix C.\n\nprintf(\"Resultant matrix C:\n\n\");\n\nfor (int i = 0; i < m; i++) {\n\nfor (int j = 0; j < p; j++) {\n\nprintf(\"%d \", C[i][j]);\n\n}\n\nprintf(\"\n\n\");\n\n}\n\nAnd don't forget to free the memory allocated for A, B, and C after use.\n\nLet me think about error checking for user input.\n\nSuppose the user enters non-integer values or negative numbers for dimensions.\n\nI should add checks to ensure that m, n, p are positive integers.\n\nPerhaps use loops to prompt the user until valid input is received.\n\nBut to keep it simple, I'll assume the user enters valid input for now.\n\nAlso, consider the case where m, n, p are large, leading to large memory allocations. But since it's a console application, memory constraints are manageable.\n\nLet me consider writing a small test case to verify the correctness.\n\nSuppose m=2, n=3, p=2.\n\nMatrix A:\n\n1 2 3\n\n4 5 6\n\nMatrix B:\n\n7 8\n\n9 10\n\n11 12\n\nThen, matrix C should be:\n\n1*7 + 2*9 + 3*11 = 7 + 18 + 33 = 58\n\n1*8 + 2*10 + 3*12 = 8 + 20 + 36 = 64\n\n4*7 + 5*9 + 6*11 = 28 + 45 + 66 = 139\n\n4*8 + 5*10 + 6*12 = 32 + 50 + 72 = 154\n\nSo, C should be:\n\n58 64\n\n139 154\n\nI'll use this test case to verify my program.\n\nLet me start writing the code accordingly.\n\n## Final Solution\nTo create a C program that performs matrix multiplication with dimensions defined at runtime, we need to use dynamic memory allocation for the matrices. Here's a step-by-step solution:\n\n### Approach\n\n1. **Input Dimensions**: \n   - Prompt the user to enter the dimensions for matrix A (m rows and n columns).\n   - Prompt the user to enter the dimensions for matrix B (n rows and p columns), ensuring that the number of columns in A matches the number of rows in B.\n\n2. **Dynamic Memory Allocation**:\n   - Allocate memory for matrices A, B, and C using dynamic memory allocation.\n\n3. **Input Elements**:\n   - Take input for matrices A and B from the user.\n\n4. **Matrix Multiplication**:\n   - Perform the multiplication of matrices A and B, storing the result in matrix C.\n\n5. **Output the Result**:\n   - Print the resulting matrix C.\n\n6. **Free Memory**:\n   - Deallocate the dynamically allocated memory to prevent memory leaks.\n\n### Solution Code\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nint** allocate2D(int rows, int cols) {\n    int** array = (int**)malloc(rows * sizeof(int*));\n    if (array == NULL) {\n        printf(\"Memory allocation failed.\n\");\n        exit(1);\n    }\n    for (int i = 0; i < rows; i++) {\n        array[i] = (int*)malloc(cols * sizeof(int));\n        if (array[i] == NULL) {\n            printf(\"Memory allocation failed.\n\");\n            exit(1);\n        }\n    }\n    return array;\n}\n\nvoid free2D(int** array, int rows) {\n    for (int i = 0; i < rows; i++) {\n        free(array[i]);\n    }\n    free(array);\n}\n\nint main() {\n    int m, n, n2, p;\n\n    // Input dimensions for matrix A\n    printf(\"Enter dimensions for matrix A (rows columns): \");\n    scanf(\"%d %d\", &m, &n);\n\n    // Input dimensions for matrix B\n    printf(\"Enter dimensions for matrix B (rows columns): \");\n    scanf(\"%d %d\", &n2, &p);\n\n    // Check if multiplication is possible\n    if (n != n2) {\n        printf(\"Number of columns in A must match number of rows in B.\n\");\n        return 1;\n    }\n\n    // Allocate memory for matrices\n    int** A = allocate2D(m, n);\n    int** B = allocate2D(n, p);\n    int** C = allocate2D(m, p);\n\n    // Input elements for matrix A\n    printf(\"Enter elements of matrix A:\n\");\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &A[i][j]);\n        }\n    }\n\n    // Input elements for matrix B\n    printf(\"Enter elements of matrix B:\n\");\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < p; j++) {\n            scanf(\"%d\", &B[i][j]);\n        }\n    }\n\n    // Perform matrix multiplication\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < p; j++) {\n            C[i][j] = 0;\n            for (int k = 0; k < n; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n\n    // Print the resultant matrix C\n    printf(\"Resultant matrix C:\n\");\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < p; j++) {\n            printf(\"%d \", C[i][j]);\n        }\n        printf(\"\n\");\n    }\n\n    // Free allocated memory\n    free2D(A, m);\n    free2D(B, n);\n    free2D(C, m);\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Dynamic Memory Allocation**:\n   - The `allocate2D` function allocates a 2D array with the given number of rows and columns.\n   - The `free2D` function frees the allocated memory for a 2D array.\n\n2. **Matrix Multiplication**:\n   - The multiplication is performed using nested loops:\n     - Outer loops iterate through rows of A and columns of B.\n     - Inner loop handles the dot product of rows of A and columns of B.\n\n3. **Memory Management**:\n   - Memory is freed after use to prevent leaks.\n\nThis approach ensures that the matrices are correctly multiplied and the memory is managed efficiently."
    }
]