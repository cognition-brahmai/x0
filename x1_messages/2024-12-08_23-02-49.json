[
    {
        "role": "user",
        "content": "With C++, design a basic version of a \"Music Player\" class which includes methods to play, pause, stop, forward, and rewind songs. Also, include a playlist feature where users can add and remove songs from their playlist. For simplicity, represent each song as a string and use console outputs to simulate player actions. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a `MusicPlayer` class in C++. This class allows users to play, pause, stop, forward, and rewind songs, as well as manage a playlist by adding and removing songs.\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\nclass MusicPlayer {\nprivate:\n    std::vector<std::string> playlist;\n    int currentSongIndex;\n    bool isPlaying;\n\npublic:\n    MusicPlayer() : currentSongIndex(-1), isPlaying(false) {}\n\n    void addSong(const std::string& song) {\n        playlist.push_back(song);\n        std::cout << \"Added: \" << song << std::endl;\n    }\n\n    void removeSong(const std::string& song) {\n        for (size_t i = 0; i < playlist.size(); ++i) {\n            if (playlist[i] == song) {\n                playlist.erase(playlist.begin() + i);\n                std::cout << \"Removed: \" << song << std::endl;\n                if (i == currentSongIndex) {\n                    currentSongIndex = -1;\n                } else if (i < currentSongIndex) {\n                    --currentSongIndex;\n                }\n                return;\n            }\n        }\n        std::cout << \"Song not found: \" << song << std::endl;\n    }\n\n    void play() {\n        if (playlist.empty()) {\n            std::cout << \"Playlist is empty.\" << std::endl;\n            return;\n        }\n        if (currentSongIndex == -1) {\n            currentSongIndex = 0;\n        }\n        isPlaying = true;\n        std::cout << \"Playing: \" << playlist[currentSongIndex] << std::endl;\n    }\n\n    void pause() {\n        if (isPlaying) {\n            isPlaying = false;\n            std::cout << \"Paused: \" << playlist[currentSongIndex] << std::endl;\n        } else {\n            std::cout << \"Nothing is currently playing.\" << std::endl;\n        }\n    }\n\n    void stop() {\n        isPlaying = false;\n        currentSongIndex = -1;\n        std::cout << \"Stopped.\" << std::endl;\n    }\n\n    void next() {\n        if (currentSongIndex + 1 < playlist.size()) {\n            ++currentSongIndex;\n            play();\n        } else {\n            std::cout << \"End of playlist.\" << std::endl;\n        }\n    }\n\n    void previous() {\n        if (currentSongIndex - 1 >= 0) {\n            --currentSongIndex;\n            play();\n        } else {\n            std::cout << \"Already at the first song.\" << std::endl;\n        }\n    }\n};\n\nint main() {\n    MusicPlayer player;\n    int choice;\n    std::string song;\n\n    do {\n        std::cout << \"\\nMusic Player Menu:\\n\";\n        std::cout << \"1. Add Song\\n\";\n        std::cout << \"2. Remove Song\\n\";\n        std::cout << \"3. Play\\n\";\n        std::cout << \"4. Pause\\n\";\n        std::cout << \"5. Stop\\n\";\n        std::cout << \"6. Next\\n\";\n        std::cout << \"7. Previous\\n\";\n        std::cout << \"8. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter song name: \";\n                std::cin.ignore();\n                std::getline(std::cin, song);\n                player.addSong(song);\n                break;\n            case 2:\n                std::cout << \"Enter song name to remove: \";\n                std::cin.ignore();\n                std::getline(std::cin, song);\n                player.removeSong(song);\n                break;\n            case 3:\n                player.play();\n                break;\n            case 4:\n                player.pause();\n                break;\n            case 5:\n                player.stop();\n                break;\n            case 6:\n                player.next();\n                break;\n            case 7:\n                player.previous();\n                break;\n            case 8:\n                std::cout << \"Exiting...\" << std::endl;\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\" << std::endl;\n        }\n    } while (choice != 8);\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - `playlist`: A vector to store song names.\n   - `currentSongIndex`: Tracks the currently playing song.\n   - `isPlaying`: Boolean to indicate if a song is currently playing.\n\n2. **Methods**:\n   - `addSong`: Adds a song to the playlist.\n   - `removeSong`: Removes a specified song from the playlist.\n   - `play`: Starts playing the current song or the first song if none is selected.\n   - `pause`: Pauses the currently playing song.\n   - `stop`: Stops playback and resets the player.\n   - `next`: Moves to the next song in the playlist.\n   - `previous`: Moves to the previous song in the playlist.\n\n3. **Main Function**:\n   - Displays a menu for user interaction.\n   - Handles user choices to perform corresponding actions on the music player.\n\nThis code provides a basic simulation of a music player's functionality using console outputs."
    }
]