[
    {
        "role": "user",
        "content": "Implement a Python Flask API that interacts with a MongoDB database to manage a collection of books. Each book document should contain fields for title, author, publication date, and ISBN. Provide endpoints for adding new books, updating existing ones, searching for books by various criteria, and deleting books by their ISBN.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a Python Flask API that interacts with a MongoDB database to manage a collection of books involves several steps. We'll need to set up our environment, create the Flask application, connect to MongoDB, define our book model, and implement the necessary endpoints.\n\n### Step 1: Set Up Your Environment\n\nFirst, make sure you have Python installed on your system. Then, install the required packages:\n\n- `flask`: For creating the web API.\n- `pymongo`: For interacting with MongoDB.\n- `flask-cors`: To handle Cross-Origin Resource Sharing (optional but recommended for development).\n\nYou can install these using pip:\n\n```bash\npip install flask pymongo flask-cors\n```\n\n### Step 2: Set Up Your MongoDB Database\n\nYou can use a local MongoDB instance or a cloud-based one like MongoDB Atlas. For this example, I'll assume you're using a local instance.\n\nStart your MongoDB server if it's not already running. You can connect to it using the default host and port (`localhost:27017`).\n\n### Step 3: Create the Flask Application\n\nCreate a new directory for your project and set up your Flask application.\n\n#### Project Structure\n\n```\nbookapi/\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 config.py\n\u2514\u2500\u2500 requirements.txt\n```\n\n#### config.py\n\nDefine your MongoDB connection settings here.\n\n```python\nclass Config:\n    MONGO_URI = \"mongodb://localhost:27017/\"\n    DATABASE = \"bookdb\"\n```\n\n#### requirements.txt\n\nList your dependencies here.\n\n```\nflask\npymongo\nflask-cors\n```\n\n### Step 4: Implement the Flask API\n\nNow, let's create the `app.py` file and implement the required functionality.\n\n#### app.py\n\n```python\nfrom flask import Flask, request, jsonify\nfrom pymongo import MongoClient\nfrom flask_cors import CORS\nfrom config import Config\n\napp = Flask(__name__)\nCORS(app)  # Enable CORS for development\n\n# Connect to MongoDB\nclient = MongoClient(Config.MONGO_URI)\ndb = client[Config.DATABASE]\nbooks_collection = db['books']\n\n# Book model\nclass Book:\n    def __init__(self, title, author, publication_date, isbn):\n        self.title = title\n        self.author = author\n        self.publication_date = publication_date\n        self.isbn = isbn\n\n    def to_dict(self):\n        return {\n            'title': self.title,\n            'author': self.author,\n            'publication_date': self.publication_date,\n            'isbn': self.isbn\n        }\n\n# Endpoint to add a new book\n@app.route('/books', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'No data provided'}), 400\n\n    title = data.get('title')\n    author = data.get('author')\n    publication_date = data.get('publication_date')\n    isbn = data.get('isbn')\n\n    if not title or not author or not publication_date or not isbn:\n        return jsonify({'error': 'Missing required fields'}), 400\n\n    existing_book = books_collection.find_one({'isbn': isbn})\n    if existing_book:\n        return jsonify({'error': 'Book with this ISBN already exists'}), 409\n\n    new_book = Book(title, author, publication_date, isbn)\n    books_collection.insert_one(new_book.to_dict())\n    return jsonify(new_book.to_dict()), 201\n\n# Endpoint to update an existing book\n@app.route('/books/<isbn>', methods=['PUT'])\ndef update_book(isbn):\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'No data provided'}), 400\n\n    existing_book = books_collection.find_one({'isbn': isbn})\n    if not existing_book:\n        return jsonify({'error': 'Book not found'}), 404\n\n    updated_data = {}\n    if 'title' in data:\n        updated_data['title'] = data['title']\n    if 'author' in data:\n        updated_data['author'] = data['author']\n    if 'publication_date' in data:\n        updated_data['publication_date'] = data['publication_date']\n\n    books_collection.update_one({'isbn': isbn}, {'$set': updated_data})\n    return jsonify({'message': 'Book updated successfully'}), 200\n\n# Endpoint to search for books by various criteria\n@app.route('/books', methods=['GET'])\ndef search_books():\n    title = request.args.get('title')\n    author = request.args.get('author')\n    publication_date = request.args.get('publication_date')\n    isbn = request.args.get('isbn')\n\n    query = {}\n    if title:\n        query['title'] = {'$regex': title, '$options': 'i'}\n    if author:\n        query['author'] = {'$regex': author, '$options': 'i'}\n    if publication_date:\n        query['publication_date'] = publication_date\n    if isbn:\n        query['isbn'] = isbn\n\n    results = books_collection.find(query)\n    books = [Book(**book).to_dict() for book in results]\n    return jsonify(books), 200\n\n# Endpoint to delete a book by ISBN\n@app.route('/books/<isbn>', methods=['DELETE'])\ndef delete_book(isbn):\n    existing_book = books_collection.find_one({'isbn': isbn})\n    if not existing_book:\n        return jsonify({'error': 'Book not found'}), 404\n\n    books_collection.delete_one({'isbn': isbn})\n    return jsonify({'message': 'Book deleted successfully'}), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation\n\n1. **Environment Setup**: We installed necessary packages and set up the project structure.\n2. **MongoDB Connection**: Connected to MongoDB using `pymongo`.\n3. **Book Model**: Defined a simple `Book` class to handle book data.\n4. **API Endpoints**:\n   - **Add Book**: POST `/books` to add a new book.\n   - **Update Book**: PUT `/books/<isbn>` to update an existing book.\n   - **Search Books**: GET `/books` with query parameters for searching.\n   - **Delete Book**: DELETE `/books/<isbn>` to delete a book by ISBN.\n\nThis setup provides a basic CRUD API for managing books in a MongoDB database using Flask. You can expand upon this by adding more features, validation, and error handling as needed."
    }
]