[
    {
        "role": "user",
        "content": "Write a Python program that uses the Flask framework to create a RESTful API for managing a simple task list. The API should support CRUD operations on tasks, and tasks should have properties like title, description, priority, and due date. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a RESTful API for managing a simple task list using Flask, you'll need to follow these steps:\n\n1. **Set up your environment**: Make sure you have Python installed, and then install Flask and any other necessary packages.\n\n2. **Design the API endpoints**: Define the endpoints for CRUD operations (Create, Read, Update, Delete) on tasks.\n\n3. **Implement the API**: Write the Flask routes to handle HTTP requests and perform the corresponding operations on the task data.\n\n4. **Test the API**: Use tools like Postman or curl to test the API endpoints.\n\nBelow is a step-by-step guide with code snippets to help you create this API.\n\n### Step 1: Set Up Your Environment\n\nFirst, ensure you have Python installed on your system. Then, install Flask using pip:\n\n```bash\npip install Flask\n```\n\nYou might also want to install a package for handling dates, such as `datetime`, which is part of Python's standard library, so no need to install it separately.\n\n### Step 2: Design the API Endpoints\n\nDefine the endpoints for your API:\n\n- **GET /tasks**: Retrieve all tasks.\n- **GET /tasks/<id>**: Retrieve a specific task by ID.\n- **POST /tasks**: Create a new task.\n- **PUT /tasks/<id>**: Update an existing task.\n- **DELETE /tasks/<id>**: Delete a task.\n\n### Step 3: Implement the API\n\nCreate a new Python file, for example, `app.py`, and write the following code:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom datetime import datetime\n\napp = Flask(__name__)\n\n# In-memory list to store tasks\ntasks = []\n\n# Task class\nclass Task:\n    def __init__(self, title, description, priority, due_date):\n        self.title = title\n        self.description = description\n        self.priority = priority\n        self.due_date = due_date\n        self.completed = False\n\n# Generate a unique ID for each task\nid_counter = 1\n\n# GET /tasks\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    global tasks\n    return jsonify({'tasks': [task.__dict__ for task in tasks]})\n\n# GET /tasks/<id>\n@app.route('/tasks/<int:task_id>', methods=['GET'])\ndef get_task(task_id):\n    global tasks\n    task = next((task for task in tasks if task.__dict__['id'] == task_id), None)\n    if task:\n        return jsonify(task.__dict__)\n    else:\n        return jsonify({'message': 'Task not found'}), 404\n\n# POST /tasks\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    global tasks, id_counter\n    data = request.get_json()\n    if not data:\n        return jsonify({'message': 'Invalid data'}), 400\n    title = data.get('title')\n    description = data.get('description')\n    priority = data.get('priority')\n    due_date = data.get('due_date')\n    if not title or not priority or not due_date:\n        return jsonify({'message': 'Missing required fields'}), 400\n    task = Task(title, description, priority, due_date)\n    task.id = id_counter\n    id_counter += 1\n    tasks.append(task)\n    return jsonify(task.__dict__), 201\n\n# PUT /tasks/<id>\n@app.route('/tasks/<int:task_id>', methods=['PUT'])\ndef update_task(task_id):\n    global tasks\n    data = request.get_json()\n    if not data:\n        return jsonify({'message': 'Invalid data'}), 400\n    task = next((task for task in tasks if task.__dict__['id'] == task_id), None)\n    if task:\n        task.title = data.get('title', task.title)\n        task.description = data.get('description', task.description)\n        task.priority = data.get('priority', task.priority)\n        task.due_date = data.get('due_date', task.due_date)\n        task.completed = data.get('completed', task.completed)\n        return jsonify(task.__dict__)\n    else:\n        return jsonify({'message': 'Task not found'}), 404\n\n# DELETE /tasks/<id>\n@app.route('/tasks/<int:task_id>', methods=['DELETE'])\ndef delete_task(task_id):\n    global tasks\n    task = next((task for task in tasks if task.__dict__['id'] == task_id), None)\n    if task:\n        tasks.remove(task)\n        return jsonify({'message': 'Task deleted'})\n    else:\n        return jsonify({'message': 'Task not found'}), 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Step 4: Test the API\n\nYou can test the API using tools like Postman or curl. Here are some examples using curl:\n\n- **Create a task**:\n\n  ```bash\n  curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Buy milk\",\"description\":\"Buy milk from the store\",\"priority\":2,\"due_date\":\"2023-10-30\"}' http://127.0.0.1:5000/tasks\n  ```\n\n- **Get all tasks**:\n\n  ```bash\n  curl http://127.0.0.1:5000/tasks\n  ```\n\n- **Get a specific task**:\n\n  ```bash\n  curl http://127.0.0.1:5000/tasks/1\n  ```\n\n- **Update a task**:\n\n  ```bash\n  curl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Buy milk and eggs\",\"priority\":1,\"due_date\":\"2023-10-28\"}' http://127.0.0.1:5000/tasks/1\n  ```\n\n- **Delete a task**:\n\n  ```bash\n  curl -X DELETE http://127.0.0.1:5000/tasks/1\n  ```\n\nThis simple Flask API allows you to manage a task list with basic CRUD operations. You can expand upon this by adding more features, such as authentication, better error handling, or persisting data to a database.\n"
    }
]