[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to insert, delete, and search for elements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. A doubly linked list is a type of linked list in which each node has pointers to both the next and previous nodes. This allows for efficient traversal in both directions.\n\nI'll create a Python class for a doubly linked list with the following methods:\n\n1. `insert(data)`: Inserts a new node with the given data at the end of the list.\n\n2. `delete(data)`: Deletes the first occurrence of a node with the given data.\n\n3. `search(data)`: Searches for a node with the given data and returns True if found, else False.\n\nFirst, I need to define a Node class that will represent each element in the doubly linked list. Each node will have three attributes:\n\n- `data`: The value stored in the node.\n\n- `next`: A reference to the next node in the list.\n\n- `prev`: A reference to the previous node in the list.\n\nThen, I'll define the DoublyLinkedList class with the following attributes and methods:\n\n- `head`: A reference to the first node in the list.\n\n- `tail`: A reference to the last node in the list.\n\n- `insert(data)`: Adds a new node with the given data to the end of the list.\n\n- `delete(data)`: Removes the first node that matches the given data.\n\n- `search(data)`: Checks if a node with the given data exists in the list.\n\nI'll also include some helper methods for traversing the list if needed.\n\nLet me start by defining the Node class.\n\n## Final Solution\nTo create a doubly linked list in Python, we need to define a class for the nodes and another class to manage the list operations. Here's a step-by-step implementation:\n\n### Approach\n\n1. **Node Class**:\n   - Each node contains data and two pointers: one to the next node and one to the previous node.\n\n2. **Doubly Linked List Class**:\n   - Contains methods to insert, delete, and search for elements.\n   - `insert(data)`: Adds a new node at the end of the list.\n   - `delete(data)`: Removes the first occurrence of a node with the specified data.\n   - `search(data)`: Checks if a node with the specified data exists in the list.\n\n### Solution Code\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def delete(self, data):\n        current = self.head\n        while current:\n            if current.data == data:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def search(self, data):\n        current = self.head\n        while current:\n            if current.data == data:\n                return True\n            current = current.next\n        return False\n```\n\n### Explanation\n\n1. **Node Class**:\n   - Initializes a node with data and sets `next` and `prev` pointers to `None`.\n\n2. **DoublyLinkedList Class**:\n   - **insert(data)**:\n     - Creates a new node with the given data.\n     - If the list is empty, sets both `head` and `tail` to this new node.\n     - Otherwise, attaches the new node to the end of the list by updating the `next` pointer of the current `tail` and the `prev` pointer of the new node, then updates `tail` to the new node.\n   - **delete(data)**:\n     - Traverses the list to find the node with the specified data.\n     - Upon finding the node, adjusts the `next` and `prev` pointers to bypass this node, effectively removing it from the list.\n     - Updates `head` or `tail` if the node to delete is at the beginning or end of the list.\n   - **search(data)**:\n     - Traverses the list and checks if any node contains the specified data.\n     - Returns `True` if found, otherwise `False`."
    }
]