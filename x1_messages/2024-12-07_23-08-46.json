[
    {
        "role": "user",
        "content": "Write a Golang program that implements the QuickSort algorithm for sorting an array of integers."
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Golang program that implements the QuickSort algorithm for sorting an array of integers:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc quickSort(arr []int) []int {\n\tif len(arr) <= 1 {\n\t\treturn arr\n\t}\n\n\tpivot := arr[len(arr)/2]\n\tleft := make([]int, 0)\n\tright := make([]int, 0)\n\n\tfor _, num := range arr {\n\t\tif num < pivot {\n\t\t\tleft = append(left, num)\n\t\t} else if num > pivot {\n\t\t\tright = append(right, num)\n\t\t}\n\t}\n\n\tsortedLeft := quickSort(left)\n\tsortedRight := quickSort(right)\n\n\treturn append(append(sortedLeft, pivot), sortedRight...)\n}\n\nfunc main() {\n\tarr := []int{3,6,8,10,1,2,1}\n\tfmt.Println(\"Original array:\", arr)\n\tsortedArr := quickSort(arr)\n\tfmt.Println(\"Sorted array:\", sortedArr)\n}\n```\n\nIn this program, the `quickSort` function takes an array of integers as input and recursively sorts it using the QuickSort algorithm. The base case is when the array has only one element or is empty, in which case it is already sorted.\n\nThe pivot element is chosen as the middle element of the array. Then, the array is partitioned into two subarrays: one containing elements smaller than the pivot and another containing elements larger than the pivot.\n\nThe `quickSort` function is called recursively on the left and right subarrays, and the sorted subarrays are concatenated with the pivot to produce the final sorted array.\n\nIn the `main` function, an example array `[3,6,8,10,1,2,1]` is sorted using the `quickSort` function, and the original and sorted arrays are printed for verification.\n\nYou can run this program to see the QuickSort algorithm in action."
    }
]