[
    {
        "role": "user",
        "content": "Utilizing Java, write a program that simulates a simple banking system. It should be able to create accounts, deposit money, withdraw money, transfer money between accounts, and check account balance. Ensure proper exception handling is implemented for scenarios like insufficient funds or invalid account details. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple banking system using Java. It needs to handle account creation, deposits, withdrawals, transfers, and balance checks. Also, I have to make sure that there's proper exception handling for things like insufficient funds or invalid account details. Sounds straightforward, but I need to think about how to structure this properly.\n\nFirst, I should probably define what an account is. Each account should have an ID, an owner's name, and a balance. Maybe I'll create a class called Account that has these properties. I'll need to make sure that the account ID is unique for each account.\n\nFor creating accounts, I can have a method that takes the owner's name and maybe an initial deposit, and then assigns a unique ID to the account. I need to keep track of all the accounts, so maybe I'll use a list or a map to store them, with the account ID as the key.\n\n Depositing money should be simple: find the account by ID and add the deposit amount to the balance. Similarly, withdrawing money would involve finding the account and subtracting the withdrawal amount from the balance, but I need to make sure that the balance doesn't go negative. If it does, I should throw an exception for insufficient funds.\n\nTransferring money between accounts would involve withdrawing from one account and depositing into another, so I need to make sure that both accounts exist and that the withdrawing account has sufficient funds.\n\nChecking the balance should just return the current balance of the account.\n\nException handling is important here. I need to handle cases where the account ID doesn't exist, or if there are insufficient funds for a withdrawal or transfer.\n\nI should also think about how to identify accounts. Maybe each account has a unique integer ID that is automatically assigned when the account is created.\n\nLet me start by sketching out the Account class.\n\nClass Account {\n\nprivate int id;\n\nprivate String owner;\n\nprivate double balance;\n\npublic Account(int id, String owner, double initialBalance) {\n\nthis.id = id;\n\nthis.owner = owner;\n\nthis.balance = initialBalance;\n\n}\n\n// Getters and setters\n\n}\n\nThen, I need a way to manage multiple accounts. I can use a Map where the key is the account ID and the value is the Account object.\n\nimport java.util.HashMap;\n\nimport java.util.Map;\n\npublic class BankingSystem {\n\nprivate Map<Integer, Account> accounts = new HashMap<>();\n\nprivate int nextId = 1;\n\npublic void createAccount(String owner, double initialDeposit) {\n\nint id = nextId++;\n\nAccount newAccount = new Account(id, owner, initialDeposit);\n\naccounts.put(id, newAccount);\n\nSystem.out.println(\"Account created with ID: \" + id);\n\n}\n\npublic void deposit(int id, double amount) {\n\nAccount account = accounts.get(id);\n\nif (account == null) {\n\nthrow new IllegalArgumentException(\"Account not found\");\n\n}\n\naccount.deposit(amount);\n\n}\n\npublic void withdraw(int id, double amount) {\n\nAccount account = accounts.get(id);\n\nif (account == null) {\n\nthrow new IllegalArgumentException(\"Account not found\");\n\n}\n\naccount.withdraw(amount);\n\n}\n\npublic void transfer(int fromId, int toId, double amount) {\n\nAccount fromAccount = accounts.get(fromId);\n\nAccount toAccount = accounts.get(toId);\n\nif (fromAccount == null || toAccount == null) {\n\nthrow new IllegalArgumentException(\"One or both accounts not found\");\n\n}\n\nfromAccount.withdraw(amount);\n\ntoAccount.deposit(amount);\n\n}\n\npublic double getBalance(int id) {\n\nAccount account = accounts.get(id);\n\nif (account == null) {\n\nthrow new IllegalArgumentException(\"Account not found\");\n\n}\n\nreturn account.getBalance();\n\n}\n\n}\n\nWait, but in the Account class, I don't have deposit and withdraw methods yet. I need to add those.\n\nClass Account {\n\nprivate int id;\n\nprivate String owner;\n\nprivate double balance;\n\npublic Account(int id, String owner, double initialBalance) {\n\nthis.id = id;\n\nthis.owner = owner;\n\nthis.balance = initialBalance;\n\n}\n\npublic void deposit(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Deposit amount must be positive\");\n\n}\n\nbalance += amount;\n\n}\n\npublic void withdraw(double amount) {\n\nif (amount <= 0) {\n\nthrow new IllegalArgumentException(\"Withdrawal amount must be positive\");\n\n}\n\nif (balance < amount) {\n\nthrow new IllegalArgumentException(\"Insufficient funds\");\n\n}\n\nbalance -= amount;\n\n}\n\npublic double getBalance() {\n\nreturn balance;\n\n}\n\n// Getters for id and owner\n\n}\n\nOkay, that's better. Now, in the BankingSystem class, I can use these methods to handle deposits and withdrawals.\n\nI should also consider that account IDs are unique and automatically assigned. In the BankingSystem class, I have a nextId variable that increments each time a new account is created.\n\nLet me think about how to test this system. I can write a simple main method to demonstrate creating accounts, depositing, withdrawing, transferring, and checking balances.\n\npublic static void main(String[] args) {\n\nBankingSystem bank = new BankingSystem();\n\nbank.createAccount(\"Alice\", 100);\n\nbank.createAccount(\"Bob\", 200);\n\nint aliceId = 1; // Assuming IDs start at 1 and increment\n\nint bobId = 2;\n\nbank.deposit(aliceId, 50);\n\nbank.withdraw(bobId, 30);\n\nbank.transfer(aliceId, bobId, 20);\n\nSystem.out.println(\"Alice's balance: \" + bank.getBalance(aliceId));\n\nSystem.out.println(\"Bob's balance: \" + bank.getBalance(bobId));\n\n}\n\nBut wait, in the createAccount method, I'm assigning IDs starting from 1, but I'm not returning or displaying the ID to the user. Maybe I should return the ID when an account is created so that the user knows what ID to use for further operations.\n\nAlternatively, I can modify the createAccount method to return the ID.\n\npublic int createAccount(String owner, double initialDeposit) {\n\nint id = nextId++;\n\nAccount newAccount = new Account(id, owner, initialDeposit);\n\naccounts.put(id, newAccount);\n\nSystem.out.println(\"Account created with ID: \" + id);\n\nreturn id;\n\n}\n\nThat way, in the main method, I can capture the ID returned by createAccount.\n\nint aliceId = bank.createAccount(\"Alice\", 100);\n\nint bobId = bank.createAccount(\"Bob\", 200);\n\nNow, if I run the main method, it should create accounts for Alice and Bob, perform deposits, withdrawals, and transfers, and then print their balances.\n\nI should also test the exception handling. For example, trying to withdraw more than the balance should throw an exception.\n\ntry {\n\nbank.withdraw(aliceId, 200);\n\n} catch (IllegalArgumentException e) {\n\nSystem.out.println(e.getMessage());\n\n}\n\nSimilarly, trying to access a non-existent account should also throw an exception.\n\ntry {\n\nbank.getBalance(999);\n\n} catch (IllegalArgumentException e) {\n\nSystem.out.println(e.getMessage());\n\n}\n\nThis way, I can ensure that the exception handling is working as expected.\n\nI might also want to add more features, like checking the account owner's name or listing all accounts, but for a simple banking system, this should suffice.\n\nAnother thing to consider is that in a real banking system, balances and amounts would probably be handled using BigDecimal to avoid precision issues with floating-point numbers. However, for this simple simulation, using double should be okay.\n\nAlso, in a real-world scenario, I'd need to think about threading and synchronization if multiple users are accessing the banking system concurrently. But since this is a simple simulation, I'll overlook that for now.\n\nLet me summarize the steps I've taken:\n\n1. Defined an Account class with id, owner, and balance.\n\n2. Created a BankingSystem class to manage multiple accounts using a Map.\n\n3. Implemented methods to create accounts, deposit, withdraw, transfer, and check balances.\n\n4. Added exception handling for invalid account IDs and insufficient funds.\n\n5. Wrote a main method to demonstrate the functionality.\n\nI think this covers the requirements. If I were to expand this, I might consider adding more features like interest calculation, different types of accounts (savings, checking), or user authentication. But for now, this should be enough.\n\n**Final Solution**\n\nTo create a simple banking system in Java, we need to simulate account creation, deposits, withdrawals, transfers, and balance checks with proper exception handling.\n\n### Approach\n\n1. **Account Class**: Represents a bank account with properties like ID, owner's name, and balance.\n2. **BankingSystem Class**: Manages multiple accounts using a `Map` where the key is the account ID and the value is the Account object.\n3. **Operations**:\n   - **Create Account**: Assigns a unique ID to each new account.\n   - **Deposit**: Adds funds to the account.\n   - **Withdraw**: Subtracts funds from the account with checks for sufficient balance.\n   - **Transfer**: Transfers funds from one account to another.\n   - **Check Balance**: Returns the current balance of the account.\n4. **Exception Handling**: Handles cases like invalid account IDs and insufficient funds.\n\n### Solution Code\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Account {\n    private int id;\n    private String owner;\n    private double balance;\n\n    public Account(int id, String owner, double initialBalance) {\n        this.id = id;\n        this.owner = owner;\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Deposit amount must be positive\");\n        }\n        balance += amount;\n    }\n\n    public void withdraw(double amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Withdrawal amount must be positive\");\n        }\n        if (balance < amount) {\n            throw new IllegalArgumentException(\"Insufficient funds\");\n        }\n        balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n}\n\npublic class BankingSystem {\n    private Map<Integer, Account> accounts = new HashMap<>();\n    private int nextId = 1;\n\n    public int createAccount(String owner, double initialDeposit) {\n        int id = nextId++;\n        Account newAccount = new Account(id, owner, initialDeposit);\n        accounts.put(id, newAccount);\n        System.out.println(\"Account created with ID: \" + id);\n        return id;\n    }\n\n    public void deposit(int id, double amount) {\n        Account account = accounts.get(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found\");\n        }\n        account.deposit(amount);\n    }\n\n    public void withdraw(int id, double amount) {\n        Account account = accounts.get(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found\");\n        }\n        account.withdraw(amount);\n    }\n\n    public void transfer(int fromId, int toId, double amount) {\n        Account fromAccount = accounts.get(fromId);\n        Account toAccount = accounts.get(toId);\n        if (fromAccount == null || toAccount == null) {\n            throw new IllegalArgumentException(\"One or both accounts not found\");\n        }\n        fromAccount.withdraw(amount);\n        toAccount.deposit(amount);\n    }\n\n    public double getBalance(int id) {\n        Account account = accounts.get(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found\");\n        }\n        return account.getBalance();\n    }\n\n    public static void main(String[] args) {\n        BankingSystem bank = new BankingSystem();\n\n        int aliceId = bank.createAccount(\"Alice\", 100);\n        int bobId = bank.createAccount(\"Bob\", 200);\n\n        bank.deposit(aliceId, 50);\n        bank.withdraw(bobId, 30);\n        bank.transfer(aliceId, bobId, 20);\n\n        System.out.println(\"Alice's balance: \" + bank.getBalance(aliceId));\n        System.out.println(\"Bob's balance: \" + bank.getBalance(bobId));\n\n        // Testing exception handling\n        try {\n            bank.withdraw(aliceId, 200);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n\n        try {\n            bank.getBalance(999);\n        } catch (IllegalArgumentException e) {\n            System.out.println(e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Account Class**: Manages individual account operations like deposit, withdraw, and balance check.\n2. **BankingSystem Class**: Manages multiple accounts and provides methods to create accounts, deposit, withdraw, transfer funds, and check balances.\n3. **Main Method**: Demonstrates creating accounts, performing transactions, and testing exception handling.\n\nThis simple banking system ensures that all operations are handled correctly with appropriate validation and exception handling."
    }
]