[
    {
        "role": "user",
        "content": "Create a Python script that implements a doubly linked list with methods for insertion, deletion, searching, and traversing the list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a doubly linked list in Python involves defining a Node class to represent each element in the list and a DoublyLinkedList class to manage the operations on these nodes.\n\nHere's a step-by-step guide to implementing a doubly linked list with insertion, deletion, searching, and traversing methods:\n\n1. **Node Class**: This class will represent each element in the doubly linked list. Each node will have data, a reference to the next node, and a reference to the previous node.\n\n2. **DoublyLinkedList Class**: This class will manage the operations on the doubly linked list, including insertion, deletion, searching, and traversing.\n\n### Final Solution\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def insert_after_node(self, key, data):\n        current = self.head\n        while current:\n            if current.data == key:\n                new_node = Node(data)\n                new_node.prev = current\n                new_node.next = current.next\n                if current.next:\n                    current.next.prev = new_node\n                else:\n                    self.tail = new_node\n                current.next = new_node\n                return\n            current = current.next\n        print(f\"Node with data {key} not found.\")\n\n    def delete_node(self, key):\n        current = self.head\n        while current:\n            if current.data == key:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n        print(f\"Node with data {key} not found.\")\n\n    def search(self, key):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == key:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def traverse_forward(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" \")\n            current = current.next\n        print()\n\n    def traverse_backward(self):\n        current = self.tail\n        while current:\n            print(current.data, end=\" \")\n            current = current.prev\n        print()\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.insert_at_end(1)\n    dll.insert_at_end(2)\n    dll.insert_at_end(3)\n    dll.insert_at_beginning(0)\n    dll.insert_after_node(2, 4)\n    dll.traverse_forward()  # Output: 0 1 2 4 3\n    dll.traverse_backward() # Output: 3 4 2 1 0\n    print(dll.search(4))    # Output: 3\n    dll.delete_node(4)\n    dll.traverse_forward()  # Output: 0 1 2 3\n```\n\n### Explanation\n\n- **Node Class**: Initializes a node with data and optional references to next and previous nodes.\n\n- **DoublyLinkedList Class**:\n  - **insert_at_beginning**: Inserts a new node at the start of the list.\n  - **insert_at_end**: Inserts a new node at the end of the list.\n  - **insert_after_node**: Inserts a new node after the first occurrence of a specified key.\n  - **delete_node**: Deletes the first occurrence of a node with the specified key.\n  - **search**: Searches for a node with the specified key and returns its index or -1 if not found.\n  - **traverse_forward**: Prints the list from head to tail.\n  - **traverse_backward**: Prints the list from tail to head.\n\nThis implementation ensures that all operations maintain the integrity of the doubly linked list's references."
    }
]