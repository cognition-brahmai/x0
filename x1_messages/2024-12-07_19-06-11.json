[
    {
        "role": "user",
        "content": "Create a Java implementation of a singly linked list with methods for adding elements at the beginning, end, and at a specific index, as well as removing elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Java implementation of a singly linked list with the specified methods:\n\n```java\npublic class SinglyLinkedList {\n    private Node head;\n    private int size;\n\n    private class Node {\n        int data;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.next = null;\n        }\n    }\n\n    // Constructor\n    public SinglyLinkedList() {\n        this.head = null;\n        this.size = 0;\n    }\n\n    // Method to add element at the beginning\n    public void addFirst(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n        size++;\n    }\n\n    // Method to add element at the end\n    public void addLast(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n        } else {\n            Node current = head;\n            while (current.next != null) {\n                current = current.next;\n            }\n            current.next = newNode;\n        }\n        size++;\n    }\n\n    // Method to add element at a specific index\n    public void addAtIndex(int index, int data) {\n        if (index < 0 || index > size) {\n            throw new IllegalArgumentException(\"Index out of range\");\n        }\n        if (index == 0) {\n            addFirst(data);\n        } else if (index == size) {\n            addLast(data);\n        } else {\n            Node newNode = new Node(data);\n            Node current = head;\n            for (int i = 0; i < index - 1; i++) {\n                current = current.next;\n            }\n            newNode.next = current.next;\n            current.next = newNode;\n            size++;\n        }\n    }\n\n    // Method to remove element by value\n    public void removeValue(int value) {\n        if (head == null) {\n            return;\n        }\n        if (head.data == value) {\n            head = head.next;\n            size--;\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            if (current.next.data == value) {\n                current.next = current.next.next;\n                size--;\n                return;\n            }\n            current = current.next;\n        }\n    }\n\n    // Method to remove element by index\n    public void removeAtIndex(int index) {\n        if (index < 0 || index >= size) {\n            throw new IllegalArgumentException(\"Index out of range\");\n        }\n        if (index == 0) {\n            head = head.next;\n        } else {\n            Node current = head;\n            for (int i = 0; i < index - 1; i++) {\n                current = current.next;\n            }\n            current.next = current.next.next;\n        }\n        size--;\n    }\n\n    // Method to get the size of the list\n    public int size() {\n        return size;\n    }\n\n    // Method to display the list\n    public void display() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n        list.addFirst(10);\n        list.addLast(20);\n        list.addLast(30);\n        list.addFirst(5);\n        list.addAtIndex(3, 15);\n        list.display(); // Output: 5 -> 10 -> 15 -> 20 -> 30 -> null\n        list.removeValue(15);\n        list.display(); // Output: 5 -> 10 -> 20 -> 30 -> null\n        list.removeAtIndex(2);\n        list.display(); // Output: 5 -> 10 -> 30 -> null\n    }\n}\n```\n\n### Explanation:\n\n1. **Node Class**: Inner class representing each node in the linked list, containing data and a reference to the next node.\n2. **addFirst(int data)**: Adds a new node with the given data at the beginning of the list.\n3. **addLast(int data)**: Adds a new node with the given data at the end of the list.\n4. **addAtIndex(int index, int data)**: Adds a new node with the given data at the specified index.\n5. **removeValue(int value)**: Removes the first occurrence of the node with the specified value.\n6. **removeAtIndex(int index)**: Removes the node at the specified index.\n7. **size()**: Returns the current size of the list.\n8. **display()**: Prints the elements of the list.\n\nThis implementation ensures that all specified operations are performed correctly, and the list is maintained appropriately."
    }
]