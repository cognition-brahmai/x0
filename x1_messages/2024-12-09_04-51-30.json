[
    {
        "role": "user",
        "content": "Write a Python program to implement a stack data structure using lists. The stack should support push, pop, and peek operations, as well as checking if the stack is empty.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. So, you want a Python program that implements a stack data structure using lists, and this stack should support push, pop, peek operations, and also a way to check if the stack is empty. Right?\n\nOkay, let's start by understanding what a stack is. A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed.\n\nIn Python, we can use a list to implement a stack because lists have append and pop methods that allow us to add and remove elements from the end of the list efficiently, which is exactly what we need for a stack.\n\nSo, here's how we can implement this:\n\n1. **Push Operation**: This operation adds an element to the top of the stack. In terms of a list, this would be appending an element to the end of the list.\n\n2. **Pop Operation**: This operation removes the top element from the stack. For a list, this means removing the last element using the pop method.\n\n3. **Peek Operation**: This operation allows us to look at the top element of the stack without removing it. With a list, we can access the last element using indexing.\n\n4. **Check if Empty**: This operation checks whether the stack is empty or not. For a list, we can check its length or simply use the truth value of the list.\n\nLet me write a simple class to encapsulate these operations.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n\nLet me explain what each part does:\n\n- **__init__**: This is the constructor that initializes an empty list when a new Stack object is created.\n\n- **push**: This method adds an item to the end of the list, which is the top of the stack.\n\n- **pop**: This method removes the last item from the list, which is the top of the stack. It also checks if the stack is empty before popping to avoid errors.\n\n- **peek**: This method returns the last item in the list without removing it, allowing us to see what's on top of the stack without altering it. It also checks if the stack is empty.\n\n- **is_empty**: This method returns True if the stack has no items, otherwise False.\n\n- **size**: This method returns the number of items in the stack.\n\nYou can use this Stack class in your programs by creating an instance of it and calling its methods.\n\nFor example:\n\n```python\nstack = Stack()\nstack.push(1)\nstack.push(2)\nprint(stack.peek())  # Output: 2\nprint(stack.pop())   # Output: 2\nprint(stack.is_empty())  # Output: False\nprint(stack.pop())   # Output: 1\nprint(stack.is_empty())  # Output: True\n```\n\nThis should give you a basic stack implementation in Python using lists. If you have any specific requirements or need further enhancements, feel free to ask!\n\n## Final Solution\nTo implement a stack data structure in Python using lists, we can create a `Stack` class with methods to handle push, pop, peek operations, and check if the stack is empty. Here's how you can do it:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n\n### Explanation\n\n1. **Initialization (`__init__`)**: \n   - Initializes an empty list `items` which will be used to store the stack elements.\n\n2. **Push Operation (`push`)**:\n   - Adds an item to the top of the stack by appending it to the end of the list.\n\n3. **Pop Operation (`pop`)**:\n   - Removes and returns the top item from the stack.\n   - Checks if the stack is empty to avoid errors, raising an `IndexError` if empty.\n\n4. **Peek Operation (`peek`)**:\n   - Returns the top item without removing it.\n   - Checks if the stack is empty to avoid errors, raising an `IndexError` if empty.\n\n5. **Empty Check (`is_empty`)**:\n   - Returns `True` if the stack is empty, otherwise `False`.\n\n6. **Size (`size`)**:\n   - Returns the number of items in the stack.\n\n### Example Usage\n\n```python\nstack = Stack()\nstack.push(1)\nstack.push(2)\nprint(stack.peek())  # Output: 2\nprint(stack.pop())   # Output: 2\nprint(stack.is_empty())  # Output: False\nprint(stack.pop())   # Output: 1\nprint(stack.is_empty())  # Output: True\n```\n\nThis implementation provides a straightforward way to manage a stack in Python, ensuring that all fundamental stack operations are efficiently handled."
    }
]