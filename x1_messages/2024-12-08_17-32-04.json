[
    {
        "role": "user",
        "content": "Write a Python script that monitors a directory for new files and sends an email notification whenever a new file is added. The script should take the directory path and email address as command-line arguments."
    },
    {
        "role": "assistant",
        "content": "To create a Python script that monitors a directory for new files and sends an email notification whenever a new file is added, you can use the `watchdog` library for monitoring file system events and the `smtplib` library for sending emails.\n\nFirst, make sure to install the required libraries:\n\n```bash\npip install watchdog\n```\n\nHere's a sample script that accomplishes this task:\n\n```python\nimport sys\nimport time\nimport smtplib\nfrom email.message import EmailMessage\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass DirectoryMonitor(FileSystemEventHandler):\n    def __init__(self, email_address):\n        self.email_address = email_address\n\n    def on_created(self, event):\n        if not event.is_directory:\n            self.send_email(event.src_path)\n\n    def send_email(self, file_path):\n        msg = EmailMessage()\n        msg.set_content(f\"A new file has been added: {file_path}\")\n\n        msg['Subject'] = 'New File Notification'\n        msg['From'] = 'your_email@example.com'\n        msg['To'] = self.email_address\n\n        with smtplib.SMTP('smtp.example.com', 587) as smtp:\n            smtp.starttls()\n            smtp.login('your_email@example.com', 'your_password')\n            smtp.send_message(msg)\n\ndef main():\n    if len(sys.argv) != 3:\n        print(\"Usage: python script.py <directory_path> <email_address>\")\n        sys.exit(1)\n\n    path = sys.argv[1]\n    email = sys.argv[2]\n\n    event_handler = DirectoryMonitor(email)\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=False)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **DirectoryMonitor Class**:\n    - Inherits from `FileSystemEventHandler`.\n    - Initializes with an email address.\n    - Overrides the `on_created` method to handle new file creation events.\n    - Sends an email notification using `smtplib` when a new file is created.\n\n2. **Main Function**:\n    - Checks if the correct number of command-line arguments are provided.\n    - Sets up the `DirectoryMonitor` event handler with the provided email address.\n    - Starts the `Observer` to monitor the specified directory for new files.\n    - Runs indefinitely until interrupted (e.g., via KeyboardInterrupt).\n\n### Usage:\n\nSave the script to a file, for example, `monitor.py`, and run it from the command line:\n\n```bash\npython monitor.py /path/to/directory user@example.com\n```\n\nReplace `/path/to/directory` with the directory you want to monitor and `user@example.com` with the email address where notifications should be sent.\n\n### Notes:\n\n- Ensure that you have the necessary permissions to read the directory and send emails.\n- Update the SMTP server settings (`smtp.example.com`, port, username, password) with your actual email provider's settings.\n- Be cautious with hardcoding email credentials; consider using environment variables or secure methods for storing sensitive information."
    }
]