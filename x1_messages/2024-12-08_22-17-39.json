[
    {
        "role": "user",
        "content": "Create a Python script that implements a linked list data structure with methods for adding elements at the beginning, end, and specific index, as well as removing elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a linked list in Python is a great way to understand how data structures work under the hood. I'll guide you through the process step by step.\n\nFirst, we need to understand what a linked list is. A linked list is a linear data structure where each element is a separate object, known as a node. Each node contains two things: the data and a reference (or link) to the next node in the sequence.\n\nHere's a basic outline of what we'll cover:\n\n1. **Node Class**: This will represent each element in the linked list.\n2. **LinkedList Class**: This will manage the nodes and provide methods to add and remove elements.\n\n### Step 1: Define the Node Class\n\nEach node will hold the data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the LinkedList Class\n\nThis class will manage the nodes. We'll implement the following methods:\n\n- `__init__`: Initializes the linked list with a head node set to None.\n- `insert_beginning`: Adds a new node at the beginning of the list.\n- `insert_end`: Adds a new node at the end of the list.\n- `insert_at_index`: Adds a new node at a specified index.\n- `remove_by_value`: Removes the first node that matches the given value.\n- `remove_by_index`: Removes the node at the specified index.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def insert_at_index(self, index, data):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if index == 0:\n            self.insert_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, data):\n        current = self.head\n        previous = None\n        while current and current.data != data:\n            previous = current\n            current = current.next\n        if not current:\n            raise ValueError(\"Data not found in list\")\n        if previous is None:\n            self.head = current.next\n        else:\n            previous.next = current.next\n\n    def remove_by_index(self, index):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if self.head is None:\n            raise IndexError(\"List is empty\")\n        if index == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current or not current.next:\n            raise IndexError(\"Index out of range\")\n        current.next = current.next.next\n```\n\n### Step 3: Testing the LinkedList\n\nTo ensure everything works correctly, let's write some test cases.\n\n```python\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.insert_beginning(3)\n    ll.insert_beginning(2)\n    ll.insert_end(4)\n    ll.insert_at_index(2, 5)\n    print(\"After insertions:\", end=\" \")\n    current = ll.head\n    while current:\n        print(current.data, end=\" \")\n        current = current.next\n    print()\n\n    ll.remove_by_value(2)\n    print(\"After removing 2:\", end=\" \")\n    current = ll.head\n    while current:\n        print(current.data, end=\" \")\n        current = current.next\n    print()\n\n    ll.remove_by_index(1)\n    print(\"After removing index 1:\", end=\" \")\n    current = ll.head\n    while current:\n        print(current.data, end=\" \")\n        current = current.next\n    print()\n```\n\n### Explanation\n\n1. **Node Class**: Simple class to hold data and a reference to the next node.\n2. **LinkedList Class**:\n   - `insert_beginning`: Adds a new node at the start.\n   - `insert_end`: Traverses to the end and adds a new node.\n   - `insert_at_index`: Inserts a new node at a specified index.\n   - `remove_by_value`: Removes the first node that matches the value.\n   - `remove_by_index`: Removes the node at the specified index.\n\nThis should give you a solid foundation for working with linked lists in Python. Let me know if you have any questions or need further clarification on any part!"
    }
]