[
    {
        "role": "user",
        "content": "Write a bash script that monitors system usage. The script should display CPU usage, memory usage, disk space usage, and network traffic every five seconds. If any of these values exceed a certain threshold, the script should send an email alert to a specified address. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I've got this task to create a bash script that keeps an eye on the system's health\u2014specifically, CPU usage, memory usage, disk space, and network traffic. It needs to check these every five seconds and send an email if anything goes beyond a set limit. Sounds pretty straightforward, but there are a few things to consider here.\n\nFirst, I need to figure out how to get these usage statistics in bash. For CPU usage, I can use 'top' or 'mpstat', but 'top' might not be the best for scripting because of its interactive nature. 'mpstat' is part of the 'sysstat' package, which might not be installed by default on all systems. Maybe 'vmstat' is a better choice since it's more likely to be available.\n\nFor memory usage, 'free' is a common command that can provide both total and used memory statistics. For disk space, 'df' is the standard tool, and for network traffic, 'ifconfig' or 'ip' commands can be used, but they show cumulative statistics. To get the traffic rate, I might need to take two samples a few seconds apart and calculate the difference.\n\nNext, I need to set thresholds for each of these metrics. The thresholds should be configurable, maybe passed as arguments to the script or set as variables at the top of the script. For example, if CPU usage goes above 80%, or memory usage exceeds 90%, or disk usage is over 95%, or if network traffic (let's say incoming or outgoing) surpasses a certain rate, an alert should be triggered.\n\nSpeaking of alerts, sending an email in bash can be done using the 'mail' command or 'mutt'. 'mail' is simpler, but 'mutt' offers more flexibility, especially if you need to handle attachments or more complex email formats. I'll probably go with 'mail' for simplicity.\n\nNow, about the script structure. It should run in an infinite loop, checking the metrics every five seconds. After each check, it compares the current usage to the thresholds and sends an email if any usage exceeds the limit.\n\nI also need to think about making the script user-friendly. Maybe allow the user to specify which interfaces to monitor for network traffic, or which disks to check. Optionally, logging the metrics to a file could be useful for debugging or historical analysis.\n\nLet me outline the steps:\n\n1. Define thresholds for CPU, memory, disk, and network usage.\n\n2. Set up an infinite loop with a 5-second sleep between iterations.\n\n3. Inside the loop:\n\na. Get CPU usage.\n\nb. Get memory usage.\n\nc. Get disk usage.\n\nd. Get network traffic rates.\n\ne. Compare each usage to its threshold.\n\nf. If any usage exceeds its threshold, send an email alert.\n\n4. Optionally, log the metrics to a file.\n\nFor CPU usage, I can use 'vmstat' and parse its output. 'vmstat 1 2' will give two samples, one second apart. I can calculate the average CPU usage from that.\n\nFor memory, 'free -m' will give memory usage in MB, which is easy to read.\n\nFor disk, 'df -h' or 'df -m' can be used to get usage in human-readable format or in MB.\n\nFor network traffic, I can use 'cat /proc/net/dev' to get interface statistics. By taking two samples a few seconds apart, I can calculate the traffic rate.\n\nWait, but the script needs to run every five seconds, and network traffic needs to be measured over that interval. So, I need to store the previous state and subtract it from the current state to get the difference.\n\nI should also consider that different systems might have different network interface names, like 'eth0', 'enp0s3', etc. So, the script should allow specifying which interfaces to monitor.\n\nMaybe I can pass interface names as arguments to the script, or prompt the user to input them.\n\nSimilarly, for disks, maybe only certain mount points need to be monitored.\n\nThis is getting a bit complicated. Maybe I should make the script configurable through a configuration file, where the user can specify thresholds and the resources to monitor.\n\nBut for simplicity, I'll hardcode some defaults and allow overriding them through command-line arguments.\n\nLet me sketch a rough structure of the script:\n\n#!/bin/bash\n\n# Default thresholds\n\nCPU_THRESHOLD=80\n\nMEMORY_THRESHOLD=90\n\nDISK_THRESHOLD=95\n\nNETWORK_THRESHOLD=100 # in MB/s, for example\n\n# Email address for alerts\n\nEMAIL=\"admin@example.com\"\n\n# Interfaces to monitor for network traffic\n\nINTERFACES=(\"eth0\" \"wlan0\")\n\n# Function to get CPU usage\n\nget_cpu_usage() {\n\n# Implement logic to get CPU usage\n\n}\n\n# Function to get memory usage\n\nget_memory_usage() {\n\n# Implement logic to get memory usage\n\n}\n\n# Function to get disk usage\n\nget_disk_usage() {\n\n# Implement logic to get disk usage\n\n}\n\n# Function to get network traffic rate\n\nget_network_traffic() {\n\n# Implement logic to get network traffic rate\n\n}\n\n# Function to send email alert\n\nsend_alert() {\n\nsubject=$1\n\nmessage=$2\n\necho \"$message\" | mail -s \"$subject\" \"$EMAIL\"\n\n}\n\n# Main loop\n\nwhile true; do\n\ncpu_usage=$(get_cpu_usage)\n\nmemory_usage=$(get_memory_usage)\n\ndisk_usage=$(get_disk_usage)\n\nnetwork_traffic=$(get_network_traffic)\n\nif [ \"$cpu_usage\" -gt \"$CPU_THRESHOLD\" ]; then\n\nsend_alert \"High CPU Usage Alert\" \"CPU usage is at $cpu_usage%.\"\n\nfi\n\nif [ \"$memory_usage\" -gt \"$MEMORY_THRESHOLD\" ]; then\n\nsend_alert \"High Memory Usage Alert\" \"Memory usage is at $memory_usage%.\"\n\nfi\n\nif [ \"$disk_usage\" -gt \"$DISK_THRESHOLD\" ]; then\n\nsend_alert \"High Disk Usage Alert\" \"Disk usage is at $disk_usage%.\"\n\nfi\n\nif [ \"$network_traffic\" -gt \"$NETWORK_THRESHOLD\" ]; then\n\nsend_alert \"High Network Traffic Alert\" \"Network traffic is at $network_traffic MB/s.\"\n\nfi\n\nsleep 5\n\ndone\n\nThis is a basic structure. Now, I need to implement each of these functions.\n\nStarting with 'get_cpu_usage', I'll use 'vmstat'. 'vmstat 1 2' will give two samples, one second apart. The output will look like this:\n\nprocs -----------memory---------- ---swap-- -----io---- -system-- ----cpu----\n\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st\n\n 1  0      0 123456 789012 345678    0    0     0     0 12345 6789 10  5 85  0  0\n\n 2  0      0 123456 789012 345678    0    0     0     0 12345 6789 15 10 75  0  0\n\nI need to calculate the average CPU usage from these two samples. The last line's 'us' (user), 'sy' (system), 'id' (idle), and 'wa' (wait) columns can be used to calculate the total usage.\n\nTotal usage = us + sy + wa\n\nI can extract these values and calculate the average between the two samples.\n\nWait, but 'vmstat 1 2' gives three lines: headers and two samples. I need to skip the first sample and use the second one.\n\nAlternatively, maybe using 'top' with batch mode would be easier. 'top -bn2 | grep \"Cpu(s)\"' can give CPU usage for each of the two samples.\n\nBut 'top' output can vary depending on the system.\n\nMaybe 'mpstat' is more consistent, but it's not always available.\n\nI think 'vmstat' is a safe choice.\n\nSo, in 'get_cpu_usage', I'll run 'vmstat 1 2', capture the last line, parse the 'us', 'sy', and 'wa' columns, and sum them up to get the total usage.\n\nSimilarly, for memory usage, 'free -m' gives:\n\n              total        used        free      shared  buff/cache   available\n\nMem:           7890        1234        2345         567        4321        5432\n\nSwap:          2048           0        2048\n\nI can extract the 'used' and 'total' columns and calculate the percentage usage.\n\nFor disk usage, 'df -h' or 'df -m' can be used. I need to monitor a specific mount point, like '/'. The output might look like:\n\nFilesystem      Size  Used Avail Use% Mounted on\n\nudev            3.9G     0  3.9G   0% /dev\n\ntmpfs           785M  1.3M  784M   1% /run\n\n/dev/sda1        20G   15G  4.5G  78% /\n\n...\n\nI need to pick the relevant line (e.g., '/dev/sda1') and extract the 'Use%' column.\n\nFor network traffic, I'll use '/proc/net/dev'. Its content looks like:\n\nInter-| Receive                                                |  Transmit\n\n face |bytes    packets errs drop fifo frame compressed multicast|bytes    packets errs drop fifo colls carrier compressed\n\n    lo:  78901234567 1234567890 0    0    0     0          0         0  78901234567 1234567890 0    0    0     0       0          0\n\n  eth0: 123456789012 1234567890 0    0    0     0          0         0 123456789012 1234567890 0    0    0     0       0          0\n\nI need to monitor specific interfaces, like 'eth0', and calculate the difference in bytes received and transmitted between two samples, divided by the time interval, to get the traffic rate in MB/s.\n\nWait, but the script runs every five seconds, so the time interval is five seconds.\n\nI need to store the previous state of network statistics and subtract them from the current state to get the delta.\n\nThis requires maintaining state between iterations, which complicates things.\n\nMaybe I can use a separate script or a function to handle network monitoring, storing the previous values in temporary files.\n\nAlternatively, I can use 'sar' from the 'sysstat' package, which can report network traffic over a specific interval.\n\nBut 'sysstat' might not be installed by default.\n\nAnother option is to use 'ifconfig' or 'ip -s link', which also show interface statistics.\n\n'ip -s link show eth0' gives:\n\n2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc pfifo_fast state UP mode DEFAULT group default qlen 1000\n\n    link/ether xx:xx:xx:xx:xx:xx brd ff:ff:ff:ff:ff:ff\n\n    RX: bytes  packets  errors  dropped overrun mcast\n\n    123456789012 1234567890 0    0    0       0\n\n    TX: bytes  packets  errors  dropped carrier collsns\n\n    123456789012 1234567890 0    0    0       0\n\nSimilar to '/proc/net/dev', but per interface.\n\nI can parse this output to get bytes received and transmitted, and calculate the rate between samples.\n\nTo handle this, I need to store the previous values somewhere. Maybe use a temporary file for each interface.\n\nSo, before the main loop, I can read the initial values and store them in files. Then, in each iteration, read the current values, calculate the difference from the previous values, divide by the time interval (5 seconds), and update the previous values.\n\nThis introduces some complexity, but it's manageable.\n\nAlternatively, I can use tools like 'bmon' or 'nload', but they might not be installed by default and could require additional setup.\n\nI think sticking with 'ip' or '/proc/net/dev' is the way to go for broader compatibility.\n\nLet me think about error handling as well. What if an interface doesn't exist? Or if the disk mount point isn't found? The script should handle such cases gracefully, perhaps by skipping the problematic resource or notifying the user.\n\nAlso, I need to make sure that the script has the necessary permissions to read system statistics and send emails.\n\nAssuming it's run as root or with sufficient privileges, that should be okay.\n\nAnother consideration is performance. Since the script runs every five seconds, it should be efficient and not introduce significant overhead itself.\n\nUsing built-in commands and minimal processing should keep the impact low.\n\nI should also think about the format of the email alerts. They should contain enough information to diagnose the issue, such as the current usage values and timestamps.\n\nMaybe include the date and time in the alert message.\n\nAdditionally, it might be useful to log all the metrics to a file, not just when they exceed the threshold. This way, the user can review historical data if needed.\n\nI can add an optional logging feature, where the script writes the metrics to a log file at each iteration.\n\nThe log file can include columns for timestamp, CPU usage, memory usage, disk usage, and network traffic.\n\nThis would require appending a line to the log file in each loop iteration.\n\nTo summarize, here's an enhanced plan:\n\n1. Define thresholds for CPU, memory, disk, and network usage.\n\n2. Specify the email address for alerts.\n\n3. Specify the network interfaces to monitor.\n\n4. For network monitoring, store initial interface statistics in temporary files.\n\n5. In an infinite loop:\n\na. Get current system statistics:\n\ni. CPU usage using 'vmstat'\n\nii. Memory usage using 'free'\n\niii. Disk usage using 'df'\n\niv. Network traffic rates by comparing current and previous interface statistics\n\nb. Compare each usage to its threshold.\n\nc. If any usage exceeds its threshold, send an email alert with current values and timestamp.\n\nd. Optionally, log the metrics to a file.\n\ne. Sleep for five seconds.\n\n6. Update the previous network statistics for the next iteration.\n\nI need to implement this logic carefully, ensuring that the script handles errors and edge cases gracefully.\n\nAlso, I should test the script on different systems to make sure it works as expected.\n\nThis seems like a solid plan. Now, I'll proceed to implement the script based on this plan.\n\n## Final Solution\nTo create a bash script that monitors system usage and sends email alerts when thresholds are exceeded, follow the\u6b65\u9aa4 below. This script will check CPU usage, memory usage, disk space usage, and network traffic every five seconds. If any of these values exceed specified thresholds, it will send an email alert to a specified address.\n\n### Solution Code\n\n```bash\n#!/bin/bash\n\n# Configuration variables\nCPU_THRESHOLD=80\nMEMORY_THRESHOLD=90\nDISK_THRESHOLD=95\nNETWORK_THRESHOLD=100  # in MB/s\nEMAIL=\"admin@example.com\"\nINTERFACES=(\"eth0\" \"wlan0\")\nLOG_FILE=\"/var/log/system_monitor.log\"\n\n# Temporary files to store previous network stats\nTMP_DIR=\"/tmp\"\nfor IFACE in \"${INTERFACES[@]}\"; do\n    touch \"$TMP_DIR/${IFACE}_prev.txt\"\ndone\n\n# Function to get CPU usage\nget_cpu_usage() {\n    # Using vmstat to get average CPU usage over 1 second\n    vmstat 1 2 | tail -1 | awk '{usage=100 - $15; printf \"%.1f\", usage}'\n}\n\n# Function to get memory usage percentage\nget_memory_usage() {\n    free -m | awk '/Mem:/ {used=$3; total=$2; printf \"%.1f\", (used*100)/total}'\n}\n\n# Function to get disk usage percentage\nget_disk_usage() {\n    df / | tail -1 | awk '{printf \"%d\", $5}'\n}\n\n# Function to get network traffic rate in MB/s\nget_network_traffic() {\n    local IFACE=$1\n    local CURR_FILE=\"$TMP_DIR/${IFACE}_curr.txt\"\n    local PREV_FILE=\"$TMP_DIR/${IFACE}_prev.txt\"\n\n    # Read current stats\n    ip -s link show $IFACE | grep \"bytes\" | awk '{print $2 \"+\" $10}' > $CURR_FILE\n\n    # Read previous stats\n    if [ -f $PREV_FILE ]; then\n        local PREV_STATS=$(cat $PREV_FILE)\n        local CURR_STATS=$(cat $CURR_FILE)\n        local DIFF_RX=$(( $(echo $CURR_STATS | cut -d '+' -f1) - $(echo $PREV_STATS | cut -d '+' -f1) ))\n        local DIFF_TX=$(( $(echo $CURR_STATS | cut -d '+' -f2) - $(echo $PREV_STATS | cut -d '+' -f2) ))\n        local DIFF_TOTAL=$(( DIFF_RX + DIFF_TX ))\n        local TRAFFIC_RATE=$(echo \"scale=2; $DIFF_TOTAL / 5 / 1024 / 1024\" | bc)\n        echo $TRAFFIC_RATE\n    fi\n\n    # Update previous stats\n    cp $CURR_FILE $PREV_FILE\n}\n\n# Function to send email alert\nsend_alert() {\n    local SUBJECT=$1\n    local MESSAGE=$2\n    echo \"$MESSAGE\" | mail -s \"$SUBJECT\" $EMAIL\n}\n\n# Main monitoring loop\nwhile true; do\n    local TIMESTAMP=$(date +\"%Y-%m-%d %T\")\n    local CPU_USAGE=$(get_cpu_usage)\n    local MEMORY_USAGE=$(get_memory_usage)\n    local DISK_USAGE=$(get_disk_usage)\n    local NETWORK_TRAFFIC=0\n\n    for IFACE in \"${INTERFACES[@]}\"; do\n        local TRAFFIC=$(get_network_traffic $IFACE)\n        NETWORK_TRAFFIC=$(echo \"$NETWORK_TRAFFIC + $TRAFFIC\" | bc)\n    done\n\n    # Check thresholds and send alerts if necessary\n    if (( $(echo \"$CPU_USAGE > $CPU_THRESHOLD\" | bc -l) )); then\n        send_alert \"High CPU Usage Alert\" \"Timestamp: $TIMESTAMP\\nCPU usage is at $CPU_USAGE%.\"\n    fi\n\n    if (( $(echo \"$MEMORY_USAGE > $MEMORY_THRESHOLD\" | bc -l) )); then\n        send_alert \"High Memory Usage Alert\" \"Timestamp: $TIMESTAMP\\nMemory usage is at $MEMORY_USAGE%.\"\n    fi\n\n    if (( $(echo \"$DISK_USAGE > $DISK_THRESHOLD\" | bc -l) )); then\n        send_alert \"High Disk Usage Alert\" \"Timestamp: $TIMESTAMP\\nDisk usage is at $DISK_USAGE%.\"\n    fi\n\n    if (( $(echo \"$NETWORK_TRAFFIC > $NETWORK_THRESHOLD\" | bc -l) )); then\n        send_alert \"High Network Traffic Alert\" \"Timestamp: $TIMESTAMP\\nNetwork traffic is at $NETWORK_TRAFFIC MB/s.\"\n    fi\n\n    # Optional: Log the metrics\n    echo \"$TIMESTAMP, $CPU_USAGE%, $MEMORY_USAGE%, $DISK_USAGE%, $NETWORK_TRAFFIC MB/s\" >> $LOG_FILE\n\n    sleep 5\ndone\n```\n\n### Explanation\n\n1. **Configuration Variables**:\n   - Set thresholds for CPU, memory, disk, and network usage.\n   - Specify the email address for alerts.\n   - Define network interfaces to monitor.\n   - Optionally, set a log file to record metrics.\n\n2. **Temporary Files**:\n   - Store previous network statistics to calculate traffic rates.\n\n3. **Functions**:\n   - `get_cpu_usage`: Uses `vmstat` to calculate CPU usage.\n   - `get_memory_usage`: Uses `free -m` to calculate memory usage percentage.\n   - `get_disk_usage`: Uses `df /` to get disk usage percentage.\n   - `get_network_traffic`: Calculates network traffic rate in MB/s using `ip -s link`.\n   - `send_alert`: Sends an email alert using the `mail` command.\n\n4. **Main Loop**:\n   - Retrieves current system statistics.\n   - Checks if any statistics exceed their thresholds and sends an alert if they do.\n   - Optionally logs the metrics to a file.\n   - Sleeps for five seconds before repeating the process.\n\nThis script provides a comprehensive system monitoring solution, alerting administrators via email when system resources exceed predefined thresholds."
    }
]