[
    {
        "role": "user",
        "content": "Create a Java program that interacts with a MariaDB database to manage a simple inventory system. The program should allow users to add items, update item quantities, delete items, and view the current inventory. Use JDBC for database connectivity."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple Java program that interacts with a MariaDB database to manage an inventory system. This program allows users to add items, update item quantities, delete items, and view the current inventory. It uses JDBC for database connectivity.\n\nFirst, ensure you have the MariaDB JDBC driver in your classpath. You can download it from the MariaDB website or include it via Maven.\n\nHere's the step-by-step code:\n\n### 1. Setting Up the Database\n\nCreate a MariaDB database and a table for the inventory.\n\n```sql\nCREATE DATABASE inventory_db;\nUSE inventory_db;\n\nCREATE TABLE items (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    quantity INT NOT NULL\n);\n```\n\n### 2. Java Program\n\n```java\nimport java.sql.*;\nimport java.util.Scanner;\n\npublic class InventoryManager {\n\n    // Database URL, username, and password\n    private static final String URL = \"jdbc:mariadb://localhost:3306/inventory_db\";\n    private static final String USER = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    private static Connection connection;\n\n    public static void main(String[] args) {\n        try {\n            // Load the MariaDB driver\n            Class.forName(\"org.mariadb.jdbc.Driver\");\n            // Establish connection\n            connection = DriverManager.getConnection(URL, USER, PASSWORD);\n            System.out.println(\"Connected to the database.\");\n\n            Scanner scanner = new Scanner(System.in);\n            boolean exit = false;\n\n            while (!exit) {\n                System.out.println(\"\\nInventory Management System\");\n                System.out.println(\"1. Add Item\");\n                System.out.println(\"2. Update Quantity\");\n                System.out.println(\"3. Delete Item\");\n                System.out.println(\"4. View Inventory\");\n                System.out.println(\"5. Exit\");\n                System.out.print(\"Choose an option: \");\n\n                int choice = scanner.nextInt();\n                scanner.nextLine(); // Consume newline\n\n                switch (choice) {\n                    case 1:\n                        addItem(scanner);\n                        break;\n                    case 2:\n                        updateQuantity(scanner);\n                        break;\n                    case 3:\n                        deleteItem(scanner);\n                        break;\n                    case 4:\n                        viewInventory();\n                        break;\n                    case 5:\n                        exit = true;\n                        break;\n                    default:\n                        System.out.println(\"Invalid option. Please try again.\");\n                }\n            }\n\n            // Close resources\n            scanner.close();\n            connection.close();\n            System.out.println(\"Disconnected from the database.\");\n\n        } catch (ClassNotFoundException e) {\n            System.err.println(\"MariaDB JDBC driver not found.\");\n            e.printStackTrace();\n        } catch (SQLException e) {\n            System.err.println(\"Database connection error.\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void addItem(Scanner scanner) {\n        try {\n            System.out.print(\"Enter item name: \");\n            String name = scanner.nextLine();\n            System.out.print(\"Enter quantity: \");\n            int quantity = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            String sql = \"INSERT INTO items (name, quantity) VALUES (?, ?)\";\n            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n                pstmt.setString(1, name);\n                pstmt.setInt(2, quantity);\n                pstmt.executeUpdate();\n                System.out.println(\"Item added successfully.\");\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error adding item.\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void updateQuantity(Scanner scanner) {\n        try {\n            System.out.print(\"Enter item ID: \");\n            int id = scanner.nextInt();\n            System.out.print(\"Enter new quantity: \");\n            int quantity = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            String sql = \"UPDATE items SET quantity = ? WHERE id = ?\";\n            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n                pstmt.setInt(1, quantity);\n                pstmt.setInt(2, id);\n                int rowsAffected = pstmt.executeUpdate();\n                if (rowsAffected > 0) {\n                    System.out.println(\"Quantity updated successfully.\");\n                } else {\n                    System.out.println(\"Item not found.\");\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error updating quantity.\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void deleteItem(Scanner scanner) {\n        try {\n            System.out.print(\"Enter item ID to delete: \");\n            int id = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            String sql = \"DELETE FROM items WHERE id = ?\";\n            try (PreparedStatement pstmt = connection.prepareStatement(sql)) {\n                pstmt.setInt(1, id);\n                int rowsAffected = pstmt.executeUpdate();\n                if (rowsAffected > 0) {\n                    System.out.println(\"Item deleted successfully.\");\n                } else {\n                    System.out.println(\"Item not found.\");\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error deleting item.\");\n            e.printStackTrace();\n        }\n    }\n\n    private static void viewInventory() {\n        try {\n            String sql = \"SELECT * FROM items\";\n            try (Statement stmt = connection.createStatement();\n                 ResultSet rs = stmt.executeQuery(sql)) {\n\n                System.out.println(\"\\nInventory:\");\n                while (rs.next()) {\n                    int id = rs.getInt(\"id\");\n                    String name = rs.getString(\"name\");\n                    int quantity = rs.getInt(\"quantity\");\n                    System.out.println(\"ID: \" + id + \", Name: \" + name + \", Quantity: \" + quantity);\n                }\n            }\n        } catch (SQLException e) {\n            System.err.println(\"Error viewing inventory.\");\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Database Connection:** The program connects to the MariaDB database using JDBC.\n2. **Menu Driven:** A simple menu allows users to choose actions: add, update, delete, view items, or exit.\n3. **Adding Items:** Users can add new items with a name and quantity.\n4. **Updating Quantity:** Users can update the quantity of an existing item by ID.\n5. **Deleting Items:** Users can delete an item by its ID.\n6. **Viewing Inventory:** Displays all items in the inventory.\n\nMake sure to replace `\"your_username\"` and `\"your_password\"` with your actual database credentials. Also, ensure that the MariaDB JDBC driver is included in your project's dependencies.\n\nThis program provides a basic framework for managing an inventory system using Java and MariaDB."
    }
]