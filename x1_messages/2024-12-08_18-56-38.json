[
    {
        "role": "user",
        "content": "Write a Golang web server that serves static files from a specified directory and provides an API endpoint to upload new files to the directory. The server should use JWT authentication to restrict access to the upload functionality.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Golang web server that serves static files from a specified directory and has an API endpoint to upload new files, with JWT authentication to restrict access to the upload functionality.\n\nFirst, make sure you have Go installed on your machine. You can download it from https://golang.org/dl/.\n\nWe'll need a few dependencies:\n\n1. Gorilla Mux for routing: https://github.com/gorilla/mux\n\n2. Gorilla Handlers for serving static files: https://github.com/gorilla/handlers\n\n3. JWT for authentication: https://github.com/dgrijalva/jwt-go\n\nYou can install these using `go get`:\n\n```sh\ngo get -u github.com/gorilla/mux\n\ngo get -u github.com/gorilla/handlers\n\ngo get -u github.com/dgrijalva/jwt-go\n```\n\nNow, let's structure our project. Create a new directory for your project, say `static-server`, and inside it, create the following files:\n\n- `main.go`: This will contain our main server logic.\n\n- `jwt.go`: This will handle JWT token creation and verification.\n\n- `upload.go`: This will handle file uploads.\n\nAlso, create a directory named `static` where your static files will be served from.\n\nHere's a step-by-step guide:\n\n### 1. Setting up the main server\n\nIn `main.go`:\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/mux\"\n\t\"github.com/gorilla/handlers\"\n)\n\nfunc main() {\n\trouter := mux.NewRouter()\n\n\t// Serve static files\n\tstaticDir := http.Dir(\"./static\")\n\tstaticFileHandler := http.FileServer(staticDir)\n\trouter.PathPrefix(\"/\").Handler(http.StripPrefix(\"/\", staticFileHandler))\n\n\t// API endpoints\n\tapiRouter := router.PathPrefix(\"/api\").Subrouter()\n\tapiRouter.Use(JWTMiddleware) // Assuming JWTMiddleware is defined in jwt.go\n\n\tapiRouter.HandleFunc(\"/upload\", UploadFile).Methods(\"POST\")\n\n\tlog.Println(\"Starting server on :8080\")\n\tlog.Fatal(http.ListenAndServe(\":8080\", handlers.LoggingHandler(log.Writer(), router)))\n}\n```\n\n### 2. Implementing JWT Authentication\n\nIn `jwt.go`:\n\n```go\npackage main\n\nimport (\n\t\"net/http\"\n\t\"time\"\n\n\t\"github.com/dgrijalva/jwt-go\"\n)\n\nvar jwtKey = []byte(\"your-secret-key\") // Replace with your secret key\n\ntype Claims struct {\n\tUsername string `json:\"username\"`\n\tjwt.StandardClaims\n}\n\nfunc GenerateToken(username string) (string, error) {\n\texpirationTime := time.Now().Add(5 * time.Minute)\n\tclaims := &Claims{\n\t\tUsername: username,\n\t\tStandardClaims: jwt.StandardClaims{\n\t\t\tExpiresAt: expirationTime.Unix(),\n\t\t},\n\t}\n\n\ttoken := jwt.NewWithClaims(jwt.SigningMethodHS256, claims)\n\treturn token.SignedString(jwtKey)\n}\n\nfunc JWTMiddleware(next http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tauthHeader := r.Header.Get(\"Authorization\")\n\t\tif authHeader == \"\" {\n\t\t\thttp.Error(w, \"Missing authorization header\", http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\ttokenStr := authHeader[len(\"Bearer \"):]\n\t\ttoken, err := jwt.ParseWithClaims(tokenStr, &Claims{}, func(token *jwt.Token) (interface{}, error) {\n\t\t\treturn jwtKey, nil\n\t\t})\n\n\t\tif err != nil || !token.Valid {\n\t\t\thttp.Error(w, \"Invalid token\", http.StatusUnauthorized)\n\t\t\treturn\n\t\t}\n\n\t\tnext.ServeHTTP(w, r)\n\t})\n}\n```\n\n### 3. Handling File Uploads\n\nIn `upload.go`:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n)\n\nfunc UploadFile(w http.ResponseWriter, r *http.Request) {\n\tr.ParseMultipartForm(10 << 20) // 10 MB max file size\n\n\tfile, handler, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprintf(w, \"Error retrieving file: %v\", err)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfmt.Printf(\"Uploading File: %+v\\n\", handler.Filename)\n\tfmt.Printf(\"File Size: %+v\\n\", handler.Size)\n\tfmt.Printf(\"MIME Header: %+v\\n\", handler.Header)\n\n\tout, err := os.Create(\"./static/\" + handler.Filename)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, \"Error creating file: %v\", err)\n\t\treturn\n\t}\n\tdefer out.Close()\n\n\t_, err = io.Copy(out, file)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprintf(w, \"Error uploading file: %v\", err)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusCreated)\n\tfmt.Fprintf(w, \"File uploaded successfully: %s\", handler.Filename)\n}\n```\n\n### 4. Running the Server\n\nMake sure you have a `static` directory in your project folder. You can create it using:\n\n```sh\nmkdir static\n```\n\nNow, run your server:\n\n```sh\ngo run main.go jwt.go upload.go\n```\n\nYour server should now be running on `http://localhost:8080`. Static files in the `static` directory will be served, and you can upload new files to `/api/upload` with a JWT token in the `Authorization` header.\n\n### 5. Testing the Upload Endpoint\n\nYou can test the upload endpoint using tools like `curl` or Postman. First, generate a JWT token:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/dgrijalva/jwt-go\"\n)\n\nfunc main() {\n\ttoken, err := GenerateToken(\"username\")\n\tif err != nil {\n\t\tfmt.Println(\"Error generating token:\", err)\n\t\treturn\n\t}\n\tfmt.Println(\"JWT Token:\", token)\n}\n```\n\nRun this code to get a JWT token, then use it in your upload request.\n\nUsing `curl`:\n\n```sh\ncurl -X POST -H \"Authorization: Bearer YOUR_JWT_TOKEN\" -F \"file=@/path/to/your/file\" http://localhost:8080/api/upload\n```\n\nReplace `YOUR_JWT_TOKEN` with the token you generated and `/path/to/your/file` with the path to the file you want to upload.\n\nThat's it! You now have a Golang web server that serves static files and allows authenticated file uploads via JWT."
    }
]