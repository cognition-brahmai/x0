[
    {
        "role": "user",
        "content": "Write a Python script that connects to a Cassandra database, creates a new keyspace and table, inserts sample data into the table, and then queries the data based on user input.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python script that interacts with a Cassandra database. We'll cover connecting to the database, creating a new keyspace and table, inserting sample data, and querying that data based on user input.\n\nFirst, make sure you have the `cassandra-driver` package installed. You can install it using pip if you haven't already:\n\n```bash\npip install cassandra-driver\n```\n\nNow, let's start by importing the necessary modules and setting up the connection to the Cassandra database.\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\n# Connection settings\n cassandra_host = '127.0.0.1'\n cassandra_port = 9042\n cassandra_username = 'your_username'\n cassandra_password = 'your_password'\n\n# Create authentication provider\n auth_provider = PlainTextAuthProvider(username=cassandra_username, password=cassandra_password)\n\n# Connect to the cluster\n cluster = Cluster([cassandra_host], port=cassandra_port, auth_provider=auth_provider)\n session = cluster.connect()\n```\n\nReplace `'your_username'` and `'your_password'` with your actual Cassandra credentials. If your Cassandra instance doesn't require authentication, you can omit the `auth_provider`.\n\nNext, we'll create a new keyspace. For this example, let's name it `my_keyspace`.\n\n```python\n# Create a new keyspace\ncreate_keyspace_query = \"\"\"\nCREATE KEYSPACE IF NOT EXISTS my_keyspace\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}\n\"\"\"\nsession.execute(create_keyspace_query)\n\n# Set the keyspace for the session\nsession.set_keyspace('my_keyspace')\n```\n\nNow, let's create a new table within this keyspace. Suppose we want to create a table named `users` with columns for `user_id`, `name`, and `email`.\n\n```python\n# Create a new table\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS users (\n    user_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT\n)\n\"\"\"\nsession.execute(create_table_query)\n```\n\nNext, we'll insert some sample data into the `users` table.\n\n```python\nfrom uuid import uuid4\n\n# Sample data\nsample_users = [\n    {'user_id': uuid4(), 'name': 'Alice', 'email': 'alice@example.com'},\n    {'user_id': uuid4(), 'name': 'Bob', 'email': 'bob@example.com'},\n    {'user_id': uuid4(), 'name': 'Charlie', 'email': 'charlie@example.com'}\n]\n\n# Insert sample data\nfor user in sample_users:\n    insert_query = \"\"\"\n    INSERT INTO users (user_id, name, email)\n    VALUES (%s, %s, %s)\n    \"\"\"\n    session.execute(insert_query, (user['user_id'], user['name'], user['email']))\n```\n\nNow, let's create a function that allows users to query the data based on a user's name.\n\n```python\ndef query_users_by_name(session, name):\n    query = \"\"\"\n    SELECT * FROM users WHERE name = %s\n    \"\"\"\n    rows = session.execute(query, (name,))\n    return rows\n\n# Example usage\nuser_name = input(\"Enter the name to search: \")\nrows = query_users_by_name(session, user_name)\n\nfor row in rows:\n    print(f\"User ID: {row.user_id}, Name: {row.name}, Email: {row.email}\")\n```\n\nThis script connects to a Cassandra database, creates a new keyspace and table, inserts sample data, and allows users to query the data by name.\n\nRemember to close the connection when you're done:\n\n```python\nsession.shutdown()\ncluster.shutdown()\n```\n\nPutting it all together, here's the complete script:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\nfrom uuid import uuid4\n\n# Connection settings\ncassandra_host = '127.0.0.1'\ncassandra_port = 9042\ncassandra_username = 'your_username'\ncassandra_password = 'your_password'\n\n# Create authentication provider\nauth_provider = PlainTextAuthProvider(username=cassandra_username, password=cassandra_password)\n\n# Connect to the cluster\ncluster = Cluster([cassandra_host], port=cassandra_port, auth_provider=auth_provider)\nsession = cluster.connect()\n\n# Create a new keyspace\ncreate_keyspace_query = \"\"\"\nCREATE KEYSPACE IF NOT EXISTS my_keyspace\nWITH replication = {'class': 'SimpleStrategy', 'replication_factor': 1}\n\"\"\"\nsession.execute(create_keyspace_query)\n\n# Set the keyspace for the session\nsession.set_keyspace('my_keyspace')\n\n# Create a new table\ncreate_table_query = \"\"\"\nCREATE TABLE IF NOT EXISTS users (\n    user_id UUID PRIMARY KEY,\n    name TEXT,\n    email TEXT\n)\n\"\"\"\nsession.execute(create_table_query)\n\n# Sample data\nsample_users = [\n    {'user_id': uuid4(), 'name': 'Alice', 'email': 'alice@example.com'},\n    {'user_id': uuid4(), 'name': 'Bob', 'email': 'bob@example.com'},\n    {'user_id': uuid4(), 'name': 'Charlie', 'email': 'charlie@example.com'}\n]\n\n# Insert sample data\nfor user in sample_users:\n    insert_query = \"\"\"\n    INSERT INTO users (user_id, name, email)\n    VALUES (%s, %s, %s)\n    \"\"\"\n    session.execute(insert_query, (user['user_id'], user['name'], user['email']))\n\ndef query_users_by_name(session, name):\n    query = \"\"\"\n    SELECT * FROM users WHERE name = %s\n    \"\"\"\n    rows = session.execute(query, (name,))\n    return rows\n\n# Example usage\nuser_name = input(\"Enter the name to search: \")\nrows = query_users_by_name(session, user_name)\n\nfor row in rows:\n    print(f\"User ID: {row.user_id}, Name: {row.name}, Email: {row.email}\")\n\n# Close the connection\nsession.shutdown()\ncluster.shutdown()\n```\n\nMake sure to adjust the connection settings and credentials as per your Cassandra setup. This script provides a basic example of interacting with a Cassandra database using Python."
    }
]