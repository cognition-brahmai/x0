[
    {
        "role": "user",
        "content": "Write a C# console application that simulates a vending machine. It should accept coins, make change, maintain inventory, and dispense products. Ensure proper exception handling is included for scenarios like out of stock or insufficient funds."
    },
    {
        "role": "assistant",
        "content": "Creating a C# console application to simulate a vending machine involves several steps. We need to manage the inventory of products, handle coin input and calculate change, and handle various exceptions such as out of stock or insufficient funds.\n\n### Approach\n\n1. **Product Class**: Define a class to represent products with properties like name, price, and quantity.\n2. **VendingMachine Class**: Manage the inventory and handle operations like inserting coins, selecting products, and dispensing change.\n3. **Exception Handling**: Create custom exceptions for out of stock and insufficient funds scenarios.\n4. **Console Interaction**: Implement methods to interact with the user through the console.\n\n### Solution Code\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\n// Define a Product class\npublic class Product\n{\n    public string Name { get; set; }\n    public decimal Price { get; set; }\n    public int Quantity { get; set; }\n\n    public Product(string name, decimal price, int quantity)\n    {\n        Name = name;\n        Price = price;\n        Quantity = quantity;\n    }\n}\n\n// Custom exceptions\npublic class OutOfStockException : Exception\n{\n    public OutOfStockException(string message) : base(message) { }\n}\n\npublic class InsufficientFundsException : Exception\n{\n    public InsufficientFundsException(string message) : base(message) { }\n}\n\npublic class VendingMachine\n{\n    private Dictionary<int, Product> inventory;\n    private decimal insertedAmount;\n\n    public VendingMachine()\n    {\n        inventory = new Dictionary<int, Product>\n        {\n            {1, new Product(\"Soda\", 1.50m, 5)},\n            {2, new Product(\"Chips\", 1.00m, 5)},\n            {3, new Product(\"Candy\", 0.75m, 5)}\n        };\n        insertedAmount = 0;\n    }\n\n    public void InsertCoin(decimal amount)\n    {\n        insertedAmount += amount;\n        Console.WriteLine($\"Inserted: {amount:C}. Total inserted: {insertedAmount:C}\");\n    }\n\n    public void SelectProduct(int productId)\n    {\n        if (inventory.ContainsKey(productId))\n        {\n            var product = inventory[productId];\n            if (product.Quantity > 0)\n            {\n                if (insertedAmount >= product.Price)\n                {\n                    insertedAmount -= product.Price;\n                    product.Quantity--;\n                    Console.WriteLine($\"Dispensed: {product.Name}\");\n                    if (insertedAmount > 0)\n                    {\n                        DispenseChange();\n                    }\n                }\n                else\n                {\n                    throw new InsufficientFundsException(\"Insufficient funds to purchase the product.\");\n                }\n            }\n            else\n            {\n                throw new OutOfStockException($\"Sorry, {product.Name} is out of stock.\");\n            }\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid product selection.\");\n        }\n    }\n\n    private void DispenseChange()\n    {\n        Console.WriteLine($\"Dispensing change: {insertedAmount:C}\");\n        insertedAmount = 0;\n    }\n\n    public void ShowInventory()\n    {\n        Console.WriteLine(\"Inventory:\");\n        foreach (var item in inventory)\n        {\n            Console.WriteLine($\"ID: {item.Key}, Name: {item.Value.Name}, Price: {item.Value.Price:C}, Quantity: {item.Value.Quantity}\");\n        }\n    }\n}\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        VendingMachine vm = new VendingMachine();\n        vm.ShowInventory();\n\n        try\n        {\n            vm.InsertCoin(2.00m);\n            vm.SelectProduct(1);\n            vm.ShowInventory();\n            vm.InsertCoin(1.00m);\n            vm.SelectProduct(2);\n            vm.ShowInventory();\n            vm.InsertCoin(0.75m);\n            vm.SelectProduct(3);\n            vm.ShowInventory();\n            vm.InsertCoin(0.50m);\n            vm.SelectProduct(4); // Invalid product\n            vm.SelectProduct(1); // Out of stock\n        }\n        catch (OutOfStockException ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n        catch (InsufficientFundsException ex)\n        {\n            Console.WriteLine(ex.Message);\n        }\n        catch (Exception ex)\n        {\n            Console.WriteLine(\"An error occurred: \" + ex.Message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Product Class**: Represents products with name, price, and quantity.\n2. **VendingMachine Class**: Manages inventory and handles operations like inserting coins and selecting products. It also handles exceptions for out of stock and insufficient funds.\n3. **Custom Exceptions**: `OutOfStockException` and `InsufficientFundsException` are used to handle specific error scenarios.\n4. **Console Interaction**: The `Main` method demonstrates inserting coins, selecting products, and handling exceptions.\n\nThis implementation provides a basic simulation of a vending machine with essential features and proper exception handling."
    }
]