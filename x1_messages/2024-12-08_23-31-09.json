[
    {
        "role": "user",
        "content": "Write a Java program that demonstrates the use of streams and lambda expressions to process collections of objects."
    },
    {
        "role": "assistant",
        "content": "Certainly! I'd be happy to help you with that. Let's create a Java program that showcases the use of streams and lambda expressions to process a collection of objects.\n\nFirst, we need to understand what streams and lambda expressions are and why they are useful.\n\nStreams in Java are a sequence of elements supporting various methods that can be pipelined to produce the desired result. They were introduced in Java 8 as a part of the Java.util.stream package and are designed to make parallel processing easier.\n\nLambda expressions, also introduced in Java 8, provide a clear and concise way to represent one method interface using an expression. They are especially useful when working with streams because they allow for more readable and efficient code.\n\nFor this example, let's consider a simple scenario where we have a list of students, and we want to perform various operations on this list using streams and lambda expressions.\n\nFirst, we'll define a Student class with some properties like name, age, and grade.\n\n```java\npublic class Student {\n    private String name;\n    private int age;\n    private double grade;\n\n    public Student(String name, int age, double grade) {\n        this.name = name;\n        this.age = age;\n        this.grade = grade;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public double getGrade() {\n        return grade;\n    }\n\n    @Override\n    public String toString() {\n        return \"Student{name='\" + name + \"', age=\" + age + \", grade=\" + grade + \"}\";\n    }\n}\n```\n\nNow, let's create a list of Student objects and perform various operations using streams and lambda expressions.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class StreamLambdaExample {\n    public static void main(String[] args) {\n        List<Student> students = new ArrayList<>();\n        students.add(new Student(\"Alice\", 20, 85.5));\n        students.add(new Student(\"Bob\", 22, 78.0));\n        students.add(new Student(\"Charlie\", 19, 90.2));\n        students.add(new Student(\"David\", 21, 88.5));\n        students.add(new Student(\"Eve\", 20, 79.0));\n\n        // Example 1: Filtering students older than 20\n        List<Student> olderThan20 = students.stream()\n                .filter(s -> s.getAge() > 20)\n                .collect(Collectors.toList());\n        System.out.println(\"Students older than 20: \" + olderThan20);\n\n        // Example 2: Finding the average grade of all students\n        double averageGrade = students.stream()\n                .mapToDouble(Student::getGrade)\n                .average()\n                .orElse(0.0);\n        System.out.println(\"Average grade: \" + averageGrade);\n\n        // Example 3: Sorting students by grade in descending order\n        List<Student> sortedByGradeDesc = students.stream()\n                .sorted((s1, s2) -> Double.compare(s2.getGrade(), s1.getGrade()))\n                .collect(Collectors.toList());\n        System.out.println(\"Students sorted by grade descending: \" + sortedByGradeDesc);\n\n        // Example 4: Mapping students to their names\n        List<String> studentNames = students.stream()\n                .map(Student::getName)\n                .collect(Collectors.toList());\n        System.out.println(\"Student names: \" + studentNames);\n\n        // Example 5: Checking if all students have a grade above 75\n        boolean allAbove75 = students.stream()\n                .allMatch(s -> s.getGrade() > 75);\n        System.out.println(\"All students have a grade above 75: \" + allAbove75);\n    }\n}\n```\n\nIn this example, we've demonstrated several stream operations:\n\n1. **Filtering**: We used the `filter` method with a lambda expression to select students older than 20.\n\n2. **Average Calculation**: We used `mapToDouble` to extract grades and then `average` to calculate the average grade.\n\n3. **Sorting**: We used `sorted` with a lambda expression to sort students by grade in descending order.\n\n4. **Mapping**: We used `map` to extract student names from the list of students.\n\n5. **Checking Conditions**: We used `allMatch` to check if all students have a grade above 75.\n\nThese examples should give you a good starting point for using streams and lambda expressions in Java to process collections of objects efficiently and concisely.\n\nIf you have any specific requirements or need further explanations, feel free to ask!"
    }
]