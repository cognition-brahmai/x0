[
    {
        "role": "user",
        "content": "Implement a simple REST API using Node.js and Express framework that supports CRUD operations (Create, Read, Update, Delete) on a collection of books stored in memory. Each book should have a title, author, and publication year. Provide appropriate endpoints and validation for each operation."
    },
    {
        "role": "assistant",
        "content": "Implementing a simple REST API using Node.js and Express for CRUD operations on a collection of books is a great way to get started with backend development. In this guide, I'll walk you through the process step by step, ensuring that each part is clear and understandable.\n\n### Prerequisites\n\nBefore we begin, make sure you have the following installed on your machine:\n\n1. **Node.js**: You can download it from [nodejs.org](https://nodejs.org/).\n2. **npm** (comes bundled with Node.js): This is the package manager for Node.js.\n\n### Project Setup\n\nFirst, create a new directory for your project and navigate into it:\n\n```bash\nmkdir book-api\ncd book-api\n```\n\nInitialize a new Node.js project:\n\n```bash\nnpm init -y\n```\n\nThis command creates a `package.json` file with default settings.\n\n### Install Dependencies\n\nWe need to install Express and possibly some other utilities. Run the following command:\n\n```bash\nnpm install express body-parser\n```\n\n- **Express**: A minimal and flexible Node.js web application framework.\n- **body-parser**: Middleware to parse incoming request bodies.\n\n### Create the Server\n\nCreate a new file called `server.js` and set up the basic server structure:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n```\n\nThis code sets up an Express app, uses `body-parser` to parse JSON request bodies, and listens on port 3000.\n\n### In-Memory Data Storage\n\nSince we're storing books in memory, we'll use an array to hold our book data. Each book will have a `title`, `author`, and `publicationYear`.\n\nAdd the following code to `server.js`:\n\n```javascript\nlet books = [];\nlet currentId = 1;\n\nfunction generateId() {\n    return currentId++;\n}\n```\n\n### CRUD Operations\n\nNow, let's implement the CRUD operations.\n\n#### 1. Create a Book (POST /books)\n\nTo create a new book, we'll need to receive the book data in the request body and add it to our `books` array.\n\n```javascript\napp.post('/books', (req, res) => {\n    const { title, author, publicationYear } = req.body;\n\n    // Basic validation\n    if (!title || !author || !publicationYear) {\n        return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    const newBook = {\n        id: generateId(),\n        title,\n        author,\n        publicationYear\n    };\n\n    books.push(newBook);\n    res.status(201).json(newBook);\n});\n```\n\n#### 2. Get All Books (GET /books)\n\nThis endpoint will return the list of all books.\n\n```javascript\napp.get('/books', (req, res) => {\n    res.json(books);\n});\n```\n\n#### 3. Get a Single Book (GET /books/:id)\n\nTo get a specific book by its ID.\n\n```javascript\napp.get('/books/:id', (req, res) => {\n    const bookId = parseInt(req.params.id);\n    const book = books.find(b => b.id === bookId);\n\n    if (!book) {\n        return res.status(404).json({ error: 'Book not found' });\n    }\n\n    res.json(book);\n});\n```\n\n#### 4. Update a Book (PUT /books/:id)\n\nAllow updating an existing book's details.\n\n```javascript\napp.put('/books/:id', (req, res) => {\n    const bookId = parseInt(req.params.id);\n    const index = books.findIndex(b => b.id === bookId);\n\n    if (index === -1) {\n        return res.status(404).json({ error: 'Book not found' });\n    }\n\n    const { title, author, publicationYear } = req.body;\n\n    // Basic validation\n    if (!title || !author || !publicationYear) {\n        return res.status(400).json({ error: 'Missing required fields' });\n    }\n\n    books[index] = {\n        id: bookId,\n        title,\n        author,\n        publicationYear\n    };\n\n    res.json(books[index]);\n});\n```\n\n#### 5. Delete a Book (DELETE /books/:id)\n\nAllow deleting a book by its ID.\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n    const bookId = parseInt(req.params.id);\n    const index = books.findIndex(b => b.id === bookId);\n\n    if (index === -1) {\n        return res.status(404).json({ error: 'Book not found' });\n    }\n\n    const deletedBook = books.splice(index, 1);\n    res.json(deletedBook[0]);\n});\n```\n\n### Running the Server\n\nTo run your server, use the following command:\n\n```bash\nnode server.js\n```\n\nYour server should now be running on `http://localhost:3000`.\n\n### Testing the API\n\nYou can test your API using tools like [Postman](https://www.postman.com/) or [curl](https://curl.se/). Here are some examples using curl:\n\n1. **Create a Book**:\n\n```bash\ncurl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationYear\":2020}'\n```\n\n2. **Get All Books**:\n\n```bash\ncurl http://localhost:3000/books\n```\n\n3. **Get a Single Book**:\n\n```bash\ncurl http://localhost:3000/books/1\n```\n\n4. **Update a Book**:\n\n```bash\ncurl -X PUT http://localhost:3000/books/1 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publicationYear\":2021}'\n```\n\n5. **Delete a Book**:\n\n```bash\ncurl -X DELETE http://localhost:3000/books/1\n```\n\n### Conclusion\n\nCongratulations! You've successfully created a simple REST API using Node.js and Express that supports CRUD operations on a collection of books stored in memory. This foundation can be expanded with more features, such as connecting to a database, adding more validation, or implementing user authentication.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]