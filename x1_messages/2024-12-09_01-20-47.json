[
    {
        "role": "user",
        "content": "Create a C++ program that implements a stack data structure using dynamic arrays, including push, pop, top, and size operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C++ program that implements a stack data structure using dynamic arrays. The stack supports the operations `push`, `pop`, `top`, and `size`.\n\n```cpp\n#include <iostream>\n\nclass Stack {\nprivate:\n    int* arr;\n    int capacity;\n    int topIndex;\n\npublic:\n    // Constructor to initialize the stack with a given initial capacity\n    Stack(int initialCapacity = 1) {\n        if (initialCapacity < 1) {\n            throw std::invalid_argument(\"Initial capacity must be at least 1\");\n        }\n        arr = new int[initialCapacity];\n        capacity = initialCapacity;\n        topIndex = -1;\n    }\n\n    // Destructor to free the allocated memory\n    ~Stack() {\n        delete[] arr;\n    }\n\n    // Push an element onto the stack\n    void push(int value) {\n        if (topIndex + 1 == capacity) {\n            resize(2 * capacity);  // Double the capacity if the stack is full\n        }\n        arr[++topIndex] = value;\n    }\n\n    // Pop an element from the stack\n    int pop() {\n        if (isEmpty()) {\n            throw std::out_of_range(\"Stack is empty\");\n        }\n        int value = arr[topIndex--];\n        if (topIndex < capacity / 4 && capacity > 1) {\n            resize(capacity / 2);  // Halve the capacity if the stack is quarter full\n        }\n        return value;\n    }\n\n    // Get the top element of the stack\n    int top() const {\n        if (isEmpty()) {\n            throw std::out_of_range(\"Stack is empty\");\n        }\n        return arr[topIndex];\n    }\n\n    // Get the number of elements in the stack\n    int size() const {\n        return topIndex + 1;\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() const {\n        return topIndex == -1;\n    }\n\nprivate:\n    // Helper function to resize the array\n    void resize(int newCapacity) {\n        int* newArr = new int[newCapacity];\n        for (int i = 0; i <= topIndex; ++i) {\n            newArr[i] = arr[i];\n        }\n        delete[] arr;\n        arr = newArr;\n        capacity = newCapacity;\n    }\n};\n\nint main() {\n    Stack stack(5);  // Initialize stack with capacity 5\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n\n    std::cout << \"Top element is: \" << stack.top() << std::endl;  // Should print 5\n    std::cout << \"Stack size is: \" << stack.size() << std::endl;  // Should print 5\n\n    stack.pop();\n    stack.pop();\n\n    std::cout << \"Top element is: \" << stack.top() << std::endl;  // Should print 3\n    std::cout << \"Stack size is: \" << stack.size() << std::endl;  // Should print 3\n\n    stack.push(6);\n    stack.push(7);\n\n    std::cout << \"Top element is: \" << stack.top() << std::endl;  // Should print 7\n    std::cout << \"Stack size is: \" << stack.size() << std::endl;  // Should print 5\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `Stack` class manages a dynamic array to store stack elements.\n   - Private members: `arr` (dynamic array), `capacity` (current capacity), `topIndex` (index of the top element).\n\n2. **Constructor:**\n   - Initializes the stack with a given initial capacity (default is 1).\n   - Allocates memory for the array.\n\n3. **Destructor:**\n   - Frees the allocated memory.\n\n4. **push Operation:**\n   - Adds an element to the top of the stack.\n   - Resizes the array to double the capacity if the stack is full.\n\n5. **pop Operation:**\n   - Removes the top element from the stack.\n   - Resizes the array to half the capacity if the stack is quarter full and capacity is more than 1.\n\n6. **top Operation:**\n   - Returns the top element without removing it.\n   - Throws an exception if the stack is empty.\n\n7. **size Operation:**\n   - Returns the number of elements in the stack.\n\n8. **isEmpty Operation:**\n   - Checks if the stack is empty.\n\n9. **resize Helper Function:**\n   - Resizes the array to the new capacity.\n   - Copies elements from the old array to the new array.\n\n10. **main Function:**\n    - Demonstrates the usage of the Stack class with push, pop, top, and size operations.\n\nThis implementation ensures that the stack operations are efficient, with amortized O(1) time complexity for push and pop operations due to dynamic resizing."
    }
]