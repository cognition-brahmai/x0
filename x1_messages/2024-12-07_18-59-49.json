[
    {
        "role": "user",
        "content": "Create a Java program that interacts with a MariaDB database to manage a simple inventory system. The program should allow users to add items, update item quantities, delete items, and view the current inventory. Use JDBC for database connectivity.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a Java program that interacts with a MariaDB database for managing a simple inventory system. I'll need to allow users to add items, update quantities, delete items, and view the current inventory. I'll use JDBC for connecting to the database.\n\nFirst, I need to set up the database. I'll create a MariaDB database and a table to store inventory items. Let's assume the table is called \"inventory\" with columns: id (auto-increment), name (varchar), quantity (int).\n\nNext, I need to set up the Java environment. I'll need to include the MariaDB JDBC driver in my project. If I'm using Maven, I can add the dependency in the pom.xml file.\n\nHere's a rough outline of what the Java program will look like:\n\n1. Establish a database connection using JDBC.\n\n2. Create methods for adding items, updating quantities, deleting items, and viewing inventory.\n\n3. Provide a simple command-line interface for the user to interact with the program.\n\nLet's start by setting up the database connection.\n\n## Final Solution\nTo create a Java program that manages a simple inventory system using MariaDB and JDBC, follow these steps:\n\n### Prerequisites\n1. **MariaDB Server**: Ensure MariaDB is installed and running.\n2. **Java Development Kit (JDK)**: Make sure JDK is installed.\n3. **Maven**: Optional, but recommended for managing dependencies.\n\n### Step 1: Set Up the Database\n\n1. **Create the Database and Table**:\n    ```sql\n    CREATE DATABASE inventory_db;\n    USE inventory_db;\n\n    CREATE TABLE inventory (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        name VARCHAR(100) NOT NULL,\n        quantity INT NOT NULL\n    );\n    ```\n\n### Step 2: Set Up the Java Project\n\n1. **Create a new Maven project** or set up a basic Java project.\n2. **Add MariaDB JDBC Driver** to your `pom.xml`:\n    ```xml\n    <dependency>\n        <groupId>org.mariadb.jdbc</groupId>\n        <artifactId>mariadb-java-client</artifactId>\n        <version>2.7.3</version>\n    </dependency>\n    ```\n\n### Step 3: Implement the Inventory Manager\n\nCreate a Java class `InventoryManager` to handle database operations.\n\n```java\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.Scanner;\n\npublic class InventoryManager {\n\n    private Connection connection;\n\n    public InventoryManager() {\n        connect();\n    }\n\n    private void connect() {\n        String url = \"jdbc:mariadb://localhost:3306/inventory_db\";\n        String user = \"your_username\";\n        String password = \"your_password\";\n\n        try {\n            connection = DriverManager.getConnection(url, user, password);\n            System.out.println(\"Connected to the database.\");\n        } catch (SQLException e) {\n            System.out.println(\"Database connection failed.\");\n            e.printStackTrace();\n        }\n    }\n\n    public void close() {\n        try {\n            if (connection != null && !connection.isClosed()) {\n                connection.close();\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void addItem(String name, int quantity) {\n        String sql = \"INSERT INTO inventory (name, quantity) VALUES (?, ?)\";\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setString(1, name);\n            stmt.setInt(2, quantity);\n            stmt.executeUpdate();\n            System.out.println(\"Item added: \" + name + \" with quantity \" + quantity);\n        } catch (SQLException e) {\n            System.out.println(\"Error adding item.\");\n            e.printStackTrace();\n        }\n    }\n\n    public void updateQuantity(int id, int quantity) {\n        String sql = \"UPDATE inventory SET quantity = ? WHERE id = ?\";\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setInt(1, quantity);\n            stmt.setInt(2, id);\n            int rowsUpdated = stmt.executeUpdate();\n            if (rowsUpdated > 0) {\n                System.out.println(\"Quantity updated for item ID \" + id);\n            } else {\n                System.out.println(\"No item found with ID \" + id);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error updating quantity.\");\n            e.printStackTrace();\n        }\n    }\n\n    public void deleteItem(int id) {\n        String sql = \"DELETE FROM inventory WHERE id = ?\";\n        try (PreparedStatement stmt = connection.prepareStatement(sql)) {\n            stmt.setInt(1, id);\n            int rowsDeleted = stmt.executeUpdate();\n            if (rowsDeleted > 0) {\n                System.out.println(\"Item deleted with ID \" + id);\n            } else {\n                System.out.println(\"No item found with ID \" + id);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error deleting item.\");\n            e.printStackTrace();\n        }\n    }\n\n    public void viewInventory() {\n        String sql = \"SELECT * FROM inventory\";\n        try (Statement stmt = connection.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n            System.out.println(\"ID\\tName\\tQuantity\");\n            while (rs.next()) {\n                int id = rs.getInt(\"id\");\n                String name = rs.getString(\"name\");\n                int quantity = rs.getInt(\"quantity\");\n                System.out.println(id + \"\\t\" + name + \"\\t\" + quantity);\n            }\n        } catch (SQLException e) {\n            System.out.println(\"Error viewing inventory.\");\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        InventoryManager manager = new InventoryManager();\n        Scanner scanner = new Scanner(System.in);\n        boolean exit = false;\n\n        while (!exit) {\n            System.out.println(\"\\nInventory Management System\");\n            System.out.println(\"1. Add Item\");\n            System.out.println(\"2. Update Quantity\");\n            System.out.println(\"3. Delete Item\");\n            System.out.println(\"4. View Inventory\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Choose an option: \");\n            int option = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (option) {\n                case 1:\n                    System.out.print(\"Enter item name: \");\n                    String name = scanner.nextLine();\n                    System.out.print(\"Enter quantity: \");\n                    int quantity = scanner.nextInt();\n                    manager.addItem(name, quantity);\n                    break;\n                case 2:\n                    System.out.print(\"Enter item ID: \");\n                    int id = scanner.nextInt();\n                    System.out.print(\"Enter new quantity: \");\n                    int newQuantity = scanner.nextInt();\n                    manager.updateQuantity(id, newQuantity);\n                    break;\n                case 3:\n                    System.out.print(\"Enter item ID to delete: \");\n                    int deleteId = scanner.nextInt();\n                    manager.deleteItem(deleteId);\n                    break;\n                case 4:\n                    manager.viewInventory();\n                    break;\n                case 5:\n                    exit = true;\n                    manager.close();\n                    System.out.println(\"Exiting program.\");\n                    break;\n                default:\n                    System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Database Connection**:\n    - The `connect` method establishes a connection to the MariaDB database using JDBC.\n    \n2. **CRUD Operations**:\n    - `addItem`: Inserts a new item into the inventory.\n    - `updateQuantity`: Updates the quantity of an existing item by ID.\n    - `deleteItem`: Deletes an item by ID.\n    - `viewInventory`: Displays all items in the inventory.\n\n3. **Command-Line Interface**:\n    - A simple menu-driven interface allows users to interact with the inventory system.\n    - Users can add items, update quantities, delete items, view the inventory, or exit the program.\n\nMake sure to replace `\"your_username\"` and `\"your_password\"` with your actual database credentials. This program provides a basic inventory management system and can be extended with additional features as needed."
    }
]