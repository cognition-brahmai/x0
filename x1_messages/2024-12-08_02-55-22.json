[
    {
        "role": "user",
        "content": "Implement a Python FastAPI application that integrates with Elasticsearch to provide search functionality over a dataset. The application should have endpoints for indexing new documents, searching by keyword, and deleting documents by ID. Additionally, it should support pagination and sorting of search results.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a Python FastAPI application integrated with Elasticsearch to provide search functionality involves several steps. Below is a step-by-step guide to achieve this, including code snippets for clarity.\n\n### Step 1: Setup Environment\n\nFirst, ensure you have Python installed on your system. Then, install the necessary libraries:\n\n```bash\npip install fastapi uvicorn elasticsearch\n```\n\n### Step 2: Initialize Elasticsearch\n\nCreate a connection to your Elasticsearch instance. For this example, we'll assume Elasticsearch is running locally on the default port.\n\n```python\nfrom elasticsearch import Elasticsearch\n\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n```\n\n### Step 3: Define FastAPI Application\n\nCreate a new Python file (e.g., `main.py`) and set up the FastAPI app.\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\n\napp = FastAPI()\n\n# Assuming Elasticsearch is already initialized as 'es'\n```\n\n### Step 4: Define Models\n\nDefine Pydantic models for request and response validation.\n\n```python\nclass Document(BaseModel):\n    id: str\n    content: str\n\nclass SearchQuery(BaseModel):\n    keyword: str\n    page: int = 1\n    size: int = 10\n    sort: Optional[str] = None\n```\n\n### Step 5: Implement Indexing Endpoint\n\nCreate an endpoint to index new documents.\n\n```python\n@app.post(\"/index/\")\nasync def index_document(document: Document):\n    res = es.index(index=\"documents\", id=document.id, body={\"content\": document.content})\n    if res['result'] == 'created':\n        return {\"message\": \"Document indexed successfully\"}\n    else:\n        raise HTTPException(status_code=500, detail=\"Failed to index document\")\n```\n\n### Step 6: Implement Search Endpoint\n\nImplement a search endpoint that supports keyword search, pagination, and sorting.\n\n```python\n@app.post(\"/search/\")\nasync def search_documents(query: SearchQuery):\n    from_val = (query.page - 1) * query.size\n    sort_val = query.sort if query.sort else \"_score\"\n    \n    res = es.search(\n        index=\"documents\",\n        body={\n            \"query\": {\n                \"match\": {\n                    \"content\": query.keyword\n                }\n            },\n            \"from\": from_val,\n            \"size\": query.size,\n            \"sort\": [{sort_val}: \"asc\"}\n        }\n    )\n    \n    hits = res['hits']['hits']\n    total = res['hits']['total']['value']\n    \n    return {\n        \"total\": total,\n        \"results\": [\n            {\"id\": hit[\"_id\"], \"content\": hit[\"_source\"][\"content\"], \"score\": hit[\"_score\"]}\n            for hit in hits\n        ]\n    }\n```\n\n### Step 7: Implement Delete Endpoint\n\nCreate an endpoint to delete documents by ID.\n\n```python\n@app.delete(\"/delete/{document_id}\")\nasync def delete_document(document_id: str):\n    res = es.delete(index=\"documents\", id=document_id)\n    if res['result'] == 'deleted':\n        return {\"message\": \"Document deleted successfully\"}\n    else:\n        raise HTTPException(status_code=404, detail=\"Document not found\")\n```\n\n### Step 8: Run the Application\n\nUse Uvicorn to run your FastAPI application.\n\n```bash\nuvicorn main:app --reload\n```\n\n### Explanation\n\n1. **Environment Setup**: Install necessary Python packages.\n2. **Elasticsearch Initialization**: Connect to the Elasticsearch instance.\n3. **FastAPI Application**: Set up the FastAPI app.\n4. **Models**: Define Pydantic models for request validation.\n5. **Indexing Endpoint**: Allow indexing of new documents.\n6. **Search Endpoint**: Provide search functionality with pagination and sorting.\n7. **Delete Endpoint**: Enable deletion of documents by ID.\n8. **Run Application**: Start the application using Uvicorn.\n\nThis setup provides a basic Elasticsearch integrated FastAPI application for document indexing, searching, and deletion with pagination and sorting support."
    }
]