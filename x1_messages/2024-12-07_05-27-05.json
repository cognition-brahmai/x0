[
    {
        "role": "user",
        "content": "Write a C program that performs matrix multiplication. The matrices should be read from standard input, and the resulting matrix should be printed to standard output."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Matrix multiplication is a fundamental operation in linear algebra, and implementing it in C is a great way to understand how arrays and nested loops work.\n\nBefore we dive into the code, let's quickly review how matrix multiplication works. Suppose we have two matrices, A and B, where A is of size m x n and B is of size n x p. The product matrix C will be of size m x p, and each element c[i][j] is computed as the dot product of the i-th row of A and the j-th column of B.\n\nHere's a step-by-step plan for our program:\n\n1. **Read the dimensions of matrix A (m x n).**\n2. **Read the elements of matrix A.**\n3. **Read the dimensions of matrix B (n x p).**\n4. **Read the elements of matrix B.**\n5. **Perform matrix multiplication to get matrix C.**\n6. **Print matrix C.**\n\nWe need to ensure that the number of columns in matrix A is equal to the number of rows in matrix B; otherwise, matrix multiplication is not defined.\n\nNow, let's write the C code accordingly.\n\n## Final Solution\nTo solve this problem, we need to perform matrix multiplication in C. The matrices will be read from standard input, and the resulting matrix will be printed to standard output.\n\n### Approach\n\n1. **Read the dimensions of matrix A (m x n).**\n2. **Read the elements of matrix A.**\n3. **Read the dimensions of matrix B (n x p).**\n4. **Read the elements of matrix B.**\n5. **Perform matrix multiplication to get matrix C.**\n6. **Print matrix C.**\n\nWe must ensure that the number of columns in matrix A is equal to the number of rows in matrix B for matrix multiplication to be defined.\n\n### Solution Code\n\n```c\n#include <stdio.h>\n\n#define MAX_SIZE 100  // Assuming maximum size of matrices is 100x100\n\nint main() {\n    int m, n, p;\n    int A[MAX_SIZE][MAX_SIZE];\n    int B[MAX_SIZE][MAX_SIZE];\n    int C[MAX_SIZE][MAX_SIZE] = {0};\n\n    // Read dimensions of matrix A\n    printf(\"Enter dimensions of matrix A (m n): \");\n    scanf(\"%d %d\", &m, &n);\n\n    // Read elements of matrix A\n    printf(\"Enter elements of matrix A:\\n\");\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            scanf(\"%d\", &A[i][j]);\n        }\n    }\n\n    // Read dimensions of matrix B\n    printf(\"Enter dimensions of matrix B (n p): \");\n    scanf(\"%d %d\", &n, &p);\n\n    // Read elements of matrix B\n    printf(\"Enter elements of matrix B:\\n\");\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < p; j++) {\n            scanf(\"%d\", &B[i][j]);\n        }\n    }\n\n    // Perform matrix multiplication\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < p; j++) {\n            for (int k = 0; k < n; k++) {\n                C[i][j] += A[i][k] * B[k][j];\n            }\n        }\n    }\n\n    // Print the resulting matrix C\n    printf(\"The product matrix C is:\\n\");\n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < p; j++) {\n            printf(\"%d \", C[i][j]);\n        }\n        printf(\"\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Input Dimensions and Elements:**\n   - Read the dimensions and elements of matrix A.\n   - Read the dimensions and elements of matrix B.\n   \n2. **Matrix Multiplication:**\n   - Multiply matrix A and matrix B using nested loops to calculate each element of matrix C.\n   \n3. **Output the Result:**\n   - Print the resulting matrix C.\n\nThis approach ensures that the matrix multiplication is performed correctly and efficiently, adhering to the rules of linear algebra."
    }
]