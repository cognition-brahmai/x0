[
    {
        "role": "user",
        "content": "Write a Java program that listens on a specific port for incoming TCP connections and echoes back any received messages to the connected clients.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Writing a Java program that listens on a specific port for incoming TCP connections and echoes back any received messages is a great way to understand network programming in Java. We'll be using Java's built-in libraries to achieve this.\n\n### Understanding the Requirements\n\n1. **Listening on a Specific Port:** Your program needs to bind to a particular port on the local machine to listen for incoming connections.\n2. **Handling TCP Connections:** TCP is a reliable, connection-oriented protocol, which is suitable for applications that require guaranteed delivery.\n3. **Echoing Back Messages:** Any data received from a client should be sent back to that client.\n\n### Approach\n\n1. **Server Setup:** Create a server socket that listens on a specified port.\n2. **Accepting Connections:** Accept incoming client connections.\n3. **Reading and Writing Data:** Read data from the client and send the same data back.\n\n### Solution Code\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class EchoServer {\n    private int port;\n\n    public EchoServer(int port) {\n        this.port = port;\n    }\n\n    public void start() {\n        ServerSocket serverSocket = null;\n        try {\n            serverSocket = new ServerSocket(port);\n            System.out.println(\"Echo server started on port \" + port);\n        } catch (IOException e) {\n            System.err.println(\"Could not listen on port \" + port);\n            System.exit(1);\n        }\n\n        while (true) {\n            Socket clientSocket = null;\n            PrintWriter out = null;\n            BufferedReader in = null;\n            try {\n                System.out.println(\"Waiting for a connection...\");\n                clientSocket = serverSocket.accept();\n                System.out.println(\"Connection accepted\");\n\n                in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n                out = new PrintWriter(clientSocket.getOutputStream(), true);\n\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + inputLine);\n                    out.println(\"Echo: \" + inputLine);\n                }\n            } catch (IOException e) {\n                System.err.println(\"Error handling client\");\n            } finally {\n                try {\n                    if (out != null) out.close();\n                    if (in != null) in.close();\n                    if (clientSocket != null) clientSocket.close();\n                } catch (IOException e) {\n                    System.err.println(\"Error closing resources\");\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int port = 1234; // Default port\n        if (args.length > 0) {\n            try {\n                port = Integer.parseInt(args[0]);\n            } catch (NumberFormatException e) {\n                System.err.println(\"Port must be an integer\");\n                System.exit(1);\n            }\n        }\n        EchoServer server = new EchoServer(port);\n        server.start();\n    }\n}\n```\n\n### Explanation\n\n1. **Server Setup:**\n   - A `ServerSocket` is created to listen on the specified port.\n   - The server runs in an infinite loop, accepting connections one by one.\n\n2. **Accepting Connections:**\n   - The `accept()` method of `ServerSocket` blocks until a connection is made.\n   - Once a connection is accepted, input and output streams are obtained from the socket.\n\n3. **Reading and Writing Data:**\n   - A `BufferedReader` reads data from the client.\n   - A `PrintWriter` sends data back to the client.\n   - The server reads lines from the client and echoes them back prefixed with \"Echo: \".\n\n4. **Resource Management:**\n   - Resources like `PrintWriter`, `BufferedReader`, and `Socket` are closed in the `finally` block to ensure they are properly released, even if an error occurs.\n\nThis program provides a basic framework for a TCP echo server in Java. You can extend it further based on your requirements, such as handling multiple clients concurrently using threads."
    }
]