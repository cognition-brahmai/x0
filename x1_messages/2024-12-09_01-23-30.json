[
    {
        "role": "user",
        "content": "Using Python, develop a script that interacts with Azure Storage to create and delete blob containers. The script should accept command line arguments for the Azure Storage account name, key, and container name. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To interact with Azure Storage using Python, you'll need to use the `azure-storage-blob` library. If you haven't installed it yet, you can do so using pip:\n\n```sh\npip install azure-storage-blob\n```\n\nOnce you have the library installed, you can proceed to write a script that accepts command-line arguments for the Azure Storage account name, key, and container name. The script will then create or delete a blob container based on the user's choice.\n\nHere's a sample script that demonstrates how to achieve this:\n\n```python\nimport argparse\nfrom azure.storage.blob import BlobServiceClient, ContainerClient\n\ndef create_container(account_name, account_key, container_name):\n    connection_string = f\"DefaultEndpointsProtocol=https;AccountName={account_name};AccountKey={account_key};EndpointSuffix=core.windows.net\"\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n    try:\n        container_client = blob_service_client.create_container(container_name)\n        print(f\"Container '{container_name}' created successfully.\")\n    except Exception as e:\n        print(f\"Error creating container: {e}\")\n\ndef delete_container(account_name, account_key, container_name):\n    connection_string = f\"DefaultEndpointsProtocol=https;AccountName={account_name};AccountKey={account_key};EndpointSuffix=core.windows.net\"\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n    try:\n        blob_service_client.delete_container(container_name)\n        print(f\"Container '{container_name}' deleted successfully.\")\n    except Exception as e:\n        print(f\"Error deleting container: {e}\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Create or delete Azure Blob Storage containers.\")\n    parser.add_argument(\"--account-name\", required=True, help=\"Azure Storage account name\")\n    parser.add_argument(\"--account-key\", required=True, help=\"Azure Storage account key\")\n    parser.add_argument(\"--container-name\", required=True, help=\"Name of the container to create or delete\")\n    parser.add_argument(\"--action\", required=True, choices=[\"create\", \"delete\"], help=\"Action to perform: create or delete\")\n\n    args = parser.parse_args()\n\n    if args.action == \"create\":\n        create_container(args.account_name, args.account_key, args.container_name)\n    elif args.action == \"delete\":\n        delete_container(args.account_name, args.account_key, args.container_name)\n    else:\n        print(\"Invalid action specified. Choose 'create' or 'delete'.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Arguments Parsing:**\n   - The script uses the `argparse` module to handle command-line arguments.\n   - It expects four arguments:\n     - `--account-name`: The name of the Azure Storage account.\n     - `--account-key`: The access key for the Azure Storage account.\n     - `--container-name`: The name of the container to be created or deleted.\n     - `--action`: The action to perform, either \"create\" or \"delete\".\n\n2. **Creating a Container:**\n   - The `create_container` function constructs a connection string using the provided account name and key.\n   - It then creates a `BlobServiceClient` from the connection string.\n   - Using this client, it attempts to create a new container with the specified name.\n   - If successful, it prints a success message; otherwise, it prints an error message.\n\n3. **Deleting a Container:**\n   - The `delete_container` function similarly constructs a connection string and creates a `BlobServiceClient`.\n   - It attempts to delete the specified container.\n   - It prints a success message upon successful deletion or an error message if an exception occurs.\n\n4. **Main Function:**\n   - The `main` function parses the command-line arguments and calls the appropriate function based on the specified action.\n\n### Usage:\n\nTo run the script, save it to a file, for example, `manage_container.py`, and execute it from the command line. Here are examples for both actions:\n\n#### To Create a Container:\n\n```sh\npython manage_container.py --account-name <your_account_name> --account-key <your_account_key> --container-name <container_name> --action create\n```\n\n#### To Delete a Container:\n\n```sh\npython manage_container.py --account-name <your_account_name> --account-key <your_account_key> --container-name <container_name> --action delete\n```\n\nReplace `<your_account_name>`, `<your_account_key>`, and `<container_name>` with your actual Azure Storage account name, key, and the desired container name.\n\nThis script provides a straightforward way to manage blob containers in Azure Storage using Python and command-line arguments."
    }
]