[
    {
        "role": "user",
        "content": "Write a Golang program that implements a simple HTTP server that serves static files from a given directory. Additionally, the server should have endpoints for uploading new files and deleting existing ones. Use Gorilla Mux for routing and middleware support.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a simple HTTP server in Golang that serves static files from a specified directory. Additionally, it will have endpoints to upload and delete files. We'll be using the Gorilla Mux package for routing and middleware support.\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). After installing Go, set up your workspace and ensure your `GOPATH` and `GOBIN` are correctly configured.\n\nNext, you need to install the Gorilla Mux package. Open your terminal and run:\n\n```sh\ngo get -u github.com/gorilla/mux\n```\n\nAlso, for file uploads, we might need to handle multipart forms, which is available in the standard `mime/multipart` package.\n\nLet's start by creating a new Go file, say `main.go`.\n\n### Step 1: Setting up the basic server\n\nFirst, import the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gorilla/mux\"\n)\n```\n\nDefine a variable to hold the directory from which to serve static files. For this example, let's assume it's a directory named `static` in the same folder as your `main.go`.\n\n```go\nvar staticDir = \"./static\"\n```\n\n### Step 2: Serving static files\n\nWe'll create a handler to serve static files from the `staticDir`. Gorilla Mux has a `FileServer` function that can be used for this purpose.\n\n```go\nfunc staticFilesHandler() http.Handler {\n\treturn http.FileServer(http.Dir(staticDir))\n}\n```\n\n### Step 3: Uploading files\n\nFor uploading files, we'll create an endpoint `/upload` that accepts POST requests containing files in form data.\n\nFirst, define the handler function for uploading files:\n\n```go\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n\tr.ParseMultipartForm(10 << 20) // Set memory limit to 10MB\n\n\tfile, handler, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, \"Error retrieving file from form-data\")\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfmt.Printf(\"Uploading File '%s'\\n\", handler.Filename)\n\n\tfileBytes, err := ioutil.ReadAll(file)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error reading uploaded file\")\n\t\treturn\n\t}\n\n\terr = ioutil.WriteFile(staticDir+\"/\"+handler.Filename, fileBytes, 0644)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error saving uploaded file\")\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"Successfully uploaded and saved '%s'\\n\", handler.Filename)\n}\n```\n\n### Step 4: Deleting files\n\nFor deleting files, we'll create an endpoint `/delete` that accepts DELETE requests with the filename to delete.\n\nDefine the handler function for deleting files:\n\n```go\nfunc deleteFile(w http.ResponseWriter, r *http.Request) {\n\tvars := mux.Vars(r)\n\tfilename := vars[\"filename\"]\n\n\tfilePath := staticDir + \"/\" + filename\n\n\t// Check if file exists\n\tif _, err := os.Stat(filePath); os.IsNotExist(err) {\n\t\tw.WriteHeader(http.StatusNotFound)\n\t\tfmt.Fprint(w, \"File not found\")\n\t\treturn\n\t}\n\n\terr := os.Remove(filePath)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error deleting file\")\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, \"Successfully deleted '%s'\\n\", filename)\n}\n```\n\n### Step 5: Setting up routes\n\nNow, set up the routes using Gorilla Mux.\n\n```go\nfunc main() {\n\trouter := mux.NewRouter()\n\n\t// Serve static files\n\trouter.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", staticFilesHandler()))\n\n\t// Upload file endpoint\n\trouter.HandleFunc(\"/upload\", uploadFile).Methods(\"POST\")\n\n\t// Delete file endpoint\n\trouter.HandleFunc(\"/delete/{filename}\", deleteFile).Methods(\"DELETE\")\n\n\t// Start the server\n\tlog.Println(\"Starting server at port 8000\")\n\tlog.Fatal(http.ListenAndServe(\":8000\", router))\n}\n```\n\n### Step 6: Running the server\n\nMake sure you have a `static` directory in the same folder as your `main.go`. You can create it using:\n\n```sh\nmkdir static\n```\n\nNow, run your server:\n\n```sh\ngo run main.go\n```\n\nYour server should now be running at `http://localhost:8000`.\n\n- To serve static files, access `http://localhost:8000/static/yourfile.txt`.\n- To upload a file, send a POST request to `http://localhost:8000/upload` with the file in form-data.\n- To delete a file, send a DELETE request to `http://localhost:8000/delete/filename`.\n\n### Testing the endpoints\n\nYou can use tools like Postman or curl to test these endpoints.\n\n#### Upload Example using curl:\n\n```sh\ncurl -F \"file=@/path/to/yourfile.txt\" http://localhost:8000/upload\n```\n\n#### Delete Example using curl:\n\n```sh\ncurl -X DELETE http://localhost:8000/delete/yourfile.txt\n```\n\nThat's it! You've created a simple HTTP server in Golang that serves static files, allows file uploads, and deletions using Gorilla Mux for routing.\n\n**Note:** This is a basic implementation and may need enhancements for production use, such as error handling, security measures, and concurrency management."
    }
]