[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to insert, delete, and search for elements. Also include a method to print the entire list in both forward and reverse order.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a Python class for a doubly linked list. A doubly linked list is a type of linked list in which each node has pointers to both the next and previous nodes. This allows for efficient traversal in both directions.\n\nFirst, I need to define a class for the nodes that will make up the list. Each node should hold a value and have references to the next and previous nodes.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n```\n\nNext, I'll create the DoublyLinkedList class. This class will have methods to insert, delete, search for elements, and print the list in both forward and reverse order.\n\nI'll start by initializing the list with head and tail pointers.\n\n```python\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n```\n\nNow, let's implement the insert method. I'll allow insertion at the beginning, end, or at a specific position.\n\n```python\n    def insert(self, data, position=0):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        elif position == 0:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n        else:\n            current = self.head\n            current_position = 0\n            while current.next is not None and current_position < position - 1:\n                current = current.next\n                current_position += 1\n            if current.next is None:\n                current.next = new_node\n                new_node.prev = current\n                self.tail = new_node\n            else:\n                new_node.next = current.next\n                current.next.prev = new_node\n                current.next = new_node\n                new_node.prev = current\n```\n\nNext, the delete method. I'll allow deletion by value or by position.\n\n```python\n    def delete(self, key=None, position=None):\n        if key is not None:\n            current = self.head\n            while current is not None:\n                if current.data == key:\n                    if current.prev is not None:\n                        current.prev.next = current.next\n                    else:\n                        self.head = current.next\n                    if current.next is not None:\n                        current.next.prev = current.prev\n                    else:\n                        self.tail = current.prev\n                    return\n                current = current.next\n        elif position is not None:\n            if position == 0:\n                if self.head is not None:\n                    self.head = self.head.next\n                    if self.head is not None:\n                        self.head.prev = None\n                    else:\n                        self.tail = None\n                return\n            current = self.head\n            current_position = 0\n            while current is not None and current_position < position:\n                current = current.next\n                current_position += 1\n            if current is None:\n                return\n            if current.prev is not None:\n                current.prev.next = current.next\n            else:\n                self.head = current.next\n            if current.next is not None:\n                current.next.prev = current.prev\n            else:\n                self.tail = current.prev\n```\n\nNow, the search method to find an element by value.\n\n```python\n    def search(self, key):\n        current = self.head\n        index = 0\n        while current is not None:\n            if current.data == key:\n                return index\n            current = current.next\n            index += 1\n        return -1\n```\n\nFinally, methods to print the list in forward and reverse order.\n\n```python\n    def print_forward(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end=\" \")\n            current = current.next\n        print()\n\n    def print_reverse(self):\n        current = self.tail\n        while current is not None:\n            print(current.data, end=\" \")\n            current = current.prev\n        print()\n```\n\nPutting it all together:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, data, position=0):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        elif position == 0:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n        else:\n            current = self.head\n            current_position = 0\n            while current.next is not None and current_position < position - 1:\n                current = current.next\n                current_position += 1\n            if current.next is None:\n                current.next = new_node\n                new_node.prev = current\n                self.tail = new_node\n            else:\n                new_node.next = current.next\n                current.next.prev = new_node\n                current.next = new_node\n                new_node.prev = current\n\n    def delete(self, key=None, position=None):\n        if key is not None:\n            current = self.head\n            while current is not None:\n                if current.data == key:\n                    if current.prev is not None:\n                        current.prev.next = current.next\n                    else:\n                        self.head = current.next\n                    if current.next is not None:\n                        current.next.prev = current.prev\n                    else:\n                        self.tail = current.prev\n                    return\n                current = current.next\n        elif position is not None:\n            if position == 0:\n                if self.head is not None:\n                    self.head = self.head.next\n                    if self.head is not None:\n                        self.head.prev = None\n                    else:\n                        self.tail = None\n                return\n            current = self.head\n            current_position = 0\n            while current is not None and current_position < position:\n                current = current.next\n                current_position += 1\n            if current is None:\n                return\n            if current.prev is not None:\n                current.prev.next = current.next\n            else:\n                self.head = current.next\n            if current.next is not None:\n                current.next.prev = current.prev\n            else:\n                self.tail = current.prev\n\n    def search(self, key):\n        current = self.head\n        index = 0\n        while current is not None:\n            if current.data == key:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def print_forward(self):\n        current = self.head\n        while current is not None:\n            print(current.data, end=\" \")\n            current = current.next\n        print()\n\n    def print_reverse(self):\n        current = self.tail\n        while current is not None:\n            print(current.data, end=\" \")\n            current = current.prev\n        print()\n```\n\nThis should cover all the required functionalities for a doubly linked list in Python."
    }
]