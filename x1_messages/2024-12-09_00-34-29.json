[
    {
        "role": "user",
        "content": "In JavaScript, write a script that performs an HTTP GET request to retrieve JSON data from a provided URL. Parse this data and print out each object's properties in a formatted manner. Also, provide error handling for cases where the URL is invalid or the server does not respond."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To perform an HTTP GET request in JavaScript, especially in an environment like Node.js, you can use the `https` module. Since you want to handle JSON data, we'll make sure to parse it correctly and display the properties in a nice format. Also, error handling is crucial to manage cases where the URL is invalid or the server doesn't respond.\n\nFirst, make sure you have Node.js installed on your machine. Then, you can create a JavaScript file, say `fetchData.js`, and write the following code:\n\n```javascript\nconst https = require('https');\n\nfunction fetchData(url) {\n    https.get(url, (resp) => {\n        let data = '';\n\n        // A chunk of data has been received.\n        resp.on('data', (chunk) => {\n            data += chunk;\n        });\n\n        // The whole response has been received.\n        resp.on('end', () => {\n            try {\n                const jsonData = JSON.parse(data);\n                if (Array.isArray(jsonData)) {\n                    jsonData.forEach((item, index) => {\n                        console.log(`Object ${index + 1}:`);\n                        for (const key in item) {\n                            console.log(`  ${key}: ${item[key]}`);\n                        }\n                        console.log('-------------------');\n                    });\n                } else {\n                    console.log('Single Object:');\n                    for (const key in jsonData) {\n                        console.log(`  ${key}: ${jsonData[key]}`);\n                    }\n                }\n            } catch (parseErr) {\n                console.error('Error parsing JSON:', parseErr.message);\n            }\n        });\n\n    }).on(\"error\", (err) => {\n        console.error(\"Error: \", err.message);\n    });\n}\n\n// Example usage:\nconst url = 'https://api.example.com/data'; // Replace with your URL\nfetchData(url);\n```\n\n### Explanation:\n\n1. **Importing the Module**:\n   - We use `https` module which is a built-in Node.js module for making HTTP requests.\n\n2. **Making the GET Request**:\n   - `https.get(url, callback)` is used to perform the GET request.\n   - The callback function handles the response.\n\n3. **Handling the Response**:\n   - We collect the response data in chunks and append them to a string.\n   - Once the entire response is received (`'end'` event), we parse the JSON data.\n   - If the data is an array, we iterate through each object and print its properties.\n   - If it's a single object, we print its properties directly.\n\n4. **Error Handling**:\n   - If there's an error during the request (e.g., invalid URL), it's caught in the `'error'` event.\n   - If there's an error parsing the JSON, it's caught in the `try-catch` block.\n\n### How to Use:\n\n- Replace `'https://api.example.com/data'` with the actual URL you want to fetch data from.\n- Run the script using Node.js by executing `node fetchData.js` in your terminal.\n\nThis setup should cover the basic requirements you've outlined, including fetching the data, parsing it, displaying it nicely, and handling potential errors. If you have any specific requirements or need further enhancements, feel free to ask!"
    }
]