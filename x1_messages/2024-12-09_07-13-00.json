[
    {
        "role": "user",
        "content": "Create a Java class implementing a stack data structure using an array, including methods for push, pop, peek, isEmpty, and isFull.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java class that implements a stack data structure using an array. The class includes methods for push, pop, peek, isEmpty, and isFull.\n\n```java\npublic class ArrayStack {\n    private int maxSize;\n    private int top;\n    private int[] stackArray;\n\n    // Constructor to initialize the stack with a given size\n    public ArrayStack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1;\n    }\n\n    // Method to add an element to the stack\n    public void push(int value) {\n        if (isFull()) {\n            System.out.println(\"Stack is full. Cannot push \" + value);\n        } else {\n            stackArray[++top] = value;\n            System.out.println(\"Pushed \" + value + \" onto the stack.\");\n        }\n    }\n\n    // Method to remove and return the top element from the stack\n    public int pop() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot pop.\");\n            return -1; // Assuming -1 as error value\n        } else {\n            int poppedValue = stackArray[top--];\n            System.out.println(\"Popped \" + poppedValue + \" from the stack.\");\n            return poppedValue;\n        }\n    }\n\n    // Method to return the top element without removing it\n    public int peek() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot peek.\");\n            return -1; // Assuming -1 as error value\n        } else {\n            return stackArray[top];\n        }\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return (top == maxSize - 1);\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        ArrayStack stack = new ArrayStack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        stack.push(6); // Should print that stack is full\n\n        System.out.println(\"Top element is: \" + stack.peek());\n\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop(); // Should print that stack is empty\n    }\n}\n```\n\n### Explanation:\n1. **Constructor (`ArrayStack(int size)`):**\n   - Initializes the stack with a given size.\n   - `maxSize` is the maximum capacity of the stack.\n   - `top` is initialized to -1 indicating that the stack is empty.\n   - `stackArray` is the array used to store the stack elements.\n\n2. **Push Operation (`push(int value)`):**\n   - Adds an element to the top of the stack.\n   - Checks if the stack is full before pushing.\n   - If not full, increments `top` and assigns the value to `stackArray[top]`.\n\n3. **Pop Operation (`pop()`):**\n   - Removes and returns the top element of the stack.\n   - Checks if the stack is empty before popping.\n   - If not empty, decrements `top` and returns the previous value at `stackArray[top + 1]`.\n\n4. **Peek Operation (`peek()`):**\n   - Returns the top element without removing it.\n   - Checks if the stack is empty before peeking.\n   - If not empty, returns `stackArray[top]`.\n\n5. **IsEmpty Operation (`isEmpty()`):**\n   - Returns true if the stack is empty (i.e., `top == -1`), otherwise false.\n\n6. **IsFull Operation (`isFull()`):**\n   - Returns true if the stack is full (i.e., `top == maxSize - 1`), otherwise false.\n\n7. **Main Method:**\n   - Demonstrates the usage of the stack with push, pop, and peek operations.\n   - Includes tests for stack full and empty conditions."
    }
]