[
    {
        "role": "user",
        "content": "Write a Node.js script that connects to an Azure Storage account and uploads a local file to a specified container. The script should also list all files in the container and download a specific file by name."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To interact with Azure Storage from a Node.js application, you'll need to use the `@azure/storage-blob` package. This package provides a convenient way to manage blobs (files) in Azure Blob Storage.\n\nFirst, make sure you have Node.js installed on your machine. Then, you can create a new Node.js project and install the required package.\n\n### Step 1: Set up your project\n\n1. **Initialize a new Node.js project:**\n\n   ```bash\n   mkdir azure-storage-example\n   cd azure-storage-example\n   npm init -y\n   ```\n\n2. **Install the Azure Storage Blob package:**\n\n   ```bash\n   npm install @azure/storage-blob\n   ```\n\n### Step 2: Get your Azure Storage credentials\n\nTo connect to your Azure Storage account, you'll need your account connection string or your account name and account key. For security reasons, it's recommended to store these credentials as environment variables.\n\nYou can find your connection string in the Azure Portal under your Storage account's \"Access keys\" section.\n\n### Step 3: Write the script\n\nCreate a new JavaScript file, for example, `storage.js`, and add the following code:\n\n```javascript\nconst { BlobServiceClient } = require(\"@azure/storage-blob\");\n\n// Replace with your Azure Storage connection string\nconst AZURE_STORAGE_CONNECTION_STRING = process.env.AZURE_STORAGE_CONNECTION_STRING;\n\n// Replace with your container name\nconst CONTAINER_NAME = \"your-container-name\";\n\n// Replace with the local file path you want to upload\nconst LOCAL_FILE_PATH = \"path/to/your/local/file.txt\";\n\n// Replace with the name you want to give to the uploaded blob\nconst BLOB_NAME = \"uploaded-file.txt\";\n\n// Replace with the name of the blob you want to download\nconst BLOB_TO_DOWNLOAD = \"uploaded-file.txt\";\n\nasync function main() {\n  // Create a BlobServiceClient from the connection string\n  const blobServiceClient = BlobServiceClient.fromConnectionString(AZURE_STORAGE_CONNECTION_STRING);\n\n  // Get a reference to the container\n  const containerClient = blobServiceClient.getContainerClient(CONTAINER_NAME);\n\n  // Upload a local file to the container\n  await uploadFile(containerClient, LOCAL_FILE_PATH, BLOB_NAME);\n  console.log(`File '${LOCAL_FILE_PATH}' uploaded as '${BLOB_NAME}'`);\n\n  // List all blobs in the container\n  console.log(\"Listing blobs in the container:\");\n  for await (const blob of containerClient.listBlobsFlat()) {\n    console.log(`- ${blob.name}`);\n  }\n\n  // Download a specific blob by name\n  await downloadBlob(containerClient, BLOB_TO_DOWNLOAD);\n  console.log(`Blob '${BLOB_TO_DOWNLOAD}' downloaded.`);\n}\n\nasync function uploadFile(containerClient, localFilePath, blobName) {\n  // Get a block blob client\n  const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n  // Upload data to block blob\n  await blockBlobClient.uploadFile(localFilePath);\n}\n\nasync function downloadBlob(containerClient, blobName) {\n  // Get a blob client\n  const blobClient = containerClient.getBlobClient(blobName);\n\n  // Download the blob's content\n  const response = await blobClient.download(0);\n  const downloadedBytes = await streamToBuffer(response.readableStreamBody);\n  const downloadedContent = Buffer.from(downloadedBytes).toString();\n  console.log(`Downloaded content of '${blobName}':`);\n  console.log(downloadedContent);\n}\n\nfunction streamToBuffer(readableStream) {\n  return new Promise((resolve, reject) => {\n    const chunks = [];\n    readableStream.on(\"data\", (data) => {\n      chunks.push(data instanceof Buffer ? data : Buffer.from(data));\n    });\n    readableStream.on(\"end\", () => {\n      resolve(Buffer.concat(chunks));\n    });\n    readableStream.on(\"error\", reject);\n  });\n}\n\n// Run the main function\nmain().catch((err) => {\n  console.error(\"Error running the script:\", err.message);\n});\n```\n\n### Step 4: Set environment variables\n\nMake sure to set the `AZURE_STORAGE_CONNECTION_STRING` environment variable with your Azure Storage connection string. You can do this in your terminal:\n\n```bash\nexport AZURE_STORAGE_CONNECTION_STRING=\"your-connection-string\"\n```\n\nOr, you can set it in your code, but it's less secure:\n\n```javascript\nconst AZURE_STORAGE_CONNECTION_STRING = \"your-connection-string\";\n```\n\n### Step 5: Run the script\n\nExecute the script using Node.js:\n\n```bash\nnode storage.js\n```\n\nThis script will:\n\n1. Upload a local file to the specified container.\n2. List all files (blobs) in the container.\n3. Download a specific file by name and print its content.\n\nMake sure to replace the placeholders in the script with your actual values.\n\n### Additional Notes\n\n- **Error Handling:** The script includes basic error handling, but you might want to add more robust error management depending on your use case.\n- **Security:** Storing connection strings in environment variables is a better practice than hardcoding them in your script.\n- **Permissions:** Ensure that your Azure Storage account and container have the appropriate permissions set to allow uploads and downloads.\n\nI hope this helps! Let me know if you have any questions or need further assistance."
    }
]