[
    {
        "role": "user",
        "content": "Create a Python script that implements the quicksort algorithm to sort a given list of numbers in ascending order.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that implements the quicksort algorithm to sort a list of numbers in ascending order:\n\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    pivot = arr[len(arr) // 2]\n    left = [x for x in arr if x < pivot]\n    middle = [x for x in arr if x == pivot]\n    right = [x for x in arr if x > pivot]\n    return quicksort(left) + middle + quicksort(right)\n\n# Example usage:\nif __name__ == \"__main__\":\n    numbers = [3,6,8,10,1,2,1]\n    print(\"Original list:\", numbers)\n    sorted_numbers = quicksort(numbers)\n    print(\"Sorted list:\", sorted_numbers)\n```\n\n### Explanation:\n1. **Base Case**: If the list is empty or has only one element, it is already sorted.\n2. **Choosing a Pivot**: Selects the middle element of the list as the pivot.\n3. **Partitioning**:\n   - `left`: Elements less than the pivot.\n   - `middle`: Elements equal to the pivot.\n   - `right`: Elements greater than the pivot.\n4. **Recursive Sorting**: Recursively sorts the `left` and `right` partitions and combines them with the `middle` partition.\n\nThis implementation is efficient and easy to understand, making it a good choice for sorting lists using the quicksort algorithm."
    }
]