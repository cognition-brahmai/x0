[
    {
        "role": "user",
        "content": "Write a Python script that interacts with a MariaDB database to store and retrieve information about books. The script should support adding new books, searching for books by title or author, and listing all available books. Use appropriate SQL queries and establish a connection using a Python library.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a Python script that interacts with a MariaDB database to manage a collection of books. We'll cover setting up the database connection, creating a table for books, adding new books, searching for books by title or author, and listing all books.\n\nFirst, make sure you have MariaDB installed and running on your system. Also, install the `mysql-connector-python` package, which allows Python to connect to MariaDB databases. You can install it using pip:\n\n```bash\npip install mysql-connector-python\n```\n\nNow, let's start by setting up the database connection. You'll need to know the host, user, password, and database name. For this example, I'll assume the database is running locally, the username is 'your_username', the password is 'your_password', and the database name is 'book_db'.\n\nHere's how you can establish a connection:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host=\"localhost\",\n        user=\"your_username\",\n        password=\"your_password\",\n        database=\"book_db\"\n    )\n    return connection\n```\n\nNext, we need to create a table to store the books. Let's create a table named 'books' with columns for id, title, and author.\n\n```python\ndef create_table(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS books (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            title VARCHAR(255) NOT NULL,\n            author VARCHAR(255) NOT NULL\n        )\n    \"\"\")\n    connection.commit()\n```\n\nNow, let's write a function to add a new book to the database.\n\n```python\ndef add_book(connection, title, author):\n    cursor = connection.cursor()\n    query = \"INSERT INTO books (title, author) VALUES (%s, %s)\"\n    cursor.execute(query, (title, author))\n    connection.commit()\n    print(\"Book added successfully.\")\n```\n\nFor searching books by title or author, we'll create a function that takes a search term and a field to search in.\n\n```python\ndef search_books(connection, field, term):\n    cursor = connection.cursor()\n    query = f\"SELECT * FROM books WHERE {field} LIKE %s\"\n    cursor.execute(query, (f\"%{term}%\",))\n    results = cursor.fetchall()\n    return results\n```\n\nTo list all books, we'll write another function.\n\n```python\ndef list_all_books(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"SELECT * FROM books\")\n    results = cursor.fetchall()\n    return results\n```\n\nFinally, let's put it all together in a simple script that allows the user to choose actions.\n\n```python\ndef main():\n    connection = create_connection()\n    create_table(connection)\n    \n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Add a book\")\n        print(\"2. Search for books by title\")\n        print(\"3. Search for books by author\")\n        print(\"4. List all books\")\n        print(\"5. Exit\")\n        \n        choice = input(\"Enter your choice: \")\n        \n        if choice == \"1\":\n            title = input(\"Enter book title: \")\n            author = input(\"Enter book author: \")\n            add_book(connection, title, author)\n        elif choice == \"2\":\n            term = input(\"Enter title to search: \")\n            results = search_books(connection, \"title\", term)\n            for row in results:\n                print(row)\n        elif choice == \"3\":\n            term = input(\"Enter author to search: \")\n            results = search_books(connection, \"author\", term)\n            for row in results:\n                print(row)\n        elif choice == \"4\":\n            results = list_all_books(connection)\n            for row in results:\n                print(row)\n        elif choice == \"5\":\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n    \n    connection.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script provides a simple command-line interface to manage the book database. You can add books, search by title or author, list all books, and exit the program.\n\nRemember to replace 'your_username' and 'your_password' with your actual MariaDB credentials. Also, ensure that the 'book_db' database exists; if not, create it before running the script.\n\nThat's it! You now have a basic Python script to interact with a MariaDB database for managing a book collection."
    }
]