[
    {
        "role": "user",
        "content": "Create a Python script to implement a doubly linked list data structure with methods for adding nodes at the beginning, end, and middle of the list, as well as deleting nodes by value."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Let's create a Python script that implements a doubly linked list with the specified methods.\n\nFirst, we need to understand what a doubly linked list is. In a doubly linked list, each node contains a reference to the next node as well as the previous node. This allows us to traverse the list in both directions.\n\nHere's a step-by-step plan:\n\n1. **Define the Node class**: Each node will have data, a reference to the next node, and a reference to the previous node.\n\n2. **Define the DoublyLinkedList class**: This class will manage the nodes and provide methods to add nodes at the beginning, end, and middle of the list, as well as delete nodes by value.\n\n3. **Implement the add_begin method**: This method will add a new node at the beginning of the list.\n\n4. **Implement the add_end method**: This method will add a new node at the end of the list.\n\n5. **Implement the add_after method**: This method will add a new node after a specified node.\n\n6. **Implement the delete_by_value method**: This method will delete the first node that matches the given value.\n\n7. **Implement a method to display the list**: This will help us verify that our operations are working correctly.\n\nLet's start by defining the Node class.\n\n## Final Solution\nTo implement a doubly linked list in Python, we need to define a `Node` class and a `DoublyLinkedList` class. The `Node` class will represent each element in the list, containing data and references to the next and previous nodes. The `DoublyLinkedList` class will manage these nodes and provide methods to add and delete nodes at different positions.\n\n### Approach\n\n1. **Node Class**:\n    - Each node has attributes for data, the next node, and the previous node.\n\n2. **DoublyLinkedList Class**:\n    - Contains methods to add nodes at the beginning (`add_begin`), at the end (`add_end`), after a specific node (`add_after`), and to delete a node by value (`delete_by_value`).\n    - A `display` method is provided to print the list for verification.\n\n3. **add_begin Method**:\n    - Creates a new node and sets its next to the current head.\n    - Sets the previous of the current head to the new node.\n    - Updates the head to the new node.\n\n4. **add_end Method**:\n    - Traverses to the end of the list.\n    - Appends a new node after the last node.\n\n5. **add_after Method**:\n    - Finds the node after which to insert the new node.\n    - Adjusts the next and previous references accordingly.\n\n6. **delete_by_value Method**:\n    - Finds the node with the specified value.\n    - Adjusts the next and previous references to remove the node.\n\n### Solution Code\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_begin(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n            new_node.prev = current\n\n    def add_after(self, target_data, data):\n        new_node = Node(data)\n        if self.head is None:\n            print(\"List is empty.\")\n            return\n        current = self.head\n        while current:\n            if current.data == target_data:\n                if current.next:\n                    new_node.next = current.next\n                    current.next.prev = new_node\n                    current.next = new_node\n                    new_node.prev = current\n                else:\n                    current.next = new_node\n                    new_node.prev = current\n                return\n            current = current.next\n        print(f\"Node with data {target_data} not found.\")\n\n    def delete_by_value(self, data):\n        if self.head is None:\n            print(\"List is empty.\")\n            return\n        if self.head.data == data:\n            if self.head.next:\n                self.head = self.head.next\n                self.head.prev = None\n            else:\n                self.head = None\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == data:\n                if current.next.next:\n                    current.next = current.next.next\n                    current.next.prev = current\n                else:\n                    current.next = None\n                return\n            current = current.next\n        print(f\"Node with data {data} not found.\")\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.add_end(10)\n    dll.add_end(20)\n    dll.add_begin(5)\n    dll.add_after(10, 15)\n    dll.display()  # Output: 5 <-> 10 <-> 15 <-> 20 <-> None\n    dll.delete_by_value(15)\n    dll.display()  # Output: 5 <-> 10 <-> 20 <-> None\n```\n\n### Explanation\n\n- **Node Class**: Initializes a node with data and optional references to next and previous nodes.\n- **DoublyLinkedList Class**: Manages the nodes with methods to add and delete nodes.\n  - `add_begin`: Adds a node at the start.\n  - `add_end`: Adds a node at the end.\n  - `add_after`: Inserts a node after a specified node.\n  - `delete_by_value`: Removes the first node that matches the given value.\n  - `display`: Prints the list to verify operations.\n\nThis implementation ensures that all operations maintain the integrity of the doubly linked list's references."
    }
]