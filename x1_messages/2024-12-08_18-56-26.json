[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add elements at the beginning, end, and at a specific position in the list. Also include a method to display the contents of the list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Python class for a singly linked list with methods to add elements at the beginning, end, and at a specific position in the list. I've also included a method to display the contents of the list.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if position == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_end(1)\n    sll.add_beginning(2)\n    sll.add_at_position(1, 3)\n    sll.display()\n```\n\nThis code defines a `Node` class to represent each element in the linked list and a `SinglyLinkedList` class that manages the nodes. The `SinglyLinkedList` class has methods to add nodes at the beginning (`add_beginning`), at the end (`add_end`), and at a specific position (`add_at_position`). The `display` method prints the elements of the list in order.\n\nIn the example usage, we create a singly linked list, add elements at different positions, and display the list to verify the contents."
    }
]