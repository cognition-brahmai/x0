[
    {
        "role": "user",
        "content": "Write a Python script that connects to an FTP server, uploads a specified local file to the server, and then downloads the same file from the server to a different local directory. The script should take command-line arguments for the FTP server address, username, password, and paths of the local files.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll help you write a Python script that does that. We'll use the `ftplib` module for FTP operations and `argparse` to handle command-line arguments.\n\nFirst, make sure you have Python installed on your system. Then, you can create a new Python file, say `ftp_upload_download.py`.\n\nWe'll start by importing the necessary modules:\n\n```python\nimport os\nimport argparse\nfrom ftplib import FTP\n```\n\nNext, we'll set up the argument parser to accept the required command-line arguments:\n\n```python\nparser = argparse.ArgumentParser(description='Upload and download a file via FTP.')\nparser.add_argument('ftp_server', help='FTP server address')\nparser.add_argument('username', help='FTP username')\nparser.add_argument('password', help='FTP password')\nparser.add_argument('local_upload_file', help='Path to the local file to upload')\nparser.add_argument('local_download_dir', help='Local directory to download the file to')\nargs = parser.parse_args()\n```\n\nNow, we'll define a function to connect to the FTP server:\n\n```python\ndef connect_ftp(server, user, password):\n    ftp = FTP(server)\n    ftp.login(user, password)\n    return ftp\n```\n\nThen, we'll write a function to upload a file to the FTP server:\n\n```python\ndef upload_file(ftp, local_file_path):\n    with open(local_file_path, 'rb') as file:\n        ftp.storbinary(f'STOR {os.path.basename(local_file_path)}', file)\n```\n\nSimilarly, we'll create a function to download the file from the FTP server to a specified local directory:\n\n```python\ndef download_file(ftp, local_download_dir):\n    os.makedirs(local_download_dir, exist_ok=True)\n    with open(os.path.join(local_download_dir, os.path.basename(args.local_upload_file)), 'wb') as file:\n        ftp.retrbinary(f'RETR {os.path.basename(args.local_upload_file)}', file.write)\n```\n\nFinally, we'll write the main part of the script that ties everything together:\n\n```python\ndef main():\n    ftp = connect_ftp(args.ftp_server, args.username, args.password)\n    upload_file(ftp, args.local_upload_file)\n    download_file(ftp, args.local_download_dir)\n    ftp.quit()\n\nif __name__ == '__main__':\n    main()\n```\n\nThat's it! Now, you can run this script from the command line by providing the required arguments. For example:\n\n```bash\npython ftp_upload_download.py ftp.example.com user password /path/to/local/file /path/to/download/directory\n```\n\nThis script will connect to the specified FTP server, upload the local file, download it back to the specified directory, and then logout from the FTP server.\n\n**Note:** Make sure that the local upload file exists and that you have permission to read it and write to the download directory. Also, be cautious with handling passwords in scripts; consider using environment variables or other secure methods for sensitive information."
    }
]