[
    {
        "role": "user",
        "content": "Develop a Python script that connects to a MySQL database and performs CRUD (Create, Read, Update, Delete) operations on a table named \"employees\". Use proper error handling and close connections after use.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that connects to a MySQL database and performs CRUD operations on a table named \"employees\". We'll make sure to include proper error handling and ensure that connections are closed after use.\n\nFirst, you'll need to have MySQL installed and a database set up. You'll also need the `mysql-connector-python` package installed in your Python environment. You can install it using pip if you haven't already:\n\n```bash\npip install mysql-connector-python\n```\n\nFor this example, let's assume you have a MySQL database set up with a database named `company`, and within it, a table named `employees` with the following structure:\n\n```sql\nCREATE TABLE employees (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    first_name VARCHAR(100),\n    last_name VARCHAR(100),\n    position VARCHAR(100),\n    salary DECIMAL(10, 2)\n);\n```\n\nOur Python script will perform the following operations:\n\n1. **Create** (Insert a new employee)\n2. **Read** (Select and display all employees)\n3. **Update** (Update an employee's information)\n4. **Delete** (Delete an employee by ID)\n\nWe'll wrap each operation in a function for clarity and reusability.\n\n## Final Solution\nTo create a Python script that connects to a MySQL database and performs CRUD operations on a table named \"employees\", follow these steps:\n\n### Solution Code\n\n```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection():\n    try:\n        connection = mysql.connector.connect(\n            host='localhost',\n            database='company',\n            user='your_username',\n            password='your_password'\n        )\n        if connection.is_connected():\n            print(\"Successfully connected to the database\")\n            return connection\n    except Error as e:\n        print(f\"Error: {e}\")\n        return None\n\ndef close_connection(connection):\n    if connection.is_connected():\n        connection.close()\n        print(\"Connection closed\")\n\ndef create_employee(connection, employee):\n    query = \"INSERT INTO employees(first_name, last_name, position, salary) VALUES(%s, %s, %s, %s)\"\n    try:\n        cursor = connection.cursor()\n        cursor.execute(query, employee)\n        connection.commit()\n        print(\"Employee added successfully\")\n    except Error as e:\n        print(f\"Error: {e}\")\n\ndef read_employees(connection):\n    query = \"SELECT * FROM employees\"\n    try:\n        cursor = connection.cursor()\n        cursor.execute(query)\n        rows = cursor.fetchall()\n        for row in rows:\n            print(row)\n    except Error as e:\n        print(f\"Error: {e}\")\n\ndef update_employee(connection, employee_id, new_position, new_salary):\n    query = \"UPDATE employees SET position=%s, salary=%s WHERE id=%s\"\n    try:\n        cursor = connection.cursor()\n        cursor.execute(query, (new_position, new_salary, employee_id))\n        connection.commit()\n        print(\"Employee updated successfully\")\n    except Error as e:\n        print(f\"Error: {e}\")\n\ndef delete_employee(connection, employee_id):\n    query = \"DELETE FROM employees WHERE id=%s\"\n    try:\n        cursor = connection.cursor()\n        cursor.execute(query, (employee_id,))\n        connection.commit()\n        print(\"Employee deleted successfully\")\n    except Error as e:\n        print(f\"Error: {e}\")\n\ndef main():\n    connection = create_connection()\n    if connection is not None:\n        # Create a new employee\n        new_employee = (\"John\", \"Doe\", \"Software Engineer\", 80000.00)\n        create_employee(connection, new_employee)\n\n        # Read all employees\n        print(\"\\nAll employees:\")\n        read_employees(connection)\n\n        # Update an employee\n        update_employee(connection, 1, \"Senior Software Engineer\", 90000.00)\n\n        # Delete an employee\n        delete_employee(connection, 2)\n\n        close_connection(connection)\n    else:\n        print(\"Failed to connect to the database\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **create_connection**: Establishes a connection to the MySQL database using provided credentials.\n2. **close_connection**: Closes the database connection if it is still open.\n3. **create_employee**: Inserts a new employee into the `employees` table.\n4. **read_employees**: Retrieves and prints all records from the `employees` table.\n5. **update_employee**: Updates the position and salary of an employee based on their ID.\n6. **delete_employee**: Deletes an employee from the table based on their ID.\n7. **main**: Orchestrates the database operations by calling the above functions in sequence.\n\nEnsure you replace `'your_username'` and `'your_password'` with your actual database credentials. This script provides a basic framework for CRUD operations and includes error handling to manage potential issues during database interactions."
    }
]