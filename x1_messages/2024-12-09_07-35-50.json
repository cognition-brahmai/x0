[
    {
        "role": "user",
        "content": "Develop a Python script that connects to a Cassandra database, creates a table with columns for name, age, and email, and inserts sample data into the table.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To connect to a Cassandra database using Python, you'll need to use the `cassandra-driver` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install cassandra-driver\n```\n\nOnce you have the package installed, you can proceed to write the Python script. Below is an example of how you can connect to a Cassandra database, create a keyspace (if it doesn't exist), create a table with the specified columns, and insert some sample data.\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\n# Connection parameters\ncontact_points = ['127.0.0.1']  # Replace with your Cassandra node's IP\nport = 9042  # Default Cassandra port\nusername = 'cassandra'  # Default username\npassword = 'cassandra'  # Default password\n\n# Create authentication provider\nauth_provider = PlainTextAuthProvider(username=username, password=password)\n\n# Connect to the cluster\ncluster = Cluster(contact_points=contact_points, port=port, auth_provider=auth_provider)\nsession = cluster.connect()\n\n# Create keyspace if it doesn't exist\nkeyspace = \"mykeyspace\"\nsession.execute(f\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS {keyspace}\n    WITH replication = {{'class': 'SimpleStrategy', 'replication_factor': 1}}\n\"\"\")\n\n# Set keyspace for the session\nsession.set_keyspace(keyspace)\n\n# Create table\ntable_name = \"users\"\nsession.execute(f\"\"\"\n    CREATE TABLE IF NOT EXISTS {table_name} (\n        name text PRIMARY KEY,\n        age int,\n        email text\n    )\n\"\"\")\n\n# Insert sample data\nsample_data = [\n    (\"Alice\", 30, \"alice@example.com\"),\n    (\"Bob\", 25, \"bob@example.com\"),\n    (\"Charlie\", 35, \"charlie@example.com\")\n]\n\nfor name, age, email in sample_data:\n    session.execute(f\"\"\"\n        INSERT INTO {table_name} (name, age, email)\n        VALUES (%s, %s, %s)\n    \"\"\", (name, age, email))\n\nprint(\"Sample data inserted successfully.\")\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation:\n\n1. **Connecting to Cassandra:**\n   - We use the `Cluster` class from the `cassandra.cluster` module to connect to the Cassandra cluster.\n   - We provide the contact points (IP addresses of Cassandra nodes) and the port number.\n   - We also set up authentication using `PlainTextAuthProvider` if your Cassandra instance requires authentication.\n\n2. **Creating a Keyspace:**\n   - A keyspace is a top-level container for tables in Cassandra.\n   - We use the `CREATE KEYSPACE IF NOT EXISTS` CQL command to create a keyspace named `mykeyspace` with a simple replication strategy and a replication factor of 1.\n\n3. **Creating a Table:**\n   - Within the specified keyspace, we create a table named `users` with columns for `name`, `age`, and `email`.\n   - The `name` column is set as the primary key.\n\n4. **Inserting Sample Data:**\n   - We define a list of tuples containing sample data for the users.\n   - We use a parameterized CQL `INSERT` statement to add each user's data to the table. This helps prevent SQL injection attacks.\n\n5. **Closing the Connection:**\n   - Finally, we shut down the cluster connection to free up resources.\n\nMake sure to adjust the connection parameters (`contact_points`, `port`, `username`, `password`) according to your Cassandra setup.\n\nThis script provides a basic example of interacting with a Cassandra database using Python. Depending on your requirements, you might need to handle exceptions, manage sessions differently, or perform more complex operations."
    }
]