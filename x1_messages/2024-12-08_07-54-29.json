[
    {
        "role": "user",
        "content": "Create a Python script that connects to a MySQL database and retrieves all records from a table named \"employees\" with columns \"id\", \"first_name\", \"last_name\", \"email\", and \"salary\". Calculate the average salary of all employees and display it along with the employee details.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that connects to a MySQL database and retrieves data from an \"employees\" table. Then, I need to calculate the average salary of all employees and display it along with the employee details. Sounds straightforward, but I need to make sure I cover all the steps correctly.\n\nFirst things first, I need to set up the connection to the MySQL database. For that, I'll need the MySQL connector for Python. I think it's called `mysql-connector-python`. I should check if it's installed. If not, I'll need to install it using pip.\n\nSo, to install it, I would run:\n\n```bash\npip install mysql-connector-python\n```\n\nAssuming it's installed, I can proceed.\n\nNext, I need to establish a connection to the database. To do that, I'll need some connection parameters like host, database name, user, and password. For the sake of this example, I'll hardcode these values, but in a real-world scenario, it's better to use environment variables or some config file to store sensitive information.\n\nHere's how I might set up the connection:\n\n```python\nimport mysql.connector\n\n# Database connection parameters\nconfig = {\n    'host': 'localhost',\n    'database': 'your_database',\n    'user': 'your_username',\n    'password': 'your_password'\n}\n\n# Establishing the connection\ntry:\n    conn = mysql.connector.connect(**config)\n    print(\"Connection established\")\nexcept mysql.connector.Error as err:\n    print(f\"Error connecting to MySQL Platform: {err}\")\n```\n\nMake sure to replace `'localhost'`, `'your_database'`, `'your_username'`, and `'your_password'` with actual values.\n\nOnce the connection is established, I need to retrieve all records from the \"employees\" table. The table has columns: \"id\", \"first_name\", \"last_name\", \"email\", and \"salary\".\n\nI'll create a cursor object to execute SQL queries.\n\n```python\n# Creating a cursor object using the connection\ncursor = conn.cursor()\n\n# SQL query to retrieve all records from employees table\nquery = \"SELECT id, first_name, last_name, email, salary FROM employees\"\n\ntry:\n    cursor.execute(query)\n    records = cursor.fetchall()\n    print(\"Data retrieved successfully\")\nexcept mysql.connector.Error as err:\n    print(f\"Error: {err}\")\n```\n\nNow, I have all the employee records in the `records` variable. I need to calculate the average salary. To do that, I'll sum up all the salaries and divide by the number of employees.\n\n```python\n# Calculating average salary\ntotal_salary = 0\nnum_employees = 0\n\nfor record in records:\n    total_salary += record[4]  # salary is at index 4\n    num_employees += 1\n\naverage_salary = total_salary / num_employees if num_employees > 0 else 0\n```\n\nAfter calculating the average salary, I need to display it along with the employee details.\n\nI can print the employee details first and then the average salary.\n\n```python\n# Display employee details\nprint(\"\\nEmployee Details:\")\nfor record in records:\n    print(f\"ID: {record[0]}, Name: {record[1]} {record[2]}, Email: {record[3]}, Salary: {record[4]}\")\n\n# Display average salary\nprint(f\"\\nAverage Salary: {average_salary}\")\n```\n\nDon't forget to close the cursor and connection once you're done to free up resources.\n\n```python\n# Closing the cursor and connection\ncursor.close()\nconn.close()\nprint(\"MySQL connection is closed\")\n```\n\nPutting it all together, the complete script would look like this:\n\n```python\nimport mysql.connector\n\n# Database connection parameters\nconfig = {\n    'host': 'localhost',\n    'database': 'your_database',\n    'user': 'your_username',\n    'password': 'your_password'\n}\n\ntry:\n    conn = mysql.connector.connect(**config)\n    print(\"Connection established\")\nexcept mysql.connector.Error as err:\n    print(f\"Error connecting to MySQL Platform: {err}\")\n    exit(1)\n\ncursor = conn.cursor()\n\n# SQL query to retrieve all records from employees table\nquery = \"SELECT id, first_name, last_name, email, salary FROM employees\"\n\ntry:\n    cursor.execute(query)\n    records = cursor.fetchall()\n    print(\"Data retrieved successfully\")\nexcept mysql.connector.Error as err:\n    print(f\"Error: {err}\")\n    cursor.close()\n    conn.close()\n    exit(1)\n\n# Calculating average salary\ntotal_salary = 0\nnum_employees = 0\n\nfor record in records:\n    total_salary += record[4]  # salary is at index 4\n    num_employees += 1\n\naverage_salary = total_salary / num_employees if num_employees > 0 else 0\n\n# Display employee details\nprint(\"\\nEmployee Details:\")\nfor record in records:\n    print(f\"ID: {record[0]}, Name: {record[1]} {record[2]}, Email: {record[3]}, Salary: {record[4]}\")\n\n# Display average salary\nprint(f\"\\nAverage Salary: {average_salary}\")\n\n# Closing the cursor and connection\ncursor.close()\nconn.close()\nprint(\"MySQL connection is closed\")\n```\n\nMake sure to handle exceptions properly and ensure that resources are cleaned up even if errors occur. You might want to use a `finally` block or context managers to handle this more elegantly.\n\nAlso, consider sanitizing inputs and using parameterized queries to prevent SQL injection, although in this simple example, it's not demonstrated since the query is static.\n\nThat should do it for now. If there are any specific requirements or additional features needed, I can adjust the script accordingly."
    }
]