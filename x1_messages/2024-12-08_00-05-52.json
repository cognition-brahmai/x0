[
    {
        "role": "user",
        "content": "Write a Java program that implements the merge sort algorithm. The program should accept an array of integers as input and return the sorted array as output.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, calls itself for the two halves, and then merges the two sorted halves. The merge() function is used for merging two halves.\n\nHere's a simple implementation of the merge sort algorithm in Java:\n\n```java\npublic class MergeSort {\n\n    // Merges two subarrays of arr[].\n    // First subarray is arr[l..m]\n    // Second subarray is arr[m+1..r]\n    void merge(int arr[], int l, int m, int r) {\n        // Find sizes of two subarrays to be merged\n        int n1 = m - l + 1;\n        int n2 = r - m;\n\n        /* Create temp arrays */\n        int L[] = new int[n1];\n        int R[] = new int[n2];\n\n        /*Copy data to temp arrays*/\n        for (int i = 0; i < n1; ++i)\n            L[i] = arr[l + i];\n        for (int j = 0; j < n2; ++j)\n            R[j] = arr[m + 1 + j];\n\n        /* Merge the temp arrays */\n\n        // Initial indexes of first and second subarrays\n        int i = 0, j = 0;\n\n        // Initial index of merged subarray array\n        int k = l;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        /* Copy remaining elements of L[] if any */\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        /* Copy remaining elements of R[] if any */\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    // Main function that sorts arr[l..r] using merge()\n    void sort(int arr[], int l, int r) {\n        if (l < r) {\n            // Find the middle point\n            int m = (l + r) / 2;\n\n            // Sort first and second halves\n            sort(arr, l, m);\n            sort(arr, m + 1, r);\n\n            // Merge the sorted halves\n            merge(arr, l, m, r);\n        }\n    }\n\n    // A utility function to print array of size n\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i < n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver method\n    public static void main(String args[]) {\n        int arr[] = {38, 27, 43, 3, 9, 82, 10};\n\n        System.out.println(\"Given Array\");\n        printArray(arr);\n\n        MergeSort ms = new MergeSort();\n        ms.sort(arr, 0, arr.length - 1);\n\n        System.out.println(\"\\nSorted array\");\n        printArray(arr);\n    }\n}\n```\n\n### Explanation:\n\n1. **merge** function:\n   - This function assumes that the subarrays `arr[l..m]` and `arr[m+1..r]` are sorted and merges them into a single sorted subarray in `arr[l..r]`.\n   - It creates temporary arrays `L` and `R` to hold the two halves.\n   - It then merges these two halves back into the original array `arr` in sorted order.\n\n2. **sort** function:\n   - This is the recursive function that divides the array into two halves, sorts them separately, and then merges them.\n   - It uses the formula `m = (l + r) / 2` to find the midpoint.\n   - It recursively calls itself for the two halves and then calls `merge` to merge them.\n\n3. **printArray** function:\n   - A utility function to print the elements of the array.\n\n4. **main** method:\n   - Demonstrates the usage of the `MergeSort` class by sorting an example array and printing the sorted result.\n\nThis program will sort the given array using the merge sort algorithm and print both the original and the sorted arrays."
    }
]