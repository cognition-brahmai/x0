[
    {
        "role": "user",
        "content": "Design a JavaScript or TypeScript module for interacting with Azure Blob Storage. The module should support uploading a file, downloading a file, listing blobs in a container, and deleting a blob.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a JavaScript/TypeScript module to interact with Azure Blob Storage. The module needs to support uploading a file, downloading a file, listing blobs in a container, and deleting a blob. I'll use the Azure SDK for JavaScript to handle the interactions with Azure Blob Storage.\n\nFirst, I need to set up the project. I'll create a new TypeScript project since TypeScript is a superset of JavaScript and provides better type safety.\n\n1. **Initialize the project:**\n\n   ```bash\n   mkdir azure-blob-storage-module\n   cd azure-blob-storage-module\n   npm init -y\n   npm install @azure/storage-blob typescript @types/node ts-node --save\n   ```\n\n2. **Create a `tsconfig.json` file:**\n\n   ```json\n   {\n     \"compilerOptions\": {\n       \"module\": \"commonjs\",\n       \"target\": \"es6\",\n       \"outDir\": \"dist\",\n       \"strict\": true,\n       \"esModuleInterop\": true\n     },\n     \"include\": [\"src/**/*.ts\"],\n     \"exclude\": [\"node_modules\"]\n   }\n   ```\n\n3. **Set up the project structure:**\n\n   ```\n   azure-blob-storage-module/\n   \u251c\u2500\u2500 src/\n   \u2502   \u2514\u2500\u2500 blobStorage.ts\n   \u251c\u2500\u2500 test/\n   \u2502   \u2514\u2500\u2500 blobStorage.test.ts\n   \u251c\u2500\u2500 tsconfig.json\n   \u251c\u2500\u2500 package.json\n   \u2514\u2500\u2500 node_modules/\n   ```\n\n4. **Implement the Blob Storage module in `src/blobStorage.ts`:**\n\n   ```typescript\n   import { BlobServiceClient, StorageSharedKeyCredential } from '@azure/storage-blob';\n\n   class AzureBlobStorage {\n     private blobServiceClient: BlobServiceClient;\n\n     constructor(private connectionString: string) {\n       const sharedKeyCredential = new StorageSharedKeyCredential(\n         connectionString.accountName,\n         connectionString.accountKey\n       );\n       this.blobServiceClient = new BlobServiceClient(\n         `https://${connectionString.accountName}.blob.core.windows.net`,\n         sharedKeyCredential\n       );\n     }\n\n     async uploadBlob(containerName: string, blobName: string, filePath: string): Promise<void> {\n       const containerClient = this.blobServiceClient.getContainerClient(containerName);\n       const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n       await blockBlobClient.uploadFile(filePath);\n     }\n\n     async downloadBlob(containerName: string, blobName: string, downloadPath: string): Promise<void> {\n       const containerClient = this.blobServiceClient.getContainerClient(containerName);\n       const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n       const response = await blockBlobClient.download();\n       const readableStream = response.readableStreamBody;\n       if (readableStream) {\n         const writeStream = fs.createWriteStream(downloadPath);\n         readableStream.pipe(writeStream);\n       }\n     }\n\n     async listBlobs(containerName: string): Promise<string[]> {\n       const containerClient = this.blobServiceClient.getContainerClient(containerName);\n       const blobList: string[] = [];\n       for await (const blob of containerClient.listBlobsFlat()) {\n         blobList.push(blob.name);\n       }\n       return blobList;\n     }\n\n     async deleteBlob(containerName: string, blobName: string): Promise<void> {\n       const containerClient = this.blobServiceClient.getContainerClient(containerName);\n       const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n       await blockBlobClient.delete();\n     }\n   }\n\n   export default AzureBlobStorage;\n   ```\n\n5. **Write tests for the module in `test/blobStorage.test.ts`:**\n\n   ```typescript\n   import AzureBlobStorage from '../src/blobStorage';\n\n   describe('AzureBlobStorage', () => {\n     const connectionString = {\n       accountName: 'your_account_name',\n       accountKey: 'your_account_key'\n     };\n     const containerName = 'your_container_name';\n     const blobStorage = new AzureBlobStorage(connectionString);\n\n     it('uploads a blob', async () => {\n       const blobName = 'test-upload.txt';\n       const filePath = './test/upload.txt';\n       await blobStorage.uploadBlob(containerName, blobName, filePath);\n       // Add assertion to check if the blob exists\n     });\n\n     it('downloads a blob', async () => {\n       const blobName = 'test-download.txt';\n       const downloadPath = './test/downloaded.txt';\n       await blobStorage.downloadBlob(containerName, blobName, downloadPath);\n       // Add assertion to check if the file was downloaded correctly\n     });\n\n     it('lists blobs in a container', async () => {\n       const blobs = await blobStorage.listBlobs(containerName);\n       expect(blobs).toBeDefined();\n       expect(Array.isArray(blobs)).toBe(true);\n     });\n\n     it('deletes a blob', async () => {\n       const blobName = 'test-delete.txt';\n       await blobStorage.deleteBlob(containerName, blobName);\n       // Add assertion to check if the blob was deleted\n     });\n   });\n   ```\n\n6. **Run the tests:**\n\n   ```bash\n   npx ts-node ./test/blobStorage.test.ts\n   ```\n\nThis is a basic implementation of an Azure Blob Storage module in TypeScript. You can expand upon this by adding more features, error handling, and better testing. Additionally, consider using environment variables to store sensitive information like the connection string."
    }
]