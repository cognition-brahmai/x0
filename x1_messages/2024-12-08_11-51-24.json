[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified index, as well as deleting elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python program that implements a singly linked list data structure. It includes methods for adding elements at the beginning, end, and specified index, as well as deleting elements by value or index.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def append(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def prepend(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert(self, index, data):\n        if index == 0:\n            self.prepend(data)\n        else:\n            new_node = Node(data)\n            current = self.head\n            cnt = 0\n            while current and cnt < index - 1:\n                current = current.next\n                cnt += 1\n            if current:\n                new_node.next = current.next\n                current.next = new_node\n            else:\n                raise IndexError(\"Index out of range\")\n\n    def delete_by_value(self, value):\n        if self.is_empty():\n            raise ValueError(\"List is empty\")\n        if self.head.data == value:\n            self.head = self.head.next\n        else:\n            current = self.head\n            while current.next and current.next.data != value:\n                current = current.next\n            if current.next:\n                current.next = current.next.next\n            else:\n                raise ValueError(\"Value not found in list\")\n\n    def delete_by_index(self, index):\n        if self.is_empty():\n            raise IndexError(\"List is empty\")\n        if index == 0:\n            self.head = self.head.next\n        else:\n            current = self.head\n            cnt = 0\n            while current and cnt < index - 1:\n                current = current.next\n                cnt += 1\n            if current and current.next:\n                current.next = current.next.next\n            else:\n                raise IndexError(\"Index out of range\")\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.append(1)\n    sll.append(2)\n    sll.append(3)\n    sll.prepend(0)\n    sll.insert(2, 1.5)\n    sll.display()  # Output: 0 -> 1 -> 1.5 -> 2 -> 3\n    sll.delete_by_value(1.5)\n    sll.display()  # Output: 0 -> 1 -> 2 -> 3\n    sll.delete_by_index(0)\n    sll.display()  # Output: 1 -> 2 -> 3\n```\n\n### Explanation:\n\n1. **Node Class**: Represents a single node in the linked list with `data` and `next` attributes.\n2. **SinglyLinkedList Class**:\n   - **__init__**: Initializes the head of the list.\n   - **is_empty**: Checks if the list is empty.\n   - **append**: Adds an element to the end of the list.\n   - **prepend**: Adds an element to the beginning of the list.\n   - **insert**: Inserts an element at a specified index.\n   - **delete_by_value**: Deletes the first occurrence of a specified value.\n   - **delete_by_index**: Deletes the element at a specified index.\n   - **display**: Prints the elements of the list.\n\nThis implementation covers the basic operations needed for a singly linked list, including error handling for invalid indices and values."
    }
]