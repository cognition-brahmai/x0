[
    {
        "role": "user",
        "content": "Implement a C++ class called \"Matrix\" that represents a 2D matrix of integers. The class should have methods for addition, subtraction, and multiplication of matrices, along with a method to print the matrix in a readable format. Ensure proper error handling for incompatible matrix operations."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a `Matrix` class in C++ that handles basic operations like addition, subtraction, and multiplication of integer matrices. It also includes a method to print the matrix in a readable format and handles errors for incompatible operations.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Matrix {\nprivate:\n    std::vector<std::vector<int>> data;\n    size_t rows, cols;\n\npublic:\n    // Constructor to initialize the matrix with given dimensions\n    Matrix(size_t r, size_t c) : rows(r), cols(c), data(r, std::vector<int>(c, 0)) {}\n\n    // Method to set the matrix data\n    void setData(const std::vector<std::vector<int>>& mat) {\n        if (mat.size() != rows || mat[0].size() != cols) {\n            throw std::invalid_argument(\"Dimensions mismatch in setData\");\n        }\n        data = mat;\n    }\n\n    // Method to add two matrices\n    Matrix operator+(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions not compatible for addition\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] + other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Method to subtract two matrices\n    Matrix operator-(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions not compatible for subtraction\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] - other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Method to multiply two matrices\n    Matrix operator*(const Matrix& other) const {\n        if (cols != other.rows) {\n            throw std::invalid_argument(\"Matrices dimensions not compatible for multiplication\");\n        }\n        Matrix result(rows, other.cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < other.cols; ++j) {\n                int sum = 0;\n                for (size_t k = 0; k < cols; ++k) {\n                    sum += data[i][k] * other.data[k][j];\n                }\n                result.data[i][j] = sum;\n            }\n        }\n        return result;\n    }\n\n    // Method to print the matrix\n    void print() const {\n        for (const auto& row : data) {\n            for (int val : row) {\n                std::cout << val << \" \";\n            }\n            std::cout << std::endl;\n        }\n    }\n};\n\nint main() {\n    try {\n        Matrix mat1(2, 3);\n        mat1.setData({{1, 2, 3}, {4, 5, 6}});\n\n        Matrix mat2(2, 3);\n        mat2.setData({{7, 8, 9}, {10, 11, 12}});\n\n        Matrix sum = mat1 + mat2;\n        std::cout << \"Sum:\\n\";\n        sum.print();\n\n        Matrix diff = mat1 - mat2;\n        std::cout << \"Difference:\\n\";\n        diff.print();\n\n        Matrix mat3(3, 2);\n        mat3.setData({{1, 2}, {3, 4}, {5, 6}});\n\n        Matrix product = mat1 * mat3;\n        std::cout << \"Product:\\n\";\n        product.print();\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Constructor**: Initializes the matrix with given rows and columns, filled with zeros.\n2. **setData**: Sets the matrix data from a 2D vector. Checks for dimension mismatches.\n3. **operator+**: Adds two matrices element-wise. Ensures both matrices have the same dimensions.\n4. **operator-**: Subtracts one matrix from another element-wise. Ensures both matrices have the same dimensions.\n5. **operator***: Multiplies two matrices. Ensures the number of columns in the first matrix matches the number of rows in the second.\n6. **print**: Prints the matrix in a readable format.\n\nThis implementation includes basic error handling using exceptions to manage incompatible operations due to dimension mismatches."
    }
]