[
    {
        "role": "user",
        "content": "Write a Python program that finds the largest and smallest number in an unsorted list of integers."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python program that finds the largest and smallest numbers in an unsorted list of integers.\n\n```python\ndef find_largest_and_smallest(numbers):\n    if not numbers:\n        return None, None  # Return None for both if the list is empty\n    \n    largest = smallest = numbers[0]  # Initialize largest and smallest to the first element\n    \n    for num in numbers:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    \n    return largest, smallest\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]\nlargest, smallest = find_largest_and_smallest(numbers)\nprint(f\"Largest: {largest}, Smallest: {smallest}\")\n```\n\n### Explanation:\n\n1. **Function Definition**:\n   - `find_largest_and_smallest(numbers)`: This function takes a list of integers as input.\n\n2. **Handling Empty List**:\n   - If the list is empty, it returns `None` for both largest and smallest.\n\n3. **Initialization**:\n   - Initializes both `largest` and `smallest` to the first element of the list.\n\n4. **Iteration and Comparison**:\n   - Iterates through each number in the list.\n   - Updates `largest` if the current number is greater than the current `largest`.\n   - Updates `smallest` if the current number is smaller than the current `smallest`.\n\n5. **Return Values**:\n   - Returns a tuple containing the largest and smallest numbers.\n\n6. **Example Usage**:\n   - Demonstrates how to use the function with a sample list and prints the results.\n\nThis approach ensures that the function efficiently finds both the largest and smallest numbers in a single pass through the list, making it optimal for large lists."
    }
]