[
    {
        "role": "user",
        "content": "Write a Python script that performs image recognition using TensorFlow and a pre-trained model. The script should take an image file as input, classify the image, and output the top 5 predicted labels along with their confidence scores."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that uses TensorFlow and a pre-trained model to perform image recognition. This script will take an image file as input, classify the image, and output the top 5 predicted labels along with their confidence scores.\n\nFirst, make sure you have TensorFlow installed. You can install it using pip if you haven't already:\n\n```bash\npip install tensorflow\n```\n\nHere's the script:\n\n```python\nimport tensorflow as tf\nimport numpy as np\nfrom tensorflow.keras.applications.resnet50 import ResNet50, preprocess_input, decode_predictions\nfrom tensorflow.keras.preprocessing import image\n\ndef load_model():\n    # Load the pre-trained ResNet50 model\n    model = ResNet50(weights='imagenet')\n    return model\n\ndef preprocess_image(img_path):\n    # Load the image file\n    img = image.load_img(img_path, target_size=(224, 224))\n    # Convert the image to a array\n    img_array = image.img_to_array(img)\n    # Expand dimensions to represent a batch of one image\n    img_array = np.expand_dims(img_array, axis=0)\n    # Preprocess the image array\n    processed_img = preprocess_input(img_array)\n    return processed_img\n\ndef predict_image(model, processed_img):\n    # Make predictions\n    predictions = model.predict(processed_img)\n    # Decode the predictions to get labels and confidence scores\n    decoded_predictions = decode_predictions(predictions, top=5)[0]\n    return decoded_predictions\n\ndef main(img_path):\n    # Load the model\n    model = load_model()\n    # Preprocess the image\n    processed_img = preprocess_image(img_path)\n    # Get predictions\n    predictions = predict_image(model, processed_img)\n    \n    # Print the top 5 predictions\n    for i, (imagenet_id, label, score) in enumerate(predictions):\n        print(f\"{i+1}: {label} ({score*100:.2f}%)\")\n\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py path_to_image\")\n        sys.exit(1)\n    \n    img_path = sys.argv[1]\n    main(img_path)\n```\n\n### Explanation:\n\n1. **Loading the Model:**\n   - We use the pre-trained ResNet50 model from TensorFlow's Keras API, which is loaded with pre-trained ImageNet weights.\n\n2. **Preprocessing the Image:**\n   - The input image is loaded and resized to 224x224 pixels, as expected by the ResNet50 model.\n   - The image is converted to a NumPy array and preprocessed using `preprocess_input` function.\n\n3. **Making Predictions:**\n   - The model predicts the classes for the input image.\n   - The predictions are decoded to get human-readable labels and their corresponding confidence scores.\n\n4. **Output:**\n   - The top 5 predicted labels along with their confidence scores are printed.\n\n### Usage:\n\nSave the script to a file, for example, `image_recognition.py`, and run it from the command line by providing the path to an image file:\n\n```bash\npython image_recognition.py path/to/your/image.jpg\n```\n\nThis will output the top 5 predictions for the image along with their confidence scores."
    }
]