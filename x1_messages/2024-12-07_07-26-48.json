[
    {
        "role": "user",
        "content": "Create a Java program that generates random math problems (addition, subtraction, multiplication, and division) for users to solve. The program should keep track of the user's score and display it after each problem is solved."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to try to create a Java program that generates random math problems for users to solve. The problems should cover addition, subtraction, multiplication, and division. I need to make sure that the program keeps track of the user's score and displays it after each problem.\n\nFirst, I need to set up the basic structure of the Java program. I'll need to import necessary packages, maybe for random number generation. I think I'll use the `java.util.Random` class for generating random numbers.\n\nNext, I need to decide how the program will present the problems to the user. Probably, it should generate two random numbers and a random operator (+, -, *, /), then display the problem and ask the user to input their answer.\n\nI should also consider the range of the numbers. Maybe between 1 and 100 for beginners. I can make it more challenging later if needed.\n\nFor division, I need to handle cases where the division might result in a decimal. Maybe I should stick to integers and ensure that the division is exact, without remainders.\n\nLet me think about how to validate the user's input. I need to make sure that the user enters a valid number and not something else like letters. I can use a try-catch block to handle invalid inputs.\n\nAlso, I need to keep track of the user's score. Maybe I'll keep a counter for correct answers and total attempts, then calculate the score as correct answers divided by total attempts.\n\nI should probably allow the user to choose how many problems they want to solve or have an option for continuous practice until they decide to quit.\n\nLet me outline the steps:\n\n1. Import necessary packages: `java.util.Random` for random number generation and `java.util.Scanner` for user input.\n\n2. Create a class, say `MathQuiz`.\n\n3. Inside the class, create a method to generate random numbers within a specified range.\n\n4. Create a method to select a random operator from (+, -, *, /).\n\n5. Based on the operator, create the math problem and calculate the correct answer.\n\n6. Display the problem to the user and ask for their answer.\n\n7. Compare the user's answer with the correct answer and update the score accordingly.\n\n8. Display the current score after each problem.\n\n9. Allow the user to choose the number of problems they want to solve or have an option for continuous practice.\n\n10. Handle invalid inputs gracefully.\n\nLet me consider how to implement the random operator selection. I can have an array of operators and randomly select one each time.\n\nFor example:\n\nString[] operators = {\"+\", \"-\", \"*\", \"/\"};\n\nRandom rand = new Random();\n\nString operator = operators[rand.nextInt(operators.length)];\n\nThen, based on the operator, perform the corresponding operation.\n\nFor addition:\n\nint num1 = rand.nextInt(100);\n\nint num2 = rand.nextInt(100);\n\nint correctAnswer = num1 + num2;\n\nFor subtraction:\n\nint num1 = rand.nextInt(100);\n\nint num2 = rand.nextInt(100);\n\nint correctAnswer = num1 - num2;\n\nFor multiplication:\n\nint num1 = rand.nextInt(100);\n\nint num2 = rand.nextInt(100);\n\nint correctAnswer = num1 * num2;\n\nFor division:\n\nint divisor = rand.nextInt(10) + 1; // between 1 and 10\n\nint quotient = rand.nextInt(10) + 1; // between 1 and 10\n\nint dividend = divisor * quotient;\n\nint correctAnswer = quotient;\n\nBy calculating the dividend as divisor multiplied by quotient, I ensure that the division is exact with no remainder.\n\nNow, for user input, I'll use Scanner to read the user's answer.\n\nI need to wrap it in a try-catch block to handle cases where the user enters something other than a number.\n\nSomething like:\n\nScanner scanner = new Scanner(System.in);\n\ntry {\n\nint userAnswer = Integer.parseInt(scanner.nextLine());\n\n// compare userAnswer with correctAnswer\n\n} catch (NumberFormatException e) {\n\nSystem.out.println(\"Invalid input. Please enter a valid number.\");\n\n// handle invalid input, maybe retry or skip\n\n}\n\nI should also think about how to structure the program flow. Maybe use a loop that runs for a specified number of problems or continues until the user decides to quit.\n\nPerhaps I can ask the user at the beginning how many problems they want to solve.\n\nSystem.out.println(\"How many problems do you want to solve?\");\n\nint numberOfProblems = scanner.nextInt();\n\nThen, loop that many times, generating problems and updating the score.\n\nAt the end, display the final score.\n\nAlternatively, I can have an infinite loop that continues until the user chooses to quit by entering a specific command like \"quit\" or \"exit\".\n\nI think that would be more flexible. So, in the loop, after each problem, ask the user if they want to continue or quit.\n\nNow, let's think about how to display the problem.\n\nFor example:\n\nWhat is 5 + 3?\n\nor\n\nWhat is 12 - 7?\n\nor\n\nWhat is 4 * 6?\n\nor\n\nWhat is 20 / 5?\n\nThen, the user enters their answer.\n\nI need to make sure that the division problems have integer answers, as I mentioned earlier.\n\nAlso, for subtraction, ensure that the result is not negative by making sure num1 >= num2.\n\nWait, if num1 is smaller than num2, subtraction would result in a negative number, which might be confusing for some users. So, to avoid negative answers, I should ensure that num1 >= num2 for subtraction.\n\nSimilarly, for division, by calculating dividend as divisor * quotient, I ensure that division is exact.\n\nNow, let's think about the scorekeeping.\n\nI'll have two variables: correctCount and totalAttempts.\n\nEach time the user answers correctly, increment correctCount.\n\nEach time the user attempts a problem, increment totalAttempts.\n\nThen, the score is correctCount / totalAttempts * 100%.\n\nI should display the score after each problem.\n\nFor example:\n\nCorrect! Your current score is 1/1, 100%.\n\nor\n\nIncorrect. The correct answer is 8. Your current score is 0/1, 0%.\n\nAlso, I should handle the case where the user enters a negative answer for subtraction.\n\nWait, actually, subtraction can have negative answers, but I'm making sure num1 >= num2 to avoid negative results.\n\nSimilarly, for division, only exact divisions.\n\nNow, let's consider how to make the program more user-friendly.\n\nMaybe include some messages encouraging the user, like \"Great job!\", \"Keep going!\", etc., for correct answers.\n\nAnd for incorrect answers, provide the correct answer and maybe a hint.\n\nAlso, at the end, display the final score and a message based on the performance.\n\nFor example:\n\n\"Your final score is 4/5, 80%. Well done!\"\n\nor\n\n\"Your final score is 2/5, 40%. Keep practicing!\"\n\nI should also think about error handling.\n\nBesides handling invalid inputs like letters instead of numbers, I should also handle division by zero.\n\nWait, in division, I'm ensuring that the divisor is at least 1, so division by zero shouldn't be an issue.\n\nBut I need to make sure that in subtraction, num1 >= num2 to avoid negative results.\n\nAlso, for multiplication, numbers can get large, but since we're dealing with integers, it should be fine.\n\nI should also consider the user's input format.\n\nUsing `Integer.parseInt(scanner.nextLine())` should work for integer inputs.\n\nBut I need to handle cases where the user enters something that can't be parsed as an integer.\n\nMaybe I should loop until the user enters a valid integer.\n\nFor example:\n\nint userAnswer = 0;\n\nboolean validInput = false;\n\nwhile (!validInput) {\n\ntry {\n\nuserAnswer = Integer.parseInt(scanner.nextLine());\n\nvalidInput = true;\n\n} catch (NumberFormatException e) {\n\nSystem.out.println(\"Invalid input. Please enter a valid integer.\");\n\n}\n\n}\n\nThis way, it keeps asking until a valid integer is entered.\n\nAlternatively, I can use `scanner.nextInt()` , but that can leave the newline character in the scanner, leading to issues.\n\nSo, using `scanner.nextLine()` and parsing it is better.\n\nNow, let's think about how to organize the code.\n\nMaybe have a method for generating the problem.\n\nSomething like:\n\npublic static Problem generateProblem() {\n\n// generate numbers and operator\n\n// calculate correct answer\n\n// return a Problem object\n\n}\n\nThen, have a Problem class that holds num1, num2, operator, and correctAnswer.\n\nBut to keep it simple, maybe just have variables within the same method.\n\nAlternatively, I can have separate methods for each operation.\n\nBut that might not be efficient.\n\nI think having one method to generate the problem based on a random operator is better.\n\nNow, I need to write the main method to control the flow.\n\nMaybe have a do-while loop that continues until the user chooses to quit.\n\nAfter each problem, ask the user if they want to continue or quit.\n\nIf they choose to quit, display the final score and exit.\n\nOtherwise, proceed to the next problem.\n\nI should also handle the case where the user doesn't enter a valid choice when prompted to continue or quit.\n\nFor example, ask \"Do you want to continue? (yes/no): \"\n\nThen, check if the input is \"yes\" or \"no\".\n\nIf \"no\", exit and display the final score.\n\nIf \"yes\", proceed to the next problem.\n\nIf something else, ask again.\n\nI can use a loop to keep asking until a valid response is given.\n\nNow, let's think about the user interface.\n\nIt should be text-based, as this is a console application.\n\nMake sure that messages are clear and easy to understand.\n\nAlso, ensure that the program doesn't have any infinite loops or get stuck in a certain condition.\n\nI need to test the program thoroughly to make sure it handles all possible inputs correctly.\n\nNow, I'll start writing some pseudocode to outline the steps.\n\nPseudocode:\n\nimport java.util.Random;\n\nimport java.util.Scanner;\n\npublic class MathQuiz {\n\npublic static void main(String[] args) {\n\nRandom rand = new Random();\n\nScanner scanner = new Scanner(System.in);\n\nint correctCount = 0;\n\nint totalAttempts = 0;\n\nString continueResponse;\n\ndo {\n\n// generate problem\n\nint num1 = rand.nextInt(100);\n\nint num2 = rand.nextInt(100);\n\nString operator = selectRandomOperator(rand);\n\nint correctAnswer = calculateCorrectAnswer(num1, num2, operator);\n\n// display problem\n\nSystem.out.println(\"What is \" + num1 + \" \" + operator + \" \" + num2 + \"?\");\n\n// get user answer\n\nint userAnswer = getUserAnswer(scanner);\n\n// check answer\n\nif (userAnswer == correctAnswer) {\n\nSystem.out.println(\"Correct!\");\n\ncorrectCount++;\n\n} else {\n\nSystem.out.println(\"Incorrect. The correct answer is \" + correctAnswer + \".\");\n\n}\n\ntotalAttempts++;\n\nSystem.out.println(\"Your current score is \" + correctCount + \"/\" + totalAttempts + \", \" + calculatePercentage(correctCount, totalAttempts) + \"%.\");\n\n// ask to continue\n\nSystem.out.println(\"Do you want to continue? (yes/no): \");\n\ncontinueResponse = scanner.nextLine();\n\n} while (continueResponse.equalsIgnoreCase(\"yes\"));\n\n// display final score\n\nSystem.out.println(\"Your final score is \" + correctCount + \"/\" + totalAttempts + \", \" + calculatePercentage(correctCount, totalAttempts) + \"%.\");\n\n}\n\nprivate static String selectRandomOperator(Random rand) {\n\nString[] operators = {\"+\", \"-\", \"*\", \"/\"};\n\nreturn operators[rand.nextInt(operators.length)];\n\n}\n\nprivate static int calculateCorrectAnswer(int num1, int num2, String operator) {\n\nswitch (operator) {\n\ncase \"+\":\n\nreturn num1 + num2;\n\ncase \"-\":\n\nreturn num1 - num2;\n\ncase \"*\":\n\nreturn num1 * num2;\n\ncase \"/\":\n\n// ensure no division by zero and exact division\n\nint divisor = num2;\n\nint dividend = num1;\n\nif (divisor == 0) {\n\n// handle division by zero, maybe regenerate numbers\n\n}\n\nreturn dividend / divisor;\n\ndefault:\n\nthrow new IllegalArgumentException(\"Invalid operator: \" + operator);\n\n}\n\n}\n\nprivate static int getUserAnswer(Scanner scanner) {\n\nint userAnswer;\n\nwhile (true) {\n\ntry {\n\nuserAnswer = Integer.parseInt(scanner.nextLine());\n\nreturn userAnswer;\n\n} catch (NumberFormatException e) {\n\nSystem.out.println(\"Invalid input. Please enter a valid integer.\");\n\n}\n\n}\n\n}\n\nprivate static double calculatePercentage(int correctCount, int totalAttempts) {\n\nif (totalAttempts == 0) {\n\nreturn 0.0;\n\n}\n\nreturn (double) correctCount / totalAttempts * 100;\n\n}\n\n}\n\nWait, in the division case, I need to ensure that division is exact.\n\nIn the current setup, I'm generating num1 and num2 randomly, and for division, setting divisor = num2 and dividend = num1.\n\nBut this might not result in an exact division.\n\nTo fix this, I need to generate divisor and quotient first, then calculate dividend = divisor * quotient.\n\nThen, the problem becomes dividend / divisor = ?\n\nSo, I need to adjust the generateProblem method to handle this.\n\nMaybe I should generate the numbers based on the operator.\n\nFor example, if the operator is \"/\", then generate divisor and quotient first, then calculate dividend.\n\nOtherwise, generate num1 and num2 directly.\n\nI can modify the generateProblem method to handle this.\n\nAlso, for subtraction, ensure num1 >= num2.\n\nLet me think about how to implement this.\n\nMaybe have a separate method for generating numbers based on the operator.\n\nFor example:\n\nprivate static int[] generateNumbers(String operator, Random rand) {\n\nint num1, num2;\n\nswitch (operator) {\n\ncase \"+\":\n\nnum1 = rand.nextInt(100);\n\nnum2 = rand.nextInt(100);\n\nbreak;\n\ncase \"-\":\n\nint larger = rand.nextInt(100);\n\nint smaller = rand.nextInt(larger + 1);\n\nnum1 = larger;\n\nnum2 = smaller;\n\nbreak;\n\ncase \"*\":\n\nnum1 = rand.nextInt(100);\n\nnum2 = rand.nextInt(100);\n\nbreak;\n\ncase \"/\":\n\nint divisor = rand.nextInt(10) + 1; // between 1 and 10\n\nint quotient = rand.nextInt(10) + 1; // between 1 and 10\n\nint dividend = divisor * quotient;\n\nnum1 = dividend;\n\nnum2 = divisor;\n\nbreak;\n\ndefault:\n\nthrow new IllegalArgumentException(\"Invalid operator: \" + operator);\n\n}\n\nreturn new int[]{num1, num2};\n\n}\n\nThis way, for each operator, I generate appropriate numbers.\n\nFor subtraction, ensure num1 >= num2 to avoid negative answers.\n\nFor division, generate divisor and quotient first, then calculate dividend.\n\nThis ensures that division is exact.\n\nNow, in the main method, I can call this generateNumbers method after selecting the operator.\n\nSomething like:\n\nString operator = selectRandomOperator(rand);\n\nint[] numbers = generateNumbers(operator, rand);\n\nint num1 = numbers[0];\n\nint num2 = numbers[1];\n\nint correctAnswer = calculateCorrectAnswer(num1, num2, operator);\n\nThen, display the problem:\n\nSystem.out.println(\"What is \" + num1 + \" \" + operator + \" \" + num2 + \"?\");\n\nAnd proceed as before.\n\nI need to make sure that the generateNumbers method is correctly implemented for each operator.\n\nLet me verify:\n\n- Addition: num1 and num2 are random between 0 and 99.\n\n- Subtraction: num1 is random between 0 and 99, num2 is random between 0 and num1, ensuring num1 >= num2.\n\n- Multiplication: num1 and num2 are random between 0 and 99.\n\n- Division: divisor is between 1 and 10, quotient is between 1 and 10, dividend is divisor * quotient.\n\nThis should cover all cases.\n\nNow, I need to implement the generateNumbers method accordingly.\n\nAlso, in the calculateCorrectAnswer method, I can use a switch statement to calculate the correct answer based on the operator.\n\nI need to handle the division case correctly, ensuring that it's integer division.\n\nIn Java, dividing two integers will perform integer division automatically.\n\nBut I need to make sure that in the generateNumbers method for division, dividend is always divisible by divisor, which we've already ensured.\n\nNow, let's think about the user interface further.\n\nMaybe I can add some randomness in the messages for correct and incorrect answers to make it more engaging.\n\nFor example, have an array of strings for correct and incorrect responses.\n\nString[] correctMessages = {\"Great job!\", \"Correct! Keep it up.\", \"You're awesome!\", ...};\n\nString[] incorrectMessages = {\"Almost there!\", \"Not quite. Try again next time.\", \"Keep practicing!\", ...};\n\nThen, randomly select a message each time the user answers correctly or incorrectly.\n\nThis can make the program more interactive and less monotonous.\n\nAlso, at the end, based on the final score, provide a tailored message.\n\nFor example:\n\nif final score >= 90%, \"Excellent work!\"\n\nelse if final score >= 70%, \"Good job! Keep practicing.\"\n\nelse, \"Don't give up! Keep trying.\"\n\nI can implement this by adding another method that takes the final score and returns a message.\n\nNow, regarding the range of numbers, I've set it to 0-99 for num1 and num2.\n\nBut for beginners, maybe I should have smaller numbers, like 0-10 or 0-20.\n\nI can add an option for the user to choose the difficulty level at the beginning.\n\nFor example:\n\nChoose the difficulty level:\n\n1. Easy (numbers between 0 and 10)\n\n2. Medium (numbers between 0 and 20)\n\n3. Hard (numbers between 0 and 100)\n\nThen, based on the choice, set the range for generating numbers.\n\nThis would make the program more flexible and suitable for different skill levels.\n\nI need to implement this in the generateNumbers method by passing the range as a parameter.\n\nFor example:\n\nprivate static int[] generateNumbers(String operator, Random rand, int maxNum) {\n\nint num1, num2;\n\nswitch (operator) {\n\ncase \"+\":\n\nnum1 = rand.nextInt(maxNum + 1);\n\nnum2 = rand.nextInt(maxNum + 1);\n\nbreak;\n\ncase \"-\":\n\nint larger = rand.nextInt(maxNum + 1);\n\nint smaller = rand.nextInt(larger + 1);\n\nnum1 = larger;\n\nnum2 = smaller;\n\nbreak;\n\ncase \"*\":\n\nnum1 = rand.nextInt(maxNum + 1);\n\nnum2 = rand.nextInt(maxNum + 1);\n\nbreak;\n\ncase \"/\":\n\nint divisor = rand.nextInt(10) + 1; // between 1 and 10\n\nint quotient = rand.nextInt(maxNum / divisor) + 1; // ensure dividend doesn't exceed maxNum\n\nint dividend = divisor * quotient;\n\nnum1 = dividend;\n\nnum2 = divisor;\n\nbreak;\n\ndefault:\n\nthrow new IllegalArgumentException(\"Invalid operator: \" + operator);\n\n}\n\nreturn new int[]{num1, num2};\n\n}\n\nHere, maxNum is the upper limit for the numbers.\n\nFor division, I need to adjust the range for the quotient to ensure that dividend = divisor * quotient doesn't exceed maxNum.\n\nSo, quotient can be up to maxNum / divisor.\n\nI've added that in the division case.\n\nNow, in the main method, I need to ask the user for the difficulty level and set maxNum accordingly.\n\nSomething like:\n\nSystem.out.println(\"Choose the difficulty level:\");\n\nSystem.out.println(\"1. Easy (numbers between 0 and 10)\");\n\nSystem.out.println(\"2. Medium (numbers between 0 and 20)\");\n\nSystem.out.println(\"3. Hard (numbers between 0 and 100)\");\n\nint difficulty = scanner.nextInt();\n\nint maxNum;\n\nswitch (difficulty) {\n\ncase 1:\n\nmaxNum = 10;\n\nbreak;\n\ncase 2:\n\nmaxNum = 20;\n\nbreak;\n\ncase 3:\n\nmaxNum = 100;\n\nbreak;\n\ndefault:\n\nSystem.out.println(\"Invalid choice. Defaulting to Medium.\");\n\nmaxNum = 20;\n\nbreak;\n\n}\n\nThen, pass maxNum to the generateNumbers method.\n\nThis way, the program adapts to the user's chosen difficulty.\n\nNow, I need to ensure that the program handles all possible edge cases.\n\nFor example:\n\n- Division where divisor is 1, which is allowed.\n\n- Subtraction where num1 == num2, resulting in 0.\n\n- Multiplication where one of the numbers is 0, resulting in 0.\n\n- Addition of two large numbers that could cause integer overflow, but in Java, int can hold up to 2^31 - 1, which is fine for numbers up to 100.\n\nI should also consider that for division, divisor is never 0, which I've already handled by starting divisor from 1.\n\nAnother consideration is that for division, the quotient should be an integer, which is ensured by the way I generate dividend and divisor.\n\nNow, let's think about how to make the program more engaging.\n\nMaybe include a timer to add a sense of challenge, but that might be too advanced for now.\n\nOr keep it simple and focus on correctness and user-friendly interaction.\n\nI think for a beginner's program, correctness and clarity are more important.\n\nI should also make sure that the program doesn't have any infinite loops.\n\nFor example, in the do-while loop, ensure that the continueResponse is properly read and handled.\n\nAlso, after reading the difficulty level with scanner.nextInt(), I need to consume the newline character left in the scanner to avoid issues with scanner.nextLine().\n\nI can add scanner.nextLine() after reading the difficulty level to consume the newline character.\n\nLike this:\n\nint difficulty = scanner.nextInt();\n\nscanner.nextLine(); // consume newline character\n\nThis prevents issues when the next input is read using scanner.nextLine().\n\nNow, let's think about how to structure the code for better readability.\n\nI can have separate methods for different functionalities:\n\n- selectRandomOperator: to select a random operator.\n\n- generateNumbers: to generate numbers based on the operator and difficulty.\n\n- calculateCorrectAnswer: to calculate the correct answer based on operator and numbers.\n\n- getUserAnswer: to get and validate user's answer.\n\n- calculatePercentage: to calculate the score percentage.\n\n- getFeedbackMessage: to get a random feedback message based on correctness.\n\n- getFinalMessage: to get a message based on the final score.\n\nThis modular approach makes the code cleaner and easier to maintain.\n\nI should also add comments to the code to explain each part, especially for educational purposes.\n\nNow, I'll proceed to write the actual Java code based on this plan.\n\n## Final Solution\nTo create a Java program that generates random math problems for users to solve, follow these steps:\n\n### Approach\n1. **Generate Random Problems**: Create methods to generate random numbers and operators for math problems.\n2. **User Interaction**: Use `Scanner` to get user input and display results.\n3. **Score Tracking**: Keep track of the user's score and display it after each problem.\n4. **Difficulty Levels**: Allow users to choose difficulty levels which adjust the range of numbers used in problems.\n\n### Solution Code\n\n```java\nimport java.util.Random;\nimport java.util.Scanner;\n\npublic class MathQuiz {\n\n    public static void main(String[] args) {\n        Random rand = new Random();\n        Scanner scanner = new Scanner(System.in);\n\n        System.out.println(\"Choose the difficulty level:\");\n        System.out.println(\"1. Easy (numbers between 0 and 10)\");\n        System.out.println(\"2. Medium (numbers between 0 and 20)\");\n        System.out.println(\"3. Hard (numbers between 0 and 100)\");\n        int difficulty = scanner.nextInt();\n        scanner.nextLine(); // Consume newline\n\n        int maxNum;\n        switch (difficulty) {\n            case 1:\n                maxNum = 10;\n                break;\n            case 2:\n                maxNum = 20;\n                break;\n            case 3:\n                maxNum = 100;\n                break;\n            default:\n                System.out.println(\"Invalid choice. Defaulting to Medium.\");\n                maxNum = 20;\n                break;\n        }\n\n        int correctCount = 0;\n        int totalAttempts = 0;\n        String continueResponse;\n\n        do {\n            String operator = selectRandomOperator(rand);\n            int[] numbers = generateNumbers(operator, rand, maxNum);\n            int num1 = numbers[0];\n            int num2 = numbers[1];\n            int correctAnswer = calculateCorrectAnswer(num1, num2, operator);\n\n            System.out.println(\"What is \" + num1 + \" \" + operator + \" \" + num2 + \"?\");\n            int userAnswer = getUserAnswer(scanner);\n\n            boolean isCorrect = userAnswer == correctAnswer;\n            if (isCorrect) {\n                System.out.println(\"Correct!\");\n                correctCount++;\n            } else {\n                System.out.println(\"Incorrect. The correct answer is \" + correctAnswer + \".\");\n            }\n            totalAttempts++;\n            System.out.println(\"Your current score is \" + correctCount + \"/\" + totalAttempts + \", \" + calculatePercentage(correctCount, totalAttempts) + \"%.\");\n\n            System.out.println(\"Do you want to continue? (yes/no): \");\n            continueResponse = scanner.nextLine();\n        } while (continueResponse.equalsIgnoreCase(\"yes\"));\n\n        System.out.println(\"Your final score is \" + correctCount + \"/\" + totalAttempts + \", \" + calculatePercentage(correctCount, totalAttempts) + \"%.\");\n        scanner.close();\n    }\n\n    private static String selectRandomOperator(Random rand) {\n        String[] operators = {\"+\", \"-\", \"*\", \"/\"};\n        return operators[rand.nextInt(operators.length)];\n    }\n\n    private static int[] generateNumbers(String operator, Random rand, int maxNum) {\n        int num1, num2;\n        switch (operator) {\n            case \"+\":\n                num1 = rand.nextInt(maxNum + 1);\n                num2 = rand.nextInt(maxNum + 1);\n                break;\n            case \"-\":\n                num1 = rand.nextInt(maxNum + 1);\n                num2 = rand.nextInt(num1 + 1);\n                break;\n            case \"*\":\n                num1 = rand.nextInt(maxNum + 1);\n                num2 = rand.nextInt(maxNum + 1);\n                break;\n            case \"/\":\n                int divisor = rand.nextInt(10) + 1; // between 1 and 10\n                int quotient = rand.nextInt(maxNum / divisor) + 1; // ensure dividend doesn't exceed maxNum\n                num1 = divisor * quotient;\n                num2 = divisor;\n                break;\n            default:\n                throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n        }\n        return new int[]{num1, num2};\n    }\n\n    private static int calculateCorrectAnswer(int num1, int num2, String operator) {\n        switch (operator) {\n            case \"+\":\n                return num1 + num2;\n            case \"-\":\n                return num1 - num2;\n            case \"*\":\n                return num1 * num2;\n            case \"/\":\n                return num1 / num2;\n            default:\n                throw new IllegalArgumentException(\"Invalid operator: \" + operator);\n        }\n    }\n\n    private static int getUserAnswer(Scanner scanner) {\n        int userAnswer;\n        while (true) {\n            try {\n                userAnswer = Integer.parseInt(scanner.nextLine());\n                return userAnswer;\n            } catch (NumberFormatException e) {\n                System.out.println(\"Invalid input. Please enter a valid integer.\");\n            }\n        }\n    }\n\n    private static double calculatePercentage(int correctCount, int totalAttempts) {\n        if (totalAttempts == 0) {\n            return 0.0;\n        }\n        return (double) correctCount / totalAttempts * 100;\n    }\n}\n```\n\n### Explanation\n1. **Operator Selection**: Randomly selects operators (+, -, *, /).\n2. **Number Generation**: Generates numbers appropriate for each operator and difficulty level.\n3. **Problem Calculation**: Computes the correct answer based on the operator and numbers.\n4. **User Interaction**: Prompts the user for answers and validates the input.\n5. **Score Tracking**: Maintains and displays the user's score after each problem.\n6. **Loop Control**: Continues generating problems based on user choice until they decide to stop."
    }
]