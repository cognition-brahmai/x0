[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple HTTP server with the following features: support for GET and POST requests, ability to serve static files from a specified directory, and an endpoint for uploading files (using their MD5 hash as the filename). The server should be configurable via command line arguments for port number, IP address, and the static file directory."
    },
    {
        "role": "assistant",
        "content": "I'm going to attempt to write a simple HTTP server in Java that can handle GET and POST requests, serve static files from a specified directory, and have an endpoint for uploading files using their MD5 hash as the filename. The server should also be configurable via command line arguments for port number, IP address, and the static file directory.\n\nFirst, I need to understand the basic structure of an HTTP server. An HTTP server listens on a specific IP address and port for incoming client requests, parses those requests, and responds accordingly. For this project, I'll need to handle at least GET and POST methods.\n\nI should consider using Java's built-in libraries for handling network operations and HTTP protocols. The `java.net` package provides classes for creating servers and handling network connections. Additionally, the `java.net.http` package introduced in Java 11 provides more modern APIs for HTTP client and server functionalities.\n\nHowever, implementing a full-fledged HTTP server from scratch might be complex and time-consuming. To simplify things, I can use existing libraries like Jetty or Apache HTTP Server, but since the task is to \"implement a simple HTTP server,\" I assume that using external libraries beyond the standard Java API is not allowed.\n\nGiven that, I'll proceed using Java's standard libraries.\n\nFirst, I need to set up the server to listen on a specified IP address and port, which will be provided as command line arguments. I'll need to parse these arguments accordingly.\n\nFor handling multiple clients, I should design the server to be multi-threaded, where each client connection is handled in a separate thread.\n\nLet's outline the steps:\n\n1. Parse command line arguments for IP address, port number, and static file directory.\n\n2. Set up a server socket to listen on the specified IP and port.\n\n3. Accept incoming client connections and handle each in a separate thread.\n\n4. For each connection, read the HTTP request.\n\n5. Parse the HTTP request to determine the method (GET or POST), the requested resource, and any headers or payloads.\n\n6. For GET requests:\n\na. If the requested resource is a static file, serve it from the specified directory.\n\nb. If the resource is not found, return a 404 error.\n\n7. For POST requests:\n\na. If the request is to upload a file, read the file content from the request payload.\n\nb. Compute the MD5 hash of the file content.\n\nc. Save the file using the MD5 hash as the filename in the specified directory.\n\nd. Return a response indicating success or failure.\n\n8. Implement error handling for various scenarios, such as invalid requests, file not found, permission issues, etc.\n\n9. Ensure that the server can handle concurrent requests properly.\n\nLet's start by setting up the server to listen on a specified IP and port.\n\n## Final Solution\nTo create a simple HTTP server in Java that supports GET and POST requests, serves static files from a specified directory, and handles file uploads using their MD5 hash as the filename, follow the steps below.\n\n### Solution Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.nio.file.*;\nimport java.security.MessageDigest;\nimport java.util.concurrent.*;\n\npublic class SimpleHttpServer {\n\n    private final int port;\n    private final String ipAddress;\n    private final String staticFilePath;\n\n    public SimpleHttpServer(String ipAddress, int port, String staticFilePath) {\n        this.port = port;\n        this.ipAddress = ipAddress;\n        this.staticFilePath = staticFilePath;\n    }\n\n    public void start() throws IOException {\n        ServerSocket serverSocket = new ServerSocket(port, 50, InetAddress.getByName(ipAddress));\n        System.out.println(\"Server started on \" + ipAddress + \":\" + port);\n\n        try {\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"New client connected: \" + clientSocket);\n                ExecutorService executor = Executors.newFixedThreadPool(10);\n                executor.execute(new ClientHandler(clientSocket, staticFilePath));\n            }\n        } finally {\n            serverSocket.close();\n        }\n    }\n\n    public static void main(String[] args) throws IOException {\n        if (args.length != 3) {\n            System.out.println(\"Usage: java SimpleHttpServer <ip_address> <port> <static_file_path>\");\n            return;\n        }\n        String ipAddress = args[0];\n        int port = Integer.parseInt(args[1]);\n        String staticFilePath = args[2];\n\n        new SimpleHttpServer(ipAddress, port, staticFilePath).start();\n    }\n}\n\nclass ClientHandler implements Runnable {\n    private final Socket socket;\n    private final String staticFilePath;\n\n    public ClientHandler(Socket socket, String staticFilePath) {\n        this.socket = socket;\n        this.staticFilePath = staticFilePath;\n    }\n\n    @Override\n    public void run() {\n        try {\n            handleRequest();\n        } catch (IOException e) {\n            System.err.println(\"Error handling request: \" + e.getMessage());\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                System.err.println(\"Error closing socket: \" + e.getMessage());\n            }\n        }\n    }\n\n    private void handleRequest() throws IOException {\n        InputStream input = socket.getInputStream();\n        OutputStream output = socket.getOutputStream();\n\n        BufferedReader reader = new BufferedReader(new InputStreamReader(input));\n        String requestLine = reader.readLine();\n        if (requestLine == null) {\n            return;\n        }\n\n        String[] parts = requestLine.split(\" \");\n        if (parts.length < 2) {\n            sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"Bad Request\");\n            return;\n        }\n\n        String method = parts[0];\n        String requestUri = parts[1];\n\n        if (\"GET\".equals(method)) {\n            handleGet(requestUri, output);\n        } else if (\"POST\".equals(method)) {\n            handlePost(requestUri, reader, output);\n        } else {\n            sendResponse(output, 501, \"Not Implemented\", \"text/plain\", method + \" method is not supported\");\n        }\n    }\n\n    private void handleGet(String requestUri, OutputStream output) throws IOException {\n        if (\"/\".equals(requestUri)) {\n            requestUri = \"/index.html\";\n        }\n\n        Path filePath = Paths.get(staticFilePath, requestUri.substring(1));\n        if (Files.exists(filePath) && Files.isRegularFile(filePath)) {\n            sendResponse(output, 200, \"OK\", getMimeType(filePath.toString()), Files.newInputStream(filePath));\n        } else {\n            sendResponse(output, 404, \"Not Found\", \"text/plain\", \"File not found\");\n        }\n    }\n\n    private void handlePost(String requestUri, BufferedReader reader, OutputStream output) throws IOException {\n        if (\"/upload\".equals(requestUri)) {\n            String line;\n            StringBuilder content = new StringBuilder();\n            while ((line = reader.readLine()) != null && !line.isEmpty()) {\n                content.append(line);\n            }\n\n            if (content.length() == 0) {\n                sendResponse(output, 400, \"Bad Request\", \"text/plain\", \"No file content provided\");\n                return;\n            }\n\n            String md5Filename = md5(content.toString());\n            Path uploadPath = Paths.get(staticFilePath, md5Filename);\n            Files.write(uploadPath, content.toString().getBytes());\n\n            sendResponse(output, 200, \"OK\", \"text/plain\", \"File uploaded successfully as \" + md5Filename);\n        } else {\n            sendResponse(output, 404, \"Not Found\", \"text/plain\", \"Endpoint not found\");\n        }\n    }\n\n    private String md5(String input) {\n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] messageDigest = md.digest(input.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : messageDigest) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            return hexString.toString();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    private String getMimeType(String filePath) {\n        String mimeType = \"text/plain\";\n        if (filePath.endsWith(\".html\")) {\n            mimeType = \"text/html\";\n        } else if (filePath.endsWith(\".css\")) {\n            mimeType = \"text/css\";\n        } else if (filePath.endsWith(\".js\")) {\n            mimeType = \"application/javascript\";\n        } else if (filePath.endsWith(\".jpg\") || filePath.endsWith(\".jpeg\")) {\n            mimeType = \"image/jpeg\";\n        } else if (filePath.endsWith(\".png\")) {\n            mimeType = \"image/png\";\n        }\n        return mimeType;\n    }\n\n    private void sendResponse(OutputStream output, int statusCode, String statusMessage, String contentType, String body) throws IOException {\n        sendResponse(output, statusCode, statusMessage, contentType, body.getBytes());\n    }\n\n    private void sendResponse(OutputStream output, int statusCode, String statusMessage, String contentType, byte[] body) throws IOException {\n        StringBuilder response = new StringBuilder();\n        response.append(\"HTTP/1.1 \").append(statusCode).append(\" \").append(statusMessage).append(\"\\r\\n\");\n        response.append(\"Content-Type: \").append(contentType).append(\"\\r\\n\");\n        response.append(\"Content-Length: \").append(body.length).append(\"\\r\\n\");\n        response.append(\"Connection: close\\r\\n\");\n        response.append(\"\\r\\n\");\n\n        output.write(response.toString().getBytes());\n        output.write(body);\n        output.flush();\n    }\n}\n```\n\n### Explanation\n\n1. **Command-Line Arguments**:\n   - The server accepts three command-line arguments: IP address, port number, and the path to the directory containing static files.\n\n2. **Server Setup**:\n   - The server creates a `ServerSocket` to listen on the specified IP address and port.\n   - It uses a `ExecutorService` with a fixed thread pool to handle multiple client connections concurrently.\n\n3. **Request Handling**:\n   - Each client connection is handled by a `ClientHandler` thread.\n   - The handler reads the HTTP request, parses the method (GET or POST), and the requested resource.\n\n4. **GET Request Handling**:\n   - For GET requests, the server serves static files from the specified directory.\n   - If the file exists, it is sent with the appropriate MIME type; otherwise, a 404 error is returned.\n\n5. **POST Request Handling**:\n   - For POST requests to `/upload`, the server reads the file content from the request.\n   - Computes the MD5 hash of the content and saves the file using this hash as the filename.\n   - Responds with a success message including the filename.\n\n6. **Error Handling**:\n   - Various error scenarios are handled, such as bad requests, file not found, and unsupported methods.\n   - Each error response includes an appropriate HTTP status code and message.\n\nThis implementation provides a basic framework for a multi-threaded HTTP server in Java, suitable for serving static files and handling file uploads."
    }
]