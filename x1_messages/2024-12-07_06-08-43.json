[
    {
        "role": "user",
        "content": "Write a Python script to implement a stack data structure using a linked list. The stack should support push, pop, and peek operations."
    },
    {
        "role": "assistant",
        "content": "Sure! Implementing a stack data structure using a linked list in Python is straightforward. A stack typically follows the Last In, First Out (LIFO) principle, meaning the last element added is the first one to be removed.\n\n### Approach\n\n1. **Node Class**: This class will represent each element in the linked list. Each node will have data and a reference to the next node.\n2. **Stack Class**: This class will manage the stack operations:\n   - `push`: Add an element to the top of the stack.\n   - `pop`: Remove the top element from the stack and return it.\n   - `peek`: Return the top element without removing it.\n   - `is_empty`: Check if the stack is empty.\n\n### Solution Code\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass Stack:\n    def __init__(self):\n        self.top = None\n\n    def is_empty(self):\n        return self.top is None\n\n    def push(self, data):\n        new_node = Node(data)\n        new_node.next = self.top\n        self.top = new_node\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"pop from empty stack\")\n        data = self.top.data\n        self.top = self.top.next\n        return data\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"peek from empty stack\")\n        return self.top.data\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(stack.peek())  # Output: 3\n    print(stack.pop())   # Output: 3\n    print(stack.pop())   # Output: 2\n    print(stack.pop())   # Output: 1\n    # Uncommenting the next line will raise an IndexError\n    # print(stack.pop())\n```\n\n### Explanation\n\n1. **Node Class**:\n   - Each node has a `data` attribute to store the value and a `next` attribute to point to the next node in the stack.\n\n2. **Stack Class**:\n   - Initializes with a `top` attribute set to `None`.\n   - `is_empty`: Checks if the stack is empty by verifying if `top` is `None`.\n   - `push`: Creates a new node with the given data and sets its `next` to the current `top`. Then, updates `top` to this new node.\n   - `pop`: Checks if the stack is empty and raises an error if it is. Otherwise, retrieves the data from the top node, updates `top` to the next node, and returns the data.\n   - `peek`: Similar to `pop`, but only returns the data without removing the node from the stack.\n\nThis implementation ensures that stack operations are efficient, with O(1) time complexity for push, pop, and peek operations."
    }
]