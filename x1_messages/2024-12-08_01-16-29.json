[
    {
        "role": "user",
        "content": "Create a Golang command-line tool that compresses and decompresses files using the gzip format. The tool should accept flags for specifying the input file, output file, and compression level.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Go command-line tool that can compress and decompress files using the gzip format. We'll make sure it accepts flags for input file, output file, and compression level. Sound good?\n\nFirst, you need to have Go installed on your machine. If you don't, you can download it from golang.org. Make sure to set up your GOPATH and add it to your system's PATH.\n\nLet's start by creating a new directory for our project. Open your terminal and run:\n\n```\nmkdir gzip-tool\ncd gzip-tool\n```\n\nNow, we'll initialize a new Go module:\n\n```\ngo mod init github.com/yourusername/gzip-tool\n```\n\nReplace \"yourusername\" with your actual GitHub username or whatever path you prefer.\n\nNext, we'll create a new Go file called \"main.go\":\n\n```\ntouch main.go\n```\n\nOpen \"main.go\" in your favorite text editor and let's start writing some code.\n\nFirst, we need to import the necessary packages. We'll need \"os\" for file operations, \"compress/gzip\" for gzip compression and decompression, and \"flag\" for handling command-line flags.\n\n```go\npackage main\n\nimport (\n\t\"compress/gzip\"\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"os\"\n)\n```\n\nNow, let's define the command-line flags. We'll have three flags:\n\n- \"input\" for the input file path\n\n- \"output\" for the output file path\n\n- \"level\" for the compression level (0-9)\n\n```go\nvar (\n\tinputFlag  = flag.String(\"input\", \"\", \"Input file path\")\n\toutputFlag = flag.String(\"output\", \"\", \"Output file path\")\n\tlevelFlag  = flag.Int(\"level\", gzip.DefaultCompression, \"Compression level (0-9)\")\n)\n```\n\nIn the \"main\" function, we'll parse the flags and check if the required flags are provided.\n\n```go\nfunc main() {\n\tflag.Parse()\n\n\tinput := *inputFlag\n\toutput := *outputFlag\n\tlevel := *levelFlag\n\n\tif input == \"\" || output == \"\" {\n\t\tfmt.Println(\"Both input and output flags are required.\")\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\n\tif level < gzip.NoCompression || level > gzip.BestCompression {\n\t\tfmt.Println(\"Compression level must be between 0 and 9.\")\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\n\terr := compressFile(input, output, level)\n\tif err != nil {\n\t\tfmt.Printf(\"Error compressing file: %v\\n\", err)\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Println(\"File compressed successfully.\")\n}\n```\n\nNow, let's implement the \"compressFile\" function. This function will open the input file, create a new output file, and use gzip to compress the data.\n\n```go\nfunc compressFile(input, output string, level int) error {\n\tinFile, err := os.Open(input)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\toutFile, err := os.Create(output)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\tgw, err := gzip.NewWriterLevel(outFile, level)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer gw.Close()\n\n\t_, err = io.Copy(gw, inFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn gw.Close()\n}\n```\n\nThat's pretty much it for the compression part. Now, if you want to add decompression functionality as well, we can do that by adding another flag or by inferring the operation based on the file extensions.\n\nLet's add another flag called \"decompress\" which, if set to true, will perform decompression instead of compression.\n\nFirst, add the \"decompress\" flag:\n\n```go\ndecompressFlag := flag.Bool(\"decompress\", false, \"Decompress the file\")\n```\n\nThen, in the \"main\" function, check if \"decompress\" is true and call a different function for decompression.\n\n```go\nfunc main() {\n\tflag.Parse()\n\n\tinput := *inputFlag\n\toutput := *outputFlag\n\tlevel := *levelFlag\n\tdecompress := *decompressFlag\n\n\tif input == \"\" || output == \"\" {\n\t\tfmt.Println(\"Both input and output flags are required.\")\n\t\tflag.PrintDefaults()\n\t\tos.Exit(1)\n\t}\n\n\tif decompress {\n\t\terr := decompressFile(input, output)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error decompressing file: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfmt.Println(\"File decompressed successfully.\")\n\t} else {\n\t\tif level < gzip.NoCompression || level > gzip.BestCompression {\n\t\t\tfmt.Println(\"Compression level must be between 0 and 9.\")\n\t\t\tflag.PrintDefaults()\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\terr := compressFile(input, output, level)\n\t\tif err != nil {\n\t\t\tfmt.Printf(\"Error compressing file: %v\\n\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\n\t\tfmt.Println(\"File compressed successfully.\")\n\t}\n}\n```\n\nNow, implement the \"decompressFile\" function. This function will open the input gzip file, create a new output file, and decompress the data.\n\n```go\nfunc decompressFile(input, output string) error {\n\tinFile, err := os.Open(input)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer inFile.Close()\n\n\treader, err := gzip.NewReader(inFile)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer reader.Close()\n\n\toutFile, err := os.Create(output)\n\tif err != nil {\n\t\treturn err\n\t}\n\tdefer outFile.Close()\n\n\t_, err = io.Copy(outFile, reader)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn outFile.Close()\n}\n```\n\nThat should cover both compression and decompression.\n\nTo build the tool, save your changes and run:\n\n```\ngo build -o gzip-tool\n```\n\nThis will create an executable named \"gzip-tool\" in the same directory.\n\nTo use the tool for compression:\n\n```\n./gzip-tool -input=input.txt -output=output.gz -level=5\n```\n\nTo use the tool for decompression:\n\n```\n./gzip-tool -input=input.gz -output=output.txt -decompress\n```\n\nMake sure to replace \"input.txt\", \"output.gz\", \"input.gz\", and \"output.txt\" with your actual file paths.\n\nThat's it! You've created a simple command-line tool in Go for gzip compression and decompression with adjustable compression levels.\n\nIf you have any questions or need further assistance, feel free to ask."
    }
]