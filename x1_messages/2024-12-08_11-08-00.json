[
    {
        "role": "user",
        "content": "Write a Golang program that implements the merge sort algorithm to sort an array of integers."
    },
    {
        "role": "assistant",
        "content": "Here's a Golang program that implements the merge sort algorithm to sort an array of integers:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc mergeSort(arr []int) []int {\n\tif len(arr) <= 1 {\n\t\treturn arr\n\t}\n\n\tmid := len(arr) / 2\n\tleft := mergeSort(arr[:mid])\n\tright := mergeSort(arr[mid:])\n\n\treturn merge(left, right)\n}\n\nfunc merge(left, right []int) []int {\n\tresult := make([]int, 0, len(left)+len(right))\n\ti, j := 0, 0\n\n\tfor i < len(left) && j < len(right) {\n\t\tif left[i] < right[j] {\n\t\t\tresult = append(result, left[i])\n\t\t\ti++\n\t\t} else {\n\t\t\tresult = append(result, right[j])\n\t\t\tj++\n\t\t}\n\t}\n\n\tresult = append(result, left[i:]...)\n\tresult = append(result, right[j:]...)\n\n\treturn result\n}\n\nfunc main() {\n\tarr := []int{38, 27, 43, 3, 9, 82, 10}\n\tfmt.Println(\"Original array:\", arr)\n\tsortedArr := mergeSort(arr)\n\tfmt.Println(\"Sorted array:\", sortedArr)\n}\n```\n\nThis program defines a `mergeSort` function that recursively divides the input array into smaller subarrays until they have a length of 1 or less. Then, it merges these subarrays back together in sorted order using the `merge` function.\n\nIn the `main` function, an example array is created and passed to `mergeSort`, and the sorted result is printed.\n\nTo run this program, save it to a file with a `.go` extension (e.g., `merge_sort.go`), and then execute it using the Go compiler:\n\n```\ngo run merge_sort.go\n```\n\nThis will output:\n\n```\nOriginal array: [38 27 43 3 9 82 10]\nSorted array: [3 9 10 27 38 43 82]\n```\n\n**Explanation**\n\n1. **Divide**: The `mergeSort` function splits the array into two halves until each subarray contains a single element.\n2. **Conquer**: The `merge` function combines these subarrays in sorted order.\n3. **Combine**: The sorted subarrays are merged back together to form the final sorted array.\n\nThis approach ensures that the array is sorted efficiently with a time complexity of O(n log n)."
    }
]