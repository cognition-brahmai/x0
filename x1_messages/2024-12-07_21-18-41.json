[
    {
        "role": "user",
        "content": "Develop a Python script that monitors CPU usage on your system every 5 seconds and logs it into a file named \"cpu_usage.log\". If the CPU usage exceeds 80% for more than 30 seconds, send an email notification to a specified address."
    },
    {
        "role": "assistant",
        "content": "I'm going to develop a Python script that monitors CPU usage on my system every 5 seconds and logs it into a file named \"cpu_usage.log\". If the CPU usage exceeds 80% for more than 30 seconds, it should send an email notification to a specified address. I'll need to use some Python libraries for this task, such as `psutil` to monitor CPU usage and `smtplib` to send emails.\n\nFirst, I need to install the `psutil` library if I don't have it already. I can install it using pip:\n\n```bash\npip install psutil\n```\n\nNext, I'll write the script. I need to monitor the CPU usage every 5 seconds and log it to a file. I also need to check if the CPU usage exceeds 80% for more than 30 seconds, which means I need to keep track of the time the CPU usage is above 80%.\n\nI'll use a loop that runs every 5 seconds, checks the CPU usage, logs it, and if it's above 80%, starts a timer. If the CPU usage remains above 80% for more than 30 seconds, it should send an email.\n\nI need to handle the timing properly. Since the loop runs every 5 seconds, I need to accumulate the time the CPU usage is above 80%. For example, if CPU usage is above 80% for two consecutive measurements (10 seconds), and then drops below 80%, I should reset the timer.\n\nI also need to handle the email sending part. I'll need to use the `smtplib` library to send an email. I'll need to specify the SMTP server, port, email address, and password.\n\nLet me outline the steps:\n\n1. Import necessary libraries: `psutil`, `time`, `smtplib`, `email.mime.text`.\n\n2. Define the log file name: \"cpu_usage.log\".\n\n3. Define the email parameters: recipient email, SMTP server, port, email address, password.\n\n4. Open the log file in append mode.\n\n5. Initialize variables: `threshold = 80`, `max_duration = 30` seconds, `over_threshold_time = 0`.\n\n6. Start an infinite loop:\n\na. Get the current CPU usage using `psutil.cpu_percent()`.\n\nb. Get the current time.\n\nc. Log the CPU usage and time to the log file.\n\nd. If CPU usage > threshold:\n\ni. If `over_threshold_time` is 0, start a timer.\n\nii. Add 5 seconds to `over_threshold_time`.\n\niii. If `over_threshold_time` > `max_duration`, send an email and reset `over_threshold_time` to 0.\n\ne. Else:\n\ni. Reset `over_threshold_time` to 0.\n\nf. Sleep for 5 seconds.\n\n7. Define a function to send an email:\n\na. Compose the email message.\n\nb. Connect to the SMTP server.\n\nc. Login with email address and password.\n\nd. Send the email.\n\ne. Disconnect from the server.\n\nI need to make sure that the email sending function is properly handled, especially concerning the SMTP server settings and authentication.\n\nAlso, I should handle exceptions in case the CPU usage cannot be retrieved or the email cannot be sent.\n\nLet me think about how to implement the timing. Since the loop runs every 5 seconds, I can assume that if the CPU usage is above the threshold, add 5 seconds to `over_threshold_time`. If it drops below the threshold, reset `over_threshold_time` to 0.\n\nHowever, if the loop doesn't run exactly every 5 seconds due to some delays, I should maybe use actual time stamps to calculate the duration more accurately.\n\nAlternatively, I can record the time when the CPU usage goes above the threshold and check the current time when it drops below or remains above.\n\nTo make it more accurate, I can record the start time when the CPU usage goes above the threshold and keep track of the duration in each loop iteration.\n\nLet me adjust the steps:\n\n6. Start an infinite loop:\n\na. Get the current CPU usage using `psutil.cpu_percent()`.\n\nb. Get the current time.\n\nc. Log the CPU usage and time to the log file.\n\nd. If CPU usage > threshold:\n\ni. If `over_threshold_time` is 0, set `start_time` to current time.\n\nii. Calculate the duration: current time - `start_time`.\n\niii. If duration > `max_duration`, send an email and reset `over_threshold_time` to 0.\n\ne. Else:\n\ni. Reset `over_threshold_time` to 0.\n\nf. Sleep for 5 seconds.\n\nWait, actually, in this case, `over_threshold_time` is not necessary. I can directly calculate the duration since the CPU usage went above the threshold.\n\nLet me define `start_time` and `over_threshold_time`.\n\nHere's a better approach:\n\n- Initialize `start_time` to None.\n\n- In the loop:\n\n- Check CPU usage.\n\n- If above threshold:\n\n- If `start_time` is None, set `start_time` to current time.\n\n- Else:\n\n- Calculate duration = current time - `start_time`.\n\n- If duration > `max_duration`, send email and set `start_time` to None.\n\n- Else, do nothing.\n\n- If below threshold:\n\n- Set `start_time` to None.\n\nThis way, I reset the timer every time the CPU usage drops below the threshold.\n\nI need to make sure that the time calculation is accurate. I can use the `time` module for this.\n\nLet me think about the logging part. I need to log the CPU usage and the timestamp to the file. I can use the `datetime` module to get a readable timestamp.\n\nAlso, I should consider the case where the log file becomes too large. Maybe I can rotate the log file or limit its size, but for simplicity, I'll just append to the file without any size limits.\n\nRegarding the email sending, I need to make sure that the email is sent only once when the duration exceeds 30 seconds, and then reset the timer. If the CPU usage remains above 80% for another 30 seconds after dropping below for a while, it should send another email.\n\nI need to handle the email sending carefully to avoid sending multiple emails in quick succession.\n\nLet me outline the final steps:\n\n1. Import required modules: `psutil`, `time`, `datetime`, `smtplib`, `email.mime.text`.\n\n2. Define constants: log file name, threshold percentage, maximum duration, email parameters.\n\n3. Open the log file in append mode.\n\n4. Initialize `start_time` to None.\n\n5. Start an infinite loop:\n\na. Get current CPU usage.\n\nb. Get current time.\n\nc. Log CPU usage and time to the file.\n\nd. If CPU usage > threshold:\n\ni. If `start_time` is None, set `start_time` to current time.\n\nii. Else:\n\n- Calculate duration = current time - `start_time`.\n\n- If duration > `max_duration`, send email and set `start_time` to None.\n\ne. Else:\n\ni. Set `start_time` to None.\n\nf. Sleep for 5 seconds.\n\n6. Define a function to send an email:\n\na. Compose the email message with CPU usage details.\n\nb. Connect to the SMTP server.\n\nc. Login with email credentials.\n\nd. Send the email.\n\ne. Disconnect from the server.\n\nI need to handle potential exceptions in both the main loop and the email sending function.\n\nLet me consider writing the script in a way that it can be stopped gracefully, maybe by capturing KeyboardInterrupt and closing the log file.\n\nAlso, I should consider using a more precise way to measure time, like using `time.time()` for timestamps.\n\nLet me think about the email content. It should include information about the high CPU usage, perhaps the current CPU usage percentage and the duration for which it has been high.\n\nI should also include some identification of the machine or the script, in case multiple instances are running.\n\nLet me plan to include the hostname in the email subject or body.\n\nI can use the `socket` module to get the hostname.\n\nAdditionally, I can log the email sending event to the log file to have a record of when notifications were sent.\n\nNow, let's think about implementing this.\n\nFirst, import the necessary modules:\n\n```python\nimport psutil\nimport time\nimport datetime\nimport smtplib\nfrom email.mime.text import MIMEText\nimport socket\n```\n\nDefine the constants:\n\n```python\nLOG_FILE = \"cpu_usage.log\"\nTHRESHOLD = 80\nMAX_DURATION = 30  # in seconds\nRECIPIENT_EMAIL = \"your_email@example.com\"\nSMTP_SERVER = \"smtp.example.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your_email@example.com\"\nEMAIL_PASSWORD = \"your_password\"\n```\n\nOpen the log file:\n\n```python\nlog_file = open(LOG_FILE, 'a')\n```\n\nInitialize the start time:\n\n```python\nstart_time = None\n```\n\nDefine the email sending function:\n\n```python\ndef send_email(subject, body):\n    msg = MIMEText(body)\n    msg['Subject'] = subject\n    msg['From'] = EMAIL_ADDRESS\n    msg['To'] = RECIPIENT_EMAIL\n\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)\n        server.sendmail(EMAIL_ADDRESS, [RECIPIENT_EMAIL], msg.as_string())\n        server.quit()\n        log_file.write(f\"{datetime.datetime.now()}: Email sent: {subject}\\n\")\n    except Exception as e:\n        log_file.write(f\"{datetime.datetime.now()}: Failed to send email: {e}\\n\")\n```\n\nStart the infinite loop:\n\n```python\ntry:\n    while True:\n        cpu_usage = psutil.cpu_percent()\n        current_time = time.time()\n        log_file.write(f\"{datetime.datetime.now()}: CPU Usage: {cpu_usage}%\\n\")\n        log_file.flush()\n\n        if cpu_usage > THRESHOLD:\n            if start_time is None:\n                start_time = current_time\n            else:\n                duration = current_time - start_time\n                if duration > MAX_DURATION:\n                    subject = f\"High CPU Usage Alert on {socket.gethostname()}\"\n                    body = f\"CPU usage has been above {THRESHOLD}% for more than {MAX_DURATION} seconds.\\n\\nCurrent CPU Usage: {cpu_usage}%\\nTime: {datetime.datetime.now()}\"\n                    send_email(subject, body)\n                    start_time = None  # Reset start_time after sending email\n        else:\n            start_time = None  # Reset start_time if CPU usage drops below threshold\n\n        time.sleep(5)\nexcept KeyboardInterrupt:\n    log_file.close()\n    print(\"Monitoring stopped.\")\n```\n\nThis script will monitor the CPU usage every 5 seconds, log it to \"cpu_usage.log\", and send an email if the CPU usage exceeds 80% for more than 30 seconds.\n\nI need to make sure to replace the email and SMTP settings with actual values.\n\nAlso, handling the email password is a security concern. In a production environment, I should use environment variables or a secure way to store credentials.\n\nAdditionally, using `time.time()` for timing is fine, but if higher precision is needed, I could use `time.perf_counter()` or `time.process_time()`.\n\nI should also consider the timezone settings for the timestamps to ensure they are consistent.\n\nFinally, I should test the script to make sure it logs correctly and sends emails when the CPU usage exceeds the threshold for the specified duration.\n\n## Final Solution\nTo monitor CPU usage and send email notifications when usage exceeds 80% for more than 30 seconds, use the following Python script. Ensure to replace placeholders for email and SMTP settings with actual values.\n\n### Solution Code\n\n```python\nimport psutil\nimport time\nimport datetime\nimport smtplib\nfrom email.mime.text import MIMEText\nimport socket\n\n# Constants\nLOG_FILE = \"cpu_usage.log\"\nTHRESHOLD = 80\nMAX_DURATION = 30  # in seconds\nRECIPIENT_EMAIL = \"your_email@example.com\"\nSMTP_SERVER = \"smtp.example.com\"\nSMTP_PORT = 587\nEMAIL_ADDRESS = \"your_email@example.com\"\nEMAIL_PASSWORD = \"your_password\"\n\n# Open log file\nlog_file = open(LOG_FILE, 'a')\n\n# Initialize start time\nstart_time = None\n\ndef send_email(subject, body):\n    msg = MIMEText(body)\n    msg['Subject'] = subject\n    msg['From'] = EMAIL_ADDRESS\n    msg['To'] = RECIPIENT_EMAIL\n\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)\n        server.sendmail(EMAIL_ADDRESS, [RECIPIENT_EMAIL], msg.as_string())\n        server.quit()\n        log_file.write(f\"{datetime.datetime.now()}: Email sent: {subject}\\n\")\n    except Exception as e:\n        log_file.write(f\"{datetime.datetime.now()}: Failed to send email: {e}\\n\")\n\ntry:\n    while True:\n        cpu_usage = psutil.cpu_percent()\n        current_time = time.time()\n        log_file.write(f\"{datetime.datetime.now()}: CPU Usage: {cpu_usage}%\\n\")\n        log_file.flush()\n\n        if cpu_usage > THRESHOLD:\n            if start_time is None:\n                start_time = current_time\n            else:\n                duration = current_time - start_time\n                if duration > MAX_DURATION:\n                    subject = f\"High CPU Usage Alert on {socket.gethostname()}\"\n                    body = f\"CPU usage has been above {THRESHOLD}% for more than {MAX_DURATION} seconds.\\n\\nCurrent CPU Usage: {cpu_usage}%\\nTime: {datetime.datetime.now()}\"\n                    send_email(subject, body)\n                    start_time = None  # Reset start_time after sending email\n        else:\n            start_time = None  # Reset start_time if CPU usage drops below threshold\n\n        time.sleep(5)\nexcept KeyboardInterrupt:\n    log_file.close()\n    print(\"Monitoring stopped.\")\n```\n\n### Explanation\n\n1. **Monitoring CPU Usage**: The script uses the `psutil` library to monitor CPU usage every 5 seconds.\n2. **Logging**: It logs the CPU usage along with a timestamp to \"cpu_usage.log\".\n3. **Threshold Check**: If CPU usage exceeds 80% for more than 30 seconds, it triggers an email notification.\n4. **Email Notification**: Uses `smtplib` to send an email via specified SMTP server and port.\n5. **Graceful Exit**: The loop can be stopped with a `KeyboardInterrupt` (Ctrl+C), ensuring the log file is closed properly.\n\n### Requirements\n\n- Install `psutil` library using `pip install psutil`.\n- Replace placeholder email and SMTP settings with actual values.\n- Ensure the script has permissions to access the SMTP server and log file directory."
    }
]