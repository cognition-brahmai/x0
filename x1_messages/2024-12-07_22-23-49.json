[
    {
        "role": "user",
        "content": "Write a Python script that interacts with Azure Blob Storage to upload a local file, list all files in a container, download a specific file, and delete a specific file. The script should use command line arguments for specifying the required operation and any necessary parameters.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've been asked to create a Python script that interacts with Azure Blob Storage. The script needs to be able to upload a local file, list all files in a container, download a specific file, and delete a specific file. It should also use command line arguments to specify the operation and any required parameters.\n\nFirst things first, I need to make sure I have the necessary libraries installed. For interacting with Azure Blob Storage, I'll need the `azure-storage-blob` library. I can install it using pip if it's not already installed.\n\nI should also think about how to structure the script. Since it needs to handle different operations based on command line arguments, it's a good idea to use the `argparse` module to handle these arguments nicely. This will make the script user-friendly and easy to understand.\n\nLet me outline the steps I need to take:\n\n1. **Upload a local file to Azure Blob Storage:**\n   - Connect to the Azure Blob Storage account.\n   - Select the container where the file will be uploaded.\n   - Upload the local file to the container.\n\n2. **List all files in a container:**\n   - Connect to the Azure Blob Storage account.\n   - Select the container.\n   - List all the blobs (files) in the container.\n\n3. **Download a specific file from a container:**\n   - Connect to the Azure Blob Storage account.\n   - Select the container.\n   - Download the specified blob to a local file.\n\n4. **Delete a specific file from a container:**\n   - Connect to the Azure Blob Storage account.\n   - Select the container.\n   - Delete the specified blob.\n\nFor each of these operations, I'll need to provide necessary parameters via command line arguments. For example, for uploading, I'll need the local file path and the blob name. For listing, just the container name. For downloading, the container name and the blob name, and the local download path. Similarly for deleting, the container name and the blob name.\n\nI should also consider error handling, like checking if the local file exists before uploading, or if the blob exists before downloading or deleting.\n\nAnother important aspect is handling credentials securely. Azure Blob Storage requires credentials to access, typically in the form of a connection string or account key. I need to make sure that these credentials are handled securely and not hard-coded into the script.\n\nPerhaps I can use environment variables to store the connection string, so that it's not exposed in the script or command line.\n\nLet me start by setting up the basic structure of the script using `argparse`.\n\nI'll define subcommands for each operation: upload, list, download, delete. This way, the script can be called with, say, `python azure_blob.py upload -s localfile.txt -b blobname.txt -c mycontainer`, and similarly for other operations.\n\nHere's a rough sketch of how the argparse part might look:\n\n```python\nimport argparse\n\nparser = argparse.ArgumentParser(description='Azure Blob Storage Manager')\nsubparsers = parser.add_subparsers(dest='operation', help='Operation to perform')\n\n# Upload subcommand\nupload_parser = subparsers.add_parser('upload', help='Upload a file to Azure Blob Storage')\nupload_parser.add_argument('-s', '--source', required=True, help='Local file path to upload')\nupload_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to upload to')\nupload_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n# List subcommand\nlist_parser = subparsers.add_parser('list', help='List files in a container')\nlist_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n# Download subcommand\ndownload_parser = subparsers.add_parser('download', help='Download a file from Azure Blob Storage')\ndownload_parser.add_argument('-c', '--container', required=True, help='Container name')\ndownload_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to download')\ndownload_parser.add_argument('-d', '--destination', required=True, help='Local destination path')\n\n# Delete subcommand\ndelete_parser = subparsers.add_parser('delete', help='Delete a file from Azure Blob Storage')\ndelete_parser.add_argument('-c', '--container', required=True, help='Container name')\ndelete_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to delete')\n\nargs = parser.parse_args()\n```\n\nNow, I need to handle each operation based on the value of `args.operation`.\n\nBefore diving into each operation, I should set up a function to establish a connection to the Azure Blob Storage account. This likely involves creating a `BlobServiceClient` using the connection string.\n\nI can store the connection string in an environment variable for security reasons. Python's `os` module can be used to access environment variables.\n\nSo, at the top of the script, I can have something like:\n\n```python\nimport os\nfrom azure.storage.blob import BlobServiceClient\n\nconnection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\nif not connection_string:\n    raise ValueError(\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set.\")\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\n```\n\nNow, for each operation:\n\n**Upload:**\n\n- Check if the local file exists.\n- Get the container client.\n- Create the blob client.\n- Upload the file.\n\nI can write a function like this:\n\n```python\ndef upload_file(local_path, container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"rb\") as data:\n        blob_client.upload_blob(data)\n```\n\n**List:**\n\n- Get the container client.\n- List the blobs and print their names.\n\nFunction:\n\n```python\ndef list_blobs(container_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blobs = container_client.list_blobs()\n    for blob in blobs:\n        print(blob.name)\n```\n\n**Download:**\n\n- Get the container client.\n- Get the blob client.\n- Download the blob to a local file.\n\nFunction:\n\n```python\ndef download_file(container_name, blob_name, local_path):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"wb\") as my_blob:\n        download_stream = blob_client.download_blob()\n        my_blob.write(download_stream.readall())\n```\n\n**Delete:**\n\n- Get the container client.\n- Get the blob client.\n- Delete the blob.\n\nFunction:\n\n```python\ndef delete_file(container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    blob_client.delete_blob()\n```\n\nNow, in the main part of the script, I can call the appropriate function based on the operation specified in the command line arguments.\n\nPutting it all together, the script might look like this:\n\n```python\nimport os\nimport argparse\nfrom azure.storage.blob import BlobServiceClient\n\ndef upload_file(local_path, container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"rb\") as data:\n        blob_client.upload_blob(data)\n\ndef list_blobs(container_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blobs = container_client.list_blobs()\n    for blob in blobs:\n        print(blob.name)\n\ndef download_file(container_name, blob_name, local_path):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"wb\") as my_blob:\n        download_stream = blob_client.download_blob()\n        my_blob.write(download_stream.readall())\n\ndef delete_file(container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    blob_client.delete_blob()\n\ndef main():\n    parser = argparse.ArgumentParser(description='Azure Blob Storage Manager')\n    subparsers = parser.add_subparsers(dest='operation', help='Operation to perform')\n\n    # Upload subcommand\n    upload_parser = subparsers.add_parser('upload', help='Upload a file to Azure Blob Storage')\n    upload_parser.add_argument('-s', '--source', required=True, help='Local file path to upload')\n    upload_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to upload to')\n    upload_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n    # List subcommand\n    list_parser = subparsers.add_parser('list', help='List files in a container')\n    list_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n    # Download subcommand\n    download_parser = subparsers.add_parser('download', help='Download a file from Azure Blob Storage')\n    download_parser.add_argument('-c', '--container', required=True, help='Container name')\n    download_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to download')\n    download_parser.add_argument('-d', '--destination', required=True, help='Local destination path')\n\n    # Delete subcommand\n    delete_parser = subparsers.add_parser('delete', help='Delete a file from Azure Blob Storage')\n    delete_parser.add_argument('-c', '--container', required=True, help='Container name')\n    delete_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to delete')\n\n    args = parser.parse_args()\n\n    if args.operation == 'upload':\n        upload_file(args.source, args.container, args.blob)\n    elif args.operation == 'list':\n        list_blobs(args.container)\n    elif args.operation == 'download':\n        download_file(args.container, args.blob, args.destination)\n    elif args.operation == 'delete':\n        delete_file(args.container, args.blob)\n    else:\n        parser.error('Invalid operation')\n\nif __name__ == '__main__':\n    connection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\n    if not connection_string:\n        raise ValueError(\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set.\")\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n    main()\n```\n\nThis script provides a basic interface to perform common operations on Azure Blob Storage using command line arguments. It's important to handle exceptions and add more detailed error messages for a production-level script, but this should serve as a good starting point.\n\n## Final Solution\nTo interact with Azure Blob Storage using Python, you can use the `azure-storage-blob` library. This script provides functionalities to upload, list, download, and delete files in a Blob Storage container using command-line arguments.\n\n### Prerequisites\n\n1. **Install the required library**:\n   ```bash\n   pip install azure-storage-blob\n   ```\n\n2. **Set up your Azure Blob Storage connection string** as an environment variable:\n   ```bash\n   export AZURE_STORAGE_CONNECTION_STRING=\"<your-connection-string>\"\n   ```\n\n### Solution Code\n\n```python\nimport os\nimport argparse\nfrom azure.storage.blob import BlobServiceClient\n\ndef upload_file(local_path, container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"rb\") as data:\n        blob_client.upload_blob(data)\n\ndef list_blobs(container_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blobs = container_client.list_blobs()\n    for blob in blobs:\n        print(blob.name)\n\ndef download_file(container_name, blob_name, local_path):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    with open(local_path, \"wb\") as my_blob:\n        download_stream = blob_client.download_blob()\n        my_blob.write(download_stream.readall())\n\ndef delete_file(container_name, blob_name):\n    container_client = blob_service_client.get_container_client(container_name)\n    blob_client = container_client.get_blob_client(blob_name)\n    blob_client.delete_blob()\n\ndef main():\n    parser = argparse.ArgumentParser(description='Azure Blob Storage Manager')\n    subparsers = parser.add_subparsers(dest='operation', help='Operation to perform')\n\n    # Upload subcommand\n    upload_parser = subparsers.add_parser('upload', help='Upload a file to Azure Blob Storage')\n    upload_parser.add_argument('-s', '--source', required=True, help='Local file path to upload')\n    upload_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to upload to')\n    upload_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n    # List subcommand\n    list_parser = subparsers.add_parser('list', help='List files in a container')\n    list_parser.add_argument('-c', '--container', required=True, help='Container name')\n\n    # Download subcommand\n    download_parser = subparsers.add_parser('download', help='Download a file from Azure Blob Storage')\n    download_parser.add_argument('-c', '--container', required=True, help='Container name')\n    download_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to download')\n    download_parser.add_argument('-d', '--destination', required=True, help='Local destination path')\n\n    # Delete subcommand\n    delete_parser = subparsers.add_parser('delete', help='Delete a file from Azure Blob Storage')\n    delete_parser.add_argument('-c', '--container', required=True, help='Container name')\n    delete_parser.add_argument('-b', '--blob', required=True, help='Name of the blob to delete')\n\n    args = parser.parse_args()\n\n    if args.operation == 'upload':\n        upload_file(args.source, args.container, args.blob)\n    elif args.operation == 'list':\n        list_blobs(args.container)\n    elif args.operation == 'download':\n        download_file(args.container, args.blob, args.destination)\n    elif args.operation == 'delete':\n        delete_file(args.container, args.blob)\n    else:\n        parser.error('Invalid operation')\n\nif __name__ == '__main__':\n    connection_string = os.getenv('AZURE_STORAGE_CONNECTION_STRING')\n    if not connection_string:\n        raise ValueError(\"AZURE_STORAGE_CONNECTION_STRING environment variable is not set.\")\n    blob_service_client = BlobServiceClient.from_connection_string(connection_string)\n    main()\n```\n\n### Usage\n\n1. **Upload a file**:\n   ```bash\n   python azure_blob.py upload -s /path/to/localfile.txt -b blobname.txt -c mycontainer\n   ```\n\n2. **List files in a container**:\n   ```bash\n   python azure_blob.py list -c mycontainer\n   ```\n\n3. **Download a file**:\n   ```bash\n   python azure_blob.py download -c mycontainer -b blobname.txt -d /path/to/downloadedfile.txt\n   ```\n\n4. **Delete a file**:\n   ```bash\n   python azure_blob.py delete -c mycontainer -b blobname.txt\n   ```\n\nThis script provides a simple and effective way to manage files in Azure Blob Storage directly from the command line."
    }
]