[
    {
        "role": "user",
        "content": "Write a Python program that simulates a simple command-line calculator. It should accept arithmetic expressions as input and return the result. Ensure proper error handling for invalid inputs. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, here's a simple Python program that acts as a command-line calculator. It can handle basic arithmetic operations like addition, subtraction, multiplication, and division. The program includes error handling to manage invalid inputs gracefully.\n\n```python\ndef main():\n    print(\"Simple Command-Line Calculator\")\n    print(\"Enter 'quit' to exit.\")\n    \n    while True:\n        user_input = input(\"Enter an arithmetic expression: \")\n        \n        if user_input.lower() == 'quit':\n            break\n        \n        try:\n            result = eval(user_input)\n            print(\"Result:\", result)\n        except Exception as e:\n            print(\"Error:\", e)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n1. **Main Function**:\n   - The program starts by printing a welcome message and instructions.\n   - It enters a loop that continuously prompts the user to enter an arithmetic expression.\n   \n2. **User Input Handling**:\n   - If the user enters 'quit', the loop breaks, and the program ends.\n   - The `eval()` function is used to evaluate the arithmetic expression provided by the user.\n   - If the expression is valid, it prints the result; otherwise, it catches any exceptions and prints an error message.\n\n3. **Error Handling**:\n   - The `try-except` block ensures that any invalid expressions (e.g., division by zero, syntax errors) are handled gracefully, preventing the program from crashing.\n\nThis program is straightforward and effective for basic calculations directly from the command line."
    }
]