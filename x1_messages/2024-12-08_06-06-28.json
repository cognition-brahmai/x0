[
    {
        "role": "user",
        "content": "Create a JavaScript function that takes an array of integers and returns an object containing the following statistics: minimum value, maximum value, average, and median. Write unit tests for this function using the Jest testing framework.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a JavaScript function that calculates some statistics from an array of integers: minimum, maximum, average, and median. And then, I need to write unit tests for it using Jest. Okay, let's break this down.\n\nFirst, I need to write the function. It should take an array of integers as input and return an object with four properties: min, max, average, and median.\n\nSo, starting with the min and max. In JavaScript, arrays have methods for that: Math.min.apply and Math.max.apply, but I've heard that using the spread operator is better nowadays. So, something like Math.min(...array) and Math.max(...array).\n\nNext, the average. That's the sum of all elements divided by the number of elements. I can use the reduce method to sum up the array elements and then divide by the length of the array.\n\nFinally, the median. That's a bit trickier. The median is the middle value when the array is sorted. If the array has an odd number of elements, the median is the middle one. If it's even, it's the average of the two middle numbers.\n\nSo, I need to sort the array first. Then, check if the length is odd or even and calculate accordingly.\n\nLet me think about edge cases. What if the array is empty? Maybe I should handle that by returning null or throwing an error. But for now, I'll assume the array has at least one element.\n\nAlso, I need to make sure that the input is indeed an array of integers. Maybe add some validation, but to keep it simple, I'll assume the input is correct.\n\nAlright, let's sketch out the function:\n\n```javascript\nfunction calculateStats(arr) {\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const average = sum / arr.length;\n\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  let median;\n  if (sorted.length % 2 === 0) {\n    median = (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    median = sorted[mid];\n  }\n\n  return { min, max, average, median };\n}\n```\n\nOkay, that looks good. Now, I need to write unit tests for this function using Jest.\n\nFirst, I need to set up a test file, probably name it calculateStats.test.js.\n\nIn Jest, I can use the test function to define test cases, and expect statements to check if the function returns the correct values.\n\nLet me think about some test cases.\n\n1. Basic case with odd number of elements:\n\n- Input: [1, 2, 3, 4, 5]\n\n- Expected: { min: 1, max: 5, average: 3, median: 3 }\n\n2. Basic case with even number of elements:\n\n- Input: [1, 2, 3, 4]\n\n- Expected: { min: 1, max: 4, average: 2.5, median: 2.5 }\n\n3. Array with negative numbers:\n\n- Input: [-3, -1, -2]\n\n- Expected: { min: -3, max: -1, average: -2, median: -2 }\n\n4. Array with all elements same:\n\n- Input: [5, 5, 5, 5]\n\n- Expected: { min: 5, max: 5, average: 5, median: 5 }\n\n5. Array with single element:\n\n- Input: [10]\n\n- Expected: { min: 10, max: 10, average: 10, median: 10 }\n\nI should also test for empty arrays, but as I mentioned earlier, I'll assume the array has at least one element. Maybe I'll add a test for empty array and see what happens.\n\nAlright, let's write the test cases.\n\nFirst, I need to import the function:\n\n```javascript\nconst calculateStats = require('./calculateStats');\n```\n\nThen, define the test cases:\n\n```javascript\ntest('calculates stats for odd number of elements', () => {\n  const arr = [1, 2, 3, 4, 5];\n  const expected = { min: 1, max: 5, average: 3, median: 3 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for even number of elements', () => {\n  const arr = [1, 2, 3, 4];\n  const expected = { min: 1, max: 4, average: 2.5, median: 2.5 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for negative numbers', () => {\n  const arr = [-3, -1, -2];\n  const expected = { min: -3, max: -1, average: -2, median: -2 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for all elements same', () => {\n  const arr = [5, 5, 5, 5];\n  const expected = { min: 5, max: 5, average: 5, median: 5 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for single element', () => {\n  const arr = [10];\n  const expected = { min: 10, max: 10, average: 10, median: 10 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('handles empty array', () => {\n  const arr = [];\n  expect(() => calculateStats(arr)).toThrow();\n});\n```\n\nIn the last test case, for empty array, I'm expecting the function to throw an error. So, I'll need to modify the function to handle this case.\n\nLet me update the function to check if the array is empty and throw an error if it is.\n\n```javascript\nfunction calculateStats(arr) {\n  if (arr.length === 0) {\n    throw new Error('Array must not be empty');\n  }\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const average = sum / arr.length;\n\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  let median;\n  if (sorted.length % 2 === 0) {\n    median = (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    median = sorted[mid];\n  }\n\n  return { min, max, average, median };\n}\n```\n\nOkay, now the function will throw an error for empty arrays, and my test case should pass.\n\nI should also consider if the array contains non-integer values, but since the task assumes the input is an array of integers, I'll skip adding tests for that.\n\nAlright, I think this covers the basic scenarios. I can run these tests using Jest to make sure everything works as expected.\n\n## Final Solution\nTo solve this problem, we need to create a JavaScript function that computes statistics (minimum, maximum, average, and median) from an array of integers and then write unit tests for this function using the Jest framework.\n\n### Approach\n\n1. **Function Implementation:**\n   - **Minimum and Maximum:** Use `Math.min` and `Math.max` with the spread operator.\n   - **Average:** Calculate the sum of the array using `reduce` and divide by the number of elements.\n   - **Median:** Sort the array and find the middle value(s). If the array length is odd, return the middle value; if even, return the average of the two middle values.\n   - **Error Handling:** Throw an error if the input array is empty.\n\n2. **Unit Tests:**\n   - Test various scenarios including odd and even numbers of elements, negative numbers, identical elements, and single-element arrays.\n   - Use Jest's `test` function and `expect` statements to verify the function's output.\n\n### Solution Code\n\n#### Statistics Function\n\n```javascript\nfunction calculateStats(arr) {\n  if (arr.length === 0) {\n    throw new Error('Array must not be empty');\n  }\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const average = sum / arr.length;\n\n  const sorted = arr.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sorted.length / 2);\n  let median;\n  if (sorted.length % 2 === 0) {\n    median = (sorted[mid - 1] + sorted[mid]) / 2;\n  } else {\n    median = sorted[mid];\n  }\n\n  return { min, max, average, median };\n}\n\nmodule.exports = calculateStats;\n```\n\n#### Unit Tests with Jest\n\n```javascript\nconst calculateStats = require('./calculateStats');\n\ntest('calculates stats for odd number of elements', () => {\n  const arr = [1, 2, 3, 4, 5];\n  const expected = { min: 1, max: 5, average: 3, median: 3 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for even number of elements', () => {\n  const arr = [1, 2, 3, 4];\n  const expected = { min: 1, max: 4, average: 2.5, median: 2.5 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for negative numbers', () => {\n  const arr = [-3, -1, -2];\n  const expected = { min: -3, max: -1, average: -2, median: -2 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for all elements same', () => {\n  const arr = [5, 5, 5, 5];\n  const expected = { min: 5, max: 5, average: 5, median: 5 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('calculates stats for single element', () => {\n  const arr = [10];\n  const expected = { min: 10, max: 10, average: 10, median: 10 };\n  expect(calculateStats(arr)).toEqual(expected);\n});\n\ntest('handles empty array', () => {\n  const arr = [];\n  expect(() => calculateStats(arr)).toThrow('Array must not be empty');\n});\n```\n\n### Explanation\n\n- **Function Implementation:**\n  - The function first checks if the array is empty and throws an error if it is.\n  - It computes the minimum and maximum values using the spread operator with `Math.min` and `Math.max`.\n  - The average is calculated by summing the array elements using `reduce` and dividing by the array length.\n  - The median is determined by sorting the array and finding the middle value(s), handling both even and odd lengths.\n\n- **Unit Tests:**\n  - Each test case checks a specific scenario to ensure the function behaves correctly under different conditions.\n  - The tests cover arrays with odd and even lengths, negative numbers, identical elements, single elements, and an empty array.\n  - Jest's `expect` statements use `toEqual` to compare the function's output with expected results and `toThrow` to verify error handling."
    }
]