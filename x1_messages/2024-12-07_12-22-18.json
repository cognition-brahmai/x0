[
    {
        "role": "user",
        "content": "Create a Golang web server that listens on a specified port and serves static files from a given directory. The server should also provide endpoints for uploading new files and listing all available files.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple web server in Golang that serves static files, allows uploading new files, and lists all available files. Sounds straightforward!\n\nFirst, make sure you have Go installed on your machine. You can download it from golang.org if you haven't already.\n\nWe'll use Gorilla Mux for routing and net/http for handling HTTP requests and serving files. So, you'll need to install those packages if you don't have them yet. You can install them using:\n\n```sh\ngo get -u github.com/gorilla/mux\n```\n\nNow, let's plan this out:\n\n1. **Serve Static Files:** We need to serve files from a specific directory. Let's call this directory \"static\".\n\n2. **Upload New Files:** We'll need an endpoint where users can upload files. Let's use `/upload` for this purpose.\n\n3. **List All Files:** We'll have another endpoint to list all files in the \"static\" directory. Let's use `/files` for this.\n\nLet's start by setting up the basic structure of the server.\n\n## Step 1: Set Up the Server\n\nCreate a new Go file, say `main.go`.\n\nImport the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"io\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"path/filepath\"\n\n\t\"github.com/gorilla/mux\"\n)\n```\n\nDefine some constants for clarity:\n\n```go\nconst (\n\tport     = \":8080\"\n\tstaticDir = \"static\"\n)\n```\n\nSet up the router and define the routes:\n\n```go\nfunc main() {\n\trouter := mux.NewRouter()\n\trouter.HandleFunc(\"/upload\", uploadFile).Methods(\"POST\")\n\trouter.HandleFunc(\"/files\", listFiles).Methods(\"GET\")\n\trouter.PathPrefix(\"/\").Handler(http.FileServer(http.Dir(staticDir)))\n\n\tlog.Println(\"Server starting on port\", port)\n\tlog.Fatal(http.ListenAndServe(port, router))\n}\n```\n\nHere, we're using Gorilla Mux for routing and setting up three routes:\n\n- POST /upload: For uploading files.\n\n- GET /files: For listing files.\n\n- Any other path: Serve static files from the \"static\" directory.\n\n## Step 2: Implement File Upload\n\nNow, let's implement the `uploadFile` function.\n\nThis function will handle file uploads. It needs to read the uploaded file from the request and save it to the \"static\" directory.\n\n```go\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n\tr.ParseMultipartForm(10 << 20) // Set max upload size to 10MB\n\n\tfile, handler, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusBadRequest)\n\t\tfmt.Fprint(w, \"Error retrieving file from form-data\")\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\tfmt.Printf(\"Uploading File: %s\\n\", handler.Filename)\n\n\tfilePath := filepath.Join(staticDir, handler.Filename)\n\n\tout, err := os.Create(filePath)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error creating file on server\")\n\t\treturn\n\t}\n\tdefer out.Close()\n\n\t_, err = io.Copy(out, file)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error saving file\")\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusCreated)\n\tfmt.Fprint(w, \"File uploaded successfully\")\n}\n```\n\n## Step 3: Implement File Listing\n\nNext, implement the `listFiles` function to list all files in the \"static\" directory.\n\n```go\nfunc listFiles(w http.ResponseWriter, r *http.Request) {\n\tfiles, err := os.ReadDir(staticDir)\n\tif err != nil {\n\t\tw.WriteHeader(http.StatusInternalServerError)\n\t\tfmt.Fprint(w, \"Error reading directory\")\n\t\treturn\n\t}\n\n\tfileNames := make([]string, 0, len(files))\n\tfor _, file := range files {\n\t\tif file.IsDir() {\n\t\t\tcontinue // Skip directories, only list files\n\t\t}\n\t\tfileNames = append(fileNames, file.Name())\n\t}\n\n\tfmt.Fprintf(w, \"Files available:\\n%s\", strings.Join(fileNames, \"\\n\"))\n}\n```\n\n## Step 4: Run the Server\n\nMake sure you have a \"static\" directory in your project folder. If not, create one.\n\nNow, run your server:\n\n```sh\ngo run main.go\n```\n\nYour server should now be running on port 8080.\n\n## Testing the Server\n\n1. **Upload a File:**\n\n   Use curl or a tool like Postman to upload a file to `http://localhost:8080/upload`.\n\n   Example with curl:\n\n   ```sh\n   curl -F \"file=@path/to/your/file.txt\" http://localhost:8080/upload\n   ```\n\n2. **List Files:**\n\n   Access `http://localhost:8080/files` in your browser or using curl to see the list of files.\n\n3. **Serve Static Files:**\n\n   Access `http://localhost:8080/filename` to serve a specific file from the \"static\" directory.\n\nThat's it! You've created a simple web server in Golang that serves static files, allows file uploads, and lists available files.\n\n## Improvements\n\n- **Error Handling:** Add more robust error handling.\n\n- **File Overwrites:** Handle file name conflicts or allow overwriting.\n\n- **Security:** Validate and sanitize file names to prevent directory traversal attacks.\n\n- **Configuration:** Allow configuration of port and static directory via environment variables.\n\n- **Logging:** Implement proper logging for better monitoring and debugging.\n\nThis should give you a good starting point. Let me know if you have any questions or need further assistance!"
    }
]