[
    {
        "role": "user",
        "content": "Write a C++ program that implements a basic image processing library capable of performing operations like resizing, cropping, and rotating images. The program should also support reading and writing image files in popular formats like JPEG, PNG, and BMP.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a full-fledged image processing library from scratch in C++ is a complex task, especially considering the variety of image formats and operations involved. However, I can guide you through creating a basic image processing library using existing libraries for handling image file formats and performing operations like resizing, cropping, and rotating images.\n\nFor this purpose, we'll use the OpenCV library, which is a widely used, open-source computer vision library that provides extensive functionality for image and video processing. OpenCV supports reading and writing various image formats, including JPEG, PNG, and BMP, and offers functions for resizing, cropping, and rotating images.\n\n### Step 1: Installing OpenCV\n\nFirst, you need to install OpenCV on your system. The installation process varies depending on your operating system.\n\n#### On Ubuntu:\n\nYou can install OpenCV using the following command:\n\n```bash\nsudo apt-get install libopencv-dev\n```\n\n#### On Windows:\n\nYou can download and install OpenCV from the official website or use a package manager like vcpkg.\n\n### Step 2: Setting Up the Project\n\nCreate a new C++ project in your preferred IDE or text editor. Make sure to link the OpenCV libraries in your project settings.\n\n### Step 3: Implementing Image Operations\n\nWe'll create a simple C++ program that demonstrates how to read an image, perform operations like resizing, cropping, and rotating, and then save the processed image.\n\n#### Example Code:\n\n```cpp\n#include <opencv2/opencv.hpp>\n#include <iostream>\n\nint main(int argc, char** argv)\n{\n    if (argc != 2)\n    {\n        std::cout << \"Usage: ./image_processing input_image.jpg\" << std::endl;\n        return -1;\n    }\n\n    // Read the image file\n    cv::Mat image = cv::imread(argv[1], cv::IMREAD_COLOR);\n    if (image.empty())\n    {\n        std::cout << \"Error: Could not open or find the image.\" << std::endl;\n        return -1;\n    }\n\n    // Display the original image\n    cv::imshow(\"Original Image\", image);\n    cv::waitKey(0);\n\n    // Resizing the image\n    cv::Size new_size(300, 300);\n    cv::Mat resized_image;\n    cv::resize(image, resized_image, new_size);\n    cv::imshow(\"Resized Image\", resized_image);\n    cv::waitKey(0);\n\n    // Cropping the image\n    cv::Rect roi(50, 50, 200, 200); // Region of Interest\n    cv::Mat cropped_image = image(roi);\n    cv::imshow(\"Cropped Image\", cropped_image);\n    cv::waitKey(0);\n\n    // Rotating the image\n    float angle = 45.0;\n    cv::Point2f center(image.cols / 2.0, image.rows / 2.0);\n    cv::Mat rotation_matrix = cv::getRotationMatrix2D(center, angle, 1.0);\n    cv::Mat rotated_image;\n    cv::warpAffine(image, rotated_image, rotation_matrix, image.size());\n    cv::imshow(\"Rotated Image\", rotated_image);\n    cv::waitKey(0);\n\n    // Save the processed image\n    cv::imwrite(\"processed_image.jpg\", rotated_image);\n    std::cout << \"Processed image saved as processed_image.jpg\" << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Reading the Image:**\n   - `cv::imread` is used to read the image file. It returns a `cv::Mat` object, which is a multi-dimensional array used by OpenCV to represent images.\n\n2. **Displaying the Image:**\n   - `cv::imshow` displays the image in a window.\n   - `cv::waitKey(0)` waits for a key press to close the window.\n\n3. **Resizing the Image:**\n   - `cv::resize` resizes the image to the specified dimensions.\n\n4. **Cropping the Image:**\n   - A region of interest (ROI) is defined using `cv::Rect`, and the cropped image is obtained by indexing the original image with the ROI.\n\n5. **Rotating the Image:**\n   - `cv::getRotationMatrix2D` generates a rotation matrix.\n   - `cv::warpAffine` applies the rotation matrix to the image.\n\n6. **Saving the Image:**\n   - `cv::imwrite` saves the processed image to a file.\n\nThis code provides a basic framework for image processing operations using OpenCV in C++. You can expand upon this by adding more operations, handling different image formats, and improving error checking and user interaction."
    }
]