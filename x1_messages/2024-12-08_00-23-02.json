[
    {
        "role": "user",
        "content": "Implement a C++ class for a simple linked list with methods for adding, removing, and searching elements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll help you create a simple linked list in C++. A linked list is a data structure consisting of nodes where each node contains a data part and a pointer to the next node in the sequence.\n\nFirst, let's define the structure of a single node. Each node will hold an integer value and a pointer to the next node.\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n};\n```\n\nNow, we'll create a class called `LinkedList` that will manage these nodes. This class will have methods to add elements, remove elements, and search for elements.\n\nHere's a basic outline of the class:\n\n```cpp\nclass LinkedList {\nprivate:\n    Node* head;\n\npublic:\n    LinkedList();\n    ~LinkedList();\n    void add(int value);\n    bool remove(int value);\n    bool search(int value);\n    void display();\n};\n```\n\nLet's implement each method one by one.\n\n### Constructor\n\nThe constructor will initialize the linked list by setting the head to `nullptr`.\n\n```cpp\nLinkedList::LinkedList() : head(nullptr) {}\n```\n\n### Destructor\n\nThe destructor needs to free the memory allocated for each node to prevent memory leaks.\n\n```cpp\nLinkedList::~LinkedList() {\n    while (head != nullptr) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n    }\n}\n```\n\n### Adding an Element\n\nWe'll implement the `add` method to add a new node at the beginning of the list for simplicity.\n\n```cpp\nvoid LinkedList::add(int value) {\n    Node* newNode = new Node;\n    newNode->data = value;\n    newNode->next = head;\n    head = newNode;\n}\n```\n\n### Removing an Element\n\nThe `remove` method will search for the first occurrence of the value and remove that node from the list.\n\n```cpp\nbool LinkedList::remove(int value) {\n    if (head == nullptr) {\n        return false;\n    }\n\n    if (head->data == value) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        return true;\n    }\n\n    Node* current = head;\n    while (current->next != nullptr) {\n        if (current->next->data == value) {\n            Node* temp = current->next;\n            current->next = current->next->next;\n            delete temp;\n            return true;\n        }\n        current = current->next;\n    }\n\n    return false;\n}\n```\n\n### Searching for an Element\n\nThe `search` method will traverse the list to check if the value exists.\n\n```cpp\nbool LinkedList::search(int value) {\n    Node* current = head;\n    while (current != nullptr) {\n        if (current->data == value) {\n            return true;\n        }\n        current = current->next;\n    }\n    return false;\n}\n```\n\n### Displaying the List\n\nIt's helpful to have a method to display the elements of the list for verification.\n\n```cpp\nvoid LinkedList::display() {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n```\n\n### Putting It All Together\n\nHere's the complete implementation:\n\n```cpp\n#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nclass LinkedList {\nprivate:\n    Node* head;\n\npublic:\n    LinkedList();\n    ~LinkedList();\n    void add(int value);\n    bool remove(int value);\n    bool search(int value);\n    void display();\n};\n\nLinkedList::LinkedList() : head(nullptr) {}\n\nLinkedList::~LinkedList() {\n    while (head != nullptr) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n    }\n}\n\nvoid LinkedList::add(int value) {\n    Node* newNode = new Node;\n    newNode->data = value;\n    newNode->next = head;\n    head = newNode;\n}\n\nbool LinkedList::remove(int value) {\n    if (head == nullptr) {\n        return false;\n    }\n\n    if (head->data == value) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        return true;\n    }\n\n    Node* current = head;\n    while (current->next != nullptr) {\n        if (current->next->data == value) {\n            Node* temp = current->next;\n            current->next = current->next->next;\n            delete temp;\n            return true;\n        }\n        current = current->next;\n    }\n\n    return false;\n}\n\nbool LinkedList::search(int value) {\n    Node* current = head;\n    while (current != nullptr) {\n        if (current->data == value) {\n            return true;\n        }\n        current = current->next;\n    }\n    return false;\n}\n\nvoid LinkedList::display() {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n\nint main() {\n    LinkedList list;\n    list.add(1);\n    list.add(2);\n    list.add(3);\n    list.display();  // Output: 3 -> 2 -> 1 -> nullptr\n\n    list.remove(2);\n    list.display();  // Output: 3 -> 1 -> nullptr\n\n    std::cout << \"Search for 1: \" << (list.search(1) ? \"Found\" : \"Not Found\") << std::endl;\n    std::cout << \"Search for 2: \" << (list.search(2) ? \"Found\" : \"Not Found\") << std::endl;\n\n    return 0;\n}\n```\n\nThis code defines a simple linked list with methods to add, remove, search, and display elements. You can extend this basic implementation with additional features like adding elements at the end, finding the size of the list, etc., based on your requirements."
    }
]