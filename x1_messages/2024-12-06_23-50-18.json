[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add an element at the beginning, end, and a specified position, as well as remove an element by value and print the entire list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, value):\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == value:\n                current.next = current.next.next\n                return\n            current = current.next\n        print(\"Value not found in the list.\")\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_beginning(3)\n    sll.add_at_end(5)\n    sll.add_at_position(1, 4)\n    sll.print_list()  # Output: 3 -> 4 -> 5 -> None\n    sll.remove_by_value(4)\n    sll.print_list()  # Output: 3 -> 5 -> None\n"
    }
]