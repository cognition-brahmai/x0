[
    {
        "role": "user",
        "content": "Write a JavaScript function that takes an array of integers as input and returns the maximum subarray sum using Kadane's algorithm.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Kadane's algorithm is an efficient way to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Here's how you can implement it in JavaScript:\n\n```javascript\nfunction maxSubarraySum(arr) {\n    if (arr.length === 0) {\n        return 0; // Empty array case\n    }\n\n    let currentMax = arr[0];\n    let globalMax = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        currentMax = Math.max(arr[i], currentMax + arr[i]);\n        if (currentMax > globalMax) {\n            globalMax = currentMax;\n        }\n    }\n\n    return globalMax;\n}\n\n// Example usage:\nconst array = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(maxSubarraySum(array)); // Output: 6\n```\n\n### Explanation:\n1. **Initialization**:\n   - `currentMax` and `globalMax` are both set to the first element of the array.\n   \n2. **Iteration**:\n   - Starting from the second element, for each element in the array:\n     - `currentMax` is updated to be the maximum of the current element alone or the sum of `currentMax` and the current element.\n     - If `currentMax` is greater than `globalMax`, `globalMax` is updated to `currentMax`.\n\n3. **Return**:\n   - After iterating through the array, `globalMax` holds the maximum subarray sum.\n\nThis algorithm runs in O(n) time complexity, where n is the number of elements in the array, making it very efficient for this problem."
    }
]