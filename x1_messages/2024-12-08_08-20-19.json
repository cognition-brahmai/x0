[
    {
        "role": "user",
        "content": "Create a Python script that monitors a specified directory for new files and automatically compresses them into a ZIP archive upon detection. The script should accept command line arguments for the target directory and output ZIP file path. Additionally, implement logging functionality to record each processed file along with its timestamp.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Python script that monitors a specified directory for new files and automatically compresses them into a ZIP archive upon detection, we can use the `watchdog` library for directory monitoring and the `zipfile` module for compression. We'll also use the `logging` module to record each processed file along with its timestamp.\n\nFirst, ensure you have the `watchdog` library installed. You can install it using pip:\n\n```bash\npip install watchdog\n```\n\nHere's a step-by-step guide to create the script:\n\n1. **Import necessary modules:**\n\n   - `argparse` for handling command line arguments.\n   - `logging` for logging functionality.\n   - `time` for timestamping logs.\n   - `zipfile` for creating ZIP archives.\n   - `watchdog.observers` and `watchdog.events` for monitoring directory changes.\n\n2. **Set up logging:**\n\n   - Configure logging to write to a file with timestamps.\n\n3. **Define a handler for new files:**\n\n   - Create a class that inherits from `watchdog.events.FileSystemEventHandler`.\n   - Override the `on_created` method to handle new files.\n\n4. **Compress new files into a ZIP archive:**\n\n   - When a new file is detected, add it to the specified ZIP archive.\n\n5. **Monitor the directory:**\n\n   - Use `watchdog.observers.Observer` to monitor the target directory.\n\n6. **Handle command line arguments:**\n\n   - Accept the target directory and output ZIP file path from the command line.\n\nHere's the complete script:\n\n```python\nimport argparse\nimport logging\nimport time\nimport zipfile\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass NewFileHandler(FileSystemEventHandler):\n    def __init__(self, zip_path):\n        self.zip_path = zip_path\n\n    def on_created(self, event):\n        if event.is_directory:\n            return\n        file_path = event.src_path\n        self.compress_file(file_path)\n\n    def compress_file(self, file_path):\n        with zipfile.ZipFile(self.zip_path, 'a') as zipf:\n            arcname = file_path.split('/')[-1]  # Get the base filename\n            zipf.write(file_path, arcname)\n            timestamp = time.strftime('%Y-%m-%d %H:%M:%S', time.localtime())\n            logging.info(f'Compressed file: {file_path} at {timestamp}')\n\ndef main():\n    parser = argparse.ArgumentParser(description='Monitor a directory and compress new files into a ZIP archive.')\n    parser.add_argument('target_dir', help='The directory to monitor for new files.')\n    parser.add_argument('output_zip', help='The path to the output ZIP file.')\n    args = parser.parse_args()\n\n    logging.basicConfig(filename='compression.log', level=logging.INFO, format='%(message)s')\n\n    event_handler = NewFileHandler(args.output_zip)\n    observer = Observer()\n    observer.schedule(event_handler, path=args.target_dir, recursive=False)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **NewFileHandler Class:**\n   - Inherits from `FileSystemEventHandler`.\n   - Overrides `on_created` to handle new files.\n   - Compresses new files into the specified ZIP archive using `zipfile.ZipFile`.\n\n2. **Logging Setup:**\n   - Configures logging to write to `compression.log` with timestamped messages.\n\n3. **Command Line Arguments:**\n   - Uses `argparse` to accept the target directory and output ZIP file path.\n\n4. **Monitoring the Directory:**\n   - Uses `watchdog.observers.Observer` to monitor the target directory for new files.\n   - Starts the observer and keeps it running until interrupted.\n\nThis script will continuously monitor the specified directory and automatically compress any new files into the specified ZIP archive, logging each action with a timestamp."
    }
]