[
    {
        "role": "user",
        "content": "Write a Python program that accepts a string as input and checks whether it is a palindrome or not. If the input is a palindrome, print \"Palindrome\", otherwise print \"Not Palindrome\"."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! A palindrome is a word, phrase, number, or other sequences of characters that reads the same forward and backward (ignoring spaces, punctuation, and capitalization). For this program, we'll write a Python function that checks if a given string is a palindrome.\n\nHere's a step-by-step approach:\n\n1. **Normalize the Input**: Convert the entire string to lowercase to make the comparison case-insensitive.\n2. **Remove Non-alphanumeric Characters**: Filter out any spaces, punctuation, or special characters so that we're only comparing letters and numbers.\n3. **Check if it Reads the Same Forwards and Backwards**: Compare the normalized string with its reverse.\n\nLet's implement this in code.\n\n## Final Solution\nTo solve this problem, we need to check whether a given string is a palindrome. A palindrome reads the same forwards and backwards, ignoring case, spaces, and punctuation.\n\n### Approach\n\n1. **Normalize the Input**: Convert the string to lowercase.\n2. **Remove Non-alphanumeric Characters**: Filter out any characters that are not letters or numbers.\n3. **Check Palindrome**: Compare the cleaned string with its reverse.\n\n### Solution Code\n\n```python\ndef is_palindrome(s):\n    # Normalize the input: convert to lowercase\n    s = s.lower()\n    \n    # Remove all non-alphanumeric characters\n    cleaned = ''.join(char for char in s if char.isalnum())\n    \n    # Check if the cleaned string is equal to its reverse\n    if cleaned == cleaned[::-1]:\n        return \"Palindrome\"\n    else:\n        return \"Not Palindrome\"\n\n# Example usage\ninput_string = input(\"Enter a string: \")\nprint(is_palindrome(input_string))\n```\n\n### Explanation\n\n1. **Normalization**: The input string is converted to lowercase to ensure the comparison is case-insensitive.\n2. **Cleaning**: By using a list comprehension, we remove any characters that are not alphanumeric, effectively stripping away spaces and punctuation.\n3. **Palindrome Check**: We compare the cleaned string with its reverse (achieved using slicing with `[::-1]`). If they are the same, it's a palindrome; otherwise, it's not.\n\nThis method ensures that the check is efficient and straightforward, focusing only on the essential characters of the string."
    }
]