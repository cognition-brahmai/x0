[
    {
        "role": "user",
        "content": "Build a Node.js server that uses the Express framework and connects to a MongoDB database. The server should expose RESTful endpoints for creating, reading, updating, and deleting \"Task\" objects with title, description, and due date properties."
    },
    {
        "role": "assistant",
        "content": "I'm excited to help you build this Node.js server with Express and MongoDB! Let's dive into it step by step.\n\nFirst, we need to set up a new Node.js project. Make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```\nmkdir task-manager\ncd task-manager\nnpm init -y\n```\n\nNext, we'll install the necessary dependencies: Express for the server, Mongoose for interacting with MongoDB, and body-parser for handling JSON data in requests.\n\n```\nnpm install express mongoose body-parser\n```\n\nNow, let's create a basic Express server. Create a file named `server.js` and set up the essentials.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\n\n// Routes\napp.get('/', (req, res) => {\n  res.send('Welcome to the Task Manager API!');\n});\n\n// Start the server\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\nRun the server to make sure everything is set up correctly.\n\n```\nnode server.js\n```\n\nYou should see \"Server is running on port 3000\" in your console. Visit `http://localhost:3000` in your browser to see the welcome message.\n\nNow, let's set up the connection to MongoDB. We'll use Mongoose for this. First, install Mongoose if you haven't already.\n\n```\nnpm install mongoose\n```\n\nIn your `server.js`, require Mongoose and connect to your MongoDB database. Make sure to replace `'your_mongo_uri'` with your actual MongoDB connection URI.\n\n```javascript\nconst mongoose = require('mongoose');\n\nmongoose.connect('your_mongo_uri', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('Connected to MongoDB'))\n  .catch(err => console.error('Could not connect to MongoDB', err));\n```\n\nNext, we need to define a Mongoose schema for our Task model. Create a new file called `task.model.js` in a folder named `models`.\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst taskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  dueDate: { type: Date, required: true }\n});\n\nmodule.exports = mongoose.model('Task', taskSchema);\n```\n\nNow, let's create the routes for CRUD operations. We'll create a folder named `routes` and a file `tasks.js` inside it.\n\nFirst, require the Task model in `tasks.js`.\n\n```javascript\nconst Task = require('../models/task.model');\n```\n\nThen, define the routes for creating, reading, updating, and deleting tasks.\n\n**Create a task (POST /tasks)**\n\n```javascript\napp.post('/tasks', async (req, res) => {\n  const task = new Task(req.body);\n  try {\n    await task.save();\n    res.status(201).send(task);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n```\n\n**Get all tasks (GET /tasks)**\n\n```javascript\napp.get('/tasks', async (req, res) => {\n  try {\n    const tasks = await Task.find();\n    res.send(tasks);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n```\n\n**Get a single task by ID (GET /tasks/:id)**\n\n```javascript\napp.get('/tasks/:id', async (req, res) => {\n  try {\n    const task = await Task.findById(req.params.id);\n    if (!task) {\n      return res.status(404).send();\n    }\n    res.send(task);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n```\n\n**Update a task by ID (PATCH /tasks/:id)**\n\n```javascript\napp.patch('/tasks/:id', async (req, res) => {\n  try {\n    const task = await Task.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    if (!task) {\n      return res.status(404).send();\n    }\n    res.send(task);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n```\n\n**Delete a task by ID (DELETE /tasks/:id)**\n\n```javascript\napp.delete('/tasks/:id', async (req, res) => {\n  try {\n    const task = await Task.findByIdAndDelete(req.params.id);\n    if (!task) {\n      return res.status(404).send();\n    }\n    res.send(task);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n```\n\nDon't forget to require and use the `tasks` routes in your `server.js`.\n\n```javascript\nconst tasksRouter = require('./routes/tasks');\napp.use('/tasks', tasksRouter);\n```\n\nThat's it! You now have a basic RESTful API for managing tasks with Node.js, Express, and MongoDB. You can test these endpoints using tools like Postman or curl.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]