[
    {
        "role": "user",
        "content": "Implement a Python script that performs the merge sort algorithm on an input list of integers."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Merge sort is a popular sorting algorithm that uses the divide-and-conquer approach. It divides the input list into two halves, recursively sorts them, and then merges the two sorted halves. I'll provide you with a Python script that implements the merge sort algorithm.\n\nFirst, let's understand the steps involved in merge sort:\n\n1. **Divide**: If the input list has more than one element, divide it into two halves.\n2. **Conquer**: Recursively sort the two halves.\n3. **Combine**: Merge the two sorted halves to produce the sorted list.\n\nNow, I'll write a Python function to implement these steps.\n\n## Final Solution\nTo implement the merge sort algorithm in Python, we need to define a function that sorts a list of integers using the merge sort technique. Merge sort is a divide-and-conquer algorithm that divides the input list into two halves, sorts each half recursively, and then merges the two sorted halves.\n\n### Approach\n\n1. **Divide**: Split the list into two halves.\n2. **Conquer**: Recursively sort each half.\n3. **Combine**: Merge the two sorted halves back into a single sorted list.\n\n### Solution Code\n\n```python\ndef merge_sort(arr):\n    if len(arr) > 1:\n        # Find the middle point to divide the array into two halves\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        # Recursively sort both halves\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        # Merge the sorted halves\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        # Check if any element was left in the left half\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        # Check if any element was left in the right half\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n    return arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [38, 27, 43, 3, 9, 82, 10]\n    sorted_list = merge_sort(sample_list)\n    print(\"Sorted list:\", sorted_list)\n```\n\n### Explanation\n\n1. **Divide**: The array is divided into two halves by finding the middle index.\n2. **Conquer**: The `merge_sort` function is called recursively on each half until the base case is reached (when the sublist has one or zero elements).\n3. **Combine**: The two halves are merged back together by comparing the elements of each half and placing them in the correct order in the original list.\n4. **Base Case**: The recursion stops when the sublist has only one element, as a single element is already sorted.\n\nThis approach ensures that the list is sorted efficiently with a time complexity of O(n log n)."
    }
]