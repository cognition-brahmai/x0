[
    {
        "role": "user",
        "content": "Create a Python script that connects to a MySQL database and performs basic CRUD operations on a table containing information about employees, such as name, job title, and salary."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with that! Let's create a Python script that connects to a MySQL database and performs basic CRUD (Create, Read, Update, Delete) operations on a table containing employee information such as name, job title, and salary.\n\nFirst, make sure you have MySQL installed and running on your system. You'll also need to install the `mysql-connector-python` package if you haven't already. You can install it using pip:\n\n```bash\npip install mysql-connector-python\n```\n\nNext, let's set up the database and table. For this example, I'll assume you have a MySQL server running locally with a database named `company_db`. If you don't have a database set up, you can create one using MySQL commands.\n\nHere's how you can create the database and table:\n\n```sql\nCREATE DATABASE company_db;\nUSE company_db;\n\nCREATE TABLE employees (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100),\n    job_title VARCHAR(100),\n    salary DECIMAL(10, 2)\n);\n```\n\nNow, let's write the Python script to perform CRUD operations.\n\n## Final Solution\nTo create a Python script that connects to a MySQL database and performs basic CRUD operations on a table containing employee information, follow these steps:\n\n### Solution Code\n\n```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection():\n    connection = None;\n    try:\n        connection = mysql.connector.connect(\n            host='localhost',\n            user='your_username',\n            password='your_password',\n            database='company_db'\n        )\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n    return connection\n\ndef execute_query(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        connection.commit()\n        print(\"Query executed successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef execute_read_query(connection, query):\n    cursor = connection.cursor()\n    result = None\n    try:\n        cursor.execute(query)\n        result = cursor.fetchall()\n        return result\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef create_employee(connection, employee):\n    insert_query = \"\"\"\n    INSERT INTO employees (name, job_title, salary) VALUES (%s, %s, %s)\n    \"\"\"\n    cursor = connection.cursor()\n    try:\n        cursor.execute(insert_query, employee)\n        connection.commit()\n        print(\"Employee added successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef update_employee_job_title(connection, employee_id, new_job_title):\n    update_query = \"\"\"\n    UPDATE employees SET job_title = %s WHERE id = %s\n    \"\"\"\n    cursor = connection.cursor()\n    try:\n        cursor.execute(update_query, (new_job_title, employee_id))\n        connection.commit()\n        print(\"Employee job title updated successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef delete_employee(connection, employee_id):\n    delete_query = \"\"\"\n    DELETE FROM employees WHERE id = %s\n    \"\"\"\n    cursor = connection.cursor()\n    try:\n        cursor.execute(delete_query, (employee_id,))\n        connection.commit()\n        print(\"Employee deleted successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef get_all_employees(connection):\n    select_query = \"SELECT * FROM employees\"\n    employees = execute_read_query(connection, select_query)\n    for emp in employees:\n        print(emp)\n\ndef main():\n    connection = create_connection()\n    if connection is not None:\n        # Create an employee\n        new_employee = (\"John Doe\", \"Software Engineer\", 80000)\n        create_employee(connection, new_employee)\n        \n        # Update an employee's job title\n        update_employee_job_title(connection, 1, \"Senior Software Engineer\")\n        \n        # Delete an employee\n        delete_employee(connection, 2)\n        \n        # Get and print all employees\n        get_all_employees(connection)\n        \n        # Close the connection\n        connection.close()\n    else:\n        print(\"Failed to connect to the database.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Database Connection**:\n   - The `create_connection` function establishes a connection to the MySQL database using provided credentials.\n\n2. **CRUD Operations**:\n   - **Create**: The `create_employee` function inserts a new employee into the `employees` table.\n   - **Read**: The `get_all_employees` function retrieves and prints all records from the `employees` table.\n   - **Update**: The `update_employee_job_title` function updates the job title of an employee based on their ID.\n   - **Delete**: The `delete_employee` function deletes an employee based on their ID.\n\n3. **Helper Functions**:\n   - `execute_query` is a utility function to execute SQL queries that don't return data (e.g., INSERT, UPDATE, DELETE).\n   - `execute_read_query` is a utility function to execute SQL queries that return data (e.g., SELECT).\n\n4. **Main Function**:\n   - Demonstrates the usage of the above functions by performing create, update, delete operations and retrieving all employees.\n\nMake sure to replace `'your_username'` and `'your_password'` with your actual MySQL username and password. This script assumes that the `company_db` database and the `employees` table already exist. If not, you'll need to create them using SQL commands as shown in the problem description."
    }
]