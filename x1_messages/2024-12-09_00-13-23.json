[
    {
        "role": "user",
        "content": "Write a Python program that implements the bubble sort algorithm to sort a list of integers. Optimize the algorithm to stop early if no swaps are made during a pass through the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted. The optimization you mentioned involves stopping the algorithm if no swaps are made during a pass, which indicates that the list is already sorted.\n\nHere's how you can implement the optimized bubble sort in Python:\n\n```python\ndef bubble_sort_optimized(arr):\n    n = len(arr)\n    for i in range(n):\n        # Set swapped to False at the start of each pass\n        swapped = False\n        # Last i elements are already in place, no need to check them\n        for j in range(0, n-i-1):\n            if arr[j] > arr[j+1]:\n                # Swap if the element found is greater than the next element\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        # If no two elements were swapped by inner loop, then break\n        if not swapped:\n            break\n    return arr\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [64, 34, 25, 12, 22, 11, 90]\n    print(\"Original list:\", sample_list)\n    sorted_list = bubble_sort_optimized(sample_list)\n    print(\"Sorted list:\", sorted_list)\n```\n\n### Explanation:\n\n1. **Outer Loop:** This loop runs from the start to the end of the list, representing each pass through the list.\n2. **Swapped Flag:** A boolean variable `swapped` is set to `False` at the beginning of each pass. If any swap occurs during the inner loop, it is set to `True`.\n3. **Inner Loop:** This loop compares each pair of adjacent elements and swaps them if they are in the wrong order. After each pass, the largest element among the unsorted portion \"bubbles up\" to its correct position.\n4. **Optimization:** If no swaps are made during a complete pass, the `swapped` flag remains `False`, indicating that the list is already sorted, and the algorithm can terminate early.\n\nThis optimization helps reduce the number of passes needed for nearly sorted lists, improving efficiency. However, in the worst-case scenario, it still has a time complexity of O(n\u00b2), where n is the number of items being sorted."
    }
]