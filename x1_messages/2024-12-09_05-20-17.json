[
    {
        "role": "user",
        "content": "Write a Golang program that monitors a specified directory for changes (file creation, modification, or deletion) and sends notifications to a specified email address using an SMTP server when changes are detected.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Go program that monitors a specified directory for changes and sends email notifications via an SMTP server, you can follow these steps:\n\n1. **Set up file system watching**: Use the `fsnotify` package to monitor the directory for file system events.\n2. **Send emails**: Use the `net/smtp` package to send emails through an SMTP server.\n3. **Configure the program**: Allow the user to specify the directory to monitor and the email settings.\n\nBelow is a sample implementation of such a program:\n\n### Sample Code\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/smtp\"\n\t\"time\"\n\n\t\"github.com/fsnotify/fsnotify\"\n)\n\n// Email configuration\ntype EmailConfig struct {\n\tFrom     string\n\tTo       string\n\tSMTPHost string\n\tSMTPPort int\n\tUsername string\n\tPassword string\n}\n\nfunc main() {\n\t// Define command-line flags\n\tdir := flag.String(\"dir\", \".\", \"Directory to monitor\")\n\temailFrom := flag.String(\"from\", \"\", \"Sender email address\")\n\temailTo := flag.String(\"to\", \"\", \"Recipient email address\")\n\tsmtpHost := flag.String(\"smtpHost\", \"smtp.example.com\", \"SMTP server host\")\n\tsmtpPort := flag.Int(\"smtpPort\", 587, \"SMTP server port\")\n\tusername := flag.String(\"username\", \"\", \"SMTP username\")\n\tpassword := flag.String(\"password\", \"\", \"SMTP password\")\n\tflag.Parse()\n\n\tif *dir == \"\" || *emailFrom == \"\" || *emailTo == \"\" || *smtpHost == \"\" || *username == \"\" || *password == \"\" {\n\t\tlog.Fatal(\"All parameters are required.\")\n\t}\n\n\t// Initialize email config\n\temailConfig := &EmailConfig{\n\t\tFrom:     *emailFrom,\n\t\tTo:       *emailTo,\n\t\tSMTPHost: *smtpHost,\n\t\tSMTPPort: *smtpPort,\n\t\tUsername: *username,\n\t\tPassword: *password,\n\t}\n\n\t// Create a new fsnotify watcher\n\twatcher, err := fsnotify.NewWatcher()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer watcher.Close()\n\n\tdone := make(chan bool)\n\tgo func() {\n\t\tfor {\n\t\t\tselect {\n\t\t\tcase event, ok := <-watcher.Events:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tif event.Op&fsnotify.Create == fsnotify.Create {\n\t\t\t\t\tsendNotification(emailConfig, fmt.Sprintf(\"File created: %s\", event.Name))\n\t\t\t\t} else if event.Op&fsnotify.Write == fsnotify.Write {\n\t\t\t\t\tsendNotification(emailConfig, fmt.Sprintf(\"File modified: %s\", event.Name))\n\t\t\t\t} else if event.Op&fsnotify.Remove == fsnotify.Remove {\n\t\t\t\t\tsendNotification(emailConfig, fmt.Sprintf(\"File deleted: %s\", event.Name))\n\t\t\t\t}\n\t\t\tcase err, ok := <-watcher.Errors:\n\t\t\t\tif !ok {\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t\tlog.Println(\"error:\", err)\n\t\t\t}\n\t\t}\n\t}()\n\n\terr = watcher.Add(*dir)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tlog.Printf(\"Monitoring directory: %s\\n\", *dir)\n\n\t<-done\n}\n\nfunc sendNotification(config *EmailConfig, message string) {\n\tsubject := \"Directory Change Notification\"\n\tbody := fmt.Sprintf(\"Notification Time: %s\\n%s\\n\", time.Now().Format(time.RFC1123), message)\n\n\tmsg := fmt.Sprintf(\"To: %s\\r\\nFrom: %s\\r\\nSubject: %s\\r\\n\\r\\n%s\",\n\t\tconfig.To, config.From, subject, body)\n\n\terr := smtp.SendMail(fmt.Sprintf(\"%s:%d\", config.SMTPHost, config.SMTPPort),\n\t\tsmtp.PlainAuth(\"\", config.Username, config.Password, config.SMTPHost),\n\t\tconfig.From, []string{config.To}, []byte(msg))\n\n\tif err != nil {\n\t\tlog.Printf(\"Failed to send email: %v\\n\", err)\n\t} else {\n\t\tlog.Printf(\"Email sent successfully: %s\\n\", message)\n\t}\n}\n```\n\n### Explanation\n\n1. **Command-Line Flags**: The program accepts several command-line flags to configure the directory to monitor and email settings.\n2. **File System Watching**: Uses `fsnotify` to watch the specified directory for file creation, modification, or deletion events.\n3. **Email Notification**: When an event is detected, it constructs an email message and sends it using the `net/smtp` package.\n4. **Error Handling**: Basic error handling is implemented to manage issues with watching the directory or sending emails.\n\n### How to Run\n\n1. **Install Dependencies**: Ensure you have the `fsnotify` package installed. You can install it using:\n   ```sh\n   go get github.com/fsnotify/fsnotify\n   ```\n2. **Compile the Program**: Compile the Go program:\n   ```sh\n   go build -o monitor monitor.go\n   ```\n3. **Run the Program**: Execute the program with the required flags:\n   ```sh\n   ./monitor -dir=/path/to/watch -from=sender@example.com -to=recipient@example.com -smtpHost=smtp.example.com -smtpPort=587 -username=your_username -password=your_password\n   ```\n\nThis setup will monitor the specified directory and send email notifications for any file changes via the provided SMTP server."
    }
]