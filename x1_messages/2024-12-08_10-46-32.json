[
    {
        "role": "user",
        "content": "Develop a Python script that creates a RESTful API using Flask with endpoints for CRUD operations on a SQLite database storing information about books (title, author, publication year). PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a simple RESTful API using Flask that performs CRUD operations on a SQLite database storing book information. We'll cover creating the database, setting up the Flask app, and defining the API endpoints.\n\n### Step 1: Set Up Your Environment\n\nFirst, make sure you have Python installed on your system. Then, install Flask and SQLAlchemy, which we'll use for database operations.\n\n```bash\npip install Flask SQLAlchemy\n```\n\n### Step 2: Create the SQLite Database\n\nWe'll use SQLAlchemy to handle the database operations. Create a new Python file, say `app.py`, and set up the database model.\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///books.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    author = db.Column(db.String(100), nullable=False)\n    publication_year = db.Column(db.Integer, nullable=False)\n\n    def __repr__(self):\n        return f\"<Book {self.title}>\"\n\n# Create the database\ndb.create_all()\n```\n\n### Step 3: Define API Endpoints\n\nNow, let's define the CRUD operations as API endpoints.\n\n#### Get All Books\n\n```python\n@app.route('/books', methods=['GET'])\ndef get_books():\n    books = Book.query.all()\n    output = []\n    for book in books:\n        book_data = {'id': book.id, 'title': book.title, 'author': book.author, 'publication_year': book.publication_year}\n        output.append(book_data)\n    return jsonify({'books': output})\n```\n\n#### Get a Single Book by ID\n\n```python\n@app.route('/books/<id>', methods=['GET'])\ndef get_book(id):\n    book = Book.query.get_or_404(id)\n    book_data = {'id': book.id, 'title': book.title, 'author': book.author, 'publication_year': book.publication_year}\n    return jsonify(book_data)\n```\n\n#### Create a New Book\n\n```python\n@app.route('/books', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    new_book = Book(title=data['title'], author=data['author'], publication_year=data['publication_year'])\n    db.session.add(new_book)\n    db.session.commit()\n    return jsonify({'message': 'New book created!'})\n```\n\n#### Update a Book\n\n```python\n@app.route('/books/<id>', methods=['PUT'])\ndef update_book(id):\n    book = Book.query.get_or_404(id)\n    data = request.get_json()\n    book.title = data['title']\n    book.author = data['author']\n    book.publication_year = data['publication_year']\n    db.session.commit()\n    return jsonify({'message': 'Book updated!'})\n```\n\n#### Delete a Book\n\n```python\n@app.route('/books/<id>', methods=['DELETE'])\ndef delete_book(id):\n    book = Book.query.get_or_404(id)\n    db.session.delete(book)\n    db.session.commit()\n    return jsonify({'message': 'Book deleted!'})\n```\n\n### Step 4: Run the Flask App\n\nAdd the following lines to run the app.\n\n```python\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Complete Code\n\nHere's the complete code for `app.py`:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///books.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    author = db.Column(db.String(100), nullable=False)\n    publication_year = db.Column(db.Integer, nullable=False)\n\n    def __repr__(self):\n        return f\"<Book {self.title}>\"\n\n# Create the database\ndb.create_all()\n\n@app.route('/books', methods=['GET'])\ndef get_books():\n    books = Book.query.all()\n    output = []\n    for book in books:\n        book_data = {'id': book.id, 'title': book.title, 'author': book.author, 'publication_year': book.publication_year}\n        output.append(book_data)\n    return jsonify({'books': output})\n\n@app.route('/books/<id>', methods=['GET'])\ndef get_book(id):\n    book = Book.query.get_or_404(id)\n    book_data = {'id': book.id, 'title': book.title, 'author': book.author, 'publication_year': book.publication_year}\n    return jsonify(book_data)\n\n@app.route('/books', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    new_book = Book(title=data['title'], author=data['author'], publication_year=data['publication_year'])\n    db.session.add(new_book)\n    db.session.commit()\n    return jsonify({'message': 'New book created!'})\n\n@app.route('/books/<id>', methods=['PUT'])\ndef update_book(id):\n    book = Book.query.get_or_404(id)\n    data = request.get_json()\n    book.title = data['title']\n    book.author = data['author']\n    book.publication_year = data['publication_year']\n    db.session.commit()\n    return jsonify({'message': 'Book updated!'})\n\n@app.route('/books/<id>', methods=['DELETE'])\ndef delete_book(id):\n    book = Book.query.get_or_404(id)\n    db.session.delete(book)\n    db.session.commit()\n    return jsonify({'message': 'Book deleted!'})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Testing the API\n\nYou can test these endpoints using tools like Postman or curl. Here are some examples using curl:\n\n#### Get All Books\n\n```bash\ncurl -X GET http://127.0.0.1:5000/books\n```\n\n#### Get a Single Book\n\n```bash\ncurl -X GET http://127.0.0.1:5000/books/1\n```\n\n#### Add a New Book\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publication_year\":2021}' http://127.0.0.1:5000/books\n```\n\n#### Update a Book\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Title\",\"author\":\"Updated Author\",\"publication_year\":2022}' http://127.0.0.1:5000/books/1\n```\n\n#### Delete a Book\n\n```bash\ncurl -X DELETE http://127.0.0.1:5000/books/1\n```\n\nThat's it! You've created a simple RESTful API with Flask and SQLAlchemy for CRUD operations on a SQLite database."
    }
]