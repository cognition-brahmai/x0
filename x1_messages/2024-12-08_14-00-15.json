[
    {
        "role": "user",
        "content": "Create a C++ program that mimics a library management system. The system should allow adding new books, deleting books, searching for a book by title or author, and displaying all the books. Each book should have information about its title, author, publication year, and status (available or borrowed)."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a C++ program for a library management system. The system needs to handle books, storing information like title, author, publication year, and status (whether it's available or borrowed). Users should be able to add new books, delete existing ones, search for books by title or author, and display all books in the library.\n\nFirst, I need to plan out the structure of the program. I should probably start by defining a class for the Book, which will hold the details like title, author, publication year, and status. Then, I'll need another class for the Library, which will manage a collection of Book objects. This Library class will have methods for adding books, deleting books, searching for books, and displaying all books.\n\nLet me think about how to represent the status of a book. Maybe I can use an enum for the status, like AVAILABLE and BORROWED. That way, it's clear and easy to handle.\n\nAlso, for storing the collection of books, I can use a vector since it's dynamic and easy to work with in C++.\n\nNow, for the user interface, I'll need to create a simple menu-driven system where the user can choose options like adding a book, deleting a book, searching, or displaying all books. I can use a loop that keeps displaying the menu until the user decides to exit.\n\nLet me sketch out the classes first.\n\nClass: Book\n\nAttributes:\n\n- Title (string)\n\n- Author (string)\n\n- Publication Year (int)\n\n- Status (enum: AVAILABLE or BORROWED)\n\nMethods:\n\n- Constructor to initialize the book\n\n- Getter and setter methods for each attribute\n\nClass: Library\n\nAttributes:\n\n- A vector to store Book objects\n\nMethods:\n\n- Add Book: takes Book object and adds it to the vector\n\n- Delete Book: removes a book based on title or some identifier\n\n- Search Book by Title: returns books with matching titles\n\n- Search Book by Author: returns books by a specific author\n\n- Display All Books: prints out all books in the library\n\nFor the menu, I can have options like:\n\n1. Add a new book\n\n2. Delete a book\n\n3. Search for a book by title\n\n4. Search for a book by author\n\n5. Display all books\n\n6. Exit\n\nI need to make sure that the program handles errors gracefully, like trying to delete a book that doesn't exist or entering invalid data.\n\nLet me think about how to implement the search functions. Since there might be multiple books by the same author or with similar titles, I should consider returning a list of matching books.\n\nAlso, for the status, maybe I can allow the user to borrow or return books, which would change the status of the book. But for now, I'll focus on the basic requirements.\n\nI should also think about how to identify unique books. Maybe each book should have a unique ID, but to keep it simple, I can use the title and author as identifiers for now.\n\nWait, but titles can be repeated, so using both title and author might be better.\n\nAlternatively, I can generate a unique book ID automatically when a book is added.\n\nHmm, perhaps for simplicity, I'll assume that each book has a unique title for now, and use the title as the identifier.\n\nBut in reality, multiple books can have the same title by different authors, so it's better to use both title and author for identification.\n\nMaybe I can create a key or identifier that combines title and author.\n\nOkay, let's proceed with that.\n\nNow, for the deletion of a book, I'll need to specify both the title and the author to ensure the correct book is deleted.\n\nSimilarly, for searching by title, I should consider that multiple books might have the same title by different authors.\n\nWait, but if I'm searching by title, and there are multiple books with the same title, I should list all of them.\n\nSimilarly, searching by author should list all books by that author.\n\nAlright, I think I have a plan.\n\nLet me start by defining the enum for the status.\n\nenum class Status {\n\nAVAILABLE,\n\nBORROWED\n\n};\n\nThen, the Book class.\n\nclass Book {\n\nprivate:\n\nstd::string title;\n\nstd::string author;\n\nint publicationYear;\n\nStatus status;\n\npublic:\n\nBook(std::string t, std::string a, int y, Status s);\n\n// Getters\n\nstd::string getTitle() const;\n\nstd::string getAuthor() const;\n\nint getPublicationYear() const;\n\nStatus getStatus() const;\n\n// Setters\n\nvoid setTitle(std::string t);\n\nvoid setAuthor(std::string a);\n\nvoid setPublicationYear(int y);\n\nvoid setStatus(Status s);\n\n};\n\nImplementing the constructor and getters/setters should be straightforward.\n\nNext, the Library class.\n\nclass Library {\n\nprivate:\n\nstd::vector<Book> books;\n\npublic:\n\nvoid addBook(const Book& book);\n\nvoid deleteBook(const std::string& title, const std::string& author);\n\nstd::vector<Book> searchByTitle(const std::string& title) const;\n\nstd::vector<Book> searchByAuthor(const std::string& author) const;\n\nvoid displayAllBooks() const;\n\n};\n\nI need to implement these methods.\n\nFor addBook, just push the book into the vector.\n\nFor deleteBook, find the book with matching title and author and remove it from the vector.\n\nFor searchByTitle, iterate through the vector and collect books with matching titles.\n\nSimilarly for searchByAuthor, collect books by the specified author.\n\nDisplay all books by iterating through the vector and printing book details.\n\nI should also think about how to handle cases where a book is not found during deletion or search.\n\nMaybe display a message saying \"Book not found\" or something similar.\n\nNow, for the main function, I'll create a Library object and present a menu to the user.\n\nBased on the user's choice, call the corresponding method on the Library object.\n\nI need to handle user inputs carefully, making sure to validate data where necessary.\n\nFor example, when adding a book, ensure that the title, author, and publication year are properly entered.\n\nAlso, for deletion, confirm that the book exists before deleting.\n\nI can implement this using a loop that continues until the user chooses to exit.\n\nLet me outline the steps for each menu option.\n\n1. Add a new book:\n\n- Prompt user for title, author, publication year, and status.\n\n- Create a Book object with the provided data.\n\n- Add the book to the library.\n\n- Confirm addition to the user.\n\n2. Delete a book:\n\n- Prompt user for title and author of the book to delete.\n\n- Search for the book in the library.\n\n- If found, delete it and confirm deletion.\n\n- If not found, inform the user.\n\n3. Search for a book by title:\n\n- Prompt user for the title.\n\n- Search for books with that title.\n\n- Display the matching books.\n\n4. Search for a book by author:\n\n- Prompt user for the author's name.\n\n- Search for books by that author.\n\n- Display the matching books.\n\n5. Display all books:\n\n- Call the displayAllBooks method to list all books in the library.\n\n6. Exit:\n\n- End the program.\n\nI should also think about the user experience, making sure that the program is user-friendly and provides clear instructions and feedback.\n\nError handling is important, especially for inputs like publication year, which should be a valid integer.\n\nMaybe I can use try-catch for input validations, but in C++, it's a bit different.\n\nI can use cin and check if the input is valid.\n\nAlternatively, for simplicity, assume that the user enters correct data types and handle only logical errors.\n\nGiven time constraints, I'll assume that the user enters data correctly.\n\nNow, let's think about how to implement the display functions.\n\nEach book should be displayed with its title, author, publication year, and status.\n\nI can define an ostream operator for the Book class to make it easy to print book details.\n\nSomething like:\n\nstd::ostream& operator<<(std::ostream& os, const Book& book) {\n\nos << \"Title: \" << book.getTitle() << \", Author: \" << book.getAuthor()\n\n<< \", Year: \" << book.getPublicationYear()\n\n<< \", Status: \" << (book.getStatus() == Status::AVAILABLE ? \"Available\" : \"Borrowed\");\n\nreturn os;\n\n}\n\nThis way, I can easily print book details.\n\nSimilarly, in the Library's displayAllBooks method, I can iterate through the vector and print each book.\n\nNow, for searching, I need to return a list of books that match the search criteria.\n\nI can return a vector of Book objects.\n\nIn the searchByTitle method, iterate through the vector and collect books where the title matches the given title.\n\nSimilarly, for searchByAuthor, collect books where the author matches.\n\nI should consider case sensitivity. To make it user-friendly, I can convert both the input and the stored data to lowercase before comparison.\n\nI can use the std::transform function to convert strings to lowercase.\n\nI'll need to include <algorithm> for that.\n\nHere's an example:\n\nstd::string toLower(const std::string& str) {\n\nstd::string lowerStr = str;\n\nstd::transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);\n\nreturn lowerStr;\n\n}\n\nThen, compare the lowercase versions of the strings.\n\nThis way, the search is case-insensitive.\n\nGood.\n\nNow, for deleting a book, I need to find the book with matching title and author and remove it from the vector.\n\nI can iterate through the vector, find the book that matches both title and author, and erase it.\n\nIf multiple books have the same title and author, which should ideally not happen, but to handle it, I can delete only one occurrence or all occurrences.\n\nFor now, I'll assume that each book has a unique combination of title and author, and delete the first matching book.\n\nIf no book is found, inform the user.\n\nAlright, I think I've covered the basic requirements.\n\nLet me summarize:\n\n- Define a Book class with title, author, publication year, and status.\n\n- Define a Library class to manage a collection of Book objects.\n\n- Implement methods in Library for adding, deleting, searching, and displaying books.\n\n- Create a menu-driven program that allows users to interact with the Library object.\n\n- Handle basic error cases, such as book not found.\n\n- Use ostream operator for easy display of book details.\n\n- Make searches case-insensitive for better user experience.\n\nI should also consider that publication year should be a positive integer, but for simplicity, I'll assume it's always valid.\n\nNow, I can start implementing the code based on this plan.\n\n## Final Solution\nTo create a simple library management system in C++, we need to manage books with details such as title, author, publication year, and status (available or borrowed). We will use object-oriented programming principles to structure our program effectively.\n\n### Approach\n\n1. **Book Class**: Represents a book with its attributes and getter/setter methods.\n2. **Library Class**: Manages a collection of books with methods to add, delete, search, and display books.\n3. **Menu-Driven Interface**: Allows users to interact with the library system.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cctype>\n\nenum class Status {\n    AVAILABLE,\n    BORROWED\n};\n\nclass Book {\nprivate:\n    std::string title;\n    std::string author;\n    int publicationYear;\n    Status status;\n\npublic:\n    Book(std::string t, std::string a, int y, Status s)\n        : title(t), author(a), publicationYear(y), status(s) {}\n\n    std::string getTitle() const { return title; }\n    std::string getAuthor() const { return author; }\n    int getPublicationYear() const { return publicationYear; }\n    Status getStatus() const { return status; }\n\n    void setTitle(std::string t) { title = t; }\n    void setAuthor(std::string a) { author = a; }\n    void setPublicationYear(int y) { publicationYear = y; }\n    void setStatus(Status s) { status = s; }\n};\n\nstd::ostream& operator<<(std::ostream& os, const Book& book) {\n    os << \"Title: \" << book.getTitle() << \", Author: \" << book.getAuthor()\n       << \", Year: \" << book.getPublicationYear()\n       << \", Status: \" << (book.getStatus() == Status::AVAILABLE ? \"Available\" : \"Borrowed\");\n    return os;\n}\n\nclass Library {\nprivate:\n    std::vector<Book> books;\n\npublic:\n    void addBook(const Book& book) {\n        books.push_back(book);\n        std::cout << \"Book added successfully.\\n\";\n    }\n\n    void deleteBook(const std::string& title, const std::string& author) {\n        std::string lowerTitle = toLower(title);\n        std::string lowerAuthor = toLower(author);\n        for (auto it = books.begin(); it != books.end(); ++it) {\n            if (toLower(it->getTitle()) == lowerTitle && toLower(it->getAuthor()) == lowerAuthor) {\n                books.erase(it);\n                std::cout << \"Book deleted successfully.\\n\";\n                return;\n            }\n        }\n        std::cout << \"Book not found.\\n\";\n    }\n\n    std::vector<Book> searchByTitle(const std::string& title) const {\n        std::vector<Book> result;\n        std::string lowerTitle = toLower(title);\n        for (const auto& book : books) {\n            if (toLower(book.getTitle()) == lowerTitle) {\n                result.push_back(book);\n            }\n        }\n        return result;\n    }\n\n    std::vector<Book> searchByAuthor(const std::string& author) const {\n        std::vector<Book> result;\n        std::string lowerAuthor = toLower(author);\n        for (const auto& book : books) {\n            if (toLower(book.getAuthor()) == lowerAuthor) {\n                result.push_back(book);\n            }\n        }\n        return result;\n    }\n\n    void displayAllBooks() const {\n        if (books.empty()) {\n            std::cout << \"No books in the library.\\n\";\n            return;\n        }\n        for (const auto& book : books) {\n            std::cout << book << \"\\n\";\n        }\n    }\n};\n\nstd::string toLower(const std::string& str) {\n    std::string lowerStr = str;\n    std::transform(lowerStr.begin(), lowerStr.end(), lowerStr.begin(), ::tolower);\n    return lowerStr;\n}\n\nint main() {\n    Library library;\n    int choice;\n    std::string title, author;\n    int publicationYear;\n    Status status;\n\n    do {\n        std::cout << \"\\nLibrary Management System\\n\";\n        std::cout << \"1. Add a new book\\n\";\n        std::cout << \"2. Delete a book\\n\";\n        std::cout << \"3. Search for a book by title\\n\";\n        std::cout << \"4. Search for a book by author\\n\";\n        std::cout << \"5. Display all books\\n\";\n        std::cout << \"6. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter title: \";\n                std::cin.ignore();\n                std::getline(std::cin, title);\n                std::cout << \"Enter author: \";\n                std::getline(std::cin, author);\n                std::cout << \"Enter publication year: \";\n                std::cin >> publicationYear;\n                std::cout << \"Enter status (0 for Available, 1 for Borrowed): \";\n                int statusInt;\n                std::cin >> statusInt;\n                status = statusInt == 0 ? Status::AVAILABLE : Status::BORROWED;\n                Book newBook(title, author, publicationYear, status);\n                library.addBook(newBook);\n                break;\n            case 2:\n                std::cout << \"Enter title: \";\n                std::cin.ignore();\n                std::getline(std::cin, title);\n                std::cout << \"Enter author: \";\n                std::getline(std::cin, author);\n                library.deleteBook(title, author);\n                break;\n            case 3:\n                std::cout << \"Enter title: \";\n                std::cin.ignore();\n                std::getline(std::cin, title);\n                auto resultTitle = library.searchByTitle(title);\n                for (const auto& book : resultTitle) {\n                    std::cout << book << \"\\n\";\n                }\n                break;\n            case 4:\n                std::cout << \"Enter author: \";\n                std::cin.ignore();\n                std::getline(std::cin, author);\n                auto resultAuthor = library.searchByAuthor(author);\n                for (const auto& book : resultAuthor) {\n                    std::cout << book << \"\\n\";\n                }\n                break;\n            case 5:\n                library.displayAllBooks();\n                break;\n            case 6:\n                std::cout << \"Exiting...\\n\";\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\\n\";\n        }\n    } while (choice != 6);\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Book Class**: Manages book details and provides methods to get and set these details.\n2. **Library Class**: Handles operations like adding, deleting, searching, and displaying books.\n3. **Menu-Driven Interface**: Provides a simple text-based menu for users to interact with the library system.\n4. **Case-Insensitive Searches**: Converts strings to lowercase for searching to ensure case insensitivity.\n5. **Dynamic Book Management**: Uses a `std::vector` to dynamically manage the collection of books.\n\nThis system allows for basic library operations and can be extended with additional features like handling multiple copies of books, user accounts, and more complex status management."
    }
]