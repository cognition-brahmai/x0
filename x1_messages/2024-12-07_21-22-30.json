[
    {
        "role": "user",
        "content": "Implement a Java method that checks if a given number is prime or not.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java method that checks whether a given number is prime or not. This method takes an integer as input and returns a boolean value indicating whether the number is prime (true) or not (false).\n\n```java\npublic class PrimeChecker {\n\n    /**\n     * Checks if the given number is a prime number.\n     * \n     * @param number The number to check for primality.\n     * @return true if the number is prime, false otherwise.\n     */\n    public static boolean isPrime(int number) {\n        // Handle edge cases\n        if (number <= 1) {\n            return false;\n        }\n        if (number <= 3) {\n            return true;\n        }\n        // Check if the number is divisible by 2 or 3\n        if (number % 2 == 0 || number % 3 == 0) {\n            return false;\n        }\n        // Only check up to the square root of the number for efficiency\n        for (int i = 5; i * i <= number; i += 6) {\n            if (number % i == 0 || number % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    // Method to test the isPrime function\n    public static void main(String[] args) {\n        int[] testNumbers = {1, 2, 3, 4, 5, 29, 35, 97};\n        for (int num : testNumbers) {\n            System.out.println(\"Is \" + num + \" a prime number? \" + isPrime(num));\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Edge Cases Handling**:\n   - Numbers less than or equal to 1 are not prime.\n   - Numbers 2 and 3 are prime.\n\n2. **Efficient Checking**:\n   - Check divisibility by 2 and 3 initially.\n   - Use a loop starting from 5 and check divisibility by `i` and `i + 2` (to skip even numbers and multiples of 3).\n   - Only iterate up to the square root of the number for efficiency.\n\n3. **Testing**:\n   - A `main` method is provided to test the `isPrime` function with a set of numbers.\n\nThis method is efficient and handles most edge cases appropriately."
    }
]