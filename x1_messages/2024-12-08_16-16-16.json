[
    {
        "role": "user",
        "content": "Build a Python Flask application that serves as a backend for a simple e-commerce website. The application should support user authentication, product listing, and shopping cart functionality.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, building a Python Flask application for an e-commerce website sounds like a fun project! I've got some experience with Flask, but I'll need to brush up on a few things to make sure I cover all the bases. So, the main features we need are user authentication, product listing, and shopping cart functionality. Let's break this down step by step.\n\nFirst things first, I need to set up a new Flask project. I should create a virtual environment to keep my dependencies neat and separate from other projects. I can use `venv` for that. So, in my project directory, I'll run:\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n```\n\nWith the virtual environment set up, I can install Flask. The latest version should be fine:\n\n```bash\npip install Flask\n```\n\nI might also need some additional packages for database handling, user authentication, and possibly for generating URLs for static files. Flask-SQLAlchemy can handle the database, Flask-Login can manage user sessions, and Flask-WTF can help with forms. So, I'll install those as well:\n\n```bash\npip install Flask-SQLAlchemy Flask-Login Flask-WTF\n```\n\nNow, I need to think about the database schema. For an e-commerce site, I'll need at least these models: User, Product, and Cart. Maybe also CartItem to handle the many-to-many relationship between users and products in their carts.\n\nLet me sketch out the models:\n\n- **User**:\n\n- id (primary key)\n\n- username\n\n- email\n\n- password_hash\n\n- carts (relationship to Cart)\n\n- **Product**:\n\n- id (primary key)\n\n- name\n\n- description\n\n- price\n\n- stock_quantity\n\n- cart_items (relationship to CartItem)\n\n- **Cart**:\n\n- id (primary key)\n\n- user_id (foreign key to User)\n\n- cart_items (relationship to CartItem)\n\n- **CartItem**:\n\n- id (primary key)\n\n- cart_id (foreign key to Cart)\n\n- product_id (foreign key to Product)\n\n- quantity\n\nHmm, maybe I can optimize this. Do I need a separate Cart model, or can I associate CartItems directly with users? Let's see.\n\nIf I have a Cart model associated with a user, it makes sense for managing multiple carts per user or adding features like saving cart for later. But for simplicity, maybe I can have a one-to-many relationship between User and CartItem.\n\nActually, to make it clearer, perhaps I'll stick with the Cart model to represent a user's active cart. That way, it's easier to manage multiple carts or extend functionality in the future.\n\nSo, I'll proceed with the initial plan.\n\nNext, I need to set up the Flask app structure. It's good practice to organize the project into packages and blueprints, especially for larger applications. For now, I'll keep it simple but still structured.\n\nHere's a proposed directory structure:\n\n- ecom_backend/\n\n- app.py\n\n- config.py\n\n- models.py\n\n- forms.py\n\n- routes.py\n\n- templates/\n\n- base.html\n\n- index.html\n\n- login.html\n\n- register.html\n\n- product_list.html\n\n- cart.html\n\n- static/\n\n- css/\n\n- styles.css\n\n- js/\n\n- scripts.js\n\n- venv/\n\nIn `app.py`, I'll set up the Flask app instance, configure it with settings from `config.py`, and register blueprints if needed.\n\nIn `models.py`, I'll define the database models using SQLAlchemy.\n\nIn `forms.py`, I'll create WTForms for user registration, login, and any other forms needed.\n\nIn `routes.py`, I'll define the application routes and view functions.\n\n`templates/` will contain HTML templates for rendering pages.\n\n`static/` will hold CSS, JavaScript, and other static files.\n\nLet's start by setting up `app.py`:\n\n```python\nfrom flask import Flask\nfrom config import Config\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import LoginManager\n\napp = Flask(__name__)\napp.config.from_object(Config)\n\ndb = SQLAlchemy(app)\nlogin_manager = LoginManager(app)\n\nfrom app import routes, models\n```\n\nI need to create a `config.py` file to store configuration settings, such as secret keys, database URI, etc.\n\n```python\nimport os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///ecommerce.db'\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n```\n\nNext, in `models.py`, I'll define the User, Product, Cart, and CartItem models.\n\n```python\nfrom app import db, login_manager\nfrom flask_login import UserMixin\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(64), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128))\n    carts = db.relationship('Cart', backref='user', lazy=True)\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.String(200))\n    price = db.Column(db.Float, nullable=False)\n    stock_quantity = db.Column(db.Integer, nullable=False)\n    cart_items = db.relationship('CartItem', backref='product', lazy=True)\n\nclass Cart(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n    cart_items = db.relationship('CartItem', backref='cart', lazy=True)\n\nclass CartItem(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    cart_id = db.Column(db.Integer, db.ForeignKey('cart.id'), nullable=False)\n    product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)\n    quantity = db.Column(db.Integer, nullable=False)\n```\n\nI also need to set up the user loader for Flask-Login in `models.py`:\n\n```python\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n```\n\nNow, I need to create the database tables. I can do this by opening a Python shell within my virtual environment and importing the models and app, then creating the tables:\n\n```python\nfrom app import db\ndb.create_all()\n```\n\nBut it's better to script this. I can create a `db_create.py` script:\n\n```python\nfrom app import db\n\ndb.create_all()\nprint(\"Tables created\")\n```\n\nAnd run it with:\n\n```bash\npython db_create.py\n```\n\nNext, I need to set up user authentication. I'll create registration and login routes, along with the corresponding templates.\n\nIn `forms.py`, I'll define the registration and login forms:\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField\nfrom wtforms.validators import DataRequired, Email, EqualTo\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired()])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Sign Up')\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    submit = SubmitField('Login')\n```\n\nIn `routes.py`, I'll set up the registration and login routes:\n\n```python\nfrom flask import render_template, url_for, flash, redirect, request\nfrom app import app, db, login_manager\nfrom app.models import User, Cart\nfrom app.forms import RegistrationForm, LoginForm\nfrom flask_login import login_user, current_user, logout_user, login_required\n\n@app.route(\"/register\", methods=['GET', 'POST'])\ndef register():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        user = User(username=form.username.data, email=form.email.data)\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash('Congratulations, you are now a registered user!')\n        return redirect(url_for('login'))\n    return render_template('register.html', title='Register', form=form)\n\n@app.route(\"/login\", methods=['GET', 'POST'])\ndef login():\n    if current_user.is_authenticated:\n        return redirect(url_for('index'))\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user is None or not user.check_password(form.password.data):\n            flash('Invalid email or password')\n            return redirect(url_for('login'))\n        login_user(user)\n        next_page = request.args.get('next')\n        return redirect(next_page) if next_page else redirect(url_for('index'))\n    return render_template('login.html', title='Login', form=form)\n\n@app.route(\"/logout\")\ndef logout():\n    logout_user()\n    return redirect(url_for('index'))\n```\n\nI need to create the corresponding templates in `templates/`:\n\n- `register.html`\n\n- `login.html`\n\n- `logout.html`\n\nBut actually, `logout.html` isn't necessary since logout is just a redirect.\n\nLet's create `register.html` and `login.html`.\n\n`register.html`:\n\n```html\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h2>Register</h2>\n  <form method=\"POST\" action=\"\">\n    {{ form.hidden_tag() }}\n    <p>\n      {{ form.username.label }}<br>\n      {{ form.username(size=32) }}<br>\n      {% for error in form.username.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>\n      {{ form.email.label }}<br>\n      {{ form.email(size=64) }}<br>\n      {% for error in form.email.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>\n      {{ form.password.label }}<br>\n      {{ form.password(size=32) }}<br>\n      {% for error in form.password.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>\n      {{ form.confirm_password.label }}<br>\n      {{ form.confirm_password(size=32) }}<br>\n      {% for error in form.confirm_password.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>{{ form.submit() }}</p>\n  </form>\n{% endblock %}\n```\n\n`login.html`:\n\n```html\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h2>Login</h2>\n  <form method=\"POST\" action=\"\">\n    {{ form.hidden_tag() }}\n    <p>\n      {{ form.email.label }}<br>\n      {{ form.email(size=64) }}<br>\n      {% for error in form.email.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>\n      {{ form.password.label }}<br>\n      {{ form.password(size=32) }}<br>\n      {% for error in form.password.errors %}\n      <span style=\"color: red;\">[{{ error }}]</span>\n      {% endfor %}\n    </p>\n    <p>{{ form.submit() }}</p>\n  </form>\n{% endblock %}\n```\n\nI should also create a base template `base.html` to keep the HTML structure consistent across pages.\n\n`base.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <title>{% block title %}{% endblock %} - Ecommerce Backend</title>\n  <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/styles.css') }}\">\n</head>\n<body>\n  <nav>\n    <ul>\n      <li><a href=\"{{ url_for('index') }}\">Home</a></li>\n      {% if current_user.is_authenticated %}\n        <li><a href=\"{{ url_for('logout') }}\">Logout</a></li>\n        <li><a href=\"{{ url_for('cart') }}\">Cart</a></li>\n      {% else %}\n        <li><a href=\"{{ url_for('login') }}\">Login</a></li>\n        <li><a href=\"{{ url_for('register') }}\">Register</a></li>\n      {% endif %}\n    </ul>\n  </nav>\n  <div class=\"content\">\n    {% with messages = get_flashed_messages() %}\n      {% if messages %}\n        <ul>\n          {% for message in messages %}\n            <li>{{ message }}</li>\n          {% endfor %}\n        </ul>\n      {% endif %}\n    {% endwith %}\n    {% block content %}{% endblock %}\n  </div>\n</body>\n</html>\n```\n\nNow, I need to set up the product listing page. I'll create a route to display a list of products.\n\nIn `routes.py`:\n\n```python\n@app.route(\"/\")\n@app.route(\"/products\")\ndef index():\n    products = Product.query.all()\n    return render_template('product_list.html', products=products)\n```\n\nAnd create `product_list.html`:\n\n```html\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h2>Product List</h2>\n  <ul>\n    {% for product in products %}\n      <li>\n        {{ product.name }} - ${{ product.price }}\n        <form action=\"{{ url_for('add_to_cart', product_id=product.id) }}\" method=\"post\">\n          <input type=\"submit\" value=\"Add to Cart\">\n        </form>\n      </li>\n    {% endfor %}\n  </ul>\n{% endblock %}\n```\n\nWait a second, I need to set up the add to cart functionality. For that, I need to handle adding products to the user's cart.\n\nFirst, I need to ensure that each user has an active cart. I can do this by creating a cart for the user when they register or when they first try to access the cart page.\n\nLet me adjust the User model to have a one-to-one relationship with Cart, assuming one active cart per user.\n\nIn `models.py`:\n\n```python\nclass User(UserMixin, db.Model):\n    # ...\n    cart = db.relationship('Cart', backref='user', uselist=False)\n```\n\nAnd in `Cart`:\n\n```python\nclass Cart(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True, nullable=False)\n    cart_items = db.relationship('CartItem', backref='cart', lazy=True)\n```\n\nI need to make sure that each user has only one cart. I can achieve this by setting `uselist=False` in the relationship and making `user_id` unique in the Cart model.\n\nNow, I need to create a route to add items to the cart. I'll create a route like `/add_to_cart/<int:product_id>`.\n\nIn `routes.py`:\n\n```python\n@app.route(\"/add_to_cart/<int:product_id>\", methods=['POST'])\n@login_required\ndef add_to_cart(product_id):\n    product = Product.query.get_or_404(product_id)\n    cart = current_user.cart\n    if not cart:\n        cart = Cart(user=current_user)\n        db.session.add(cart)\n    cart_item = CartItem(cart=cart, product=product, quantity=1)\n    db.session.add(cart_item)\n    db.session.commit()\n    flash('Product added to cart')\n    return redirect(url_for('index'))\n```\n\nI need to make sure that if a user doesn't have a cart, one is created for them when they add their first item.\n\nAlso, I should handle cases where the product is already in the cart. In that case, I might want to increment the quantity instead of adding a new cart item.\n\nLet me adjust the `add_to_cart` function to check if the product is already in the cart:\n\n```python\n@app.route(\"/add_to_cart/<int:product_id>\", methods=['POST'])\n@login_required\ndef add_to_cart(product_id):\n    product = Product.query.get_or_404(product_id)\n    cart = current_user.cart\n    if not cart:\n        cart = Cart(user=current_user)\n        db.session.add(cart)\n    cart_item = CartItem.query.filter_by(cart=cart, product=product).first()\n    if cart_item:\n        cart_item.quantity += 1\n    else:\n        cart_item = CartItem(cart=cart, product=product, quantity=1)\n        db.session.add(cart_item)\n    db.session.commit()\n    flash('Product added to cart')\n    return redirect(url_for('index'))\n```\n\nGreat, that should handle adding products to the cart correctly.\n\nNext, I need to create a cart page where users can view their cart items, adjust quantities, and possibly remove items.\n\nIn `routes.py`:\n\n```python\n@app.route(\"/cart\")\n@login_required\ndef cart():\n    cart = current_user.cart\n    if not cart:\n        cart = Cart(user=current_user)\n        db.session.add(cart)\n        db.session.commit()\n    cart_items = cart.cart_items\n    return render_template('cart.html', cart_items=cart_items)\n```\n\nAnd create `cart.html`:\n\n```html\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h2>Your Cart</h2>\n  <table>\n    <tr>\n      <th>Product</th>\n      <th>Quantity</th>\n      <th>Price</th>\n      <th>Total</th>\n      <th>Action</th>\n    </tr>\n    {% for item in cart_items %}\n      <tr>\n        <td>{{ item.product.name }}</td>\n        <td>\n          <form action=\"{{ url_for('update_cart', cart_item_id=item.id) }}\" method=\"post\">\n            <input type=\"number\" name=\"quantity\" value=\"{{ item.quantity }}\" min=\"1\">\n            <input type=\"submit\" value=\"Update\">\n          </form>\n        </td>\n        <td>${{ item.product.price }}</td>\n        <td>${{ item.product.price * item.quantity }}</td>\n        <td>\n          <form action=\"{{ url_for('remove_from_cart', cart_item_id=item.id) }}\" method=\"post\">\n            <input type=\"submit\" value=\"Remove\">\n          </form>\n        </td>\n      </tr>\n    {% endfor %}\n  </table>\n  <p>Total: ${{ total }}</p>\n  <a href=\"{{ url_for('checkout') }}\">Checkout</a>\n{% endblock %}\n```\n\nI need to calculate the total cost of the cart. I can do this in the view function and pass it to the template.\n\nAdjusting `routes.py`:\n\n```python\n@app.route(\"/cart\")\n@login_required\ndef cart():\n    cart = current_user.cart\n    if not cart:\n        cart = Cart(user=current_user)\n        db.session.add(cart)\n        db.session.commit()\n    cart_items = cart.cart_items\n    total = sum(item.product.price * item.quantity for item in cart_items)\n    return render_template('cart.html', cart_items=cart_items, total=total)\n```\n\nAlso, I need to set up routes to update and remove items from the cart.\n\nIn `routes.py`:\n\n```python\n@app.route(\"/update_cart/<int:cart_item_id>\", methods=['POST'])\n@login_required\ndef update_cart(cart_item_id):\n    cart_item = CartItem.query.get_or_404(cart_item_id)\n    if cart_item.cart.user != current_user:\n        abort(403)\n    cart_item.quantity = int(request.form['quantity'])\n    if cart_item.quantity < 1:\n        db.session.delete(cart_item)\n    else:\n        db.session.add(cart_item)\n    db.session.commit()\n    flash('Cart updated')\n    return redirect(url_for('cart'))\n\n@app.route(\"/remove_from_cart/<int:cart_item_id>\", methods=['POST'])\n@login_required\ndef remove_from_cart(cart_item_id):\n    cart_item = CartItem.query.get_or_404(cart_item_id)\n    if cart_item.cart.user != current_user:\n        abort(403)\n    db.session.delete(cart_item)\n    db.session.commit()\n    flash('Item removed from cart')\n    return redirect(url_for('cart'))\n```\n\nI should also consider adding a checkout functionality, but that might be beyond the scope of this initial setup. For now, I'll just link to a placeholder checkout page.\n\nIn `base.html`, I added a link to checkout:\n\n```html\n<li><a href=\"{{ url_for('checkout') }}\">Checkout</a></li>\n```\n\nAnd in `routes.py`, I'll create a placeholder checkout route:\n\n```python\n@app.route(\"/checkout\")\n@login_required\ndef checkout():\n    return render_template('checkout.html')\n```\n\nI need to create `checkout.html`:\n\n```html\n{% extends \"base.html\" %}\n\n{% block content %}\n  <h2>Checkout</h2>\n  <p>Your order is being processed.</p>\n{% endblock %}\n```\n\nAlright, so far, I've set up user registration, login, product listing, and a shopping cart with add, update, and remove functionalities.\n\nNext steps could include:\n\n- Implementing a proper checkout process with payment integration.\n\n- Adding admin functionalities to manage products and users.\n\n- Enhancing the user interface with CSS and JavaScript.\n\n- Implementing error handling and validation.\n\n- Ensuring security measures are in place, like protecting against CSRF attacks, which Flask-WTF's `CsrfProtect` can handle.\n\nI should also consider testing the application to make sure all routes and functionalities work as expected.\n\nTo run the app, I can use:\n\n```bash\nflask run\n```\n\nBut first, I need to set the FLASK_APP environment variable:\n\n```bash\nexport FLASK_APP=app.py\nexport FLASK_ENV=development  # For debug mode\n```\n\nOn Windows:\n\n```cmd\nset FLASK_APP=app.py\nset FLASK_ENV=development\n```\n\nThen, run the app:\n\n```bash\nflask run\n```\n\nI can access the application in my browser at `http://127.0.0.1:5000/`.\n\nThis should give me a basic e-commerce backend with user authentication, product listing, and shopping cart functionality using Flask.\n\n## Final Solution\nTo build a Python Flask application serving as a backend for a simple e-commerce website with user authentication, product listing, and shopping cart functionality, follow these steps:\n\n### Project Structure\n\n```\necom_backend/\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 config.py\n\u251c\u2500\u2500 models.py\n\u251c\u2500\u2500 forms.py\n\u251c\u2500\u2500 routes.py\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 base.html\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u251c\u2500\u2500 login.html\n\u2502   \u251c\u2500\u2500 register.html\n\u2502   \u251c\u2500\u2500 product_list.html\n\u2502   \u251c\u2500\u2500 cart.html\n\u2502   \u2514\u2500\u2500 checkout.html\n\u251c\u2500\u2500 static/\n\u2502   \u251c\u2500\u2500 css/\n\u2502   \u2502   \u2514\u2500\u2500 styles.css\n\u2502   \u2514\u2500\u2500 js/\n\u2502       \u2514\u2500\u2500 scripts.js\n\u2514\u2500\u2500 venv/\n```\n\n### Step-by-Step Implementation\n\n1. **Set Up Virtual Environment and Install Dependencies**\n\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n   pip install Flask Flask-SQLAlchemy Flask-Login Flask-WTF\n   ```\n\n2. **Configure Flask Application (`app.py`)**\n\n   ```python\n   from flask import Flask\n   from config import Config\n   from flask_sqlalchemy import SQLAlchemy\n   from flask_login import LoginManager\n\n   app = Flask(__name__)\n   app.config.from_object(Config)\n\n   db = SQLAlchemy(app)\n   login_manager = LoginManager(app)\n\n   from app import routes, models\n   ```\n\n3. **Define Configuration Settings (`config.py`)**\n\n   ```python\n   import os\n\n   class Config:\n       SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'\n       SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///ecommerce.db'\n       SQLALCHEMY_TRACK_MODIFICATIONS = False\n   ```\n\n4. **Define Database Models (`models.py`)**\n\n   ```python\n   from app import db, login_manager\n   from flask_login import UserMixin\n   from werkzeug.security import generate_password_hash, check_password_hash\n\n   class User(UserMixin, db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       username = db.Column(db.String(64), unique=True, nullable=False)\n       email = db.Column(db.String(120), unique=True, nullable=False)\n       password_hash = db.Column(db.String(128))\n       cart = db.relationship('Cart', backref='user', uselist=False)\n\n       def set_password(self, password):\n           self.password_hash = generate_password_hash(password)\n\n       def check_password(self, password):\n           return check_password_hash(self.password_hash, password)\n\n   class Product(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       name = db.Column(db.String(100), nullable=False)\n       description = db.Column(db.String(200))\n       price = db.Column(db.Float, nullable=False)\n       stock_quantity = db.Column(db.Integer, nullable=False)\n       cart_items = db.relationship('CartItem', backref='product', lazy=True)\n\n   class Cart(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True, nullable=False)\n       cart_items = db.relationship('CartItem', backref='cart', lazy=True)\n\n   class CartItem(db.Model):\n       id = db.Column(db.Integer, primary_key=True)\n       cart_id = db.Column(db.Integer, db.ForeignKey('cart.id'), nullable=False)\n       product_id = db.Column(db.Integer, db.ForeignKey('product.id'), nullable=False)\n       quantity = db.Column(db.Integer, nullable=False)\n\n   @login_manager.user_loader\n   def load_user(user_id):\n       return User.query.get(int(user_id))\n   ```\n\n5. **Create Database Tables**\n\n   Create a script to initialize the database:\n\n   ```python\n   from app import db\n\n   db.create_all()\n   print(\"Tables created\")\n   ```\n\n   Run it with:\n\n   ```bash\n   python db_create.py\n   ```\n\n6. **Define Forms (`forms.py`)**\n\n   ```python\n   from flask_wtf import FlaskForm\n   from wtforms import StringField, PasswordField, SubmitField\n   from wtforms.validators import DataRequired, Email, EqualTo\n\n   class RegistrationForm(FlaskForm):\n       username = StringField('Username', validators=[DataRequired()])\n       email = StringField('Email', validators=[DataRequired(), Email()])\n       password = PasswordField('Password', validators=[DataRequired()])\n       confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n       submit = SubmitField('Sign Up')\n\n   class LoginForm(FlaskForm):\n       email = StringField('Email', validators=[DataRequired(), Email()])\n       password = PasswordField('Password', validators=[DataRequired()])\n       submit = SubmitField('Login')\n   ```\n\n7. **Set Up Routes (`routes.py`)**\n\n   ```python\n   from flask import render_template, url_for, flash, redirect, request\n   from app import app, db, login_manager\n   from app.models import User, Cart\n   from app.forms import RegistrationForm, LoginForm\n   from flask_login import login_user, current_user, logout_user, login_required\n\n   @app.route(\"/register\", methods=['GET', 'POST'])\n   def register():\n       if current_user.is_authenticated:\n           return redirect(url_for('index'))\n       form = RegistrationForm()\n       if form.validate_on_submit():\n           user = User(username=form.username.data, email=form.email.data)\n           user.set_password(form.password.data)\n           db.session.add(user)\n           db.session.commit()\n           flash('Congratulations, you are now a registered user!')\n           return redirect(url_for('login'))\n       return render_template('register.html', title='Register', form=form)\n\n   @app.route(\"/login\", methods=['GET', 'POST'])\n   def login():\n       if current_user.is_authenticated:\n           return redirect(url_for('index'))\n       form = LoginForm()\n       if form.validate_on_submit():\n           user = User.query.filter_by(email=form.email.data).first()\n           if user is None or not user.check_password(form.password.data):\n               flash('Invalid email or password')\n               return redirect(url_for('login'))\n           login_user(user)\n           next_page = request.args.get('next')\n           return redirect(next_page) if next_page else redirect(url_for('index'))\n       return render_template('login.html', title='Login', form=form)\n\n   @app.route(\"/logout\")\n   def logout():\n       logout_user()\n       return redirect(url_for('index'))\n\n   @app.route(\"/\")\n   @app.route(\"/products\")\n   def index():\n       products = Product.query.all()\n       return render_template('product_list.html', products=products)\n\n   @app.route(\"/add_to_cart/<int:product_id>\", methods=['POST'])\n   @login_required\n   def add_to_cart(product_id):\n       product = Product.query.get_or_404(product_id)\n       cart = current_user.cart\n       if not cart:\n           cart = Cart(user=current_user)\n           db.session.add(cart)\n       cart_item = CartItem.query.filter_by(cart=cart, product=product).first()\n       if cart_item:\n           cart_item.quantity += 1\n       else:\n           cart_item = CartItem(cart=cart, product=product, quantity=1)\n           db.session.add(cart_item)\n       db.session.commit()\n       flash('Product added to cart')\n       return redirect(url_for('index'))\n\n   @app.route(\"/cart\")\n   @login_required\n   def cart():\n       cart = current_user.cart\n       if not cart:\n           cart = Cart(user=current_user)\n           db.session.add(cart)\n           db.session.commit()\n       cart_items = cart.cart_items\n       total = sum(item.product.price * item.quantity for item in cart_items)\n       return render_template('cart.html', cart_items=cart_items, total=total)\n\n   @app.route(\"/update_cart/<int:cart_item_id>\", methods=['POST'])\n   @login_required\n   def update_cart(cart_item_id):\n       cart_item = CartItem.query.get_or_404(cart_item_id)\n       if cart_item.cart.user != current_user:\n           abort(403)\n       cart_item.quantity = int(request.form['quantity'])\n       if cart_item.quantity < 1:\n           db.session.delete(cart_item)\n       else:\n           db.session.add(cart_item)\n       db.session.commit()\n       flash('Cart updated')\n       return redirect(url_for('cart'))\n\n   @app.route(\"/remove_from_cart/<int:cart_item_id>\", methods=['POST'])\n   @login_required\n   def remove_from_cart(cart_item_id):\n       cart_item = CartItem.query.get_or_404(cart_item_id)\n       if cart_item.cart.user != current_user:\n           abort(403)\n       db.session.delete(cart_item)\n       db.session.commit()\n       flash('Item removed from cart')\n       return redirect(url_for('cart'))\n\n   @app.route(\"/checkout\")\n   @login_required\n   def checkout():\n       return render_template('checkout.html')\n   ```\n\n8. **Create HTML Templates**\n\n   - **base.html**\n\n     ```html\n     <!DOCTYPE html>\n     <html lang=\"en\">\n     <head>\n       <meta charset=\"UTF-8\">\n       <title>{% block title %}{% endblock %} - Ecommerce Backend</title>\n       <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/styles.css') }}\">\n     </head>\n     <body>\n       <nav>\n         <ul>\n           <li><a href=\"{{ url_for('index') }}\">Home</a></li>\n           {% if current_user.is_authenticated %}\n             <li><a href=\"{{ url_for('logout') }}\">Logout</a></li>\n             <li><a href=\"{{ url_for('cart') }}\">Cart</a></li>\n           {% else %}\n             <li><a href=\"{{ url_for('login') }}\">Login</a></li>\n             <li><a href=\"{{ url_for('register') }}\">Register</a></li>\n           {% endif %}\n         </ul>\n       </nav>\n       <div class=\"content\">\n         {% with messages = get_flashed_messages() %}\n           {% if messages %}\n             <ul>\n               {% for message in messages %}\n                 <li>{{ message }}</li>\n               {% endfor %}\n             </ul>\n           {% endif %}\n         {% endwith %}\n         {% block content %}{% endblock %}\n       </div>\n     </body>\n     </html>\n     ```\n\n   - **register.html**\n\n     ```html\n     {% extends \"base.html\" %}\n\n     {% block content %}\n       <h2>Register</h2>\n       <form method=\"POST\" action=\"\">\n         {{ form.hidden_tag() }}\n         <p>\n           {{ form.username.label }}<br>\n           {{ form.username(size=32) }}<br>\n           {% for error in form.username.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>\n           {{ form.email.label }}<br>\n           {{ form.email(size=64) }}<br>\n           {% for error in form.email.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>\n           {{ form.password.label }}<br>\n           {{ form.password(size=32) }}<br>\n           {% for error in form.password.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>\n           {{ form.confirm_password.label }}<br>\n           {{ form.confirm_password(size=32) }}<br>\n           {% for error in form.confirm_password.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>{{ form.submit() }}</p>\n       </form>\n     {% endblock %}\n     ```\n\n   - **login.html**\n\n     ```html\n     {% extends \"base.html\" %}\n\n     {% block content %}\n       <h2>Login</h2>\n       <form method=\"POST\" action=\"\">\n         {{ form.hidden_tag() }}\n         <p>\n           {{ form.email.label }}<br>\n           {{ form.email(size=64) }}<br>\n           {% for error in form.email.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>\n           {{ form.password.label }}<br>\n           {{ form.password(size=32) }}<br>\n           {% for error in form.password.errors %}\n           <span style=\"color: red;\">[{{ error }}]</span>\n           {% endfor %}\n         </p>\n         <p>{{ form.submit() }}</p>\n       </form>\n     {% endblock %}\n     ```\n\n   - **product_list.html**\n\n     ```html\n     {% extends \"base.html\" %}\n\n     {% block content %}\n       <h2>Product List</h2>\n       <ul>\n         {% for product in products %}\n           <li>\n             {{ product.name }} - ${{ product.price }}\n             <form action=\"{{ url_for('add_to_cart', product_id=product.id) }}\" method=\"post\">\n               <input type=\"submit\" value=\"Add to Cart\">\n             </form>\n           </li>\n         {% endfor %}\n       </ul>\n     {% endblock %}\n     ```\n\n   - **cart.html**\n\n     ```html\n     {% extends \"base.html\" %}\n\n     {% block content %}\n       <h2>Your Cart</h2>\n       <table>\n         <tr>\n           <th>Product</th>\n           <th>Quantity</th>\n           <th>Price</th>\n           <th>Total</th>\n           <th>Action</th>\n         </tr>\n         {% for item in cart_items %}\n           <tr>\n             <td>{{ item.product.name }}</td>\n             <td>\n               <form action=\"{{ url_for('update_cart', cart_item_id=item.id) }}\" method=\"post\">\n                 <input type=\"number\" name=\"quantity\" value=\"{{ item.quantity }}\" min=\"1\">\n                 <input type=\"submit\" value=\"Update\">\n               </form>\n             </td>\n             <td>${{ item.product.price }}</td>\n             <td>${{ item.product.price * item.quantity }}</td>\n             <td>\n               <form action=\"{{ url_for('remove_from_cart', cart_item_id=item.id) }}\" method=\"post\">\n                 <input type=\"submit\" value=\"Remove\">\n               </form>\n             </td>\n           </tr>\n         {% endfor %}\n       </table>\n       <p>Total: ${{ total }}</p>\n       <a href=\"{{ url_for('checkout') }}\">Checkout</a>\n     {% endblock %}\n     ```\n\n   - **checkout.html**\n\n     ```html\n     {% extends \"base.html\" %}\n\n     {% block content %}\n       <h2>Checkout</h2>\n       <p>Your order is being processed.</p>\n     {% endblock %}\n     ```\n\n9. **Run the Application**\n\n   Set environment variables and run the Flask app:\n\n   ```bash\n   export FLASK_APP=app.py\n   export FLASK_ENV=development\n   flask run\n   ```\n\n   On Windows:\n\n   ```cmd\n   set FLASK_APP=app.py\n   set FLASK_ENV=development\n   flask run\n   ```\n\n   Access the application at `http://127.0.0.1:5000/`.\n\nThis setup provides a basic e-commerce backend with user authentication, product listing, and shopping cart functionality using Flask. You can further enhance it by adding more features like admin panels, payment gateways, and improved UI/UX."
    }
]