[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add elements, remove elements, reverse the list, and display its contents."
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Python class for a singly linked list with the requested methods:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_element(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n\n    def remove_element(self, data):\n        if not self.head:\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == data:\n                current.next = current.next.next\n                return\n            current = current.next\n\n    def reverse_list(self):\n        prev = None\n        current = self.head\n        while current:\n            next_node = current.next\n            current.next = prev\n            prev = current\n            current = next_node\n        self.head = prev\n\n    def display_contents(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_element(1)\n    sll.add_element(2)\n    sll.add_element(3)\n    sll.display_contents()  # Output: 1 -> 2 -> 3 -> None\n    sll.remove_element(2)\n    sll.display_contents()  # Output: 1 -> 3 -> None\n    sll.reverse_list()\n    sll.display_contents()  # Output: 3 -> 1 -> None\n```\n\nThis class defines a singly linked list with methods to add elements to the end of the list, remove elements by value, reverse the list, and display its contents. The `Node` class is used to create new nodes with data and a reference to the next node. The `SinglyLinkedList` class manages the head of the list and provides the required functionalities."
    }
]