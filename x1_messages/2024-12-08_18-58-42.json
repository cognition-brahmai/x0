[
    {
        "role": "user",
        "content": "Develop a Python program that implements a simple HTTP server using the Flask framework. The server should have endpoints for uploading files, listing uploaded files, and downloading files by their filenames. The server should store the uploaded files in a specified directory on disk.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple HTTP server using Flask that can handle file uploads, list the uploaded files, and allow downloading them by filename. I need to make sure that the uploaded files are stored in a specified directory on the disk.\n\nFirst, I need to set up a basic Flask application. Flask is a micro web framework for Python, and it's perfect for small applications like this. I'll need to install Flask if I haven't already. I can do that using pip:\n\n```bash\npip install Flask\n```\n\nNext, I need to decide on the directory where the uploaded files will be stored. Let's call it \"uploads\". I should create this directory in my project folder or specify an absolute path.\n\nNow, I need to define the routes for the server:\n\n1. **Upload endpoint**: This will be a POST endpoint where users can upload files.\n\n2. **List endpoint**: This will be a GET endpoint that returns a list of all uploaded files.\n\n3. **Download endpoint**: This will be a GET endpoint that allows users to download a file by specifying its filename.\n\nLet's start by setting up the basic Flask app and defining the upload endpoint.\n\n## Upload Endpoint\n\nFor the upload endpoint, I need to handle file uploads. Flask provides the `request` object which can handle uploaded files. I need to make sure that the files are saved to the \"uploads\" directory.\n\nHere's how I can do it:\n\n```python\nfrom flask import Flask, request, jsonify\nimport os\n\napp = Flask(__name__)\nUPLOAD_FOLDER = 'uploads'\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file:\n        filename = file.filename\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'message': 'File uploaded successfully'}), 200\n```\n\nIn this code:\n\n- I import necessary modules.\n\n- Set up the Flask app and specify the upload folder.\n\n- Create the upload folder if it doesn't exist.\n\n- Define the `/upload` endpoint to handle POST requests.\n\n- Check if the 'file' part exists in the request.\n\n- Get the file from the request and save it to the upload folder.\n\n## List Endpoint\n\nFor listing the uploaded files, I need to read the filenames from the upload directory and return them in a list.\n\nHere's how I can implement it:\n\n```python\n@app.route('/list', methods=['GET'])\ndef list_files():\n    files = os.listdir(app.config['UPLOAD_FOLDER'])\n    return jsonify({'files': files}), 200\n```\n\nThis is straightforward:\n\n- Use `os.listdir` to get the list of files in the upload folder.\n\n- Return this list as a JSON response.\n\n## Download Endpoint\n\nFor downloading a file, I need to provide a way for users to request a file by its filename and send it back to them.\n\nFlask provides the `send_from_directory` function for this purpose.\n\nHere's how I can implement the download endpoint:\n\n```python\nfrom flask import send_from_directory\n\n@app.route('/download/<filename>', methods=['GET'])\ndef download_file(filename):\n    try:\n        return send_from_directory(app.config['UPLOAD_FOLDER'], filename, as_attachment=True)\n    except FileNotFoundError:\n        return jsonify({'error': 'File not found'}), 404\n```\n\nIn this code:\n\n- I use `send_from_directory` to send the file from the upload folder.\n\n- Set `as_attachment=True` to force download.\n\n- Handle the case where the file is not found and return an error.\n\n## Complete Code\n\nPutting it all together, the complete Flask application looks like this:\n\n```python\nfrom flask import Flask, request, jsonify, send_from_directory\nimport os\n\napp = Flask(__name__)\nUPLOAD_FOLDER = 'uploads'\napp.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER\n\nif not os.path.exists(UPLOAD_FOLDER):\n    os.makedirs(UPLOAD_FOLDER)\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file:\n        filename = file.filename\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'message': 'File uploaded successfully'}), 200\n\n@app.route('/list', methods=['GET'])\ndef list_files():\n    files = os.listdir(app.config['UPLOAD_FOLDER'])\n    return jsonify({'files': files}), 200\n\n@app.route('/download/<filename>', methods=['GET'])\ndef download_file(filename):\n    try:\n        return send_from_directory(app.config['UPLOAD_FOLDER'], filename, as_attachment=True)\n    except FileNotFoundError:\n        return jsonify({'error': 'File not found'}), 404\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n## Running the Server\n\nTo run the server, save the above code to a Python file, for example, `app.py`, and then run it using Python:\n\n```bash\npython app.py\n```\n\nThe server will start, and you can access it usually at `http://127.0.0.1:5000/`.\n\n## Testing the Endpoints\n\nYou can test these endpoints using tools like Postman or curl.\n\n### Upload a File\n\n- **Method**: POST\n\n- **URL**: `http://127.0.0.1:5000/upload`\n\n- **Body**: Form-data with a key 'file' and the file to upload.\n\n### List Files\n\n- **Method**: GET\n\n- **URL**: `http://127.0.0.1:5000/list`\n\n### Download a File\n\n- **Method**: GET\n\n- **URL**: `http://127.0.0.1:5000/download/filename.txt`\n\nReplace `filename.txt` with the name of the file you want to download.\n\n## Conclusion\n\nThis simple Flask server allows file uploads, listing of uploaded files, and downloading files by filename. It stores the uploaded files in a specified directory on the disk. This can be extended with more features like user authentication, file type restrictions, and more, depending on the requirements."
    }
]