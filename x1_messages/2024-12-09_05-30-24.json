[
    {
        "role": "user",
        "content": "Write a Python program to implement the Bubble Sort algorithm for sorting an array of integers.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere's a step-by-step explanation of how Bubble Sort works:\n\n1. **Start at the beginning of the array.**\n2. **Compare the first two elements.** If the first is greater than the second, swap them.\n3. **Move to the next pair of elements,** compare them, and swap if necessary.\n4. **Continue this process** until reaching the end of the array. This is called a pass.\n5. **Repeat the process** for each pass, but each time, the largest unsorted element bubbles up to its correct position.\n6. **After each pass,** the next largest element is placed at its correct position, reducing the number of comparisons in the next pass.\n7. **Continue** making passes through the array until no more swaps are needed, which indicates that the array is sorted.\n\nNow, let's implement this in Python.\n\n## Final Solution\nTo implement the Bubble Sort algorithm in Python, we'll follow the steps outlined in the explanation. Here's the code:\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # Traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Example usage:\narr = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(arr)\nprint(\"Sorted array is:\", arr)\n```\n\n### Approach\n\n1. **Outer Loop:** This loop runs from the first element to the last. It ensures that we make the necessary number of passes through the array.\n   \n2. **Inner Loop:** For each iteration of the outer loop, the inner loop runs from the first element to the `(n - i - 1)`-th element. This is because after each pass, the largest element is placed at the end, so we can ignore it in subsequent passes.\n   \n3. **Swapping:** During each pass, if an element is greater than the one next to it, they are swapped. This way, the larger elements gradually move towards the end of the array.\n\n4. **Optimization:** The algorithm can be optimized by stopping early if no swaps are made in a pass, indicating that the array is already sorted.\n\nThis implementation ensures that the array is sorted in ascending order using the Bubble Sort algorithm."
    }
]