[
    {
        "role": "user",
        "content": "Implement a C++ class representing a 2D point with x and y coordinates. Include methods for calculating the distance between two points, checking if two points are equal, and finding the midpoint between two points. Also, overload the stream insertion operator (<<) to display the point's coordinates in the format \"(x, y)\"."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a C++ class for a 2D point with x and y coordinates. We'll include methods to calculate the distance between two points, check if two points are equal, and find the midpoint between them. Additionally, we'll overload the stream insertion operator (<<) to easily print the point's coordinates.\n\nFirst, we need to include the necessary headers. We'll use `<iostream>` for input and output operations and `<cmath>` for mathematical functions like square root.\n\n```cpp\n#include <iostream>\n#include <cmath>\n```\n\nNext, we'll define the class `Point2D`. It will have private member variables for the x and y coordinates.\n\n```cpp\nclass Point2D {\nprivate:\n    double x, y;\n};\n```\n\nWe need a constructor to initialize the coordinates. It should take two parameters, x and y, and set the member variables accordingly.\n\n```cpp\npublic:\n    Point2D(double xCoord, double yCoord) : x(xCoord), y(yCoord) {}\n```\n\nNow, let's implement the method to calculate the distance between two points. The distance formula for two points (x1, y1) and (x2, y2) is sqrt((x2 - x1)^2 + (y2 - y1)^2).\n\n```cpp\n    double distanceTo(const Point2D& other) const {\n        double dx = other.x - x;\n        double dy = other.y - y;\n        return std::sqrt(dx * dx + dy * dy);\n    }\n```\n\nNext, we'll implement the method to check if two points are equal. Two points are equal if their x and y coordinates are the same.\n\n```cpp\n    bool isEqualTo(const Point2D& other) const {\n        return (x == other.x) && (y == other.y);\n    }\n```\n\nThen, we'll create a method to find the midpoint between two points. The midpoint's coordinates are the averages of the x and y coordinates of the two points.\n\n```cpp\n    Point2D midpoint(const Point2D& other) const {\n        double midX = (x + other.x) / 2;\n        double midY = (y + other.y) / 2;\n        return Point2D(midX, midY);\n    }\n```\n\nFinally, we'll overload the stream insertion operator (<<) to display the point's coordinates in the format \"(x, y)\".\n\n```cpp\n    friend std::ostream& operator<<(std::ostream& os, const Point2D& point) {\n        os << \"(\" << point.x << \", \" << point.y << \")\";\n        return os;\n    }\n};\n```\n\nThat's it! Now, you can create Point2D objects, calculate distances, check equality, find midpoints, and print their coordinates easily.\n\nHere's the complete code:\n\n```cpp\n#include <iostream>\n#include <cmath>\n\nclass Point2D {\nprivate:\n    double x, y;\n\npublic:\n    Point2D(double xCoord, double yCoord) : x(xCoord), y(yCoord) {}\n\n    double distanceTo(const Point2D& other) const {\n        double dx = other.x - x;\n        double dy = other.y - y;\n        return std::sqrt(dx * dx + dy * dy);\n    }\n\n    bool isEqualTo(const Point2D& other) const {\n        return (x == other.x) && (y == other.y);\n    }\n\n    Point2D midpoint(const Point2D& other) const {\n        double midX = (x + other.x) / 2;\n        double midY = (y + other.y) / 2;\n        return Point2D(midX, midY);\n    }\n\n    friend std::ostream& operator<<(std::ostream& os, const Point2D& point) {\n        os << \"(\" << point.x << \", \" << point.y << \")\";\n        return os;\n    }\n};\n\nint main() {\n    Point2D p1(1.0, 2.0);\n    Point2D p2(4.0, 6.0);\n\n    std::cout << \"Point 1: \" << p1 << std::endl;\n    std::cout << \"Point 2: \" << p2 << std::endl;\n\n    double dist = p1.distanceTo(p2);\n    std::cout << \"Distance: \" << dist << std::endl;\n\n    bool areEqual = p1.isEqualTo(p2);\n    std::cout << \"Are equal: \" << std::boolalpha << areEqual << std::endl;\n\n    Point2D mid = p1.midpoint(p2);\n    std::cout << \"Midpoint: \" << mid << std::endl;\n\n    return 0;\n}\n```\n\nThis code defines the `Point2D` class with the required methods and demonstrates their usage in the `main` function."
    }
]