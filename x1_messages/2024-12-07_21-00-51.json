[
    {
        "role": "user",
        "content": "Create a Python script that connects to an external API, fetches data in JSON format, parses the data, and stores it in a SQLite database. The script should also provide functionality for querying the stored data based on user input.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that does several things: connects to an external API, fetches data in JSON format, parses that data, and stores it in a SQLite database. Additionally, the script will allow users to query the stored data based on their input. Sounds like a fun project!\n\nFirst, let's break this down into smaller steps to make it manageable:\n\n1. **Connecting to an External API**: We need to choose an API to work with. For this example, let's use the JSONPlaceholder API, which provides fake JSON data for testing and prototyping. It's perfect for learning purposes.\n\n2. **Fetching Data in JSON Format**: Once we've selected the API, we'll use Python's `requests` library to make HTTP requests and fetch the JSON data.\n\n3. **Parsing the Data**: Since the data is in JSON format, it will be easy to work with in Python because JSON maps directly to Python dictionaries.\n\n4. **Storing Data in a SQLite Database**: We'll use Python's built-in `sqlite3` library to create a database and store the fetched data.\n\n5. **Querying the Stored Data**: Finally, we'll create functions that allow users to input queries, and the script will retrieve and display the relevant data from the database.\n\nLet's start by setting up our environment and importing the necessary libraries.\n\n### Step 1: Setting Up the Environment\n\nFirst, make sure you have Python installed on your system. You can download it from [python.org](https://www.python.org/).\n\nWe'll need the `requests` library to handle HTTP requests. You can install it using pip:\n\n```bash\npip install requests\n```\n\nNow, let's start writing our script.\n\n### Step 2: Connecting to the External API\n\nWe'll use the JSONPlaceholder API to fetch some sample data. For this example, let's fetch posts.\n\nHere's how you can make a request to the API:\n\n```python\nimport requests\n\ndef fetch_data(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Failed to fetch data: {response.status_code}\")\n        return None\n\nurl = \"https://jsonplaceholder.typicode.com/posts\"\ndata = fetch_data(url)\n\nif data:\n    print(\"Data fetched successfully:\")\n    for item in data:\n        print(item)\n```\n\nThis function `fetch_data` takes a URL, makes a GET request, and returns the JSON data if the request is successful.\n\n### Step 3: Parsing the Data\n\nSince the data is already in JSON format, which is parsed into a list of dictionaries by `requests.get().json()`, we don't need to do much parsing. Each item in the list represents a post with keys like `userId`, `id`, `title`, and `body`.\n\n### Step 4: Storing Data in a SQLite Database\n\nFirst, we need to set up a SQLite database and a table to store the posts.\n\n```python\nimport sqlite3\n\ndef setup_database():\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS posts\n                 (userId INTEGER, id INTEGER PRIMARY KEY, title TEXT, body TEXT)''')\n    conn.commit()\n    conn.close()\n\ndef insert_data(data):\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    for post in data:\n        c.execute('''INSERT OR IGNORE INTO posts (userId, id, title, body)\n                      VALUES (?, ?, ?, ?)''', (post['userId'], post['id'], post['title'], post['body']))\n    conn.commit()\n    conn.close()\n\nsetup_database()\nif data:\n    insert_data(data)\n    print(\"Data inserted into database.\")\n```\n\nHere, `setup_database` creates a database named `posts.db` and a table named `posts` if it doesn't already exist. The `insert_data` function inserts the fetched data into this table, making sure to ignore duplicates based on the `id` field.\n\n### Step 5: Querying the Stored Data\n\nNow, let's create a function that allows users to query the database based on `userId`.\n\n```python\ndef query_data(user_id):\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    c.execute('''SELECT * FROM posts WHERE userId = ?''', (user_id,))\n    rows = c.fetchall()\n    conn.close()\n    return rows\n\ndef main():\n    while True:\n        user_input = input(\"Enter a user ID to query posts (or 'exit' to quit): \")\n        if user_input.lower() == 'exit':\n            break\n        try:\n            user_id = int(user_input)\n            results = query_data(user_id)\n            if results:\n                print(f\"Posts by user ID {user_id}:\")\n                for row in results:\n                    print(row)\n            else:\n                print(f\"No posts found for user ID {user_id}.\")\n        except ValueError:\n            print(\"Please enter a valid integer for user ID.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nIn this `main` function, the script repeatedly asks the user for a `userId` and displays the posts by that user. The user can type 'exit' to quit the program.\n\n### Putting It All Together\n\nHere's the complete script:\n\n```python\nimport requests\nimport sqlite3\n\ndef fetch_data(url):\n    response = requests.get(url)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        print(f\"Failed to fetch data: {response.status_code}\")\n        return None\n\ndef setup_database():\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    c.execute('''CREATE TABLE IF NOT EXISTS posts\n                 (userId INTEGER, id INTEGER PRIMARY KEY, title TEXT, body TEXT)''')\n    conn.commit()\n    conn.close()\n\ndef insert_data(data):\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    for post in data:\n        c.execute('''INSERT OR IGNORE INTO posts (userId, id, title, body)\n                      VALUES (?, ?, ?, ?)''', (post['userId'], post['id'], post['title'], post['body']))\n    conn.commit()\n    conn.close()\n\ndef query_data(user_id):\n    conn = sqlite3.connect('posts.db')\n    c = conn.cursor()\n    c.execute('''SELECT * FROM posts WHERE userId = ?''', (user_id,))\n    rows = c.fetchall()\n    conn.close()\n    return rows\n\ndef main():\n    url = \"https://jsonplaceholder.typicode.com/posts\"\n    data = fetch_data(url)\n    if data:\n        setup_database()\n        insert_data(data)\n        print(\"Data fetched and inserted into database.\")\n    else:\n        print(\"No data to process.\")\n    \n    while True:\n        user_input = input(\"Enter a user ID to query posts (or 'exit' to quit): \")\n        if user_input.lower() == 'exit':\n            break\n        try:\n            user_id = int(user_input)\n            results = query_data(user_id)\n            if results:\n                print(f\"Posts by user ID {user_id}:\")\n                for row in results:\n                    print(row)\n            else:\n                print(f\"No posts found for user ID {user_id}.\")\n        except ValueError:\n            print(\"Please enter a valid integer for user ID.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Fetching Data**: We use the `requests` library to get data from the JSONPlaceholder API.\n2. **Setting Up Database**: We create a SQLite database and a table to store the posts.\n3. **Inserting Data**: We insert the fetched data into the database, ensuring no duplicates.\n4. **Querying Data**: We allow users to query posts by `userId` and display the results.\n\nThis script provides a basic framework for interacting with an API, storing data in a database, and querying that data based on user input. You can expand upon this by adding more features, such as handling different types of queries or working with different APIs."
    }
]