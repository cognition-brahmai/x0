[
    {
        "role": "user",
        "content": "Design a simple RESTful API using Flask (Python) that supports CRUD operations on a collection of books. Each book should have properties like title, author, publication date, and ISBN number. Use SQLite as the backend database for storing book information. Implement input validation for adding and updating books.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a simple RESTful API using Flask in Python that supports CRUD operations on a collection of books. Each book will have properties like title, author, publication date, and ISBN number. I'll use SQLite as the backend database to store the book information and implement input validation for adding and updating books.\n\nFirst, I need to set up a new Python project and install the necessary dependencies. I'll need Flask for the web framework and Flask-SQLAlchemy to handle the database operations.\n\n## Step 1: Project Setup\n\n### Install Dependencies\n\nI'll create a new directory for my project and set up a virtual environment to manage dependencies.\n\n```bash\nmkdir book_api\ncd book_api\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n```\n\nNow, install Flask and Flask-SQLAlchemy:\n\n```bash\npip install Flask Flask-SQLAlchemy\n```\n\n### Initialize Flask App\n\nCreate a new file called `app.py` and set up the basic structure of the Flask app.\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_sqlalchemy import SQLAlchemy\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///books.db'\ndb = SQLAlchemy(app)\n\nclass Book(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    author = db.Column(db.String(100), nullable=False)\n    publication_date = db.Column(db.String(20), nullable=False)\n    isbn = db.Column(db.String(20), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f\"Book('{self.title}', '{self.author}', '{self.publication_date}', '{self.isbn}')\"\n\n@app.route('/')\ndef home():\n    return \"Book API is running!\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n## Step 2: Database Setup\n\nBefore running the app, I need to create the database and the books table.\n\n```bash\npython\n```\n\nIn the Python shell:\n\n```python\nfrom app import db\ndb.create_all()\nexit()\n```\n\nThis will create a SQLite database file named `books.db` in the project directory with the books table.\n\n## Step 3: Implement CRUD Operations\n\nNow, I'll implement the CRUD operations: Create, Read, Update, and Delete.\n\n### Create a Book\n\nImplement an endpoint to add a new book to the collection.\n\n```python\n@app.route('/books', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    if not all(key in data for key in ['title', 'author', 'publication_date', 'isbn']):\n        return jsonify({\"error\": \"Missing required fields\"}), 400\n\n    # Input validation\n    if len(data['title']) > 100 or len(data['author']) > 100:\n        return jsonify({\"error\": \"Title and author must not exceed 100 characters\"}), 400\n\n    if not data['isbn'].isdigit() or len(data['isbn']) != 13:\n        return jsonify({\"error\": \"ISBN must be a 13-digit number\"}), 400\n\n    new_book = Book(title=data['title'], author=data['author'], publication_date=data['publication_date'], isbn=data['isbn'])\n    db.session.add(new_book)\n    db.session.commit()\n    return jsonify({\"message\": \"Book added successfully\"}), 201\n```\n\n### Read Books\n\nImplement endpoints to get all books and get a single book by ID.\n\n```python\n@app.route('/books', methods=['GET'])\ndef get_books():\n    books = Book.query.all()\n    output = []\n    for book in books:\n        book_data = {\n            'id': book.id,\n            'title': book.title,\n            'author': book.author,\n            'publication_date': book.publication_date,\n            'isbn': book.isbn\n        }\n        output.append(book_data)\n    return jsonify(output)\n\n@app.route('/books/<int:id>', methods=['GET'])\ndef get_book(id):\n    book = Book.query.get_or_404(id)\n    book_data = {\n        'id': book.id,\n        'title': book.title,\n        'author': book.author,\n        'publication_date': book.publication_date,\n        'isbn': book.isbn\n    }\n    return jsonify(book_data)\n```\n\n### Update a Book\n\nImplement an endpoint to update an existing book.\n\n```python\n@app.route('/books/<int:id>', methods=['PUT'])\ndef update_book(id):\n    book = Book.query.get_or_404(id)\n    data = request.get_json()\n\n    # Input validation\n    if 'title' in data and len(data['title']) > 100:\n        return jsonify({\"error\": \"Title must not exceed 100 characters\"}), 400\n    if 'author' in data and len(data['author']) > 100:\n        return jsonify({\"error\": \"Author must not exceed 100 characters\"}), 400\n    if 'isbn' in data and (not data['isbn'].isdigit() or len(data['isbn']) != 13):\n        return jsonify({\"error\": \"ISBN must be a 13-digit number\"}), 400\n\n    book.title = data.get('title', book.title)\n    book.author = data.get('author', book.author)\n    book.publication_date = data.get('publication_date', book.publication_date)\n    book.isbn = data.get('isbn', book.isbn)\n    db.session.commit()\n    return jsonify({\"message\": \"Book updated successfully\"})\n```\n\n### Delete a Book\n\nImplement an endpoint to delete a book.\n\n```python\n@app.route('/books/<int:id>', methods=['DELETE'])\ndef delete_book(id):\n    book = Book.query.get_or_404(id)\n    db.session.delete(book)\n    db.session.commit()\n    return jsonify({\"message\": \"Book deleted successfully\"})\n```\n\n## Step 4: Run the API\n\nNow, I can run the Flask app.\n\n```bash\npython app.py\n```\n\nThe API should be running on `http://127.0.0.1:5000/`. I can use tools like Postman or curl to test the endpoints.\n\n## Step 5: Testing\n\n### Add a Book\n\nUsing curl:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\n    \"title\": \"Sample Book\",\n    \"author\": \"John Doe\",\n    \"publication_date\": \"2023-01-01\",\n    \"isbn\": \"1234567890123\"\n}' http://127.0.0.1:5000/books\n```\n\n### Get All Books\n\n```bash\ncurl http://127.0.0.1:5000/books\n```\n\n### Get a Single Book\n\n```bash\ncurl http://127.0.0.1:5000/books/1\n```\n\n### Update a Book\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\n    \"title\": \"Updated Book Title\"\n}' http://127.0.0.1:5000/books/1\n```\n\n### Delete a Book\n\n```bash\ncurl -X DELETE http://127.0.0.1:5000/books/1\n```\n\n## Conclusion\n\nI've successfully created a simple RESTful API using Flask that performs CRUD operations on a collection of books stored in an SQLite database. Input validation is implemented to ensure data integrity when adding or updating books. This API can be extended with more features and improved with additional error handling and validation as needed."
    }
]