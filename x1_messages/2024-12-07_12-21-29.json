[
    {
        "role": "user",
        "content": "Create a C++ implementation of a stack data structure using arrays, including push, pop, top, and isEmpty operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple C++ implementation of a stack data structure using arrays. This implementation includes the push, pop, top, and isEmpty operations.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Stack {\nprivate:\n    static const int MAX_SIZE = 100; // Maximum size of the stack\n    int arr[MAX_SIZE]; // Array to store stack elements\n    int topIndex; // Index of the top element\n\npublic:\n    Stack() : topIndex(-1) {} // Constructor to initialize the stack\n\n    // Push operation to add an element to the stack\n    void push(int value) {\n        if (topIndex >= MAX_SIZE - 1) {\n            cout << \"Stack overflow. Cannot push \" << value << endl;\n            return;\n        }\n        arr[++topIndex] = value;\n        cout << \"Pushed \" << value << \" to stack.\" << endl;\n    }\n\n    // Pop operation to remove the top element from the stack\n    void pop() {\n        if (isEmpty()) {\n            cout << \"Stack is empty. Cannot pop.\" << endl;\n            return;\n        }\n        cout << \"Popped \" << arr[topIndex] << \" from stack.\" << endl;\n        topIndex--;\n    }\n\n    // Top operation to get the top element of the stack\n    int top() {\n        if (isEmpty()) {\n            cout << \"Stack is empty.\" << endl;\n            return -1; // Assuming -1 as an error value\n        }\n        return arr[topIndex];\n    }\n\n    // isEmpty operation to check if the stack is empty\n    bool isEmpty() {\n        return topIndex == -1;\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    cout << \"Top element is: \" << stack.top() << endl;\n    stack.pop();\n    cout << \"Top element is: \" << stack.top() << endl;\n    stack.pop();\n    stack.pop();\n    stack.pop(); // Trying to pop from empty stack\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `Stack` class manages a stack using an array `arr` with a maximum size of `MAX_SIZE`.\n   - `topIndex` keeps track of the top element's index in the stack.\n\n2. **Constructor:**\n   - Initializes `topIndex` to -1, indicating an empty stack.\n\n3. **Push Operation:**\n   - Adds an element to the top of the stack.\n   - Checks for stack overflow before pushing.\n\n4. **Pop Operation:**\n   - Removes the top element from the stack.\n   - Checks if the stack is empty before popping.\n\n5. **Top Operation:**\n   - Returns the top element of the stack without removing it.\n   - Checks if the stack is empty before accessing the top element.\n\n6. **IsEmpty Operation:**\n   - Returns true if the stack is empty, otherwise false.\n\n7. **Main Function:**\n   - Demonstrates the usage of the stack by pushing and popping elements and checking the top element.\n\nThis implementation provides a basic understanding of how a stack can be implemented using arrays in C++."
    }
]