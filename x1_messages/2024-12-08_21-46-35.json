[
    {
        "role": "user",
        "content": "Create a Node.js Express server that supports CRUD operations on a collection of \"Books\". Each book should have a title, author, publication date, and ISBN number. Use MongoDB as the backend database and implement proper validation checks for each field. The server should also provide endpoints to search books by title or author and return the results in JSON format.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Node.js Express server that handles CRUD operations for a collection of books, stored in MongoDB. Each book has a title, author, publication date, and ISBN number. I need to make sure there's proper validation for each field and also provide endpoints to search books by title or author, returning the results in JSON.\n\nFirst, I need to set up a new Node.js project. I'll start by creating a new directory for my project and initializing it with npm.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nNext, I need to install the necessary dependencies. I'll need Express for the server, Mongoose for interacting with MongoDB, and probably body-parser to handle request bodies.\n\n```bash\nnpm install express mongoose body-parser\n```\n\nNow, I'll set up the basic structure of my server. I'll create an `app.js` file and set up the Express app.\n\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/bookdb', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Define Book schema\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  isbn: { type: String, required: true, unique: true },\n});\n\nconst Book = mongoose.model('Book', bookSchema);\n\n// CRUD operations\n\n// Create a book\napp.post('/books', async (req, res) => {\n  const book = new Book(req.body);\n  try {\n    await book.save();\n    res.status(201).send(book);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Get all books\napp.get('/books', async (req, res) => {\n  try {\n    const books = await Book.find({});\n    res.send(books);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\n// Get a book by ID\napp.get('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findById(req.params.id);\n    if (!book) {\n      return res.status(404).send();\n    }\n    res.send(book);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\n// Update a book by ID\napp.patch('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    if (!book) {\n      return res.status(404).send();\n    }\n    res.send(book);\n  } catch (error) {\n    res.status(400).send(error);\n  }\n});\n\n// Delete a book by ID\napp.delete('/books/:id', async (req, res) => {\n  try {\n    const book = await Book.findByIdAndDelete(req.params.id);\n    if (!book) {\n      return res.status(404).send();\n    }\n    res.send(book);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\n// Search books by title or author\napp.get('/books/search', async (req, res) => {\n  const { title, author } = req.query;\n  let query = {};\n\n  if (title) {\n    query.title = { $regex: title, $options: 'i' };\n  }\n\n  if (author) {\n    query.author = { $regex: author, $options: 'i' };\n  }\n\n  try {\n    const books = await Book.find(query);\n    res.send(books);\n  } catch (error) {\n    res.status(500).send(error);\n  }\n});\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nIn this setup, I've defined the Book model with the required fields and their validation rules. The ISBN is set to be unique to prevent duplicates.\n\nI've implemented the following endpoints:\n\n- POST /books: Create a new book.\n\n- GET /books: Retrieve all books.\n\n- GET /books/:id: Retrieve a book by its ID.\n\n- PATCH /books/:id: Update a book by its ID.\n\n- DELETE /books/:id: Delete a book by its ID.\n\n- GET /books/search?title=...&author=...: Search books by title or author, using regular expressions for case-insensitive searching.\n\nI've also set up basic error handling for each endpoint, returning appropriate HTTP status codes based on the outcome.\n\nTo test this API, you can use tools like Postman or curl to make requests to these endpoints.\n\nFor example, to create a new book:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationDate\":\"2022-01-01\",\"isbn\":\"1234567890\"}' http://localhost:3000/books\n```\n\nTo search for books by title:\n\n```bash\ncurl http://localhost:3000/books/search?title=sample\n```\n\nThis should give you a good starting point for a book API with CRUD operations and search functionality.\n\n## Final Solution\nTo create a Node.js Express server that supports CRUD operations on a collection of \"Books\" with MongoDB as the backend, follow these steps:\n\n### Step 1: Set Up the Project\n\n1. **Create a new directory and initialize npm:**\n   ```bash\n   mkdir book-api\n   cd book-api\n   npm init -y\n   ```\n\n2. **Install necessary dependencies:**\n   ```bash\n   npm install express mongoose body-parser\n   ```\n\n### Step 2: Set Up the Server\n\n1. **Create `app.js`:**\n   ```javascript\n   const express = require('express');\n   const mongoose = require('mongoose');\n   const bodyParser = require('body-parser');\n\n   const app = express();\n   app.use(bodyParser.json());\n\n   // Connect to MongoDB\n   mongoose.connect('mongodb://localhost:27017/bookdb', {\n     useNewUrlParser: true,\n     useUnifiedTopology: true,\n   });\n\n   // Define Book schema\n   const bookSchema = new mongoose.Schema({\n     title: { type: String, required: true },\n     author: { type: String, required: true },\n     publicationDate: { type: Date, required: true },\n     isbn: { type: String, required: true, unique: true },\n   });\n\n   const Book = mongoose.model('Book', bookSchema);\n\n   // CRUD operations\n\n   // Create a book\n   app.post('/books', async (req, res) => {\n     const book = new Book(req.body);\n     try {\n       await book.save();\n       res.status(201).send(book);\n     } catch (error) {\n       res.status(400).send(error);\n     }\n   });\n\n   // Get all books\n   app.get('/books', async (req, res) => {\n     try {\n       const books = await Book.find({});\n       res.send(books);\n     } catch (error) {\n       res.status(500).send(error);\n     }\n   });\n\n   // Get a book by ID\n   app.get('/books/:id', async (req, res) => {\n     try {\n       const book = await Book.findById(req.params.id);\n       if (!book) {\n         return res.status(404).send();\n       }\n       res.send(book);\n     } catch (error) {\n       res.status(500).send(error);\n     }\n   });\n\n   // Update a book by ID\n   app.patch('/books/:id', async (req, res) => {\n     try {\n       const book = await Book.findByIdAndUpdate(req.params.id, req.body, { new: true });\n       if (!book) {\n         return res.status(404).send();\n       }\n       res.send(book);\n     } catch (error) {\n       res.status(400).send(error);\n     }\n   });\n\n   // Delete a book by ID\n   app.delete('/books/:id', async (req, res) => {\n     try {\n       const book = await Book.findByIdAndDelete(req.params.id);\n       if (!book) {\n         return res.status(404).send();\n       }\n       res.send(book);\n     } catch (error) {\n       res.status(500).send(error);\n     }\n   });\n\n   // Search books by title or author\n   app.get('/books/search', async (req, res) => {\n     const { title, author } = req.query;\n     let query = {};\n\n     if (title) {\n       query.title = { $regex: title, $options: 'i' };\n     }\n\n     if (author) {\n       query.author = { $regex: author, $options: 'i' };\n     }\n\n     try {\n       const books = await Book.find(query);\n       res.send(books);\n     } catch (error) {\n       res.status(500).send(error);\n     }\n   });\n\n   const port = process.env.PORT || 3000;\n   app.listen(port, () => {\n     console.log(`Server is running on port ${port}`);\n   });\n   ```\n\n### Step 3: Run the Server\n\n1. **Start the server:**\n   ```bash\n   node app.js\n   ```\n\n2. **Test the API using tools like Postman or curl.**\n\n   - **Create a new book:**\n     ```bash\n     curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationDate\":\"2022-01-01\",\"isbn\":\"1234567890\"}' http://localhost:3000/books\n     ```\n\n   - **Search for books by title:**\n     ```bash\n     curl http://localhost:3000/books/search?title=sample\n     ```\n\nThis setup provides a basic CRUD API for managing books with search functionality by title and author, using MongoDB and Express.js."
    }
]