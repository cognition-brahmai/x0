[
    {
        "role": "user",
        "content": "Develop a Golang program that simulates the classic Hangman game with these features:\n   - The program should randomly select a word from a predefined list.\n   - The player has a limited number of guesses to identify the word by guessing individual letters.\n   - After each guess, the program should display the current state of the word and remaining attempts.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Hangman game in Golang. Let's break this down step by step.\n\nFirst, we need to have a list of words from which the program can select one at random. So, let's define a slice of strings containing various words.\n\nNext, we need to select a word randomly from this list. For that, we'll need to use Go's rand package.\n\nNow, the player needs to guess letters one by one, and they have a limited number of attempts. Let's say they have 6 attempts, which is common in Hangman.\n\nAfter each guess, we need to display the current state of the word, showing which letters have been guessed correctly and which are still missing. We can represent the unknown letters with underscores.\n\nAlso, we should keep track of the letters that have already been guessed to prevent duplicates.\n\nFinally, we need to check if the player has won (guessed all the letters) or lost (ran out of attempts).\n\nLet's start by setting up the basic structure of the program.\n\n## Final Solution\nTo create a simple Hangman game in Go, follow the steps below. This program will randomly select a word from a predefined list and allow the player to guess letters until they either correctly guess the word or run out of attempts.\n\n### Approach\n\n1. **Predefine a list of words:** Use a slice of strings containing the words from which one will be randomly selected.\n2. **Randomly select a word:** Utilize Go's `rand` package to select a word from the list.\n3. **Track player guesses:** Use a map to keep track of guessed letters and a set of correct guesses.\n4. **Display current state:** After each guess, show the word with correctly guessed letters revealed and underscores for\u672a\u731c\u4e2d\u7684 letters.\n5. **Limit attempts:** Set a fixed number of attempts (e.g., 6) and decrement with each incorrect guess.\n6. **Check for win or loss:** End the game if the player guesses all letters or runs out of attempts.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"math/rand\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Predefined list of words\n\twordList := []string{\"apple\", \"banana\", \"cherry\", \"date\", \"fig\", \"grape\", \"kiwi\", \"lemon\", \"mango\", \"orange\"}\n\n\t// Seed the random number generator\n\trand.Seed(time.Now().UnixNano())\n\n\t// Randomly select a word from the list\n\tsecretWord := wordList[rand.Intn(len(wordList))]\n\twordLength := len(secretWord)\n\n\t// Initialize a slice to keep track of correctly guessed letters\n\tguessed := make([]rune, wordLength)\n\tfor i := range secretWord {\n\t\tguessed[i] = '_'\n\t}\n\n\t// Set of already guessed letters\n\tvar guessedLetters = make(map[rune]bool)\n\n\t// Number of attempts\n\tattempts := 6\n\n\t// Reader for input\n\treader := bufio.NewReader(os.Stdin)\n\n\tfmt.Println(\"Welcome to Hangman!\")\n\n\tfor attempts > 0 && string(guessed) != secretWord {\n\t\tfmt.Println(\"\\nCurrent word:\", string(guessed))\n\t\tfmt.Println(\"Attempts left:\", attempts)\n\t\tfmt.Print(\"Guess a letter: \")\n\n\t\t// Read input\n\t\tinput, _ := reader.ReadString('\\n')\n\t\tinput = strings.TrimSpace(input)\n\t\tif len(input) == 0 {\n\t\t\tcontinue\n\t\t}\n\t\tguess := rune(input[0]) // Only consider the first character\n\n\t\t// Check if already guessed\n\t\tif guessedLetters[guess] {\n\t\t\tfmt.Println(\"You already guessed that letter.\")\n\t\t\tcontinue\n\t\t}\n\t\tguessedLetters[guess] = true\n\n\t\t// Check if the guess is in the secret word\n\t\tfound := false\n\t\tfor i, letter := range secretWord {\n\t\t\tif rune(letter) == guess {\n\t\t\t\tguessed[i] = guess\n\t\t\t\tfound = true\n\t\t\t}\n\t\t}\n\n\t\tif !found {\n\t\t\tattempts--\n\t\t\tfmt.Println(\"Incorrect guess.\")\n\t\t} else {\n\t\t\tfmt.Println(\"Correct guess!\")\n\t\t}\n\n\t\t// Check if the word has been fully guessed\n\t\tif string(guessed) == secretWord {\n\t\t\tfmt.Println(\"\\nCongratulations! You've guessed the word:\", secretWord)\n\t\t\treturn\n\t\t}\n\t}\n\n\tif attempts == 0 {\n\t\tfmt.Println(\"\\nOut of attempts! The word was:\", secretWord)\n\t}\n}\n```\n\n### Explanation\n\n1. **Word Selection:** A list of words is predefined, and one is chosen randomly using `rand.Intn`.\n2. **Tracking Guesses:** A slice of runes is used to keep track of the player's progress, starting with underscores for each letter.\n3. **Input Handling:** Player inputs are read from standard input, and only the first character is considered for the guess.\n4. **Game Loop:** The game continues until the player either guesses the word or runs out of attempts. After each guess, the current state of the word is displayed, along with remaining attempts.\n5. **Win and Lose Conditions:** The game checks after each correct guess if the word has been fully revealed, and if attempts reach zero, the game ends in a loss."
    }
]