[
    {
        "role": "user",
        "content": "Write a Python script to implement a stack data structure with push, pop, and peek operations, along with error handling for empty stacks."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. So, a stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed. Common operations on a stack include push (add an element), pop (remove the top element), and peek (view the top element without removing it).\n\nIn Python, we can implement a stack using a list, which provides dynamic array capabilities. We'll also add some error handling to manage situations where someone tries to pop or peek from an empty stack.\n\nHere's a simple implementation:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"pop from empty stack\")\n        return self.items.pop()\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"peek from empty stack\")\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)\n```\n\nLet's break down this code:\n\n1. **Initialization (`__init__`)**: We use a list to store the stack's elements.\n\n2. **is_empty**: This method checks if the stack is empty by returning `True` if the list's length is zero, otherwise `False`.\n\n3. **push**: This method adds an item to the top of the stack by appending it to the list.\n\n4. **pop**: This method removes and returns the top item from the stack. It first checks if the stack is empty and raises an `IndexError` if it is. Otherwise, it uses the list's `pop()` method to remove and return the last item.\n\n5. **peek**: This method returns the top item without removing it. It also checks if the stack is empty and raises an `IndexError` if it is. Otherwise, it returns the last item in the list.\n\n6. **size**: This method returns the number of items in the stack by returning the list's length.\n\nYou can use this `Stack` class in your programs to manage data in a LIFO manner. Here's a simple example of how to use it:\n\n```python\nif __name__ == \"__main__\":\n    stack = Stack()\n    print(\"Is the stack empty? \", stack.is_empty())\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(\"Stack size:\", stack.size())\n    print(\"Top item:\", stack.peek())\n    print(\"Popped item:\", stack.pop())\n    print(\"Stack size after pop:\", stack.size())\n    print(\"Is the stack empty? \", stack.is_empty())\n```\n\nThis will output:\n\n```\nIs the stack empty?  True\nStack size: 3\nTop item: 3\nPopped item: 3\nStack size after pop: 2\nIs the stack empty?  False\n```\n\nThis implementation is straightforward and efficient for most use cases. The list's append and pop operations are O(1) on average, making them suitable for stack operations.\n\nIf you have any questions or need further explanations, feel free to ask!"
    }
]