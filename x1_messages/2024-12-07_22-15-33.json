[
    {
        "role": "user",
        "content": "Create a Python script to implement a stack data structure with push, pop, peek, and is_empty methods.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in Python, including the methods `push`, `pop`, `peek`, and `is_empty`.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    print(stack.is_empty())  # Output: True\n\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n\n    print(stack.peek())     # Output: 3\n    print(stack.pop())      # Output: 3\n    print(stack.peek())     # Output: 2\n    print(stack.is_empty()) # Output: False\n```\n\nThis script defines a `Stack` class that uses a list to store elements. The `push` method adds an element to the top of the stack, `pop` removes the top element, `peek` returns the top element without removing it, and `is_empty` checks if the stack is empty. The example usage demonstrates these methods in action."
    }
]