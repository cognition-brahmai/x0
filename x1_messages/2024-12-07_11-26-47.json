[
    {
        "role": "user",
        "content": "Write a Python script to monitor an Azure Storage account for new files being uploaded. When a new file is detected, print its name and size to the console.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To monitor an Azure Storage account for new files being uploaded, you can use the Azure Storage Blob service along with Azure Event Grid for event handling. Here's a step-by-step guide on how to achieve this:\n\n1. **Set Up Azure Storage and Event Grid:**\n   - Ensure you have an Azure Storage account set up.\n   - Create a container within your storage account where you'll upload files.\n   - Set up an Event Grid subscription to listen for blob upload events.\n\n2. **Install Required Libraries:**\n   - You'll need the `azure-eventgrid` and `azure-storage-blob` libraries. You can install them using pip:\n     ```bash\n     pip install azure-eventgrid azure-storage-blob\n     ```\n\n3. **Create an HTTP Endpoint to Receive Events:**\n   - For local development, you can use a tool like ngrok to expose your local server to the internet.\n   - Create a simple Flask app to handle incoming events.\n\n4. **Configure Event Grid Subscription:**\n   - In the Azure portal, navigate to your storage account.\n   - Go to Event Subscriptions and create a new subscription.\n   - Choose the source as your storage account and select the event types you're interested in (e.g., Microsoft.Storage.BlobCreated).\n   - Set the endpoint to your Flask app's URL (via ngrok).\n\n5. **Write the Flask App to Handle Events:**\n   - The Flask app will receive events when a new blob is uploaded.\n   - Extract the blob name and size from the event and print them to the console.\n\nHere's a sample Python script using Flask to handle the events:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\n\napp = Flask(__name__)\n\n@app.route('/eventgrid', methods=['POST'])\ndef event_grid_handler():\n    events = request.get_json()\n    for event in events:\n        if event['eventType'] == 'Microsoft.Storage.BlobCreated':\n            data = event['data']\n            blob_url = data['url']\n            blob_name = data['blobUrl'].split('/')[-1]\n            \n            # Get blob size\n            blob_service_client = BlobServiceClient.from_connection_string(\"<your-connection-string>\")\n            container_name = data['api']['path'].split('/')[1]\n            blob_client = blob_service_client.get_blob_client(container=container_name, blob=blob_name)\n            blob_properties = blob_client.get_blob_properties()\n            blob_size = blob_properties.size\n            \n            print(f\"New file uploaded: {blob_name}, Size: {blob_size} bytes\")\n    \n    return jsonify({\"status\": \"ok\"}), 200\n\nif __name__ == '__main__':\n    app.run(port=5000)\n```\n\n### Explanation:\n\n1. **Flask App Setup:**\n   - A simple Flask app is set up to listen for POST requests on the `/eventgrid` endpoint.\n\n2. **Event Handling:**\n   - When an event is received, it checks if the event type is `Microsoft.Storage.BlobCreated`.\n   - Extracts the blob URL and name from the event data.\n   - Uses the Azure Blob Service Client to get the blob properties and retrieve its size.\n\n3. **Printing to Console:**\n   - Prints the blob name and size to the console.\n\n4. **Running the App:**\n   - The app runs on port 5000. Use ngrok to expose this locally running server to the internet, and set this exposed URL as the endpoint in your Event Grid subscription.\n\n### Notes:\n\n- Replace `<your-connection-string>` with your actual Azure Storage connection string.\n- Ensure that your Flask app is accessible from the internet, which can be achieved using ngrok or deploying it to a web server.\n- Make sure that the Event Grid subscription is correctly configured to send events to your Flask app's endpoint.\n\nThis setup will allow you to monitor your Azure Storage account for new file uploads and print their names and sizes to the console in real-time."
    }
]