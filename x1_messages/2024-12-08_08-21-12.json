[
    {
        "role": "user",
        "content": "Create a Golang program that listens on a TCP port and echoes back any received messages to the sender.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple Golang program that sets up a TCP server which listens on a specified port and echoes back any received messages to the client.\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\nHere's the code:\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"net\"\n\t\"os\"\n)\n\nfunc main() {\n\tport := \"8080\" // You can change this to any port you prefer\n\n\tlistener, err := net.Listen(\"tcp\", \":\"+port)\n\tif err != nil {\n\t\tfmt.Println(\"Error starting server:\", err)\n\t\tos.Exit(1)\n\t}\n\tdefer listener.Close()\n\n\tfmt.Println(\"Server is listening on port\", port)\n\n\tfor {\n\t\tconn, err := listener.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err)\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\treader := bufio.NewReader(conn)\n\twriter := bufio.NewWriter(conn)\n\n\tfor {\n\t\tmessage, err := reader.ReadString('\\n')\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error reading message:\", err)\n\t\t\tbreak\n\t\t}\n\n\t\tfmt.Print(\"Received message:\", message)\n\n\t\t_, err = writer.WriteString(message)\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error writing message:\", err)\n\t\t\tbreak\n\t\t}\n\n\t\terr = writer.Flush()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error flushing writer:\", err)\n\t\t\tbreak\n\t\t}\n\t}\n}\n```\n\n### Explanation:\n\n1. **Listening for Connections:**\n   - The server listens on a specified TCP port (default is 8080). You can change this port by modifying the `port` variable.\n   - It uses `net.Listen` to create a TCP listener.\n\n2. **Accepting Connections:**\n   - The server enters a loop where it waits for incoming connections using `listener.Accept()`.\n   - For each connection, it spawns a new goroutine to handle the communication with the client.\n\n3. **Handling Connections:**\n   - In the `handleConnection` function, the server reads messages from the client using a `bufio.Reader`.\n   - It echoes back the received message to the client using a `bufio.Writer`.\n   - The loop continues until there's an error reading or writing, at which point it closes the connection.\n\n### How to Run:\n\n1. **Save the Code:**\n   - Save the above code to a file, for example, `echo_server.go`.\n\n2. **Compile and Run:**\n   - Open your terminal and navigate to the directory containing the file.\n   - Run the server using the command:\n     ```sh\n     go run echo_server.go\n     ```\n   - The server will start listening on the specified port (default 8080).\n\n3. **Test the Server:**\n   - You can use a tool like `telnet` or `nc` (netcat) to test the server.\n   - For example, open another terminal and type:\n     ```sh\n     telnet localhost 8080\n     ```\n   - Type some messages, and you should see them echoed back by the server.\n\nThis simple echo server demonstrates basic TCP communication in Go. You can expand upon this foundation to create more complex network applications."
    }
]