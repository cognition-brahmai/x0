[
    {
        "role": "user",
        "content": "Develop a Node.js script that monitors a specified directory for new files and automatically compresses them using gzip when they are added. The script should accept command line arguments for the target directory and compressed files output directory. It should also support recursive monitoring of subdirectories within the target directory.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I have this task to create a Node.js script that watches a specific directory for new files and automatically compresses them using gzip when they are added. The script should take command line arguments for the target directory to monitor and the output directory where the compressed files will be saved. Additionally, it needs to support recursive monitoring of subdirectories within the target directory.\n\nFirst, I need to understand what tools and modules I'll be using in Node.js to achieve this. Node.js has a built-in module called 'fs' which stands for file system, which I can use to interact with the file system. For watching directories and their subdirectories for changes, I can use the 'chokidar' module, which is a popular choice for file watching in Node.js. It supports recursive watching out of the box, which is perfect for this requirement.\n\nFor compressing files, I'll use the 'gzip' module. Node.js has a built-in 'zlib' module that provides gzip compression functionality, so I don't need to install any additional packages for compression.\n\nLet's outline the steps I need to follow:\n\n1. Accept command line arguments for the target directory and the output directory.\n\n2. Set up a file watcher using chokidar to monitor the target directory and its subdirectories.\n\n3. When a new file is added, read the file, compress it using gzip, and save the compressed file to the output directory.\n\n4. Handle any errors that might occur during file reading, compression, or writing.\n\nFirst, I need to set up my project. I'll create a new directory for this script and initialize a new Node.js project.\n\n```\n\nmkdir file-monitor-compressor\n\ncd file-monitor-compressor\n\nnpm init -y\n\n```\n\nNext, I need to install the chokidar module since it's not built-in.\n\n```\n\nnpm install chokidar\n\n```\n\nNow, I'll create the main script file, let's call it 'monitor.js'.\n\nI need to handle command line arguments. In Node.js, command line arguments can be accessed via the 'process.argv' array. The first two elements are the Node.js executable path and the script path, so the arguments start from index 2.\n\nI should expect two arguments: the target directory and the output directory.\n\nI need to validate that both arguments are provided and that they are directories.\n\nI can use the 'path' module to work with file and directory paths.\n\nHere's a rough structure of how the script might look:\n\n- Check if two arguments are provided; if not, display usage instructions.\n\n- Use path.resolve to get absolute paths for the target and output directories.\n\n- Use fs.mkdirSync with { recursive: true } to ensure the output directory exists.\n\n- Set up chokidar to watch the target directory recursively.\n\n- Define events for chokidar:\n\n- 'add': when a new file is added.\n\n- In the 'add' event handler:\n\n- Read the file using fs.readFileSync.\n\n- Compress the file content using zlib.gzipSync.\n\n- Write the compressed data to the output directory with the same relative path.\n\n- Handle any errors that occur during these operations.\n\nLet me think about how to handle the relative paths. If a file is added in a subdirectory of the target directory, I want to preserve that structure in the output directory.\n\nFor example:\n\n- Target directory: /path/to/watch\n\n- Output directory: /path/to/compressed\n\n- A file is added at /path/to/watch/subdir/file.txt\n\n- The compressed file should be saved at /path/to/compressed/subdir/file.txt.gz\n\nI need to calculate the relative path of the new file within the target directory and use that to construct the path in the output directory.\n\nI can use path.relative to get the relative path from the target directory to the new file, then append that to the output directory path.\n\nAlso, I need to make sure that the subdirectories exist in the output directory before trying to write the compressed file. I can use fs.mkdirSync with { recursive: true } to create any necessary subdirectories.\n\nError handling is crucial here. I need to catch and log any errors that occur during file reading, compression, or writing.\n\nLet me start writing some pseudocode:\n\n```\n\nconst chokidar = require('chokidar');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nconst zlib = require('zlib');\n\nif (process.argv.length < 4) {\n\nconsole.log('Usage: node monitor.js <watch_directory> <output_directory>');\n\nprocess.exit(1);\n\n}\n\nconst watchDir = path.resolve(process.argv[2]);\n\nconst outputDir = path.resolve(process.argv[3]);\n\n// Ensure output directory exists\n\nfs.mkdirSync(outputDir, { recursive: true });\n\nconst watcher = chokidar.watch(watchDir, {\n\nignored: /(^|[\\/\\\\])\\../, // ignore dotfiles\n\npersistent: true,\n\nrecursive: true\n\n});\n\nwatcher\n\n.on('add', async (filePath) => {\n\ntry {\n\nconst relativePath = path.relative(watchDir, filePath);\n\nconst outputFilePath = path.join(outputDir, relativePath) + '.gz';\n\nconst dirName = path.dirname(outputFilePath);\n\n// Ensure the directory exists\n\nfs.mkdirSync(dirName, { recursive: true });\n\nconst fileContent = fs.readFileSync(filePath);\n\nconst compressedData = zlib.gzipSync(fileContent);\n\nfs.writeFileSync(outputFilePath, compressedData);\n\nconsole.log(`Compressed ${filePath} to ${outputFilePath}`);\n\n} catch (error) {\n\nconsole.error(`Error processing file ${filePath}:`, error);\n\n}\n\n})\n\n.on('error', error => console.error('Watcher error:', error));\n\nconsole.log(`Watching ${watchDir} for new files. Compressed files will be saved to ${outputDir}.`);\n\n```\n\nThis seems like a good starting point. Let me think about potential issues:\n\n1. If a file is added very quickly multiple times, chokidar might trigger the 'add' event multiple times for the same file. I need to ensure that the script doesn't try to compress the same file multiple times.\n\n2. Handling large files: reading and compressing large files in memory might not be efficient. I might need to handle streaming compression for large files.\n\n3. Permissions: Ensure that the script has the necessary permissions to read from the watch directory and write to the output directory.\n\n4. Symlinks: Depending on the use case, I might need to handle symbolic links appropriately.\n\nFor now, I'll assume that files are not being added and modified rapidly, and that files are not too large to handle in memory. If needed, I can optimize for larger files later.\n\nI should also consider adding more verbose logging or options for logging levels.\n\nAnother thing to consider is what happens if the watch directory or output directory does not exist. I should handle such cases gracefully.\n\nLet me add checks for the existence of the watch directory.\n\n```\n\nif (!fs.existsSync(watchDir)) {\n\nconsole.error(`Watch directory ${watchDir} does not exist.`);\n\nprocess.exit(1);\n\n}\n\n```\n\nI can add this right after resolving the watchDir path.\n\nAlso, I should consider if the watch directory is a file instead of a directory.\n\n```\n\nconst watchStats = fs.statSync(watchDir);\n\nif (!watchStats.isDirectory()) {\n\nconsole.error(`Watch path ${watchDir} is not a directory.`);\n\nprocess.exit(1);\n\n}\n\n```\n\nSimilarly for the output directory, although fs.mkdirSync will create it if it doesn't exist.\n\nI should also ensure that the output directory is writable.\n\nI can add a try-catch around fs.mkdirSync to catch any permission errors.\n\nLet me also think about how to stop the script. Currently, it will run indefinitely, watching for new files. I might want to add a way to gracefully stop the script, perhaps by handling the SIGINT signal (Ctrl+C).\n\nI can add a listener for the 'SIGINT' event to stop the watcher and exit.\n\n```\n\nprocess.on('SIGINT', () => {\n\nwatcher.close();\n\nconsole.log('Watcher stopped.');\n\nprocess.exit(0);\n\n});\n\n```\n\nAdding this will allow the script to be stopped cleanly with Ctrl+C.\n\nLet me also consider if I need to handle other events besides 'add', such as 'addDir' or 'change'. For now, since the requirement is to compress new files when they are added, 'add' should suffice. If needed, I can extend it later.\n\nI should also think about whether to compress files immediately when they are added or wait until they are fully written to disk. Some file watchers can detect partial writes. Chokidar has an option 'awaitWriteFinish' that can help with this.\n\nI can configure chokidar with 'awaitWriteFinish' to wait until a file has been fully written before triggering the 'add' event.\n\nHere's how I can do it:\n\n```\n\nconst watcher = chokidar.watch(watchDir, {\n\nignored: /(^|[\\/\\\\])\\../, // ignore dotfiles\n\npersistent: true,\n\nrecursive: true,\n\nawaitWriteFinish: {\n\nstabilityThreshold: 2000, // wait for 2 seconds of no changes before triggering\n\npollInterval: 100 // poll every 100ms\n\n}\n\n});\n\n```\n\nThis should help ensure that the file is fully written before attempting to compress it.\n\nI should also consider what happens if there are errors during compression or writing. I need to make sure that the script doesn't crash and continues watching for new files.\n\nIn the 'add' event handler, I have a try-catch block that catches and logs errors, which is good. The watcher should continue running even if an error occurs for a specific file.\n\nLet me think about how to test this script.\n\nI can create a directory structure like this:\n\n```\n\nwatch_dir/\n\nsubdir/\n\nfile1.txt\n\nfile2.txt\n\n```\n\nAnd an output directory:\n\n```\n\ncompressed_dir/\n\n```\n\nThen run the script:\n\n```\n\nnode monitor.js watch_dir compressed_dir\n\n```\n\nAfter the script is running, if I add a new file to watch_dir/subdir, say file3.txt, the script should compress it and save it to compressed_dir/subdir/file3.txt.gz.\n\nI need to make sure that the script correctly handles the relative paths and creates the necessary subdirectories in the output directory.\n\nI should also test adding a file directly to the watch directory and to multiple levels of subdirectories.\n\nAnother test is to modify an existing file; the script should not re-compress it unless it's a new file.\n\nWait, according to the requirements, it's only about monitoring for new files and compressing them when added. If a file is modified, it shouldn't be re-compressed unless it's a new file.\n\nChokidar's 'add' event should only trigger for new files, not for modified files, so that should be fine.\n\nI should also consider what happens if the watch directory is modified, like renaming or deleting it. The watcher should handle these cases gracefully.\n\nChokidar emits 'unlink' and 'unlinkDir' events for deleted files and directories, but since our requirement is only to compress new files, we don't need to handle these events.\n\nHowever, if the watch directory is deleted or modified in a way that the watcher can't continue, chokidar should emit an 'error' event, which I'm already listening for and logging.\n\nI think this covers the basic functionality.\n\nLet me summarize the steps again:\n\n1. Check for correct number of command line arguments.\n\n2. Resolve absolute paths for watch and output directories.\n\n3. Validate that the watch directory exists and is a directory.\n\n4. Ensure the output directory exists, creating it if necessary.\n\n5. Set up chokidar to watch the watch directory recursively, waiting for files to finish writing.\n\n6. On the 'add' event, compress the new file and save it to the output directory with the same relative path structure.\n\n7. Handle any errors during file processing and logging.\n\n8. Allow the script to be stopped gracefully with Ctrl+C.\n\nI should also consider adding some comments to the script for clarity and possibly creating a package.json with a start script for easier running.\n\nLet me proceed to write the actual code based on this plan.\n\n## Final Solution\nTo create a Node.js script that monitors a specified directory for new files and automatically compresses them using gzip when they are added, follow these steps:\n\n### Prerequisites\n- Ensure you have Node.js installed on your system.\n\n### Solution Code\n\n```javascript\nconst chokidar = require('chokidar');\nconst fs = require('fs');\nconst path = require('path');\nconst zlib = require('zlib');\n\n// Check for correct number of command line arguments\nif (process.argv.length < 4) {\n  console.log('Usage: node monitor.js <watch_directory> <output_directory>');\n  process.exit(1);\n}\n\n// Resolve absolute paths for watch and output directories\nconst watchDir = path.resolve(process.argv[2]);\nconst outputDir = path.resolve(process.argv[3]);\n\n// Validate that the watch directory exists and is a directory\nif (!fs.existsSync(watchDir)) {\n  console.error(`Watch directory ${watchDir} does not exist.`);\n  process.exit(1);\n}\nif (!fs.lstatSync(watchDir).isDirectory()) {\n  console.error(`Watch path ${watchDir} is not a directory.`);\n  process.exit(1);\n}\n\n// Ensure the output directory exists, creating it if necessary\nfs.mkdirSync(outputDir, { recursive: true });\n\n// Set up chokidar to watch the directory recursively\nconst watcher = chokidar.watch(watchDir, {\n  ignored: /(^|[\\/\\\\])\\../, // ignore dotfiles\n  persistent: true,\n  recursive: true,\n  awaitWriteFinish: {\n    stabilityThreshold: 2000, // wait for 2 seconds of no changes\n    pollInterval: 100 // poll every 100ms\n  }\n});\n\n// Handle 'add' event for new files\nwatcher.on('add', (filePath) => {\n  try {\n    // Get relative path of the new file within the watch directory\n    const relativePath = path.relative(watchDir, filePath);\n    // Construct output file path with .gz extension\n    const outputFilePath = path.join(outputDir, relativePath) + '.gz';\n    const dirName = path.dirname(outputFilePath);\n    \n    // Ensure the directory exists\n    fs.mkdirSync(dirName, { recursive: true });\n    \n    // Read the file\n    const fileContent = fs.readFileSync(filePath);\n    // Compress the file content using gzip\n    const compressedData = zlib.gzipSync(fileContent);\n    // Write the compressed data to the output directory\n    fs.writeFileSync(outputFilePath, compressedData);\n    console.log(`Compressed ${filePath} to ${outputFilePath}`);\n  } catch (error) {\n    console.error(`Error processing file ${filePath}:`, error);\n  }\n});\n\n// Handle watcher errors\nwatcher.on('error', error => console.error('Watcher error:', error));\n\n// Allow the script to be stopped gracefully with Ctrl+C\nprocess.on('SIGINT', () => {\n  watcher.close();\n  console.log('Watcher stopped.');\n  process.exit(0);\n});\n\nconsole.log(`Watching ${watchDir} for new files. Compressed files will be saved to ${outputDir}.`);\n```\n\n### Instructions\n\n1. **Set Up Project Directory:**\n   ```bash\n   mkdir file-monitor-compressor\n   cd file-monitor-compressor\n   ```\n\n2. **Initialize Node.js Project:**\n   ```bash\n   npm init -y\n   ```\n\n3. **Install Dependencies:**\n   ```bash\n   npm install chokidar\n   ```\n\n4. **Create the Script:**\n   - Create a file named `monitor.js` and paste the provided code into it.\n\n5. **Run the Script:**\n   - Ensure you provide the target directory and output directory as command line arguments:\n     ```bash\n     node monitor.js /path/to/watch /path/to/compressed\n     ```\n\nThis script will monitor the specified directory and its subdirectories for new files. When a new file is added, it will be compressed using gzip and saved to the specified output directory, maintaining the same directory structure. The script handles errors gracefully and can be stopped using Ctrl+C."
    }
]