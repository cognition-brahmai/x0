[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple HTTP server using sockets. The server should listen on a specified port and respond with a \"Hello, World!\" message when accessed via a web browser.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple Java program that creates an HTTP server using sockets. This server listens on a specified port and responds with \"Hello, World!\" when accessed via a web browser.\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class SimpleHttpServer {\n    public static void main(String[] args) {\n        int port = 8080; // Specify the port number\n        try (ServerSocket serverSocket = new ServerSocket(port)) {\n            System.out.println(\"Server is listening on port \" + port);\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                System.out.println(\"New client connected\");\n                PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);\n                BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\n\n                String inputLine;\n                while ((inputLine = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + inputLine);\n                    if (inputLine.equals(\"\")) {\n                        break;\n                    }\n                }\n\n                // Send HTTP response\n                String response = \"HTTP/1.1 200 OK\\r\\n\" +\n                                  \"Content-Type: text/plain\\r\\n\" +\n                                  \"Content-Length: 13\\r\\n\" +\n                                  \"\\r\\n\" +\n                                  \"Hello, World!\";\n                out.println(response);\n                out.close();\n                in.close();\n                clientSocket.close();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation:\n1. **Server Setup**:\n   - We create a `ServerSocket` on port 8080. You can change this port number as needed.\n   - The server listens indefinitely for client connections using a `while (true)` loop.\n\n2. **Handling Client Connections**:\n   - When a client connects, a new `Socket` object is created.\n   - We create `PrintWriter` and `BufferedReader` objects to write to and read from the client socket.\n\n3. **Reading Client Request**:\n   - We read lines from the client until an empty line is encountered, which marks the end of the HTTP request headers.\n\n4. **Sending HTTP Response**:\n   - We construct a simple HTTP response with a status code of 200 OK, content type of text/plain, and the message \"Hello, World!\".\n   - The response is written to the client using the `PrintWriter`.\n\n5. **Closing Resources**:\n   - After sending the response, we close the `PrintWriter`, `BufferedReader`, and the client socket to free up resources.\n\nTo run this program:\n- Save it to a file named `SimpleHttpServer.java`.\n- Compile it using `javac SimpleHttpServer.java`.\n- Run it using `java SimpleHttpServer`.\n- Open a web browser and navigate to `http://localhost:8080` to see the \"Hello, World!\" message.\n\nThis is a very basic implementation and does not handle many aspects of a full-fledged HTTP server, such as handling different types of requests, serving files, or managing multiple connections concurrently. However, it should serve as a starting point for understanding how to create a simple HTTP server using Java sockets."
    }
]