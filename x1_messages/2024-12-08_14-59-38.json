[
    {
        "role": "user",
        "content": "Write SQL queries to perform the following tasks on a hypothetical university database: \n- List all students who have taken more than 60 credits.\n- Find the average GPA of students in each department.\n- Identify professors who have taught more than three courses in the last semester.\n- Show the course enrollment numbers for the current semester sorted in descending order. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. Let's assume we have a university database with the following tables:\n\n1. **Students**:\n   - student_id (Primary Key)\n   - name\n   - department_id\n   - total_credits\n\n2. **Departments**:\n   - department_id (Primary Key)\n   - department_name\n\n3. **Professors**:\n   - professor_id (Primary Key)\n   - name\n\n4. **Courses**:\n   - course_id (Primary Key)\n   - course_name\n   - department_id\n\n5. **Teaches**:\n   - professor_id\n   - course_id\n   - semester\n\n6. **Enrollments**:\n   - student_id\n   - course_id\n   - semester\n\nNow, let's write SQL queries for each task:\n\n### 1. List all students who have taken more than 60 credits.\n\n```sql\nSELECT student_id, name, total_credits\nFROM Students\nWHERE total_credits > 60;\n```\n\n### 2. Find the average GPA of students in each department.\n\nAssuming there is a column `gpa` in the `Students` table:\n\n```sql\nSELECT d.department_name, AVG(s.gpa) AS average_gpa\nFROM Students s\nJOIN Departments d ON s.department_id = d.department_id\nGROUP BY d.department_name;\n```\n\nIf GPA is stored in another table, say `Student_GPA`, you would adjust the query accordingly.\n\n### 3. Identify professors who have taught more than three courses in the last semester.\n\nAssuming \"last semester\" is a known value, for example, 'Spring2023':\n\n```sql\nSELECT professor_id, name\nFROM Professors p\nWHERE (\n    SELECT COUNT(*)\n    FROM Teaches t\n    WHERE t.professor_id = p.professor_id\n    AND t.semester = 'Spring2023'\n) > 3;\n```\n\nAlternatively, using a JOIN:\n\n```sql\nSELECT p.professor_id, p.name\nFROM Professors p\nJOIN Teaches t ON p.professor_id = t.professor_id\nWHERE t.semester = 'Spring2023'\nGROUP BY p.professor_id, p.name\nHAVING COUNT(t.course_id) > 3;\n```\n\n### 4. Show the course enrollment numbers for the current semester sorted in descending order.\n\nAssuming \"current semester\" is 'Fall2023':\n\n```sql\nSELECT c.course_id, c.course_name, COUNT(e.student_id) AS enrollment_count\nFROM Courses c\nLEFT JOIN Enrollments e ON c.course_id = e.course_id\nWHERE e.semester = 'Fall2023'\nGROUP BY c.course_id, c.course_name\nORDER BY enrollment_count DESC;\n```\n\nUsing a subquery to handle possible NULL values:\n\n```sql\nSELECT c.course_id, c.course_name, COALESCE(enrollment_count, 0) AS enrollment_count\nFROM Courses c\nLEFT JOIN (\n    SELECT course_id, COUNT(student_id) AS enrollment_count\n    FROM Enrollments\n    WHERE semester = 'Fall2023'\n    GROUP BY course_id\n) e ON c.course_id = e.course_id\nORDER BY enrollment_count DESC;\n```\n\nThese queries should help you accomplish the tasks you've outlined. If there are any specific adjustments needed based on your database schema, please let me know!"
    }
]