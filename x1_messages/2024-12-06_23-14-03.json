[
    {
        "role": "user",
        "content": "Write a C++ program that implements a basic command-line calculator supporting addition, subtraction, multiplication, and division operations. The program should use a stack-based approach to evaluate expressions."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that implements a basic command-line calculator using a stack-based approach. This calculator supports addition, subtraction, multiplication, and division operations.\n\n```cpp\n#include <iostream>\n#include <stack>\n#include <cctype>\n#include <string>\n\nbool isOperator(char c) {\n    return c == '+' || c == '-' || c == '*' || c == '/';\n}\n\ndouble applyOperator(char op, double b, double a) {\n    switch (op) {\n        case '+': return a + b;\n        case '-': return a - b;\n        case '*': return a * b;\n        case '/': \n            if (b == 0) {\n                std::cerr << \"Error: Division by zero\" << std::endl;\n                exit(EXIT_FAILURE);\n            }\n            return a / b;\n        default:\n            return 0;\n    }\n}\n\ndouble evaluateExpression(const std::string& expression) {\n    std::stack<double> operands;\n    for (size_t i = 0; i < expression.length(); ++i) {\n        char c = expression[i];\n        if (isdigit(c) || (c == '.' && i > 0 && isdigit(expression[i-1]))) {\n            double num = 0;\n            double fraction = 0.1;\n            bool decimal = false;\n            while (i < expression.length() && (isdigit(expression[i]) || expression[i] == '.')) {\n                if (expression[i] == '.') {\n                    if (decimal) {\n                        std::cerr << \"Error: Invalid number format\" << std::endl;\n                        exit(EXIT_FAILURE);\n                    }\n                    decimal = true;\n                } else {\n                    if (decimal) {\n                        num += (expression[i] - '0') * fraction;\n                        fraction *= 0.1;\n                    } else {\n                        num = num * 10 + (expression[i] - '0');\n                    }\n                }\n                ++i;\n            }\n            --i; // Adjust for the extra increment in the loop\n            operands.push(num);\n        } else if (isOperator(c)) {\n            if (operands.size() < 2) {\n                std::cerr << \"Error: Not enough operands\" << std::endl;\n                exit(EXIT_FAILURE);\n            }\n            double b = operands.top();\n            operands.pop();\n            double a = operands.top();\n            operands.pop();\n            double result = applyOperator(c, b, a);\n            operands.push(result);\n        } else if (c != ' ') {\n            std::cerr << \"Error: Invalid character '\" << c << \"'\" << std::endl;\n            exit(EXIT_FAILURE);\n        }\n    }\n    if (operands.size() != 1) {\n        std::cerr << \"Error: Invalid expression\" << std::endl;\n        exit(EXIT_FAILURE);\n    }\n    return operands.top();\n}\n\nint main() {\n    std::string expression;\n    std::cout << \"Enter an expression (e.g., 3 + 5 * 2): \";\n    std::getline(std::cin, expression);\n    try {\n        double result = evaluateExpression(expression);\n        std::cout << \"Result: \" << result << std::endl;\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n    return 0;\n}\n```\n\n### Explanation\n1. **isOperator Function**: Checks if a character is one of the supported operators (+, -, *, /).\n2. **applyOperator Function**: Applies the given operator to the top two operands on the stack.\n3. **evaluateExpression Function**: Evaluates the given expression string using a stack-based approach.\n4. **main Function**: Reads an expression from the user and evaluates it, displaying the result.\n\nThis program reads an expression from the user, evaluates it using a stack, and outputs the result. It handles basic error checking for invalid characters, insufficient operands, and division by zero."
    }
]