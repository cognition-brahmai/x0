[
    {
        "role": "user",
        "content": "Develop a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table should have columns for product ID, name, description, price, and quantity. The script should support adding, updating, deleting, and retrieving products from the table using prepared statements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table will have columns for product ID, name, description, price, and quantity. We'll use prepared statements to ensure safety and efficiency.\n\nFirst, let's outline the steps we need to follow:\n\n1. **Set up the database connection.**\n2. **Create the \"products\" table if it doesn't exist.**\n3. **Implement functions for each CRUD operation:**\n   - Create (add a product)\n   - Read (retrieve products)\n   - Update (modify a product)\n   - Delete (remove a product)\n4. **Use prepared statements to prevent SQL injection.**\n\n### Step 1: Set up the database connection\n\nWe need to establish a connection to the MySQL database using PHP's `mysqli` extension, which is efficient and supports prepared statements.\n\n```php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n```\n\n### Step 2: Create the \"products\" table\n\nWe'll create a table named \"products\" with the following columns:\n\n- id (INT, AUTO_INCREMENT, PRIMARY KEY)\n- name (VARCHAR(255))\n- description (TEXT)\n- price (DECIMAL(10,2))\n- quantity (INT)\n\n```php\n$sql = \"CREATE TABLE IF NOT EXISTS products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10,2) NOT NULL,\n    quantity INT NOT NULL\n)\";\n\nif ($conn->query($sql) !== TRUE) {\n    echo \"Error creating table: \" . $conn->error;\n}\n```\n\n### Step 3: Implement CRUD operations using prepared statements\n\n#### Create (Add a product)\n\n```php\nfunction addProduct($conn, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)\");\n    $stmt->bind_param(\"ssdi\", $name, $description, $price, $quantity);\n    $stmt->execute();\n    $stmt->close();\n}\n```\n\n#### Read (Retrieve products)\n\n```php\nfunction getProducts($conn) {\n    $stmt = $conn->prepare(\"SELECT id, name, description, price, quantity FROM products\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n    while ($row = $result->fetch_assoc()) {\n        echo \"ID: \" . $row['id'] . \", Name: \" . $row['name'] . \", Description: \" . $row['description'] . \", Price: \" . $row['price'] . \", Quantity: \" . $row['quantity'] . \"<br>\";\n    }\n    $stmt->close();\n}\n```\n\n#### Update (Modify a product)\n\n```php\nfunction updateProduct($conn, $id, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"UPDATE products SET name=?, description=?, price=?, quantity=? WHERE id=?\");\n    $stmt->bind_param(\"ssdii\", $name, $description, $price, $quantity, $id);\n    $stmt->execute();\n    $stmt->close();\n}\n```\n\n#### Delete (Remove a product)\n\n```php\nfunction deleteProduct($conn, $id) {\n    $stmt = $conn->prepare(\"DELETE FROM products WHERE id=?\");\n    $stmt->bind_param(\"i\", $id);\n    $stmt->execute();\n    $stmt->close();\n}\n```\n\n### Step 4: Example usage\n\nHere's how you can use these functions:\n\n```php\n// Add a product\naddProduct($conn, 'Product Name', 'Product Description', 19.99, 10);\n\n// Get all products\ngetProducts($conn);\n\n// Update a product\nupdateProduct($conn, 1, 'Updated Name', 'Updated Description', 29.99, 5);\n\n// Delete a product\ndeleteProduct($conn, 2);\n```\n\n### Complete Script\n\nPutting it all together:\n\n```php\n<?php\n$host = 'localhost';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\n// Create connection\n$conn = new mysqli($host, $username, $password, $dbname);\n\n// Check connection\nif ($conn->connect_error) {\n    die(\"Connection failed: \" . $conn->connect_error);\n}\n\n// Create table if not exists\n$sql = \"CREATE TABLE IF NOT EXISTS products (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10,2) NOT NULL,\n    quantity INT NOT NULL\n)\";\n\nif ($conn->query($sql) !== TRUE) {\n    echo \"Error creating table: \" . $conn->error;\n}\n\nfunction addProduct($conn, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"INSERT INTO products (name, description, price, quantity) VALUES (?, ?, ?, ?)\");\n    $stmt->bind_param(\"ssdi\", $name, $description, $price, $quantity);\n    $stmt->execute();\n    $stmt->close();\n}\n\nfunction getProducts($conn) {\n    $stmt = $conn->prepare(\"SELECT id, name, description, price, quantity FROM products\");\n    $stmt->execute();\n    $result = $stmt->get_result();\n    while ($row = $result->fetch_assoc()) {\n        echo \"ID: \" . $row['id'] . \", Name: \" . $row['name'] . \", Description: \" . $row['description'] . \", Price: \" . $row['price'] . \", Quantity: \" . $row['quantity'] . \"<br>\";\n    }\n    $stmt->close();\n}\n\nfunction updateProduct($conn, $id, $name, $description, $price, $quantity) {\n    $stmt = $conn->prepare(\"UPDATE products SET name=?, description=?, price=?, quantity=? WHERE id=?\");\n    $stmt->bind_param(\"ssdii\", $name, $description, $price, $quantity, $id);\n    $stmt->execute();\n    $stmt->close();\n}\n\nfunction deleteProduct($conn, $id) {\n    $stmt = $conn->prepare(\"DELETE FROM products WHERE id=?\");\n    $stmt->bind_param(\"i\", $id);\n    $stmt->execute();\n    $stmt->close();\n}\n\n// Example usage\naddProduct($conn, 'Product Name', 'Product Description', 19.99, 10);\ngetProducts($conn);\nupdateProduct($conn, 1, 'Updated Name', 'Updated Description', 29.99, 5);\ndeleteProduct($conn, 2);\n\n$conn->close();\n?>\n```\n\nThis script sets up a basic CRUD system for managing products in a MySQL database using PHP and prepared statements. Make sure to replace the database connection details with your actual database information."
    }
]