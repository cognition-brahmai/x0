[
    {
        "role": "user",
        "content": "Write a Java program to implement a stack data structure using linked lists. The stack should support push, pop, and peek operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write a Java program that implements a stack using a linked list. A stack is a Last-In-First-Out (LIFO) data structure, and it typically supports three main operations: push (add an element to the top), pop (remove the top element), and peek (view the top element without removing it).\n\nFirst, I need to understand how to implement a stack using a linked list. In a linked list, each node contains data and a reference to the next node. For a stack, the top of the stack will be the head of the linked list. So, when we push an element, we'll add it to the head, and when we pop or peek, we'll operate on the head.\n\nI should start by defining a Node class that represents each element in the linked list. Each node will have a data value and a reference to the next node.\n\nNext, I'll create a Stack class that uses the Node class to store elements. The Stack class will have methods for push, pop, and peek operations.\n\nI need to make sure that the push operation adds a new element to the top of the stack, which is the head of the linked list. The pop operation should remove the top element and return its value, and the peek operation should return the value of the top element without removing it.\n\nI should also consider edge cases, such as trying to pop or peek from an empty stack. In such cases, I might want to throw an exception or handle it in a way that makes sense for the program.\n\nLet me sketch a rough plan:\n\n1. Define a Node class with data and next pointers.\n\n2. Define a Stack class with a private head pointer.\n\n3. Implement a push method that adds a new node to the head.\n\n4. Implement a pop method that removes the head node and returns its data.\n\n5. Implement a peek method that returns the data of the head node without removing it.\n\n6. Handle cases where the stack is empty in pop and peek methods.\n\nNow, I'll start writing the code based on this plan.\n\nFirst, the Node class:\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n```\n\nNext, the Stack class:\n\n```java\npublic class Stack {\n    private Node head;\n\n    public Stack() {\n        this.head = null;\n    }\n\n    // Push operation\n    public void push(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n    }\n\n    // Pop operation\n    public int pop() {\n        if (head == null) {\n            throw new RuntimeException(\"Stack is empty\");\n        }\n        int data = head.data;\n        head = head.next;\n        return data;\n    }\n\n    // Peek operation\n    public int peek() {\n        if (head == null) {\n            throw new RuntimeException(\"Stack is empty\");\n        }\n        return head.data;\n    }\n\n    // Helper method to check if the stack is empty\n    public boolean isEmpty() {\n        return head == null;\n    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack();\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(\"Top element is: \" + stack.peek());\n        stack.pop();\n        System.out.println(\"Top element is: \" + stack.peek());\n        stack.pop();\n        stack.pop();\n        if (stack.isEmpty()) {\n            System.out.println(\"Stack is empty\");\n        }\n    }\n}\n```\n\nIn this code:\n\n- The Node class represents each element in the stack with data and a reference to the next node.\n\n- The Stack class manages the stack operations:\n\n- push(int data): Adds a new node with the given data to the top of the stack.\n\n- pop(): Removes the top node from the stack and returns its data. If the stack is empty, it throws a RuntimeException.\n\n- peek(): Returns the data of the top node without removing it. If the stack is empty, it throws a RuntimeException.\n\n- isEmpty(): A helper method to check if the stack is empty.\n\n- The main method demonstrates pushing elements onto the stack, peeking at the top element, popping elements, and checking if the stack is empty.\n\nThis implementation should work correctly for the basic operations of a stack using a linked list."
    }
]