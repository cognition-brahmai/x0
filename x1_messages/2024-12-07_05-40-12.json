[
    {
        "role": "user",
        "content": "Create a Python program that implements the merge sort algorithm to sort a given list of numbers. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python program that implements the merge sort algorithm to sort a list of numbers:\n\n```python\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    # Find the middle point to divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively sort both halves\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n\n    # Merge the sorted halves\n    return merge(left_sorted, right_sorted)\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    # Compare elements from both lists and merge them in sorted order\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    # If there are remaining elements in left or right, append them\n    merged.extend(left[left_index:])\n    merged.extend(right[right_index:])\n\n    return merged\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [38, 27, 43, 3, 9, 82, 10]\n    sorted_list = merge_sort(sample_list)\n    print(\"Original list:\", sample_list)\n    print(\"Sorted list:\", sorted_list)\n```\n\n### Explanation:\n1. **Merge Sort Function**:\n   - **Base Case**: If the list is of length 0 or 1, it is already sorted.\n   - **Divide**: Find the middle point of the list and divide it into two halves.\n   - **Conquer**: Recursively sort both halves.\n   - **Combine**: Merge the two sorted halves into a single sorted list.\n\n2. **Merge Function**:\n   - This function takes two sorted lists and merges them into a single sorted list.\n   - It uses two pointers to traverse the lists and appends the smaller element to the result list.\n   - Any remaining elements in either list are appended to the end of the result list.\n\n3. **Example Usage**:\n   - A sample list is provided, and the `merge_sort` function is called to sort it.\n   - The original and sorted lists are printed for comparison.\n\nThis implementation ensures that the list is sorted efficiently using the merge sort algorithm, which has a time complexity of O(n log n)."
    }
]