[
    {
        "role": "user",
        "content": "Write a SQL script that creates a database schema for a basic e-commerce platform with tables for products, customers, and orders."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a SQL script that creates a database schema for a basic e-commerce platform. This schema includes tables for products, customers, and orders, along with the necessary relationships between them.\n\n```sql\n-- Create database\nCREATE DATABASE ECommerceDB;\nUSE ECommerceDB;\n\n-- Create Products table\nCREATE TABLE Products (\n    ProductID INT PRIMARY KEY AUTO_INCREMENT,\n   ProductName VARCHAR(255) NOT NULL,\n    Description TEXT,\n    Price DECIMAL(10, 2) NOT NULL,\n    StockQuantity INT NOT NULL\n);\n\n-- Create Customers table\nCREATE TABLE Customers (\n    CustomerID INT PRIMARY KEY AUTO_INCREMENT,\n    FirstName VARCHAR(100) NOT NULL,\n    LastName VARCHAR(100) NOT NULL,\n    Email VARCHAR(255) UNIQUE NOT NULL,\n    PhoneNumber VARCHAR(15),\n    Address VARCHAR(255),\n    City VARCHAR(100),\n    State VARCHAR(100),\n    ZipCode VARCHAR(20)\n);\n\n-- Create Orders table\nCREATE TABLE Orders (\n    OrderID INT PRIMARY KEY AUTO_INCREMENT,\n    CustomerID INT,\n    OrderDate DATETIME DEFAULT CURRENT_TIMESTAMP,\n    TotalAmount DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID)\n);\n\n-- Create OrderItems table to handle many-to-many relationship between Orders and Products\nCREATE TABLE OrderItems (\n    OrderItemID INT PRIMARY KEY AUTO_INCREMENT,\n    OrderID INT,\n    ProductID INT,\n    Quantity INT NOT NULL,\n    PriceAtTimeOfOrder DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID),\n    FOREIGN KEY (ProductID) REFERENCES Products(ProductID)\n);\n```\n\n### Explanation:\n\n1. **Products Table**:\n   - `ProductID`: Unique identifier for each product.\n   - `ProductName`: Name of the product.\n   - `Description`: Detailed description of the product.\n   - `Price`: Price of the product.\n   - `StockQuantity`: Quantity available in stock.\n\n2. **Customers Table**:\n   - `CustomerID`: Unique identifier for each customer.\n   - `FirstName` and `LastName`: Customer's name.\n   - `Email`: Customer's email, unique to ensure no duplicates.\n   - `PhoneNumber`: Customer's phone number.\n   - `Address`, `City`, `State`, `ZipCode`: Customer's address details.\n\n3. **Orders Table**:\n   - `OrderID`: Unique identifier for each order.\n   - `CustomerID`: Foreign key linking to the Customers table.\n   - `OrderDate`: Date and time when the order was placed.\n   - `TotalAmount`: Total amount of the order.\n\n4. **OrderItems Table**:\n   - `OrderItemID`: Unique identifier for each order item.\n   - `OrderID`: Foreign key linking to the Orders table.\n   - `ProductID`: Foreign key linking to the Products table.\n   - `Quantity`: Quantity of the product in this order.\n   - `PriceAtTimeOfOrder`: Price of the product at the time of ordering to maintain historical data.\n\nThis schema allows you to track products, customers, and their orders effectively, ensuring data integrity through foreign key constraints."
    }
]