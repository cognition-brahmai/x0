[
    {
        "role": "user",
        "content": "Create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table with columns: id, name, description, price, and quantity. Implement prepared statements to prevent SQL injection attacks and validate user input before performing any operation.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I've got this task to create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table. The table has columns: id, name, description, price, and quantity. I need to make sure to use prepared statements to prevent SQL injection and validate user input before doing any database operations.\n\nFirst, I need to set up the database connection. In PHP, I can use PDO (PHP Data Objects) for database interactions because it supports prepared statements and is secure.\n\nHere's a basic outline of what I need to do:\n\n1. **Database Connection:**\n   - Use PDO to connect to the MySQL database.\n   - Handle any connection errors.\n\n2. **CRUD Operations:**\n   - **Create (Insert):** Add a new product to the database.\n   - **Read (Select):** Retrieve product(s) from the database.\n   - **Update:** Modify an existing product.\n   - **Delete:** Remove a product from the database.\n\n3. **Input Validation:**\n   - Validate user inputs for name, description, price, and quantity.\n   - Ensure that the price and quantity are numeric and within acceptable ranges.\n   - Sanitize inputs to prevent SQL injection, although prepared statements should handle this.\n\n4. **Prepared Statements:**\n   - Use PDO prepared statements for all database operations to prevent SQL injection.\n\nI should also consider error handling for each operation to provide feedback to the user if something goes wrong.\n\nLet me start by setting up the database connection.\n\n## Final Solution\nTo create a PHP script that connects to a MySQL database and performs CRUD operations on a \"products\" table with columns: id, name, description, price, and quantity, while implementing prepared statements to prevent SQL injection attacks and validating user input, follow the steps below.\n\n### Solution Code\n\n```php\n<?php\n// Database connection parameters\n$host = '127.0.0.1';\n$dbname = 'your_database_name';\n$username = 'your_username';\n$password = 'your_password';\n\ntry {\n    // Create a new PDO instance\n    $pdo = new PDO(\"mysql:host=$host;dbname=$dbname\", $username, $password);\n    // Set PDO to throw exceptions for better error handling\n    $pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n} catch (PDOException $e) {\n    die(\"Connection failed: \" . $e->getMessage());\n}\n\n// Function to create a new product\nfunction createProduct($name, $description, $price, $quantity) {\n    global $pdo;\n    // Validate inputs\n    if (!validateName($name) || !validateDescription($description) || !validatePrice($price) || !validateQuantity($quantity)) {\n        return \"Invalid input data.\";\n    }\n    // Prepare the SQL statement\n    $stmt = $pdo->prepare(\"INSERT INTO products (name, description, price, quantity) VALUES (:name, :description, :price, :quantity)\");\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':description', $description);\n    $stmt->bindParam(':price', $price);\n    $stmt->bindParam(':quantity', $quantity);\n    // Execute the statement\n    if ($stmt->execute()) {\n        return \"Product created successfully.\";\n    } else {\n        return \"Error creating product.\";\n    }\n}\n\n// Function to read products\nfunction readProducts() {\n    global $pdo;\n    // Prepare the SQL statement\n    $stmt = $pdo->prepare(\"SELECT * FROM products\");\n    $stmt->execute();\n    // Fetch all results\n    return $stmt->fetchAll(PDO::FETCH_ASSOC);\n}\n\n// Function to update a product\nfunction updateProduct($id, $name, $description, $price, $quantity) {\n    global $pdo;\n    // Validate inputs\n    if (!validateId($id) || !validateName($name) || !validateDescription($description) || !validatePrice($price) || !validateQuantity($quantity)) {\n        return \"Invalid input data.\";\n    }\n    // Prepare the SQL statement\n    $stmt = $pdo->prepare(\"UPDATE products SET name=:name, description=:description, price=:price, quantity=:quantity WHERE id=:id\");\n    $stmt->bindParam(':id', $id);\n    $stmt->bindParam(':name', $name);\n    $stmt->bindParam(':description', $description);\n    $stmt->bindParam(':price', $price);\n    $stmt->bindParam(':quantity', $quantity);\n    // Execute the statement\n    if ($stmt->execute()) {\n        return \"Product updated successfully.\";\n    } else {\n        return \"Error updating product.\";\n    }\n}\n\n// Function to delete a product\nfunction deleteProduct($id) {\n    global $pdo;\n    // Validate input\n    if (!validateId($id)) {\n        return \"Invalid input data.\";\n    }\n    // Prepare the SQL statement\n    $stmt = $pdo->prepare(\"DELETE FROM products WHERE id=:id\");\n    $stmt->bindParam(':id', $id);\n    // Execute the statement\n    if ($stmt->execute()) {\n        return \"Product deleted successfully.\";\n    } else {\n        return \"Error deleting product.\";\n    }\n}\n\n// Input validation functions\nfunction validateName($name) {\n    return !empty($name) && is_string($name);\n}\n\nfunction validateDescription($description) {\n    return is_string($description);\n}\n\nfunction validatePrice($price) {\n    return is_numeric($price) && $price >= 0;\n}\n\nfunction validateQuantity($quantity) {\n    return is_int($quantity) && $quantity >= 0;\n}\n\nfunction validateId($id) {\n    return is_int($id) && $id > 0;\n}\n\n// Example usage:\n// echo createProduct('New Product', 'Description of new product', 29.99, 10);\n// print_r(readProducts());\n// echo updateProduct(1, 'Updated Product', 'Updated description', 39.99, 5);\n// echo deleteProduct(1);\n?>\n```\n\n### Explanation\n\n1. **Database Connection:**\n   - Use PDO to connect to the MySQL database.\n   - Set PDO to throw exceptions for better error handling.\n\n2. **CRUD Operations:**\n   - **Create (Insert):** Add a new product to the database using a prepared statement.\n   - **Read (Select):** Retrieve all products from the database using a prepared statement.\n   - **Update:** Modify an existing product using a prepared statement.\n   - **Delete:** Remove a product from the database using a prepared statement.\n\n3. **Input Validation:**\n   - Validate user inputs for name, description, price, and quantity.\n   - Ensure that the price is numeric and non-negative.\n   - Ensure that the quantity is an integer and non-negative.\n   - Validate that the ID is a positive integer for update and delete operations.\n\n4. **Prepared Statements:**\n   - Use PDO prepared statements for all database operations to prevent SQL injection.\n\nThis script provides a solid foundation for performing CRUD operations on a products table with proper input validation and security measures in place."
    }
]