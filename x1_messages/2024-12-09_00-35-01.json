[
    {
        "role": "user",
        "content": "Write a C++ program that connects to a WebSocket server and sends/receives messages in real-time. The program should handle connection errors, message parsing, and gracefully close the connection when needed.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a WebSocket client in C++ involves using a library that supports WebSocket protocols since C++ standard library does not include native support for WebSockets. One of the popular libraries for this purpose is `libwebsockets`. In this guide, I'll walk you through creating a simple C++ program that connects to a WebSocket server, sends messages, receives messages, handles connection errors, parses messages, and gracefully closes the connection.\n\n### Prerequisites\n\n1. **Install libwebsockets**:\n   - On Ubuntu, you can install it using:\n     ```sh\n     sudo apt-get install libwebsockets-dev\n     ```\n   - For other operating systems, refer to the [official libwebsockets installation guide](https://libwebsockets.org/documentation/install.html).\n\n2. **Set up your development environment**:\n   - Ensure you have a C++ compiler installed (e.g., g++).\n\n### Program Structure\n\nThe program will consist of the following components:\n\n1. **Initialization**:\n   - Initialize the libwebsockets library.\n   - Create a context for the WebSocket connection.\n\n2. **Connection Setup**:\n   - Define the URI of the WebSocket server.\n   - Establish a connection to the server.\n\n3. **Message Handling**:\n   - Send messages to the server.\n   - Receive and parse messages from the server.\n\n4. **Error Handling**:\n   - Handle connection errors and timeouts.\n\n5. **Graceful Shutdown**:\n   - Close the WebSocket connection properly.\n\n### Sample Code\n\nBelow is a sample C++ program that demonstrates these concepts:\n\n```cpp\n#include <libwebsockets.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n\n// Callback function for handling WebSocket events\nstatic int callback_http(struct lws *wsi, enum lws_callback_reasons reason, void *user, void *in, size_t len) {\n    switch (reason) {\n        case LWS_CALLBACK_CLIENT_CONNECTION_ERROR:\n            fprintf(stderr, \"Connection error\\n\");\n            return -1;\n        case LWS_CALLBACK_CLIENT_ESTABLISHED:\n            fprintf(stdout, \"Connected to server\\n\");\n            return 0;\n        case LWS_CALLBACK_CLIENT_RECEIVE:\n            // Handle incoming message\n            printf(\"Received message: %.*s\\n\", (int)len, (char *)in);\n            return lws_callback_on_writable(wsi);\n        case LWS_CALLBACK_CLIENT_WRITEABLE:\n            // Send a message\n            const char *msg = \"Hello from C++ WebSocket client!\";\n            lws_write(wsi, (unsigned char *)msg, strlen(msg), LWS_WRITE_TEXT);\n            return 0;\n        case LWS_CALLBACK_CLOSED:\n            fprintf(stdout, \"Connection closed\\n\");\n            return -1;\n        default:\n            return lws_callback_http_dummy(wsi, reason, user, in, len);\n    }\n}\n\n// Protocol definition\nstatic struct lws_protocols protocols[] = {\n    {\n        \"http-only-protocol\",\n        callback_http,\n        0,\n        0,\n        NULL,\n        0,\n        0,\n        NULL\n    },\n    { NULL, NULL, 0, 0, NULL, 0, 0, NULL }\n};\n\nint main() {\n    struct lws_context_creation_info info;\n    memset(&info, 0, sizeof info);\n    info.port = CONTEXT_PORT_NO_LISTEN;\n    info.protocols = protocols;\n    info.gid = -1;\n    info.uid = -1;\n\n    struct lws_context *context = lws_create_context(&info);\n    if (!context) {\n        fprintf(stderr, \"libwebsocket init failed\\n\");\n        return -1;\n    }\n\n    const char *server_address = \"ws://echo.websocket.org\";\n    struct lws_client_connect_info ccinfo;\n    memset(&ccinfo, 0, sizeof ccinfo);\n    ccinfo.context = context;\n    ccinfo.address = (char *)\"echo.websocket.org\";\n    ccinfo.port = 80;\n    ccinfo.path = \"/\";\n    ccinfo.host = \"echo.websocket.org\";\n    ccinfo.origin = \"http://libwebsockets.org\";\n    ccinfo.protocol = protocols[0].name;\n    ccinfo.ssl_connection = LCCSCF_USE_SSL;\n\n    struct lws *wsi = lws_client_connect_via_info(&ccinfo);\n    if (!wsi) {\n        fprintf(stderr, \"Client connect failed\\n\");\n        lws_context_destroy(context);\n        return -1;\n    }\n\n    while (1) {\n        lws_service(context, 1000);\n    }\n\n    lws_context_destroy(context);\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Initialization**:\n   - We set up the `lws_context_creation_info` structure and create a context for libwebsockets.\n\n2. **Connection Setup**:\n   - Define the server address and set up the connection information using `lws_client_connect_via_info`.\n\n3. **Message Handling**:\n   - In the callback function, handle different events like connection established, receiving messages, and writable events to send messages.\n\n4. **Error Handling**:\n   - Check for connection errors and handle them appropriately.\n\n5. **Graceful Shutdown**:\n   - Destroy the context to clean up resources when done.\n\n### Compiling and Running\n\nTo compile the program, use the following command:\n\n```sh\ng++ -o websocket_client websocket_client.cpp -lwebsockets\n```\n\nRun the program:\n\n```sh\n./websocket_client\n```\n\nThis will connect to the WebSocket server at `ws://echo.websocket.org`, send a message, and print any received messages.\n\n### Conclusion\n\nThis example provides a basic framework for creating a WebSocket client in C++ using libwebsockets. You can expand upon this by adding more features like handling different types of messages, implementing reconnection logic, or integrating with other parts of your application."
    }
]