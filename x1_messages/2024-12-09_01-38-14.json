[
    {
        "role": "user",
        "content": "Develop a Node.js script that monitors a specified directory for new files and automatically compresses them using gzip when they are added. The script should accept command line arguments for the target directory and compressed files output directory. It should also support recursive monitoring of subdirectories within the target directory."
    },
    {
        "role": "assistant",
        "content": "Alright! I'm going to help you create a Node.js script that monitors a specified directory for new files and automatically compresses them using gzip when they are added. The script will accept command line arguments for the target directory and the output directory for compressed files. It will also support recursive monitoring of subdirectories within the target directory.\n\nFirst, make sure you have Node.js installed on your machine. You can download it from [nodejs.org](https://nodejs.org/).\n\nNow, let's start by setting up a new Node.js project. Open your terminal or command prompt and create a new directory for your project:\n\n```bash\nmkdir directory-monitor\ncd directory-monitor\n```\n\nInitialize a new Node.js project:\n\n```bash\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\nNext, we need to install some dependencies. We'll use the following packages:\n\n- `chokidar`: A simple file watching library for Node.js.\n- `fs`: The built-in file system module for Node.js.\n- `zlib`: The built-in compression library for Node.js, which includes gzip.\n\nInstall `chokidar` using npm:\n\n```bash\nnpm install chokidar\n```\n\nNow, let's create the main script file. Create a new file named `monitor.js` in your project directory.\n\nOpen `monitor.js` in your favorite text editor and start by requiring the necessary modules:\n\n```javascript\nconst chokidar = require('chokidar');\nconst fs = require('fs');\nconst zlib = require('zlib');\n```\n\nWe need to accept command line arguments for the target directory and the output directory. Node.js provides the `process.argv` array to access command line arguments.\n\nThe `process.argv` array contains the following elements:\n\n- Index 0: Node executable path (e.g., `/usr/local/bin/node`)\n- Index 1: Path to the JavaScript file being executed (e.g., `/path/to/monitor.js`)\n- Index 2 and above: Command line arguments\n\nSo, the target directory will be `process.argv[2]` and the output directory will be `process.argv[3]`.\n\nLet's add some basic error checking to ensure that both directories are provided:\n\n```javascript\nif (process.argv.length < 5) {\n  console.error('Usage: node monitor.js <targetDirectory> <outputDirectory>');\n  process.exit(1);\n}\n\nconst targetDir = process.argv[2];\nconst outputDir = process.argv[3];\n```\n\nWait a minute, in `process.argv`, index 0 is the Node executable, index 1 is the script path, index 2 is the first argument, and so on. So, if we run `node monitor.js /path/to/target /path/to/output`, `process.argv[2]` is `/path/to/target` and `process.argv[3]` is `/path/to/output`. So, `process.argv.length` should be at least 5 for these two arguments to be present.\n\nNow, we need to set up chokidar to watch the target directory and its subdirectories recursively.\n\nFirst, create a watcher instance:\n\n```javascript\nconst watcher = chokidar.watch(targetDir, {\n  persistent: true,\n  recursive: true\n});\n```\n\nThe `persistent: true` option keeps the watcher instance running indefinitely, and `recursive: true` ensures that subdirectories are also monitored.\n\nNext, we need to define what happens when a new file is added. We'll listen for the `add` event on the watcher:\n\n```javascript\nwatcher.on('add', (path) => {\n  console.log(`File added: ${path}`);\n  compressFile(path);\n});\n```\n\nNow, we need to implement the `compressFile` function. This function will read the file, compress it using gzip, and save the compressed file to the output directory.\n\nFirst, ensure that the output directory exists. If not, create it:\n\n```javascript\nfunction ensureDirectoryExists(dir) {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n}\n\nensureDirectoryExists(outputDir);\n```\n\nNow, implement the `compressFile` function:\n\n```javascript\nfunction compressFile(filePath) {\n  const fileName = filePath.replace(targetDir, '').replace(/^\\/|\\\\/, '');\n  const outputFilePath = `${outputDir}/${fileName}.gz`;\n\n  const readStream = fs.createReadStream(filePath);\n  const gzip = zlib.createGzip();\n  const writeStream = fs.createWriteStream(outputFilePath);\n\n  readStream\n    .pipe(gzip)\n    .pipe(writeStream)\n    .on('finish', () => {\n      console.log(`Compressed: ${filePath} -> ${outputFilePath}`);\n    })\n    .on('error', (err) => {\n      console.error(`Error compressing file: ${err.message}`);\n    });\n}\n```\n\nHere's what's happening in this function:\n\n1. We construct the output file path by removing the target directory path from the file path and adding a `.gz` extension.\n2. We create a read stream for the original file.\n3. We create a gzip compression stream.\n4. We create a write stream for the compressed file.\n5. We pipe the read stream through the gzip stream and then to the write stream.\n6. We handle the `finish` event to log a success message.\n7. We handle the `error` event to log any errors that occur during compression.\n\nThat's the basic setup. Let's add a way to handle errors from the watcher:\n\n```javascript\nwatcher.on('error', (error) => {\n  console.error(`Watcher error: ${error.message}`);\n});\n```\n\nAlso, it's a good practice to handle the `SIGINT` signal to gracefully shut down the watcher when the script is interrupted:\n\n```javascript\nprocess.on('SIGINT', () => {\n  watcher.close();\n  console.log('Watcher stopped.');\n  process.exit(0);\n});\n```\n\nNow, your `monitor.js` should look like this:\n\n```javascript\nconst chokidar = require('chokidar');\nconst fs = require('fs');\nconst zlib = require('zlib');\n\nif (process.argv.length < 5) {\n  console.error('Usage: node monitor.js <targetDirectory> <outputDirectory>');\n  process.exit(1);\n}\n\nconst targetDir = process.argv[2];\nconst outputDir = process.argv[3];\n\nconst watcher = chokidar.watch(targetDir, {\n  persistent: true,\n  recursive: true\n});\n\nfunction ensureDirectoryExists(dir) {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n}\n\nensureDirectoryExists(outputDir);\n\nfunction compressFile(filePath) {\n  const fileName = filePath.replace(targetDir, '').replace(/^\\/|\\\\/, '');\n  const outputFilePath = `${outputDir}/${fileName}.gz`;\n\n  const readStream = fs.createReadStream(filePath);\n  const gzip = zlib.createGzip();\n  const writeStream = fs.createWriteStream(outputFilePath);\n\n  readStream\n    .pipe(gzip)\n    .pipe(writeStream)\n    .on('finish', () => {\n      console.log(`Compressed: ${filePath} -> ${outputFilePath}`);\n    })\n    .on('error', (err) => {\n      console.error(`Error compressing file: ${err.message}`);\n    });\n}\n\nwatcher.on('add', (path) => {\n  console.log(`File added: ${path}`);\n  compressFile(path);\n});\n\nwatcher.on('error', (error) => {\n  console.error(`Watcher error: ${error.message}`);\n});\n\nprocess.on('SIGINT', () => {\n  watcher.close();\n  console.log('Watcher stopped.');\n  process.exit(0);\n});\n```\n\nTo run the script, open your terminal and navigate to your project directory. Then execute:\n\n```bash\nnode monitor.js /path/to/target /path/to/output\n```\n\nReplace `/path/to/target` with the directory you want to monitor and `/path/to/output` with the directory where you want to store the compressed files.\n\nNow, whenever a new file is added to the target directory or its subdirectories, the script will automatically compress it using gzip and save it to the output directory.\n\nThat's it! You've created a Node.js script that monitors a directory for new files and compresses them using gzip.\n\n## Final Solution\nTo create a Node.js script that monitors a specified directory for new files and automatically compresses them using gzip, follow these steps:\n\n### Prerequisites\n- Ensure Node.js is installed on your machine. You can download it from [nodejs.org](https://nodejs.org/).\n\n### Setup\n1. **Create a new directory for your project:**\n    ```bash\n    mkdir directory-monitor\n    cd directory-monitor\n    ```\n\n2. **Initialize a new Node.js project:**\n    ```bash\n    npm init -y\n    ```\n\n3. **Install the required dependencies:**\n    ```bash\n    npm install chokidar\n    ```\n\n### Solution Code\nCreate a file named `monitor.js` and add the following code:\n\n```javascript\nconst chokidar = require('chokidar');\nconst fs = require('fs');\nconst zlib = require('zlib');\n\nif (process.argv.length < 5) {\n  console.error('Usage: node monitor.js <targetDirectory> <outputDirectory>');\n  process.exit(1);\n}\n\nconst targetDir = process.argv[2];\nconst outputDir = process.argv[3];\n\nconst watcher = chokidar.watch(targetDir, {\n  persistent: true,\n  recursive: true\n});\n\nfunction ensureDirectoryExists(dir) {\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir, { recursive: true });\n  }\n}\n\nensureDirectoryExists(outputDir);\n\nfunction compressFile(filePath) {\n  const fileName = filePath.replace(targetDir, '').replace(/^\\/|\\\\/, '');\n  const outputFilePath = `${outputDir}/${fileName}.gz`;\n\n  const readStream = fs.createReadStream(filePath);\n  const gzip = zlib.createGzip();\n  const writeStream = fs.createWriteStream(outputFilePath);\n\n  readStream\n    .pipe(gzip)\n    .pipe(writeStream)\n    .on('finish', () => {\n      console.log(`Compressed: ${filePath} -> ${outputFilePath}`);\n    })\n    .on('error', (err) => {\n      console.error(`Error compressing file: ${err.message}`);\n    });\n}\n\nwatcher.on('add', (path) => {\n  console.log(`File added: ${path}`);\n  compressFile(path);\n});\n\nwatcher.on('error', (error) => {\n  console.error(`Watcher error: ${error.message}`);\n});\n\nprocess.on('SIGINT', () => {\n  watcher.close();\n  console.log('Watcher stopped.');\n  process.exit(0);\n});\n```\n\n### Usage\n1. **Run the script with the target and output directories as arguments:**\n    ```bash\n    node monitor.js /path/to/target /path/to/output\n    ```\n\n2. **The script will monitor the target directory and its subdirectories for new files. When a new file is added, it will be compressed using gzip and saved in the specified output directory.**\n\nThis solution provides a robust way to monitor and compress files in real-time, making it suitable for various applications where automatic file compression is required."
    }
]