[
    {
        "role": "user",
        "content": "Develop a Node.js REST API using Express framework that supports CRUD operations for managing a list of books. Each book should have a title, author, publication date, and ISBN number. Implement endpoints to create, read, update, and delete books, as well as search for books by title or author.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through creating a simple REST API in Node.js using the Express framework to manage a list of books. This API will support CRUD operations: Create, Read, Update, and Delete, as well as searching for books by title or author.\n\n### Prerequisites\n\n- Node.js installed on your machine.\n- Basic understanding of JavaScript and Node.js.\n- Familiarity with RESTful APIs and HTTP methods.\n\n### Project Setup\n\nFirst, create a new directory for your project and initialize a new Node.js application:\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nInstall the required packages:\n\n```bash\nnpm install express body-parser\n```\n\n### Project Structure\n\nYour project structure should look like this:\n\n```\nbook-api/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 package.json\n\u2514\u2500\u2500 app.js\n```\n\n### Implementing the API\n\nWe'll write all our code in `app.js`.\n\n#### 1. Import Required Modules\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n```\n\n#### 2. In-Memory Data Store\n\nFor simplicity, we'll use an in-memory array to store books.\n\n```javascript\nlet books = [];\nlet idCounter = 1;\n```\n\n#### 3. CRUD Operations\n\n##### a. Create a Book (POST /books)\n\n```javascript\napp.post('/books', (req, res) => {\n    const { title, author, publicationDate, isbn } = req.body;\n    const book = {\n        id: idCounter++,\n        title,\n        author,\n        publicationDate,\n        isbn\n    };\n    books.push(book);\n    res.status(201).json(book);\n});\n```\n\n##### b. Get All Books (GET /books)\n\n```javascript\napp.get('/books', (req, res) => {\n    res.json(books);\n});\n```\n\n##### c. Get a Book by ID (GET /books/:id)\n\n```javascript\napp.get('/books/:id', (req, res) => {\n    const book = books.find(b => b.id === parseInt(req.params.id));\n    if (!book) return res.status(404).send('Book not found');\n    res.json(book);\n});\n```\n\n##### d. Update a Book (PUT /books/:id)\n\n```javascript\napp.put('/books/:id', (req, res) => {\n    const book = books.find(b => b.id === parseInt(req.params.id));\n    if (!book) return res.status(404).send('Book not found');\n\n    book.title = req.body.title || book.title;\n    book.author = req.body.author || book.author;\n    book.publicationDate = req.body.publicationDate || book.publicationDate;\n    book.isbn = req.body.isbn || book.isbn;\n\n    res.json(book);\n});\n```\n\n##### e. Delete a Book (DELETE /books/:id)\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n    const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n    if (bookIndex === -1) return res.status(404).send('Book not found');\n\n    const deletedBook = books.splice(bookIndex, 1);\n    res.json(deletedBook[0]);\n});\n```\n\n#### 4. Search Functionality\n\n##### a. Search by Title or Author (GET /books?query=...)\n\n```javascript\napp.get('/books', (req, res) => {\n    const query = req.query.query;\n    if (!query) return res.json(books);\n\n    const results = books.filter(book =>\n        book.title.toLowerCase().includes(query.toLowerCase()) ||\n        book.author.toLowerCase().includes(query.toLowerCase())\n    );\n    res.json(results);\n});\n```\n\n#### 5. Start the Server\n\n```javascript\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Testing the API\n\nYou can use tools like Postman or curl to test the API.\n\n#### Example: Create a Book\n\n```bash\ncurl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationDate\":\"2023-01-01\",\"isbn\":\"1234567890\"}'\n```\n\n#### Example: Get All Books\n\n```bash\ncurl http://localhost:3000/books\n```\n\n#### Example: Update a Book\n\n```bash\ncurl -X PUT http://localhost:3000/books/1 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book Title\"}'\n```\n\n#### Example: Delete a Book\n\n```bash\ncurl -X DELETE http://localhost:3000/books/1\n```\n\n#### Example: Search Books\n\n```bash\ncurl http://localhost:3000/books?query=Sample\n```\n\n### Conclusion\n\nYou've successfully created a simple REST API in Node.js using Express to manage a list of books with CRUD operations and search functionality. This API can be extended with more features like validation, error handling, and connecting to a database for persistent storage.\n\n## Final Solution\nTo create a Node.js REST API using the Express framework for managing a list of books with CRUD operations and search functionality, follow these steps:\n\n### Project Setup\n\n1. **Initialize the project:**\n    ```bash\n    mkdir book-api\n    cd book-api\n    npm init -y\n    ```\n\n2. **Install required packages:**\n    ```bash\n    npm install express body-parser\n    ```\n\n### Implementation\n\n1. **Import required modules:**\n    ```javascript\n    const express = require('express');\n    const bodyParser = require('body-parser');\n\n    const app = express();\n    app.use(bodyParser.json());\n    ```\n\n2. **In-memory data store:**\n    ```javascript\n    let books = [];\n    let idCounter = 1;\n    ```\n\n3. **CRUD Operations:**\n\n    - **Create a Book (POST /books):**\n        ```javascript\n        app.post('/books', (req, res) => {\n            const { title, author, publicationDate, isbn } = req.body;\n            const book = {\n                id: idCounter++,\n                title,\n                author,\n                publicationDate,\n                isbn\n            };\n            books.push(book);\n            res.status(201).json(book);\n        });\n        ```\n\n    - **Get All Books (GET /books):**\n        ```javascript\n        app.get('/books', (req, res) => {\n            res.json(books);\n        });\n        ```\n\n    - **Get a Book by ID (GET /books/:id):**\n        ```javascript\n        app.get('/books/:id', (req, res) => {\n            const book = books.find(b => b.id === parseInt(req.params.id));\n            if (!book) return res.status(404).send('Book not found');\n            res.json(book);\n        });\n        ```\n\n    - **Update a Book (PUT /books/:id):**\n        ```javascript\n        app.put('/books/:id', (req, res) => {\n            const book = books.find(b => b.id === parseInt(req.params.id));\n            if (!book) return res.status(404).send('Book not found');\n\n            book.title = req.body.title || book.title;\n            book.author = req.body.author || book.author;\n            book.publicationDate = req.body.publicationDate || book.publicationDate;\n            book.isbn = req.body.isbn || book.isbn;\n\n            res.json(book);\n        });\n        ```\n\n    - **Delete a Book (DELETE /books/:id):**\n        ```javascript\n        app.delete('/books/:id', (req, res) => {\n            const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n            if (bookIndex === -1) return res.status(404).send('Book not found');\n\n            const deletedBook = books.splice(bookIndex, 1);\n            res.json(deletedBook[0]);\n        });\n        ```\n\n4. **Search Functionality:**\n\n    - **Search by Title or Author (GET /books?query=...):**\n        ```javascript\n        app.get('/books', (req, res) => {\n            const query = req.query.query;\n            if (!query) return res.json(books);\n\n            const results = books.filter(book =>\n                book.title.toLowerCase().includes(query.toLowerCase()) ||\n                book.author.toLowerCase().includes(query.toLowerCase())\n            );\n            res.json(results);\n        });\n        ```\n\n5. **Start the server:**\n    ```javascript\n    const PORT = process.env.PORT || 3000;\n    app.listen(PORT, () => {\n        console.log(`Server is running on port ${PORT}`);\n    });\n    ```\n\n### Testing\n\nUse tools like Postman or `curl` to test the API endpoints for creating, reading, updating, deleting, and searching books.\n\nThis simple API can be extended with additional features such as input validation, error handling, and database integration for persistent storage."
    }
]