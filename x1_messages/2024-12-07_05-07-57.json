[
    {
        "role": "user",
        "content": "Create a Python class to represent a doubly linked list with methods to insert elements at the beginning, end, and specified position, delete an element by value, and display the contents of the list."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a doubly linked list in Python involves defining a class for the nodes and another class for the list itself. The node class will have pointers to both the next and previous nodes, which is what makes it a doubly linked list.\n\nHere's a step-by-step plan:\n\n1. **Node Class**: This will have attributes for the data and pointers to the next and previous nodes.\n\n2. **Doubly Linked List Class**:\n   - **Insert at Beginning**: Add a new node at the start of the list.\n   - **Insert at End**: Add a new node at the end of the list.\n   - **Insert at Position**: Insert a new node at a specified position.\n   - **Delete by Value**: Remove the first occurrence of a node with a given value.\n   - **Display**: Print the contents of the list.\n\nLet's start by defining the Node class.\n\n## Final Solution\nTo create a doubly linked list in Python, we need to define two classes: one for the nodes and another for the doubly linked list itself. Here's how you can do it:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n            new_node.prev = current\n\n    def insert_at_position(self, data, position):\n        if position == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range\")\n            return\n        new_node.next = current.next\n        new_node.prev = current\n        if current.next:\n            current.next.prev = new_node\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        current = self.head\n        found = False\n        while current:\n            if current.data == value:\n                found = True\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                break\n            current = current.next\n        if not found:\n            print(\"Value not found in the list\")\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.insert_at_beginning(10)\n    dll.insert_at_end(20)\n    dll.insert_at_position(15, 1)\n    dll.display()  # Output: 10 <-> 15 <-> 20 <-> None\n    dll.delete_by_value(15)\n    dll.display()  # Output: 10 <-> 20 <-> None\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Each node has `data`, `next`, and `prev` attributes.\n\n2. **DoublyLinkedList Class**:\n   - **insert_at_beginning(data)**: Inserts a new node at the start.\n   - **insert_at_end(data)**: Inserts a new node at the end.\n   - **insert_at_position(data, position)**: Inserts a new node at the specified position.\n   - **delete_by_value(value)**: Deletes the first occurrence of the node with the given value.\n   - **display()**: Prints the list from head to tail.\n\nThis implementation ensures that all operations maintain the doubly linked list properties, including proper handling of pointers for insertion and deletion operations."
    }
]