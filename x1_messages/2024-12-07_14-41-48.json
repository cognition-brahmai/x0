[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified index, as well as deleting elements by value or index.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python program that implements a singly linked list with methods for adding elements at the beginning, end, and specified index, as well as deleting elements by value or index.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_index(self, index, data):\n        if index < 0:\n            raise IndexError(\"Index cannot be negative\")\n        if index == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if self.is_empty():\n            raise ValueError(\"List is empty\")\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            raise ValueError(\"Value not found in list\")\n        current.next = current.next.next\n\n    def delete_by_index(self, index):\n        if index < 0:\n            raise IndexError(\"Index cannot be negative\")\n        if self.is_empty():\n            raise IndexError(\"List is empty\")\n        if index == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current or not current.next:\n            raise IndexError(\"Index out of range\")\n        current.next = current.next.next\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_beginning(3)\n    sll.add_at_end(5)\n    sll.add_at_index(1, 4)\n    sll.display()  # Output: 3 -> 4 -> 5\n    sll.delete_by_value(4)\n    sll.display()  # Output: 3 -> 5\n    sll.delete_by_index(1)\n    sll.display()  # Output: 3\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents a single node in the linked list with `data` and `next` attributes.\n\n2. **SinglyLinkedList Class**:\n   - Initializes with a `head` node set to `None`.\n   - **is_empty()**: Checks if the list is empty.\n   - **add_at_beginning(data)**: Adds a new node with the given data at the beginning of the list.\n   - **add_at_end(data)**: Adds a new node with the given data at the end of the list.\n   - **add_at_index(index, data)**: Adds a new node with the given data at the specified index.\n   - **delete_by_value(value)**: Deletes the first node containing the given value.\n   - **delete_by_index(index)**: Deletes the node at the specified index.\n   - **display()**: Prints the linked list in a readable format.\n\n3. **Example Usage**:\n   - Demonstrates adding elements at different positions and deleting elements by value and index."
    }
]