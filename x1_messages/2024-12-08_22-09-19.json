[
    {
        "role": "user",
        "content": "Create a Golang web server that serves static files from a specified directory and provides an endpoint to upload new files. Use Gorilla Mux for routing and support command-line arguments for the listening IP, port, and static directory.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple web server in Go that serves static files and allows file uploads. We'll use the Gorilla Mux router for handling routes and accept command-line arguments for flexibility.\n\nFirst, make sure you have Go installed on your system. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\nWe'll need to import a few packages:\n\n- `github.com/gorilla/mux` for routing\n\n- `flag` for command-line arguments\n\n- `net/http` for handling HTTP requests\n\n- `os` for file operations\n\n- `io` for file I/O\n\nLet's start by setting up the command-line flags for IP, port, and the static directory.\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nfunc main() {\n\t// Define command-line flags\n\tip := flag.String(\"ip\", \"127.0.0.1\", \"IP address to listen on\")\n\tport := flag.Int(\"port\", 8080, \"Port to listen on\")\n\tstaticDir := flag.String(\"static\", \"./static\", \"Directory to serve static files from\")\n\n\tflag.Parse()\n\n\t// Create a new router\n\tr := mux.NewRouter()\n\n\t// Serve static files\n\tfs := http.FileServer(http.Dir(*staticDir))\n\tr.PathPrefix(\"/\").Handler(http.StripPrefix(\"/\", fs))\n\n\t// File upload endpoint\n\tr.HandleFunc(\"/upload\", uploadFile).Methods(\"POST\")\n\n\t// Start the server\n\taddr := fmt.Sprintf(\"%s:%d\", *ip, *port)\n\tfmt.Printf(\"Starting server on %s\\n\", addr)\n\terr := http.ListenAndServe(addr, r)\n\tif err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n\t// Parse the multipart form in the request\n\terr := r.ParseMultipartForm(10 << 20) // 10MB max file size\n\tif err != nil {\n\t\thttp.Error(w, \"Error parsing form data\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\t// Get the file from the form data\n\tfile, handler, err := r.FormFile(\"file\")\n\tif err != nil {\n\t\thttp.Error(w, \"Error retrieving file\", http.StatusBadRequest)\n\t\treturn\n\t}\n\tdefer file.Close()\n\n\t// Create a new file on the server to write to\n\tf, err := os.OpenFile(handler.Filename, os.O_WRONLY|os.O_CREATE, 0666)\n\tif err != nil {\n\t\thttp.Error(w, \"Error opening file for writing\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\tdefer f.Close()\n\n\t// Copy the uploaded file to the new file on the server\n\t_, err = io.Copy(f, file)\n\tif err != nil {\n\t\thttp.Error(w, \"Error saving file\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusCreated)\n\tfmt.Fprintf(w, \"Successfully uploaded file: %s\", handler.Filename)\n}\n```\n\n### Explanation\n\n1. **Command-Line Flags**:\n   - `-ip`: IP address to listen on (default is `127.0.0.1`).\n   - `-port`: Port to listen on (default is `8080`).\n   - `-static`: Directory to serve static files from (default is `./static`).\n\n2. **Routing**:\n   - We use Gorilla Mux for routing.\n   - Static files are served from the specified directory.\n   - A POST endpoint `/upload` is set up to handle file uploads.\n\n3. **File Upload**:\n   - The `uploadFile` function handles file uploads.\n   - It parses the multipart form data.\n   - Retrieves the file from the form data.\n   - Saves the file to the server's filesystem with the original filename.\n\n### Running the Server\n\nTo run the server, save the code to a file, for example, `main.go`, and execute:\n\n```sh\ngo run main.go -ip=127.0.0.1 -port=8080 -static=./static\n```\n\nMake sure the `static` directory exists, or specify a different directory path.\n\n### Testing the Upload Endpoint\n\nYou can test the upload endpoint using tools like `curl` or Postman.\n\nUsing `curl`:\n\n```sh\ncurl -F \"file=@path/to/your/file.txt\" http://127.0.0.1:8080/upload\n```\n\nThis should upload the file to the server's static directory.\n\nI hope this helps! Let me know if you have any questions."
    }
]