[
    {
        "role": "user",
        "content": "Write a C++ program that implements a basic stack data structure using a linked list. The program should include functions for pushing elements onto the stack, popping elements off the stack, and checking if the stack is empty. Include error handling for cases when trying to pop from an empty stack."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's create a C++ program that implements a basic stack using a linked list. We'll include functions for pushing elements onto the stack, popping elements off the stack, and checking if the stack is empty. We'll also handle the error when someone tries to pop from an empty stack.\n\nFirst, let's understand what a stack is. A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. That means the last element added to the stack is the first one to be removed.\n\nUsing a linked list to implement a stack is efficient because linked lists allow dynamic allocation and deallocation of nodes, which is perfect for stack operations.\n\nHere\u2019s a step-by-step plan:\n\n1. **Define a Node Structure**: Each node will hold the data and a pointer to the next node.\n2. **Define the Stack Class**: This will have methods for push, pop, and isEmpty.\n3. **Implement Push Operation**: Add a new node to the top of the stack.\n4. **Implement Pop Operation**: Remove the top node from the stack and return its data.\n5. **Implement IsEmpty Check**: Return true if the stack is empty, otherwise false.\n6. **Error Handling**: If someone tries to pop from an empty stack, we'll display an error message.\n\nLet's start by defining the node structure and the stack class.\n\n## Final Solution\nTo implement a stack using a linked list in C++, we need to define a node structure and a stack class with methods for pushing, popping, and checking if the stack is empty. We also need to handle errors for popping from an empty stack.\n\n### Approach\n\n1. **Node Structure**: Each node contains data and a pointer to the next node.\n2. **Stack Class**:\n   - **Push Operation**: Add a new node to the top of the stack.\n   - **Pop Operation**: Remove the top node from the stack and return its data. If the stack is empty, display an error message.\n   - **IsEmpty Check**: Return true if the stack is empty, otherwise false.\n\n### Solution Code\n\n```cpp\n#include <iostream>\nusing namespace std;\n\n// Define the node structure\nstruct Node {\n    int data;\n    Node* next;\n};\n\n// Define the Stack class\nclass Stack {\nprivate:\n    Node* top;\n\npublic:\n    Stack() : top(nullptr) {}\n\n    // Push operation\n    void push(int value) {\n        Node* newNode = new Node;\n        newNode->data = value;\n        newNode->next = top;\n        top = newNode;\n        cout << \"Pushed \" << value << \" onto the stack.\" << endl;\n    }\n\n    // Pop operation\n    int pop() {\n        if (isEmpty()) {\n            cout << \"Error: Stack is empty. Cannot pop.\" << endl;\n            return -1; // Assuming -1 as error value\n        }\n        Node* temp = top;\n        int poppedValue = temp->data;\n        top = top->next;\n        delete temp;\n        return poppedValue;\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() {\n        return top == nullptr;\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    cout << \"Popped: \" << stack.pop() << endl;\n    cout << \"Popped: \" << stack.pop() << endl;\n    cout << \"Popped: \" << stack.pop() << endl;\n    cout << \"Popped: \" << stack.pop() << endl; // Should show error\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: \n   - Each node has an integer data field and a pointer to the next node.\n   \n2. **Stack Class**:\n   - **Constructor**: Initializes the top of the stack to nullptr.\n   - **Push Operation**:\n     - Creates a new node with the given value.\n     - Sets the new node's next pointer to the current top.\n     - Updates the top to the new node.\n   - **Pop Operation**:\n     - Checks if the stack is empty. If empty, displays an error message and returns -1.\n     - Removes the top node, returns its data, and frees the memory.\n   - **IsEmpty Check**:\n     - Returns true if the top is nullptr, otherwise false.\n\n3. **Main Function**:\n   - Demonstrates pushing and popping elements.\n   - Attempts to pop from an empty stack to show error handling.\n\nThis implementation ensures that stack operations are efficient with O(1) time complexity for push and pop operations."
    }
]