[
    {
        "role": "user",
        "content": "Implement a C++ program that plays Hangman against the user. The program should randomly select a word from a list of words stored in a text file and allow the user to guess one letter at a time. Display the current state of the guessed word and the remaining attempts after each guess.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a Hangman game in C++ that reads words from a text file and allows users to guess letters one at a time involves several steps. Below is a step-by-step guide along with the corresponding code.\n\n### Steps to Implement Hangman in C++\n\n1. **Read Words from a File:**\n   - Open and read a list of words from a text file.\n   - Store these words in a container like a vector.\n\n2. **Select a Random Word:**\n   - Choose a random word from the list for the game.\n\n3. **Handle User Guesses:**\n   - Allow the user to input one letter at a time.\n   - Check if the guessed letter is in the word.\n   - Update the game state based on the guess.\n\n4. **Display Game State:**\n   - Show the current state of the word with correctly guessed letters and underscores for unknown letters.\n   - Keep track and display the number of remaining attempts.\n\n5. **Game Over Conditions:**\n   - Determine if the user has won by guessing all letters correctly.\n   - Determine if the user has lost by exceeding the maximum number of attempts.\n\n### Code Implementation\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <ctime>\n#include <cstdlib>\n#include <cctype>\n\nstd::vector<std::string> readWordsFromFile(const std::string& filename) {\n    std::vector<std::string> words;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string word;\n        while (file >> word) {\n            words.push_back(word);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return words;\n}\n\nstd::string selectRandomWord(const std::vector<std::string>& words) {\n    return words[rand() % words.size()];\n}\n\nvoid displayWord(const std::string& word, const std::vector<bool>& guessed) {\n    for (size_t i = 0; i < word.length(); ++i) {\n        if (guessed[i]) {\n            std::cout << word[i] << \" \";\n        } else {\n            std::cout << \"_ \";\n        }\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::srand(static_cast<unsigned int>(std::time(nullptr)));\n\n    // Read words from file\n    std::vector<std::string> words = readWordsFromFile(\"words.txt\");\n    if (words.empty()) {\n        std::cerr << \"No words available in the file.\" << std::endl;\n        return 1;\n    }\n\n    // Select a random word\n    std::string word = selectRandomWord(words);\n    std::transform(word.begin(), word.end(), word.begin(), ::tolower);\n\n    // Initialize guessed letters\n    std::vector<bool> guessed(word.length(), false);\n    int attempts = 6;\n\n    std::cout << \"Welcome to Hangman!\" << std::endl;\n\n    while (attempts > 0) {\n        std::cout << \"Attempts left: \" << attempts << std::endl;\n        displayWord(word, guessed);\n\n        char guess;\n        std::cout << \"Guess a letter: \";\n        std::cin >> guess;\n        guess = tolower(guess);\n\n        bool correctGuess = false;\n        for (size_t i = 0; i < word.length(); ++i) {\n            if (word[i] == guess && !guessed[i]) {\n                guessed[i] = true;\n                correctGuess = true;\n            }\n        }\n\n        if (!correctGuess) {\n            --attempts;\n            std::cout << \"Incorrect guess.\" << std::endl;\n        }\n\n        // Check if the user has won\n        bool allGuessed = true;\n        for (bool b : guessed) {\n            if (!b) {\n                allGuessed = false;\n                break;\n            }\n        }\n        if (allGuessed) {\n            std::cout << \"Congratulations! You've guessed the word: \" << word << std::endl;\n            return 0;\n        }\n    }\n\n    std::cout << \"You've run out of attempts. The word was: \" << word << std::endl;\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Reading Words from File:**\n   - The `readWordsFromFile` function opens the specified file and reads words into a vector.\n\n2. **Selecting a Random Word:**\n   - The `selectRandomWord` function picks a random word from the vector.\n\n3. **Displaying the Word:**\n   - The `displayWord` function shows the current state of the word, revealing guessed letters and hiding others with underscores.\n\n4. **Main Game Loop:**\n   - The game initializes guessed letters and sets the number of attempts.\n   - It repeatedly asks the user for guesses, updates the game state, and checks for win/lose conditions.\n\nThis implementation provides a basic but functional Hangman game in C++."
    }
]