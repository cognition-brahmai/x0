[
    {
        "role": "user",
        "content": "Create a C# console application that connects to a SQL Server database and performs CRUD operations on a table named 'Employees'. The 'Employees' table contains columns: EmployeeID (integer), FirstName (string), LastName (string), and Salary (decimal)."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through creating a C# console application that connects to a SQL Server database and performs CRUD (Create, Read, Update, Delete) operations on an 'Employees' table. Make sure you have Visual Studio installed, and you have a SQL Server database set up with the 'Employees' table.\n\nFirst, open Visual Studio and create a new Console App project in C#. Name it something like \"EmployeeCRUD\".\n\nNext, you'll need to install the necessary NuGet packages to connect to SQL Server. You can do this via the Package Manager Console or directly in the NuGet Package Manager in Visual Studio. Install the following packages:\n\n- `System.Data.SqlClient`\n\nThis package provides the necessary classes to connect to and interact with SQL Server.\n\nOnce you have the package installed, you can start writing your code. I'll outline the steps and provide sample code for each CRUD operation.\n\n### Step 1: Define the Connection String\n\nYou need a connection string to connect to your SQL Server database. You can hardcode it for now, but in a production application, it's better to store it in the app.config or web.config file.\n\n```csharp\nstring connectionString = \"Server=your_server;Database=your_database;User Id=your_username;Password=your_password;\";\n```\n\nReplace `your_server`, `your_database`, `your_username`, and `your_password` with your actual database credentials.\n\n### Step 2: Create Operations\n\n#### Inserting a New Employee\n\nTo insert a new employee into the 'Employees' table, you can use the `SqlCommand` class with an INSERT SQL statement.\n\n```csharp\npublic void AddEmployee(int employeeID, string firstName, string lastName, decimal salary)\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        string query = \"INSERT INTO Employees (EmployeeID, FirstName, LastName, Salary) VALUES (@EmployeeID, @FirstName, @LastName, @Salary)\";\n        SqlCommand cmd = new SqlCommand(query, conn);\n        cmd.Parameters.AddWithValue(\"@EmployeeID\", employeeID);\n        cmd.Parameters.AddWithValue(\"@FirstName\", firstName);\n        cmd.Parameters.AddWithValue(\"@LastName\", lastName);\n        cmd.Parameters.AddWithValue(\"@Salary\", salary);\n\n        conn.Open();\n        cmd.ExecuteNonQuery();\n        conn.Close();\n    }\n}\n```\n\n### Step 3: Read Operations\n\n#### Retrieving All Employees\n\nTo retrieve all employees from the 'Employees' table, you can use a SELECT statement and read the data using a `SqlDataReader`.\n\n```csharp\npublic void GetAllEmployees()\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        string query = \"SELECT EmployeeID, FirstName, LastName, Salary FROM Employees\";\n        SqlCommand cmd = new SqlCommand(query, conn);\n\n        conn.Open();\n        SqlDataReader reader = cmd.ExecuteReader();\n\n        while (reader.Read())\n        {\n            int employeeID = Convert.ToInt32(reader[\"EmployeeID\"]);\n            string firstName = reader[\"FirstName\"].ToString();\n            string lastName = reader[\"LastName\"].ToString();\n            decimal salary = Convert.ToDecimal(reader[\"Salary\"]);\n\n            Console.WriteLine($\"EmployeeID: {employeeID}, Name: {firstName} {lastName}, Salary: {salary}\");\n        }\n\n        reader.Close();\n        conn.Close();\n    }\n}\n```\n\n### Step 4: Update Operations\n\n#### Updating an Employee's Salary\n\nTo update an employee's salary, use an UPDATE SQL statement with a WHERE clause to specify which employee to update.\n\n```csharp\npublic void UpdateEmployeeSalary(int employeeID, decimal newSalary)\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        string query = \"UPDATE Employees SET Salary = @NewSalary WHERE EmployeeID = @EmployeeID\";\n        SqlCommand cmd = new SqlCommand(query, conn);\n        cmd.Parameters.AddWithValue(\"@EmployeeID\", employeeID);\n        cmd.Parameters.AddWithValue(\"@NewSalary\", newSalary);\n\n        conn.Open();\n        int rowsAffected = cmd.ExecuteNonQuery();\n        conn.Close();\n\n        if (rowsAffected > 0)\n        {\n            Console.WriteLine(\"Salary updated successfully.\");\n        }\n        else\n        {\n            Console.WriteLine(\"No employee found with the specified ID.\");\n        }\n    }\n}\n```\n\n### Step 5: Delete Operations\n\n#### Deleting an Employee\n\nTo delete an employee from the 'Employees' table, use a DELETE SQL statement with a WHERE clause to specify which employee to delete.\n\n```csharp\npublic void DeleteEmployee(int employeeID)\n{\n    using (SqlConnection conn = new SqlConnection(connectionString))\n    {\n        string query = \"DELETE FROM Employees WHERE EmployeeID = @EmployeeID\";\n        SqlCommand cmd = new SqlCommand(query, conn);\n        cmd.Parameters.AddWithValue(\"@EmployeeID\", employeeID);\n\n        conn.Open();\n        int rowsAffected = cmd.ExecuteNonQuery();\n        conn.Close();\n\n        if (rowsAffected > 0)\n        {\n            Console.WriteLine(\"Employee deleted successfully.\");\n        }\n        else\n        {\n            Console.WriteLine(\"No employee found with the specified ID.\");\n        }\n    }\n}\n```\n\n### Step 6: Main Method\n\nIn your `Program.cs` file, create an instance of the class containing these methods and call them as needed.\n\n```csharp\nclass Program\n{\n    static void Main(string[] args)\n    {\n        EmployeeCRUD operations = new EmployeeCRUD();\n\n        // Add a new employee\n        operations.AddEmployee(1, \"John\", \"Doe\", 50000);\n\n        // Get all employees\n        operations.GetAllEmployees();\n\n        // Update an employee's salary\n        operations.UpdateEmployeeSalary(1, 55000);\n\n        // Delete an employee\n        operations.DeleteEmployee(1);\n    }\n}\n```\n\n### Additional Considerations\n\n- **Error Handling:** Implement try-catch blocks to handle potential exceptions, such as connection failures or invalid data.\n- **Parameterized Queries:** Always use parameterized queries to prevent SQL injection attacks.\n- **Connection Management:** Ensure that database connections are properly opened and closed to avoid resource leaks.\n\nThat's it! You've created a simple C# console application that performs CRUD operations on a SQL Server database. This should give you a solid foundation to build upon."
    }
]