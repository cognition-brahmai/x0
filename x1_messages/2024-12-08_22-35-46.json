[
    {
        "role": "user",
        "content": "Develop a Node.js REST API that supports CRUD operations for managing a collection of books. Integrate the API with a MongoDB database for persistence. Include pagination support for listing books.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you develop a Node.js REST API for managing a collection of books, and we'll store the data in a MongoDB database. We'll also add pagination support for listing books. Sound good?\n\nFirst, make sure you have Node.js and MongoDB installed on your machine. You can download Node.js from nodejs.org, and for MongoDB, you can follow the installation guide on the official MongoDB website.\n\nOnce you have both installed, let's set up a new Node.js project. Open your terminal or command prompt and create a new directory for your project:\n\n```\nmkdir book-api\ncd book-api\n```\n\nNow, initialize a new Node.js project:\n\n```\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\nNext, we need to install some dependencies. We'll need Express for creating the API, Mongoose for interacting with MongoDB, and bodyParser to handle request data.\n\nInstall them using npm:\n\n```\nnpm install express mongoose body-parser\n```\n\nNow, let's set up the basic structure of our API. Create a new file called `app.js`:\n\n```\ntouch app.js\n```\n\nOpen `app.js` and set up the basic Express app:\n\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\n\nconst app = express();\n\n// Middleware\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/book-api', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\n// Define Book schema\nconst bookSchema = new mongoose.Schema({\n  title: String,\n  author: String,\n  publishedDate: Date,\n  pages: Number,\n});\n\nconst Book = mongoose.model('Book', bookSchema);\n\n// Routes\napp.get('/books', async (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const limit = parseInt(req.query.limit) || 10;\n  const startIndex = (page - 1) * limit;\n  const totalBooks = await Book.countDocuments();\n  const books = await Book.find().limit(limit).skip(startIndex);\n  res.json({\n    totalBooks,\n    books,\n  });\n});\n\napp.get('/books/:id', async (req, res) => {\n  const book = await Book.findById(req.params.id);\n  if (!book) return res.status(404).send('Book not found');\n  res.json(book);\n});\n\napp.post('/books', async (req, res) => {\n  const book = new Book(req.body);\n  await book.save();\n  res.status(201).json(book);\n});\n\napp.put('/books/:id', async (req, res) => {\n  const book = await Book.findByIdAndUpdate(req.params.id, req.body, { new: true });\n  if (!book) return res.status(404).send('Book not found');\n  res.json(book);\n});\n\napp.delete('/books/:id', async (req, res) => {\n  const book = await Book.findByIdAndDelete(req.params.id);\n  if (!book) return res.status(404).send('Book not found');\n  res.json(book);\n});\n\n// Start server\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server running on port ${port}`);\n});\n```\n\nLet's go through this code step by step.\n\n1. **Dependencies and Middleware:**\n   - We require Express, Mongoose, and body-parser.\n   - We set up Express and use body-parser to parse JSON request bodies.\n   - We connect to MongoDB using Mongoose. Make sure MongoDB is running on the default port 27017.\n\n2. **Book Model:**\n   - We define a Mongoose schema for books with fields for title, author, publishedDate, and pages.\n   - We create a Mongoose model called `Book` based on this schema.\n\n3. **Routes:**\n   - **GET /books:** This route handles listing books with pagination. It accepts `page` and `limit` query parameters to determine which page and how many books to return per page.\n   - **GET /books/:id:** This route retrieves a single book by its ID.\n   - **POST /books:** This route creates a new book using the data sent in the request body.\n   - **PUT /books/:id:** This route updates an existing book by its ID with the data sent in the request body.\n   - **DELETE /books/:id:** This route deletes a book by its ID.\n\n4. **Starting the Server:**\n   - The server listens on port 3000 by default, but you can specify a different port using the `PORT` environment variable.\n\nNow, let's test this API. Make sure your MongoDB server is running, then start your Node.js server:\n\n```\nnode app.js\n```\n\nYou should see \"Server running on port 3000\" in your console.\n\nTo test the API, you can use tools like Postman or curl. Here are some example commands using curl:\n\n- **Create a book:**\n\n  ```bash\n  curl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publishedDate\":\"2022-01-01\",\"pages\":300}'\n  ```\n\n- **Get all books with pagination:**\n\n  ```bash\n  curl http://localhost:3000/books?page=1&limit=10\n  ```\n\n- **Get a single book by ID:**\n\n  ```bash\n  curl http://localhost:3000/books/62c0a2b3d5f5f5d3d3a2b3c4\n  ```\n\n- **Update a book by ID:**\n\n  ```bash\n  curl -X PUT http://localhost:3000/books/62c0a2b3d5f5f5d3d3a2b3c4 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Title\"}'\n  ```\n\n- **Delete a book by ID:**\n\n  ```bash\n  curl -X DELETE http://localhost:3000/books/62c0a2b3d5f5f5d3d3a2b3c4\n  ```\n\nReplace `'62c0a2b3d5f5f5d3d3a2b3c4'` with the actual ID of a book in your database.\n\nThat's it! You've created a simple Node.js REST API for managing books with CRUD operations and pagination, integrated with a MongoDB database.\n\nIf you have any questions or need further assistance, feel free to ask."
    }
]