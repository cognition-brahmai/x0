[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with the Kubernetes API to create, update, and delete resources such as deployments, services, and pods. The script should support command line arguments for the desired action (create, update, or delete), resource type, and resource configuration file path.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'm going to help you create a Python script that interacts with the Kubernetes API to manage resources like deployments, services, and pods. We'll use the `kubernetes` Python client library to achieve this. The script will accept command-line arguments to specify the action (create, update, or delete), the resource type, and the path to the resource configuration file.\n\n### Prerequisites\n\n1. **Kubernetes Cluster**: Ensure you have a Kubernetes cluster up and running.\n2. **kubectl**: Make sure `kubectl` is configured to connect to your cluster.\n3. **Python**: Have Python installed on your machine.\n4. **kubernetes Client Library**: Install the `kubernetes` Python package using pip:\n   ```bash\n   pip install kubernetes\n   ```\n\n### Script Structure\n\nThe script will consist of the following main components:\n\n1. **Argument Parsing**: Use the `argparse` module to handle command-line arguments.\n2. **Kubernetes Configuration**: Load the Kubernetes configuration using `kubernetes.config`.\n3. **Resource Management Functions**: Define functions to create, update, and delete resources based on the provided configuration file.\n\n### Sample Configuration File\n\nBefore we dive into the script, let's consider a sample YAML configuration file for a deployment:\n\n```yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: my-deployment\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: my-app\n  template:\n    metadata:\n      labels:\n        app: my-app\n    spec:\n      containers:\n      - name: my-container\n        image: nginx:latest\n        ports:\n        - containerPort: 80\n```\n\n### The Python Script\n\nHere's the complete Python script:\n\n```python\nimport argparse\nfrom kubernetes import client, config\nimport yaml\n\ndef main():\n    parser = argparse.ArgumentParser(description='Manage Kubernetes resources.')\n    parser.add_argument('action', choices=['create', 'update', 'delete'], help='Action to perform on the resource.')\n    parser.add_argument('resource_type', choices=['deployment', 'service', 'pod'], help='Type of Kubernetes resource.')\n    parser.add_argument('config_path', help='Path to the YAML configuration file for the resource.')\n    \n    args = parser.parse_args()\n    \n    # Load Kubernetes configuration\n    config.load_kube_config()\n    \n    # Choose the appropriate API client based on resource type\n    if args.resource_type == 'deployment':\n        api = client.AppsV1Api()\n        kind = 'Deployment'\n    elif args.resource_type == 'service':\n        api = client.CoreV1Api()\n        kind = 'Service'\n    elif args.resource_type == 'pod':\n        api = client.CoreV1Api()\n        kind = 'Pod'\n    \n    # Read the configuration file\n    with open(args.config_path, 'r') as file:\n        config_data = yaml.safe_load(file)\n    \n    # Ensure the configuration matches the expected resource type\n    if config_data.get('kind') != kind:\n        print(f\"Error: Expected resource kind {kind}, but found {config_data.get('kind')}.\")\n        return\n    \n    # Perform the specified action\n    if args.action == 'create':\n        if args.resource_type == 'deployment':\n            api.create_namespaced_deployment(body=config_data, namespace='default')\n        elif args.resource_type == 'service':\n            api.create_namespaced_service(body=config_data, namespace='default')\n        elif args.resource_type == 'pod':\n            api.create_namespaced_pod(body=config_data, namespace='default')\n        print(f\"{kind} created successfully.\")\n    elif args.action == 'update':\n        if args.resource_type == 'deployment':\n            api.replace_namespaced_deployment(name=config_data['metadata']['name'], body=config_data, namespace='default')\n        elif args.resource_type == 'service':\n            api.replace_namespaced_service(name=config_data['metadata']['name'], body=config_data, namespace='default')\n        elif args.resource_type == 'pod':\n            print(\"Update action is not supported for Pods as they are immutable.\")\n        else:\n            print(\"Update action not supported for this resource type.\")\n    elif args.action == 'delete':\n        if args.resource_type == 'deployment':\n            api.delete_namespaced_deployment(name=config_data['metadata']['name'], namespace='default', body=client.V1DeleteOptions())\n        elif args.resource_type == 'service':\n            api.delete_namespaced_service(name=config_data['metadata']['name'], namespace='default', body=client.V1DeleteOptions())\n        elif args.resource_type == 'pod':\n            api.delete_namespaced_pod(name=config_data['metadata']['name'], namespace='default', body=client.V1DeleteOptions())\n        print(f\"{kind} deleted successfully.\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n\n1. **Argument Parsing**: We use `argparse` to handle command-line arguments for action, resource type, and configuration file path.\n2. **Kubernetes Configuration**: We load the Kubernetes configuration using `kubernetes.config.load_kube_config()`, which reads the configuration from the default location (`~/.kube/config`).\n3. **Resource Management**:\n   - **Create**: Uses the appropriate API method to create the resource based on the provided configuration.\n   - **Update**: For deployments and services, uses the `replace` method to update the resource. Note that pods are immutable and cannot be updated.\n   - **Delete**: Uses the `delete` method to remove the resource.\n\n### Usage\n\nTo use this script, save it to a file, for example, `manage_k8s_resources.py`, and run it from the command line:\n\n```bash\npython manage_k8s_resources.py create deployment deployment.yaml\npython manage_k8s_resources.py update service service.yaml\npython manage_k8s_resources.py delete pod pod.yaml\n```\n\nMake sure to replace `deployment.yaml`, `service.yaml`, and `pod.yaml` with the actual paths to your configuration files.\n\nThis script provides a basic framework for managing Kubernetes resources via Python. Depending on your needs, you can extend it to support more resource types and additional features."
    }
]