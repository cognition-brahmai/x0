[
    {
        "role": "user",
        "content": "Create a PHP script that connects to a SQLite database and performs basic CRUD operations on a table storing employee records (employee ID, first name, last name, department, and salary). Include validation checks for the input data and display the results in an HTML table."
    },
    {
        "role": "assistant",
        "content": "As an AI language model, I can't create or execute code, but I can certainly help you understand how to write a PHP script that connects to a SQLite database and performs CRUD operations on a table storing employee records. I'll guide you through the process step by step.\n\n### Step 1: Setting Up the SQLite Database\n\nFirst, you need to set up your SQLite database and create a table to store employee records. You can do this using PHP's SQLite3 class.\n\n```php\n<?php\n// database.php\n\n$db = new SQLite3('employees.db');\n\n// Create table if it doesn't exist\n$table = <<<EOF\nCREATE TABLE IF NOT EXISTS employees (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    department TEXT NOT NULL,\n    salary REAL NOT NULL\n);\nEOF;\n\n$db->exec($table);\n?>\n```\n\n### Step 2: Connecting to the Database\n\nIn your main script, include the database connection file.\n\n```php\n<?php\ninclude 'database.php';\n?>\n```\n\n### Step 3: CRUD Operations\n\n#### Create (Insert)\n\nTo insert a new employee record, you need to validate the input data and then execute an INSERT query.\n\n```php\n<?php\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $first_name = htmlspecialchars($_POST['first_name']);\n    $last_name = htmlspecialchars($_POST['last_name']);\n    $department = htmlspecialchars($_POST['department']);\n    $salary = floatval($_POST['salary']);\n\n    if (!empty($first_name) && !empty($last_name) && !empty($department) && $salary > 0) {\n        $stmt = $db->prepare('INSERT INTO employees (first_name, last_name, department, salary) VALUES (?, ?, ?, ?)');\n        $stmt->bindValue(1, $first_name);\n        $stmt->bindValue(2, $last_name);\n        $stmt->bindValue(3, $department);\n        $stmt->bindValue(4, $salary);\n        $stmt->execute();\n        echo \"Employee added successfully.\";\n    } else {\n        echo \"All fields are required and salary must be greater than zero.\";\n    }\n}\n?>\n```\n\n#### Read (Select)\n\nTo display all employee records, execute a SELECT query and render the results in an HTML table.\n\n```php\n<?php\n$query = $db->query('SELECT * FROM employees');\n$employees = $query->fetchAll(SQLITE3_ASSOC);\n?>\n\n<table border=\"1\">\n    <tr>\n        <th>ID</th>\n        <th>First Name</th>\n        <th>Last Name</th>\n        <th>Department</th>\n        <th>Salary</th>\n        <th>Action</th>\n    </tr>\n    <?php foreach ($employees as $employee): ?>\n    <tr>\n        <td><?php echo $employee['id']; ?></td>\n        <td><?php echo $employee['first_name']; ?></td>\n        <td><?php echo $employee['last_name']; ?></td>\n        <td><?php echo $employee['department']; ?></td>\n        <td><?php echo $employee['salary']; ?></td>\n        <td>\n            <a href=\"edit.php?id=<?php echo $employee['id']; ?>\">Edit</a> |\n            <a href=\"delete.php?id=<?php echo $employee['id']; ?>\">Delete</a>\n        </td>\n    </tr>\n    <?php endforeach; ?>\n</table>\n```\n\n#### Update (Edit)\n\nCreate an `edit.php` script to handle updating employee records.\n\n```php\n<?php\ninclude 'database.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'POST') {\n    $id = intval($_POST['id']);\n    $first_name = htmlspecialchars($_POST['first_name']);\n    $last_name = htmlspecialchars($_POST['last_name']);\n    $department = htmlspecialchars($_POST['department']);\n    $salary = floatval($_POST['salary']);\n\n    if (!empty($first_name) && !empty($last_name) && !empty($department) && $salary > 0) {\n        $stmt = $db->prepare('UPDATE employees SET first_name=?, last_name=?, department=?, salary=? WHERE id=?');\n        $stmt->bindValue(1, $first_name);\n        $stmt->bindValue(2, $last_name);\n        $stmt->bindValue(3, $department);\n        $stmt->bindValue(4, $salary);\n        $stmt->bindValue(5, $id);\n        $stmt->execute();\n        echo \"Employee updated successfully.\";\n    } else {\n        echo \"All fields are required and salary must be greater than zero.\";\n    }\n} else {\n    $id = intval($_GET['id']);\n    $stmt = $db->prepare('SELECT * FROM employees WHERE id=?');\n    $stmt->bindValue(1, $id);\n    $employee = $stmt->execute()->fetchArray(SQLITE3_ASSOC);\n    if ($employee) {\n        // Display edit form with pre-filled data\n        ?>\n        <form method=\"post\" action=\"\">\n            <input type=\"hidden\" name=\"id\" value=\"<?php echo $employee['id']; ?>\">\n            First Name: <input type=\"text\" name=\"first_name\" value=\"<?php echo $employee['first_name']; ?>\"><br>\n            Last Name: <input type=\"text\" name=\"last_name\" value=\"<?php echo $employee['last_name']; ?>\"><br>\n            Department: <input type=\"text\" name=\"department\" value=\"<?php echo $employee['department']; ?>\"><br>\n            Salary: <input type=\"number\" step=\"0.01\" name=\"salary\" value=\"<?php echo $employee['salary']; ?>\"><br>\n            <input type=\"submit\" value=\"Update\">\n        </form>\n        <?php\n    } else {\n        echo \"Employee not found.\";\n    }\n}\n?>\n```\n\n#### Delete\n\nCreate a `delete.php` script to handle deleting employee records.\n\n```php\n<?php\ninclude 'database.php';\n\nif ($_SERVER['REQUEST_METHOD'] === 'GET') {\n    $id = intval($_GET['id']);\n    $stmt = $db->prepare('DELETE FROM employees WHERE id=?');\n    $stmt->bindValue(1, $id);\n    $stmt->execute();\n    echo \"Employee deleted successfully.\";\n}\n?>\n```\n\n### Step 4: Creating the HTML Form\n\nCreate an HTML form to add new employees.\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Employee Management</title>\n</head>\n<body>\n    <h1>Add Employee</h1>\n    <form method=\"post\" action=\"\">\n        First Name: <input type=\"text\" name=\"first_name\"><br>\n        Last Name: <input type=\"text\" name=\"last_name\"><br>\n        Department: <input type=\"text\" name=\"department\"><br>\n        Salary: <input type=\"number\" step=\"0.01\" name=\"salary\"><br>\n        <input type=\"submit\" value=\"Add Employee\">\n    </form>\n\n    <?php include 'read.php'; ?>\n</body>\n</html>\n```\n\n### Summary\n\nThis guide provides a basic structure for performing CRUD operations on an SQLite database using PHP. Make sure to handle errors and validate inputs appropriately in a production environment. Additionally, consider using prepared statements to prevent SQL injection attacks, which is already partially implemented in the above code."
    }
]