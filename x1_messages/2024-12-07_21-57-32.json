[
    {
        "role": "user",
        "content": "Write a C++ program to implement a stack data structure using linked lists. The program should support push, pop, and peek operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple C++ program that implements a stack data structure using linked lists. This program includes the basic operations: push (to add an element to the top of the stack), pop (to remove the top element), and peek (to view the top element without removing it).\n\n```cpp\n#include <iostream>\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    Node(int value) : data(value), next(nullptr) {}\n};\n\nclass Stack {\nprivate:\n    Node* top;\n\npublic:\n    Stack() : top(nullptr) {}\n\n    // Push operation\n    void push(int value) {\n        Node* newNode = new Node(value);\n        if (top == nullptr) {\n            top = newNode;\n        } else {\n            newNode->next = top;\n            top = newNode;\n        }\n        std::cout << \"Pushed \" << value << \" to the stack.\" << std::endl;\n    }\n\n    // Pop operation\n    void pop() {\n        if (top == nullptr) {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n            return;\n        }\n        Node* temp = top;\n        int poppedValue = temp->data;\n        top = top->next;\n        delete temp;\n        std::cout << \"Popped \" << poppedValue << \" from the stack.\" << std::endl;\n    }\n\n    // Peek operation\n    void peek() {\n        if (top == nullptr) {\n            std::cout << \"Stack is empty. Nothing to peek.\" << std::endl;\n            return;\n        }\n        std::cout << \"Top element is: \" << top->data << std::endl;\n    }\n\n    // Destructor to free the memory\n    ~Stack() {\n        while (top != nullptr) {\n            Node* temp = top;\n            top = top->next;\n            delete temp;\n        }\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    stack.peek();\n\n    stack.pop();\n    stack.peek();\n\n    stack.pop();\n    stack.pop();\n    stack.pop();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Node Class**: This class represents each element in the stack. Each node contains an integer data and a pointer to the next node.\n\n2. **Stack Class**: This class manages the stack operations.\n   - **push(int value)**: Adds a new node with the given value to the top of the stack.\n   - **pop()**: Removes the top node from the stack and prints its value.\n   - **peek()**: Prints the value of the top node without removing it.\n   - **~Stack()**: The destructor ensures that all nodes are deleted to prevent memory leaks.\n\n3. **main() Function**: Demonstrates the usage of the Stack class by pushing some elements, peeking at the top element, popping elements, and handling an empty stack scenario.\n\nThis program should give you a good starting point for implementing a stack using linked lists in C++."
    }
]