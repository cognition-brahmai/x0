[
    {
        "role": "user",
        "content": "Write a C program that creates a linked list and includes functions to insert elements, delete elements, search for a specific element, and print the entire list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C program that demonstrates how to create a singly linked list with functions to insert elements, delete elements, search for a specific element, and print the entire list.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the structure for a node in the linked list\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n// Function prototypes\nstruct Node* createNode(int data);\nvoid insertAtEnd(struct Node** head, int data);\nvoid deleteNode(struct Node** head, int key);\nint searchElement(struct Node* head, int key);\nvoid printList(struct Node* head);\nvoid freeList(struct Node* head);\n\nint main() {\n    struct Node* head = NULL;\n\n    // Insert elements into the list\n    insertAtEnd(&head, 10);\n    insertAtEnd(&head, 20);\n    insertAtEnd(&head, 30);\n    insertAtEnd(&head, 40);\n\n    // Print the list\n    printf(\"Linked list after insertion: \");\n    printList(head);\n\n    // Search for an element\n    int key = 30;\n    if (searchElement(head, key)) {\n        printf(\"%d found in the list.\\n\", key);\n    } else {\n        printf(\"%d not found in the list.\\n\", key);\n    }\n\n    // Delete an element\n    key = 20;\n    deleteNode(&head, key);\n    printf(\"Linked list after deleting %d: \", key);\n    printList(head);\n\n    // Free the list\n    freeList(head);\n\n    return 0;\n}\n\n// Create a new node with the given data\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    if (!newNode) {\n        printf(\"Memory allocation failed.\\n\");\n        exit(1);\n    }\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\n// Insert a new node at the end of the list\nvoid insertAtEnd(struct Node** head, int data) {\n    struct Node* newNode = createNode(data);\n    if (*head == NULL) {\n        *head = newNode;\n        return;\n    }\n    struct Node* current = *head;\n    while (current->next != NULL) {\n        current = current->next;\n    }\n    current->next = newNode;\n}\n\n// Delete a node with the given key\nvoid deleteNode(struct Node** head, int key) {\n    struct Node* temp = *head;\n    struct Node* prev = NULL;\n\n    if (temp != NULL && temp->data == key) {\n        *head = temp->next;\n        free(temp);\n        return;\n    }\n\n    while (temp != NULL && temp->data != key) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == NULL) {\n        printf(\"%d not found in the list.\\n\", key);\n        return;\n    }\n\n    prev->next = temp->next;\n    free(temp);\n}\n\n// Search for a element in the list\nint searchElement(struct Node* head, int key) {\n    struct Node* current = head;\n    while (current != NULL) {\n        if (current->data == key) {\n            return 1;\n        }\n        current = current->next;\n    }\n    return 0;\n}\n\n// Print the list\nvoid printList(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\n// Free the list to prevent memory leaks\nvoid freeList(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        struct Node* temp = current;\n        current = current->next;\n        free(temp);\n    }\n}\n```\n\n### Explanation:\n\n1. **Structure Definition:**\n   - `struct Node` defines the structure of a node in the linked list, containing an integer data field and a pointer to the next node.\n\n2. **Function Definitions:**\n   - `createNode(int data)`: Allocates memory for a new node and initializes its data and next pointer.\n   - `insertAtEnd(struct Node** head, int data)`: Inserts a new node with the given data at the end of the list.\n   - `deleteNode(struct Node** head, int key)`: Deletes the node that contains the specified key.\n   - `searchElement(struct Node* head, int key)`: Searches for a node with the given key and returns 1 if found, else 0.\n   - `printList(struct Node* head)`: Prints all elements of the list.\n   - `freeList(struct Node* head)`: Frees the memory allocated for each node to prevent memory leaks.\n\n3. **Main Function:**\n   - Initializes an empty list.\n   - Inserts elements into the list.\n   - Prints the list.\n   - Searches for a specific element.\n   - Deletes a specific element.\n   - Prints the list again after deletion.\n   - Frees the list.\n\nThis program provides a basic implementation of a singly linked list with essential operations."
    }
]