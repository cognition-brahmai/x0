[
    {
        "role": "user",
        "content": "Write a Golang REST API that interacts with a Memcached server to store and retrieve key-value pairs. The API should support basic CRUD operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a simple REST API in Go that interacts with a Memcached server for storing and retrieving key-value pairs. We'll cover the basic CRUD operations: Create, Read, Update, and Delete.\n\n### Prerequisites\n\n1. **Go installed** on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n2. **Memcached** installed and running. You can install it using your package manager or download it from [https://memcached.org/](https://memcached.org/).\n\n### Project Structure\n\nCreate a new directory for your project and set up the following structure:\n\n```\nmemcached-api/\n\u2502\n\u251c\u2500\u2500 main.go\n\u251c\u2500\u2500 handlers/\n\u2502   \u2514\u2500\u2500 memcached_handler.go\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 memcached_model.go\n\u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 memcached_util.go\n```\n\n### Step 1: Setting Up Memcached Utility\n\nFirst, create a utility package to handle connections and operations with Memcached.\n\n**utils/memcached_util.go:**\n\n```go\npackage utils\n\nimport (\n\t\"fmt\"\n\t\"github.com/bradfitz/gomemcache/memcache\"\n\t\"log\"\n)\n\nvar MemcachedClient *memcache.Client\n\nfunc InitMemcached() {\n\tMemcachedClient = memcache.New(\"localhost:11211\")\n\t// Test the connection\n\titem, err := MemcachedClient.Get(\"test\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to Memcached: %v\", err)\n\t}\n\tfmt.Printf(\"Connected to Memcached: %v\\n\", item)\n}\n```\n\n### Step 2: Defining Models\n\nCreate a simple model to represent the key-value pairs.\n\n**models/memcached_model.go:**\n\n```go\npackage models\n\ntype KVPair struct {\n\tKey   string `json:\"key\"`\n\tValue string `json:\"value\"`\n}\n```\n\n### Step 3: Implementing Handlers\n\nNext, create handlers for each CRUD operation.\n\n**handlers/memcached_handler.go:**\n\n```go\npackage handlers\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/bradfitz/gomemcache/memcache\"\n\t\"github.com/yoursite/memcached-api/models\"\n\t\"github.com/yoursite/memcached-api/utils\"\n)\n\n// Create a new key-value pair\nfunc CreateKV(c echo.Context) error {\n\tvar kv models.KVPair\n\tif err := c.Bind(&kv); err != nil {\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid request payload\"})\n\t}\n\n\titem := &memcache.Item{\n\t\tKey:        kv.Key,\n\t\tValue:      []byte(kv.Value),\n\t\tExpiration: 0, // 0 means no expiration\n\t}\n\n\terr := utils.MemcachedClient.Set(item)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to set key-value pair\"})\n\t}\n\n\treturn c.JSON(http.StatusCreated, kv)\n}\n\n// Read a key-value pair by key\nfunc ReadKV(c echo.Context) error {\n\tkey := c.Param(\"key\")\n\n\titem, err := utils.MemcachedClient.Get(key)\n\tif err == memcache.ErrCacheMiss {\n\t\treturn c.JSON(http.StatusNotFound, map[string]string{\"error\": \"Key not found\"})\n\t} else if err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to get key-value pair\"})\n\t}\n\n\treturn c.JSON(http.StatusOK, models.KVPair{\n\t\tKey:   key,\n\t\tValue: string(item.Value),\n\t})\n}\n\n// Update a key-value pair\nfunc UpdateKV(c echo.Context) error {\n\tvar kv models.KVPair\n\tif err := c.Bind(&kv); err != nil {\n\t\treturn c.JSON(http.StatusBadRequest, map[string]string{\"error\": \"Invalid request payload\"})\n\t}\n\n\titem := &memcache.Item{\n\t\tKey:        kv.Key,\n\t\tValue:      []byte(kv.Value),\n\t\tExpiration: 0, // 0 means no expiration\n\t}\n\n\terr := utils.MemcachedClient.Set(item)\n\tif err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to update key-value pair\"})\n\t}\n\n\treturn c.JSON(http.StatusOK, kv)\n}\n\n// Delete a key-value pair by key\nfunc DeleteKV(c echo.Context) error {\n\tkey := c.Param(\"key\")\n\n\terr := utils.MemcachedClient.Delete(key)\n\tif err == memcache.ErrCacheMiss {\n\t\treturn c.JSON(http.StatusNotFound, map[string]string{\"error\": \"Key not found\"})\n\t} else if err != nil {\n\t\treturn c.JSON(http.StatusInternalServerError, map[string]string{\"error\": \"Failed to delete key-value pair\"})\n\t}\n\n\treturn c.JSON(http.StatusOK, map[string]string{\"message\": \"Key deleted successfully\"})\n}\n```\n\n### Step 4: Setting Up the Main Server\n\nFinally, set up the Echo framework to handle routes and start the server.\n\n**main.go:**\n\n```go\npackage main\n\nimport (\n\t\"github.com/labstack/echo/v4\"\n\t\"github.com/yoursite/memcached-api/handlers\"\n\t\"github.com/yoursite/memcached-api/utils\"\n)\n\nfunc main() {\n\te := echo.New()\n\n\t// Initialize Memcached connection\n\tutils.InitMemcached()\n\n\t// Routes\n\te.POST(\"/kv\", handlers.CreateKV)\n\te.GET(\"/kv/:key\", handlers.ReadKV)\n\te.PUT(\"/kv\", handlers.UpdateKV)\n\te.DELETE(\"/kv/:key\", handlers.DeleteKV)\n\n\t// Start the server\n\te.Logger.Fatal(e.Start(\":8080\"))\n}\n```\n\n### Running the Application\n\n1. Make sure Memcached is running on `localhost:11211`.\n2. Navigate to the project directory and run:\n\n```sh\ngo mod init github.com/yoursite/memcached-api\ngo get -u github.com/labstack/echo/v4\ngo get -u github.com/bradfitz/gomemcache/memcache\ngo run main.go\n```\n\n### Testing the API\n\nYou can use tools like `curl` or Postman to test the API.\n\n- **Create a key-value pair:**\n\n```sh\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"key\":\"testkey\",\"value\":\"testvalue\"}' http://localhost:8080/kv\n```\n\n- **Read a key-value pair:**\n\n```sh\ncurl http://localhost:8080/kv/testkey\n```\n\n- **Update a key-value pair:**\n\n```sh\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"key\":\"testkey\",\"value\":\"newvalue\"}' http://localhost:8080/kv\n```\n\n- **Delete a key-value pair:**\n\n```sh\ncurl -X DELETE http://localhost:8080/kv/testkey\n```\n\nThat's it! You've created a simple REST API in Go that interacts with Memcached for basic CRUD operations."
    }
]