[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with TensorFlow to train a neural network on the MNIST dataset. The script should include options to configure the number of hidden layers, neurons per layer, and activation functions.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that uses TensorFlow to train a neural network on the MNIST dataset. The script will allow you to configure the number of hidden layers, the number of neurons in each layer, and the activation functions. Sounds good?\n\nFirst, make sure you have TensorFlow installed. You can install it using pip if you haven't already:\n\n```bash\npip install tensorflow\n```\n\nOkay, let's start by importing the necessary modules.\n\n## Final Solution\nTo create a Python script that interacts with TensorFlow to train a neural network on the MNIST dataset with configurable options for the number of hidden layers, neurons per layer, and activation functions, follow these steps:\n\n### Approach\n\n1. **Import Necessary Libraries:** Import TensorFlow and other required modules.\n2. **Load and Preprocess Data:** Load the MNIST dataset and normalize the images.\n3. **Build the Model:** Create a function to build a neural network with configurable hidden layers, neurons, and activation functions.\n4. **Compile and Train the Model:** Compile the model with specified optimizer, loss function, and metrics. Then train the model on the MNIST dataset.\n5. **Evaluate the Model:** Evaluate the model's performance on the test dataset.\n\n### Solution Code\n\n```python\nimport tensorflow as tf\nfrom tensorflow.keras import layers, models\n\ndef build_model(num_hidden_layers, num_neurons, activation, input_shape, num_classes):\n    model = models.Sequential()\n    # Input layer\n    model.add(layers.Flatten(input_shape=input_shape))\n    # Hidden layers\n    for _ in range(num_hidden_layers):\n        model.add(layers.Dense(num_neurons, activation=activation))\n    # Output layer\n    model.add(layers.Dense(num_classes, activation='softmax'))\n    return model\n\ndef main():\n    # Configuration\n    num_hidden_layers = 2\n    num_neurons = 128\n    activation = 'relu'\n    optimizer = 'adam'\n    epochs = 5\n    batch_size = 128\n\n    # Load MNIST dataset\n    mnist = tf.keras.datasets.mnist\n    (x_train, y_train), (x_test, y_test) = mnist.load_data()\n    x_train, x_test = x_train / 255.0, x_test / 255.0  # Normalize to [0,1]\n\n    # Build the model\n    input_shape = x_train.shape[1:]\n    num_classes = 10\n    model = build_model(num_hidden_layers, num_neurons, activation, input_shape, num_classes)\n\n    # Compile the model\n    model.compile(optimizer=optimizer,\n                  loss='sparse_categorical_crossentropy',\n                  metrics=['accuracy'])\n\n    # Train the model\n    model.fit(x_train, y_train, epochs=epochs, batch_size=batch_size, validation_split=0.1)\n\n    # Evaluate the model\n    test_loss, test_acc = model.evaluate(x_test, y_test, verbose=2)\n    print(f\"\\nTest accuracy: {test_acc}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation\n\n1. **Importing Libraries:** Import TensorFlow and necessary submodules for building and training models.\n2. **Building the Model:** The `build_model` function creates a sequential model with a specified number of hidden layers, each containing a specified number of neurons and using the specified activation function. The output layer uses softmax activation for classification.\n3. **Loading and Preprocessing Data:** Load the MNIST dataset and normalize the image data to the range [0,1].\n4. **Compiling and Training the Model:** Compile the model with the Adam optimizer and sparse categorical crossentropy loss. Train the model on the training data with specified epochs and batch size, using 10% of the training data for validation.\n5. **Evaluating the Model:** Evaluate the trained model on the test dataset and print the test accuracy.\n\nThis script provides a flexible way to configure and train a neural network on the MNIST dataset using TensorFlow."
    }
]