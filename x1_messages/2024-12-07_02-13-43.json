[
    {
        "role": "user",
        "content": "Create a Java program that connects to a Cassandra database, creates a table with columns for name, age, and email, and inserts sample data into the table. The program should also include functionality to retrieve all records from the table and display them in a formatted manner.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Java program that connects to a Cassandra database, creates a table, inserts sample data, and retrieves and displays all records from the table. Make sure you have the DataStax Java Driver for Apache Cassandra installed in your project.\n\nFirst, add the DataStax Java Driver dependency to your project. If you're using Maven, include this in your `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>com.datastax.oss</groupId>\n    <artifactId>java-driver-core</artifactId>\n    <version>4.13.0</version>\n</dependency>\n```\n\nNow, let's write the Java code step by step.\n\n1. **Connecting to the Cassandra database:**\n\n   You need to create a session to interact with Cassandra.\n\n   ```java\n   import com.datastax.oss.driver.api.core.CqlSession;\n   import com.datastax.oss.driver.api.core.cql.ResultSet;\n   import com.datastax.oss.driver.api.core.cql.Row;\n\n   public class CassandraExample {\n       public static void main(String[] args) {\n           // Connect to the Cassandra cluster\n           try (CqlSession session = CqlSession.builder()\n                   .addContactPoint(\"127.0.0.1\")\n                   .withKeySpace(\"your_keyspace\")\n                   .build()) {\n               // Your code here\n           }\n       }\n   }\n   ```\n\n   Replace `\"127.0.0.1\"` with your Cassandra cluster's contact point and `\"your_keyspace\"` with your keyspace name.\n\n2. **Creating a table:**\n\n   Define a CQL statement to create a table with columns for name, age, and email.\n\n   ```java\n   String createTableCql = \"CREATE TABLE IF NOT EXISTS users (\" +\n           \"name text PRIMARY KEY,\" +\n           \"age int,\" +\n           \"email text\" +\n           \")\";\n   session.execute(createTableCql);\n   ```\n\n3. **Inserting sample data:**\n\n   Prepare and execute CQL statements to insert sample data into the table.\n\n   ```java\n   String insertCql = \"INSERT INTO users (name, age, email) VALUES (?, ?, ?)\";\n   PreparedStatement insertStatement = session.prepare(insertCql);\n\n   BoundStatement boundStatement1 = insertStatement.bind(\"John Doe\", 30, \"john.doe@example.com\");\n   BoundStatement boundStatement2 = insertStatement.bind(\"Jane Smith\", 25, \"jane.smith@example.com\");\n\n   session.execute(boundStatement1);\n   session.execute(boundStatement2);\n   ```\n\n4. **Retrieving and displaying all records:**\n\n   Execute a SELECT statement to retrieve all records from the table and display them in a formatted manner.\n\n   ```java\n   String selectCql = \"SELECT name, age, email FROM users\";\n   ResultSet resultSet = session.execute(selectCql);\n\n   for (Row row : resultSet) {\n       String name = row.getString(\"name\");\n       int age = row.getInt(\"age\");\n       String email = row.getString(\"email\");\n       System.out.printf(\"Name: %s, Age: %d, Email: %s%n\", name, age, email);\n   }\n   ```\n\nPutting it all together, your complete Java program should look like this:\n\n```java\nimport com.datastax.oss.driver.api.core.CqlSession;\nimport com.datastax.oss.driver.api.core.cql.ResultSet;\nimport com.datastax.oss.driver.api.core.cql.Row;\nimport com.datastax.oss.driver.api.core.cql.Statement;\n\npublic class CassandraExample {\n    public static void main(String[] args) {\n        // Connect to the Cassandra cluster\n        try (CqlSession session = CqlSession.builder()\n                .addContactPoint(\"127.0.0.1\")\n                .withKeySpace(\"your_keyspace\")\n                .build()) {\n\n            // Create the table\n            String createTableCql = \"CREATE TABLE IF NOT EXISTS users (\" +\n                    \"name text PRIMARY KEY,\" +\n                    \"age int,\" +\n                    \"email text\" +\n                    \")\";\n            session.execute(createTableCql);\n\n            // Insert sample data\n            String insertCql = \"INSERT INTO users (name, age, email) VALUES (?, ?, ?)\";\n            PreparedStatement insertStatement = session.prepare(insertCql);\n\n            BoundStatement boundStatement1 = insertStatement.bind(\"John Doe\", 30, \"john.doe@example.com\");\n            BoundStatement boundStatement2 = insertStatement.bind(\"Jane Smith\", 25, \"jane.smith@example.com\");\n\n            session.execute(boundStatement1);\n            session.execute(boundStatement2);\n\n            // Retrieve and display all records\n            String selectCql = \"SELECT name, age, email FROM users\";\n            ResultSet resultSet = session.execute(selectCql);\n\n            for (Row row : resultSet) {\n                String name = row.getString(\"name\");\n                int age = row.getInt(\"age\");\n                String email = row.getString(\"email\");\n                System.out.printf(\"Name: %s, Age: %d, Email: %s%n\", name, age, email);\n            }\n        }\n    }\n}\n```\n\nMake sure to replace `\"127.0.0.1\"` and `\"your_keyspace\"` with your actual Cassandra cluster contact point and keyspace name.\n\nThis program connects to your Cassandra database, creates a table named `users` with columns for name, age, and email, inserts two sample records, and then retrieves and prints all records from the table.\n"
    }
]