[
    {
        "role": "user",
        "content": "Create a C++ program that implements a stack data structure using dynamic arrays. The stack should support push, pop, and peek operations, as well as checking if the stack is empty.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's create a C++ program that implements a stack data structure using dynamic arrays. The stack will support the following operations:\n\n1. `push`: Add an element to the top of the stack.\n2. `pop`: Remove the element from the top of the stack.\n3. `peek`: View the element at the top of the stack without removing it.\n4. `isEmpty`: Check if the stack is empty.\n\nWe'll use dynamic arrays to handle the stack, which means the array will resize itself as needed when elements are pushed or popped.\n\n## Approach\n\n1. **Dynamic Array Handling**: We'll use a `std::vector` to manage the stack elements dynamically. This way, we don't have to worry about resizing the array manually.\n2. **Stack Operations**:\n   - `push`: Add an element to the end of the vector.\n   - `pop`: Remove the last element from the vector.\n   - `peek`: Return the last element without removing it.\n   - `isEmpty`: Check if the vector is empty.\n\n## Solution Code\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Stack {\nprivate:\n    std::vector<int> elements;\n\npublic:\n    // Push an element onto the stack\n    void push(int value) {\n        elements.push_back(value);\n    }\n\n    // Remove the element from the top of the stack and return it\n    int pop() {\n        if (isEmpty()) {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n            return -1; // Assuming -1 is an invalid value\n        }\n        int value = elements.back();\n        elements.pop_back();\n        return value;\n    }\n\n    // Return the element at the top of the stack without removing it\n    int peek() {\n        if (isEmpty()) {\n            std::cout << \"Stack is empty. Cannot peek.\" << std::endl;\n            return -1; // Assuming -1 is an invalid value\n        }\n        return elements.back();\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() {\n        return elements.empty();\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    std::cout << \"Top element is: \" << stack.peek() << std::endl; // Output: 30\n\n    stack.pop();\n\n    std::cout << \"Top element after pop is: \" << stack.peek() << std::endl; // Output: 20\n\n    std::cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Output: No\n\n    stack.pop();\n    stack.pop();\n\n    std::cout << \"Is stack empty after popping all elements? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Output: Yes\n\n    return 0;\n}\n```\n\n## Explanation\n\n1. **Stack Class**:\n   - **Private Member**: `std::vector<int> elements;` to store the stack elements.\n   - **Public Methods**:\n     - `push(int value)`: Adds the value to the end of the vector.\n     - `pop()`: Removes the last element from the vector and returns it. If the stack is empty, it prints an error message and returns -1.\n     - `peek()`: Returns the last element without removing it. If the stack is empty, it prints an error message and returns -1.\n     - `isEmpty()`: Returns true if the vector is empty, otherwise false.\n\n2. **Main Function**:\n   - Demonstrates pushing elements onto the stack.\n   - Uses `peek()` to view the top element.\n   - Pops elements and checks the top element again.\n   - Checks if the stack is empty after popping all elements.\n\nThis implementation ensures that the stack operations are efficient and the dynamic nature of the vector handles the resizing automatically."
    }
]