[
    {
        "role": "user",
        "content": "Develop a Python FastAPI server that connects to a MongoDB database. The server should have endpoints to add, update, delete, and retrieve documents from a \"users\" collection. Each user document should contain fields for name, email, and age."
    },
    {
        "role": "assistant",
        "content": "To create a Python FastAPI server that connects to a MongoDB database and performs CRUD operations on a \"users\" collection, you'll need to follow these steps:\n\n1. **Set up your environment:**\n   - Install necessary packages: `fastapi`, `uvicorn`, `motor`.\n\n2. **Configure MongoDB connection:**\n   - Use Motor, an asynchronous driver for MongoDB.\n\n3. **Define the User model:**\n   - Create Pydantic models for request and response data validation.\n\n4. **Implement API endpoints:**\n   - Create routes for adding, updating, deleting, and retrieving users.\n\n5. **Run the server:**\n   - Use Uvicorn to run the FastAPI application.\n\n### Step-by-Step Guide\n\n#### 1. Set up your environment\n\nFirst, make sure you have Python installed on your system. Then, install the required packages:\n\n```bash\npip install fastapi uvicorn motor\n```\n\n#### 2. Configure MongoDB connection\n\nYou need to set up a connection to your MongoDB database. For this example, we'll assume you're using a local MongoDB instance.\n\n#### 3. Define the User model\n\nWe'll use Pydantic for data validation.\n\n#### 4. Implement API endpoints\n\nCreate the necessary endpoints for CRUD operations.\n\n#### 5. Run the server\n\nUse Uvicorn to run your FastAPI application.\n\n### Complete Code Example\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List\nimport motor.motor_asyncio\n\napp = FastAPI()\n\n# MongoDB configuration\nMONGODB_URL = \"mongodb://localhost:27017\"\nDATABASE_NAME = \"mydatabase\"\nCOLLECTION_NAME = \"users\"\n\nclient = motor.motor_asyncio.AsyncIOMotorClient(MONGODB_URL)\ndatabase = client[DATABASE_NAME]\ncollection = database[COLLECTION_NAME]\n\n# Pydantic model\nclass User(BaseModel):\n    name: str\n    email: str\n    age: int\n\n# CRUD operations\n\n@app.post(\"/users/\", response_model=User)\nasync def create_user(user: User):\n    user_dict = user.dict()\n    result = await collection.insert_one(user_dict)\n    user_dict[\"id\"] = str(result.inserted_id)\n    return user_dict\n\n@app.get(\"/users/{user_id}\", response_model=User)\nasync def read_user(user_id: str):\n    user = await collection.find_one({\"_id\": user_id})\n    if user:\n        user[\"id\"] = str(user[\"_id\"])\n        return user\n    else:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n@app.get(\"/users/\", response_model=List[User])\nasync def read_users():\n    users = []\n    async for user in collection.find():\n        user[\"id\"] = str(user[\"_id\"])\n        users.append(user)\n    return users\n\n@app.put(\"/users/{user_id}\", response_model=User)\nasync def update_user(user_id: str, user: User):\n    user_dict = user.dict()\n    result = await collection.update_one({\"_id\": user_id}, {\"$set\": user_dict})\n    if result.matched_count:\n        user_dict[\"id\"] = user_id\n        return user_dict\n    else:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n@app.delete(\"/users/{user_id}\")\nasync def delete_user(user_id: str):\n    result = await collection.delete_one({\"_id\": user_id})\n    if result.deleted_count:\n        return {\"detail\": \"User deleted\"}\n    else:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n\n# Run the server\n# uvicorn main:app --reload\n```\n\n### Explanation\n\n1. **Environment Setup:**\n   - Installed required packages: FastAPI, Uvicorn, Motor.\n\n2. **MongoDB Configuration:**\n   - Connected to a local MongoDB instance.\n   - Specified the database and collection names.\n\n3. **User Model:**\n   - Defined a Pydantic model for user data validation.\n\n4. **API Endpoints:**\n   - **POST /users/**: Creates a new user.\n   - **GET /users/{user_id}**: Retrieves a user by ID.\n   - **GET /users/**: Retrieves all users.\n   - **PUT /users/{user_id}**: Updates a user by ID.\n   - **DELETE /users/{user_id}**: Deletes a user by ID.\n\n5. **Running the Server:**\n   - Use Uvicorn to run the FastAPI application with `uvicorn main:app --reload`.\n\nThis setup provides a basic FastAPI server connected to MongoDB, performing CRUD operations on a \"users\" collection."
    }
]