[
    {
        "role": "user",
        "content": "Design a simple RESTful API using Node.js and Express that supports CRUD operations for managing a collection of books. Each book should have a title, author, publication year, and ISBN number. Use JSON for data exchange between the client and server."
    },
    {
        "role": "assistant",
        "content": "To design a simple RESTful API using Node.js and Express for managing a collection of books with CRUD operations, follow these steps:\n\n1. **Set up the project:**\n   - Initialize a new Node.js project.\n   - Install necessary dependencies: Express, body-parser, and optionally, cors for handling cross-origin requests.\n\n2. **Define the book model:**\n   - Each book will have properties: title, author, publication year, and ISBN number.\n\n3. **Implement CRUD operations:**\n   - Create: Add a new book to the collection.\n   - Read: Retrieve all books or a specific book by ISBN.\n   - Update: Update the details of an existing book.\n   - Delete: Remove a book from the collection.\n\n4. **Set up routes:**\n   - Define endpoints for each CRUD operation.\n\n5. **Handle data storage:**\n   - For simplicity, use an in-memory array to store books.\n\n6. **Implement request validation:**\n   - Ensure that required fields are present in requests.\n\n7. **Handle error responses:**\n   - Provide meaningful error messages for invalid requests or operations.\n\n### Step-by-Step Implementation\n\n#### 1. Set up the project\n\nFirst, create a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express body-parser cors\n```\n\n#### 2. Define the book model\n\nEach book will have the following properties:\n\n- title (string)\n- author (string)\n- publicationYear (number)\n- isbn (string, unique)\n\n#### 3. Implement CRUD operations\n\nWe'll use an in-memory array to store books for simplicity.\n\n#### 4. Set up routes\n\nDefine routes for CRUD operations:\n\n- `GET /books`: Retrieve all books.\n- `GET /books/:isbn`: Retrieve a book by ISBN.\n- `POST /books`: Add a new book.\n- `PUT /books/:isbn`: Update an existing book.\n- `DELETE /books/:isbn`: Delete a book.\n\n#### 5. Handle data storage\n\nUse an array to store books in memory.\n\n#### 6. Implement request validation\n\nEnsure that required fields are present in request bodies.\n\n#### 7. Handle error responses\n\nProvide appropriate HTTP status codes and error messages.\n\n### Complete Code Example\n\nCreate a file named `app.js` and add the following code:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst cors = require('cors');\n\nconst app = express();\napp.use(bodyParser.json());\napp.use(cors());\n\n// In-memory array to store books\nlet books = [];\n\n// GET /books - Retrieve all books\napp.get('/books', (req, res) => {\n    res.json(books);\n});\n\n// GET /books/:isbn - Retrieve a book by ISBN\napp.get('/books/:isbn', (req, res) => {\n    const isbn = req.params.isbn;\n    const book = books.find(b => b.isbn === isbn);\n    if (book) {\n        res.json(book);\n    } else {\n        res.status(404).json({ message: 'Book not found' });\n    }\n});\n\n// POST /books - Add a new book\napp.post('/books', (req, res) => {\n    const { title, author, publicationYear, isbn } = req.body;\n    if (!title || !author || !publicationYear || !isbn) {\n        return res.status(400).json({ message: 'All fields are required' });\n    }\n    const existingBook = books.find(b => b.isbn === isbn);\n    if (existingBook) {\n        return res.status(400).json({ message: 'ISBN already exists' });\n    }\n    const newBook = { title, author, publicationYear, isbn };\n    books.push(newBook);\n    res.status(201).json(newBook);\n});\n\n// PUT /books/:isbn - Update an existing book\napp.put('/books/:isbn', (req, res) => {\n    const isbn = req.params.isbn;\n    const index = books.findIndex(b => b.isbn === isbn);\n    if (index === -1) {\n        return res.status(404).json({ message: 'Book not found' });\n    }\n    const updatedBook = { ...books[index], ...req.body };\n    books[index] = updatedBook;\n    res.json(updatedBook);\n});\n\n// DELETE /books/:isbn - Delete a book\napp.delete('/books/:isbn', (req, res) => {\n    const isbn = req.params.isbn;\n    const index = books.findIndex(b => b.isbn === isbn);\n    if (index === -1) {\n        return res.status(404).json({ message: 'Book not found' });\n    }\n    const deletedBook = books.splice(index, 1);\n    res.json(deletedBook[0]);\n});\n\n// Start the server\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Explanation\n\n1. **Dependencies:**\n   - `express`: For creating the web server and defining routes.\n   - `body-parser`: To parse JSON request bodies.\n   - `cors`: To handle cross-origin requests.\n\n2. **Data Storage:**\n   - An in-memory array `books` is used to store book data.\n\n3. **Routes:**\n   - `GET /books`: Returns all books.\n   - `GET /books/:isbn`: Returns a book by ISBN.\n   - `POST /books`: Adds a new book.\n   - `PUT /books/:isbn`: Updates an existing book.\n   - `DELETE /books/:isbn`: Deletes a book.\n\n4. **Request Validation:**\n   - Checks for required fields in request bodies.\n   - Ensures ISBN uniqueness when adding new books.\n\n5. **Error Handling:**\n   - Returns appropriate status codes and error messages for invalid requests or operations not found.\n\nThis setup provides a basic RESTful API for managing a collection of books with CRUD operations using Node.js and Express. For a production-level application, consider using a database for persistent storage and implementing additional features like input validation, authentication, and authorization."
    }
]