[
    {
        "role": "user",
        "content": "Implement a simple chat application using WebSocket protocol in JavaScript. The frontend should allow users to enter their name and send messages to all connected clients. The backend server, written in Node.js, should broadcast incoming messages to all connected clients and maintain a history of the last 50 messages.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a simple chat application using WebSocket protocol in JavaScript involves both frontend and backend development. Below is a step-by-step guide to creating such an application.\n\n### Frontend (HTML + JavaScript)\n\n1. **Create the HTML structure:**\n   - A input field for the user's name.\n   - An input field for messages.\n   - A button to send messages.\n   - A list to display chat messages.\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Simple Chat</title>\n</head>\n<body>\n    <h1>Simple Chat Application</h1>\n    <div>\n        <input type=\"text\" id=\"username\" placeholder=\"Enter your name\">\n        <button onclick=\"connect()\">Connect</button>\n    </div>\n    <ul id=\"messages\"></ul>\n    <div>\n        <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message\">\n        <button onclick=\"sendMessage()\">Send</button>\n    </div>\n    <script src=\"chat.js\"></script>\n</body>\n</html>\n```\n\n2. **JavaScript for WebSocket communication (chat.js):**\n\n```javascript\nlet socket;\nconst messagesList = document.getElementById('messages');\nconst messageInput = document.getElementById('messageInput');\nlet username;\n\nfunction connect() {\n    username = document.getElementById('username').value;\n    if (!username) {\n        alert('Please enter your name.');\n        return;\n    }\n    socket = new WebSocket('ws://localhost:8080');\n\n    socket.onopen = function() {\n        console.log('Connected to server');\n    };\n\n    socket.onmessage = function(event) {\n        const message = JSON.parse(event.data);\n        displayMessage(message);\n    };\n\n    socket.onclose = function() {\n        console.log('Disconnected from server');\n    };\n}\n\nfunction sendMessage() {\n    const message = messageInput.value;\n    if (message) {\n        const msg = { username: username, text: message };\n        socket.send(JSON.stringify(msg));\n        messageInput.value = '';\n    }\n}\n\nfunction displayMessage(message) {\n    const li = document.createElement('li');\n    li.textContent = `${message.username}: ${message.text}`;\n    messagesList.appendChild(li);\n    messagesList.scrollTop = messagesList.scrollHeight;\n}\n```\n\n### Backend (Node.js with WebSocket)\n\n1. **Install necessary packages:**\n\n   ```bash\n   npm install websocket\n   ```\n\n2. **Create the server (server.js):**\n\n```javascript\nconst WebSocket = require('websocket').websocket;\n\nconst http = require('http');\nconst server = http.createServer();\nserver.listen(8080, function() {\n    console.log(new Date() + \" Server is listening on port 8080\");\n});\n\nconst websocketServer = new WebSocket.server({\n    httpServer: server\n});\n\nlet clients = [];\nlet messageHistory = [];\n\nwebsocketServer.on('request', function(request) {\n    const connection = request.accept(null, request.origin);\n    clients.push(connection);\n    console.log(\"Client connected\");\n\n    connection.on('message', function(message) {\n        if (message.type === 'utf8') {\n            const data = JSON.parse(message.utf8Data);\n            const msg = { username: data.username, text: data.text };\n            messageHistory.push(msg);\n            if (messageHistory.length > 50) {\n                messageHistory.shift();\n            }\n            broadcast(msg);\n        }\n    });\n\n    connection.on('close', function(connection) {\n        const index = clients.indexOf(connection);\n        if (index !== -1) {\n            clients.splice(index, 1);\n        }\n        console.log(\"Client disconnected\");\n    });\n});\n\nfunction broadcast(message) {\n    const msgString = JSON.stringify(message);\n    clients.forEach(client => {\n        if (client.readyState === WebSocket.OPEN) {\n            client.sendUTF(msgString);\n        }\n    });\n}\n```\n\n### Explanation\n\n- **Frontend:**\n  - Users enter their name and connect to the WebSocket server.\n  - Messages are sent to the server via WebSocket.\n  - Incoming messages are displayed in the chat window.\n\n- **Backend:**\n  - A WebSocket server is set up to handle connections.\n  - Incoming messages are broadcast to all connected clients.\n  - Message history is maintained, keeping only the last 50 messages.\n\nThis setup provides a basic chat application where multiple clients can connect, send messages, and see messages from others in real-time."
    }
]