[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with Redis to store and retrieve key-value pairs. The script should support the following commands: SET, GET, DEL, and EXISTS. It should also handle error cases gracefully, such as attempting to get or delete a non-existent key."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that interacts with Redis to perform basic operations like SET, GET, DEL, and EXISTS. We'll make sure to handle errors gracefully, especially when dealing with non-existent keys.\n\nFirst, you'll need to have Redis installed and running on your machine. You can download it from redis.io. Once Redis is set up, you'll also need the Redis Python client library, which you can install using pip:\n\n```bash\npip install redis\n```\n\nNow, let's start writing the script. We'll begin by importing the necessary module and setting up a connection to the Redis server.\n\n```python\nimport redis\n\n# Connect to localhost on default port\nr = redis.Redis(host='localhost', port=6379, db=0)\n```\n\nNext, we'll define functions for each of the supported commands: SET, GET, DEL, and EXISTS.\n\n### SET Command\n\nThe SET command will store a key-value pair in Redis.\n\n```python\ndef set_key(key, value):\n    try:\n        r.set(key, value)\n        print(f\"Key '{key}' set to '{value}'\")\n    except Exception as e:\n        print(f\"Error setting key: {e}\")\n```\n\n### GET Command\n\nThe GET command will retrieve the value associated with a given key.\n\n```python\ndef get_key(key):\n    try:\n        value = r.get(key)\n        if value is not None:\n            print(f\"Value for '{key}': {value.decode('utf-8')}\")\n        else:\n            print(f\"No value found for key '{key}'\")\n    except Exception as e:\n        print(f\"Error getting key: {e}\")\n```\n\n### DEL Command\n\nThe DEL command will delete a key from Redis.\n\n```python\ndef delete_key(key):\n    try:\n        result = r.delete(key)\n        if result == 1:\n            print(f\"Key '{key}' deleted.\")\n        else:\n            print(f\"Key '{key}' not found.\")\n    except Exception as e:\n        print(f\"Error deleting key: {e}\")\n```\n\n### EXISTS Command\n\nThe EXISTS command will check if a key exists in Redis.\n\n```python\ndef exists_key(key):\n    try:\n        result = r.exists(key)\n        if result == 1:\n            print(f\"Key '{key}' exists.\")\n        else:\n            print(f\"Key '{key}' does not exist.\")\n    except Exception as e:\n        print(f\"Error checking existence of key: {e}\")\n```\n\n### Main Function\n\nNow, let's create a main function that will allow users to input commands and interact with the Redis instance.\n\n```python\ndef main():\n    while True:\n        command = input(\"Enter command (SET, GET, DEL, EXISTS, EXIT): \").upper()\n        \n        if command == 'SET':\n            key = input(\"Enter key: \")\n            value = input(\"Enter value: \")\n            set_key(key, value)\n        elif command == 'GET':\n            key = input(\"Enter key: \")\n            get_key(key)\n        elif command == 'DEL':\n            key = input(\"Enter key: \")\n            delete_key(key)\n        elif command == 'EXISTS':\n            key = input(\"Enter key: \")\n            exists_key(key)\n        elif command == 'EXIT':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid command. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **SET Command**: Takes a key and a value, stores them in Redis.\n2. **GET Command**: Takes a key and retrieves its value from Redis. If the key doesn't exist, it informs the user.\n3. **DEL Command**: Takes a key and deletes it from Redis. If the key doesn't exist, it informs the user.\n4. **EXISTS Command**: Takes a key and checks if it exists in Redis.\n5. **EXIT Command**: Exits the script.\n\nEach function handles exceptions to ensure that any errors are caught and displayed gracefully.\n\nThis script provides a simple interactive way to perform basic Redis operations directly from the command line. You can extend it further by adding more Redis commands or enhancing the error handling as needed."
    }
]