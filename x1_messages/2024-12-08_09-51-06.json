[
    {
        "role": "user",
        "content": "Develop a Node.js application that listens for incoming HTTP requests on port 8080 and serves static files from a specified directory. The application should support command-line arguments to specify the listening IP address, port number, and the directory path. Implement proper error handling for file not found (404) and internal server errors (500).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Node.js application that serves static files from a specified directory and accepts command-line arguments for the listening IP address, port number, and directory path, you can follow these steps:\n\n1. **Set up the project:**\n   - Initialize a new Node.js project.\n   - Install necessary dependencies.\n\n2. **Create the server:**\n   - Use the `http` module to create an HTTP server.\n   - Use the `fs` module to read static files.\n\n3. **Handle command-line arguments:**\n   - Use the `process.argv` array to retrieve command-line arguments.\n\n4. **Implement error handling:**\n   - Handle file not found (404) errors.\n   - Handle internal server errors (500).\n\n5. **Test the application:**\n   - Run the application with different command-line arguments.\n   - Verify that static files are served correctly and errors are handled properly.\n\n### Step-by-Step Solution\n\n#### 1. Set up the project\n\nFirst, create a new directory for your project and navigate into it:\n\n```sh\nmkdir static-file-server\ncd static-file-server\n```\n\nInitialize a new Node.js project:\n\n```sh\nnpm init -y\n```\n\nInstall the required dependencies. For this application, you'll need `http` and `fs`, which are built-in modules, but you might also want to use `path` for handling file paths correctly.\n\n#### 2. Create the server\n\nCreate a file named `server.js`:\n\n```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Function to serve static files\nfunction serveStaticFile(filePath, res) {\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      } else {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('500 Internal Server Error');\n      }\n    } else {\n      res.writeHead(200);\n      res.end(data);\n    }\n  });\n}\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  const filePath = path.join(process.cwd(), req.url === '/' ? 'index.html' : req.url);\n  serveStaticFile(filePath, res);\n});\n\n// Listen on specified IP and port\nconst ip = process.argv[2] || '127.0.0.1';\nconst port = parseInt(process.argv[3]) || 8080;\n\nserver.listen(port, ip, () => {\n  console.log(`Server running at http://${ip}:${port}/`);\n});\n```\n\n#### 3. Handle command-line arguments\n\nThe server should accept command-line arguments for the listening IP address, port number, and the directory path.\n\nModify `server.js` to handle command-line arguments:\n\n```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Function to serve static files\nfunction serveStaticFile(filePath, res) {\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      } else {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('500 Internal Server Error');\n      }\n    } else {\n      res.writeHead(200);\n      res.end(data);\n    }\n  });\n}\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  const baseDir = process.argv[4] || './public';\n  const filePath = path.join(baseDir, req.url === '/' ? 'index.html' : req.url);\n  serveStaticFile(filePath, res);\n});\n\n// Listen on specified IP and port\nconst ip = process.argv[2] || '127.0.0.1';\nconst port = parseInt(process.argv[3]) || 8080;\n\nserver.listen(port, ip, () => {\n  console.log(`Server running at http://${ip}:${port}/`);\n});\n```\n\n#### 4. Implement error handling\n\nThe `serveStaticFile` function already handles file not found (404) and internal server errors (500).\n\n#### 5. Test the application\n\nCreate a directory named `public` and add some static files, such as `index.html`:\n\n```html\n<!-- public/index.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Home</title>\n</head>\n<body>\n  <h1>Welcome to the Home Page</h1>\n</body>\n</html>\n```\n\nAdd another file, e.g., `about.html`:\n\n```html\n<!-- public/about.html -->\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>About</title>\n</head>\n<body>\n  <h1>About Us</h1>\n</body>\n</html>\n```\n\nRun the server with default settings:\n\n```sh\nnode server.js 127.0.0.1 8080 public\n```\n\nOpen a web browser and navigate to `http://127.0.0.1:8080/` to see the `index.html` file, and to `http://127.0.0.1:8080/about.html` to see the `about.html` file.\n\nTest for 404 errors by accessing a non-existent file, e.g., `http://127.0.0.1:8080/nonexistent.html`.\n\n### Final Solution Code\n\nHere is the complete code for `server.js`:\n\n```javascript\nconst http = require('http');\nconst fs = require('fs');\nconst path = require('path');\n\n// Function to serve static files\nfunction serveStaticFile(filePath, res) {\n  fs.readFile(filePath, (err, data) => {\n    if (err) {\n      if (err.code === 'ENOENT') {\n        res.writeHead(404, { 'Content-Type': 'text/plain' });\n        res.end('404 Not Found');\n      } else {\n        res.writeHead(500, { 'Content-Type': 'text/plain' });\n        res.end('500 Internal Server Error');\n      }\n    } else {\n      res.writeHead(200);\n      res.end(data);\n    }\n  });\n}\n\n// Create HTTP server\nconst server = http.createServer((req, res) => {\n  const baseDir = process.argv[4] || './public';\n  const filePath = path.join(baseDir, req.url === '/' ? 'index.html' : req.url);\n  serveStaticFile(filePath, res);\n});\n\n// Listen on specified IP and port\nconst ip = process.argv[2] || '127.0.0.1';\nconst port = parseInt(process.argv[3]) || 8080;\n\nserver.listen(port, ip, () => {\n  console.log(`Server running at http://${ip}:${port}/`);\n});\n```\n\n### Explanation\n\n- **Command-Line Arguments:** The server accepts four command-line arguments:\n  - `process.argv[2]`: IP address to listen on (default: `'127.0.0.1'`)\n  - `process.argv[3]`: Port number to listen on (default: `8080`)\n  - `process.argv[4]`: Directory path to serve static files from (default: `./public`)\n\n- **Static File Serving:** The server reads files from the specified directory and serves them via HTTP. If a file is not found, it returns a 404 error. For other errors, it returns a 500 error.\n\n- **Path Handling:** The `path.join` function ensures that file paths are constructed correctly across different operating systems.\n\nThis setup provides a basic static file server with customizable listening IP, port, and serving directory, along with proper error handling."
    }
]