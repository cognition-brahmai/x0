[
    {
        "role": "user",
        "content": "Write a Java program that uses the observer pattern to implement a simple event-driven system with multiple listeners and events.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing the Observer Pattern in Java for an Event-Driven System\n====================================================================\n\nIn this example, we'll create a simple event-driven system using the Observer pattern in Java. The system will consist of subjects that can fire events and observers (listeners) that can listen for these events and react accordingly.\n\n### Components of the Observer Pattern\n\n1. **Subject**: The subject holds a list of observers and provides methods to add, remove, and notify them.\n2. **Observer**: Observers implement a method that will be called when the subject notifies them.\n3. **Concrete Subject**: Implements the subject and maintains the state that can trigger events.\n4. **Concrete Observer**: Implements the observer and defines how to react to events.\n\n### Example Scenario\n\nWe'll simulate a simple weather station system where different devices (observers) listen for weather updates (events) from a weather data provider (subject).\n\n### Code Implementation\n\n#### 1. Define the Observer Interface\n\n```java\npublic interface Observer {\n    void update(float temperature, float humidity, float pressure);\n}\n```\n\n#### 2. Define the Subject Interface\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Subject {\n    private final List<Observer> observers = new ArrayList<>();\n    private float temperature;\n    private float humidity;\n    private float pressure;\n\n    public void registerObserver(Observer o) {\n        observers.add(o);\n    }\n\n    public void removeObserver(Observer o) {\n        observers.remove(o);\n    }\n\n    public void notifyObservers() {\n        for (Observer observer : observers) {\n            observer.update(temperature, humidity, pressure);\n        }\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        measurementsChanged();\n    }\n\n    protected void measurementsChanged() {\n        notifyObservers();\n    }\n}\n```\n\n#### 3. Create a Concrete Subject\n\n```java\npublic class WeatherData extends Subject {\n    public void measurementsChanged() {\n        notifyObservers();\n    }\n\n    public void setMeasurements(float temperature, float humidity, float pressure) {\n        super.setMeasurements(temperature, humidity, pressure);\n    }\n}\n```\n\n#### 4. Create Concrete Observers\n\n##### a. CurrentConditionsDisplay\n\n```java\npublic class CurrentConditionsDisplay implements Observer {\n    private float temperature;\n    private float humidity;\n    private float pressure;\n\n    public CurrentConditionsDisplay(Subject weatherData) {\n        weatherData.registerObserver(this);\n    }\n\n    @Override\n    public void update(float temperature, float humidity, float pressure) {\n        this.temperature = temperature;\n        this.humidity = humidity;\n        this.pressure = pressure;\n        display();\n    }\n\n    private void display() {\n        System.out.println(\"Current conditions: \" + temperature + \"F degrees and \" + humidity + \"% humidity\");\n    }\n}\n```\n\n##### b. StatisticsDisplay\n\n```java\npublic class StatisticsDisplay implements Observer {\n    private float maxTemp = 0.0f;\n    private float minTemp = 200;\n    private float tempSum = 0.0f;\n    private int numReadings;\n\n    public StatisticsDisplay(Subject weatherData) {\n        weatherData.registerObserver(this);\n    }\n\n    @Override\n    public void update(float temp, float humidity, float pressure) {\n        tempSum += temp;\n        numReadings++;\n\n        if (temp > maxTemp) {\n            maxTemp = temp;\n        }\n\n        if (temp < minTemp) {\n            minTemp = temp;\n        }\n\n        display();\n    }\n\n    private void display() {\n        System.out.println(\"Avg/Max/Min temperature = \" + (tempSum / numReadings)\n                + \"/\" + maxTemp + \"/\" + minTemp);\n    }\n}\n```\n\n#### 5. Test the System\n\n```java\npublic class WeatherStation {\n    public static void main(String[] args) {\n        WeatherData weatherData = new WeatherData();\n\n        CurrentConditionsDisplay currentDisplay = new CurrentConditionsDisplay(weatherData);\n        StatisticsDisplay statisticsDisplay = new StatisticsDisplay(weatherData);\n\n        weatherData.setMeasurements(80, 65, 30.4f);\n        weatherData.setMeasurements(82, 70, 29.2f);\n        weatherData.setMeasurements(78, 90, 29.2f);\n    }\n}\n```\n\n### Explanation\n\n1. **Subject Class**: Manages a list of observers and notifies them of any state changes.\n2. **Observer Interface**: Defines the `update` method that observers must implement.\n3. **Concrete Observers**: React to notifications from the subject by updating their state and displaying information.\n4. **WeatherData Class**: A concrete subject that\u6a21\u62df\u5929\u6c14\u6570\u636e\u7684\u53d8\u5316\u5e76\u901a\u77e5\u89c2\u5bdf\u8005\u3002\n\nThis setup allows for a flexible event-driven system where subjects and observers can be easily added or modified without affecting each other's code."
    }
]