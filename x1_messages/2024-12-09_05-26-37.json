[
    {
        "role": "user",
        "content": "Create a C++ function that takes an integer as input, calculates its factorial using recursion, and returns the result.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a C++ function that calculates the factorial of an integer using recursion:\n\n```cpp\n#include <iostream>\n\nunsigned long long factorial(int n) {\n    if (n == 0 || n == 1)\n        return 1;\n    else\n        return n * factorial(n - 1);\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a positive integer: \";\n    std::cin >> number;\n    if (number < 0) {\n        std::cout << \"Factorial is not defined for negative numbers.\" << std::endl;\n    } else {\n        unsigned long long result = factorial(number);\n        std::cout << \"Factorial of \" << number << \" is: \" << result << std::endl;\n    }\n    return 0;\n}\n```\n\nThis program defines a function `factorial` that computes the factorial of a given integer `n` recursively. The base case is when `n` is 0 or 1, in which case the function returns 1. For other values of `n`, it returns `n` multiplied by the factorial of `n-1`.\n\nIn the `main` function, the user is prompted to enter a positive integer. If the entered number is negative, it informs the user that factorial is not defined for negative numbers. Otherwise, it calculates and displays the factorial of the number.\n\n**Note:** Factorial values can be very large even for small values of `n`. The use of `unsigned long long` helps handle larger values, but there is still a limit. For very large values of `n`, you might need to use libraries that support arbitrary-precision arithmetic."
    }
]