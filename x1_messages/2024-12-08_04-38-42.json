[
    {
        "role": "user",
        "content": "Create a Python-based microservice using FastAPI that interacts with an external weather API to fetch and display weather information for a given location. The microservice should cache the fetched data in a Redis instance, with an expiry time of 1 hour, to avoid making unnecessary requests to the external API. Additionally, implement rate limiting to prevent abuse of the service."
    },
    {
        "role": "assistant",
        "content": "To create a Python-based microservice using FastAPI that interacts with an external weather API and caches data in Redis with rate limiting, follow these steps:\n\n### Prerequisites\n\n1. **Install Required Packages**:\n   - `fastapi`: For creating the API.\n   - `uvicorn`: As the ASGI server to run the API.\n   - `httpx`: For making HTTP requests to the external weather API.\n   - `redis`: For caching the weather data.\n   - `python-multipart`: For handling form data.\n   - `pydantic`: For data validation.\n\n   You can install these using pip:\n\n   ```bash\n   pip install fastapi uvicorn httpx redis python-multipart pydantic\n   ```\n\n2. **Set Up Environment Variables**:\n   - Obtain an API key from a weather service like OpenWeatherMap.\n   - Set up environment variables for the weather API key and Redis connection.\n\n   Create a `.env` file:\n\n   ```plaintext\n   WEATHER_API_KEY=your_weather_api_key\n   REDIS_HOST=localhost\n   REDIS_PORT=6379\n   REDIS_DB=0\n   ```\n\n   Install `python-dotenv` to load environment variables:\n\n   ```bash\n   pip install python-dotenv\n   ```\n\n### Implementation\n\n1. **Initialize FastAPI App**:\n\n   Create a new Python file, e.g., `main.py`, and set up the FastAPI app.\n\n   ```python\n   from fastapi import FastAPI, HTTPException\n   from pydantic import BaseModel\n   import httpx\n   import redis\n   import os\n   from dotenv import load_dotenv\n   from typing import Optional\n\n   load_dotenv()\n\n   app = FastAPI()\n\n   # Load environment variables\n   WEATHER_API_KEY = os.getenv('WEATHER_API_KEY')\n   REDIS_HOST = os.getenv('REDIS_HOST')\n   REDIS_PORT = int(os.getenv('REDIS_PORT'))\n   REDIS_DB = int(os.getenv('REDIS_DB'))\n\n   # Connect to Redis\n   redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=REDIS_DB)\n   ```\n\n2. **Define Data Models**:\n\n   Create Pydantic models for request and response data.\n\n   ```python\n   class Location(BaseModel):\n       city: str\n       country: str\n   ```\n\n3. **Implement Weather Data Fetching and Caching**:\n\n   Create a function to fetch weather data from the external API and cache it in Redis.\n\n   ```python\n   async def get_weather_data(city: str, country: str) -> dict:\n       cache_key = f\"weather:{city.lower()}:{country.lower()}\"\n       cached_data = redis_client.get(cache_key)\n       if cached_data:\n           return eval(cached_data)\n       \n       url = f\"http://api.openweathermap.org/data/2.5/weather?q={city},{country}&appid={WEATHER_API_KEY}\"\n       async with httpx.AsyncClient() as client:\n           response = await client.get(url)\n           if response.status_code != 200:\n               raise HTTPException(status_code=500, detail=\"Failed to fetch weather data\")\n           \n           data = response.json()\n           redis_client.set(cache_key, str(data), ex=3600)  # Cache for 1 hour\n           return data\n   ```\n\n4. **Create Endpoint with Rate Limiting**:\n\n   Implement an endpoint to get weather data with rate limiting.\n\n   ```python\n   from fastapi import Depends, BackgroundTasks\n   from fastapi_limiter import FastAPILimiter\n   from fastapi_limiter.depends import RateLimiter\n   from redis import asyncio as aioredis\n\n   @app.on_event(\"startup\")\n   async def startup():\n       redis = aioredis.from_url(f\"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_DB}\", encoding=\"utf8\", decode_responses=True)\n       FastAPILimiter.init(redis)\n\n   @app.get(\"/weather\", dependencies=[Depends(RateLimiter(times=10, seconds=60))])\n   async def get_weather(location: Location):\n       try:\n           data = await get_weather_data(location.city, location.country)\n           return data\n       except HTTPException as e:\n           raise e\n       except Exception as e:\n           raise HTTPException(status_code=500, detail=str(e))\n   ```\n\n5. **Run the Application**:\n\n   Use Uvicorn to run the FastAPI application.\n\n   ```bash\n   uvicorn main:app --reload\n   ```\n\n### Explanation\n\n- **FastAPI**: Used to create a high-performance web API.\n- **httpx**: Asynchronous HTTP client to make requests to the weather API.\n- **Redis**: Used for caching weather data to reduce load on the external API.\n- **Rate Limiting**: Implemented using `fastapi-limiter` to prevent abuse, allowing 10 requests per minute per client.\n- **Environment Variables**: Managed using `python-dotenv` for better security and configuration management.\n\nThis setup ensures that the microservice is efficient, scalable, and protects against excessive API usage."
    }
]