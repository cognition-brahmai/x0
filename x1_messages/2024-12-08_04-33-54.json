[
    {
        "role": "user",
        "content": "Create a Python script that implements a basic binary search tree data structure, with the following operations:\n   - Insertion of nodes.\n   - Deletion of nodes.\n   - In-order traversal and printing of the tree elements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that implements a basic binary search tree (BST) with insertion, deletion, and in-order traversal operations.\n\n```python\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    else:\n        if root.val < key:\n            root.right = insert(root.right, key)\n        else:\n            root.left = insert(root.left, key)\n    return root\n\ndef minValueNode(node):\n    current = node\n    while(current.left is not None):\n        current = current.left\n    return current\n\ndef delete(root, key):\n    if root is None:\n        return root\n    if key < root.val:\n        root.left = delete(root.left, key)\n    elif(key > root.val):\n        root.right = delete(root.right, key)\n    else:\n        if root.left is None:\n            temp = root.right\n            root = None\n            return temp\n        elif root.right is None:\n            temp = root.left\n            root = None\n            return temp\n        temp = minValueNode(root.right)\n        root.val = temp.val\n        root.right = delete(root.right, temp.val)\n    return root\n\ndef inorder(root):\n    if root:\n        inorder(root.left)\n        print(root.val, end=\" \")\n        inorder(root.right)\n\n# Example usage:\nif __name__ == \"__main__\":\n    r = Node(50)\n    r = insert(r, 30)\n    r = insert(r, 20)\n    r = insert(r, 40)\n    r = insert(r, 70)\n    r = insert(r, 60)\n    r = insert(r, 80)\n\n    print(\"Inorder traversal of the given tree\")\n    inorder(r)\n\n    print(\"\\nDelete 20\")\n    r = delete(r, 20)\n    print(\"Inorder traversal after deletion of 20\")\n    inorder(r)\n\n    print(\"\\nDelete 30\")\n    r = delete(r, 30)\n    print(\"Inorder traversal after deletion of 30\")\n    inorder(r)\n\n    print(\"\\nDelete 50\")\n    r = delete(r, 50)\n    print(\"Inorder traversal after deletion of 50\")\n    inorder(r)\n```\n\n### Explanation:\n1. **Node Class**: Represents each node in the BST, containing a value and pointers to left and right children.\n2. **Insertion**: The `insert` function adds a new node with the given key to the BST.\n3. **Deletion**: The `delete` function removes a node with the specified key from the BST. It handles three cases:\n   - Deleting a leaf node.\n   - Deleting a node with one child.\n   - Deleting a node with two children (replaces with the inorder successor).\n4. **In-order Traversal**: The `inorder` function prints the elements of the BST in ascending order.\n\nThis script provides a basic implementation of a BST with the specified operations."
    }
]