[
    {
        "role": "user",
        "content": "Write a Python function that checks if a number is prime."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. To check if a number is prime, we can implement a function that tests divisibility starting from 2 up to the square root of the number. If the number is divisible by any number in this range, it's not prime; otherwise, it is prime.\n\nHere's a step-by-step explanation of how the function works:\n\n1. **Input Validation**: First, we check if the input number is less than or equal to 1, as these are not prime numbers by definition.\n2. **Divisibility Check**: We then check divisibility from 2 up to the square root of the number. If the number is divisible by any of these, it's not prime.\n3. **Return Result**: If no divisors are found, the number is prime.\n\nLet's implement this in Python:\n\n```python\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation:\n\n- **Step 1**: We import the `math` module to use the `sqrt` function for finding the square root of the number.\n- **Step 2**: Define the function `is_prime` that takes an integer `n` as input.\n- **Step 3**: Check if `n` is less than or equal to 1. If so, return `False` since these are not prime numbers.\n- **Step 4**: Use a for loop to check divisibility from 2 up to the square root of `n` (inclusive). If `n` is divisible by any number in this range, return `False`.\n- **Step 5**: If no divisors are found, return `True`, indicating that `n` is a prime number.\n\nThis function efficiently determines whether a given number is prime by minimizing the number of divisibility checks needed."
    }
]