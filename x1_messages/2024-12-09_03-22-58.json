[
    {
        "role": "user",
        "content": "Write a Python script to implement a singly linked list data structure with methods for adding elements, removing elements, and searching for an element by its value.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements a singly linked list data structure. It includes methods for adding elements, removing elements, and searching for an element by its value.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def add_at_head(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def remove(self, data):\n        if self.is_empty():\n            return\n        if self.head.data == data:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == data:\n                current.next = current.next.next\n                return\n            current = current.next\n\n    def search(self, data):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_head(3)\n    sll.add_at_end(5)\n    sll.add_at_end(7)\n    sll.display()  # Output: 3 -> 5 -> 7\n    print(sll.search(5))  # Output: 1\n    sll.remove(5)\n    sll.display()  # Output: 3 -> 7\n```\n\n### Explanation:\n\n1. **Node Class**: Represents a single node in the linked list. Each node contains data and a reference to the next node.\n2. **SinglyLinkedList Class**: Manages the linked list operations.\n   - **is_empty()**: Checks if the list is empty.\n   - **add_at_head(data)**: Adds a new node with the given data at the beginning of the list.\n   - **add_at_end(data)**: Adds a new node with the given data at the end of the list.\n   - **remove(data)**: Removes the first occurrence of the node with the given data.\n   - **search(data)**: Searches for the first occurrence of the node with the given data and returns its index (0-based). Returns -1 if not found.\n   - **display()**: Prints the elements of the list.\n\nThis script provides a basic implementation of a singly linked list with essential operations. You can extend it further based on your requirements."
    }
]