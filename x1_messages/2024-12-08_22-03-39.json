[
    {
        "role": "user",
        "content": "Write a C program that uses dynamic memory allocation to create a matrix of user-specified size. The program should then fill this matrix with random numbers between 0 and 100, print it out, and finally free up the allocated memory. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a C program that does what you've described. Let's break it down step by step.\n\nFirst, we need to create a matrix using dynamic memory allocation. A matrix is essentially a two-dimensional array, and in C, we can simulate this by allocating an array of pointers, where each pointer points to a dynamically allocated array representing a row.\n\nHere's how we can do it:\n\n1. **Ask the user for the number of rows and columns.**\n2. **Allocate memory for the array of row pointers.**\n3. **For each row, allocate memory for the columns.**\n4. **Fill the matrix with random numbers between 0 and 100.**\n5. **Print the matrix.**\n6. **Free the allocated memory to prevent leaks.**\n\nLet's start by including the necessary headers:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n```\n\nWe need `stdio.h` for input and output, `stdlib.h` for memory allocation and random number generation, and `time.h` to seed the random number generator.\n\nNext, we'll write a function to allocate memory for the matrix:\n\n```c\nint** createMatrix(int rows, int cols) {\n    int** matrix = (int**)malloc(rows * sizeof(int*));\n    if (matrix == NULL) {\n        fprintf(stderr, \"Memory allocation failed for row pointers.\\n\");\n        exit(EXIT_FAILURE);\n    }\n    for (int i = 0; i < rows; i++) {\n        matrix[i] = (int*)malloc(cols * sizeof(int));\n        if (matrix[i] == NULL) {\n            fprintf(stderr, \"Memory allocation failed for column elements.\\n\");\n            // Free previously allocated rows\n            for (int j = 0; j < i; j++) {\n                free(matrix[j]);\n            }\n            free(matrix);\n            exit(EXIT_FAILURE);\n        }\n    }\n    return matrix;\n}\n```\n\nThis function allocates memory for the matrix and checks for allocation errors. If any allocation fails, it cleans up by freeing any previously allocated memory and exits the program.\n\nNow, let's write a function to fill the matrix with random numbers:\n\n```c\nvoid fillMatrix(int** matrix, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            matrix[i][j] = rand() % 101; // Random number between 0 and 100\n        }\n    }\n}\n```\n\nWe use `rand() % 101` to get a random number between 0 and 100.\n\nNext, we'll write a function to print the matrix:\n\n```c\nvoid printMatrix(int** matrix, int rows, int cols) {\n    for (int i = 0; i < rows; i++) {\n        for (int j = 0; j < cols; j++) {\n            printf(\"%d \", matrix[i][j]);\n        }\n        printf(\"\\n\");\n    }\n}\n```\n\nFinally, we need a function to free the allocated memory:\n\n```c\nvoid freeMatrix(int** matrix, int rows) {\n    for (int i = 0; i < rows; i++) {\n        free(matrix[i]);\n    }\n    free(matrix);\n}\n```\n\nNow, let's put it all together in the `main` function:\n\n```c\nint main() {\n    int rows, cols;\n\n    printf(\"Enter the number of rows: \");\n    scanf(\"%d\", &rows);\n    printf(\"Enter the number of columns: \");\n    scanf(\"%d\", &cols);\n\n    // Seed the random number generator\n    srand(time(NULL));\n\n    int** matrix = createMatrix(rows, cols);\n    fillMatrix(matrix, rows, cols);\n    printf(\"Matrix:\\n\");\n    printMatrix(matrix, rows, cols);\n    freeMatrix(matrix, rows);\n\n    return 0;\n}\n```\n\nThis is the complete program. It asks the user for the dimensions of the matrix, allocates memory dynamically, fills it with random numbers, prints it, and then frees the memory.\n\n**Important Notes:**\n\n- Always check if memory allocation was successful to avoid segmentation faults.\n- Make sure to free all allocated memory to prevent memory leaks.\n- Use `rand()` with `srand(time(NULL))` to generate different sequences of random numbers each time the program runs.\n\nI hope this helps! Let me know if you have any questions."
    }
]