[
    {
        "role": "user",
        "content": "Develop a Python program that utilizes the Tkinter library to create a simple graphical user interface for a to-do list application. The application should allow users to add tasks, mark them as completed, and delete completed tasks."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you develop a simple to-do list application using Python and Tkinter. Tkinter is Python's standard GUI library, which makes it easy to create graphical user interfaces.\n\nHere\u2019s a step-by-step guide to building this application:\n\n### Step 1: Set Up Your Environment\n\nFirst, ensure you have Python installed on your system. Tkinter usually comes bundled with Python, so you shouldn't need to install it separately. You can check if Tkinter is installed by running:\n\n```python\nimport tkinter as tk\nprint(tk.TkVersion)\n```\n\nThis should print the version of Tkinter installed.\n\n### Step 2: Plan the Application\n\nOur to-do list application will have the following features:\n\n- A text entry field where users can type new tasks.\n- A button to add the task to the list.\n- A list displaying all tasks.\n- Buttons to mark tasks as completed and to delete completed tasks.\n\n### Step 3: Create the GUI Layout\n\nWe will use Tkinter widgets to create the layout:\n\n- `Entry` for task input.\n- `Button` for adding tasks.\n- `Listbox` to display tasks.\n- `Buttons` for marking tasks as completed and deleting completed tasks.\n\n### Step 4: Implement Functionality\n\nWe need to define functions for:\n\n- Adding a task to the list.\n- Marking a task as completed.\n- Deleting completed tasks.\n\n### Step 5: Style the Application\n\nWe'll add some basic styling to make the application look cleaner.\n\n### Final Code\n\nHere's the complete code for the to-do list application:\n\n```python\nimport tkinter as tk\nfrom tkinter import messagebox\n\nclass ToDoApp:\n    def __init__(self, root):\n        self.root = root\n        self.root.title(\"To-Do List App\")\n        \n        # Create and set up the task entry field\n        self.entry_task = tk.Entry(root, width=50)\n        self.entry_task.pack(pady=10)\n        \n        # Create and set up the add task button\n        self.btn_add = tk.Button(root, text=\"Add Task\", command=self.add_task)\n        self.btn_add.pack()\n        \n        # Create and set up the task list\n        self.task_list = tk.Listbox(root, width=50, height=10)\n        self.task_list.pack(pady=10)\n        \n        # Create and set up the mark as completed button\n        self.btn_complete = tk.Button(root, text=\"Mark as Completed\", command=self.mark_as_completed)\n        self.btn_complete.pack(side=tk.LEFT, padx=10)\n        \n        # Create and set up the delete completed button\n        self.btn_delete = tk.Button(root, text=\"Delete Completed\", command=self.delete_completed)\n        self.btn_delete.pack(side=tk.RIGHT, padx=10)\n        \n        # List to keep track of completed tasks\n        self.completed_tasks = []\n    \n    def add_task(self):\n        task = self.entry_task.get()\n        if task:\n            self.task_list.insert(tk.END, task)\n            self.entry_task.delete(0, tk.END)\n        else:\n            messagebox.showwarning(\"Warning\", \"Please enter a task.\")\n    \n    def mark_as_completed(self):\n        try:\n            selected_task_index = self.task_list.curselection()[0]\n            selected_task = self.task_list.get(selected_task_index)\n            self.completed_tasks.append(selected_task)\n            self.task_list.delete(selected_task_index)\n        except IndexError:\n            messagebox.showwarning(\"Warning\", \"Please select a task to mark as completed.\")\n    \n    def delete_completed(self):\n        if self.completed_tasks:\n            confirmation = messagebox.askyesno(\"Confirm\", \"Are you sure you want to delete all completed tasks?\")\n            if confirmation:\n                self.completed_tasks = []\n                # Optionally, you can log or save the completed tasks before deleting\n        else:\n            messagebox.showinfo(\"Info\", \"No completed tasks to delete.\")\n\nif __name__ == \"__main__\":\n    root = tk.Tk()\n    app = ToDoApp(root)\n    root.mainloop()\n```\n\n### Explanation\n\n1. **Initialization (`__init__`)**:\n   - Sets up the main window and all UI components.\n   - Entry field for new tasks.\n   - Button to add tasks.\n   - Listbox to display tasks.\n   - Buttons to mark tasks as completed and to delete completed tasks.\n\n2. **Adding a Task (`add_task`)**:\n   - Gets the task from the entry field.\n   - Adds it to the listbox if it's not empty.\n   - Clears the entry field.\n\n3. **Marking as Completed (`mark_as_completed`)**:\n   - Gets the selected task from the listbox.\n   - Moves it to the completed tasks list.\n   - Removes it from the listbox.\n\n4. **Deleting Completed Tasks (`delete_completed`)**:\n   - Asks for confirmation before deleting all completed tasks.\n   - Clears the completed tasks list upon confirmation.\n\nThis should give you a functional to-do list application using Tkinter. You can further enhance it by adding features like saving tasks to a file, editing tasks, or categorizing them."
    }
]