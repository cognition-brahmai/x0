[
    {
        "role": "user",
        "content": "Write a C program that uses recursion to calculate the factorial of a number entered by the user. Be sure to include error checking to ensure that the input is a positive integer. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C program that calculates the factorial of a number using recursion. It also includes error checking to ensure that the input is a positive integer.\n\n```c\n#include <stdio.h>\n\n// Function to calculate factorial using recursion\nlong long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int number;\n    printf(\"Enter a positive integer: \");\n    if (scanf(\"%d\", &number) != 1) {\n        printf(\"Invalid input. Please enter an integer.\\n\");\n        return 1;\n    }\n    if (number < 0) {\n        printf(\"Factorial is not defined for negative numbers.\\n\");\n        return 1;\n    }\n    long long result = factorial(number);\n    printf(\"Factorial of %d is %lld\\n\", number, result);\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Factorial Function:**\n   - The `factorial` function is defined recursively.\n   - Base case: If `n` is 0, it returns 1 because 0! = 1.\n   - Recursive case: Otherwise, it returns `n` multiplied by the factorial of `n - 1`.\n\n2. **Main Function:**\n   - Prompts the user to enter a positive integer.\n   - Uses `scanf` to read the input and checks if the input is a valid integer.\n   - Checks if the number is negative and outputs an error message if it is, since factorial is not defined for negative numbers.\n   - Calls the `factorial` function and prints the result.\n\nThis program ensures that the input is a positive integer and calculates the factorial using recursion."
    }
]