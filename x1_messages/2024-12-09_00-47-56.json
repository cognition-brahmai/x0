[
    {
        "role": "user",
        "content": "Using C, write a program that implements a linked list. This program should include functions to insert nodes at the beginning, end, and a specified position in the list. It should also have functions to delete nodes and search for an element in the list. Display the elements of the list after each operation to verify correctness."
    },
    {
        "role": "assistant",
        "content": "I'm ready to help you with that! So, you need a C program that implements a singly linked list with various operations like inserting nodes at the beginning, end, and a specified position, deleting nodes, and searching for elements. After each operation, the program should display the list to verify correctness.\n\nFirst, let's understand what a linked list is. A linked list is a linear data structure where each element is a separate object called a node. Each node contains data and a reference (or link) to the next node in the sequence.\n\nIn C, we can define a node structure like this:\n\n```c\nstruct Node {\n    int data;\n    struct Node* next;\n};\n```\n\nHere, `data` holds the value of the node, and `next` is a pointer to the next node.\n\nNow, let's outline the functions we need to implement:\n\n1. **Insert at Beginning**: Adds a new node at the start of the list.\n2. **Insert at End**: Adds a new node at the end of the list.\n3. **Insert at Position**: Adds a new node at a specified position in the list.\n4. **Delete Node**: Removes a node with a given value.\n5. **Search Element**: Checks if a value exists in the list.\n6. **Display List**: Prints the current state of the list.\n\nWe'll also need some helper functions, such as creating a new node and getting the length of the list.\n\nLet's start by defining the structure and the helper functions.\n\n## Final Solution\nTo implement a singly linked list in C with the specified operations, we need to define a structure for the nodes and implement functions to manipulate the list. Below is a complete C program that includes all the required functionalities: inserting nodes at the beginning, end, and a specified position, deleting nodes, searching for elements, and displaying the list after each operation.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\n// Function to create a new node\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n    return newNode;\n}\n\n// Function to insert a node at the beginning\nvoid insertAtBeginning(struct Node** head, int data) {\n    struct Node* newNode = createNode(data);\n    newNode->next = *head;\n    *head = newNode;\n}\n\n// Function to insert a node at the end\nvoid insertAtEnd(struct Node** head, int data) {\n    struct Node* newNode = createNode(data);\n    if (*head == NULL) {\n        *head = newNode;\n        return;\n    }\n    struct Node* last = *head;\n    while (last->next != NULL) {\n        last = last->next;\n    }\n    last->next = newNode;\n}\n\n// Function to insert a node at a specified position\nvoid insertAtPosition(struct Node** head, int data, int position) {\n    if (position <= 0) {\n        printf(\"Invalid position\\n\");\n        return;\n    }\n    if (position == 1) {\n        insertAtBeginning(head, data);\n        return;\n    }\n    struct Node* newNode = createNode(data);\n    struct Node* temp = *head;\n    int currentPos = 1;\n    while (temp != NULL && currentPos < position - 1) {\n        temp = temp->next;\n        currentPos++;\n    }\n    if (temp == NULL) {\n        printf(\"Position out of range\\n\");\n        free(newNode);\n        return;\n    }\n    newNode->next = temp->next;\n    temp->next = newNode;\n}\n\n// Function to delete a node with a given value\nvoid deleteNode(struct Node** head, int key) {\n    struct Node* temp = *head;\n    struct Node* prev = NULL;\n    if (temp != NULL && temp->data == key) {\n        *head = temp->next;\n        free(temp);\n        return;\n    }\n    while (temp != NULL && temp->data != key) {\n        prev = temp;\n        temp = temp->next;\n    }\n    if (temp == NULL) {\n        printf(\"Element not found\\n\");\n        return;\n    }\n    prev->next = temp->next;\n    free(temp);\n}\n\n// Function to search for an element\nint searchElement(struct Node* head, int key) {\n    struct Node* current = head;\n    int position = 1;\n    while (current != NULL) {\n        if (current->data == key) {\n            return position;\n        }\n        current = current->next;\n        position++;\n    }\n    return -1;\n}\n\n// Function to display the list\nvoid displayList(struct Node* head) {\n    struct Node* temp = head;\n    printf(\"Linked List: \");\n    while (temp != NULL) {\n        printf(\"%d -> \", temp->data);\n        temp = temp->next;\n    }\n    printf(\"NULL\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n\n    // Inserting elements\n    insertAtBeginning(&head, 3);\n    displayList(head);\n\n    insertAtEnd(&head, 5);\n    displayList(head);\n\n    insertAtPosition(&head, 4, 2);\n    displayList(head);\n\n    // Deleting an element\n    deleteNode(&head, 4);\n    displayList(head);\n\n    // Searching for an element\n    int position = searchElement(head, 5);\n    if (position != -1) {\n        printf(\"Element found at position %d\\n\", position);\n    } else {\n        printf(\"Element not found\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Defines the structure of a node in the linked list, containing integer data and a pointer to the next node.\n2. **createNode Function**: Allocates memory for a new node and initializes its data and next pointer.\n3. **insertAtBeginning Function**: Adds a new node at the start of the list by updating the head pointer.\n4. **insertAtEnd Function**: Traverses the list to the end and adds a new node there.\n5. **insertAtPosition Function**: Inserts a new node at a specified position, handling edge cases like invalid positions.\n6. **deleteNode Function**: Removes the first occurrence of a node with the given value, handling cases where the node is at the head or elsewhere in the list.\n7. **searchElement Function**: Searches for a value in the list and returns its position, or -1 if not found.\n8. **displayList Function**: Prints the current state of the list for verification.\n\nThis program demonstrates basic operations on a singly linked list and verifies each operation by displaying the list's state after modifications."
    }
]