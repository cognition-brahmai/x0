[
    {
        "role": "user",
        "content": "Create a C++ function that takes an array of integers as input, sorts it using the merge sort algorithm, and returns the sorted array.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C++ function that implements the merge sort algorithm to sort an array of integers.\n\n```cpp\n#include <iostream>\n#include <vector>\n\n// Function to merge two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nvoid merge(std::vector<int>& arr, int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    // Create temp arrays\n    std::vector<int> L(n1), R(n2);\n\n    // Copy data to temp arrays L[] and R[]\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n    int i = 0; // Initial index of first subarray\n    int j = 0; // Initial index of second subarray\n    int k = l; // Initial index of merged subarray\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of L[], if there are any\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of R[], if there are any\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// l is for left index and r is right index of the sub-array of arr to be sorted\nvoid mergeSort(std::vector<int>& arr, int l, int r) {\n    if (l >= r) {\n        return; // Returns recursively\n    }\n    int m = l + (r - l) / 2;\n    mergeSort(arr, l, m);\n    mergeSort(arr, m + 1, r);\n    merge(arr, l, m, r);\n}\n\n// Function to sort the array using merge sort\nstd::vector<int> sortArray(std::vector<int> arr) {\n    mergeSort(arr, 0, arr.size() - 1);\n    return arr;\n}\n\n// Example usage\nint main() {\n    std::vector<int> arr = {12, 11, 13, 5, 6, 7};\n    std::vector<int> sorted_arr = sortArray(arr);\n    for (int num : sorted_arr) {\n        std::cout << num << \" \";\n    }\n    return 0;\n}\n```\n\n### Explanation:\n1. **merge Function**: This function merges two halves of the array in sorted order.\n2. **mergeSort Function**: This is a recursive function that divides the array into two halves, sorts them independently, and then merges them.\n3. **sortArray Function**: This function is a wrapper that calls `mergeSort` to sort the entire array and returns the sorted array.\n4. **main Function**: An example usage of the `sortArray` function.\n\nThis implementation uses the standard merge sort algorithm, which has a time complexity of O(n log n)."
    }
]