[
    {
        "role": "user",
        "content": "Create a Python script using the Flask framework that serves as a simple calculator API. It should support addition, subtraction, multiplication, and division operations through different endpoints. Each endpoint should accept two numbers as input parameters and return the result in JSON format."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To create a simple calculator API using Flask, you'll need to set up a Flask application with different routes for each arithmetic operation: addition, subtraction, multiplication, and division. Each route will accept two numbers as input parameters and return the result in JSON format.\n\nFirst, make sure you have Flask installed. You can install it using pip if you haven't already:\n\n```bash\npip install Flask\n```\n\nNow, let's write the Python script for the calculator API.\n\n## Final Solution\nTo create a simple calculator API using Flask, follow these steps:\n\n1. **Install Flask**: Ensure Flask is installed in your environment.\n   ```bash\n   pip install Flask\n   ```\n\n2. **Create the Flask Application**: Write the Python script for the API.\n\n```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/add', methods=['GET'])\ndef add():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 + num2\n    return jsonify({'result': result})\n\n@app.route('/subtract', methods=['GET'])\ndef subtract():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 - num2\n    return jsonify({'result': result})\n\n@app.route('/multiply', methods=['GET'])\ndef multiply():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 * num2\n    return jsonify({'result': result})\n\n@app.route('/divide', methods=['GET'])\ndef divide():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    if num2 == 0:\n        return jsonify({'error': 'Cannot divide by zero'}), 400\n    result = num1 / num2\n    return jsonify({'result': result})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation\n\n1. **Flask Setup**: Import necessary modules and create a Flask application instance.\n2. **Routes**:\n   - `/add`: Adds two numbers.\n   - `/subtract`: Subtracts the second number from the first.\n   - `/multiply`: Multiplies two numbers.\n   - `/divide`: Divides the first number by the second. Includes a check to prevent division by zero.\n3. **Input Handling**: Each route retrieves `num1` and `num2` from the request arguments, converts them to floats, performs the operation, and returns the result in JSON format.\n4. **Error Handling**: The division route checks for division by zero and returns an error message if attempted.\n\n### Usage\n\n1. **Run the Application**:\n   ```bash\n   python app.py\n   ```\n   This will start a local development server, typically at `http://127.0.0.1:5000/`.\n\n2. **Make Requests**:\n   - Addition: `http://127.0.0.1:5000/add?num1=10&num2=5`\n   - Subtraction: `http://127.0.0.1:5000/subtract?num1=10&num2=5`\n   - Multiplication: `http://127.0.0.1:5000/multiply?num1=10&num2=5`\n   - Division: `http://127.0.0.1:5000/divide?num1=10&num2=5`\n\nEach request will return a JSON response with the result of the operation. For example, `http://127.0.0.1:5000/add?num1=10&num2=5` will return `{\"result\":15.0}`.\n\n## Solution Code\n\nTo create a simple calculator API using Flask, follow these steps:\n\n1. **Install Flask**: Ensure Flask is installed in your environment.\n   ```bash\n   pip install Flask\n   ```\n\n2. **Create the Flask Application**: Write the Python script for the API.\n\n```python\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/add', methods=['GET'])\ndef add():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 + num2\n    return jsonify({'result': result})\n\n@app.route('/subtract', methods=['GET'])\ndef subtract():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 - num2\n    return jsonify({'result': result})\n\n@app.route('/multiply', methods=['GET'])\ndef multiply():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    result = num1 * num2\n    return jsonify({'result': result})\n\n@app.route('/divide', methods=['GET'])\ndef divide():\n    num1 = float(request.args.get('num1'))\n    num2 = float(request.args.get('num2'))\n    if num2 == 0:\n        return jsonify({'error': 'Cannot divide by zero'}), 400\n    result = num1 / num2\n    return jsonify({'result': result})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation\n\n1. **Flask Setup**: Import necessary modules and create a Flask application instance.\n2. **Routes**:\n   - `/add`: Adds two numbers.\n   - `/subtract`: Subtracts the second number from the first.\n   - `/multiply`: Multiplies two numbers.\n   - `/divide`: Divides the first number by the second. Includes a check to prevent division by zero.\n3. **Input Handling**: Each route retrieves `num1` and `num2` from the request arguments, converts them to floats, performs the operation, and returns the result in JSON format.\n4. **Error Handling**: The division route checks for division by zero and returns an error message if attempted.\n\n### Usage\n\n1. **Run the Application**:\n   ```bash\n   python app.py\n   ```\n   This will start a local development server, typically at `http://127.0.0.1:5000/`.\n\n2. **Make Requests**:\n   - Addition: `http://127.0.0.1:5000/add?num1=10&num2=5`\n   - Subtraction: `http://127.0.0.1:5000/subtract?num1=10&num2=5`\n   - Multiplication: `http://127.0.0.1:5000/multiply?num1=10&num2=5`\n   - Division: `http://127.0.0.1:5000/divide?num1=10&num2=5`\n\nEach request will return a JSON response with the result of the operation. For example, `http://127.0.0.1:5000/add?num1=10&num2=5` will return `{\"result\":15.0}`."
    }
]