[
    {
        "role": "user",
        "content": "Write a Ruby script that generates a random password of specified length containing uppercase letters, lowercase letters, digits, and special characters.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Ruby script that generates a random password of a specified length, containing uppercase letters, lowercase letters, digits, and special characters.\n\n```ruby\ndef generate_password(length)\n  # Define the character sets\n  uppercase_letters = ('A'..'Z').to_a\n  lowercase_letters = ('a'..'z').to_a\n  digits = ('0'..'9').to_a\n  special_characters = ['!', '@', '#', '$', '%', '&', '*', '(', ')', '-', '_', '+', '=']\n\n  # Combine all character sets\n  all_characters = uppercase_letters + lowercase_letters + digits + special_characters\n\n  # Ensure the password contains at least one character from each set\n  password = [\n    uppercase_letters.sample,\n    lowercase_letters.sample,\n    digits.sample,\n    special_characters.sample\n  ]\n\n  # Fill the rest of the password length with random characters from all sets\n  remaining_length = length - password.length\n  remaining_characters = Array.new(remaining_length) { all_characters.sample }\n  password += remaining_characters\n\n  # Shuffle the password array to avoid predictable sequences\n  password.shuffle!\n\n  # Join the array into a string and return\n  password.join\nend\n\n# Example usage:\nputs generate_password(12)\n```\n\n### Explanation:\n\n1. **Character Sets Definition**:\n   - `uppercase_letters`: Contains all uppercase letters from 'A' to 'Z'.\n   - `lowercase_letters`: Contains all lowercase letters from 'a' to 'z'.\n   - `digits`: Contains digits from '0' to '9'.\n   - `special_characters`: Contains some common special characters.\n\n2. **Combining Character Sets**:\n   - `all_characters` is an array that combines all the above character sets.\n\n3. **Ensuring Diversity**:\n   - The password is initialized with one random character from each character set to ensure it contains at least one uppercase letter, one lowercase letter, one digit, and one special character.\n\n4. **Filling Remaining Length**:\n   - The remaining characters needed to reach the specified length are randomly selected from the combined character set.\n\n5. **Shuffling**:\n   - The password array is shuffled to avoid any predictable sequence, ensuring a strong random password.\n\n6. **Joining and Returning**:\n   - The array of characters is joined into a single string and returned as the password.\n\nYou can adjust the `special_characters` array to include more or different special characters as per your requirements."
    }
]