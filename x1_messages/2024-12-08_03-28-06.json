[
    {
        "role": "user",
        "content": "Design a MySQL database schema for an online store, including tables for customers, orders, products, and order items. Write SQL queries to insert sample data into each table and a query to fetch the details of all orders placed by a specific customer."
    },
    {
        "role": "assistant",
        "content": "To design a MySQL database schema for an online store, we need to consider the entities involved and their relationships. The main entities are customers, orders, products, and order items. Here's a step-by-step approach to creating the schema and writing the necessary SQL queries.\n\n### Step 1: Define the Tables\n\n1. **Customers Table**\n   - Stores customer information.\n   - Fields: customer_id (primary key), name, email, address.\n\n2. **Products Table**\n   - Stores product information.\n   - Fields: product_id (primary key), name, description, price, stock_quantity.\n\n3. **Orders Table**\n   - Stores order information.\n   - Fields: order_id (primary key), customer_id (foreign key referencing customers), order_date, total_amount.\n\n4. **Order Items Table**\n   - Stores details of each item in an order.\n   - Fields: order_item_id (primary key), order_id (foreign key referencing orders), product_id (foreign key referencing products), quantity, subtotal.\n\n### Step 2: Create the Tables\n\n```sql\n-- Customers Table\nCREATE TABLE customers (\n    customer_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100) UNIQUE NOT NULL,\n    address TEXT\n);\n\n-- Products Table\nCREATE TABLE products (\n    product_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    stock_quantity INT NOT NULL\n);\n\n-- Orders Table\nCREATE TABLE orders (\n    order_id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_id INT,\n    order_date DATETIME DEFAULT CURRENT_TIMESTAMP,\n    total_amount DECIMAL(10, 2),\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id)\n);\n\n-- Order Items Table\nCREATE TABLE order_items (\n    order_item_id INT AUTO_INCREMENT PRIMARY KEY,\n    order_id INT,\n    product_id INT,\n    quantity INT NOT NULL,\n    subtotal DECIMAL(10, 2) NOT NULL,\n    FOREIGN KEY (order_id) REFERENCES orders(order_id),\n    FOREIGN KEY (product_id) REFERENCES products(product_id)\n);\n```\n\n### Step 3: Insert Sample Data\n\n#### Insert into Customers Table\n\n```sql\nINSERT INTO customers (name, email, address) VALUES\n('John Doe', 'john.doe@example.com', '123 Main St, Anytown'),\n('Jane Smith', 'jane.smith@example.com', '456 Oak Ave, Othertown');\n```\n\n#### Insert into Products Table\n\n```sql\nINSERT INTO products (name, description, price, stock_quantity) VALUES\n('Laptop', 'High-performance laptop', 1200.00, 50),\n('Smartphone', 'Latest model smartphone', 800.00, 100),\n('Tablet', 'Portable tablet device', 300.00, 75);\n```\n\n#### Insert into Orders Table\n\nFirst, we need to know the customer_id for the orders. Assuming John Doe has customer_id = 1 and Jane Smith has customer_id = 2.\n\n```sql\nINSERT INTO orders (customer_id, total_amount) VALUES\n(1, 1200.00),\n(2, 800.00),\n(1, 1500.00);\n```\n\n#### Insert into Order Items Table\n\nFor each order, insert the items included.\n\n```sql\n-- Order 1: Laptop (1 unit)\nINSERT INTO order_items (order_id, product_id, quantity, subtotal) VALUES\n(1, 1, 1, 1200.00);\n\n-- Order 2: Smartphone (1 unit)\nINSERT INTO order_items (order_id, product_id, quantity, subtotal) VALUES\n(2, 2, 1, 800.00);\n\n-- Order 3: Laptop (1 unit) and Tablet (1 unit)\nINSERT INTO order_items (order_id, product_id, quantity, subtotal) VALUES\n(3, 1, 1, 1200.00),\n(3, 3, 1, 300.00);\n```\n\n### Step 4: Fetch Orders by Specific Customer\n\nTo fetch all orders placed by a specific customer, say John Doe (customer_id = 1), use the following query:\n\n```sql\nSELECT o.order_id, o.order_date, o.total_amount\nFROM orders o\nJOIN customers c ON o.customer_id = c.customer_id\nWHERE c.customer_id = 1;\n```\n\nThis query joins the `orders` table with the `customers` table on the `customer_id` field and filters the results for the specified customer_id.\n\n### Explanation\n\n- **Customers Table**: Stores basic customer information.\n- **Products Table**: Holds details about the products available in the store.\n- **Orders Table**: Records each order placed, linked to a customer via `customer_id`.\n- **Order Items Table**: Details each item within an order, linking to both `orders` and `products` tables.\n\nThe sample data inserts provide initial records for testing and demonstration. The final query retrieves all orders for a specific customer, showing order ID, date, and total amount."
    }
]