[
    {
        "role": "user",
        "content": "In C language, implement a linked list data structure. The implementation should include functions for adding nodes at the beginning, end, and any given position in the list, removing nodes, searching for values, and printing the list. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through implementing a singly linked list in C. We'll cover functions to add nodes at the beginning, end, and at a specific position, remove nodes, search for values, and print the list.\n\nFirst, let's understand what a linked list is. A linked list is a linear data structure where each element is a separate object, called a node, and each node points to the next node in the sequence.\n\n### Step 1: Define the Node Structure\n\nEach node will contain some data and a pointer to the next node.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the structure for a node\nstruct Node {\n    int data;\n    struct Node* next;\n};\n```\n\n### Step 2: Function to Add a Node at the Beginning\n\nThis function will create a new node and make it the new head of the list.\n\n```c\n// Function to add a node at the beginning\nstruct Node* addAtBeginning(struct Node* head, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = head;\n    return newNode;\n}\n```\n\n### Step 3: Function to Add a Node at the End\n\nThis function will traverse the list to the end and add a new node there.\n\n```c\n// Function to add a node at the end\nstruct Node* addAtEnd(struct Node* head, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n\n    if (head == NULL) {\n        return newNode;\n    }\n\n    struct Node* current = head;\n    while (current->next != NULL) {\n        current = current->next;\n    }\n    current->next = newNode;\n    return head;\n}\n```\n\n### Step 4: Function to Add a Node at a Specific Position\n\nThis function will add a new node at a given position. Positions start from 1, where 1 is the beginning.\n\n```c\n// Function to add a node at a specific position\nstruct Node* addAtPosition(struct Node* head, int data, int position) {\n    if (position < 1) {\n        printf(\"Position should be >= 1\\n\");\n        return head;\n    }\n\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n\n    if (position == 1) {\n        newNode->next = head;\n        return newNode;\n    }\n\n    struct Node* current = head;\n    int currentPos = 1;\n    while (current != NULL && currentPos < position - 1) {\n        current = current->next;\n        currentPos++;\n    }\n\n    if (current == NULL) {\n        printf(\"Position out of range\\n\");\n        free(newNode);\n        return head;\n    }\n\n    newNode->next = current->next;\n    current->next = newNode;\n    return head;\n}\n```\n\n### Step 5: Function to Remove a Node\n\nThis function will remove the first node that matches the given data.\n\n```c\n// Function to remove a node with a specific data value\nstruct Node* removeNode(struct Node* head, int data) {\n    if (head == NULL) {\n        return head;\n    }\n\n    if (head->data == data) {\n        struct Node* temp = head;\n        head = head->next;\n        free(temp);\n        return head;\n    }\n\n    struct Node* current = head;\n    while (current->next != NULL && current->next->data != data) {\n        current = current->next;\n    }\n\n    if (current->next == NULL) {\n        printf(\"Data not found\\n\");\n        return head;\n    }\n\n    struct Node* temp = current->next;\n    current->next = temp->next;\n    free(temp);\n    return head;\n}\n```\n\n### Step 6: Function to Search for a Value\n\nThis function will check if a value exists in the list and return a boolean.\n\n```c\n// Function to search for a value\nint search(struct Node* head, int data) {\n    struct Node* current = head;\n    while (current != NULL) {\n        if (current->data == data) {\n            return 1;\n        }\n        current = current->next;\n    }\n    return 0;\n}\n```\n\n### Step 7: Function to Print the List\n\nThis function will traverse the list and print each node's data.\n\n```c\n// Function to print the list\nvoid printList(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n```\n\n### Step 8: Main Function\n\nNow, let's write a main function to test all these operations.\n\n```c\nint main() {\n    struct Node* head = NULL;\n\n    head = addAtBeginning(head, 10);\n    head = addAtBeginning(head, 20);\n    head = addAtEnd(head, 30);\n    head = addAtPosition(head, 15, 2);\n    printList(head); // Should print: 20 -> 15 -> 10 -> 30 -> NULL\n\n    head = removeNode(head, 15);\n    printList(head); // Should print: 20 -> 10 -> 30 -> NULL\n\n    if (search(head, 10)) {\n        printf(\"Found 10\\n\");\n    } else {\n        printf(\"10 not found\\n\");\n    }\n\n    if (search(head, 15)) {\n        printf(\"Found 15\\n\");\n    } else {\n        printf(\"15 not found\\n\");\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Defines the structure of each node in the list.\n2. **Add at Beginning**: Creates a new node and makes it the new head.\n3. **Add at End**: Traverses to the end and adds a new node.\n4. **Add at Position**: Adds a new node at a specified position.\n5. **Remove Node**: Removes the first node that matches the given data.\n6. **Search**: Checks if a value exists in the list.\n7. **Print List**: Prints the entire list.\n\nThis should give you a good starting point for working with linked lists in C. Let me know if you have any questions or need further clarification!"
    }
]