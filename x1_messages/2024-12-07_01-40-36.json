[
    {
        "role": "user",
        "content": "Create a Python function that takes a list of numbers and returns their median value."
    },
    {
        "role": "assistant",
        "content": "Certainly! To calculate the median of a list of numbers in Python, you can follow these steps:\n\n1. **Sort the list**: The median is the middle value in a sorted list.\n2. **Find the middle value**:\n   - If the list has an odd number of elements, the median is the middle element.\n   - If the list has an even number of elements, the median is the average of the two middle elements.\n\nHere's a Python function that implements this logic:\n\n```python\ndef calculate_median(numbers):\n    # First, sort the list\n    sorted_numbers = sorted(numbers)\n    \n    # Find the number of elements\n    n = len(sorted_numbers)\n    \n    # Find the middle index\n    mid = n // 2\n    \n    # If the list has an even number of elements\n    if n % 2 == 0:\n        # Median is the average of the two middle numbers\n        median = (sorted_numbers[mid - 1] + sorted_numbers[mid]) / 2\n    else:\n        # Median is the middle number\n        median = sorted_numbers[mid]\n    \n    return median\n\n# Example usage:\nnumbers = [3, 1, 4, 1, 5, 9, 2]\nprint(calculate_median(numbers))  # Output: 3\n\nnumbers = [3, 1, 4, 1, 5, 9, 2, 6]\nprint(calculate_median(numbers))  # Output: 3.5\n```\n\n### Explanation:\n\n1. **Sorting the List**:\n   - We use the `sorted()` function to sort the list of numbers.\n\n2. **Finding the Number of Elements**:\n   - We determine the number of elements in the list using `len()`.\n\n3. **Calculating the Middle Index**:\n   - We use integer division `//` to find the middle index.\n\n4. **Determining the Median**:\n   - If the number of elements is even, we take the average of the two middle elements.\n   - If the number of elements is odd, we take the middle element directly.\n\nThis function handles both even and odd lengths of the list and provides the correct median value."
    }
]