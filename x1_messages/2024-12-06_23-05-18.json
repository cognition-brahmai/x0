[
    {
        "role": "user",
        "content": "Write a C# application that simulates a simple bank account. The application should allow users to deposit money, withdraw money, check balance, and transfer money to another account. Use object-oriented principles to design your classes and interfaces."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Let's start by understanding the requirements and then design our classes accordingly.\n\n## Requirements\n\n1. **Deposit Money**: Users should be able to deposit a specified amount into their bank account.\n2. **Withdraw Money**: Users should be able to withdraw a specified amount from their bank account, provided they have sufficient balance.\n3. **Check Balance**: Users should be able to check their current account balance.\n4. **Transfer Money**: Users should be able to transfer a specified amount to another bank account, provided they have sufficient balance.\n\n## Design\n\nTo implement this, we can design a `BankAccount` class that encapsulates the properties and methods related to a bank account. Additionally, we might need another class to handle transactions or manage multiple accounts.\n\n### Classes and Interfaces\n\n1. **BankAccount Class**\n   - Properties:\n     - AccountNumber (unique identifier)\n     - Balance\n   - Methods:\n     - Deposit(amount)\n     - Withdraw(amount)\n     - CheckBalance()\n     - Transfer(toAccount, amount)\n\n2. **Bank Class** (optional)\n   - Manages multiple bank accounts.\n   - Methods:\n     - CreateAccount()\n     - GetAccount(accountNumber)\n\n## Implementation\n\nLet's start by implementing the `BankAccount` class.\n\n```csharp\npublic class BankAccount\n{\n    public string AccountNumber { get; private set; }\n    public decimal Balance { get; private set; }\n\n    public BankAccount(string accountNumber, decimal initialBalance)\n    {\n        AccountNumber = accountNumber;\n        Balance = initialBalance;\n    }\n\n    public void Deposit(decimal amount)\n    {\n        if (amount < 0)\n        {\n            throw new ArgumentException(\"Amount cannot be negative.\");\n        }\n        Balance += amount;\n    }\n\n    public void Withdraw(decimal amount)\n    {\n        if (amount < 0)\n        {\n            throw new ArgumentException(\"Amount cannot be negative.\");\n        }\n        if (Balance < amount)\n        {\n            throw new InvalidOperationException(\"Insufficient funds.\");\n        }\n        Balance -= amount;\n    }\n\n    public decimal CheckBalance()\n    {\n        return Balance;\n    }\n\n    public void Transfer(BankAccount toAccount, decimal amount)\n    {\n        if (toAccount == null)\n        {\n            throw new ArgumentNullException(nameof(toAccount));\n        }\n        if (amount < 0)\n        {\n            throw new ArgumentException(\"Amount cannot be negative.\");\n        }\n        if (Balance < amount)\n        {\n            throw new InvalidOperationException(\"Insufficient funds.\");\n        }\n        Withdraw(amount);\n        toAccount.Deposit(amount);\n    }\n}\n```\n\nNext, we can create a `Bank` class to manage multiple accounts.\n\n```csharp\npublic class Bank\n{\n    private Dictionary<string, BankAccount> accounts = new Dictionary<string, BankAccount>();\n\n    public BankAccount CreateAccount(string accountNumber, decimal initialBalance)\n    {\n        if (accounts.ContainsKey(accountNumber))\n        {\n            throw new ArgumentException(\"Account number already exists.\");\n        }\n        var account = new BankAccount(accountNumber, initialBalance);\n        accounts.Add(accountNumber, account);\n        return account;\n    }\n\n    public BankAccount GetAccount(string accountNumber)\n    {\n        if (accounts.TryGetValue(accountNumber, out var account))\n        {\n            return account;\n        }\n        return null;\n    }\n}\n```\n\n## Example Usage\n\nNow, let's see how to use these classes in a simple C# application.\n\n```csharp\nclass Program\n{\n    static void Main()\n    {\n        Bank bank = new Bank();\n\n        // Create accounts\n        BankAccount account1 = bank.CreateAccount(\"12345\", 1000);\n        BankAccount account2 = bank.CreateAccount(\"67890\", 500);\n\n        // Deposit money\n        account1.Deposit(500);\n        Console.WriteLine($\"Account1 balance: {account1.CheckBalance()}\");\n\n        // Withdraw money\n        account2.Withdraw(200);\n        Console.WriteLine($\"Account2 balance: {account2.CheckBalance()}\");\n\n        // Transfer money\n        account1.Transfer(account2, 300);\n        Console.WriteLine($\"Account1 balance: {account1.CheckBalance()}\");\n        Console.WriteLine($\"Account2 balance: {account2.CheckBalance()}\");\n    }\n}\n```\n\n## Explanation\n\n1. **BankAccount Class**\n   - Manages individual bank accounts with methods to deposit, withdraw, check balance, and transfer funds.\n   - Ensures that operations like withdrawal and transfer do not exceed the current balance.\n\n2. **Bank Class**\n   - Manages multiple bank accounts using a dictionary.\n   - Provides methods to create new accounts and retrieve existing accounts by account number.\n\nThis design follows basic object-oriented principles, encapsulating related data and behaviors within classes and ensuring that operations are performed in a controlled manner."
    }
]