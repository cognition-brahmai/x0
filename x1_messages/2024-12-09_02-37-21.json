[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add elements at the beginning, end, and a specific position, delete elements by value or position, and display the entire list."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python class for a singly linked list that includes methods to add elements at the beginning, end, and a specific position, delete elements by value or position, and display the entire list.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            raise ValueError(\"Position must be non-negative.\")\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        for _ in range(position - 1):\n            if current is None:\n                raise IndexError(\"Position out of range.\")\n            current = current.next\n        if current is None:\n            raise IndexError(\"Position out of range.\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if self.is_empty():\n            raise Exception(\"List is empty.\")\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == value:\n                current.next = current.next.next\n                return\n            current = current.next\n        raise ValueError(\"Value not found in list.\")\n\n    def delete_by_position(self, position):\n        if position < 0:\n            raise ValueError(\"Position must be non-negative.\")\n        if self.is_empty():\n            raise Exception(\"List is empty.\")\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        for _ in range(position - 1):\n            if current is None:\n                raise IndexError(\"Position out of range.\")\n            current = current.next\n        if current is None or current.next is None:\n            raise IndexError(\"Position out of range.\")\n        current.next = current.next.next\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_beginning(3)\n    sll.add_at_end(5)\n    sll.add_at_position(1, 4)\n    sll.display()  # Output: 3 -> 4 -> 5\n    sll.delete_by_value(4)\n    sll.display()  # Output: 3 -> 5\n    sll.delete_by_position(1)\n    sll.display()  # Output: 3\n```\n\n### Explanation:\n1. **Node Class**: Represents a single node in the linked list with `data` and `next` attributes.\n2. **SinglyLinkedList Class**:\n   - **__init__**: Initializes the head of the list.\n   - **is_empty**: Checks if the list is empty.\n   - **add_at_beginning**: Adds a new node with the given data at the beginning of the list.\n   - **add_at_end**: Adds a new node with the given data at the end of the list.\n   - **add_at_position**: Adds a new node with the given data at the specified position.\n   - **delete_by_value**: Deletes the first node containing the specified value.\n   - **delete_by_position**: Deletes the node at the specified position.\n   - **display**: Prints the entire list.\n\nThis implementation handles edge cases such as empty lists and invalid positions or values gracefully by raising appropriate exceptions."
    }
]