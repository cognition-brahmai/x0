[
    {
        "role": "user",
        "content": "Develop a Python function that determines whether a given integer is a power of two. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! To determine if a given integer is a power of two, we can use a simple mathematical property: a number is a power of two if it has exactly one bit set in its binary representation. For example, 1 (binary 1), 2 (binary 10), 4 (binary 100), 8 (binary 1000), etc., all have only one '1' in their binary form.\n\nHere's a Python function that checks this:\n\n```python\ndef is_power_of_two(n):\n    if n <= 0:\n        return False\n    return (n & (n - 1)) == 0\n```\n\n### Explanation:\n\n1. **Check for Non-Positive Numbers:**\n   - If `n` is less than or equal to 0, it cannot be a power of two. So, we immediately return `False`.\n\n2. **Bitwise Operation:**\n   - The expression `(n & (n - 1))` clears the least significant bit that is set to 1 in `n`.\n   - For powers of two, there is only one bit set to 1. Therefore, `(n & (n - 1))` should be 0.\n\n### Examples:\n\n- **Input:** 1\n  - Binary: 1\n  - `(1 & 0) = 0` \u2192 True\n\n- **Input:** 2\n  - Binary: 10\n  - `(2 & 1) = 0` \u2192 True\n\n- **Input:** 3\n  - Binary: 11\n  - `(3 & 2) = 2` \u2192 False\n\n- **Input:** 4\n  - Binary: 100\n  - `(4 & 3) = 0` \u2192 True\n\n- **Input:** 0\n  - Non-positive \u2192 False\n\nThis method is efficient and runs in constant time, making it suitable for quickly checking if a number is a power of two."
    }
]