[
    {
        "role": "user",
        "content": "In JavaScript, create a simple web application with Node.js and Express.js to manage a list of tasks. Each task should have a title, description, due date, and status (done or not done). The app should allow users to add, update, delete, and view tasks. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through building a simple task management web application using Node.js and Express.js. This app will allow users to perform basic CRUD operations on tasks: Create, Read, Update, and Delete.\n\n### Prerequisites\n\nBefore we start, make sure you have Node.js installed on your machine. You can download it from [nodejs.org](https://nodejs.org/). Also, having a code editor like Visual Studio Code is recommended.\n\n### Project Structure\n\nOur project will have the following structure:\n\n```\ntask-manager/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u251c\u2500\u2500 stylesheets/\n\u2502   \u2502   \u2514\u2500\u2500 style.css\n\u2502   \u2514\u2500\u2500 javascript/\n\u2502       \u2514\u2500\u2500 script.js\n\u251c\u2500\u2500 views/\n\u2502   \u251c\u2500\u2500 add-task.ejs\n\u2502   \u251c\u2500\u2500 edit-task.ejs\n\u2502   \u251c\u2500\u2500 index.ejs\n\u2502   \u2514\u2500\u2500 layout.ejs\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### Step 1: Set Up the Project\n\n1. **Initialize the project:**\n\n   Open your terminal and run:\n\n   ```bash\n   mkdir task-manager\n   cd task-manager\n   npm init -y\n   ```\n\n2. **Install necessary packages:**\n\n   Install Express, EJS (for templating), Body-parser (for parsing request bodies), and Dotenv (for environment variables):\n\n   ```bash\n   npm install express ejs body-parser dotenv\n   ```\n\n3. **Create environment variables:**\n\n   Create a `.env` file to store any environment variables. For now, it can be empty.\n\n### Step 2: Set Up the Server\n\n1. **Create `app.js`:**\n\n   This will be the entry point of our application.\n\n   ```javascript\n   require('dotenv').config();\n   const express = require('express');\n   const bodyParser = require('body-parser');\n\n   const app = express();\n\n   // View engine setup\n   app.set('view engine', 'ejs');\n\n   // Static files\n   app.use(express.static('public'));\n\n   // Body parser middleware\n   app.use(bodyParser.urlencoded({ extended: false }));\n   app.use(bodyParser.json());\n\n   // Routes\n   app.get('/', (req, res) => {\n       res.send('Welcome to Task Manager!');\n   });\n\n   const PORT = process.env.PORT || 3000;\n   app.listen(PORT, () => {\n       console.log(`Server is running on port ${PORT}`);\n   });\n   ```\n\n2. **Start the server:**\n\n   Run `node app.js` in your terminal. You should see \"Server is running on port 3000\" in the console. Open your browser and go to `http://localhost:3000` to see the welcome message.\n\n### Step 3: Set Up Views\n\nWe'll use EJS as our templating engine. Create the following EJS files in the `views` directory:\n\n1. **layout.ejs:**\n\n   This will be the base layout for all pages.\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>Task Manager</title>\n       <link rel=\"stylesheet\" href=\"/stylesheets/style.css\">\n   </head>\n   <body>\n       <header>\n           <h1>Task Manager</h1>\n           <nav>\n               <ul>\n                   <li><a href=\"/\">Home</a></li>\n                   <li><a href=\"/tasks\">Tasks</a></li>\n               </ul>\n           </nav>\n       </header>\n       <main>\n           <%- body %>\n       </main>\n       <footer>\n           <p>&copy; 2023 Task Manager</p>\n       </footer>\n       <script src=\"/javascript/script.js\"></script>\n   </body>\n   </html>\n   ```\n\n2. **index.ejs:**\n\n   This will display a list of tasks.\n\n   ```html\n   <h2>Tasks</h2>\n   <a href=\"/tasks/add\" class=\"btn btn-primary\">Add Task</a>\n   <ul>\n       <% tasks.forEach(task => { %>\n           <li>\n               <strong><%= task.title %></strong> - <%= task.description %> - Due: <%= task.dueDate %>\n               - Status: <%= task.status %>\n               <a href=\"/tasks/edit/<%= task.id %>\" class=\"btn btn-secondary\">Edit</a>\n               <form action=\"/tasks/delete/<%= task.id %>\" method=\"POST\" style=\"display:inline;\">\n                   <button type=\"submit\" class=\"btn btn-danger\">Delete</button>\n               </form>\n           </li>\n       <% }) %>\n   </ul>\n   ```\n\n3. **add-task.ejs:**\n\n   This will have a form to add a new task.\n\n   ```html\n   <h2>Add Task</h2>\n   <form action=\"/tasks\" method=\"POST\">\n       <div>\n           <label for=\"title\">Title:</label>\n           <input type=\"text\" id=\"title\" name=\"title\" required>\n       </div>\n       <div>\n           <label for=\"description\">Description:</label>\n           <textarea id=\"description\" name=\"description\" required></textarea>\n       </div>\n       <div>\n           <label for=\"dueDate\">Due Date:</label>\n           <input type=\"date\" id=\"dueDate\" name=\"dueDate\" required>\n       </div>\n       <div>\n           <label for=\"status\">Status:</label>\n           <select id=\"status\" name=\"status\">\n               <option value=\"not done\">Not Done</option>\n               <option value=\"done\">Done</option>\n           </select>\n       </div>\n       <button type=\"submit\" class=\"btn btn-primary\">Add Task</button>\n   </form>\n   ```\n\n4. **edit-task.ejs:**\n\n   This will have a form to edit an existing task.\n\n   ```html\n   <h2>Edit Task</h2>\n   <form action=\"/tasks/<%= task.id %>\" method=\"POST\">\n       <div>\n           <label for=\"title\">Title:</label>\n           <input type=\"text\" id=\"title\" name=\"title\" value=\"<%= task.title %>\" required>\n       </div>\n       <div>\n           <label for=\"description\">Description:</label>\n           <textarea id=\"description\" name=\"description\"><%= task.description %></textarea>\n       </div>\n       <div>\n           <label for=\"dueDate\">Due Date:</label>\n           <input type=\"date\" id=\"dueDate\" name=\"dueDate\" value=\"<%= task.dueDate %>\" required>\n       </div>\n       <div>\n           <label for=\"status\">Status:</label>\n           <select id=\"status\" name=\"status\">\n               <option value=\"not done\" <% if (task.status === 'not done') { %>selected<% } %>>Not Done</option>\n               <option value=\"done\" <% if (task.status === 'done') { %>selected<% } %>>Done</option>\n           </select>\n       </div>\n       <button type=\"submit\" class=\"btn btn-primary\">Update Task</button>\n   </form>\n   ```\n\n### Step 4: Set Up Public Assets\n\nCreate the `public` directory with `stylesheets` and `javascript` subdirectories.\n\n1. **style.css:**\n\n   ```css\n   body {\n       font-family: Arial, sans-serif;\n       margin: 0;\n       padding: 0;\n       background-color: #f4f4f4;\n   }\n\n   header {\n       background-color: #333;\n       color: #fff;\n       padding: 10px 20px;\n       text-align: center;\n   }\n\n   nav ul {\n       list-style-type: none;\n       padding: 0;\n   }\n\n   nav ul li {\n       display: inline;\n       margin-right: 10px;\n   }\n\n   nav ul li a {\n       color: #fff;\n       text-decoration: none;\n   }\n\n   main {\n       padding: 20px;\n   }\n\n   h1, h2 {\n       color: #333;\n   }\n\n   ul {\n       list-style-type: none;\n       padding: 0;\n   }\n\n   li {\n       background-color: #fff;\n       margin-bottom: 10px;\n       padding: 10px;\n       border-radius: 5px;\n   }\n\n   .btn {\n       display: inline-block;\n       padding: 8px 16px;\n       margin: 5px;\n       text-decoration: none;\n       border-radius: 5px;\n       transition: background-color 0.3s, color 0.3s;\n   }\n\n   .btn-primary {\n       background-color: #007bff;\n       color: #fff;\n   }\n\n   .btn-primary:hover {\n       background-color: #0056b3;\n   }\n\n   .btn-secondary {\n       background-color: #6c757d;\n       color: #fff;\n   }\n\n   .btn-secondary:hover {\n       background-color: #5a6268;\n   }\n\n   .btn-danger {\n       background-color: #dc3545;\n       color: #fff;\n   }\n\n   .btn-danger:hover {\n       background-color: #c82333;\n   }\n\n   form div {\n       margin-bottom: 10px;\n   }\n\n   form label {\n       display: block;\n       margin-bottom: 5px;\n   }\n\n   form input, form textarea, form select {\n       width: 100%;\n       padding: 8px;\n       box-sizing: border-box;\n   }\n\n   form button {\n       padding: 10px 20px;\n       background-color: #007bff;\n       color: #fff;\n       border: none;\n       border-radius: 5px;\n       cursor: pointer;\n   }\n\n   form button:hover {\n       background-color: #0056b3;\n   }\n   ```\n\n2. **script.js:**\n\n   For now, this file can be empty.\n\n### Step 5: Implement Routes and Controllers\n\nWe'll need to handle routes for adding, updating, deleting, and viewing tasks. Since we're building a simple app, we'll store tasks in an array in memory.\n\n1. **Create a tasks array:**\n\n   In `app.js`, add:\n\n   ```javascript\n   let tasks = [];\n\n   // Generate a unique ID for tasks\n   let idCounter = 1;\n\n   function getTaskById(id) {\n       return tasks.find(task => task.id === id);\n   }\n   ```\n\n2. **Define routes:**\n\n   In `app.js`, add the following routes:\n\n   - **Get all tasks:**\n\n     ```javascript\n     app.get('/tasks', (req, res) => {\n         res.render('index', { tasks });\n     });\n     ```\n\n   - **Add a task:**\n\n     ```javascript\n     app.post('/tasks', (req, res) => {\n         const { title, description, dueDate, status } = req.body;\n         const newTask = {\n             id: idCounter++,\n             title,\n             description,\n             dueDate,\n             status\n         };\n         tasks.push(newTask);\n         res.redirect('/tasks');\n     });\n     ```\n\n   - **Edit a task:**\n\n     ```javascript\n     app.get('/tasks/edit/:id', (req, res) => {\n         const task = getTaskById(parseInt(req.params.id));\n         if (!task) {\n             res.status(404).send('Task not found');\n             return;\n         }\n         res.render('edit-task', { task });\n     });\n\n     app.post('/tasks/:id', (req, res) => {\n         const taskId = parseInt(req.params.id);\n         const taskIndex = tasks.findIndex(task => task.id === taskId);\n         if (taskIndex === -1) {\n             res.status(404).send('Task not found');\n             return;\n         }\n         const updatedTask = {\n             id: taskId,\n             title: req.body.title,\n             description: req.body.description,\n             dueDate: req.body.dueDate,\n             status: req.body.status\n         };\n         tasks[taskIndex] = updatedTask;\n         res.redirect('/tasks');\n     });\n     ```\n\n   - **Delete a task:**\n\n     ```javascript\n     app.post('/tasks/delete/:id', (req, res) => {\n         const taskId = parseInt(req.params.id);\n         tasks = tasks.filter(task => task.id !== taskId);\n         res.redirect('/tasks');\n     });\n     ```\n\n   - **Add task page:**\n\n     ```javascript\n     app.get('/tasks/add', (req, res) => {\n         res.render('add-task');\n     });\n     ```\n\n### Step 6: Run the Application\n\n1. **Start the server:**\n\n   Run `node app.js` in your terminal.\n\n2. **Access the app:**\n\n   Open your browser and go to `http://localhost:3000/tasks`. You should see a list of tasks (which is empty initially). Click on \"Add Task\" to add new tasks, and you can edit or delete existing tasks from the list.\n\n### Conclusion\n\nCongratulations! You've built a simple task management web application using Node.js and Express.js. This app allows users to add, view, update, and delete tasks. You can further enhance this app by adding features like user authentication, better error handling, and a more stylish UI."
    }
]