[
    {
        "role": "user",
        "content": "Implement a queue data structure in JavaScript with methods for adding and removing elements. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Here's a simple implementation of a queue data structure in JavaScript, including methods for adding elements (`enqueue`), removing elements (`dequeue`), and checking the front element (`front`):\n\n```javascript\nclass Queue {\n  constructor() {\n    this.items = [];\n  }\n\n  // Add an element to the end of the queue\n  enqueue(element) {\n    this.items.push(element);\n  }\n\n  // Remove the front element from the queue\n  dequeue() {\n    if (this.isEmpty()) {\n      return \"Underflow\"; // Queue is empty\n    }\n    return this.items.shift();\n  }\n\n  // Get the front element of the queue without removing it\n  front() {\n    if (this.isEmpty()) {\n      return \"No elements in Queue\";\n    }\n    return this.items[0];\n  }\n\n  // Check if the queue is empty\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  // Get the number of elements in the queue\n  size() {\n    return this.items.length;\n  }\n}\n\n// Example usage:\nconst queue = new Queue();\nqueue.enqueue(1);\nqueue.enqueue(2);\nqueue.enqueue(3);\nconsole.log(queue.front()); // Output: 1\nconsole.log(queue.dequeue()); // Output: 1\nconsole.log(queue.front()); // Output: 2\nconsole.log(queue.size()); // Output: 2\n```\n\nThis implementation uses an array to store the elements of the queue. The `enqueue` method adds an element to the end of the array using the `push` method, while the `dequeue` method removes the front element using the `shift` method. The `front` method returns the first element of the array without removing it. The `isEmpty` method checks if the array is empty, and the `size` method returns the number of elements in the queue."
    }
]