[
    {
        "role": "user",
        "content": "Create a Golang function that calculates the factorial of a given number using recursion."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Go function that calculates the factorial of a given number using recursion:\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Factorial calculates the factorial of a given non-negative integer using recursion.\nfunc Factorial(n int) int {\n    if n == 0 {\n        return 1\n    }\n    return n * Factorial(n-1)\n}\n\nfunc main() {\n    var number int\n    fmt.Print(\"Enter a non-negative integer: \")\n    fmt.Scan(&number)\n    if number < 0 {\n        fmt.Println(\"Factorial is not defined for negative numbers.\")\n    } else {\n        result := Factorial(number)\n        fmt.Printf(\"The factorial of %d is %d\\n\", number, result)\n    }\n}\n```\n\n### Explanation:\n1. **Function Definition**:\n   - The `Factorial` function takes an integer `n` as input and returns its factorial.\n   - If `n` is 0, it returns 1 because the factorial of 0 is 1.\n   - Otherwise, it returns `n` multiplied by the factorial of `n-1`, which is the recursive step.\n\n2. **Main Function**:\n   - It prompts the user to enter a non-negative integer.\n   - It reads the input from the user.\n   - If the input is negative, it prints an error message since factorial is not defined for negative numbers.\n   - Otherwise, it calculates the factorial using the `Factorial` function and prints the result.\n\nThis code ensures that the factorial is calculated correctly using recursion and handles the base case appropriately."
    }
]