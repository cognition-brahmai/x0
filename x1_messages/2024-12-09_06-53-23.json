[
    {
        "role": "user",
        "content": "Write a C++ program that implements a simple calculator supporting addition, subtraction, multiplication, and division operations. The program should use a command-line interface where users can input expressions like \"5 + 3\" or \"9 / 2\", and it should output the result.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that acts as a command-line calculator, supporting addition, subtraction, multiplication, and division operations. Users can input expressions like \"5 + 3\" or \"9 / 2\", and the program will output the result.\n\n```cpp\n#include <iostream>\n#include <sstream>\n\nint main() {\n    std::string expression;\n    std::cout << \"Simple Calculator\\n\";\n    std::cout << \"Supported operations: +, -, *, /\\n\";\n    std::cout << \"Enter an expression (e.g., 5 + 3): \";\n    std::getline(std::cin, expression);\n\n    std::istringstream iss(expression);\n    double operand1, operand2;\n    char operation;\n\n    if (!(iss >> operand1 >> operation >> operand2)) {\n        std::cerr << \"Error: Invalid expression format.\\n\";\n        return 1;\n    }\n\n    double result;\n    switch (operation) {\n        case '+':\n            result = operand1 + operand2;\n            break;\n        case '-':\n            result = operand1 - operand2;\n            break;\n        case '*':\n            result = operand1 * operand2;\n            break;\n        case '/':\n            if (operand2 == 0) {\n                std::cerr << \"Error: Division by zero.\\n\";\n                return 1;\n            }\n            result = operand1 / operand2;\n            break;\n        default:\n            std::cerr << \"Error: Unsupported operation.\\n\";\n            return 1;\n    }\n\n    std::cout << \"Result: \" << result << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n1. **Input Handling**: The program reads a complete line of input using `std::getline` to capture the expression.\n2. **Parsing the Expression**: It uses `std::istringstream` to parse the input into two operands and one operator.\n3. **Performing the Operation**: Depending on the operator, it performs the corresponding arithmetic operation.\n4. **Error Handling**: It checks for invalid formats and division by zero errors and outputs appropriate error messages.\n\nTo compile and run this program, save it to a file (e.g., `calculator.cpp`), then use a C++ compiler like `g++`:\n\n```sh\ng++ -o calculator calculator.cpp\n./calculator\n```\n\nThis will launch the calculator, and you can enter expressions as prompted."
    }
]