[
    {
        "role": "user",
        "content": "Write a C# program that encrypts and decrypts text using the Caesar cipher.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! The Caesar cipher is a type of substitution cipher in which each letter in the plaintext is shifted a certain number of places down or up the alphabet. For example, with a shift of 1, 'A' would be replaced by 'B', 'B' would become 'C', and so on. The method is named after Julius Caesar, who used it in his private correspondence.\n\nIn this program, we'll create a simple C# console application that allows the user to encrypt and decrypt text using the Caesar cipher. The user will be prompted to choose between encryption and decryption, enter the text, and specify the shift value.\n\nHere's a step-by-step guide to creating this program:\n\n1. **Understanding the Caesar Cipher:**\n   - **Encryption:** Shift each letter in the plaintext by a fixed number of positions down the alphabet.\n   - **Decryption:** Shift each letter in the ciphertext by the same number of positions up the alphabet.\n\n2. **Handling User Input:**\n   - Choose between encryption and decryption.\n   - Enter the text to be processed.\n   - Specify the shift value.\n\n3. **Implementing the Cipher:**\n   - Create functions for encryption and decryption.\n   - Handle wrapping around the alphabet (e.g., 'Z' shifted by 1 becomes 'A').\n\n4. **Considerations:**\n   - Preserve the case of the letters.\n   - Ignore non-alphabetic characters.\n   - Handle invalid inputs gracefully.\n\n5. **Testing:**\n   - Test the program with various inputs and shift values.\n   - Ensure that decryption reverses the encryption correctly.\n\nLet's dive into the code. I'll explain each part as we go along.\n\n## Final Solution\nTo create a C# program that encrypts and decrypts text using the Caesar cipher, follow these steps:\n\n### Approach\n\n1. **Understanding the Caesar Cipher:**\n   - **Encryption:** Shift each letter in the plaintext by a fixed number of positions down the alphabet.\n   - **Decryption:** Shift each letter in the ciphertext by the same number of positions up the alphabet.\n\n2. **Handling User Input:**\n   - Choose between encryption and decryption.\n   - Enter the text to be processed.\n   - Specify the shift value.\n\n3. **Implementing the Cipher:**\n   - Create functions for encryption and decryption.\n   - Handle wrapping around the alphabet (e.g., 'Z' shifted by 1 becomes 'A').\n\n4. **Considerations:**\n   - Preserve the case of the letters.\n   - Ignore non-alphabetic characters.\n   - Handle invalid inputs gracefully.\n\n5. **Testing:**\n   - Test the program with various inputs and shift values.\n   - Ensure that decryption reverses the encryption correctly.\n\n### Solution Code\n\n```csharp\nusing System;\n\nclass CaesarCipher\n{\n    static void Main()\n    {\n        Console.WriteLine(\"Caesar Cipher Program\");\n        Console.WriteLine(\"----------------------\");\n\n        // Prompt user for choice: encrypt or decrypt\n        Console.WriteLine(\"Choose an option:\");\n        Console.WriteLine(\"1. Encrypt\");\n        Console.WriteLine(\"2. Decrypt\");\n        int choice = Convert.ToInt32(Console.ReadLine());\n\n        // Prompt user for text input\n        Console.WriteLine(\"Enter the text:\");\n        string text = Console.ReadLine();\n\n        // Prompt user for shift value\n        Console.WriteLine(\"Enter the shift value (1-25):\");\n        int shift = Convert.ToInt32(Console.ReadLine());\n\n        // Validate shift value\n        if (shift < 1 || shift > 25)\n        {\n            Console.WriteLine(\"Shift value must be between 1 and 25.\");\n            return;\n        }\n\n        // Perform encryption or decryption based on user choice\n        string result = \"\";\n        if (choice == 1)\n        {\n            result = Encrypt(text, shift);\n            Console.WriteLine(\"Encrypted text: \" + result);\n        }\n        else if (choice == 2)\n        {\n            result = Decrypt(text, shift);\n            Console.WriteLine(\"Decrypted text: \" + result);\n        }\n        else\n        {\n            Console.WriteLine(\"Invalid choice.\");\n        }\n    }\n\n    // Function to encrypt text\n    static string Encrypt(string text, int shift)\n    {\n        char[] buffer = text.ToCharArray();\n        for (int i = 0; i < buffer.Length; i++)\n        {\n            char letter = buffer[i];\n            if (char.IsLetter(letter))\n            {\n                char offset = char.IsUpper(letter) ? 'A' : 'a';\n                letter = (char)((letter + shift - offset) % 26 + offset);\n                buffer[i] = letter;\n            }\n        }\n        return new string(buffer);\n    }\n\n    // Function to decrypt text\n    static string Decrypt(string text, int shift)\n    {\n        // Decrypting is the same as encrypting with a negative shift\n        return Encrypt(text, 26 - shift);\n    }\n}\n```\n\n### Explanation\n\n1. **User Input Handling:**\n   - The program starts by asking the user to choose between encryption and decryption.\n   - It then prompts for the text to be processed and the shift value.\n\n2. **Input Validation:**\n   - The shift value is validated to ensure it is between 1 and 25.\n\n3. **Encryption Function:**\n   - Shifts each letter in the text by the specified number of positions.\n   - Wraps around the alphabet using modulo operation.\n   - Preserves the case of the letters.\n\n4. **Decryption Function:**\n   - Uses the encryption function with a shifted value of `(26 - shift)` to reverse the encryption.\n\n5. **Output:**\n   - Displays the encrypted or decrypted text based on the user's choice.\n\nThis program provides a simple and effective way to apply the Caesar cipher for basic text encryption and decryption."
    }
]