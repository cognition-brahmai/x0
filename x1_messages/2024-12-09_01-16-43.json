[
    {
        "role": "user",
        "content": "Implement a C++ class representing a simple bank account with methods for depositing, withdrawing, and checking the balance. The class should prevent overdrawing the account and throw appropriate exceptions when invalid operations are attempted.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a simple bank account class in C++. This class will have methods to deposit funds, withdraw funds, and check the current balance. We'll also make sure that the account cannot be overdrawn by throwing exceptions when invalid operations are attempted.\n\nFirst, we need to include the necessary headers. We'll use `<iostream>` for input and output, `<stdexcept>` for throwing exceptions, and `<utility>` for using `std::pair` if needed.\n\n```cpp\n#include <iostream>\n#include <stdexcept>\n#include <utility>\n```\n\nNow, let's define the class `BankAccount`. It will have private members to store the account balance and perhaps an account identifier.\n\n```cpp\nclass BankAccount {\nprivate:\n    double balance;\n    std::string accountID;\n};\n```\n\nWe'll need a constructor to initialize the account with an ID and an initial balance.\n\n```cpp\nBankAccount(std::string id, double initialBalance)\n    : accountID(std::move(id)), balance(initialBalance) {\n        if (balance < 0) {\n            throw std::invalid_argument(\"Initial balance cannot be negative.\");\n        }\n    }\n```\n\nNext, we'll implement the deposit method, which adds funds to the account.\n\n```cpp\nvoid deposit(double amount) {\n    if (amount < 0) {\n        throw std::invalid_argument(\"Deposit amount cannot be negative.\");\n    }\n    balance += amount;\n}\n```\n\nFor the withdrawal method, we need to check if the account has sufficient funds before allowing the withdrawal.\n\n```cpp\nvoid withdraw(double amount) {\n    if (amount < 0) {\n        throw std::invalid_argument(\"Withdrawal amount cannot be negative.\");\n    }\n    if (amount > balance) {\n        throw std::runtime_error(\"Insufficient funds.\");\n    }\n    balance -= amount;\n}\n```\n\nFinally, we'll provide a method to check the current balance.\n\n```cpp\ndouble getBalance() const {\n    return balance;\n}\n```\n\nTo make it complete, let's also include a method to get the account ID.\n\n```cpp\nstd::string getAccountID() const {\n    return accountID;\n}\n```\n\nPutting it all together, here's the full class definition:\n\n```cpp\n#include <iostream>\n#include <stdexcept>\n#include <utility>\n\nclass BankAccount {\nprivate:\n    double balance;\n    std::string accountID;\n\npublic:\n    BankAccount(std::string id, double initialBalance)\n        : accountID(std::move(id)), balance(initialBalance) {\n            if (balance < 0) {\n                throw std::invalid_argument(\"Initial balance cannot be negative.\");\n            }\n        }\n\n    void deposit(double amount) {\n        if (amount < 0) {\n            throw std::invalid_argument(\"Deposit amount cannot be negative.\");\n        }\n        balance += amount;\n    }\n\n    void withdraw(double amount) {\n        if (amount < 0) {\n            throw std::invalid_argument(\"Withdrawal amount cannot be negative.\");\n        }\n        if (amount > balance) {\n            throw std::runtime_error(\"Insufficient funds.\");\n        }\n        balance -= amount;\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n\n    std::string getAccountID() const {\n        return accountID;\n    }\n};\n```\n\nYou can now create instances of `BankAccount`, deposit and withdraw funds, and check balances while ensuring that the account doesn't go into a negative balance. If any invalid operation is attempted, appropriate exceptions will be thrown.\n\n**Example Usage:**\n\n```cpp\nint main() {\n    try {\n        BankAccount acc(\"12345\", 1000.0);\n        std::cout << \"Initial balance: \" << acc.getBalance() << std::endl;\n\n        acc.deposit(500.0);\n        std::cout << \"Balance after deposit: \" << acc.getBalance() << std::endl;\n\n        acc.withdraw(200.0);\n        std::cout << \"Balance after withdrawal: \" << acc.getBalance() << std::endl;\n\n        // This should throw an exception\n        acc.withdraw(1500.0);\n    } catch (const std::exception& e) {\n        std::cerr << \"Exception: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\nIn this example, the initial balance is 1000.0. After depositing 500.0, the balance becomes 1500.0. Then, withdrawing 200.0 reduces it to 1300.0. Attempting to withdraw 1500.0 from 1300.0 will throw an \"Insufficient funds.\" exception.\n\n**Explanation:**\n\n1. **Constructor:** Initializes the account with an ID and a starting balance. It checks if the initial balance is negative and throws an exception if it is.\n2. **Deposit Method:** Adds funds to the account. It checks if the deposit amount is negative and throws an exception if it is.\n3. **Withdraw Method:** Subtracts funds from the account if sufficient balance exists. It checks if the withdrawal amount is negative or exceeds the current balance and throws exceptions accordingly.\n4. **getBalance Method:** Returns the current balance of the account.\n5. **getAccountID Method:** Returns the account ID.\n\nThis simple bank account class ensures basic constraints are met and provides clear feedback through exceptions when operations cannot be performed."
    }
]