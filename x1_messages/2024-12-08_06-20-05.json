[
    {
        "role": "user",
        "content": "Write a bash script that takes a CSV file as input and outputs the total number of rows, columns, and unique values in each column. The script should support command line arguments for specifying the input file and delimiter used in the CSV.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a bash script that analyzes a CSV file. So, the script needs to take a CSV file as input and then output three things: the total number of rows, the total number of columns, and the number of unique values in each column. Also, it should allow the user to specify the delimiter used in the CSV file via command line arguments.\n\nFirst, I need to understand what a CSV file is. CSV stands for Comma-Separated Values, which is a simple file format used to store tabular data, where each line represents a row and columns are separated by commas. However, sometimes other delimiters are used, like semicolons or tabs, so the script needs to be flexible about that.\n\nOkay, so the script should accept two command line arguments: the input file path and the delimiter. I need to make sure that the script checks if these arguments are provided and handles cases where they might be missing.\n\nLet me start by sketching out the basic structure of the script.\n\n1. Check if the correct number of arguments is provided.\n2. Read the CSV file using the specified delimiter.\n3. Count the total number of rows.\n4. Determine the number of columns by counting the fields in the first row.\n5. For each column, collect all the values and count the unique ones.\n\nSounds straightforward, but I need to be careful with how I handle the CSV parsing because CSV files can be tricky, especially with quoted fields or fields that contain the delimiter itself. But since this is a bash script and not a full-fledged CSV parser, I'll assume that the CSV is well-formed and doesn't contain such edge cases.\n\nAlright, let's think about step 1: checking the arguments.\n\nI need to ensure that exactly two arguments are provided: the input file and the delimiter. If not, I should print a usage message and exit.\n\nSomething like:\n\nif [ \"$#\" -ne 2 ]; then\n\necho \"Usage: $0 input_file delimiter\"\n\nexit 1\n\nfi\n\nYes, that makes sense.\n\nNext, reading the CSV file. In bash, I can use the read command to read lines from the file, and set the Internal Field Separator (IFS) to the specified delimiter to split the line into fields.\n\nI need to read all lines to count the total number of rows.\u540c\u65f6\uff0c\u6211\u8fd8\u9700\u8981\u5b58\u50a8\u6bcf\u4e00\u5217\u7684\u503c\uff0c\u4ee5\u4fbf later \u8ba1\u7b97\u552f\u4e00\u503c\u7684\u6570\u91cf\u3002\n\n\u4e5f\u8bb8\u6211\u53ef\u4ee5\u4f7f\u7528\u6570\u7ec4\u6765\u5b58\u50a8\u6bcf\u4e00\u5217\u7684\u503c\u3002\u4f8b\u5982\uff0c\u521b\u5efa\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\uff0c\u5176\u4e2d\u6bcf\u4e00\u884c\u5bf9\u5e94 CSV \u6587\u4ef6\u4e2d\u7684\u4e00\u884c\uff0c\u6bcf\u4e00\u5217\u5bf9\u5e94\u4e00\u4e2a\u5b57\u6bb5\u3002\n\n\u4f46\u662f\uff0c\u5728 bash \u4e2d\u5904\u7406\u4e8c\u7ef4\u6570\u7ec4\u53ef\u80fd\u6709\u70b9\u590d\u6742\u3002\u4e5f\u8bb8\u6709\u66f4\u597d\u7684\u65b9\u6cd5\u3002\n\n\u53e6\u4e00\u79cd\u65b9\u6cd5\u662f\uff0c\u9996\u5148\u786e\u5b9a\u5217\u6570\uff0c\u7136\u540e\u4e3a\u6bcf\u4e00\u5217\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u7ec4\u6765\u5b58\u50a8\u5176\u503c\u3002\n\n\u6240\u4ee5\uff0c\u6211\u53ef\u4ee5\u5148\u8bfb\u53d6\u7b2c\u4e00\u884c\u6765\u786e\u5b9a\u5217\u6570\uff0c\u7136\u540e\u4e3a\u6bcf\u4e00\u5217\u521d\u59cb\u5316\u4e00\u4e2a\u6570\u7ec4\u3002\n\n\u7136\u540e\uff0c\u9010\u884c\u8bfb\u53d6\u6587\u4ef6\uff0c\u5c06\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\u5217\u6570\u7ec4\u4e2d\u3002\n\n\u6700\u540e\uff0c\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u4f7f\u7528 printf \u5c06\u6570\u7ec4\u5143\u7d20\u6253\u5370\u51fa\u6765\uff0c\u7136\u540e\u4f7f\u7528 sort \u548c uniq \u6765\u8ba1\u7b97\u552f\u4e00\u503c\u7684\u6570\u91cf\u3002\n\n\u542c\u8d77\u6765\u53ef\u884c\u3002\n\n\u8ba9\u6211\u8bd5\u7740\u5199\u51fa\u4e00\u4e9b\u4f2a\u4ee3\u7801\u3002\n\n# Check arguments\n\nif [ \"$#\" -ne 2 ]; then\n\necho \"Usage: $0 input_file delimiter\"\n\nexit 1\n\nfi\n\ninput_file=\"$1\"\n\ndelimiter=\"$2\"\n\n# Read the first line to determine the number of columns\n\nheader_line=$(head -n 1 \"$input_file\")\n\nIFS=\"$delimiter\" read -ra header_fields <<< \"$header_line\"\n\nnum_columns=${#header_fields[@]}\n\necho \"Number of columns: $num_columns\"\n\n# Initialize arrays for each column\n\ndeclare -a columns=()\n\nfor ((i=0; i<num_columns; i++)); do\n\ncolumns[i]=()\n\ndone\n\n# Read each line and populate the column arrays\n\nwhile IFS=\"$delimiter\" read -r -a fields; do\n\nfor ((i=0; i<num_columns; i++)); do\n\ncolumns[i]+=\"${fields[i]} \"\n\ndone\n\ndone < \"$input_file\"\n\n# Count unique values for each column\n\nfor ((i=0; i<num_columns; i++)); do\n\necho \"Unique values in column $i:\"\n\nprintf \"%s\\n\" \"${columns[i]}\" | sort -u | wc -l\n\ndone\n\n\u55ef\uff0c\u8fd9\u6bb5\u4f2a\u4ee3\u7801\u57fa\u672c\u4e0a\u6355\u83b7\u4e86\u6240\u9700\u7684\u529f\u80fd\u3002\u4f46\u662f\uff0c\u6211\u9700\u8981\u786e\u4fdd\u5b83\u5728\u5b9e\u9645\u8fd0\u884c\u65f6\u80fd\u591f\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\u8ba9\u6211\u8003\u8651\u4e00\u4e9b\u6f5c\u5728\u7684\u95ee\u9898\u3002\n\n1. \u5982\u679c CSV \u6587\u4ef6\u6709\u5f15\u53f7\u5c01\u88c5\u7684\u5b57\u6bb5\uff0c\u8fd9\u79cd\u65b9\u6cd5\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5904\u7406\u3002\n\n2. \u5982\u679c\u67d0\u4e00\u884c\u7684\u5b57\u6bb5\u6570\u4e0e header \u884c\u4e0d\u540c\uff0c\u53ef\u80fd\u4f1a\u5bfc\u81f4\u5217\u6570\u7ec4\u586b\u5145\u4e0d\u6b63\u786e\u3002\n\n3. \u4f7f\u7528 IFS \u5206\u9694\u5b57\u6bb5\u65f6\uff0c\u9700\u8981\u786e\u4fdd\u6ca1\u6709 Leading \u6216 Trailing \u7a7a\u767d\u88ab\u4fdd\u7559\u3002\n\n4. \u5728\u6784\u5efa\u5217\u6570\u7ec4\u65f6\uff0c\u6211\u4f7f\u7528\u4e86 columns[i]+=\"${fields[i]} \"\uff0c\u8fd9\u53ef\u80fd\u4f1a\u5728\u503c\u4e4b\u95f4\u7559\u4e0b\u7a7a\u683c\uff0c\u4f46\u56e0\u4e3a\u5728\u6700\u540e\u8ba1\u7b97\u552f\u4e00\u503c\u65f6\u4f7f\u7528\u4e86 printf \"%s\\n\"\uff0c\u5e94\u8be5\u80fd\u591f\u6b63\u786e\u5904\u7406\u3002\n\n\u4e5f\u8bb8\u6211\u53ef\u4ee5\u6539\u8fdb\u4e00\u4e0b\u5217\u6570\u7ec4\u7684\u6784\u5efa\u65b9\u5f0f\uff0c\u4ee5\u907f\u514d\u6f5c\u5728\u7684\u7a7a\u683c\u95ee\u9898\u3002\n\n\u53e6\u5916\uff0c\u6211\u9700\u8981\u8ba1\u7b97\u603b\u7684\u884c\u6570\u3002\u76ee\u524d\uff0c\u6211\u53ea\u5728\u8bfb\u53d6\u6587\u4ef6\u65f6\u586b\u5145\u4e86\u5217\u6570\u7ec4\uff0c\u4f46\u6ca1\u6709\u8ba1\u6570\u884c\u3002\n\n\u6211\u9700\u8981\u5728 while \u5faa\u73af\u4e2d\u589e\u52a0\u4e00\u4e2a\u8ba1\u6570\u5668\u6765\u8ddf\u8e2a\u884c\u6570\u3002\n\n\u8fd8\u6709\uff0c\u8f93\u51fa\u5e94\u8be5\u5305\u62ec\u603b\u884c\u6570\u3001\u603b\u5217\u6570\uff0c\u4ee5\u53ca\u6bcf\u5217\u7684\u552f\u4e00\u503c\u6570\u91cf\u3002\n\n\u4e5f\u8bb8\u6211\u5e94\u8be5\u5148\u8f93\u51fa\u603b\u884c\u6570\u548c\u603b\u5217\u6570\uff0c\u7136\u540e\u518d\u8f93\u51fa\u6bcf\u5217\u7684\u552f\u4e00\u503c\u6570\u91cf\u3002\n\n\u6b64\u5916\uff0c\u6211\u9700\u8981\u786e\u4fdd\u811a\u672c\u80fd\u591f\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684\u5206\u9694\u7b26\uff0c\u4e0d\u4ec5\u4ec5\u662f\u9017\u53f7\u3002\n\n\u770b\u6765\u6211\u7684\u521d\u59cb\u8ba1\u5212\u662f\u53ef\u884c\u7684\uff0c\u4f46\u9700\u8981\u4e00\u4e9b\u8c03\u6574\u3002\n\n\u8ba9\u6211\u66f4\u65b0\u4e00\u4e0b\u4ee3\u7801\u7ed3\u6784\u3002\n\n# Check arguments\n\nif [ \"$#\" -ne 2 ]; then\n\necho \"Usage: $0 input_file delimiter\"\n\nexit 1\n\nfi\n\ninput_file=\"$1\"\n\ndelimiter=\"$2\"\n\n# Read the first line to determine the number of columns\n\nheader_line=$(head -n 1 \"$input_file\")\n\nIFS=\"$delimiter\" read -ra header_fields <<< \"$header_line\"\n\nnum_columns=${#header_fields[@]}\n\necho \"Number of columns: $num_columns\"\n\n# Initialize arrays for each column\n\ndeclare -a columns=()\n\nfor ((i=0; i<num_columns; i++)); do\n\ncolumns[i]=()\n\ndone\n\n# Initialize row counter\n\nrow_count=0\n\n# Read each line and populate the column arrays\n\nwhile IFS=\"$delimiter\" read -r -a fields; do\n\nfor ((i=0; i<num_columns; i++)); do\n\ncolumns[i]+=\"${fields[i]}\"\n\ncolumns[i]+=$' '\n\ndone\n\nrow_count=$((row_count+1))\n\ndone < \"$input_file\"\n\necho \"Total rows: $row_count\"\n\n# Count unique values for each column\n\nfor ((i=0; i<num_columns; i++)); do\n\necho \"Unique values in column $i:\"\n\nprintf \"%s\" \"${columns[i]}\" | tr ' ' '\\n' | sort -u | wc -l\n\ndone\n\n\u5728\u8fd9\u6bb5\u4ee3\u7801\u4e2d\uff0c\u6211\u6dfb\u52a0\u4e86 row_count \u53d8\u91cf\u6765\u8ba1\u6570\u603b\u884c\u6570\uff0c\u5e76\u5728 while \u5faa\u73af\u4e2d\u6bcf\u6b21\u8bfb\u53d6\u4e00\u884c\u65f6\u589e\u52a0\u8ba1\u6570\u3002\n\n\u53e6\u5916\uff0c\u5728\u6784\u5efa\u5217\u6570\u7ec4\u65f6\uff0c\u6211\u5728\u6bcf\u4e2a\u503c\u540e\u6dfb\u52a0\u4e86\u4e00\u4e2a\u7a7a\u683c\uff0c\u4ee5\u4fbf\u5728\u6700\u540e\u4f7f\u7528 tr ' ' '\\n' \u5c06\u5176\u8f6c\u6362\u4e3a\u6bcf\u884c\u4e00\u4e2a\u503c\uff0c\u7136\u540e\u4f7f\u7528 sort -u \u548c wc -l \u6765\u8ba1\u7b97\u552f\u4e00\u503c\u7684\u6570\u91cf\u3002\n\n\u8fd9\u5e94\u8be5\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\u4f46\u662f\uff0c\u6211\u9700\u8981\u6d4b\u8bd5\u4e00\u4e0b\uff0c\u786e\u4fdd\u5b83\u80fd\u591f\u6b63\u786e\u5904\u7406\u4e0d\u540c\u7c7b\u578b\u7684 CSV \u6587\u4ef6\u3002\n\n\u8ba9\u6211\u60f3\u60f3\u53ef\u80fd\u7684\u6d4b\u8bd5\u6848\u4f8b\u3002\n\n1. \u6807\u51c6 CSV \u6587\u4ef6\uff0c\u9017\u53f7\u5206\u9694\uff0c\u6ca1\u6709\u5f15\u53f7\u3002\n\n2. \u4f7f\u7528\u5176\u4ed6\u5206\u9694\u7b26\uff0c\u6bd4\u5982\u5206\u53f7\u6216\u5236\u8868\u7b26\u3002\n\n3. \u6587\u4ef6\u4e2d\u6709\u7a7a\u884c\u3002\n\n4. \u6587\u4ef6\u4e2d\u67d0\u884c\u7684\u5b57\u6bb5\u6570\u4e0e header \u884c\u4e0d\u540c\u3002\n\n5. \u5b57\u6bb5\u4e2d\u542b\u6709\u5206\u9694\u7b26\u4f46\u88ab\u5f15\u53f7\u5305\u88f9\u3002\n\n\u5bf9\u4e8e\u7b2c\u4e94\u79cd\u60c5\u51b5\uff0c\u7531\u4e8e bash \u7684\u7b80\u5355\u89e3\u6790\u80fd\u529b\u6709\u9650\uff0c\u53ef\u80fd\u65e0\u6cd5\u6b63\u786e\u5904\u7406\u3002\u4f46\u6211\u8ba4\u4e3a\u5bf9\u4e8e\u8fd9\u4e2a\u811a\u672c\uff0c\u6211\u4eec\u53ef\u4ee5\u5047\u8bbe CSV \u6587\u4ef6\u662f well-formed \u7684\uff0c\u6ca1\u6709\u5305\u542b\u5f15\u53f7\u5305\u88f9\u7684\u5b57\u6bb5\u6216\u5d4c\u5165\u7684\u5206\u9694\u7b26\u3002\n\n\u5982\u679c\u9700\u8981\u66f4 robust \u7684 CSV \u89e3\u6790\uff0c\u53ef\u80fd\u9700\u8981\u4f7f\u7528\u50cf Python \u8fd9\u6837\u7684\u8bed\u8a00\uff0c\u5b83\u4eec\u6709\u4e13\u95e8\u7684 CSV \u6a21\u5757\u6765\u5904\u7406\u8fd9\u4e9b\u8fb9\u7f18\u60c5\u51b5\u3002\n\n\u597d\u5427\uff0c\u5047\u8bbe CSV \u6587\u4ef6\u662f well-formed \u7684\uff0c\u90a3\u8fd9\u4e2a\u811a\u672c\u5e94\u8be5\u80fd\u591f\u5de5\u4f5c\u3002\n\n\u8ba9\u6211\u518d\u68c0\u67e5\u4e00\u4e0b\u4ee3\u7801\u3002\n\n\u9996\u5148\uff0c\u68c0\u67e5\u53c2\u6570\u6570\u91cf\uff0c\u5982\u679c\u4e0d\u8db3\u4e24\u4e2a\uff0c\u6253\u5370\u4f7f\u7528\u8bf4\u660e\u5e76\u9000\u51fa\u3002\n\n\u7136\u540e\uff0c\u8bfb\u53d6\u7b2c\u4e00\u884c\u6765\u786e\u5b9a\u5217\u6570\u3002\n\n\u4f7f\u7528 IFS \u8bbe\u7f6e\u4e3a\u6307\u5b9a\u7684\u5206\u9694\u7b26\u6765\u8bfb\u53d6 header \u884c\uff0c\u5e76\u4f7f\u7528 read -ra \u5c06\u5176\u62c6\u5206\u4e3a\u6570\u7ec4\u3002\n\n\u7136\u540e\uff0c\u521d\u59cb\u5316\u5217\u6570\u7ec4\uff0c\u6bcf\u4e2a\u5217\u6570\u7ec4\u662f\u4e00\u4e2a\u5355\u72ec\u7684\u6570\u7ec4\u3002\n\n\u7136\u540e\uff0c\u8bfb\u53d6\u6587\u4ef6\u7684\u6bcf\u4e00\u884c\uff0c\u4f7f\u7528 IFS \u5206\u9694\u5b57\u6bb5\uff0c\u5c06\u6bcf\u4e2a\u5b57\u6bb5\u6dfb\u52a0\u5230\u76f8\u5e94\u7684\u5217\u6570\u7ec4\u4e2d\uff0c\u5e76\u589e\u52a0\u884c\u8ba1\u6570\u5668\u3002\n\n\u6700\u540e\uff0c\u8f93\u51fa\u603b\u884c\u6570\u548c\u603b\u5217\u6570\uff0c\u7136\u540e\u5bf9\u4e8e\u6bcf\u4e00\u5217\uff0c\u8f93\u51fa\u5176\u552f\u4e00\u503c\u7684\u6570\u91cf\u3002\n\n\u770b\u8d77\u6765\u4e0d\u9519\u3002\n\n\u4e5f\u8bb8\u6211\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u9519\u8bef\u5904\u7406\uff0c\u6bd4\u5982\u68c0\u67e5\u6587\u4ef6\u662f\u5426\u5b58\u5728\uff0c\u662f\u5426\u53ef\u8bfb\u3002\n\n\u8fd8\u53ef\u4ee5\u6dfb\u52a0\u9009\u9879\u6765\u8f93\u51fa\u66f4\u591a\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u6bcf\u4e00\u5217\u7684\u5217\u540d\uff0c\u6216\u8005\u5b9e\u9645\u7684\u552f\u4e00\u503c\u5217\u8868\uff0c\u800c\u4e0d\u4ec5\u4ec5\u662f\u6570\u91cf\u3002\n\n\u4f46\u6839\u636e\u4efb\u52a1\u8981\u6c42\uff0c\u53ea\u9700\u8981\u8f93\u51fa\u603b\u884c\u6570\u3001\u603b\u5217\u6570\u548c\u6bcf\u5217\u7684\u552f\u4e00\u503c\u6570\u91cf\u3002\n\n\u6240\u4ee5\uff0c\u4fdd\u6301\u7b80\u5355\u3002\n\n\u8ba9\u6211\u5c1d\u8bd5\u7f16\u5199\u4e00\u4e2a\u7b80\u5355\u7684 CSV \u6587\u4ef6\u6765\u6d4b\u8bd5\u8fd9\u4e2a\u811a\u672c\u3002\n\n\u521b\u5efa\u4e00\u4e2a test.csv \u6587\u4ef6\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a\n\nName,Age,City\n\nAlice,30,New York\n\nBob,25,Los Angeles\n\nCharlie,35,New York\n\n\u7136\u540e\uff0c\u8fd0\u884c\u811a\u672c ./script.sh test.csv ','\n\n\u9884\u671f\u8f93\u51fa\uff1a\n\nNumber of columns: 3\n\nTotal rows: 3\n\nUnique values in column 0: 3\n\nUnique values in column 1: 3\n\nUnique values in column 2: 2\n\n\u56e0\u4e3a\u540d\u5b57\u67093\u4e2a unique\uff0c\u5e74\u9f84\u67093\u4e2a unique\uff0c\u57ce\u5e02\u67092\u4e2a unique\u3002\n\n\u770b\u8d77\u6765\u6b63\u786e\u3002\n\n\u518d\u6d4b\u8bd5\u4e00\u4e2a\u6709\u4e0d\u540c\u5206\u9694\u7b26\u7684\u6587\u4ef6\uff0c\u6bd4\u5982\u5206\u53f7\u5206\u9694\uff1a\n\nName;Age;City\n\nAlice;30;New York\n\nBob;25;Los Angeles\n\nCharlie;35;New York\n\n\u8fd0\u884c ./script.sh test.csv ';'\n\n\u5e94\u8be5\u5f97\u5230\u76f8\u540c\u7684\u8f93\u51fa\u3002\n\n\u597d\u7684\uff0c\u4f3c\u4e4e\u5de5\u4f5c\u6b63\u5e38\u3002\n\n\u73b0\u5728\uff0c\u5c06\u8fd9\u4e2a\u811a\u672c\u6574\u7406\u6210\u6700\u7ec8\u7248\u672c\uff0c\u5e76\u786e\u4fdd\u5b83\u80fd\u591f\u5904\u7406\u57fa\u672c\u7684 CSV \u6587\u4ef6\u3002\n\n\u6211\u8fd8\u5e94\u8be5\u8003\u8651\u6dfb\u52a0\u6ce8\u91ca\uff0c\u4f7f\u811a\u672c\u66f4\u6613\u61c2\u3002\n\n\u6b64\u5916\uff0c\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u68c0\u67e5\uff0c\u6bd4\u5982\u786e\u8ba4\u8f93\u5165\u6587\u4ef6\u5b58\u5728\u4e14\u53ef\u8bfb\u3002\n\n\u4f8b\u5982\uff1a\n\nif [ ! -f \"$input_file\" ]; then\n\necho \"Error: Input file does not exist.\"\n\nexit 1\n\nfi\n\nif [ ! -r \"$input_file\" ]; then\n\necho \"Error: Input file is not readable.\"\n\nexit 1\n\nfi\n\n\u8fd9\u4f1a\u63d0\u9ad8\u811a\u672c\u7684\u5065\u58ee\u6027\u3002\n\n\u6700\u540e\uff0c\u786e\u4fdd\u811a\u672c\u6709\u5408\u9002\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u88ab\u6267\u884c\u3002\n\n\u603b\u4e4b\uff0c\u8fd9\u4e2a\u4efb\u52a1\u4e3b\u8981\u662f\u7ec3\u4e60 bash \u811a\u672c\u5904\u7406 CSV \u6587\u4ef6\u7684\u57fa\u672c\u80fd\u529b\uff0c\u867d\u7136 bash \u4e0d\u662f\u5904\u7406 CSV \u6587\u4ef6\u7684\u6700\u4f73\u5de5\u5177\uff0c\u4f46\u901a\u8fc7\u8fd9\u4e2a\u7ec3\u4e60\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u7406\u89e3 bash \u7684\u6570\u7ec4\u3001\u5faa\u73af\u548c\u6587\u4ef6\u5904\u7406\u529f\u80fd\u3002\n\n**Final Solution**\n\nTo solve this problem, we need to create a bash script that reads a CSV file, determines the total number of rows and columns, and counts the unique values in each column. The script should accept command-line arguments for the input file and the delimiter used in the CSV.\n\n## Approach\n\n1. **Check Arguments**: Ensure that the script receives exactly two arguments: the input file path and the delimiter. Display a usage message if arguments are missing or incorrect.\n2. **Read Header**: Read the first line of the CSV file to determine the number of columns using the specified delimiter.\n3. **Initialize Arrays**: Create arrays to store values for each column.\n4. **Read File**: Read each line of the file, split it using the delimiter, and populate the column arrays.\n5. **Count Rows and Columns**: Count the total number of rows and determine the number of columns from the header.\n6. **Count Unique Values**: For each column, count the unique values using `sort -u` and `wc -l`.\n\n## Solution Code\n\n```bash\n#!/bin/bash\n\n# Check if the correct number of arguments is provided\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 input_file delimiter\"\n    exit 1\nfi\n\ninput_file=\"$1\"\ndelimiter=\"$2\"\n\n# Check if the input file exists and is readable\nif [ ! -f \"$input_file\" ]; then\n    echo \"Error: Input file does not exist.\"\n    exit 1\nfi\nif [ ! -r \"$input_file\" ]; then\n    echo \"Error: Input file is not readable.\"\n    exit 1\nfi\n\n# Read the first line to determine the number of columns\nheader_line=$(head -n 1 \"$input_file\")\nIFS=\"$delimiter\" read -ra header_fields <<< \"$header_line\"\nnum_columns=${#header_fields[@]}\necho \"Number of columns: $num_columns\"\n\n# Initialize arrays for each column\ndeclare -a columns=()\nfor ((i=0; i<num_columns; i++)); do\n    columns[i]=()\ndone\n\n# Initialize row counter\nrow_count=0\n\n# Read each line and populate the column arrays\nwhile IFS=\"$delimiter\" read -r -a fields; do\n    for ((i=0; i<num_columns; i++)); do\n        columns[i]+=\"${fields[i]}\"\n        columns[i]+=$' '\n    done\n    row_count=$((row_count+1))\ndone < \"$input_file\"\n\necho \"Total rows: $row_count\"\n\n# Count unique values for each column\nfor ((i=0; i<num_columns; i++)); do\n    echo \"Unique values in column $i:\"\n    printf \"%s\" \"${columns[i]}\" | tr ' ' '\\n' | sort -u | wc -l\ndone\n```\n\n## Explanation\n\n1. **Argument Check**: The script checks if exactly two arguments are provided. If not, it prints the correct usage and exits.\n2. **File Existence and Readability**: It verifies if the specified file exists and is readable.\n3. **Header Reading and Column Count**: The first line of the file is read to determine the number of columns using the provided delimiter.\n4. **Array Initialization**: Arrays are initialized to hold values for each column.\n5. **File Reading and Population**: The file is read line by line, and each line is split into fields using the delimiter. These fields are then added to the corresponding column arrays.\n6. **Row and Column Count Output**: The total number of rows and columns is printed.\n7. **Unique Value Count per Column**: For each column, the unique values are counted and printed by converting the array of values into a list, sorting it, removing duplicates, and counting the lines.\n\nThis script provides a basic way to analyze CSV files using bash, suitable for well-formed CSV data without complexities like quoted fields containing delimiters."
    }
]