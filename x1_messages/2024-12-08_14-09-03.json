[
    {
        "role": "user",
        "content": "Create a Golang function that accepts a string as input and compresses it using the Run Length Encoding (RLE) algorithm. For example, the input \"aaabbc\" would result in the compressed string \"3a2b1c\".\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Go function that implements the Run-Length Encoding (RLE) algorithm to compress a given string.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\n// compressUsingRLE compresses the input string using Run-Length Encoding (RLE).\n// It takes a string as input and returns a compressed version where sequences of\n// the same character are replaced by a single character followed by the count of\n// consecutive occurrences.\n//\n// Example:\n// Input: \"aaabbc\"\n// Output: \"3a2b1c\"\nfunc compressUsingRLE(s string) string {\n\tif len(s) == 0 {\n\t\treturn \"\"\n\t}\n\n\tvar compressedBuilder strings.Builder\n\tvar count int\n\tcurrentChar := s[0]\n\n\tfor i := 0; i < len(s); i++ {\n\t\tif s[i] == currentChar {\n\t\t\tcount++\n\t\t} else {\n\t\t\tcompressedBuilder.WriteString(fmt.Sprintf(\"%d%c\", count, currentChar))\n\t\t\tcurrentChar = s[i]\n\t\t\tcount = 1\n\t\t}\n\t}\n\t// Write the last sequence\n\tcompressedBuilder.WriteString(fmt.Sprintf(\"%d%c\", count, currentChar))\n\n\treturn compressedBuilder.String()\n}\n\nfunc main() {\n\tinput := \"aaabbc\"\n\tcompressed := compressUsingRLE(input)\n\tfmt.Println(compressed) // Output: \"3a2b1c\"\n}\n```\n\n### Explanation:\n1. **Function Definition**:\n   - `compressUsingRLE` takes a single string argument `s` and returns a string.\n   \n2. **Edge Case Handling**:\n   - If the input string is empty, it immediately returns an empty string.\n\n3. **Compression Logic**:\n   - It uses a `strings.Builder` for efficient string concatenation.\n   - It iterates through the string, tracking the current character and its count.\n   - When a different character is encountered, it appends the count and the character to the builder and resets the count for the new character.\n   - After the loop, it appends the count and the last character.\n\n4. **Main Function**:\n   - Demonstrates the usage of `compressUsingRLE` with an example input and prints the result.\n\nThis function efficiently compresses the string using RLE, providing a clear and concise implementation in Go."
    }
]