[
    {
        "role": "user",
        "content": "Write a C program that implements a linked list along with functions to insert, delete and search for elements. Your implementation should avoid memory leaks. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write a C program that implements a singly linked list with functions to insert, delete, and search for elements. I'll make sure to handle memory properly to avoid leaks.\n\nFirst, I need to define the structure for the linked list. Since it's a singly linked list, each node will have some data and a pointer to the next node.\n\nLet's define a simple structure for the node:\n\n```c\nstruct Node {\n    int data;\n    struct Node* next;\n};\n```\n\nNow, I need to implement functions for inserting, deleting, and searching elements in the list.\n\n**Insert Function:**\n\nI'll create a function to insert a new node at the beginning of the list. This is the simplest way to insert elements in a linked list.\n\n```c\nvoid insert(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = *head;\n    *head = newNode;\n}\n```\n\n**Delete Function:**\n\nFor the delete function, I'll remove the first occurrence of a node with the given value.\n\n```c\nvoid delete(struct Node** head, int value) {\n    struct Node* temp = *head;\n    struct Node* prev = NULL;\n\n    if (temp != NULL && temp->data == value) {\n        *head = temp->next;\n        free(temp);\n        return;\n    }\n\n    while (temp != NULL && temp->data != value) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == NULL) return;\n\n    prev->next = temp->next;\n    free(temp);\n}\n```\n\n**Search Function:**\n\nThe search function will traverse the list and return true if the value is found, otherwise false.\n\n```c\nbool search(struct Node* head, int value) {\n    struct Node* current = head;\n    while (current != NULL) {\n        if (current->data == value) {\n            return true;\n        }\n        current = current->next;\n    }\n    return false;\n}\n```\n\n**Memory Management:**\n\nTo avoid memory leaks, I need to make sure that all allocated memory is freed when it's no longer needed. I'll create a function to free the entire list.\n\n```c\nvoid freeList(struct Node* head) {\n    struct Node* current = head;\n    struct Node* next;\n\n    while (current != NULL) {\n        next = current->next;\n        free(current);\n        current = next;\n    }\n}\n```\n\n**Main Function:**\n\nFinally, I'll write a main function to test these operations.\n\n```c\nint main() {\n    struct Node* head = NULL;\n\n    insert(&head, 10);\n    insert(&head, 20);\n    insert(&head, 30);\n\n    if (search(head, 20)) {\n        printf(\"20 is found\\n\");\n    } else {\n        printf(\"20 is not found\\n\");\n    }\n\n    delete(&head, 20);\n\n    if (search(head, 20)) {\n        printf(\"20 is found\\n\");\n    } else {\n        printf(\"20 is not found\\n\");\n    }\n\n    freeList(head);\n\n    return 0;\n}\n```\n\n**Full Program:**\n\nPutting it all together:\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nvoid insert(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = *head;\n    *head = newNode;\n}\n\nvoid delete(struct Node** head, int value) {\n    struct Node* temp = *head;\n    struct Node* prev = NULL;\n\n    if (temp != NULL && temp->data == value) {\n        *head = temp->next;\n        free(temp);\n        return;\n    }\n\n    while (temp != NULL && temp->data != value) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == NULL) return;\n\n    prev->next = temp->next;\n    free(temp);\n}\n\nbool search(struct Node* head, int value) {\n    struct Node* current = head;\n    while (current != NULL) {\n        if (current->data == value) {\n            return true;\n        }\n        current = current->next;\n    }\n    return false;\n}\n\nvoid freeList(struct Node* head) {\n    struct Node* current = head;\n    struct Node* next;\n\n    while (current != NULL) {\n        next = current->next;\n        free(current);\n        current = next;\n    }\n}\n\nint main() {\n    struct Node* head = NULL;\n\n    insert(&head, 10);\n    insert(&head, 20);\n    insert(&head, 30);\n\n    if (search(head, 20)) {\n        printf(\"20 is found\\n\");\n    } else {\n        printf(\"20 is not found\\n\");\n    }\n\n    delete(&head, 20);\n\n    if (search(head, 20)) {\n        printf(\"20 is found\\n\");\n    } else {\n        printf(\"20 is not found\\n\");\n    }\n\n    freeList(head);\n\n    return 0;\n}\n```\n\nThis program defines a simple singly linked list with insert, delete, and search functions. It also includes a function to free the entire list to prevent memory leaks.\n"
    }
]