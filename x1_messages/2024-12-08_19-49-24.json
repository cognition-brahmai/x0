[
    {
        "role": "user",
        "content": "Develop a Python script that uses the FastAPI framework to build a RESTful API for managing a collection of books. The API should support CRUD operations (create, read, update, delete) and use SQLite as the database backend."
    },
    {
        "role": "assistant",
        "content": "To develop a Python script using FastAPI for managing a collection of books with CRUD operations and SQLite as the database backend, follow these steps:\n\n1. **Install Required Packages:**\n   - FastAPI\n   - Uvicorn (ASGI server)\n   - SQLAlchemy (for database operations)\n   - Python-dotenv (to manage environment variables)\n\n   You can install these packages using pip:\n\n   ```bash\n   pip install fastapi uvicorn sqlalchemy python-dotenv\n   ```\n\n2. **Set Up the Project Structure:**\n\n   Create a new directory for your project and set up the following structure:\n\n   ```\n   book_api/\n   \u251c\u2500\u2500 app/\n   \u2502   \u251c\u2500\u2500 __init__.py\n   \u2502   \u251c\u2500\u2500 main.py\n   \u2502   \u251c\u2500\u2500 models.py\n   \u2502   \u2514\u2500\u2500 database.py\n   \u251c\u2500\u2500 .env\n   \u2514\u2500\u2500 requirements.txt\n   ```\n\n3. **Configure Environment Variables:**\n\n   Create a `.env` file to store environment variables, such as database URL.\n\n   ```\n   DATABASE_URL=\"sqlite:///./test.db\"\n   ```\n\n4. **Set Up the Database:**\n\n   In `app/database.py`, set up the SQLAlchemy engine and session local.\n\n   ```python\n   from sqlalchemy import create_engine\n   from sqlalchemy.ext.declarative import declarative_base\n   from sqlalchemy.orm import sessionmaker\n   from .config import settings\n\n   SQLALCHEMY_DATABASE_URL = settings.database_url\n\n   engine = create_engine(\n       SQLALCHEMY_DATABASE_URL, connect_args={\"check_same_thread\": False}\n   )\n   SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\n\n   Base = declarative_base()\n   ```\n\n5. **Define the Book Model:**\n\n   In `app/models.py`, define the Book model using SQLAlchemy.\n\n   ```python\n   from sqlalchemy import Column, Integer, String\n   from .database import Base\n\n   class Book(Base):\n       __tablename__ = \"books\"\n\n       id = Column(Integer, primary_key=True, index=True)\n       title = Column(String, index=True)\n       author = Column(String, index=True)\n       description = Column(String)\n   ```\n\n6. **Create the Database Tables:**\n\n   Run the following command to create the database tables based on the models.\n\n   ```bash\n   python -m sqlite3 test.db\n   ```\n\n   Then, in a Python shell:\n\n   ```python\n   from app.database import Base, engine\n   Base.metadata.create_all(bind=engine)\n   ```\n\n7. **Implement CRUD Operations:**\n\n   In `app/crud.py`, implement functions for creating, reading, updating, and deleting books.\n\n   ```python\n   from sqlalchemy.orm import Session\n   from .models import Book\n\n   def get_book(db: Session, book_id: int):\n       return db.query(Book).filter(Book.id == book_id).first()\n\n   def get_books(db: Session, skip: int = 0, limit: int = 100):\n       return db.query(Book).offset(skip).limit(limit).all()\n\n   def create_book(db: Session, title: str, author: str, description: str):\n       db_book = Book(title=title, author=author, description=description)\n       db.add(db_book)\n       db.commit()\n       db.refresh(db_book)\n       return db_book\n\n   def update_book(db: Session, book_id: int, title: str, author: str, description: str):\n       db_book = db.query(Book).filter(Book.id == book_id).first()\n       if db_book:\n           db_book.title = title\n           db_book.author = author\n           db_book.description = description\n           db.commit()\n           db.refresh(db_book)\n       return db_book\n\n   def delete_book(db: Session, book_id: int):\n       db_book = db.query(Book).filter(Book.id == book_id).first()\n       if db_book:\n           db.delete(db_book)\n           db.commit()\n       return db_book\n   ```\n\n8. **Create the API Endpoints:**\n\n   In `app/main.py`, define the FastAPI application and the API endpoints.\n\n   ```python\n   from fastapi import FastAPI, Depends, HTTPException\n   from sqlalchemy.orm import Session\n   from . import models, database, crud\n\n   app = FastAPI()\n\n   # Dependency\n   def get_db():\n       db = database.SessionLocal()\n       try:\n           yield db\n       finally:\n           db.close()\n\n   @app.post(\"/books/\")\n   def create_book(title: str, author: str, description: str, db: Session = Depends(get_db)):\n       return crud.create_book(db, title=title, author=author, description=description)\n\n   @app.get(\"/books/\")\n   def read_books(skip: int = 0, limit: int = 100, db: Session = Depends(get_db)):\n       books = crud.get_books(db, skip=skip, limit=limit)\n       return books\n\n   @app.get(\"/books/{book_id}\")\n   def read_book(book_id: int, db: Session = Depends(get_db)):\n       db_book = crud.get_book(db, book_id=book_id)\n       if db_book is None:\n           raise HTTPException(status_code=404, detail=\"Book not found\")\n       return db_book\n\n   @app.put(\"/books/{book_id}\")\n   def update_book(book_id: int, title: str, author: str, description: str, db: Session = Depends(get_db)):\n       db_book = crud.update_book(db, book_id=book_id, title=title, author=author, description=description)\n       if db_book is None:\n           raise HTTPException(status_code=404, detail=\"Book not found\")\n       return db_book\n\n   @app.delete(\"/books/{book_id}\")\n   def delete_book(book_id: int, db: Session = Depends(get_db)):\n       db_book = crud.delete_book(db, book_id=book_id)\n       if db_book is None:\n           raise HTTPException(status_code=404, detail=\"Book not found\")\n       return {\"message\": \"Book deleted\"}\n   ```\n\n9. **Run the API Server:**\n\n   Use Uvicorn to run the FastAPI application.\n\n   ```bash\n   uvicorn app.main:app --reload\n   ```\n\n   This will start the API server, and you can access it at `http://127.0.0.1:8000`.\n\n10. **Test the API:**\n\n    You can use tools like Postman or curl to test the API endpoints for creating, reading, updating, and deleting books.\n\nThis setup provides a basic RESTful API for managing a collection of books using FastAPI and SQLite. You can expand upon this by adding more features, improving error handling, and enhancing the database models as needed."
    }
]