[
    {
        "role": "user",
        "content": "Implement a C++ class called \"BankAccount\" with member variables for account number, account holder's name, and balance. Include methods for depositing money, withdrawing money, and displaying account details. Ensure proper encapsulation and error handling for invalid operations like withdrawing more than the available balance.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a `BankAccount` class in C++ that includes the specified features:\n\n1. **Member Variables:**\n   - `accountNumber` (integer)\n   - `accountHolderName` (string)\n   - `balance` (double)\n\n2. **Methods:**\n   - `deposit(double amount)`: Adds the specified amount to the balance.\n   - `withdraw(double amount)`: Subtracts the specified amount from the balance if sufficient funds are available.\n   - `display()`: Prints the account details.\n\n3. **Encapsulation:**\n   - Private member variables to ensure data hiding.\n   - Public methods to access and modify the member variables.\n\n4. **Error Handling:**\n   - Checks to prevent withdrawing more than the available balance.\n   - Appropriate messages for invalid operations.\n\nHere's the complete code:\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    std::string accountHolderName;\n    double balance;\n\npublic:\n    // Constructor to initialize the account\n    BankAccount(int accNum, const std::string& accHolderName, double initialBalance)\n        : accountNumber(accNum), accountHolderName(accHolderName), balance(initialBalance) {}\n\n    // Method to deposit money into the account\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            std::cout << \"Deposit of \" << amount << \" successful.\" << std::endl;\n        } else {\n            std::cout << \"Invalid deposit amount. Please enter a positive value.\" << std::endl;\n        }\n    }\n\n    // Method to withdraw money from the account\n    void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n                std::cout << \"Withdrawal of \" << amount << \" successful.\" << std::endl;\n            } else {\n                std::cout << \"Insufficient funds. Cannot withdraw \" << amount << \".\" << std::endl;\n            }\n        } else {\n            std::cout << \"Invalid withdrawal amount. Please enter a positive value.\" << std::endl;\n        }\n    }\n\n    // Method to display account details\n    void display() const {\n        std::cout << \"Account Number: \" << accountNumber << std::endl;\n        std::cout << \"Account Holder Name: \" << accountHolderName << std::endl;\n        std::cout << \"Balance: \" << balance << std::endl;\n    }\n};\n\nint main() {\n    // Create a BankAccount object\n    BankAccount myAccount(123456, \"John Doe\", 1000.0);\n\n    // Display initial account details\n    myAccount.display();\n\n    // Deposit money\n    myAccount.deposit(500.0);\n    myAccount.display();\n\n    // Withdraw money\n    myAccount.withdraw(200.0);\n    myAccount.display();\n\n    // Attempt to withdraw more than the balance\n    myAccount.withdraw(2000.0);\n    myAccount.display();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Constructor:**\n   - Initializes the account with an account number, holder's name, and initial balance.\n\n2. **deposit(double amount):**\n   - Adds the specified amount to the balance if the amount is positive.\n   - Displays a message for invalid deposit amounts.\n\n3. **withdraw(double amount):**\n   - Subtracts the specified amount from the balance if sufficient funds are available and the amount is positive.\n   - Displays a message for insufficient funds or invalid withdrawal amounts.\n\n4. **display() const:**\n   - Prints the account number, holder's name, and current balance.\n\n5. **main() function:**\n   - Demonstrates creating a `BankAccount` object, depositing, withdrawing, and displaying account details.\n\nThis implementation ensures proper encapsulation by making the member variables private and providing public methods to interact with them. Error handling is incorporated to manage invalid operations gracefully."
    }
]