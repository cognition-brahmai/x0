[
    {
        "role": "user",
        "content": "Develop a Python script that monitors a specified directory for new files and automatically uploads them to Azure Blob Storage. The script should use command line arguments for specifying the directory path and Azure credentials.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that monitors a specific directory for new files and automatically uploads them to Azure Blob Storage. We'll use command-line arguments to specify the directory path and Azure credentials. Sounds good?\n\nFirst, make sure you have the necessary libraries installed. You'll need `azure-storage-blob` for interacting with Azure Blob Storage and `watchdog` for monitoring directory changes. You can install them using pip:\n\n```bash\npip install azure-storage-blob watchdog\n```\n\nNow, let's outline the steps we need to follow:\n\n1. **Parse Command-Line Arguments:** We'll use the `argparse` module to handle command-line arguments for the directory path and Azure credentials.\n\n2. **Set Up Azure Blob Storage Connection:** Use the provided Azure credentials to connect to your Blob Storage account.\n\n3. **Monitor Directory for New Files:** Use the `watchdog` library to watch the specified directory for new files.\n\n4. **Upload New Files to Azure Blob Storage:** When a new file is detected, upload it to the specified container in your Blob Storage.\n\nLet's start by setting up the argument parser.\n\n## Final Solution\nTo create a Python script that monitors a specified directory for new files and automatically uploads them to Azure Blob Storage, follow these steps:\n\n### Solution Code\n\n```python\nimport argparse\nimport os\nimport time\nfrom azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\n# Define a handler class to handle file system events\nclass UploadHandler(FileSystemEventHandler):\n    def __init__(self, blob_service_client, container_name):\n        self.blob_service_client = blob_service_client\n        self.container_name = container_name\n\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            blob_name = os.path.basename(file_path)\n            self.upload_to_azure(file_path, blob_name)\n\n    def upload_to_azure(self, file_path, blob_name):\n        try:\n            blob_client = self.blob_service_client.get_blob_client(container=self.container_name, blob=blob_name)\n            with open(file_path, \"rb\") as data:\n                blob_client.upload_blob(data)\n            print(f\"Uploaded {file_path} to {self.container_name}\")\n        except Exception as e:\n            print(f\"Error uploading {file_path}: {e}\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Monitor a directory and upload new files to Azure Blob Storage.\")\n    parser.add_argument(\"directory\", help=\"Path to the directory to monitor.\")\n    parser.add_argument(\"connection_string\", help=\"Azure Blob Storage connection string.\")\n    parser.add_argument(\"container_name\", help=\"Name of the container to upload files to.\")\n    args = parser.parse_args()\n\n    # Create a BlobServiceClient from the connection string\n    blob_service_client = BlobServiceClient.from_connection_string(args.connection_string)\n\n    # Create a ContainerClient if the container doesn't exist\n    try:\n        container_client = blob_service_client.create_container(args.container_name)\n        print(f\"Container '{args.container_name}' created.\")\n    except Exception as e:\n        print(f\"Container '{args.container_name}' already exists or error occurred: {e}\")\n\n    # Set up the observer\n    event_handler = UploadHandler(blob_service_client, args.container_name)\n    observer = Observer()\n    observer.schedule(event_handler, path=args.directory, recursive=False)\n    observer.start()\n    print(f\"Monitoring directory: {args.directory}\")\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Argument Parsing:** \n   - Use `argparse` to handle command-line arguments for the directory path, Azure connection string, and container name.\n\n2. **Azure Blob Storage Connection:**\n   - Use the provided connection string to create a `BlobServiceClient`.\n   - Ensure the specified container exists, creating it if necessary.\n\n3. **Directory Monitoring:**\n   - Use the `watchdog` library to monitor the specified directory for new files.\n   - When a new file is created, upload it to the specified Azure Blob Storage container.\n\n4. **Upload Functionality:**\n   - Define a handler class `UploadHandler` that uploads new files to Azure Blob Storage when they are created in the monitored directory.\n\nThis script provides a straightforward way to monitor a directory and automatically upload new files to Azure Blob Storage, using command-line arguments for flexibility and ease of use."
    }
]