[
    {
        "role": "user",
        "content": "Write a Python script that connects to a SQLite database, creates a table, inserts sample data, and retrieves it using SQL queries.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python script that interacts with a SQLite database. We'll cover connecting to the database, creating a table, inserting some sample data, and then retrieving that data using SQL queries.\n\nFirst, make sure you have Python installed on your system. SQLite comes built-in with Python, so you don't need to install any additional packages for this task.\n\nHere's a step-by-step breakdown of what we'll do:\n\n1. **Connect to a SQLite Database:**\n   - We'll use the `sqlite3` module in Python to connect to a SQLite database. If the database doesn't exist, SQLite will create it automatically.\n\n2. **Create a Table:**\n   - We'll write an SQL query to create a table within the database. For this example, let's create a simple table to store books with columns for id, title, author, and price.\n\n3. **Insert Sample Data:**\n   - We'll insert a few rows of data into the table using SQL INSERT statements.\n\n4. **Retrieve Data:**\n   - We'll write SQL SELECT queries to retrieve and display the data from the table.\n\nNow, let's write the Python script accordingly.\n\n## Final Solution\nTo accomplish the task of connecting to a SQLite database, creating a table, inserting sample data, and retrieving it using SQL queries, you can use the following Python script:\n\n```python\nimport sqlite3\n\n# Connect to the SQLite database (or create it if it doesn't exist)\nconn = sqlite3.connect('example.db')\n\n# Create a cursor object to interact with the database\ncursor = conn.cursor()\n\n# Create a table\ncursor.execute('''\nCREATE TABLE IF NOT EXISTS books (\n    id INTEGER PRIMARY KEY,\n    title TEXT NOT NULL,\n    author TEXT NOT NULL,\n    price REAL\n)\n''')\n\n# Insert sample data into the table\nsample_books = [\n    (1, 'Python Programming', 'John Doe', 24.99),\n    (2, 'Learning SQL', 'Jane Smith', 19.99),\n    (3, 'Data Science Handbook', 'Chris Johnson', 32.50)\n]\n\ncursor.executemany('''\nINSERT INTO books (id, title, author, price)\nVALUES (?, ?, ?, ?)\n''', sample_books)\n\n# Commit the changes to the database\nconn.commit()\n\n# Retrieve and display all records from the table\ncursor.execute('SELECT * FROM books')\nrows = cursor.fetchall()\n\nprint(\"All books in the table:\")\nfor row in rows:\n    print(row)\n\n# Retrieve books with price less than 30\ncursor.execute('SELECT * FROM books WHERE price < 30')\naffordable_books = cursor.fetchall()\n\nprint(\"\\nBooks with price less than 30:\")\nfor book in affordable_books:\n    print(book)\n\n# Close the connection to the database\nconn.close()\n```\n\n### Explanation:\n\n1. **Connecting to the Database:**\n   - We use `sqlite3.connect('example.db')` to connect to the SQLite database. If `example.db` doesn't exist, it will be created automatically.\n\n2. **Creating a Table:**\n   - We create a table named `books` with columns: `id`, `title`, `author`, and `price`. The `IF NOT EXISTS` clause ensures that the table is only created if it doesn't already exist.\n\n3. **Inserting Sample Data:**\n   - We define a list of tuples, each representing a book, and use `executemany` to insert these records into the `books` table.\n\n4. **Retrieving Data:**\n   - We use `cursor.execute` to run SELECT queries. First, to fetch all records from the `books` table, and second, to fetch books with a price less than 30.\n   - `cursor.fetchall()` retrieves all rows from the query result, which we then print.\n\n5. **Closing the Connection:**\n   - It's important to close the connection to the database after operations are complete to free resources."
    }
]