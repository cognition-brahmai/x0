[
    {
        "role": "user",
        "content": "Create a Python script that implements a simple singly linked list with methods for adding elements at the beginning, end, and specified index, removing elements by value, and printing the entire list."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in Python involves defining a Node class to represent each element in the list and a LinkedList class to manage the nodes. Here's a step-by-step guide to implement the required methods:\n\n1. **Node Class**: This class will have a constructor to initialize the data and the next pointer.\n\n2. **LinkedList Class**: This class will have methods to:\n   - Add elements at the beginning (`add_beginning`).\n   - Add elements at the end (`add_end`).\n   - Add elements at a specified index (`add_at_index`).\n   - Remove elements by value (`remove_by_value`).\n   - Print the entire list (`print_list`).\n\nHere's how you can implement this:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_index(self, index, data):\n        if index < 0:\n            print(\"Index cannot be negative\")\n            return\n        if index == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            print(\"Index out of bounds\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, value):\n        if self.head is None:\n            print(\"List is empty\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if current.next:\n            current.next = current.next.next\n        else:\n            print(\"Value not found in the list\")\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.add_end(1)\n    ll.add_end(2)\n    ll.add_end(3)\n    ll.add_beginning(0)\n    ll.add_at_index(3, 2.5)\n    ll.print_list()\n    ll.remove_by_value(2)\n    ll.print_list()\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Initializes with `data` and `next` pointer set to `None`.\n\n2. **LinkedList Class**:\n   - **add_beginning(data)**: Adds a new node with `data` at the beginning of the list.\n   - **add_end(data)**: Adds a new node with `data` at the end of the list.\n   - **add_at_index(index, data)**: Adds a new node with `data` at the specified `index`. If the index is 0, it adds the node at the beginning.\n   - **remove_by_value(value)**: Removes the first occurrence of the node with the specified `value`.\n   - **print_list()**: Prints the entire list from head to tail.\n\nThis implementation should cover all the basic operations you need for a singly linked list. Let me know if you have any questions or need further clarification!"
    }
]