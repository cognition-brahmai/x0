[
    {
        "role": "user",
        "content": "Write a Python script that monitors a directory for newly added files and automatically compresses them using gzip. The compressed files should be moved to a separate folder, and the original files should be deleted."
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a Python script that monitors a directory for newly added files, compresses them using gzip, moves the compressed files to a separate folder, and deletes the original files, you can use the `watchdog` library for monitoring file system events and the `gzip` module for compression.\n\nFirst, make sure to install the `watchdog` library if you haven't already:\n\n```bash\npip install watchdog\n```\n\nHere's a sample script that accomplishes the tasks you've described:\n\n```python\nimport time\nimport gzip\nimport shutil\nimport os\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass FileMonitorHandler(FileSystemEventHandler):\n    def __init__(self, source_dir, target_dir):\n        self.source_dir = source_dir\n        self.target_dir = target_dir\n\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            compressed_file_path = os.path.join(self.target_dir, os.path.basename(file_path) + '.gz')\n            with open(file_path, 'rb') as f_in:\n                with gzip.open(compressed_file_path, 'wb') as f_out:\n                    shutil.copyfileobj(f_in, f_out)\n            os.remove(file_path)\n            print(f'Compressed and moved {file_path} to {compressed_file_path}, original file deleted.')\n\ndef main():\n    source_dir = '/path/to/source/directory'  # Replace with your source directory\n    target_dir = '/path/to/target/directory'  # Replace with your target directory\n\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    event_handler = FileMonitorHandler(source_dir, target_dir)\n    observer = Observer()\n    observer.schedule(event_handler, path=source_dir, recursive=False)\n    observer.start()\n    print(f'Watching directory: {source_dir}')\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation:\n\n1. **FileMonitorHandler Class**:\n    - This class inherits from `FileSystemEventHandler` and overrides the `on_created` method to handle new file creation events.\n    - When a new file is created in the monitored directory, it compresses the file using gzip, moves the compressed file to the target directory, and deletes the original file.\n\n2. **main Function**:\n    - Sets up the source and target directories.\n    - Creates an instance of `FileMonitorHandler`.\n    - Sets up an `Observer` to monitor the source directory for file creation events.\n    - Starts the observer and keeps the script running until interrupted (e.g., via KeyboardInterrupt).\n\n### Notes:\n\n- Replace `/path/to/source/directory` and `/path/to/target/directory` with the actual paths you intend to monitor and store compressed files.\n- Ensure that the script has the necessary permissions to read from the source directory, write to the target directory, and delete files from the source directory.\n- The script uses `shutil.copyfileobj` to efficiently copy file data from the original file to the gzip-compressed file.\n- The observer runs in a separate thread, and the main thread sleeps to keep the script alive.\n\nThis setup provides a straightforward way to monitor a directory for new files, compress them, move the compressed versions, and clean up the originals automatically."
    }
]