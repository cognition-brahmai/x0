[
    {
        "role": "user",
        "content": "Create a C++ program that implements a singly linked list data structure with methods for adding elements at the beginning, end, and specified position, as well as deleting elements by value or position.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in C++ involves defining a structure for the nodes and implementing various operations such as insertion and deletion. Below is a step-by-step guide to creating such a program.\n\n### Step 1: Define the Node Structure\n\nFirst, we need to define a structure for the nodes of the linked list. Each node will contain an integer data and a pointer to the next node.\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n};\n```\n\n### Step 2: Implement the Linked List Class\n\nNext, we'll create a class for the singly linked list that uses these nodes. The class will have private members for the head and tail pointers, and public methods for various operations.\n\n```cpp\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n    Node* tail;\n\npublic:\n    SinglyLinkedList() : head(nullptr), tail(nullptr) {}\n\n    // Method to add a node at the beginning\n    void addAtBeginning(int value);\n\n    // Method to add a node at the end\n    void addAtEnd(int value);\n\n    // Method to add a node at a specified position\n    void addAtPosition(int position, int value);\n\n    // Method to delete a node by value\n    void deleteByValue(int value);\n\n    // Method to delete a node by position\n    void deleteByPosition(int position);\n\n    // Method to display the list\n    void display();\n\n    // Destructor to free the memory\n    ~SinglyLinkedList();\n};\n```\n\n### Step 3: Implement the Methods\n\nNow, we'll implement each of the methods defined in the class.\n\n#### addAtBeginning\n\nThis method adds a new node with the given value at the beginning of the list.\n\n```cpp\nvoid SinglyLinkedList::addAtBeginning(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = head;\n    head = newNode;\n    if (tail == nullptr) {\n        tail = newNode;\n    }\n}\n```\n\n#### addAtEnd\n\nThis method adds a new node with the given value at the end of the list.\n\n```cpp\nvoid SinglyLinkedList::addAtEnd(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = nullptr;\n    if (tail == nullptr) {\n        head = newNode;\n        tail = newNode;\n    } else {\n        tail->next = newNode;\n        tail = newNode;\n    }\n}\n```\n\n#### addAtPosition\n\nThis method adds a new node with the given value at the specified position in the list.\n\n```cpp\nvoid SinglyLinkedList::addAtPosition(int position, int value) {\n    if (position <= 0) {\n        addAtBeginning(value);\n        return;\n    }\n    Node* current = head;\n    int count = 0;\n    while (current != nullptr && count < position - 1) {\n        current = current->next;\n        count++;\n    }\n    if (current == nullptr) {\n        addAtEnd(value);\n    } else {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = current->next;\n        current->next = newNode;\n        if (newNode->next == nullptr) {\n            tail = newNode;\n        }\n    }\n}\n```\n\n#### deleteByValue\n\nThis method deletes the first node containing the given value from the list.\n\n```cpp\nvoid SinglyLinkedList::deleteByValue(int value) {\n    if (head == nullptr) {\n        return;\n    }\n    if (head->data == value) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        if (head == nullptr) {\n            tail = nullptr;\n        }\n        return;\n    }\n    Node* current = head;\n    while (current->next != nullptr && current->next->data != value) {\n        current = current->next;\n    }\n    if (current->next != nullptr) {\n        Node* temp = current->next;\n        current->next = current->next->next;\n        delete temp;\n        if (current->next == nullptr) {\n            tail = current;\n        }\n    }\n}\n```\n\n#### deleteByPosition\n\nThis method deletes the node at the specified position in the list.\n\n```cpp\nvoid SinglyLinkedList::deleteByPosition(int position) {\n    if (position <= 0 || head == nullptr) {\n        return;\n    }\n    if (position == 1) {\n        Node* temp = head;\n        head = head->next;\n        delete temp;\n        if (head == nullptr) {\n            tail = nullptr;\n        }\n        return;\n    }\n    Node* current = head;\n    int count = 1;\n    while (current != nullptr && count < position - 1) {\n        current = current->next;\n        count++;\n    }\n    if (current != nullptr && current->next != nullptr) {\n        Node* temp = current->next;\n        current->next = current->next->next;\n        delete temp;\n        if (current->next == nullptr) {\n            tail = current;\n        }\n    }\n}\n```\n\n#### display\n\nThis method prints the elements of the list.\n\n```cpp\nvoid SinglyLinkedList::display() {\n    Node* current = head;\n    while (current != nullptr) {\n        std::cout << current->data << \" -> \";\n        current = current->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n```\n\n#### Destructor\n\nThe destructor frees the memory allocated for the list.\n\n```cpp\nSinglyLinkedList::~SinglyLinkedList() {\n    Node* current = head;\n    while (current != nullptr) {\n        Node* next = current->next;\n        delete current;\n        current = next;\n    }\n}\n```\n\n### Step 4: Main Function\n\nFinally, we'll write a main function to test the singly linked list.\n\n```cpp\nint main() {\n    SinglyLinkedList list;\n\n    list.addAtBeginning(1);\n    list.addAtEnd(2);\n    list.addAtPosition(1, 0); // Add at beginning\n    list.addAtPosition(3, 3); // Add in middle\n    list.addAtPosition(100, 4); // Add at end\n\n    list.display();\n\n    list.deleteByValue(0);\n    list.deleteByPosition(3);\n\n    list.display();\n\n    return 0;\n}\n```\n\n### Explanation\n\n- **Node Structure**: Defines the basic unit of the linked list with data and a pointer to the next node.\n- **SinglyLinkedList Class**: Manages the list operations.\n  - **addAtBeginning**: Adds a node at the start.\n  - **addAtEnd**: Adds a node at the end.\n  - **addAtPosition**: Adds a node at a specified position.\n  - **deleteByValue**: Deletes the first node with the specified value.\n  - **deleteByPosition**: Deletes the node at the specified position.\n  - **display**: Prints the list.\n  - **Destructor**: Frees the allocated memory.\n\nThis implementation covers the basic operations needed for a singly linked list, providing a solid foundation for further extensions or modifications."
    }
]