[
    {
        "role": "user",
        "content": "Design a simple RESTful API using Node.js and Express framework that supports CRUD operations on a collection of items stored in a MongoDB database. The item model should include fields like \"title\", \"description\", \"price\", and \"quantity\". Implement appropriate validations for the input data and return meaningful HTTP status codes for different scenarios."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through designing a simple RESTful API using Node.js and Express that interacts with a MongoDB database. We'll create an API to manage a collection of items, each with a title, description, price, and quantity. We'll also implement validations and use appropriate HTTP status codes.\n\n### Step 1: Set Up Your Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir item-api\ncd item-api\nnpm init -y\n```\n\nInstall the necessary dependencies:\n\n```bash\nnpm install express mongoose body-parser validator\n```\n\n- `express`: For creating the API.\n- `mongoose`: For interacting with MongoDB.\n- `body-parser`: For parsing JSON request bodies.\n- `validator`: For data validation.\n\n### Step 2: Set Up Your MongoDB Connection\n\nCreate a `.env` file to store your MongoDB connection string.\n\n```\nMONGO_URI=mongodb://localhost:27017/itemdb\n```\n\nInstall `dotenv` to load environment variables.\n\n```bash\nnpm install dotenv\n```\n\nCreate a `config` directory and add a `db.js` file to handle the database connection.\n\n```javascript\n// config/db.js\nrequire('dotenv').config();\nconst mongoose = require('mongoose');\n\nconst connectDB = async () => {\n  try {\n    await mongoose.connect(process.env.MONGO_URI, {\n      useNewUrlParser: true,\n      useUnifiedTopology: true,\n    });\n    console.log('MongoDB connected');\n  } catch (err) {\n    console.error(err.message);\n    process.exit(1);\n  }\n};\n\nmodule.exports = connectDB;\n```\n\n### Step 3: Define the Item Model\n\nCreate a `models` directory and add an `Item.js` file.\n\n```javascript\n// models/Item.js\nconst mongoose = require('mongoose');\n\nconst ItemSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  description: {\n    type: String,\n    required: true,\n    trim: true,\n  },\n  price: {\n    type: Number,\n    required: true,\n    min: 0,\n  },\n  quantity: {\n    type: Number,\n    required: true,\n    min: 0,\n  },\n});\n\nmodule.exports = mongoose.model('Item', ItemSchema);\n```\n\n### Step 4: Create the API Routes\n\nCreate a `routes` directory and add an `items.js` file.\n\n```javascript\n// routes/items.js\nconst express = require('express');\nconst router = express.Router();\nconst Item = require('../models/Item');\nconst validator = require('validator');\n\n// Get all items\nrouter.get('/', async (req, res) => {\n  try {\n    const items = await Item.find();\n    res.json(items);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get one item by ID\nrouter.get('/:id', getItem, (req, res) => {\n  res.json(res.item);\n});\n\n// Create a new item\nrouter.post('/', async (req, res) => {\n  const { title, description, price, quantity } = req.body;\n\n  // Validation\n  if (!title || !description || !price || !quantity) {\n    return res.status(400).json({ message: 'All fields are required' });\n  }\n\n  if (typeof price !== 'number' || typeof quantity !== 'number') {\n    return res.status(400).json({ message: 'Price and quantity must be numbers' });\n  }\n\n  if (price < 0 || quantity < 0) {\n    return res.status(400).json({ message: 'Price and quantity cannot be negative' });\n  }\n\n  const item = new Item({\n    title,\n    description,\n    price,\n    quantity,\n  });\n\n  try {\n    const newItem = await item.save();\n    res.status(201).json(newItem);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update an item\nrouter.patch('/:id', getItem, async (req, res) => {\n  const { title, description, price, quantity } = req.body;\n\n  if (title) res.item.title = title;\n  if (description) res.item.description = description;\n  if (price) {\n    if (typeof price !== 'number') {\n      return res.status(400).json({ message: 'Price must be a number' });\n    }\n    if (price < 0) {\n      return res.status(400).json({ message: 'Price cannot be negative' });\n    }\n    res.item.price = price;\n  }\n  if (quantity) {\n    if (typeof quantity !== 'number') {\n      return res.status(400).json({ message: 'Quantity must be a number' });\n    }\n    if (quantity < 0) {\n      return res.status(400).json({ message: 'Quantity cannot be negative' });\n    }\n    res.item.quantity = quantity;\n  }\n\n  try {\n    const updatedItem = await res.item.save();\n    res.json(updatedItem);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete an item\nrouter.delete('/:id', getItem, async (req, res) => {\n  try {\n    await res.item.remove();\n    res.json({ message: 'Deleted item' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware to get item by ID\nasync function getItem(req, res, next) {\n  let item;\n  try {\n    item = await Item.findById(req.params.id);\n    if (!item) {\n      return res.status(404).json({ message: 'Item not found' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.item = item;\n  next();\n}\n\nmodule.exports = router;\n```\n\n### Step 5: Set Up Your Express Server\n\nCreate an `app.js` file.\n\n```javascript\n// app.js\nrequire('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst itemsRouter = require('./routes/items');\nconst connectDB = require('./config/db');\n\nconst app = express();\n\n// Connect to MongoDB\nconnectDB();\n\n// Middleware\napp.use(express.json());\napp.use('/items', itemsRouter);\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n```\n\n### Step 6: Run Your Server\n\nMake sure your MongoDB server is running, then start your Node.js server.\n\n```bash\nnode app.js\n```\n\nYour API should now be up and running, allowing you to perform CRUD operations on items.\n\n### Summary of Endpoints\n\n- **GET /items**: Retrieve all items.\n- **GET /items/:id**: Retrieve a specific item by ID.\n- **POST /items**: Create a new item.\n- **PATCH /items/:id**: Update an existing item.\n- **DELETE /items/:id**: Delete an item.\n\nEach endpoint includes appropriate validation and HTTP status codes to handle different scenarios effectively."
    }
]