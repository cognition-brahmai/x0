[
    {
        "role": "user",
        "content": "Design a C++ program that simulates a basic blackjack card game with the following rules:\n   - The game is played against an AI dealer.\n   - The player and dealer are both dealt two cards initially.\n   - The player can choose to hit (draw another card) or stand (keep current hand).\n   - The goal is to get a hand value closer to 21 than the dealer without going over.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a C++ program that simulates a basic Blackjack game against an AI dealer. Let's break this down step by step.\n\nFirst, I need to understand the rules of the game:\n\n- There's a player and a dealer.\n\n- Both are dealt two cards initially.\n\n- The player can choose to hit (take another card) or stand (keep the current hand).\n\n- The goal is to have a hand value closer to 21 than the dealer without exceeding 21.\n\nOkay, so I need to create a deck of cards, shuffle it, and deal cards to both the player and the dealer.\n\nLet's think about how to represent the deck and the cards.\n\nEach card has a rank and a suit.\n\nRanks: 2-10, Jack, Queen, King, Ace\n\nSuits: Hearts, Diamonds, Clubs, Spades\n\nI need to assign values to these cards.\n\nFor numbered cards, the value is the number on the card.\n\nFor Jack, Queen, King, the value is 10.\n\nFor Ace, it can be 1 or 11, depending on the hand.\n\nI need to handle the Ace's value dynamically based on the hand's total.\n\nNow, how to structure the classes or structures for this program.\n\nProbably, I'll have a Card class with rank and suit.\n\nThen, a Deck class that holds a collection of Card objects, can shuffle and deal cards.\n\nThen, a Hand class for both player and dealer, which holds cards and can calculate the total value.\n\nWait, but in C++, using classes might be a bit heavy for a beginner-level program. Maybe I can use structures or just arrays.\n\nBut for better organization, I'll go with classes.\n\nSo, classes needed:\n\n- Card: with rank and suit.\n\n- Deck: with a collection of Card objects, methods to shuffle and deal cards.\n\n- Hand: with a collection of Card objects, method to calculate total value.\n\n- Maybe a Player class, but for simplicity, I'll just have a player and a dealer, both having a Hand.\n\nI need to handle the logic for hitting and standing.\n\nThe player goes first: they can hit as many times as they want until they stand or bust (exceed 21).\n\nThen the dealer plays: they have to hit until their hand is 17 or higher.\n\nI need to define the winning conditions:\n\n- Player busts: dealer wins.\n\n- Dealer busts: player wins.\n\n- Otherwise, compare the totals: closer to 21 wins.\n\nI need to handle the Ace's value flexibly.\n\nIf the total with Ace as 11 exceeds 21, treat it as 1.\n\nI need to display the cards and totals to the player.\n\nAlso, manage the game loop: play multiple rounds until the player decides to quit.\n\nLet me outline the steps in pseudocode:\n\n1. Initialize deck, shuffle it.\n\n2. Deal two cards to player and two to dealer.\n\n3. Display player's hand and one of the dealer's cards.\n\n4. Player's turn:\n\na. Choose to hit or stand.\n\nb. If hit, deal another card to player.\n\nc. If stand, proceed to dealer's turn.\n\nd. If player's total exceeds 21, player busts, dealer wins.\n\n5. Dealer's turn:\n\na. Reveal both dealer's cards.\n\nb. Hit until dealer's total is 17 or higher.\n\nc. If dealer busts, player wins.\n\n6. Compare totals if both have 21 or less:\n\na. Higher total wins.\n\nb. Equal totals: tie.\n\n7. Ask player if they want to play again.\n\nNow, thinking about the implementation.\n\nHow to represent ranks and suits.\n\nMaybe use enums for ranks and suits.\n\nIn C++, I can define enums for ranks and suits.\n\nFor example:\n\nenum class Rank { Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace };\n\nenum class Suit { Hearts, Diamonds, Clubs, Spades };\n\nThen, the Card class can have members of these enum types.\n\nI need to map ranks to values, except for Ace.\n\nI can have a function in Card class that returns the value.\n\nFor Ace, it can return 1 or 11, but maybe that should be handled in the Hand class.\n\nWait, yes, the Hand class should handle the total value, considering Ace's flexibility.\n\nIn the Hand class, I need to sum up the values of all cards.\n\nFor Aces, I can count them separately and decide whether to use 1 or 11 based on the total.\n\nFor example, keep track of the total without Aces, then add Aces as 11 unless it causes bust, then use 1.\n\nI need to handle multiple Aces properly.\n\nNow, for the Deck class.\n\nI need to create a deck of 52 cards, shuffle them, and deal cards.\n\nIn C++, I can use std::vector to hold the cards.\n\nUse std::random_shuffle or std::shuffle to shuffle the deck.\n\nDeal cards by removing cards from the top of the deck.\n\nFor the Hand class, it can also have a vector of Card objects.\n\nAnd a method to calculate the total value.\n\nI need to display the cards.\n\nSo, I need to have string representations of ranks and suits.\n\nMaybe overload the << operator for Card class.\n\nAlso, for Hand class, maybe overload << to display all cards in the hand.\n\nWait, but in the player's turn, only one of the dealer's cards should be visible.\n\nSo, I need a way to hide the dealer's second card initially.\n\nPerhaps have a method in Hand class to display only some cards.\n\nAlternatively, have a boolean flag in Hand class indicating whether it's face up or not.\n\nWait, maybe have a separate class for Player and Dealer, each having a Hand, and the Dealer has some hidden cards initially.\n\nHmm, maybe that's complicating it.\n\nAlternatively, in the Hand class, have a method to display only the first card if it's the dealer's hand and it's face down.\n\nI need to think about that.\n\nAlso, I need to handle multiple rounds.\n\nSo, after each game, ask the player if they want to play again.\n\nI need to manage the game loop accordingly.\n\nI should also handle cases where the player or dealer has a BlackJack (21 in two cards).\n\nThat should be an immediate win unless the opponent also has BlackJack, which is a tie.\n\nI need to check for BlackJack after dealing the initial two cards.\n\nPayoff: BlackJack usually pays 3:2.\n\nBut for simplicity, I'll just consider it as an immediate win with 21 in two cards.\n\nNow, thinking about the flow:\n\n- Start of the game: initialize deck, shuffle.\n\n- Deal two cards to player and two to dealer.\n\n- Check if player or dealer has BlackJack.\n\n- If player has BlackJack and dealer doesn't, player wins.\n\n- If dealer has BlackJack and player doesn't, dealer wins.\n\n- If both have BlackJack, it's a tie.\n\n- If no one has BlackJack, proceed with player's turn.\n\n- Player's turn: hit or stand until they stand or bust.\n\n- Then dealer's turn: hit until 17 or higher.\n\n- Determine the winner based on totals.\n\n- Ask player if they want to play again.\n\nNow, implementing the Hand class.\n\nIt needs to:\n\n- Hold a vector of Card objects.\n\n- Calculate the total value, handling Aces appropriately.\n\n- Display the cards, considering hidden cards for the dealer.\n\nFor the total value calculation:\n\n- Sum up all cards, treating Ace as 11.\n\n- If total exceeds 21, for each Ace, reduce it by 10 if doing so doesn't cause total to go below 21.\n\nWait, no. Actually, count the number of Aces.\n\nAdd up all cards, treating Ace as 11.\n\nIf total > 21 and there are Aces, reduce the Aces' value to 1 one by one until total <=21 or no more Aces to reduce.\n\nSomething like that.\n\nI need to implement that logic carefully to handle multiple Aces.\n\nNow, for displaying the cards.\n\nIn the Hand class, have a method like display(std::ostream&) that outputs the cards.\n\nIf it's the dealer's hand and it's face down, only display one card.\n\nOtherwise, display all cards.\n\nMaybe have a member variable indicating whether the hand is face up or not.\n\nWait, perhaps have a parameter in the display method indicating how many cards to show.\n\nAlternatively, have a method in Hand class to reveal or hide certain cards.\n\nBut to keep it simple, maybe just have a parameter in display method indicating whether to show all cards or not.\n\nFor example, display(os, show_all).\n\nIf show_all is true, display all cards; else, display only the first card.\n\nIn the player's turn, for dealer's hand, show_all=false.\n\nAfter player's turn, set show_all=true for dealer's hand.\n\nNow, for the Deck class.\n\nIt needs to:\n\n- Initialize with 52 cards.\n\n- Shuffle the deck.\n\n- Deal cards: remove cards from the top of the deck.\n\nIn C++, I can use std::vector<Card> to hold the cards.\n\nUse std::random_shuffle or std::shuffle to shuffle the deck.\n\nDeal cards by calling pop_back() on the vector.\n\nI need to handle the case when the deck runs out of cards, but for simplicity, assume the deck is unlimited or reset after each game.\n\nNow, for the Card class.\n\nIt needs to have rank and suit.\n\nMaybe override << operator to display the card.\n\nFor example, \"Ace of Spades\".\n\nNow, let's think about the main function.\n\nIt should:\n\n- Create a deck, shuffle it.\n\n- Create hands for player and dealer.\n\n- Deal two cards to each.\n\n- Check for BlackJack.\n\n- If no BlackJack, proceed with player's turn.\n\n- Then dealer's turn.\n\n- Determine the winner.\n\n- Ask to play again.\n\nI need to handle user input carefully, making sure they enter valid choices.\n\nNow, to handle Aces properly in Hand class.\n\nI need to keep track of the number of Aces in the hand.\n\nWhen calculating the total:\n\n- Sum up all cards, treating Ace as 11.\n\n- If total > 21 and there are Aces, reduce the Aces' value by 10 one by one until total <=21 or no more Aces.\n\nI need to implement this logic carefully.\n\nLet me think of an example.\n\nSuppose hand has Ace (11), King (10): total 21.\n\nIf player hits and gets another Ace: total 21 +11=32, which is bust.\n\nBut Ace can be treated as 1, so total becomes 21 +1=22, still bust.\n\nSo, need to adjust Aces' value dynamically.\n\nAnother example: Ace (11), Five (5): total 16.\n\nThen hit another Ace: total 16 +11=27, which is bust.\n\nSo, reduce one Ace from 11 to 1: total becomes 16 +1=17.\n\nSo, need to keep track of how many Aces are treated as 11, and reduce them to 1 if total exceeds 21.\n\nI need to implement this in the Hand class's total calculation method.\n\nNow, for the dealer's behavior.\n\nThe dealer must hit until their hand is 17 or higher.\n\nAlso, in some variations, dealer hits on soft 17 (e.g., Ace + 6, total 17 with Ace counted as 11).\n\nBut for simplicity, I'll have the dealer hit until hard 17 or higher.\n\nMeaning, total is 17 or higher, regardless of whether it's a soft total.\n\nI need to implement this in the dealer's turn.\n\nNow, for the user interface.\n\nNeed to display the cards and totals clearly.\n\nAsk the player for input: hit or stand.\n\nHandle invalid inputs gracefully.\n\nAlso, display messages for wins, losses, or ties.\n\nNow, to implement the Hand class's total method.\n\nHere's a possible implementation:\n\nint Hand::total() const {\n\nint sum = 0;\n\nint aces = 0;\n\nfor (const Card& card : cards) {\n\nsum += card.value();\n\nif (card.rank() == Rank::Ace) {\n\naces++;\n\n}\n\n}\n\nwhile (sum > 21 && aces > 0) {\n\nsum -= 10;\n\naces--;\n\n}\n\nreturn sum;\n\n}\n\nThis should handle the Aces properly.\n\nNow, for the display method.\n\nSomething like:\n\nvoid Hand::display(std::ostream& os, bool show_all) const {\n\nfor (size_t i = 0; i < cards.size(); ++i) {\n\nif (show_all || i == 0) {\n\nos << cards[i] << ' ';\n\n} else {\n\nos << \"Face Down\" << ' ';\n\n}\n\n}\n\n}\n\nIn the dealer's hand, initially show_all=false, so only the first card is shown.\n\nAfter player's turn, set show_all=true to reveal all cards.\n\nNow, for the Deck class.\n\nI need to initialize it with all 52 cards.\n\nIn the constructor, loop through all ranks and suits and create Card objects.\n\nThen, shuffle the deck.\n\nFor shuffling, use std::shuffle from <algorithm> header.\n\nNeed to include <algorithm> and <random> for shuffling.\n\nNow, for dealing cards.\n\nImplement a method like:\n\nCard Deck::dealCard() {\n\nif (cards.empty()) {\n\nthrow std::runtime_error(\"No more cards in the deck\");\n\n}\n\nCard card = cards.back();\n\ncards.pop_back();\n\nreturn card;\n\n}\n\nThis way, we can deal cards one by one.\n\nNow, in the main function, manage the game loop.\n\nSomething like:\n\nwhile (playAgain) {\n\n// Initialize deck and shuffle.\n\nDeck deck;\n\ndeck.shuffle();\n\n// Deal two cards to player and dealer.\n\nHand playerHand;\n\nHand dealerHand;\n\nplayerHand.addCard(deck.dealCard());\n\ndealerHand.addCard(deck.dealCard());\n\nplayerHand.addCard(deck.dealCard());\n\ndealerHand.addCard(deck.dealCard());\n\n// Check for BlackJack.\n\nif (playerHand.total() == 21) {\n\nif (dealerHand.total() == 21) {\n\nstd::cout << \"Both have BlackJack, it's a tie.\" << std::endl;\n\n} else {\n\nstd::cout << \"Player has BlackJack, player wins!\" << std::endl;\n\n}\n\n} else if (dealerHand.total() == 21) {\n\nstd::cout << \"Dealer has BlackJack, dealer wins!\" << std::endl;\n\n} else {\n\n// Player's turn.\n\nwhile (true) {\n\nstd::cout << \"Player's hand: \";\n\nplayerHand.display(std::cout, true);\n\nstd::cout << \" (Total: \" << playerHand.total() << \")\" << std::endl;\n\nstd::cout << \"Dealer's hand: \";\n\ndealerHand.display(std::cout, false);\n\nstd::cout << \" (Total: ?)\" << std::endl;\n\nstd::cout << \"Do you want to hit or stand? \";\n\nstd::string choice;\n\nstd::cin >> choice;\n\nif (choice[0] == 'h' || choice[0] == 'H') {\n\nplayerHand.addCard(deck.dealCard());\n\nif (playerHand.total() > 21) {\n\nstd::cout << \"Bust! Dealer wins.\" << std::endl;\n\nbreak;\n\n}\n\n} else {\n\n// Stand\n\nbreak;\n\n}\n\n}\n\n// Dealer's turn.\n\nif (playerHand.total() <= 21) {\n\nstd::cout << \"Dealer's hand: \";\n\ndealerHand.display(std::cout, true);\n\nstd::cout << \" (Total: \" << dealerHand.total() << \")\" << std::endl;\n\nwhile (dealerHand.total() < 17) {\n\ndealerHand.addCard(deck.dealCard());\n\nstd::cout << \"Dealer hits: \" << dealerHand.cards.back() << std::endl;\n\nstd::cout << \"Dealer's hand: \";\n\ndealerHand.display(std::cout, true);\n\nstd::cout << \" (Total: \" << dealerHand.total() << \")\" << std::endl;\n\n}\n\nif (dealerHand.total() > 21) {\n\nstd::cout << \"Dealer busts! Player wins.\" << std::endl;\n\n} else {\n\n// Compare totals.\n\nif (playerHand.total() > dealerHand.total()) {\n\nstd::cout << \"Player wins!\" << std::endl;\n\n} else if (playerHand.total() < dealerHand.total()) {\n\nstd::cout << \"Dealer wins!\" << std::endl;\n\n} else {\n\nstd::cout << \"It's a tie!\" << std::endl;\n\n}\n\n}\n\n}\n\n// Ask to play again.\n\nstd::cout << \"Do you want to play again? (y/n): \";\n\nstd::string reply;\n\nstd::cin >> reply;\n\nplayAgain = (reply[0] == 'y' || reply[0] == 'Y');\n\n}\n\n}\n\nThis is a rough sketch of the main function.\n\nI need to make sure to handle cases where the player or dealer has BlackJack.\n\nAlso, handle the case where the player busts immediately.\n\nNow, to implement the classes.\n\nFirst, define the enums for Rank and Suit.\n\nThen, the Card class.\n\nThen, the Deck class.\n\nThen, the Hand class.\n\nFinally, the main function.\n\nI need to include necessary headers: <iostream>, <vector>, <algorithm>, <random>, etc.\n\nAlso, need to handle input validation.\n\nFor example, when asking for hit or stand, make sure the user enters a valid choice.\n\nSimilarly, when asking to play again, handle invalid inputs.\n\nMaybe implement a function to read yes/no responses.\n\nNow, let's think about how to represent the ranks and suits as strings for display.\n\nIn the Card class, maybe have static arrays or maps for rank and suit names.\n\nFor example:\n\nstatic const std::string rankStrings[13] = { \"Two\", \"Three\", ..., \"Ace\" };\n\nstatic const std::string suitStrings[4] = { \"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\" };\n\nThen, in the << operator, use these strings to display the card.\n\nNow, for the Hand class's total method, I need to handle the Aces correctly.\n\nIn the earlier pseudocode, I have a loop that reduces the Aces' value from 11 to 1 if the total exceeds 21.\n\nThis should work for most cases.\n\nBut I need to make sure that if there are multiple Aces, it reduces them one by one until the total is 21 or less.\n\nFor example, hand with two Aces and a Five:\n\nInitially, sum = 11 +11 +5 = 27\n\nThen, reduce one Ace to 1: sum = 27 -10 =17\n\nNow, sum is 17, which is fine.\n\nAnother example: Aces (11,11), King (10): sum=32\n\nReduce one Ace to 1: sum=22\n\nReduce another Ace to 1: sum=12\n\nNow, sum is 12.\n\nThis seems correct.\n\nI need to implement this logic carefully to avoid errors.\n\nNow, for the dealer's behavior, hitting until 17 or higher.\n\nI need to make sure that the dealer doesn't hit if their total is already 17 or higher.\n\nAlso, handle the case where the dealer has a soft 17 (e.g., Ace + 6), but for simplicity, treat 17 as a hard limit.\n\nNow, think about error handling.\n\nFor example, if the deck runs out of cards, need to handle that.\n\nBut in a single game of Blackjack, with a deck of 52 cards, it's unlikely to run out.\n\nBut to be safe, maybe check if the deck is empty before dealing.\n\nIn the Deck::dealCard() method, throw an exception if the deck is empty.\n\nThen, in the main function, catch the exception and handle it accordingly.\n\nBut for simplicity, assume the deck is sufficiently large.\n\nNow, for the user interface.\n\nMake sure that the output is clear and readable.\n\nDisplay the player's hand and total after each action.\n\nDisplay the dealer's hand appropriately, hiding one card initially.\n\nAfter the player's turn, reveal the dealer's hand and proceed with the dealer's actions.\n\nFinally, display the result and ask if the player wants to play again.\n\nImplement input validation to handle invalid choices.\n\nFor example, if the player enters something other than 'h' or 's' for hit or stand, prompt them to enter a valid choice.\n\nSimilarly, for playing again, accept only 'y' or 'n'.\n\nI can implement a function to read a yes/no response.\n\nNow, to sum it up, here's a high-level plan:\n\n1. Define enums for Rank and Suit.\n\n2. Implement the Card class with rank and suit, and overload the << operator for display.\n\n3. Implement the Deck class with a vector of Card objects, methods to shuffle and deal cards.\n\n4. Implement the Hand class with a vector of Card objects, methods to add cards, calculate total, and display the hand.\n\n5. In the main function, manage the game loop:\n\na. Initialize deck and shuffle.\n\nb. Deal two cards to player and dealer.\n\nc. Check for BlackJack.\n\nd. If no BlackJack, proceed with player's turn:\n\ni. Display hands.\n\nii. Ask player to hit or stand.\n\niii. Handle hitting and standing, check for bust.\n\ne. If player doesn't bust, proceed with dealer's turn:\n\ni. Reveal dealer's hand.\n\nii. Dealer hits until total is 17 or higher.\n\niii. Check for dealer's bust.\n\niv. Compare totals and determine winner.\n\nf. Ask player if they want to play again.\n\n6. Implement input validation for user choices.\n\n7. Handle Aces' values dynamically in Hand::total().\n\n8. Ensure that the program is clear and user-friendly.\n\nThis should cover the basic requirements for a Blackjack simulation in C++.\n\nI need to write clean, well-documented code, making sure that each class and method has a clear responsibility.\n\nAlso, handle edge cases, such as multiple Aces in a hand, or both player and dealer having BlackJack.\n\nNow, I'll proceed to implement the code based on this plan.\n\n## Final Solution\nTo create a basic Blackjack simulation in C++, we need to model cards, a deck, hands for the player and the dealer, and the game logic. Below is a complete implementation following the outlined plan.\n\n### Code\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <random>\n#include <string>\n\nenum class Rank { Two, Three, Four, Five, Six, Seven, Eight, Nine, Ten, Jack, Queen, King, Ace };\nenum class Suit { Hearts, Diamonds, Clubs, Spades };\n\nclass Card {\npublic:\n    Card(Rank r, Suit s) : rank(r), suit(s) {}\n\n    int value() const {\n        switch (rank) {\n            case Rank::Jack: case Rank::Queen: case Rank::King: return 10;\n            case Rank::Ace: return 11;\n            default: return static_cast<int>(rank) + 2; // Two is 2, Three is 3, etc.\n        }\n    }\n\n    friend std::ostream& operator<<(std::ostream& os, const Card& card) {\n        const std::string rankStrings[] = { \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\", \"Ten\", \"Jack\", \"Queen\", \"King\", \"Ace\" };\n        const std::string suitStrings[] = { \"Hearts\", \"Diamonds\", \"Clubs\", \"Spades\" };\n        os << rankStrings[static_cast<int>(rank)] << \" of \" << suitStrings[static_cast<int>(suit)];\n        return os;\n    }\n\nprivate:\n    Rank rank;\n    Suit suit;\n};\n\nclass Deck {\npublic:\n    Deck() {\n        for (int suit = 0; suit < 4; ++suit) {\n            for (int rank = 0; rank < 13; ++rank) {\n                cards.push_back(Card(static_cast<Rank>(rank), static_cast<Suit>(suit)));\n            }\n        }\n    }\n\n    void shuffle() {\n        std::random_device rd;\n        std::mt19937 g(rd());\n        std::shuffle(cards.begin(), cards.end(), g);\n    }\n\n    Card dealCard() {\n        if (cards.empty()) {\n            throw std::runtime_error(\"No more cards in the deck\");\n        }\n        Card card = cards.back();\n        cards.pop_back();\n        return card;\n    }\n\nprivate:\n    std::vector<Card> cards;\n};\n\nclass Hand {\npublic:\n    void addCard(const Card& card) {\n        cards.push_back(card);\n    }\n\n    int total() const {\n        int sum = 0;\n        int aces = 0;\n        for (const Card& card : cards) {\n            sum += card.value();\n            if (card.rank() == Rank::Ace) {\n                aces++;\n            }\n        }\n        while (sum > 21 && aces > 0) {\n            sum -= 10;\n            aces--;\n        }\n        return sum;\n    }\n\n    void display(std::ostream& os, bool showAll) const {\n        for (size_t i = 0; i < cards.size(); ++i) {\n            if (showAll || i == 0) {\n                os << cards[i] << ' ';\n            } else {\n                os << \"Face Down\" << ' ';\n            }\n        }\n    }\n\nprivate:\n    std::vector<Card> cards;\n};\n\nint main() {\n    char playAgain = 'y';\n    while (playAgain == 'y' || playAgain == 'Y') {\n        Deck deck;\n        deck.shuffle();\n\n        Hand playerHand;\n        Hand dealerHand;\n\n        // Deal two cards to player and dealer\n        playerHand.addCard(deck.dealCard());\n        dealerHand.addCard(deck.dealCard());\n        playerHand.addCard(deck.dealCard());\n        dealerHand.addCard(deck.dealCard());\n\n        // Check for Blackjack\n        if (playerHand.total() == 21) {\n            if (dealerHand.total() == 21) {\n                std::cout << \"Both have Blackjack, it's a tie.\" << std::endl;\n            } else {\n                std::cout << \"Player has Blackjack, player wins!\" << std::endl;\n            }\n        } else if (dealerHand.total() == 21) {\n            std::cout << \"Dealer has Blackjack, dealer wins!\" << std::endl;\n        } else {\n            // Player's turn\n            while (true) {\n                std::cout << \"Player's hand: \";\n                playerHand.display(std::cout, true);\n                std::cout << \" (Total: \" << playerHand.total() << \")\" << std::endl;\n                std::cout << \"Dealer's hand: \";\n                dealerHand.display(std::cout, false);\n                std::cout << \" (Total: ?)\" << std::endl;\n                std::cout << \"Do you want to hit or stand? \";\n                std::string choice;\n                std::cin >> choice;\n                if (choice[0] == 'h' || choice[0] == 'H') {\n                    playerHand.addCard(deck.dealCard());\n                    if (playerHand.total() > 21) {\n                        std::cout << \"Bust! Dealer wins.\" << std::endl;\n                        break;\n                    }\n                } else {\n                    // Stand\n                    break;\n                }\n            }\n\n            // Dealer's turn\n            if (playerHand.total() <= 21) {\n                std::cout << \"Dealer's hand: \";\n                dealerHand.display(std::cout, true);\n                std::cout << \" (Total: \" << dealerHand.total() << \")\" << std::endl;\n                while (dealerHand.total() < 17) {\n                    dealerHand.addCard(deck.dealCard());\n                    std::cout << \"Dealer hits: \" << dealerHand.cards.back() << std::endl;\n                    std::cout << \"Dealer's hand: \";\n                    dealerHand.display(std::cout, true);\n                    std::cout << \" (Total: \" << dealerHand.total() << \")\" << std::endl;\n                }\n                if (dealerHand.total() > 21) {\n                    std::cout << \"Dealer busts! Player wins.\" << std::endl;\n                } else {\n                    // Compare totals\n                    if (playerHand.total() > dealerHand.total()) {\n                        std::cout << \"Player wins!\" << std::endl;\n                    } else if (playerHand.total() < dealerHand.total()) {\n                        std::cout << \"Dealer wins!\" << std::endl;\n                    } else {\n                        std::cout << \"It's a tie!\" << std::endl;\n                    }\n                }\n            }\n        }\n\n        // Ask to play again\n        std::cout << \"Do you want to play again? (y/n): \";\n        std::cin >> playAgain;\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Enums for Rank and Suit**: Define the rank and suit of cards.\n2. **Card Class**: Represents a playing card with rank and suit. Overloads `operator<<` for display.\n3. **Deck Class**: Manages the deck of cards, including shuffling and dealing.\n4. **Hand Class**: Manages a hand of cards, calculating the total value with proper Ace handling and displaying cards.\n5. **Main Function**: Manages the game flow, including dealing cards, checking for Blackjack, handling player and dealer turns, and determining the winner.\n\nThis program provides a simple text-based simulation of Blackjack, allowing players to play multiple rounds against an AI dealer."
    }
]