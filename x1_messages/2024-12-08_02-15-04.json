[
    {
        "role": "user",
        "content": "Write a Java program that simulates a simple banking system with account creation, deposit, withdrawal, and balance checking functionalities. Use object-oriented programming concepts and store account data in a text file.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll help you create a simple banking system in Java that includes account creation, deposit, withdrawal, and balance checking functionalities. We'll use object-oriented programming concepts and store account data in a text file.\n\nFirst, we need to plan out the structure of our program. We'll have a `Bank` class that handles the overall operations, and an `Account` class to represent individual bank accounts.\n\n### Step 1: Define the Account Class\n\nThe `Account` class will have properties like account number, account holder name, and balance. It will also have methods to deposit, withdraw, and check balance.\n\n```java\npublic class Account {\n    private String accountNumber;\n    private String accountHolderName;\n    private double balance;\n\n    public Account(String accountNumber, String accountHolderName, double initialBalance) {\n        this.accountNumber = accountNumber;\n        this.accountHolderName = accountHolderName;\n        this.balance = initialBalance;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Deposited: \" + amount);\n        } else {\n            System.out.println(\"Invalid amount\");\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Withdrew: \" + amount);\n        } else {\n            System.out.println(\"Invalid amount or insufficient balance\");\n        }\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public String getAccountNumber() {\n        return accountNumber;\n    }\n\n    @Override\n    public String toString() {\n        return \"Account{\" +\n                \"accountNumber='\" + accountNumber + '\\'' +\n                \", accountHolderName='\" + accountHolderName + '\\'' +\n                \", balance=\" + balance +\n                '}';\n    }\n}\n```\n\n### Step 2: Define the Bank Class\n\nThe `Bank` class will manage multiple accounts. It will read account data from a text file, allow creating new accounts, and perform operations on existing accounts.\n\n```java\nimport java.io.*;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Bank {\n    private List<Account> accounts;\n    private String dataFile;\n\n    public Bank(String dataFile) {\n        this.dataFile = dataFile;\n        this.accounts = new ArrayList<>();\n        loadAccounts();\n    }\n\n    private void loadAccounts() {\n        try (BufferedReader br = new BufferedReader(new FileReader(dataFile))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                String[] parts = line.split(\",\");\n                if (parts.length == 3) {\n                    String accountNumber = parts[0];\n                    String accountHolderName = parts[1];\n                    double balance = Double.parseDouble(parts[2]);\n                    accounts.add(new Account(accountNumber, accountHolderName, balance));\n                }\n            }\n        } catch (IOException e) {\n            System.out.println(\"Error loading accounts: \" + e.getMessage());\n        }\n    }\n\n    public void createAccount(String accountNumber, String accountHolderName, double initialBalance) {\n        Account newAccount = new Account(accountNumber, accountHolderName, initialBalance);\n        accounts.add(newAccount);\n        saveAccount(newAccount);\n        System.out.println(\"Account created: \" + newAccount);\n    }\n\n    private void saveAccount(Account account) {\n        try (PrintWriter pw = new PrintWriter(new FileWriter(dataFile, true))) {\n            pw.println(account.getAccountNumber() + \",\" + account.getAccountHolderName() + \",\" + account.getBalance());\n        } catch (IOException e) {\n            System.out.println(\"Error saving account: \" + e.getMessage());\n        }\n    }\n\n    public Account findAccount(String accountNumber) {\n        for (Account account : accounts) {\n            if (account.getAccountNumber().equals(accountNumber)) {\n                return account;\n            }\n        }\n        return null;\n    }\n\n    public void deposit(String accountNumber, double amount) {\n        Account account = findAccount(accountNumber);\n        if (account != null) {\n            account.deposit(amount);\n            updateAccount(account);\n        } else {\n            System.out.println(\"Account not found\");\n        }\n    }\n\n    public void withdraw(String accountNumber, double amount) {\n        Account account = findAccount(accountNumber);\n        if (account != null) {\n            account.withdraw(amount);\n            updateAccount(account);\n        } else {\n            System.out.println(\"Account not found\");\n        }\n    }\n\n    public void checkBalance(String accountNumber) {\n        Account account = findAccount(accountNumber);\n        if (account != null) {\n            System.out.println(\"Balance: \" + account.getBalance());\n        } else {\n            System.out.println(\"Account not found\");\n        }\n    }\n\n    private void updateAccount(Account account) {\n        try (PrintWriter pw = new PrintWriter(new FileWriter(dataFile))) {\n            for (Account acc : accounts) {\n                pw.println(acc.getAccountNumber() + \",\" + acc.getAccountHolderName() + \",\" + acc.getBalance());\n            }\n        } catch (IOException e) {\n            System.out.println(\"Error updating account: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Step 3: Create a Main Class to Test the Banking System\n\nWe'll create a `Main` class with a simple menu to interact with the bank system.\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank(\"bank_data.txt\");\n        Scanner scanner = new Scanner(System.in);\n        boolean exit = false;\n\n        while (!exit) {\n            System.out.println(\"\\nBanking System Menu:\");\n            System.out.println(\"1. Create Account\");\n            System.out.println(\"2. Deposit\");\n            System.out.println(\"3. Withdraw\");\n            System.out.println(\"4. Check Balance\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Enter choice: \");\n\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n                case 1:\n                    System.out.print(\"Enter account number: \");\n                    String accountNumber = scanner.nextLine();\n                    System.out.print(\"Enter account holder name: \");\n                    String accountHolderName = scanner.nextLine();\n                    System.out.print(\"Enter initial balance: \");\n                    double initialBalance = scanner.nextDouble();\n                    scanner.nextLine(); // Consume newline\n                    bank.createAccount(accountNumber, accountHolderName, initialBalance);\n                    break;\n                case 2:\n                    System.out.print(\"Enter account number: \");\n                    String depositAccountNumber = scanner.nextLine();\n                    System.out.print(\"Enter amount to deposit: \");\n                    double depositAmount = scanner.nextDouble();\n                    scanner.nextLine(); // Consume newline\n                    bank.deposit(depositAccountNumber, depositAmount);\n                    break;\n                case 3:\n                    System.out.print(\"Enter account number: \");\n                    String withdrawAccountNumber = scanner.nextLine();\n                    System.out.print(\"Enter amount to withdraw: \");\n                    double withdrawAmount = scanner.nextDouble();\n                    scanner.nextLine(); // Consume newline\n                    bank.withdraw(withdrawAccountNumber, withdrawAmount);\n                    break;\n                case 4:\n                    System.out.print(\"Enter account number: \");\n                    String balanceAccountNumber = scanner.nextLine();\n                    bank.checkBalance(balanceAccountNumber);\n                    break;\n                case 5:\n                    exit = true;\n                    break;\n                default:\n                    System.out.println(\"Invalid choice\");\n            }\n        }\n        scanner.close();\n    }\n}\n```\n\n### Explanation\n\n1. **Account Class**: Represents a bank account with methods to deposit, withdraw, and check balance.\n2. **Bank Class**: Manages multiple accounts, reads from and writes to a text file to persist data.\n3. **Main Class**: Provides a menu-driven interface to interact with the banking system.\n\nThis setup ensures that account data is stored in a text file and can be loaded and updated as needed. The program uses basic file I/O operations to handle data persistence."
    }
]