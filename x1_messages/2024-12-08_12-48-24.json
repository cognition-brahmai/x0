[
    {
        "role": "user",
        "content": "Write a Python script to implement a singly linked list data structure with methods for insertion, deletion, searching, and displaying elements. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a singly linked list in Python involves creating a Node class to represent each element in the list and a LinkedList class to manage these nodes. Here's a step-by-step guide to creating such a data structure with methods for insertion, deletion, searching, and displaying elements.\n\n### Step 1: Define the Node Class\nEach node in the linked list will hold data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the LinkedList Class\nThis class will manage the nodes, including operations like insertion, deletion, searching, and displaying the list.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Method to insert a new node at the beginning\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    # Method to insert a new node at the end\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    # Method to delete a node\n    def delete_node(self, key):\n        temp = self.head\n        # If the head node itself holds the key to be deleted\n        if temp and temp.data == key:\n            self.head = temp.next\n            temp = None\n            return\n        # Search for the key and keep track of the previous node\n        prev = None\n        while temp and temp.data != key:\n            prev = temp\n            temp = temp.next\n        if temp is None:\n            return\n        prev.next = temp.next\n        temp = None\n\n    # Method to search for an element\n    def search(self, key):\n        current = self.head\n        while current:\n            if current.data == key:\n                return True\n            current = current.next\n        return False\n\n    # Method to display the linked list\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n```\n\n### Explanation\n1. **Node Class**: This class has two attributes: `data` to store the value and `next` to point to the next node.\n2. **LinkedList Class**:\n   - **insert_at_beginning(data)**: Inserts a new node with the given data at the beginning of the list.\n   - **insert_at_end(data)**: Inserts a new node with the given data at the end of the list.\n   - **delete_node(key)**: Deletes the node that contains the given key.\n   - **search(key)**: Searches for the given key in the list and returns `True` if found, else `False`.\n   - **display()**: Prints the elements of the list.\n\nThis implementation provides basic operations for managing a singly linked list in Python. You can expand upon this by adding more methods as needed."
    }
]