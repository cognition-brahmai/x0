[
    {
        "role": "user",
        "content": "Create a Python script that implements a simple singly linked list with methods for adding elements at the beginning, end, and specified index, removing elements by value, and printing the entire list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in Python involves defining a Node class to represent each element in the list and a LinkedList class to manage the nodes. Here's a step-by-step guide to implementing the requested functionalities:\n\n1. **Node Class**: This class will have a constructor to initialize the data and the next pointer.\n\n2. **LinkedList Class**: This class will handle the operations:\n   - **Adding at the Beginning**: Prepend a new node to the start of the list.\n   - **Adding at the End**: Append a new node to the end of the list.\n   - **Adding at a Specified Index**: Insert a new node at a given position.\n   - **Removing by Value**: Delete the first occurrence of a node with the specified value.\n   - **Printing the List**: Display all the elements in the list.\n\nLet's write the code accordingly:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def add_at_index(self, index, data):\n        if index < 0:\n            print(\"Index should be non-negative.\")\n            return\n        if index == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            print(\"Index out of bounds.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, key):\n        current = self.head\n        previous = None\n        while current and current.data != key:\n            previous = current\n            current = current.next\n        if current is None:\n            print(f\"{key} not found in the list.\")\n            return\n        if previous is None:\n            self.head = current.next\n        else:\n            previous.next = current.next\n\n    def print_list(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.add_beginning(3)\n    ll.add_end(5)\n    ll.add_at_index(1, 4)\n    ll.print_list()  # Output: 3 -> 4 -> 5 -> None\n    ll.remove_by_value(4)\n    ll.print_list()  # Output: 3 -> 5 -> None\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Initializes with `data` and `next` pointer set to `None`.\n\n2. **LinkedList Class**:\n   - **add_beginning(data)**: Creates a new node and makes it the new head.\n   - **add_end(data)**: Traverses to the end of the list and appends a new node.\n   - **add_at_index(index, data)**: Inserts a new node at the specified index. Handles edge cases like negative indices and out-of-bounds indices.\n   - **remove_by_value(key)**: Removes the first node that matches the given value.\n   - **print_list()**: Prints the entire list from head to tail.\n\nThis implementation should cover all the basic operations you need for a singly linked list in Python. If you have any specific requirements or need further modifications, feel free to ask!"
    }
]