[
    {
        "role": "user",
        "content": "Develop a Python script that connects to a MySQL database, creates a table called \"products\" with columns for product_id, product_name, price, and quantity, and inserts sample data into the table. Additionally, implement functions to update the price and quantity of a product based on its product_id."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Python and MySQL task. Let's break it down step by step.\n\nFirst, you need to connect to a MySQL database using Python. For this, you'll likely use the `mysql-connector-python` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install mysql-connector-python\n```\n\nOnce you have the connector installed, you can start by setting up your database connection. You'll need your database host, user, password, and database name. Here's a basic example of how to connect:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n```\n\nReplace `'your_host'`, `'your_user'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n\nNext, you need to create a table named \"products\" with columns for product_id, product_name, price, and quantity. You can do this by executing an SQL `CREATE TABLE` statement. Here's how you can define the table:\n\n```python\ndef create_products_table(connection):\n    cursor = connection.cursor()\n    query = '''\n    CREATE TABLE IF NOT EXISTS products (\n        product_id INT AUTO_INCREMENT PRIMARY KEY,\n        product_name VARCHAR(255) NOT NULL,\n        price DECIMAL(10, 2) NOT NULL,\n        quantity INT NOT NULL\n    )\n    '''\n    cursor.execute(query)\n    connection.commit()\n    cursor.close()\n```\n\nThis function creates a table with the specified columns. The `product_id` is set as an auto-increment primary key, which means it will automatically generate a unique ID for each new product.\n\nNow, let's insert some sample data into the \"products\" table. You can write a function to insert a single product or multiple products. Here's an example of inserting a single product:\n\n```python\ndef insert_product(connection, product_name, price, quantity):\n    cursor = connection.cursor()\n    query = '''\n    INSERT INTO products (product_name, price, quantity)\n    VALUES (%s, %s, %s)\n    '''\n    cursor.execute(query, (product_name, price, quantity))\n    connection.commit()\n    cursor.close()\n```\n\nYou can call this function multiple times with different data to insert multiple products.\n\nFor updating the price and quantity of a product based on its product_id, you can create two separate functions or combine them into one. Here, I'll show you how to create separate functions for updating price and quantity:\n\n```python\ndef update_price(connection, product_id, new_price):\n    cursor = connection.cursor()\n    query = '''\n    UPDATE products\n    SET price = %s\n    WHERE product_id = %s\n    '''\n    cursor.execute(query, (new_price, product_id))\n    connection.commit()\n    cursor.close()\n\ndef update_quantity(connection, product_id, new_quantity):\n    cursor = connection.cursor()\n    query = '''\n    UPDATE products\n    SET quantity = %s\n    WHERE product_id = %s\n    '''\n    cursor.execute(query, (new_quantity, product_id))\n    connection.commit()\n    cursor.close()\n```\n\nThese functions take the connection, product_id, and the new value to update either the price or the quantity.\n\nFinally, you can put all these functions together in a script and test them. Here's a complete example:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n\ndef create_products_table(connection):\n    cursor = connection.cursor()\n    query = '''\n    CREATE TABLE IF NOT EXISTS products (\n        product_id INT AUTO_INCREMENT PRIMARY KEY,\n        product_name VARCHAR(255) NOT NULL,\n        price DECIMAL(10, 2) NOT NULL,\n        quantity INT NOT NULL\n    )\n    '''\n    cursor.execute(query)\n    connection.commit()\n    cursor.close()\n\ndef insert_product(connection, product_name, price, quantity):\n    cursor = connection.cursor()\n    query = '''\n    INSERT INTO products (product_name, price, quantity)\n    VALUES (%s, %s, %s)\n    '''\n    cursor.execute(query, (product_name, price, quantity))\n    connection.commit()\n    cursor.close()\n\ndef update_price(connection, product_id, new_price):\n    cursor = connection.cursor()\n    query = '''\n    UPDATE products\n    SET price = %s\n    WHERE product_id = %s\n    '''\n    cursor.execute(query, (new_price, product_id))\n    connection.commit()\n    cursor.close()\n\ndef update_quantity(connection, product_id, new_quantity):\n    cursor = connection.cursor()\n    query = '''\n    UPDATE products\n    SET quantity = %s\n    WHERE product_id = %s\n    '''\n    cursor.execute(query, (new_quantity, product_id))\n    connection.commit()\n    cursor.close()\n\nif __name__ == \"__main__\":\n    conn = create_connection()\n    create_products_table(conn)\n    \n    # Insert sample data\n    insert_product(conn, 'Product A', 19.99, 100)\n    insert_product(conn, 'Product B', 29.99, 50)\n    insert_product(conn, 'Product C', 9.99, 200)\n    \n    # Update price and quantity\n    update_price(conn, 1, 24.99)\n    update_quantity(conn, 2, 75)\n    \n    conn.close()\n```\n\nMake sure to replace the placeholder values in `create_connection()` with your actual database credentials.\n\nThis script will connect to your MySQL database, create the \"products\" table if it doesn't exist, insert three sample products, and then update the price of product with ID 1 and the quantity of product with ID 2.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]