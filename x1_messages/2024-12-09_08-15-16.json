[
    {
        "role": "user",
        "content": "Write a Golang program that simulates a simple chat server using WebSockets. The server should allow multiple clients to connect, send messages, and broadcast received messages to all connected clients."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a simple chat server using WebSockets in Go, we'll use the `gorilla/websocket` package, which is a popular WebSocket library for Go.\n\nFirst, make sure you have Go installed on your machine. Then, you can install the `gorilla/websocket` package by running:\n\n```sh\ngo get github.com/gorilla/websocket\n```\n\nNow, let's create a new directory for our project and navigate into it:\n\n```sh\nmkdir chat-server\ncd chat-server\n```\n\nNext, create a new Go file, for example, `main.go`, and open it in your favorite text editor.\n\nWe'll start by importing the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"github.com/gorilla/websocket\"\n)\n```\n\nWe need to define a data structure to manage the connections. We'll use a slice to store pointers to the client connections.\n\n```go\nvar clients = make(map[*websocket.Conn]bool) // Connected clients\nvar broadcast = make(chan Message)           // Broadcast channel for messages\nvar upgrader = websocket.Upgrader{\n\tCheckOrigin: func(r *http.Request) bool {\n\t\treturn true\n\t},\n}\n```\n\nHere, `clients` is a map that keeps track of connected clients, `broadcast` is a channel to send messages to be broadcasted, and `upgrader` is used to upgrade HTTP connections to WebSocket connections.\n\nNext, we define a `Message` struct to hold the message data:\n\n```go\ntype Message struct {\n\tUsername string `json:\"username\"`\n\tMessage  string `json:\"message\"`\n}\n```\n\nNow, we'll write a function to handle incoming WebSocket connections:\n\n```go\nfunc handleConnections(w http.ResponseWriter, r *http.Request) {\n\tws, err := upgrader.Upgrade(w, r, nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer ws.Close()\n\n\tclients[ws] = true\n\n\tfor {\n\t\tvar msg Message\n\t\terr := ws.ReadJSON(&msg)\n\t\tif err != nil {\n\t\t\tdelete(clients, ws)\n\t\t\tbreak\n\t\t}\n\t\tbroadcast <- msg\n\t}\n}\n```\n\nIn this function, we upgrade the HTTP connection to a WebSocket connection and add the new client to the `clients` map. Then, in a loop, we read messages from the client and send them to the `broadcast` channel. If there's an error reading the message, we remove the client from the map and break out of the loop.\n\nNext, we need a function to handle broadcasting messages to all connected clients:\n\n```go\nfunc handleMessages() {\n\tfor {\n\t\tmsg := <-broadcast\n\t\tfor client := range clients {\n\t\t\terr := client.WriteJSON(msg)\n\t\t\tif err != nil {\n\t\t\t\tlog.Printf(\"Error sending message to client: %v\", err)\n\t\t\t\tclient.Close()\n\t\t\t\tdelete(clients, client)\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nThis function listens on the `broadcast` channel for new messages and sends them to all connected clients using `WriteJSON`. If there's an error sending a message to a client, we close the connection and remove the client from the map.\n\nFinally, we set up the HTTP server and define the route for WebSocket connections:\n\n```go\nfunc main() {\n\thttp.HandleFunc(\"/ws\", handleConnections)\n\tgo handleMessages()\n\n\tfmt.Println(\"Chat server is running on :8080\")\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\nIn the `main` function, we define the WebSocket route `/ws` and start a goroutine to handle message broadcasting. Then, we start the HTTP server on port 8080.\n\nThat's it! You now have a simple chat server using WebSockets in Go.\n\nTo test the server, you can use a WebSocket client or create a simple HTML page with JavaScript to connect to the server and send/receive messages.\n\nHere's an example HTML page for testing:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n\t<meta charset=\"UTF-8\">\n\t<title>Chat Client</title>\n</head>\n<body>\n\t<input type=\"text\" id=\"username\" placeholder=\"Username\">\n\t<input type=\"text\" id=\"message\" placeholder=\"Message\">\n\t<button onclick=\"sendMessage()\">Send</button>\n\t<ul id=\"messages\"></ul>\n\n\t<script>\n\t\tconst socket = new WebSocket(\"ws://localhost:8080/ws\");\n\n\t\tsocket.onmessage = function(event) {\n\t\t\tconst data = JSON.parse(event.data);\n\t\t\tconst messages = document.getElementById(\"messages\");\n\t\t\tconst message = document.createElement(\"li\");\n\t\t\tmessage.textContent = `${data.username}: ${data.message}`;\n\t\t\tmessages.appendChild(message);\n\t\t};\n\n\t\tfunction sendMessage() {\n\t\t\tconst username = document.getElementById(\"username\").value;\n\t\t\tconst message = document.getElementById(\"message\").value;\n\t\t\tsocket.send(JSON.stringify({ username, message }));\n\t\t\tdocument.getElementById(\"message\").value = \"\";\n\t\t}\n\t</script>\n</body>\n</html>\n```\n\nOpen this HTML file in multiple browser windows to simulate multiple clients connecting to the chat server.\n\nI hope this helps! Let me know if you have any questions."
    }
]