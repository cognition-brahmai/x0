[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to insert, delete, and search for elements. Also include a method to print the entire list in both forward and reverse order."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python class for a doubly linked list with methods to insert, delete, search for elements, and print the list in both forward and reverse order.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def insert(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def delete(self, data):\n        current = self.head\n        while current:\n            if current.data == data:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def search(self, data):\n        current = self.head\n        while current:\n            if current.data == data:\n                return True\n            current = current.next\n        return False\n\n    def print_forward(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n    def print_reverse(self):\n        current = self.tail\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.prev\n        print(\"None\")\n\n# Example usage:\ndll = DoublyLinkedList()\ndll.insert(1)\ndll.insert(2)\ndll.insert(3)\ndll.print_forward()  # Output: 1 <-> 2 <-> 3 <-> None\ndll.print_reverse()  # Output: 3 <-> 2 <-> 1 <-> None\ndll.delete(2)\ndll.print_forward()  # Output: 1 <-> 3 <-> None\nprint(dll.search(3))  # Output: True\nprint(dll.search(2))  # Output: False\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents a single node in the doubly linked list.\n   - Each node has `data`, `next`, and `prev` attributes.\n\n2. **DoublyLinkedList Class**:\n   - Initializes with `head` and `tail` attributes set to `None`.\n   - **insert(data)**: Adds a new node with the given data to the end of the list.\n   - **delete(data)**: Removes the first node containing the given data.\n   - **search(data)**: Returns `True` if the data is found in the list, else `False`.\n   - **print_forward()**: Prints the list from head to tail.\n   - **print_reverse()**: Prints the list from tail to head.\n\nThis implementation ensures that the doubly linked list functions correctly for insertion, deletion, searching, and printing in both directions."
    }
]