[
    {
        "role": "user",
        "content": "Develop a Python program that uses the FastAPI framework to build a RESTful API for managing a collection of books, including endpoints for listing all books, retrieving a book by ID, adding a new book, updating an existing book, and deleting a book. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a RESTful API using FastAPI to manage a collection of books. FastAPI is a modern, fast (high-performance) web framework for building APIs with Python. It's built on top of Starlette and uses Python type hints for input validation.\n\nFirst, make sure you have FastAPI and Uvicorn installed in your environment. Uvicorn is an ASGI server that we'll use to run our application.\n\nYou can install both using pip:\n\n```bash\npip install fastapi uvicorn\n```\n\nNow, let's create a new Python file, say `main.py`, where we'll write our API code.\n\nWe'll need to define the structure of a book. For simplicity, let's assume each book has an ID, a title, an author, and a publication year.\n\nWe'll use Pydantic, which is integrated with FastAPI, to define data models.\n\nHere's a step-by-step guide:\n\n1. **Import necessary modules:**\n\n```python\nfrom fastapi import FastAPI, HTTPException\nfrom pydantic import BaseModel\nfrom typing import List, Optional\nfrom datetime import datetime\n```\n\n2. **Define the Book model:**\n\nWe'll create a Pydantic model called `Book`.\n\n```python\nclass Book(BaseModel):\n    id: int\n    title: str\n    author: str\n    publication_year: int\n```\n\n3. **Create an instance of FastAPI:**\n\n```python\napp = FastAPI()\n```\n\n4. **Initialize a list to store books:**\n\nFor this example, we'll use a simple list to store books. In a real-world scenario, you'd probably use a database.\n\n```python\nbooks = []\n```\n\n5. **Create endpoints:**\n\n### Listing all books\n\n```python\n@app.get(\"/books\", response_model=List[Book])\ndef read_books():\n    return books\n```\n\n### Retrieving a book by ID\n\n```python\n@app.get(\"/books/{book_id}\", response_model=Book)\ndef read_book(book_id: int):\n    for book in books:\n        if book.id == book_id:\n            return book\n    raise HTTPException(status_code=404, detail=\"Book not found\")\n```\n\n### Adding a new book\n\n```python\n@app.post(\"/books\", response_model=Book)\ndef create_book(book: Book):\n    books.append(book)\n    return book\n```\n\n### Updating an existing book\n\n```python\n@app.put(\"/books/{book_id}\", response_model=Book)\ndef update_book(book_id: int, updated_book: Book):\n    for index, book in enumerate(books):\n        if book.id == book_id:\n            books[index] = updated_book\n            return updated_book\n    raise HTTPException(status_code=404, detail=\"Book not found\")\n```\n\n### Deleting a book\n\n```python\n@app.delete(\"/books/{book_id}\", response_model=Book)\ndef delete_book(book_id: int):\n    for index, book in enumerate(books):\n        if book.id == book_id:\n            deleted_book = books.pop(index)\n            return deleted_book\n    raise HTTPException(status_code=404, detail=\"Book not found\")\n```\n\n6. **Run the application:**\n\nYou can run the application using Uvicorn:\n\n```bash\nuvicorn main:app --reload\n```\n\nThis will start the server, and you can access the API at `http://127.0.0.1:8000/`. FastAPI also comes with an automatically generated API documentation accessible at `http://127.0.0.1:8000/docs` using Swagger UI, or at `http://127.0.0.1:8000/redoc` using ReDoc.\n\nThat's it! You've created a simple RESTful API for managing books using FastAPI.\n\n**Note:** This example uses an in-memory list to store books, which means all data will be lost when the application stops. For a production application, you should consider using a database to persist data.\n"
    }
]