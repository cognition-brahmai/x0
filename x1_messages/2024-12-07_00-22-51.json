[
    {
        "role": "user",
        "content": "Create a PowerShell script that checks for disk space on a given path (input by the user) and logs the available space every hour. If the free space falls below a specified limit, it should send an email notification. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll help you create a PowerShell script that monitors disk space on a specified path and sends an email if the free space goes below a certain limit. We'll set it up to log the available space every hour.\n\nFirst, you'll need to have PowerShell installed on your system, which should be fine since you're looking to write a PowerShell script.\n\nHere\u2019s a step-by-step guide to achieve this:\n\n### Step 1: Define Script Parameters\n\nWe need to get inputs from the user for the path to monitor, the free space limit, and email details for notifications.\n\n### Step 2: Check Disk Space\n\nUse PowerShell cmdlets to check the disk space on the specified path.\n\n### Step 3: Log the Available Space\n\nWrite the available space to a log file every hour.\n\n### Step 4: Send Email Notification if Space is Low\n\nIf the free space falls below the specified limit, send an email notification.\n\n### Step 5: Schedule the Script to Run Every Hour\n\nUse Task Scheduler or a similar tool to run the script hourly.\n\n## Final Solution\n\nTo create a PowerShell script that monitors disk space and sends email notifications when space falls below a specified limit, follow these steps:\n\n### Solution Code\n\n```powershell\n# Define parameters\nparam(\n    [string]$Path = $(Read-Host -Prompt \"Enter the path to monitor\"),\n    [int]$FreeSpaceLimitMB = $(Read-Host -Prompt \"Enter the free space limit in MB\"),\n    [string]$ToEmail = $(Read-Host -Prompt \"Enter the recipient email address\"),\n    [string]$FromEmail = $(Read-Host -Prompt \"Enter the sender email address\"),\n    [string]$SmtpServer = $(Read-Host -Prompt \"Enter the SMTP server\")\n)\n\n# Function to check disk space\nfunction Check-DiskSpace {\n    param(\n        [string]$Path,\n        [int]$FreeSpaceLimitMB\n    )\n    $disk = Get-PSDrive -Name (Split-Path -Path $Path -Qualifier)\n    $freeSpaceMB = $disk.Free / 1MB\n    return $freeSpaceMB\n}\n\n# Function to log disk space\nfunction Log-DiskSpace {\n    param(\n        [string]$Path,\n        [double]$FreeSpaceMB,\n        [string]$LogFilePath = \"$PSScriptRoot\\disk_space_log.txt\"\n    )\n    $timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\n    \"$timestamp - Path: $Path, Free Space: $FreeSpaceMB MB\" | Out-File -FilePath $LogFilePath -Append\n}\n\n# Function to send email notification\nfunction Send-EmailNotification {\n    param(\n        [string]$ToEmail,\n        [string]$FromEmail,\n        [string]$SmtpServer,\n        [string]$Subject,\n        [string]$Body\n    )\n    $emailParams = @{\n        To = $ToEmail\n        From = $FromEmail\n        Subject = $Subject\n        Body = $Body\n        SmtpServer = $SmtpServer\n    }\n    Send-MailMessage @emailParams\n}\n\n# Main script logic\ntry {\n    $freeSpaceMB = Check-DiskSpace -Path $Path -FreeSpaceLimitMB $FreeSpaceLimitMB\n    Log-DiskSpace -Path $Path -FreeSpaceMB $freeSpaceMB\n\n    if ($freeSpaceMB -lt $FreeSpaceLimitMB) {\n        $subject = \"Low Disk Space Warning on $Path\"\n        $body = \"The free space on $Path is below the specified limit. Current free space: $freeSpaceMB MB.\"\n        Send-EmailNotification -ToEmail $ToEmail -FromEmail $FromEmail -SmtpServer $SmtpServer -Subject $subject -Body $body\n    }\n} catch {\n    Write-Error \"An error occurred: $_\"\n}\n```\n\n### Explanation\n\n1. **Parameters Definition**:\n   - The script accepts parameters for the path to monitor, the free space limit in MB, recipient and sender email addresses, and the SMTP server for sending emails.\n\n2. **Check-DiskSpace Function**:\n   - This function calculates the free space in MB on the specified path.\n\n3. **Log-DiskSpace Function**:\n   - Logs the current free space to a file named `disk_space_log.txt` in the script's directory.\n\n4. **Send-EmailNotification Function**:\n   - Sends an email notification using the specified SMTP server when the free space is below the limit.\n\n5. **Main Script Logic**:\n   - Calls the `Check-DiskSpace` function to get the current free space.\n   - Logs the free space using `Log-DiskSpace`.\n   - If the free space is below the limit, sends an email using `Send-EmailNotification`.\n\n### Running the Script\n\n1. **Save the Script**:\n   - Save the script to a file, for example, `MonitorDiskSpace.ps1`.\n\n2. **Run the Script**:\n   - Execute the script in PowerShell, providing the required parameters or responding to the prompts.\n\n3. **Schedule the Script**:\n   - Use Windows Task Scheduler to run this script every hour to monitor the disk space continuously.\n\nThis script provides a robust way to monitor disk space and get notifications via email when space runs low, ensuring proactive management of storage resources."
    }
]