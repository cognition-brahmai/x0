[
    {
        "role": "user",
        "content": "Write a Python script that performs image classification using a pre-trained deep learning model from the TensorFlow library. The user should be able to provide an image file as input, and the script should display the top 5 predicted classes along with their probabilities. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a Python script that can classify images using a pre-trained deep learning model from TensorFlow. We'll use one of the popular models like MobileNetV2, which is efficient and works well for image classification tasks. Here\u2019s a step-by-step guide to achieve this:\n\n### Step 1: Install Required Libraries\n\nFirst, make sure you have the necessary libraries installed. You'll need TensorFlow and PIL (Pillow) for image processing. You can install them using pip if you haven't already:\n\n```bash\npip install tensorflow pillow\n```\n\n### Step 2: Import Libraries\n\nIn your Python script, import the required libraries:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.keras.applications import mobilenet_v2\nfrom tensorflow.keras.preprocessing import image\nimport numpy as np\nfrom PIL import Image\n```\n\n### Step 3: Load the Pre-Trained Model\n\nWe'll use MobileNetV2, which is a pre-trained model available in Keras Applications. Make sure to load the model with weights pre-trained on ImageNet:\n\n```python\nmodel = tf.keras.applications.MobileNetV2(weights='imagenet')\n```\n\n### Step 4: Preprocess the Image\n\nYou need to preprocess the input image according to the requirements of the MobileNetV2 model. This includes resizing the image to 224x224 pixels and scaling the pixel values:\n\n```python\ndef preprocess_image(img_path):\n    img = Image.open(img_path)\n    img = img.resize((224, 224))\n    img_array = image.img_to_array(img)\n    img_array = np.expand_dims(img_array, axis=0)\n    img_array = mobilenet_v2.preprocess_input(img_array)\n    return img_array\n```\n\n### Step 5: Make Predictions\n\nUse the model to predict the classes for the input image and retrieve the top 5 predictions with their probabilities:\n\n```python\ndef predict_top_classes(img_array, top=5):\n    predictions = model.predict(img_array)\n    decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=top)[0]\n    return decoded_predictions\n```\n\n### Step 6: Display the Results\n\nFinally, display the top 5 predicted classes along with their probabilities:\n\n```python\ndef display_predictions(predictions):\n    for i, (imagenet_id, description, probability) in enumerate(predictions):\n        print(f\"{i+1}. {description}: {probability*100:.2f}%\")\n```\n\n### Step 7: Main Function\n\nCombine all the steps in a main function that takes the image path as input and performs the classification:\n\n```python\ndef main(img_path):\n    img_array = preprocess_image(img_path)\n    predictions = predict_top_classes(img_array)\n    display_predictions(predictions)\n```\n\n### Step 8: Run the Script\n\nYou can run the script by calling the main function with the path to your image:\n\n```python\nif __name__ == \"__main__\":\n    import sys\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py path_to_image\")\n        sys.exit(1)\n    img_path = sys.argv[1]\n    main(img_path)\n```\n\n### Complete Script\n\nHere's the complete script put together:\n\n```python\nimport tensorflow as tf\nfrom tensorflow.keras.applications import mobilenet_v2\nfrom tensorflow.keras.preprocessing import image\nimport numpy as np\nfrom PIL import Image\nimport sys\n\ndef preprocess_image(img_path):\n    img = Image.open(img_path)\n    img = img.resize((224, 224))\n    img_array = image.img_to_array(img)\n    img_array = np.expand_dims(img_array, axis=0)\n    img_array = mobilenet_v2.preprocess_input(img_array)\n    return img_array\n\ndef predict_top_classes(img_array, top=5):\n    predictions = model.predict(img_array)\n    decoded_predictions = tf.keras.applications.mobilenet_v2.decode_predictions(predictions, top=top)[0]\n    return decoded_predictions\n\ndef display_predictions(predictions):\n    for i, (imagenet_id, description, probability) in enumerate(predictions):\n        print(f\"{i+1}. {description}: {probability*100:.2f}%\")\n\ndef main(img_path):\n    img_array = preprocess_image(img_path)\n    predictions = predict_top_classes(img_array)\n    display_predictions(predictions)\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: python script.py path_to_image\")\n        sys.exit(1)\n    img_path = sys.argv[1]\n    model = tf.keras.applications.MobileNetV2(weights='imagenet')\n    main(img_path)\n```\n\n### Explanation\n\n1. **Library Imports:** Import necessary libraries for image processing and deep learning.\n2. **Model Loading:** Load the pre-trained MobileNetV2 model.\n3. **Image Preprocessing:** Resize and preprocess the image according to the model's requirements.\n4. **Predictions:** Use the model to predict the classes and decode the predictions to get human-readable labels and probabilities.\n5. **Display Results:** Print the top 5 predictions with their probabilities.\n\nThis script provides a straightforward way to perform image classification using a pre-trained deep learning model in TensorFlow."
    }
]