[
    {
        "role": "user",
        "content": "Design a Java program that reads JSON data from a RESTful API and prints it in a human-readable format. Include error handling for cases when the API is unreachable or returns invalid data."
    },
    {
        "role": "assistant",
        "content": "To design a Java program that reads JSON data from a RESTful API and prints it in a human-readable format, we'll need to follow several steps. This involves making HTTP requests, handling responses, parsing JSON, and ensuring that the program can handle errors gracefully.\n\n### Approach\n\n1. **Making HTTP Requests:** We'll use the `java.net.http` package introduced in Java 11 for making HTTP requests. This package provides a modern and flexible API for interacting with HTTP-based services.\n\n2. **Parsing JSON:** We'll use the `org.json` library to parse the JSON data received from the API. This library provides a straightforward way to work with JSON in Java.\n\n3. **Error Handling:** We need to handle various exceptions that might occur, such as `IOException` when the API is unreachable, or `JSONException` when the data is invalid JSON.\n\n4. **Printing Human-Readable JSON:** We'll format the JSON data to make it more readable, including proper indentation.\n\n### Solution Code\n\n```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport org.json.JSONObject;\nimport org.json.JSONTokener;\n\npublic class ApiJsonReader {\n\n    public static void main(String[] args) {\n        String apiUrl = \"https://api.example.com/data\"; // Replace with actual API URL\n\n        try {\n            // Create HTTP client and request\n            HttpClient client = HttpClient.newHttpClient();\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(apiUrl))\n                    .build();\n\n            // Send request and get response\n            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n            // Check if the request was successful\n            if (response.statusCode() == 200) {\n                // Parse JSON\n                JSONObject json = new JSONObject(new JSONTokener(response.body()));\n                // Print formatted JSON\n                System.out.println(json.toString(4)); // 4 spaces for indentation\n            } else {\n                System.err.println(\"Failed to retrieve data: HTTP error code \" + response.statusCode());\n            }\n        } catch (Exception e) {\n            // Handle exceptions\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **HTTP Request:** We use `HttpClient` to send a GET request to the specified API URL.\n\n2. **Response Handling:** We check the status code of the response. If it's 200 OK, we proceed to parse the JSON data.\n\n3. **JSON Parsing:** We use `JSONObject` from the `org.json` library to parse the JSON string. The `JSONTokener` helps in parsing the JSON data efficiently.\n\n4. **Error Handling:** We catch and handle exceptions such as `IOException` for network issues and `JSONException` for invalid JSON data. This ensures that the program doesn't crash and provides useful error messages.\n\n5. **Human-Readable JSON:** The `toString(4)` method of `JSONObject` is used to format the JSON with an indentation of 4 spaces, making it easier to read.\n\nThis approach ensures that the program is robust, handles various error scenarios, and presents the data in a user-friendly manner."
    }
]