[
    {
        "role": "user",
        "content": "Create a Golang program that establishes a WebSocket connection to a given server, sends a message, and prints any received messages back to the console."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple Golang program that uses WebSockets to connect to a server, send a message, and print any messages it receives back. WebSockets are great for real-time communication because they allow for full-duplex communication channels over a single TCP connection.\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). Once you have Go set up, you'll need to install the `gorilla/websocket` package, which is a popular WebSocket library for Go.\n\nYou can install it using:\n\n```sh\ngo get github.com/gorilla/websocket\n```\n\nNow, let's write the code step by step.\n\n1. **Import necessary packages:**\n\n   We need `net/url` for URL parsing, `log` for logging, and `github.com/gorilla/websocket` for WebSocket functionality.\n\n   ```go\n   package main\n\n   import (\n       \"log\"\n       \"net/url\"\n       \"github.com/gorilla/websocket\"\n   )\n   ```\n\n2. **Define the main function:**\n\n   This is where our program starts.\n\n   ```go\n   func main() {\n       // Code will go here\n   }\n   ```\n\n3. **Set up the WebSocket connection:**\n\n   We need to create a WebSocket dialer and connect to the server.\n\n   ```go\n   func main() {\n       serverUrl := \"ws://example.com/socket\" // Replace with your server URL\n       u, err := url.Parse(serverUrl)\n       if err != nil {\n           log.Fatal(\"Error parsing URL:\", err)\n       }\n\n       // Create a new WebSocket dialer\n       dialer := websocket.Dialer{}\n\n       // Connect to the server\n       conn, _, err := dialer.Dial(u.String(), nil)\n       if err != nil {\n           log.Fatal(\"Error connecting to server:\", err)\n       }\n       defer conn.Close()\n\n       // Code to send and receive messages will go here\n   }\n   ```\n\n4. **Send a message to the server:**\n\n   We can send a message using the `WriteMessage` method of the connection.\n\n   ```go\n   func main() {\n       // ... (previous code)\n\n       message := \"Hello, server!\"\n       err = conn.WriteMessage(websocket.TextMessage, []byte(message))\n       if err != nil {\n           log.Println(\"Error sending message:\", err)\n           return\n       }\n       log.Println(\"Sent message:\", message)\n\n       // Code to receive messages will go here\n   }\n   ```\n\n5. **Receive messages from the server:**\n\n   We can read messages in a loop using the `ReadMessage` method.\n\n   ```go\n   func main() {\n       // ... (previous code)\n\n       for {\n           messageType, messageBytes, err := conn.ReadMessage()\n           if err != nil {\n               log.Println(\"Error reading message:\", err)\n               break\n           }\n           log.Printf(\"Received message: %s\", messageBytes)\n           if messageType == websocket.CloseMessage {\n               break\n           }\n       }\n   }\n   ```\n\nPutting it all together, here's the complete program:\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"net/url\"\n    \"github.com/gorilla/websocket\"\n)\n\nfunc main() {\n    serverUrl := \"ws://example.com/socket\" // Replace with your server URL\n    u, err := url.Parse(serverUrl)\n    if err != nil {\n        log.Fatal(\"Error parsing URL:\", err)\n    }\n\n    // Create a new WebSocket dialer\n    dialer := websocket.Dialer{}\n\n    // Connect to the server\n    conn, _, err := dialer.Dial(u.String(), nil)\n    if err != nil {\n        log.Fatal(\"Error connecting to server:\", err)\n    }\n    defer conn.Close()\n\n    message := \"Hello, server!\"\n    err = conn.WriteMessage(websocket.TextMessage, []byte(message))\n    if err != nil {\n        log.Println(\"Error sending message:\", err)\n        return\n    }\n    log.Println(\"Sent message:\", message)\n\n    for {\n        messageType, messageBytes, err := conn.ReadMessage()\n        if err != nil {\n            log.Println(\"Error reading message:\", err)\n            break\n        }\n        log.Printf(\"Received message: %s\", messageBytes)\n        if messageType == websocket.CloseMessage {\n            break\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **URL Parsing:**\n   - We parse the server URL using `net/url` to ensure it's correctly formatted.\n\n2. **WebSocket Dialer:**\n   - We use `github.com/gorilla/websocket.Dialer` to establish the connection.\n\n3. **Sending a Message:**\n   - We use `conn.WriteMessage` to send a text message to the server.\n\n4. **Receiving Messages:**\n   - We loop using `conn.ReadMessage` to receive messages from the server and print them.\n   - The loop breaks if there's an error or if a close message is received.\n\nMake sure to replace `\"ws://example.com/socket\"` with the actual WebSocket URL of the server you want to connect to.\n\nThis should give you a basic WebSocket client in Go that can connect to a server, send a message, and receive responses."
    }
]