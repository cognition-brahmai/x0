[
    {
        "role": "user",
        "content": "Implement a Java program that simulates a basic file system with classes for files, directories, and operations like move, copy, and delete."
    },
    {
        "role": "assistant",
        "content": "Implementing a full-fledged file system simulation in Java is a complex task, but I can guide you through creating a simplified version that includes basic components and operations such as moving, copying, and deleting files and directories.\n\n### Approach\n\n1. **Classes**:\n   - `File`: Represents a file with a name and content.\n   - `Directory`: Represents a directory that can contain other directories and files.\n   \n2. **Operations**:\n   - **Move**: Change the location of a file or directory.\n   - **Copy**: Duplicate a file or directory to a new location.\n   - **Delete**: Remove a file or directory.\n\n3. **Path Handling**:\n   - Use string paths to represent locations within the file system.\n\n### Solution Code\n\n```java\nimport java.util.*;\n\nclass File {\n    String name;\n    String content;\n\n    public File(String name, String content) {\n        this.name = name;\n        this.content = content;\n    }\n\n    @Override\n    public String toString() {\n        return \"File{\" +\n                \"name='\" + name + '\\'' +\n                \", content='\" + content + '\\'' +\n                '}';\n    }\n}\n\nclass Directory {\n    String name;\n    Directory parent;\n    Map<String, Directory> subDirectories = new HashMap<>();\n    Map<String, File> files = new HashMap<>();\n\n    public Directory(String name, Directory parent) {\n        this.name = name;\n        this.parent = parent;\n    }\n\n    public void addDirectory(Directory subDir) {\n        subDirectories.put(subDir.name, subDir);\n    }\n\n    public void addFile(File file) {\n        files.put(file.name, file);\n    }\n\n    @Override\n    public String toString() {\n        return \"Directory{\" +\n                \"name='\" + name + '\\'' +\n                \", subDirectories=\" + subDirectories.keySet() +\n                \", files=\" + files.keySet() +\n                '}';\n    }\n}\n\npublic class FileSystemSimulation {\n\n    private Directory root = new Directory(\"root\", null);\n\n    public static void main(String[] args) {\n        FileSystemSimulation fileSystem = new FileSystemSimulation();\n        fileSystem.runSimulation();\n    }\n\n    private void runSimulation() {\n        // Create some directories and files\n        Directory home = new Directory(\"home\", root);\n        root.addDirectory(home);\n\n        Directory documents = new Directory(\"documents\", home);\n        home.addDirectory(documents);\n\n        File report = new File(\"report.txt\", \"This is the content of the report.\");\n        documents.addFile(report);\n\n        // Move report.txt from documents to home\n        move(\"/home/documents/report.txt\", \"/home/report.txt\");\n\n        // Copy report.txt from home to documents\n        copy(\"/home/report.txt\", \"/home/documents/report_copy.txt\");\n\n        // Delete report.txt from home\n        delete(\"/home/report.txt\");\n\n        // Print the file system structure\n        printFileSystem(root, 0);\n    }\n\n    private void move(String sourcePath, String destinationPath) {\n        Object item = getItem(sourcePath);\n        if (item == null) {\n            System.out.println(\"Item does not exist: \" + sourcePath);\n            return;\n        }\n        Directory destDir = getDirectory(destinationPath);\n        if (destDir == null) {\n            System.out.println(\"Destination directory does not exist: \" + destinationPath);\n            return;\n        }\n        String newItemName = getLastName(destinationPath);\n        if (item instanceof File) {\n            File file = (File) item;\n            removeItem(sourcePath);\n            destDir.addFile(new File(newItemName, file.content));\n        } else if (item instanceof Directory) {\n            Directory dir = (Directory) item;\n            removeItem(sourcePath);\n            destDir.addDirectory(new Directory(newItemName, destDir));\n            copyRecursive(dir, destDir.getSubDirectory(newItemName));\n        }\n    }\n\n    private void copy(String sourcePath, String destinationPath) {\n        Object item = getItem(sourcePath);\n        if (item == null) {\n            System.out.println(\"Item does not exist: \" + sourcePath);\n            return;\n        }\n        Directory destDir = getDirectory(destinationPath);\n        if (destDir == null) {\n            System.out.println(\"Destination directory does not exist: \" + destinationPath);\n            return;\n        }\n        String newItemName = getLastName(destinationPath);\n        if (item instanceof File) {\n            File file = (File) item;\n            destDir.addFile(new File(newItemName, file.content));\n        } else if (item instanceof Directory) {\n            Directory srcDir = (Directory) item;\n            Directory newDir = new Directory(newItemName, destDir);\n            destDir.addDirectory(newDir);\n            copyRecursive(srcDir, newDir);\n        }\n    }\n\n    private void delete(String path) {\n        Object item = getItem(path);\n        if (item == null) {\n            System.out.println(\"Item does not exist: \" + path);\n            return;\n        }\n        removeItem(path);\n    }\n\n    private void removeItem(String path) {\n        String[] parts = path.substring(1).split(\"/\");\n        Directory current = root;\n        for (int i = 0; i < parts.length - 1; i++) {\n            current = current.subDirectories.get(parts[i]);\n            if (current == null) {\n                return;\n            }\n        }\n        String lastPart = parts[parts.length - 1];\n        if (current.files.containsKey(lastPart)) {\n            current.files.remove(lastPart);\n        } else if (current.subDirectories.containsKey(lastPart)) {\n            current.subDirectories.remove(lastPart);\n        }\n    }\n\n    private void copyRecursive(Directory src, Directory dest) {\n        for (Directory subDir : src.subDirectories.values()) {\n            Directory newSubDir = new Directory(subDir.name, dest);\n            dest.addDirectory(newSubDir);\n            copyRecursive(subDir, newSubDir);\n        }\n        for (File file : src.files.values()) {\n            dest.addFile(new File(file.name, file.content));\n        }\n    }\n\n    private Object getItem(String path) {\n        String[] parts = path.substring(1).split(\"/\");\n        Directory current = root;\n        for (String part : parts) {\n            if (current.subDirectories.containsKey(part)) {\n                current = current.subDirectories.get(part);\n            } else if (current.files.containsKey(part)) {\n                return current.files.get(part);\n            } else {\n                return null;\n            }\n        }\n        return current; // Directory\n    }\n\n    private Directory getDirectory(String path) {\n        String[] parts = path.substring(1).split(\"/\");\n        Directory current = root;\n        for (String part : parts) {\n            if (current.subDirectories.containsKey(part)) {\n                current = current.subDirectories.get(part);\n            } else {\n                return null;\n            }\n        }\n        return current;\n    }\n\n    private String getLastName(String path) {\n        return path.substring(path.lastIndexOf('/') + 1);\n    }\n\n    private void printFileSystem(Directory dir, int level) {\n        String indent = \"  \".repeat(level);\n        System.out.println(indent + dir.name + \"/\");\n        for (Directory subDir : dir.subDirectories.values()) {\n            printFileSystem(subDir, level + 1);\n        }\n        for (File file : dir.files.values()) {\n            System.out.println(indent + \"  \" + file.name);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Classes**:\n   - **File**: Represents a file with a name and content.\n   - **Directory**: Represents a directory that can contain other directories and files. Each directory maintains a reference to its parent for easy navigation.\n\n2. **Operations**:\n   - **Move**: Changes the location of a file or directory from one directory to another.\n   - **Copy**: Creates a duplicate of a file or directory in a new location.\n   - **Delete**: Removes a file or directory from the file system.\n\n3. **Path Handling**:\n   - Paths are handled as strings starting with `/`, representing the root directory.\n   - Helper methods like `getItem`, `getDirectory`, and `getLastName` parse and manipulate paths to access the correct file or directory.\n\nThis simulation provides a basic framework for a file system in Java, demonstrating how to manage files and directories through common operations."
    }
]