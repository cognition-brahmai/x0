[
    {
        "role": "user",
        "content": "Create a Java program that simulates a basic banking system. The program should allow users to create accounts, deposit money, withdraw money, and check their account balance. Ensure proper error handling for invalid transactions."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a simple Java program that simulates a basic banking system. We'll cover account creation, depositing money, withdrawing money, and checking the account balance. We'll also include some basic error handling to manage invalid transactions.\n\n### Step-by-Step Guide\n\n1. **Account Class:**\n   - This class will represent a bank account and will have attributes like account number, account holder's name, and balance.\n   - It will have methods to deposit, withdraw, and check balance.\n\n2. **Bank Class:**\n   - This class will manage multiple accounts.\n   - It will have methods to create new accounts and to perform transactions on existing accounts.\n\n3. **Main Class:**\n   - This will be the entry point of the program.\n   - It will handle user interactions and call methods from the Bank class.\n\n### Code Implementation\n\n#### 1. Account.java\n\n```java\npublic class Account {\n    private int accountNumber;\n    private String accountHolderName;\n    private double balance;\n\n    public Account(int accountNumber, String accountHolderName) {\n        this.accountNumber = accountNumber;\n        this.accountHolderName = accountHolderName;\n        this.balance = 0.0;\n    }\n\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Deposited: \" + amount + \". New balance: \" + balance);\n        } else {\n            System.out.println(\"Invalid amount.\");\n        }\n    }\n\n    public void withdraw(double amount) {\n        if (amount > 0) {\n            if (balance >= amount) {\n                balance -= amount;\n                System.out.println(\"Withdrew: \" + amount + \". New balance: \" + balance);\n            } else {\n                System.out.println(\"Insufficient funds.\");\n            }\n        } else {\n            System.out.println(\"Invalid amount.\");\n        }\n    }\n\n    public double checkBalance() {\n        return balance;\n    }\n\n    public int getAccountNumber() {\n        return accountNumber;\n    }\n\n    public String getAccountHolderName() {\n        return accountHolderName;\n    }\n}\n```\n\n#### 2. Bank.java\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Bank {\n    private Map<Integer, Account> accounts;\n\n    public Bank() {\n        accounts = new HashMap<>();\n    }\n\n    public void createAccount(int accountNumber, String accountHolderName) {\n        if (!accounts.containsKey(accountNumber)) {\n            Account newAccount = new Account(accountNumber, accountHolderName);\n            accounts.put(accountNumber, newAccount);\n            System.out.println(\"Account created successfully.\");\n        } else {\n            System.out.println(\"Account number already exists.\");\n        }\n    }\n\n    public Account getAccount(int accountNumber) {\n        return accounts.get(accountNumber);\n    }\n}\n```\n\n#### 3. Main.java\n\n```java\nimport java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        Scanner scanner = new Scanner(System.in);\n        int choice;\n        do {\n            System.out.println(\"\\nBanking System Menu:\");\n            System.out.println(\"1. Create Account\");\n            System.out.println(\"2. Deposit Money\");\n            System.out.println(\"3. Withdraw Money\");\n            System.out.println(\"4. Check Balance\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Enter your choice: \");\n            choice = scanner.nextInt();\n\n            switch (choice) {\n                case 1:\n                    System.out.print(\"Enter account number: \");\n                    int accountNumber = scanner.nextInt();\n                    scanner.nextLine(); // Consume newline\n                    System.out.print(\"Enter account holder's name: \");\n                    String name = scanner.nextLine();\n                    bank.createAccount(accountNumber, name);\n                    break;\n                case 2:\n                    System.out.print(\"Enter account number: \");\n                    int depositAccountNumber = scanner.nextInt();\n                    Account depositAccount = bank.getAccount(depositAccountNumber);\n                    if (depositAccount != null) {\n                        System.out.print(\"Enter amount to deposit: \");\n                        double amount = scanner.nextDouble();\n                        depositAccount.deposit(amount);\n                    } else {\n                        System.out.println(\"Account not found.\");\n                    }\n                    break;\n                case 3:\n                    System.out.print(\"Enter account number: \");\n                    int withdrawAccountNumber = scanner.nextInt();\n                    Account withdrawAccount = bank.getAccount(withdrawAccountNumber);\n                    if (withdrawAccount != null) {\n                        System.out.print(\"Enter amount to withdraw: \");\n                        double amount = scanner.nextDouble();\n                        withdrawAccount.withdraw(amount);\n                    } else {\n                        System.out.println(\"Account not found.\");\n                    }\n                    break;\n                case 4:\n                    System.out.print(\"Enter account number: \");\n                    int balanceAccountNumber = scanner.nextInt();\n                    Account balanceAccount = bank.getAccount(balanceAccountNumber);\n                    if (balanceAccount != null) {\n                        System.out.println(\"Balance: \" + balanceAccount.checkBalance());\n                    } else {\n                        System.out.println(\"Account not found.\");\n                    }\n                    break;\n                case 5:\n                    System.out.println(\"Exiting...\");\n                    break;\n                default:\n                    System.out.println(\"Invalid choice. Please try again.\");\n            }\n        } while (choice != 5);\n\n        scanner.close();\n    }\n}\n```\n\n### Explanation\n\n1. **Account Class:**\n   - Manages individual bank accounts.\n   - Methods to deposit, withdraw, and check balance with basic validation.\n\n2. **Bank Class:**\n   - Manages multiple accounts using a `HashMap`.\n   - Creates new accounts and retrieves existing accounts by account number.\n\n3. **Main Class:**\n   - Provides a menu-driven interface for user interactions.\n   - Allows creating accounts, depositing, withdrawing, and checking balances.\n   - Uses a loop to keep the program running until the user chooses to exit.\n\nThis simple banking system covers the basic functionalities you requested and includes rudimentary error handling for invalid transactions. You can expand upon this foundation by adding more features like multiple account types, transaction history, etc."
    }
]