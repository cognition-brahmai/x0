[
    {
        "role": "user",
        "content": "Implement a Golang function that accepts a string as input and returns the same string with all vowels removed.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Golang function that takes a string as input and returns a new string with all vowels removed. This function iterates through each character in the input string and constructs a new string by excluding any vowels (both uppercase and lowercase).\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"strings\"\n)\n\nfunc removeVowels(input string) string {\n\tvowels := \"aeiouAEIOU\"\n\tvar result strings.Builder\n\n\tfor _, char := range input {\n\t\tif !strings.ContainsRune(vowels, char) {\n\t\t\tresult.WriteRune(char)\n\t\t}\n\t}\n\n\treturn result.String()\n}\n\nfunc main() {\n\tinput := \"Hello, World!\"\n\toutput := removeVowels(input)\n\tfmt.Println(\"Original String:\", input)\n\tfmt.Println(\"String without vowels:\", output)\n}\n```\n\n### Explanation:\n1. **Function Definition**: The function `removeVowels` accepts a single parameter, `input`, which is a string.\n2. **Vowels Definition**: A string `vowels` contains all vowels in both lowercase and uppercase to handle case insensitivity.\n3. **String Builder**: A `strings.Builder` is used for efficient string concatenation.\n4. **Character Iteration**: The function iterates over each rune (character) in the input string.\n5. **Vowel Check**: For each character, it checks if it is not present in the `vowels` string.\n6. **Building the Result**: If the character is not a vowel, it is written to the `result` builder.\n7. **Return the Result**: Finally, the builder's `String()` method is called to get the result as a string.\n\nThis approach ensures that the function is efficient and handles both uppercase and lowercase vowels effectively."
    }
]