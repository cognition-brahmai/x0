[
    {
        "role": "user",
        "content": "Write a Golang program that listens for incoming HTTP requests on a specified port and logs the request method, path, and headers to a MongoDB database. The program should use environment variables for configuring the MongoDB connection string and listening port."
    },
    {
        "role": "assistant",
        "content": "I'm going to create a Go program that listens for HTTP requests and logs details about each request to a MongoDB database. I'll use environment variables to configure the MongoDB connection string and the listening port. Here's how I plan to approach this:\n\n1. **Set up the project structure:**\n   - Create a new directory for the project.\n   - Initialize a Go module.\n\n2. **Handle environment variables:**\n   - Use the `os` package to read environment variables for the MongoDB connection string and the listening port.\n   - Provide default values if the environment variables are not set.\n\n3. **Connect to MongoDB:**\n   - Use the `go.mongodb.org/mongo-driver/mongo` package to connect to MongoDB.\n   - Create a collection to store the request logs.\n\n4. **Set up the HTTP server:**\n   - Use the `net/http` package to create an HTTP server.\n   - Define a handler function that logs the request method, path, and headers to MongoDB.\n   - Start the server to listen on the specified port.\n\n5. **Define the log structure:**\n   - Create a struct to represent the log entry, including fields for the request method, path, and headers.\n   - Use the `bson` tags to map the struct fields to MongoDB document keys.\n\n6. **Implement the logging function:**\n   - In the handler function, extract the required information from the HTTP request.\n   - Insert a document into the MongoDB collection with the log data.\n\n7. **Handle errors gracefully:**\n   - Check for errors when connecting to MongoDB and when inserting log entries.\n   - Log any errors to the console.\n\n8. **Test the program:**\n   - Set the environment variables for MongoDB connection string and port.\n   - Run the program and send some HTTP requests to verify that logs are being stored correctly.\n\nLet's start by setting up the project structure and initializing the Go module.\n\n## Final Solution\nTo create a Go program that listens for HTTP requests and logs the request method, path, and headers to a MongoDB database using environment variables for configuration, follow the steps below.\n\n### Approach\n\n1. **Environment Variables:**\n   - Use `os.Getenv` to read the MongoDB connection string and listening port from environment variables.\n   - Provide default values if the environment variables are not set.\n\n2. **MongoDB Connection:**\n   - Connect to MongoDB using the `mongo-driver` package.\n   - Create a collection to store request logs.\n\n3. **HTTP Server:**\n   - Use the `net/http` package to set up an HTTP server.\n   - Define a handler to log request details to MongoDB.\n\n4. **Request Logging:**\n   - Extract the request method, path, and headers.\n   - Insert log data into the MongoDB collection.\n\n5. **Error Handling:**\n   - Handle errors gracefully and log them to the console.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"net\"\n\t\"net/http\"\n\t\"os\"\n\t\"time\"\n\n\t\"go.mongodb.org/mongo-driver/bson\"\n\t\"go.mongodb.org/mongo-driver/mongo\"\n\t\"go.mongodb.org/mongo-driver/mongo/options\"\n)\n\ntype RequestLog struct {\n\tMethod  string                 `bson:\"method\"`\n\tPath    string                 `bson:\"path\"`\n\tHeaders map[string]string      `bson:\"headers\"`\n\tLoggedAt time.Time             `bson:\"logged_at\"`\n}\n\nvar collection *mongo.Collection\n\nfunc main() {\n\t// Read environment variables\n\tmongoURI := os.Getenv(\"MONGO_URI\")\n\tif mongoURI == \"\" {\n\t\tlog.Fatal(\"MONGO_URI environment variable is not set.\")\n\t}\n\n\tport := os.Getenv(\"PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\n\t// Connect to MongoDB\n\tclient, err := mongo.NewClient(options.Client().ApplyURI(mongoURI))\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create MongoDB client: %v\", err)\n\t}\n\tctx := context.Background()\n\terr = client.Connect(ctx)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to connect to MongoDB: %v\", err)\n\t}\n\tdefer client.Disconnect(ctx)\n\n\tcollection = client.Database(\"request_logs\").Collection(\"logs\")\n\n\t// Set up HTTP server\n\thttp.HandleFunc(\"/\", logRequest)\n\tlistenAddr := fmt.Sprintf(\":%s\", port)\n\tlog.Printf(\"Listening on %s\", listenAddr)\n\terr = http.ListenAndServe(listenAddr, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to start HTTP server: %v\", err)\n\t}\n}\n\nfunc logRequest(w http.ResponseWriter, r *http.Request) {\n\tloggedAt := time.Now()\n\theaders := make(map[string]string)\n\tfor k, v := range r.Header {\n\t\theaders[k] = v[0]\n\t}\n\tlogEntry := RequestLog{\n\t\tMethod:  r.Method,\n\t\tPath:    r.URL.Path,\n\t\tHeaders: headers,\n\t\tLoggedAt: loggedAt,\n\t}\n\n\t_, err := collection.InsertOne(context.Background(), logEntry)\n\tif err != nil {\n\t\tlog.Printf(\"Failed to insert log entry: %v\", err)\n\t\thttp.Error(w, \"Internal server error\", http.StatusInternalServerError)\n\t\treturn\n\t}\n\n\tw.WriteHeader(http.StatusOK)\n\tfmt.Fprintf(w, \"Request logged successfully\")\n}\n```\n\n### Explanation\n\n1. **Environment Variables:**\n   - `MONGO_URI`: The connection string for MongoDB.\n   - `PORT`: The port on which the HTTP server listens. Defaults to \"8080\" if not set.\n\n2. **MongoDB Connection:**\n   - A MongoDB client is created and connected using the provided URI.\n   - A collection named \"logs\" in the \"request_logs\" database is used to store logs.\n\n3. **HTTP Server:**\n   - An HTTP server is set up to listen on the specified port.\n   - The `logRequest` handler logs each request's method, path, and headers to MongoDB.\n\n4. **Request Logging:**\n   - Request details are captured and inserted into the MongoDB collection.\n   - Errors during insertion are logged, and an internal server error is returned to the client.\n\n5. **Error Handling:**\n   - Errors in MongoDB connection and request logging are handled and logged to the console.\n\nThis setup ensures that all incoming HTTP requests are logged with their method, path, and headers to a MongoDB database, configured via environment variables."
    }
]