[
    {
        "role": "user",
        "content": "Develop a Python Flask web application that provides a RESTful API for managing a simple task list, supporting CRUD operations on tasks (with properties like title, description, due date, and status). Use SQLite as the backend database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'm here to help you develop a Python Flask web application with a RESTful API for managing a simple task list. We'll use SQLite as the backend database to store task data, including properties like title, description, due date, and status. I'll guide you through the entire process, from setting up the environment to implementing the API endpoints for CRUD operations.\n\n## Table of Contents\n1. **Prerequisites**\n2. **Setting Up the Project**\n3. **Database Setup**\n4. **Creating the Flask Application**\n5. **Implementing API Endpoints**\n   - GET: Retrieve all tasks\n   - POST: Create a new task\n   - GET: Retrieve a single task by ID\n   - PUT: Update a task by ID\n   - DELETE: Delete a task by ID\n6. **Testing the API**\n7. **Running the Application**\n8. **Conclusion**\n\n## 1. Prerequisites\n- Python 3.x installed on your system.\n- Basic understanding of Python, Flask, and SQLite.\n\n## 2. Setting Up the Project\nFirst, create a new directory for your project and navigate into it:\n\n```bash\nmkdir task_manager\ncd task_manager\n```\n\nInitialize a new Python virtual environment and activate it:\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n```\n\nInstall Flask and Flask-SQLAlchemy:\n\n```bash\npip install Flask Flask-SQLAlchemy\n```\n\n## 3. Database Setup\nWe'll use SQLite as our database. First, define the Task model.\n\nCreate a new file `models.py`:\n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\n\ndb = SQLAlchemy()\n\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    due_date = db.Column(db.String(10), nullable=True)  # Format: YYYY-MM-DD\n    status = db.Column(db.String(20), nullable=False, default='pending')\n\n    def __repr__(self):\n        return f'<Task {self.title}>'\n```\n\n## 4. Creating the Flask Application\nCreate a new file `app.py`:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom models import db, Task\n\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///tasks.db'\napp.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False\ndb.init_app(app)\n\nwith app.app_context():\n    db.create_all()\n\n@app.route('/')\ndef home():\n    return \"Task Manager API\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nRun the application to create the database:\n\n```bash\npython app.py\n```\n\nVisit `http://127.0.0.1:5000/` in your browser to see \"Task Manager API\".\n\n## 5. Implementing API Endpoints\n### GET: Retrieve all tasks\nAdd the following route to `app.py`:\n\n```python\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    tasks = Task.query.all()\n    output = []\n    for task in tasks:\n        task_data = {\n            'id': task.id,\n            'title': task.title,\n            'description': task.description,\n            'due_date': task.due_date,\n            'status': task.status\n        }\n        output.append(task_data)\n    return jsonify({'tasks': output})\n```\n\n### POST: Create a new task\nAdd the following route to `app.py`:\n\n```python\n@app.route('/tasks', methods=['POST'])\ndef create_task():\n    data = request.get_json()\n\n    new_task = Task(\n        title=data['title'],\n        description=data.get('description'),\n        due_date=data.get('due_date'),\n        status=data.get('status', 'pending')\n    )\n\n    db.session.add(new_task)\n    db.session.commit()\n\n    return jsonify({'message': 'New task created'}), 201\n```\n\n### GET: Retrieve a single task by ID\nAdd the following route to `app.py`:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['GET'])\ndef get_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    task_data = {\n        'id': task.id,\n        'title': task.title,\n        'description': task.description,\n        'due_date': task.due_date,\n        'status': task.status\n    }\n    return jsonify({'task': task_data})\n```\n\n### PUT: Update a task by ID\nAdd the following route to `app.py`:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['PUT'])\ndef update_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    data = request.get_json()\n\n    task.title = data.get('title', task.title)\n    task.description = data.get('description', task.description)\n    task.due_date = data.get('due_date', task.due_date)\n    task.status = data.get('status', task.status)\n\n    db.session.commit()\n\n    return jsonify({'message': 'Task updated'})\n```\n\n### DELETE: Delete a task by ID\nAdd the following route to `app.py`:\n\n```python\n@app.route('/tasks/<int:task_id>', methods=['DELETE'])\ndef delete_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    db.session.delete(task)\n    db.session.commit()\n    return jsonify({'message': 'Task deleted'})\n```\n\n## 6. Testing the API\nYou can test the API using tools like Postman or curl.\n\n### Get all tasks\n```bash\ncurl http://127.0.0.1:5000/tasks\n```\n\n### Create a new task\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Learn Flask\",\"description\":\"Study Flask framework\",\"due_date\":\"2024-01-01\",\"status\":\"pending\"}' http://127.0.0.1:5000/tasks\n```\n\n### Get a single task\n```bash\ncurl http://127.0.0.1:5000/tasks/1\n```\n\n### Update a task\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Learn Advanced Flask\",\"status\":\"in_progress\"}' http://127.0.0.1:5000/tasks/1\n```\n\n### Delete a task\n```bash\ncurl -X DELETE http://127.0.0.1:5000/tasks/1\n```\n\n## 7. Running the Application\nEnsure your virtual environment is activated and run:\n\n```bash\npython app.py\n```\n\nYour Flask application should be running on `http://127.0.0.1:5000/`.\n\n## 8. Conclusion\nCongratulations! You've successfully created a simple task manager RESTful API using Flask and SQLite. This API allows you to perform CRUD operations on tasks, managing their title, description, due date, and status. You can further enhance this application by adding more features, such as user authentication, more detailed error handling, or integrating with a front-end framework."
    }
]