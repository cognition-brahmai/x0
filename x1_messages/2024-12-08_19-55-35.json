[
    {
        "role": "user",
        "content": "Build a Node.js server that exposes RESTful API endpoints for managing a simple task list. The server should support adding tasks, marking tasks as complete, deleting tasks, and listing all tasks. Use an in-memory data structure to store the tasks.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to build a simple Node.js server that manages a task list through RESTful API endpoints. I'll use Express.js for handling the routes and requests. Since I need to store tasks in memory, I'll use an array to hold the task data.\n\nFirst, I need to set up a new Node.js project. I'll create a directory for my project and initialize it with npm.\n\n```bash\nmkdir task-list-server\ncd task-list-server\nnpm init -y\n```\n\nNext, I'll install Express.js, which is a lightweight web application framework for Node.js.\n\n```bash\nnpm install express\n```\n\nNow, I'll create a new file called `server.js` and set up the basic structure of the Express app.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nI'm also going to use an in-memory array to store the tasks. Each task will have an ID, description, and a completion status.\n\n```javascript\nlet tasks = [];\nlet idCounter = 1;\n```\n\nI need to create API endpoints for the following operations:\n\n1. **Adding a task** (`POST /tasks`): This endpoint should accept a JSON object with a task description and add it to the list with a unique ID and a `completed` flag set to `false`.\n\n2. **Marking a task as complete** (`PUT /tasks/:id`): This endpoint should update the task with the specified ID, toggling its `completed` status.\n\n3. **Deleting a task** (`DELETE /tasks/:id`): This endpoint should remove the task with the specified ID from the list.\n\n4. **Listing all tasks** (`GET /tasks`): This endpoint should return all tasks in the list.\n\nLet's start by implementing the `GET /tasks` endpoint.\n\n```javascript\napp.get('/tasks', (req, res) => {\n  res.json(tasks);\n});\n```\n\nNext, the `POST /tasks` endpoint to add a new task.\n\n```javascript\napp.post('/tasks', (req, res) => {\n  const { description } = req.body;\n  if (!description) {\n    return res.status(400).json({ error: 'Description is required' });\n  }\n  const newTask = {\n    id: idCounter++,\n    description,\n    completed: false\n  };\n  tasks.push(newTask);\n  res.status(201).json(newTask);\n});\n```\n\nNow, the `PUT /tasks/:id` endpoint to mark a task as complete.\n\n```javascript\napp.put('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const task = tasks.find(t => t.id === taskId);\n  if (!task) {\n    return res.status(404).json({ error: 'Task not found' });\n  }\n  task.completed = !task.completed;\n  res.json(task);\n});\n```\n\nFinally, the `DELETE /tasks/:id` endpoint to delete a task.\n\n```javascript\napp.delete('/tasks/:id', (req, res) => {\n  const taskId = parseInt(req.params.id);\n  const index = tasks.findIndex(t => t.id === taskId);\n  if (index === -1) {\n    return res.status(404).json({ error: 'Task not found' });\n  }\n  const deletedTask = tasks.splice(index, 1);\n  res.json(deletedTask[0]);\n});\n```\n\nTo make sure everything works, I can test these endpoints using tools like Postman or curl.\n\nFor example, to add a new task:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"description\":\"Buy milk\"}' http://localhost:3000/tasks\n```\n\nTo list all tasks:\n\n```bash\ncurl http://localhost:3000/tasks\n```\n\nTo mark a task as complete:\n\n```bash\ncurl -X PUT http://localhost:3000/tasks/1\n```\n\nTo delete a task:\n\n```bash\ncurl -X DELETE http://localhost:3000/tasks/1\n```\n\nThis should cover the basic requirements for a simple task list management server using Node.js and Express.js with in-memory storage.\n\n**Final Solution Code**\n\nTo create a simple task list management server using Node.js and Express.js with in-memory storage, follow these steps:\n\n1. **Initialize the project:**\n   ```bash\n   mkdir task-list-server\n   cd task-list-server\n   npm init -y\n   ```\n\n2. **Install Express.js:**\n   ```bash\n   npm install express\n   ```\n\n3. **Create `server.js`:**\n   ```javascript\n   const express = require('express');\n   const app = express();\n   const port = 3000;\n\n   // Middleware to parse JSON bodies\n   app.use(express.json());\n\n   // In-memory task storage\n   let tasks = [];\n   let idCounter = 1;\n\n   // GET /tasks - Retrieve all tasks\n   app.get('/tasks', (req, res) => {\n     res.json(tasks);\n   });\n\n   // POST /tasks - Add a new task\n   app.post('/tasks', (req, res) => {\n     const { description } = req.body;\n     if (!description) {\n       return res.status(400).json({ error: 'Description is required' });\n     }\n     const newTask = {\n       id: idCounter++,\n       description,\n       completed: false\n     };\n     tasks.push(newTask);\n     res.status(201).json(newTask);\n   });\n\n   // PUT /tasks/:id - Toggle task completion\n   app.put('/tasks/:id', (req, res) => {\n     const taskId = parseInt(req.params.id);\n     const task = tasks.find(t => t.id === taskId);\n     if (!task) {\n       return res.status(404).json({ error: 'Task not found' });\n     }\n     task.completed = !task.completed;\n     res.json(task);\n   });\n\n   // DELETE /tasks/:id - Delete a task\n   app.delete('/tasks/:id', (req, res) => {\n     const taskId = parseInt(req.params.id);\n     const index = tasks.findIndex(t => t.id === taskId);\n     if (index === -1) {\n       return res.status(404).json({ error: 'Task not found' });\n     }\n     const deletedTask = tasks.splice(index, 1);\n     res.json(deletedTask[0]);\n   });\n\n   // Start the server\n   app.listen(port, () => {\n     console.log(`Server is running on port ${port}`);\n   });\n   ```\n\n4. **Run the server:**\n   ```bash\n   node server.js\n   ```\n\n5. **Test the API endpoints using curl or Postman:**\n\n   - **Add a new task:**\n     ```bash\n     curl -X POST -H \"Content-Type: application/json\" -d '{\"description\":\"Buy milk\"}' http://localhost:3000/tasks\n     ```\n\n   - **List all tasks:**\n     ```bash\n     curl http://localhost:3000/tasks\n     ```\n\n   - **Mark a task as complete:**\n     ```bash\n     curl -X PUT http://localhost:3000/tasks/1\n     ```\n\n   - **Delete a task:**\n     ```bash\n     curl -X DELETE http://localhost:3000/tasks/1\n     ```\n\nThis setup provides a basic RESTful API for managing a task list with operations to add, update, delete, and list tasks, using an in-memory array for storage."
    }
]