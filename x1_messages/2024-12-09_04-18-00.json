[
    {
        "role": "user",
        "content": "Create a C++ implementation of a singly linked list data structure, including methods for insertion, deletion, and traversal."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple implementation of a singly linked list in C++. This implementation includes methods for inserting elements at the beginning, end, and a specific position in the list, deleting elements by value, and traversing the list to print its elements.\n\n```cpp\n#include <iostream>\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    Node(int data) : data(data), next(nullptr) {}\n};\n\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Insert a new node at the beginning of the list\n    void insertAtBeginning(int data) {\n        Node* newNode = new Node(data);\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Insert a new node at the end of the list\n    void insertAtEnd(int data) {\n        Node* newNode = new Node(data);\n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n        Node* temp = head;\n        while (temp->next != nullptr) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n\n    // Insert a new node after a specific node in the list\n    void insertAfter(Node* prevNode, int data) {\n        if (prevNode == nullptr) {\n            std::cout << \"Previous node cannot be null.\" << std::endl;\n            return;\n        }\n        Node* newNode = new Node(data);\n        newNode->next = prevNode->next;\n        prevNode->next = newNode;\n    }\n\n    // Delete a node by value\n    void deleteNode(int key) {\n        Node* temp = head;\n        Node* prev = nullptr;\n\n        // If the head node itself holds the key to be deleted\n        if (temp != nullptr && temp->data == key) {\n            head = temp->next;\n            delete temp;\n            return;\n        }\n\n        // Search for the key and keep track of the previous node\n        while (temp != nullptr && temp->data != key) {\n            prev = temp;\n            temp = temp->next;\n        }\n\n        // If key was not present in linked list\n        if (temp == nullptr) return;\n\n        // Unlink the node from linked list\n        prev->next = temp->next;\n        delete temp;\n    }\n\n    // Traverse and print the list\n    void traverse() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        std::cout << std::endl;\n    }\n\n    // Get the head of the list\n    Node* getHead() {\n        return head;\n    }\n};\n\nint main() {\n    SinglyLinkedList list;\n\n    list.insertAtEnd(1);\n    list.insertAtBeginning(2);\n    list.insertAtBeginning(3);\n    list.insertAtEnd(4);\n    list.insertAfter(list.getHead()->next, 5);\n\n    std::cout << \"Linked List after insertion: \";\n    list.traverse();\n\n    list.deleteNode(3);\n    std::cout << \"Linked List after deleting 3: \";\n    list.traverse();\n\n    list.deleteNode(1);\n    std::cout << \"Linked List after deleting 1: \";\n    list.traverse();\n\n    list.deleteNode(10);\n    std::cout << \"Linked List after trying to delete 10: \";\n    list.traverse();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Node Class**: Represents each element in the linked list with `data` and `next` pointers.\n2. **SinglyLinkedList Class**: Manages the linked list operations.\n   - **insertAtBeginning(int data)**: Inserts a new node at the start of the list.\n   - **insertAtEnd(int data)**: Appends a new node at the end of the list.\n   - **insertAfter(Node* prevNode, int data)**: Inserts a new node after a specified existing node.\n   - **deleteNode(int key)**: Deletes the first occurrence of a node with the given value.\n   - **traverse()**: Prints all elements in the list.\n3. **main() Function**: Demonstrates the usage of the linked list by performing various operations and printing the list state after each operation.\n\nThis code provides a basic framework for working with singly linked lists in C++. You can expand upon this by adding more features like inserting before a node, finding the length of the list, etc."
    }
]