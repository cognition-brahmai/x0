[
    {
        "role": "user",
        "content": "Implement a Golang command-line tool that interacts with a Redis key-value store to manage a simple cache. The tool should support basic operations like setting, getting, and deleting keys, as well as listing all keys in the cache.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple command-line tool in Golang that interacts with a Redis key-value store. This tool will allow you to manage a cache by performing operations like setting, getting, deleting keys, and listing all keys in the cache.\n\nFirst, make sure you have Golang installed on your machine. You can download it from https://golang.org/dl/. Also, ensure that you have Redis installed and running. You can download Redis from https://redis.io/download.\n\nNow, let's start by setting up a new Go module for our project.\n\n1. Create a new directory for your project:\n\n```bash\nmkdir redis-cache-tool\ncd redis-cache-tool\n```\n\n2. Initialize a new Go module:\n\n```bash\ngo mod init redis-cache-tool\n```\n\n3. Install the Go Redis client library:\n\n```bash\ngo get github.com/go-redis/redis/v8\n```\n\n4. Create a new file called `main.go`:\n\n```bash\ntouch main.go\n```\n\nNow, open `main.go` in your favorite text editor and let's start writing the code.\n\nFirst, import the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/go-redis/redis/v8\"\n\t\"github.com/spf13/cobra\"\n)\n```\n\nWe're using the `cobra` library to handle command-line flags and subcommands. If you don't have it installed, you can install it using:\n\n```bash\ngo get github.com/spf13/cobra\n```\n\nNow, let's set up the Redis client:\n\n```go\nvar ctx = context.Background()\n\nfunc newRedisClient() *redis.Client {\n\treturn redis.NewClient(&redis.Options{\n\t\tAddr:     \"localhost:6379\",\n\t\tPassword: \"\", // no password set\n\t\tDB:       0,  // use default DB\n\t})\n}\n```\n\nMake sure that your Redis server is running on `localhost:6379`. If it's running on a different address or port, adjust the `Addr` field accordingly.\n\nNext, we'll create the root command using Cobra:\n\n```go\nvar rootCmd = &cobra.Command{\n\tUse:   \"redis-cache-tool\",\n\tShort: \"A simple command-line tool to manage a Redis cache\",\n}\n```\n\nNow, let's define subcommands for setting, getting, deleting, and listing keys.\n\n**Set Command:**\n\nThis command will set a key with a given value in the cache.\n\n```go\nvar setCmd = &cobra.Command{\n\tUse:   \"set\",\n\tShort: \"Set a key with a given value\",\n\tArgs:  cobra.ExactArgs(2),\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tkey := args[0]\n\t\tvalue := args[1]\n\t\tclient := newRedisClient()\n\t\terr := client.Set(ctx, key, value, 0).Err()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error setting key:\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfmt.Println(\"Key set successfully.\")\n\t},\n}\n```\n\n**Get Command:**\n\nThis command will get the value of a key from the cache.\n\n```go\nvar getCmd = &cobra.Command{\n\tUse:   \"get\",\n\tShort: \"Get the value of a key\",\n\tArgs:  cobra.ExactArgs(1),\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tkey := args[0]\n\t\tclient := newRedisClient()\n\t\tvalue, err := client.Get(ctx, key).Result()\n\t\tif err != nil {\n\t\t\tif err == redis.Nil {\n\t\t\t\tfmt.Println(\"Key not found.\")\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Error getting key:\", err)\n\t\t\t}\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfmt.Println(\"Value:\", value)\n\t},\n}\n```\n\n**Delete Command:**\n\nThis command will delete a key from the cache.\n\n```go\nvar deleteCmd = &cobra.Command{\n\tUse:   \"delete\",\n\tShort: \"Delete a key\",\n\tArgs:  cobra.ExactArgs(1),\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tkey := args[0]\n\t\tclient := newRedisClient()\n\t\terr := client.Del(ctx, key).Err()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error deleting key:\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tfmt.Println(\"Key deleted successfully.\")\n\t},\n}\n```\n\n**Keys Command:**\n\nThis command will list all keys in the cache.\n\n```go\nvar keysCmd = &cobra.Command{\n\tUse:   \"keys\",\n\tShort: \"List all keys in the cache\",\n\tRun: func(cmd *cobra.Command, args []string) {\n\t\tclient := newRedisClient()\n\t\tkeys, err := client.Keys(ctx, \"*\").Result()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error retrieving keys:\", err)\n\t\t\tos.Exit(1)\n\t\t}\n\t\tif len(keys) == 0 {\n\t\t\tfmt.Println(\"No keys found.\")\n\t\t} else {\n\t\t\tfmt.Println(\"Keys:\")\n\t\t\tfor _, key := range keys {\n\t\t\t\tfmt.Println(key)\n\t\t\t}\n\t\t}\n\t},\n}\n```\n\nNow, let's add these subcommands to the root command:\n\n```go\nfunc init() {\n\trootCmd.AddCommand(setCmd)\n\trootCmd.AddCommand(getCmd)\n\trootCmd.AddCommand(deleteCmd)\n\trootCmd.AddCommand(keysCmd)\n}\n```\n\nFinally, in the `main` function, execute the root command:\n\n```go\nfunc main() {\n\tif err := rootCmd.Execute(); err != nil {\n\t\tfmt.Println(err)\n\t\tos.Exit(1)\n\t}\n}\n```\n\nThat's it! Your simple command-line tool to manage a Redis cache is now complete.\n\n**Usage:**\n\n1. Set a key:\n\n```bash\ngo run main.go set mykey myvalue\n```\n\n2. Get a key:\n\n```bash\ngo run main.go get mykey\n```\n\n3. Delete a key:\n\n```bash\ngo run main.go delete mykey\n```\n\n4. List all keys:\n\n```bash\ngo run main.go keys\n```\n\nMake sure your Redis server is running before executing these commands.\n\nThis tool provides basic functionality to interact with a Redis cache. You can extend it further by adding more features like setting expiration times for keys, handling different data types, or improving error handling.\n\nI hope this helps you get started with building your own command-line tools in Golang that interact with Redis! If you have any questions or need further assistance, feel free to ask."
    }
]