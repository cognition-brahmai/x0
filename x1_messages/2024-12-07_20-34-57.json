[
    {
        "role": "user",
        "content": "Implement a C++ class called \"BankAccount\" that represents a bank account with attributes such as account number, account holder's name, and balance. Include methods for depositing money, withdrawing money, and displaying the current balance. Write a main function that demonstrates the usage of this class.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an example implementation of a `BankAccount` class in C++, along with a `main` function that demonstrates its usage.\n\n```cpp\n#include <iostream>\n#include <string>\n\nclass BankAccount {\nprivate:\n    int accountNumber;\n    std::string accountHolderName;\n    double balance;\n\npublic:\n    // Constructor\n    BankAccount(int accNumber, const std::string& accHolderName, double initialBalance)\n        : accountNumber(accNumber), accountHolderName(accHolderName), balance(initialBalance) {}\n\n    // Deposit money into the account\n    void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            std::cout << \"Deposited \" << amount << \". New balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Invalid deposit amount.\" << std::endl;\n        }\n    }\n\n    // Withdraw money from the account\n    void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            std::cout << \"Withdrew \" << amount << \". New balance: \" << balance << std::endl;\n        } else {\n            std::cout << \"Invalid withdrawal amount or insufficient funds.\" << std::endl;\n        }\n    }\n\n    // Display the current balance\n    void displayBalance() const {\n        std::cout << \"Current balance: \" << balance << std::endl;\n    }\n\n    // Getters for account details\n    int getAccountNumber() const {\n        return accountNumber;\n    }\n\n    std::string getAccountHolderName() const {\n        return accountHolderName;\n    }\n\n    double getBalance() const {\n        return balance;\n    }\n};\n\nint main() {\n    // Create a BankAccount object\n    BankAccount myAccount(123456, \"John Doe\", 1000.0);\n\n    // Display initial account details\n    std::cout << \"Account Number: \" << myAccount.getAccountNumber() << std::endl;\n    std::cout << \"Account Holder Name: \" << myAccount.getAccountHolderName() << std::endl;\n    myAccount.displayBalance();\n\n    // Deposit money\n    myAccount.deposit(500.0);\n\n    // Withdraw money\n    myAccount.withdraw(200.0);\n\n    // Attempt to withdraw more than the balance\n    myAccount.withdraw(2000.0);\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - **Attributes:** `accountNumber` (int), `accountHolderName` (std::string), and `balance` (double).\n   - **Constructor:** Initializes the account with an account number, holder's name, and initial balance.\n   - **Methods:**\n     - `deposit(double amount)`: Adds the specified amount to the balance if the amount is positive.\n     - `withdraw(double amount)`: Subtracts the specified amount from the balance if the amount is positive and sufficient funds are available.\n     - `displayBalance()`: Prints the current balance.\n     - Getter methods for account number, holder's name, and balance.\n\n2. **Main Function:**\n   - Creates a `BankAccount` object with an account number, holder's name, and initial balance.\n   - Displays the initial account details.\n   - Deposits money into the account.\n   - Withdraws money from the account.\n   - Attempts to withdraw an amount larger than the balance to demonstrate error handling.\n\nThis code provides a basic structure for a bank account class and demonstrates its usage through a simple example."
    }
]