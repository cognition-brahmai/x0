[
    {
        "role": "user",
        "content": "Develop a Golang web server that serves static files from a specified directory and provides an API endpoint to upload new files to the directory. Use the Gorilla Mux library for routing.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you develop a simple web server in Golang that serves static files from a specified directory and also provides an API endpoint to upload new files to that directory. We'll be using the Gorilla Mux library for routing, which is a popular choice for handling requests in Go.\n\nFirst things first, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). Once you have Go set up, you'll also need to install the Gorilla Mux library. You can do this by running:\n\n```bash\ngo get -u github.com/gorilla/mux\n```\n\nNow, let's create a new directory for our project and set up the basic structure. I'll assume you're comfortable with the command line.\n\n1. **Project Structure:**\n\n   Let's organize our project like this:\n\n   ```\n   /your-project\n       /static\n           index.html\n           ...\n       main.go\n   ```\n\n   The `static` directory will hold all the files you want to serve.\n\n2. **Serving Static Files:**\n\n   Go has a built-in way to serve static files using the `http.FileServer` handler. We'll use this in conjunction with Gorilla Mux to serve files from the `static` directory.\n\n3. **File Upload Endpoint:**\n\n   For file uploads, we'll create an API endpoint that accepts POST requests. The endpoint will save the uploaded file to the `static` directory.\n\n4. **Main Function:**\n\n   This is where we'll set up the router, define the routes, and start the server.\n\nLet's dive into the code.\n\n## Final Solution\nTo create a Golang web server that serves static files and provides an API endpoint for uploading new files, follow these steps:\n\n### Solution Code\n\n1. **Project Structure:**\n\n   ```\n   /your-project\n       /static\n           index.html\n           ...\n       main.go\n   ```\n\n2. **main.go:**\n\n   ```go\n   package main\n\n   import (\n       \"fmt\"\n       \"io\"\n       \"net/http\"\n       \"os\"\n\n       \"github.com/gorilla/mux\"\n   )\n\n   func main() {\n       router := mux.NewRouter()\n\n       // Serve static files from the \"static\" directory\n       router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"static\"))))\n\n       // Endpoint to upload files to the \"static\" directory\n       router.HandleFunc(\"/upload\", uploadFile).Methods(\"POST\")\n\n       fmt.Println(\"Server started at :8080\")\n       http.ListenAndServe(\":8080\", router)\n   }\n\n   func uploadFile(w http.ResponseWriter, r *http.Request) {\n       r.ParseMultipartForm(10 << 20) // Set maximum upload size to 10MB\n\n       file, handler, err := r.FormFile(\"file\")\n       if err != nil {\n           w.WriteHeader(http.StatusBadRequest)\n           fmt.Fprintf(w, \"Error retrieving file: %v\", err)\n           return\n       }\n       defer file.Close()\n\n       // Create a new file in the static directory\n       filePath := fmt.Sprintf(\"static/%s\", handler.Filename)\n       outFile, err := os.Create(filePath)\n       if err != nil {\n           w.WriteHeader(http.StatusInternalServerError)\n           fmt.Fprintf(w, \"Error creating file: %v\", err)\n           return\n       }\n       defer outFile.Close()\n\n       // Copy the uploaded file to the new file\n       _, err = io.Copy(outFile, file)\n       if err != nil {\n           w.WriteHeader(http.StatusInternalServerError)\n           fmt.Fprintf(w, \"Error uploading file: %v\", err)\n           return\n       }\n\n       w.WriteHeader(http.StatusOK)\n       fmt.Fprintf(w, \"Successfully uploaded file: %s\", handler.Filename)\n   }\n   ```\n\n### Explanation\n\n1. **Serving Static Files:**\n\n   - We use `http.FileServer` to serve files from the `static` directory.\n   - `router.PathPrefix(\"/static/\").Handler(http.StripPrefix(\"/static/\", http.FileServer(http.Dir(\"static\"))))` sets up the router to serve files from the `static` directory when paths starting with `/static/` are requested.\n\n2. **File Upload Endpoint:**\n\n   - The `/upload` endpoint handles POST requests for file uploads.\n   - It expects a file in the form field named \"file\".\n   - The uploaded file is saved in the `static` directory with its original filename.\n   - Error handling is implemented to manage issues like file retrieval or creation errors.\n\n3. **Main Function:**\n\n   - Initializes the router using Gorilla Mux.\n   - Sets up the routes for serving static files and handling file uploads.\n   - Starts the HTTP server on port 8080.\n\nThis setup provides a basic but functional web server for serving static files and accepting file uploads in Golang using Gorilla Mux for routing."
    }
]