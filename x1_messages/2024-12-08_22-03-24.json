[
    {
        "role": "user",
        "content": "Create a Golang REST API server that has endpoints to add, update, delete, and retrieve information about books stored in a PostgreSQL database. The book model should have fields such as title, author, publication year, and genre.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through creating a REST API server in Golang that interacts with a PostgreSQL database to manage book information. We'll cover setting up the database, defining the book model, creating the API endpoints, and testing everything out.\n\n### Step 1: Set Up Your Go Environment\n\nFirst, make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/). After installation, set up your GOPATH and make sure your Go environment is properly configured.\n\n### Step 2: Initialize Your Go Module\n\nCreate a new directory for your project and initialize a new Go module:\n\n```bash\nmkdir book-api\ncd book-api\ngo mod init book-api\n```\n\n### Step 3: Install Required Packages\n\nYou'll need several packages for this project:\n\n- `gorilla/mux` for routing\n- `database/sql` for database operations\n- `lib/pq` as the PostgreSQL driver for Go\n\nInstall these packages using `go get`:\n\n```bash\ngo get -u github.com/gorilla/mux\ngo get -u github.com/lib/pq\n```\n\n### Step 4: Set Up Your PostgreSQL Database\n\nMake sure you have PostgreSQL installed and running on your machine. Create a new database for your book API:\n\n```bash\ncreatedb bookdb\n```\n\nYou can use `psql` to interact with your database:\n\n```bash\npsql bookdb\n```\n\nInside `psql`, create a table for books:\n\n```sql\nCREATE TABLE books (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    author VARCHAR(100) NOT NULL,\n    publication_year INT,\n    genre VARCHAR(50)\n);\n```\n\nExit `psql` by typing `\\q`.\n\n### Step 5: Define the Book Model\n\nCreate a new file called `book.go` to define the book struct:\n\n```go\npackage main\n\ntype Book struct {\n    ID              int     `json:\"id\"`\n    Title           string  `json:\"title\"`\n    Author          string  `json:\"author\"`\n    PublicationYear int     `json:\"publication_year\"`\n    Genre           string  `json:\"genre\"`\n}\n```\n\n### Step 6: Set Up Database Connection\n\nCreate a new file called `db.go` to handle database connections:\n\n```go\npackage main\n\nimport (\n    \"database/sql\"\n    \"fmt\"\n    \"log\"\n\n    _ \"github.com/lib/pq\"\n)\n\nconst (\n    host     = \"localhost\"\n    port     = 5432\n    user     = \"your_username\"\n    password = \"your_password\"\n    dbname   = \"bookdb\"\n)\n\nfunc dbConnect() *sql.DB {\n    connStr := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",\n        host, port, user, password, dbname)\n    db, err := sql.Open(\"postgres\", connStr)\n    if err != nil {\n        log.Fatal(err)\n    }\n    return db\n}\n```\n\nReplace `your_username` and `your_password` with your PostgreSQL credentials.\n\n### Step 7: Create the API Handlers\n\nCreate a new file called `handlers.go` to define your API handlers:\n\n```go\npackage main\n\nimport (\n    \"database/sql\"\n    \"encoding/json\"\n    \"log\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n)\n\ntype BookService struct {\n    db *sql.DB\n}\n\nfunc NewBookService(db *sql.DB) *BookService {\n    return &BookService{db: db}\n}\n\nfunc (s *BookService) CreateBook(w http.ResponseWriter, r *http.Request) {\n    var book Book\n    err := json.NewDecoder(r.Body).Decode(&book)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    query := `INSERT INTO books (title, author, publication_year, genre) VALUES ($1, $2, $3, $4) RETURNING id`\n    err = s.db.QueryRow(query, book.Title, book.Author, book.PublicationYear, book.Genre).Scan(&book.ID)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        return\n    }\n\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(book)\n}\n\nfunc (s *BookService) GetBooks(w http.ResponseWriter, r *http.Request) {\n    query := `SELECT id, title, author, publication_year, genre FROM books`\n    rows, err := s.db.Query(query)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        return\n    }\n    defer rows.Close()\n\n    var books []Book\n    for rows.Next() {\n        var book Book\n        err := rows.Scan(&book.ID, &book.Title, &book.Author, &book.PublicationYear, &book.Genre)\n        if err != nil {\n            log.Println(err)\n            http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n            return\n        }\n        books = append(books, book)\n    }\n\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(books)\n}\n\nfunc (s *BookService) GetBook(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    idStr := vars[\"id\"]\n    id, err := strconv.Atoi(idStr)\n    if err != nil {\n        http.Error(w, \"Invalid ID\", http.StatusBadRequest)\n        return\n    }\n\n    query := `SELECT id, title, author, publication_year, genre FROM books WHERE id=$1`\n    var book Book\n    err = s.db.QueryRow(query, id).Scan(&book.ID, &book.Title, &book.Author, &book.PublicationYear, &book.Genre)\n    if err == sql.ErrNoRows {\n        http.Error(w, \"Book not found\", http.StatusNotFound)\n        return\n    } else if err != nil {\n        log.Println(err)\n        http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        return\n    }\n\n    w.Header().Set(\"Content-Type\", \"application/json\")\n    json.NewEncoder(w).Encode(book)\n}\n\nfunc (s *BookService) UpdateBook(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    idStr := vars[\"id\"]\n    id, err := strconv.Atoi(idStr)\n    if err != nil {\n        http.Error(w, \"Invalid ID\", http.StatusBadRequest)\n        return\n    }\n\n    var book Book\n    err = json.NewDecoder(r.Body).Decode(&book)\n    if err != nil {\n        http.Error(w, err.Error(), http.StatusBadRequest)\n        return\n    }\n\n    query := `UPDATE books SET title=$1, author=$2, publication_year=$3, genre=$4 WHERE id=$5 RETURNING id`\n    var updatedID int\n    err = s.db.QueryRow(query, book.Title, book.Author, book.PublicationYear, book.Genre, id).Scan(&updatedID)\n    if err == sql.ErrNoRows {\n        http.Error(w, \"Book not found\", http.StatusNotFound)\n        return\n    } else if err != nil {\n        log.Println(err)\n        http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        return\n    }\n\n    w.WriteHeader(http.StatusNoContent)\n}\n\nfunc (s *BookService) DeleteBook(w http.ResponseWriter, r *http.Request) {\n    vars := mux.Vars(r)\n    idStr := vars[\"id\"]\n    id, err := strconv.Atoi(idStr)\n    if err != nil {\n        http.Error(w, \"Invalid ID\", http.StatusBadRequest)\n        return\n    }\n\n    query := `DELETE FROM books WHERE id=$1`\n    res, err := s.db.Exec(query, id)\n    if err != nil {\n        log.Println(err)\n        http.Error(w, \"Internal server error\", http.StatusInternalServerError)\n        return\n    }\n\n    rowsAffected, _ := res.RowsAffected()\n    if rowsAffected == 0 {\n        http.Error(w, \"Book not found\", http.StatusNotFound)\n        return\n    }\n\n    w.WriteHeader(http.StatusNoContent)\n}\n```\n\n### Step 8: Set Up Routing\n\nIn your `main.go` file, set up your routes and start the server:\n\n```go\npackage main\n\nimport (\n    \"log\"\n    \"net/http\"\n\n    \"github.com/gorilla/mux\"\n)\n\nfunc main() {\n    db := dbConnect()\n    defer db.Close()\n\n    router := mux.NewRouter()\n    bookService := NewBookService(db)\n\n    router.HandleFunc(\"/books\", bookService.CreateBook).Methods(\"POST\")\n    router.HandleFunc(\"/books\", bookService.GetBooks).Methods(\"GET\")\n    router.HandleFunc(\"/books/{id}\", bookService.GetBook).Methods(\"GET\")\n    router.HandleFunc(\"/books/{id}\", bookService.UpdateBook).Methods(\"PUT\")\n    router.HandleFunc(\"/books/{id}\", bookService.DeleteBook).Methods(\"DELETE\")\n\n    log.Println(\"Starting server at port 8000\")\n    log.Fatal(http.ListenAndServe(\":8000\", router))\n}\n```\n\n### Step 9: Test Your API\n\nYou can use tools like Postman or cURL to test your API endpoints.\n\n#### Create a Book\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publication_year\":2021,\"genre\":\"Fiction\"}' http://localhost:8000/books\n```\n\n#### Get All Books\n\n```bash\ncurl http://localhost:8000/books\n```\n\n#### Get a Single Book\n\n```bash\ncurl http://localhost:8000/books/1\n```\n\n#### Update a Book\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publication_year\":2022,\"genre\":\"Non-Fiction\"}' http://localhost:8000/books/1\n```\n\n#### Delete a Book\n\n```bash\ncurl -X DELETE http://localhost:8000/books/1\n```\n\n### Conclusion\n\nYou've successfully created a REST API server in Golang that interacts with a PostgreSQL database to manage book information. This API allows you to perform CRUD operations on books, and you can expand it further by adding more features or improving error handling."
    }
]