[
    {
        "role": "user",
        "content": "Create a C++ class representing a 2D vector with methods for addition, subtraction, dot product, cross product, magnitude, normalization, and angle between vectors. Include appropriate constructors, destructors, and operator overloads for intuitive usage of the class."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a C++ class representing a 2D vector with the specified methods and features.\n\n```cpp\n#include <iostream>\n#include <cmath>\n#include <cassert>\n\nclass Vector2D {\nprivate:\n    double x, y;\n\npublic:\n    // Constructors\n    Vector2D() : x(0), y(0) {}\n\n    Vector2D(double x, double y) : x(x), y(y) {}\n\n    // Destructor\n    ~Vector2D() {}\n\n    // Getters\n    double getX() const { return x; }\n\n    double getY() const { return y; }\n\n    // Setters\n    void setX(double x) { this->x = x; }\n\n    void setY(double y) { this->y = y; }\n\n    // Addition\n    Vector2D operator+(const Vector2D& other) const {\n        return Vector2D(x + other.x, y + other.y);\n    }\n\n    // Subtraction\n    Vector2D operator-(const Vector2D& other) const {\n        return Vector2D(x - other.x, y - other.y);\n    }\n\n    // Dot product\n    double dot(const Vector2D& other) const {\n        return x * other.x + y * other.y;\n    }\n\n    // Cross product (magnitude in 2D)\n    double cross(const Vector2D& other) const {\n        return x * other.y - y * other.x;\n    }\n\n    // Magnitude\n    double magnitude() const {\n        return std::sqrt(x * x + y * y);\n    }\n\n    // Normalization\n    Vector2D normalize() const {\n        double mag = magnitude();\n        assert(mag != 0 && \"Cannot normalize a zero vector.\");\n        return Vector2D(x / mag, y / mag);\n    }\n\n    // Angle between two vectors in radians\n    double angleBetween(const Vector2D& other) const {\n        double dotProduct = dot(other);\n        double magThis = magnitude();\n        double magOther = other.magnitude();\n        assert(magThis != 0 && magOther != 0 && \"Cannot compute angle with zero vector.\");\n        return std::acos(dotProduct / (magThis * magOther));\n    }\n\n    // Operator overloads for intuitive usage\n    Vector2D& operator+=(const Vector2D& other) {\n        x += other.x;\n        y += other.y;\n        return *this;\n    }\n\n    Vector2D& operator-=(const Vector2D& other) {\n        x -= other.x;\n        y -= other.y;\n        return *this;\n    }\n\n    bool operator==(const Vector2D& other) const {\n        return x == other.x && y == other.y;\n    }\n\n    bool operator!=(const Vector2D& other) const {\n        return !(*this == other);\n    }\n\n    // For easy output\n    friend std::ostream& operator<<(std::ostream& os, const Vector2D& vec) {\n        os << \"(\" << vec.x << \", \" << vec.y << \")\";\n        return os;\n    }\n};\n\nint main() {\n    Vector2D v1(3, 4);\n    Vector2D v2(1, 2);\n\n    Vector2D sum = v1 + v2;\n    std::cout << \"Sum: \" << sum << std::endl;\n\n    Vector2D diff = v1 - v2;\n    std::cout << \"Difference: \" << diff << std::endl;\n\n    double dotProduct = v1.dot(v2);\n    std::cout << \"Dot product: \" << dotProduct << std::endl;\n\n    double crossProduct = v1.cross(v2);\n    std::cout << \"Cross product magnitude: \" << crossProduct << std::endl;\n\n    double magnitudeV1 = v1.magnitude();\n    std::cout << \"Magnitude of v1: \" << magnitudeV1 << std::endl;\n\n    Vector2D normalizedV1 = v1.normalize();\n    std::cout << \"Normalized v1: \" << normalizedV1 << std::endl;\n\n    double angle = v1.angleBetween(v2);\n    std::cout << \"Angle between v1 and v2 in radians: \" << angle << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Constructors and Destructor**:\n   - Default constructor initializes the vector to (0, 0).\n   - Parameterized constructor initializes the vector with given x and y values.\n   - Destructor is empty as there are no dynamic allocations.\n\n2. **Getters and Setters**:\n   - Methods to get and set the x and y components.\n\n3. **Addition and Subtraction**:\n   - Overloaded `+` and `-` operators for vector addition and subtraction.\n\n4. **Dot Product**:\n   - Method to compute the dot product of two vectors.\n\n5. **Cross Product**:\n   - In 2D, the cross product results in a scalar value representing the z-component of the cross product in 3D.\n\n6. **Magnitude**:\n   - Method to compute the magnitude (length) of the vector.\n\n7. **Normalization**:\n   - Method to normalize the vector, returning a unit vector in the same direction.\n\n8. **Angle Between Vectors**:\n   - Method to compute the angle between two vectors in radians.\n\n9. **Operator Overloads**:\n   - `+=` and `-=` for in-place addition and subtraction.\n   - `==` and `!=` for equality checks.\n   - `<<` operator for easy printing of vector components.\n\nThis class provides a comprehensive set of operations for working with 2D vectors in C++."
    }
]