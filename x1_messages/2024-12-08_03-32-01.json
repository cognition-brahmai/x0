[
    {
        "role": "user",
        "content": "Design a RESTful API using Node.js and Express.js that supports CRUD operations on a \"Book\" resource. The Book model should include fields such as title, author, publication date, and ISBN. Use MongoDB as the backend database and ensure proper validation for each field."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you design a RESTful API for managing books using Node.js, Express.js, and MongoDB. We'll create endpoints to perform CRUD operations on a \"Book\" resource with fields like title, author, publication date, and ISBN. We'll also implement validation for each field to ensure data integrity.\n\n### Step 1: Set Up the Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nInstall the necessary dependencies:\n\n```bash\nnpm install express mongoose body-parser validator\n```\n\n- `express`: For creating the server and handling routes.\n- `mongoose`: For interacting with MongoDB.\n- `body-parser`: For parsing JSON request bodies.\n- `validator`: For data validation.\n\n### Step 2: Set Up the Server\n\nCreate a file named `server.js` and set up the basic Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst mongoose = require('mongoose');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/bookDB', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = mongoose.connection;\ndb.on('error', console.error.bind(console, 'MongoDB connection error:'));\n\n// Define Book schema\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationDate: { type: Date, required: true },\n  isbn: { type: String, required: true, unique: true },\n});\n\nconst Book = mongoose.model('Book', bookSchema);\n\n// Routes\napp.get('/books', async (req, res) => {\n  try {\n    const books = await Book.find();\n    res.json(books);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\napp.get('/books/:id', getBook, (req, res) => {\n  res.json(res.book);\n});\n\napp.post('/books', async (req, res) => {\n  const book = new Book({\n    title: req.body.title,\n    author: req.body.author,\n    publicationDate: req.body.publicationDate,\n    isbn: req.body.isbn,\n  });\n\n  try {\n    const newBook = await book.save();\n    res.status(201).json(newBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\napp.put('/books/:id', getBook, async (req, res) => {\n  res.book.title = req.body.title;\n  res.book.author = req.body.author;\n  res.book.publicationDate = req.body.publicationDate;\n  res.book.isbn = req.body.isbn;\n\n  try {\n    const updatedBook = await res.book.save();\n    res.json(updatedBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\napp.delete('/books/:id', getBook, async (req, res) => {\n  try {\n    await res.book.remove();\n    res.json({ message: 'Deleted Book' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware for getting a single book by ID\nasync function getBook(req, res, next) {\n  let book;\n  try {\n    book = await Book.findById(req.params.id);\n    if (book == null) {\n      return res.status(404).json({ message: 'Cannot find book' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.book = book;\n  next();\n}\n\n// Start the server\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 3: Data Validation\n\nWe'll use the `validator` package to validate the data before saving or updating a book.\n\nFirst, install the `validator` package if you haven't already:\n\n```bash\nnpm install validator\n```\n\nThen, update the POST and PUT routes to include validation.\n\n```javascript\nconst validator = require('validator');\n\n// Helper function for validating book data\nfunction validateBookData(book) {\n  const errors = [];\n\n  if (!book.title || typeof book.title !== 'string') {\n    errors.push('Title is required and must be a string');\n  }\n\n  if (!book.author || typeof book.author !== 'string') {\n    errors.push('Author is required and must be a string');\n  }\n\n  if (!book.publicationDate) {\n    errors.push('Publication date is required');\n  } else if (typeof book.publicationDate !== 'string') {\n    errors.push('Publication date must be a string');\n  } else if (!validator.isDate(book.publicationDate)) {\n    errors.push('Invalid publication date format');\n  }\n\n  if (!book.isbn || typeof book.isbn !== 'string') {\n    errors.push('ISBN is required and must be a string');\n  } else if (!validator.isISBN(book.isbn)) {\n    errors.push('Invalid ISBN format');\n  }\n\n  return errors;\n}\n\n// Update POST route to include validation\napp.post('/books', async (req, res) => {\n  const bookData = {\n    title: req.body.title,\n    author: req.body.author,\n    publicationDate: req.body.publicationDate,\n    isbn: req.body.isbn,\n  };\n\n  const validationErrors = validateBookData(bookData);\n  if (validationErrors.length > 0) {\n    return res.status(400).json({ errors: validationErrors });\n  }\n\n  const book = new Book(bookData);\n\n  try {\n    const newBook = await book.save();\n    res.status(201).json(newBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update PUT route to include validation\napp.put('/books/:id', getBook, async (req, res) => {\n  const bookData = {\n    title: req.body.title,\n    author: req.body.author,\n    publicationDate: req.body.publicationDate,\n    isbn: req.body.isbn,\n  };\n\n  const validationErrors = validateBookData(bookData);\n  if (validationErrors.length > 0) {\n    return res.status(400).json({ errors: validationErrors });\n  }\n\n  res.book.title = bookData.title;\n  res.book.author = bookData.author;\n  res.book.publicationDate = bookData.publicationDate;\n  res.book.isbn = bookData.isbn;\n\n  try {\n    const updatedBook = await res.book.save();\n    res.json(updatedBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n```\n\n### Step 4: Testing the API\n\nYou can test the API using tools like Postman or curl. Here are some example commands:\n\n#### Get all books\n\n```bash\ncurl http://localhost:3000/books\n```\n\n#### Get a single book by ID\n\n```bash\ncurl http://localhost:3000/books/<id>\n```\n\n#### Create a new book\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationDate\":\"2023-01-01\",\"isbn\":\"1234567890123\"}' http://localhost:3000/books\n```\n\n#### Update a book\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"publicationDate\":\"2023-02-01\",\"isbn\":\"3210987654321\"}' http://localhost:3000/books/<id>\n```\n\n#### Delete a book\n\n```bash\ncurl -X DELETE http://localhost:3000/books/<id>\n```\n\n### Conclusion\n\nYou now have a basic RESTful API for managing books with CRUD operations, using Node.js, Express.js, and MongoDB. The API includes validation for each field to ensure data integrity. You can expand this API by adding more features, such as searching, filtering, or pagination, based on your requirements."
    }
]