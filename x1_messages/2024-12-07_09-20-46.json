[
    {
        "role": "user",
        "content": "Write a JavaScript function that takes an array of integers as input and returns the maximum subarray sum using Kadane's algorithm."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a JavaScript function that implements Kadane's algorithm to find the maximum subarray sum in an array of integers.\n\n```javascript\nfunction maxSubarraySum(arr) {\n    if (arr.length === 0) {\n        return 0; // If the array is empty, return 0\n    }\n\n    let currentMax = arr[0];\n    let globalMax = arr[0];\n\n    for (let i = 1; i < arr.length; i++) {\n        currentMax = Math.max(arr[i], currentMax + arr[i]);\n        if (currentMax > globalMax) {\n            globalMax = currentMax;\n        }\n    }\n\n    return globalMax;\n}\n\n// Example usage:\nconst array = [-2, 1, -3, 4, -1, 2, 1, -5, 4];\nconsole.log(maxSubarraySum(array)); // Output: 6\n```\n\n### Explanation:\n\n- **Initialization:** We start by initializing two variables, `currentMax` and `globalMax`, both set to the first element of the array.\n  \n- **Iteration:** We then iterate through the array starting from the second element. For each element, we decide whether to:\n  - Start a new subarray with the current element.\n  - Continue the existing subarray by adding the current element to `currentMax`.\n  \n- **Updating Maximums:** \n  - `currentMax` is updated to be the maximum of the current element alone or the sum of `currentMax` and the current element.\n  - If `currentMax` is greater than `globalMax`, we update `globalMax`.\n\n- **Return Value:** Finally, we return `globalMax`, which holds the maximum subarray sum found.\n\nThis algorithm efficiently finds the maximum subarray sum in linear time, O(n), making it very efficient for large arrays."
    }
]