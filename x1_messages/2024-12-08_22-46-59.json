[
    {
        "role": "user",
        "content": "Implement a simple stack data structure in Java, with methods for push, pop, and peek operations. The stack should have a fixed size and throw an exception when trying to push an element onto a full stack.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a stack in Java with fixed size and including methods for push, pop, and peek operations is a fundamental exercise in data structures. I'll guide you through the process step by step.\n\nFirst, let's understand what a stack is. A stack is a Last In First Out (LIFO) data structure where elements are added and removed from the top. The main operations are:\n\n- **Push**: Adds an element to the top of the stack.\n\n- **Pop**: Removes the top element from the stack.\n\n- **Peek**: Returns the top element without removing it.\n\nSince you want a fixed-size stack, we'll use an array to store the elements, which has a predetermined capacity. We'll also need to handle cases where the stack is full or empty.\n\n### Step 1: Define the Stack Class\n\nWe'll create a class called `FixedSizeStack` that will have the following components:\n\n- An array to hold the stack elements.\n\n- An integer to keep track of the top element's index.\n\n- The maximum size of the stack.\n\n### Step 2: Initialize the Stack\n\nIn the constructor, we'll initialize the array with the given size and set the top index to -1 (indicating an empty stack).\n\n### Step 3: Implement the Push Method\n\nThe `push` method will add an element to the top of the stack. Before adding, we'll check if the stack is already full. If it is, we'll throw an exception.\n\n### Step 4: Implement the Pop Method\n\nThe `pop` method will remove and return the top element of the stack. We'll first check if the stack is empty. If it is, we'll throw an exception.\n\n### Step 5: Implement the Peek Method\n\nThe `peek` method will return the top element without removing it. Similar to `pop`, we'll check if the stack is empty and throw an exception if it is.\n\n### Step 6: Add Optional Methods\n\nWe can also add methods like `isEmpty` and `isFull` to check the state of the stack.\n\n### Example Code\n\nHere's how you can implement this:\n\n```java\npublic class FixedSizeStack {\n    private int[] stack;\n    private int top;\n    private int capacity;\n\n    // Constructor to initialize the stack with a fixed size\n    public FixedSizeStack(int size) {\n        stack = new int[size];\n        top = -1;\n        capacity = size;\n    }\n\n    // Method to add an element to the stack\n    public void push(int value) {\n        if (isFull()) {\n            throw new StackOverflowError(\"Stack is full\");\n        }\n        stack[++top] = value;\n    }\n\n    // Method to remove and return the top element of the stack\n    public int pop() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return stack[top--];\n    }\n\n    // Method to return the top element without removing it\n    public int peek() {\n        if (isEmpty()) {\n            throw new IllegalStateException(\"Stack is empty\");\n        }\n        return stack[top];\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return top == capacity - 1;\n    }\n\n    // Main method for testing\n    public static void main(String[] args) {\n        FixedSizeStack stack = new FixedSizeStack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        System.out.println(\"Top element is: \" + stack.peek());\n        stack.pop();\n        System.out.println(\"Top element after pop is: \" + stack.peek());\n        stack.push(4);\n        stack.push(5);\n        // stack.push(6); // This would throw StackOverflowError\n    }\n}\n```\n\n### Explanation\n\n- **Constructor**: Initializes the stack array and sets the top index to -1.\n\n- **Push**: Adds an element to the top of the stack. Throws `StackOverflowError` if the stack is full.\n\n- **Pop**: Removes and returns the top element. Throws `IllegalStateException` if the stack is empty.\n\n- **Peek**: Returns the top element without removing it. Throws `IllegalStateException` if the stack is empty.\n\n- **IsEmpty and IsFull**: Helper methods to check the state of the stack.\n\nThis implementation uses an array for storage, which is efficient for fixed-size stacks. If you need a dynamic stack that can grow, you might consider using a list like `ArrayList`.\n"
    }
]