[
    {
        "role": "user",
        "content": "Build a command-line tool in Python that interacts with Google Cloud Storage: uploads a local file to a specified bucket, lists all objects in the bucket, and downloads a specified object to the local machine.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Building a command-line tool in Python to interact with Google Cloud Storage (GCS) involves several steps. We'll create a tool that can upload a local file to a specified GCS bucket, list all objects in that bucket, and download a specified object back to the local machine.\n\n### Prerequisites\n\n1. **Google Cloud Account**: Ensure you have a Google Cloud account and a project set up.\n2. **Google Cloud SDK**: Install the Google Cloud SDK.\n3. **Credentials**: Set up authentication by creating service account keys.\n4. **Python**: Ensure Python is installed on your machine.\n5. **Libraries**: Install the required Python libraries, primarily `google-cloud-storage`.\n\n### Step-by-Step Guide\n\n#### 1. Set Up Google Cloud Storage\n\n- **Create a GCS Bucket**:\n  - Go to the GCS console.\n  - Create a new bucket with a unique name.\n\n- **Authentication**:\n  - Create a service account.\n  - Download the JSON key file for authentication.\n\n#### 2. Install Required Libraries\n\nInstall the `google-cloud-storage` library using pip:\n\n```bash\npip install google-cloud-storage\n```\n\n#### 3. Create the Command-Line Tool\n\nWe'll create a Python script that uses argparse for command-line arguments to handle different operations: upload, list, and download.\n\n#### 4. Writing the Python Script\n\nCreate a file named `gcs_tool.py` and add the following code:\n\n```python\nimport argparse\nfrom google.cloud import storage\n\ndef upload_blob(bucket_name, source_file_name, destination_blob_name):\n    \"\"\"Uploads a file to the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(destination_blob_name)\n\n    blob.upload_from_filename(source_file_name)\n\n    print(f\"File {source_file_name} uploaded to {destination_blob_name}.\")\n\ndef list_blobs(bucket_name):\n    \"\"\"Lists all the blobs in the bucket.\"\"\"\n    storage_client = storage.Client()\n    blobs = storage_client.list_blobs(bucket_name)\n\n    for blob in blobs:\n        print(blob.name)\n\ndef download_blob(bucket_name, source_blob_name, destination_file_name):\n    \"\"\"Downloads a blob from the bucket.\"\"\"\n    storage_client = storage.Client()\n    bucket = storage_client.bucket(bucket_name)\n    blob = bucket.blob(source_blob_name)\n\n    blob.download_to_filename(destination_file_name)\n\n    print(f\"Blob {source_blob_name} downloaded to {destination_file_name}.\")\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"GCS Command Line Tool\")\n    parser.add_argument(\"operation\", choices=[\"upload\", \"list\", \"download\"], help=\"Operation to perform\")\n    parser.add_argument(\"--bucket\", help=\"Bucket name\")\n    parser.add_argument(\"--source\", help=\"Source file path for upload or blob name for download\")\n    parser.add_argument(\"--destination\", help=\"Destination blob name for upload or file path for download\")\n\n    args = parser.parse_args()\n\n    if args.operation == \"upload\":\n        if not all([args.bucket, args.source, args.destination]):\n            print(\"For upload, bucket, source, and destination are required.\")\n            return\n        upload_blob(args.bucket, args.source, args.destination)\n    elif args.operation == \"list\":\n        if not args.bucket:\n            print(\"Bucket name is required for listing.\")\n            return\n        list_blobs(args.bucket)\n    elif args.operation == \"download\":\n        if not all([args.bucket, args.source, args.destination]):\n            print(\"For download, bucket, source, and destination are required.\")\n            return\n        download_blob(args.bucket, args.source, args.destination)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n#### 5. Using the Tool\n\nTo use the tool, run the script with the desired operation and parameters.\n\n**Upload a file:**\n\n```bash\npython gcs_tool.py upload --bucket your-bucket-name --source local-file-path --destination gs-file-name\n```\n\n**List objects in a bucket:**\n\n```bash\npython gcs_tool.py list --bucket your-bucket-name\n```\n\n**Download an object:**\n\n```bash\npython gcs_tool.py download --bucket your-bucket-name --source gs-file-name --destination local-file-path\n```\n\n### Explanation\n\n- **upload_blob**: Uploads a local file to a specified bucket and destination name.\n- **list_blobs**: Lists all objects in the specified bucket.\n- **download_blob**: Downloads a specified object from the bucket to a local path.\n- **main**: Parses command-line arguments and calls the appropriate function based on the operation specified.\n\nThis tool provides a basic interface to interact with GCS via the command line, making it easier to manage files in your buckets."
    }
]