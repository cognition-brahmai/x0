[
    {
        "role": "user",
        "content": "Develop a Java program that uses multithreading to download multiple files concurrently from a list of URLs. The program should have a configurable number of threads and save the downloaded files to a specified directory."
    },
    {
        "role": "assistant",
        "content": "Certainly! I'll help you develop a Java program that uses multithreading to download multiple files concurrently from a list of URLs. We'll make sure that the number of threads is configurable, and the downloaded files are saved to a specified directory.\n\nFirst, let's outline the steps we need to take:\n\n1. **Reading URLs from a list:** We need a way to provide a list of URLs from which files will be downloaded.\n\n2. **Configurable number of threads:** The user should be able to specify how many threads to use for downloading files concurrently.\n\n3. **Downloading files:** Each thread will handle the download of a single file from a URL.\n\n4. **Saving files to a specified directory:** The downloaded files need to be saved to a particular directory on the local file system.\n\n5. **Handling potential errors:** We should handle exceptions that might occur during downloading or saving files.\n\nTo achieve this, we can use Java's `ExecutorService` and `Future` to manage a pool of threads. Each download task will be submitted to the executor service, which will handle the concurrency based on the specified number of threads.\n\n### Solution Code\n\n```java\nimport java.io.BufferedInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.net.URL;\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.concurrent.Callable;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class MultiThreadedDownloader {\n\n    private final int numberOfThreads;\n    private final String downloadDirectory;\n    private final List<String> urls;\n\n    public MultiThreadedDownloader(int numberOfThreads, String downloadDirectory, List<String> urls) {\n        this.numberOfThreads = numberOfThreads;\n        this.downloadDirectory = downloadDirectory;\n        this.urls = urls;\n    }\n\n    public void downloadFiles() {\n        ExecutorService executor = Executors.newFixedThreadPool(numberOfThreads);\n        List<Future<?>> futures = new ArrayList<>();\n\n        try {\n            for (String url : urls) {\n                Callable<Void> task = () -> {\n                    downloadFile(url);\n                    return null;\n                };\n                Future<?> future = executor.submit(task);\n                futures.add(future);\n            }\n\n            // Wait for all downloads to complete\n            for (Future<?> future : futures) {\n                future.get();\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        } finally {\n            executor.shutdown();\n        }\n    }\n\n    private void downloadFile(String url) {\n        try {\n            URL website = new URL(url);\n            String fileName = url.substring(url.lastIndexOf('/') + 1);\n            String file_path = downloadDirectory + \"/\" + fileName;\n\n            try (BufferedInputStream in = new BufferedInputStream(website.openStream());\n                 FileOutputStream fileOutputStream = new FileOutputStream(file_path)) {\n\n                byte[] dataBuffer = new byte[1024];\n                int bytesRead;\n                while ((bytesRead = in.read(dataBuffer, 0, 1024)) != -1) {\n                    fileOutputStream.write(dataBuffer, 0, bytesRead);\n                }\n                System.out.println(\"Downloaded: \" + fileName);\n            }\n        } catch (IOException e) {\n            System.err.println(\"Error downloading file from \" + url);\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        // Example usage\n        int numberOfThreads = 5;\n        String downloadDirectory = \"/path/to/download/directory\";\n        List<String> urls = new ArrayList<>();\n        urls.add(\"http://example.com/file1.zip\");\n        urls.add(\"http://example.com/file2.zip\");\n        // Add more URLs as needed\n\n        MultiThreadedDownloader downloader = new MultiThreadedDownloader(numberOfThreads, downloadDirectory, urls);\n        downloader.downloadFiles();\n    }\n}\n```\n\n### Explanation\n\n1. **MultiThreadedDownloader Class:**\n   - **Constructor:** Takes the number of threads, download directory path, and a list of URLs.\n   - **downloadFiles Method:** Manages the thread pool and submits download tasks.\n   - **downloadFile Method:** Handles the actual download of a single file from a URL and saves it to the specified directory.\n\n2. **ExecutorService:**\n   - We use a fixed-thread pool to manage the specified number of threads.\n   - Each download task is submitted to the executor service as a callable task.\n\n3. **Error Handling:**\n   - Each download task catches and prints exceptions related to downloading or saving files.\n   - The main download loop catches any exceptions that occur during task submission or waiting for task completion.\n\n4. **Main Method:**\n   - Example usage demonstrating how to create an instance of `MultiThreadedDownloader` and start the download process.\n\nThis approach ensures that files are downloaded concurrently using a specified number of threads, and all downloads are managed efficiently."
    }
]