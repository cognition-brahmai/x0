[
    {
        "role": "user",
        "content": "Create a C# application that connects to a PostgreSQL database, retrieves data from a table containing information about employees (name, job title, salary), and generates a report in PDF format using a third-party library like iTextSharp.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through creating a C# application that connects to a PostgreSQL database, retrieves employee data, and generates a PDF report using iTextSharp. Make sure you have Visual Studio installed, as well as the necessary NuGet packages for PostgreSQL and iTextSharp.\n\nFirst, create a new C# Console App project in Visual Studio. Once your project is set up, you'll need to install the required NuGet packages. Open the Package Manager Console and install Npgsql for PostgreSQL connectivity and iTextSharp for PDF generation.\n\nInstall Npgsql:\n\n```bash\nInstall-Package Npgsql\n```\n\nInstall iTextSharp:\n\n```bash\nInstall-Package iTextSharp\n```\n\nNext, set up your PostgreSQL database. Create a table named `employees` with columns for name, job title, and salary. Here's an example SQL statement to create the table:\n\n```sql\nCREATE TABLE employees (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(100),\n    job_title VARCHAR(100),\n    salary DECIMAL(10, 2)\n);\n```\n\nInsert some sample data into the `employees` table:\n\n```sql\nINSERT INTO employees (name, job_title, salary) VALUES\n('John Doe', 'Software Engineer', 80000),\n('Jane Smith', 'Project Manager', 90000),\n('Emily Johnson', 'Data Analyst', 75000);\n```\n\nNow, let's proceed to write the C# code. In your program, you'll need to establish a connection to the PostgreSQL database, retrieve the employee data, and then generate a PDF report with that data.\n\nStart by adding the necessary `using` directives at the top of your `Program.cs` file:\n\n```csharp\nusing System;\nusing System.IO;\nusing Npgsql;\nusing iTextSharp.text;\nusing iTextSharp.text.pdf;\n```\n\nDefine your database connection string. Replace the placeholders with your actual database credentials:\n\n```csharp\nstring connectionString = \"Host=your_host;Username=your_username;Password=your_password;Database=your_database;\";\n```\n\nWrite a method to retrieve employee data from the database:\n\n```csharp\npublic static void GetEmployees(out List<Employee> employees)\n{\n    employees = new List<Employee>();\n    using (var connection = new NpgsqlConnection(connectionString))\n    {\n        connection.Open();\n        var command = new NpgsqlCommand(\"SELECT name, job_title, salary FROM employees\", connection);\n        var reader = command.ExecuteReader();\n        while (reader.Read())\n        {\n            employees.Add(new Employee\n            {\n                Name = reader.GetString(0),\n                JobTitle = reader.GetString(1),\n                Salary = reader.GetDecimal(2)\n            });\n        }\n    }\n}\n```\n\nDefine an `Employee` class to hold the employee data:\n\n```csharp\npublic class Employee\n{\n    public string Name { get; set; }\n    public string JobTitle { get; set; }\n    public decimal Salary { get; set; }\n}\n```\n\nCreate a method to generate the PDF report:\n\n```csharp\npublic static void GeneratePdfReport(List<Employee> employees, string filePath)\n{\n    Document document = new Document();\n    PdfWriter.GetInstance(document, new FileStream(filePath, FileMode.Create));\n    document.Open();\n\n    // Add title\n    Paragraph title = new Paragraph(\"Employee Report\", FontFactory.GetFont(\"Arial\", 16, Font.BOLD));\n    title.Alignment = Element.ALIGN_CENTER;\n    document.Add(title);\n\n    // Add table\n    PdfPTable table = new PdfPTable(3);\n    table.WidthPercentage = 100;\n    table.SetWidths(new float[] { 4f, 3f, 2f });\n\n    // Table headers\n    PdfPCell cell = new PdfPCell(new Phrase(\"Name\", FontFactory.GetFont(\"Arial\", 12, Font.BOLD)));\n    cell.BackgroundColor = BaseColor.LIGHT_GRAY;\n    table.AddCell(cell);\n\n    cell = new PdfPCell(new Phrase(\"Job Title\", FontFactory.GetFont(\"Arial\", 12, Font.BOLD)));\n    cell.BackgroundColor = BaseColor.LIGHT_GRAY;\n    table.AddCell(cell);\n\n    cell = new PdfPCell(new Phrase(\"Salary\", FontFactory.GetFont(\"Arial\", 12, Font.BOLD)));\n    cell.BackgroundColor = BaseColor.LIGHT_GRAY;\n    table.AddCell(cell);\n\n    // Table data\n    foreach (var employee in employees)\n    {\n        table.AddCell(new Phrase(employee.Name, FontFactory.GetFont(\"Arial\", 10)));\n        table.AddCell(new Phrase(employee.JobTitle, FontFactory.GetFont(\"Arial\", 10)));\n        table.AddCell(new Phrase(employee.Salary.ToString(\"C\"), FontFactory.GetFont(\"Arial\", 10)));\n    }\n\n    document.Add(table);\n    document.Close();\n}\n```\n\nFinally, in your `Main` method, call these methods to retrieve the employee data and generate the PDF report:\n\n```csharp\nstatic void Main(string[] args)\n{\n    List<Employee> employees;\n    GetEmployees(out employees);\n    string pdfFilePath = \"EmployeeReport.pdf\";\n    GeneratePdfReport(employees, pdfFilePath);\n    Console.WriteLine(\"PDF report generated successfully at \" + pdfFilePath);\n}\n```\n\nRun your application, and it should connect to the PostgreSQL database, retrieve the employee data, and generate a PDF report named `EmployeeReport.pdf` in the project directory.\n\nThis is a basic example to get you started. You can enhance this application by adding error handling, formatting the PDF further, or including more features as needed."
    }
]