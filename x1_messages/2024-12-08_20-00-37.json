[
    {
        "role": "user",
        "content": "Create a simple Golang web server that listens on port 8080 and serves static files from a specified directory. The server should log each request's method, path, and response status code.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple web server in Golang that serves static files and logs each request's method, path, and response status code. Sounds straightforward!\n\nFirst, make sure you have Go installed on your machine. You can download it from golang.org if you haven't already.\n\nNow, let's start by creating a new directory for your project. Open your terminal and run:\n\n```bash\nmkdir static-server\ncd static-server\n```\n\nNext, we'll initialize a new Go module to manage dependencies:\n\n```bash\ngo mod init static-server\n```\n\nFor serving static files, Go's standard library has a package called `net/http` which includes a handler for static files. We'll use `http.FileServer` for that.\n\nBut we also need to log each request's method, path, and response status code. To do this, we can create a custom handler that wraps the FileServer and logs the required information.\n\nHere's a plan:\n\n1. Create a handler that serves static files from a specified directory.\n2. Wrap this handler with a logging middleware that records the method, path, and response status.\n3. Set up the server to listen on port 8080.\n\nLet's start by writing the code. Create a new file called `main.go`:\n\n```bash\ntouch main.go\n```\n\nNow, open `main.go` in your favorite text editor and start by importing the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n```\n\nNext, define a function that will serve as our logging middleware. This function will take a http.Handler and return a new http.Handler that logs the required information before calling the original handler.\n\nHere's how we can do it:\n\n```go\nfunc logHandler(handler http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Start time\n\t\tstart := time.Now()\n\n\t\t// Create a response recorder to capture the response\n\t recorder := &responseRecorder{w, http.StatusOK}\n\n\t\t// Call the original handler with the response recorder\n\t\thandler.ServeHTTP(recorder, r)\n\n\t\t// Calculate duration\n\t\tduration := time.Since(start)\n\n\t\t// Log the method, path, status code, and duration\n\t\tlog.Printf(\"%s %s %d %s\", r.Method, r.URL.Path, recorder.code, duration)\n\t})\n}\n\ntype responseRecorder struct {\n\thttp.ResponseWriter\n\tcode int\n}\n\nfunc (r *responseRecorder) WriteHeader(code int) {\n\tr.code = code\n\tr.ResponseWriter.WriteHeader(code)\n}\n```\n\nIn this code:\n\n- `logHandler` is a function that takes a `http.Handler` and returns a new `http.Handler`.\n- Inside the returned handler, we create a `responseRecorder` which is a struct that wraps `http.ResponseWriter` and captures the status code.\n- We then call the original handler with this recorder.\n- After the handler has finished, we calculate the duration and log the method, path, status code, and duration.\n\nNow, let's set up the server:\n\n```go\nfunc main() {\n\t// Specify the directory to serve static files from\n\tdirectory := http.Dir(\"./static\")\n\n\t// Create a FileServer handler\n\tfileServer := http.FileServer(directory)\n\n\t// Wrap the FileServer with the logHandler\n\thandler := logHandler(fileServer)\n\n\t// Set up the server\n\tserver := &http.Server{\n\t\tAddr:    \":8080\",\n\t\tHandler: handler,\n\t}\n\n\t// Start the server\n\tlog.Printf(\"Starting server on port 8080...\")\n\tif err := server.ListenAndServe(); err != nil {\n\t\tlog.Fatalf(\"Could not start server: %s\\n\", err)\n\t}\n}\n```\n\nIn this `main` function:\n\n- We specify the directory to serve static files from (in this case, \"./static\"). Make sure to create this directory and add some files to it so you have something to serve.\n- We create a `http.FileServer` handler for this directory.\n- We wrap this handler with our `logHandler` middleware.\n- We set up an `http.Server` listening on port 8080 with our wrapped handler.\n- Finally, we start the server and log a message indicating that it's started.\n\nThat's pretty much it! Let's test this out.\n\nFirst, create the \"static\" directory and add a simple HTML file to it:\n\n```bash\nmkdir static\necho \"<html><body><h1>Hello, World!</h1></body></html>\" > static/index.html\n```\n\nNow, run your server:\n\n```bash\ngo run main.go\n```\n\nYou should see:\n\n```\n2023/04/01 12:34:56 Starting server on port 8080...\n```\n\nOpen your web browser and go to `http://localhost:8080/`. You should see your \"Hello, World!\" page.\n\nCheck the terminal where your server is running. You should see logs like:\n\n```\nGET / 200 1.234567ms\nGET /index.html 200 0.123456ms\n```\n\nThis shows that the server is logging each request's method, path, and response status code along with the duration.\n\nYou can add more files to the \"static\" directory and test accessing them to see more logs.\n\nThat's a simple static file server with request logging in Golang. If you have any questions or need further modifications, feel free to ask!"
    }
]