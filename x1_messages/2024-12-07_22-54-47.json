[
    {
        "role": "user",
        "content": "Develop a Node.js application that connects to a MariaDB database and performs CRUD (Create, Read, Update, Delete) operations on a \"products\" table. Use environment variables to store database credentials."
    },
    {
        "role": "assistant",
        "content": "To develop a Node.js application that connects to a MariaDB database and performs CRUD operations on a \"products\" table, while storing database credentials in environment variables, you can follow these steps:\n\n### Prerequisites\n\n1. **Node.js** installed on your machine.\n2. **MariaDB** installed and running.\n3. Basic understanding of JavaScript and SQL.\n\n### Setup\n\n1. **Initialize a new Node.js project:**\n\n   ```bash\n   mkdir product-crud\n   cd product-crud\n   npm init -y\n   ```\n\n2. **Install necessary packages:**\n\n   - `mariadb`: For connecting to MariaDB.\n   - `dotenv`: For managing environment variables.\n\n   ```bash\n   npm install mariadb dotenv\n   ```\n\n3. **Create a `.env` file** to store your database credentials:\n\n   ```env\n   DB_HOST=localhost\n   DB_USER=your_db_user\n   DB_PASSWORD=your_db_password\n   DB_NAME=your_database_name\n   ```\n\n4. **Create a `db.js` file** to handle database connections:\n\n   ```javascript\n   const mariadb = require('mariadb');\n   require('dotenv').config();\n\n   const pool = mariadb.createPool({\n       host: process.env.DB_HOST,\n       user: process.env.DB_USER,\n       password: process.env.DB_PASSWORD,\n       database: process.env.DB_NAME,\n       connectionLimit: 5\n   });\n\n   module.exports = pool;\n   ```\n\n5. **Create a `products.js` file** to handle CRUD operations:\n\n   ```javascript\n   const pool = require('./db');\n\n   // Create a new product\n   async function createProduct(name, price) {\n       const query = 'INSERT INTO products (name, price) VALUES (?, ?)';\n       const conn = await pool.getConnection();\n       try {\n           const result = await conn.query(query, [name, price]);\n           return result.insertId;\n       } catch (error) {\n           throw error;\n       } finally {\n           conn.release();\n       }\n   }\n\n   // Get all products\n   async function getProducts() {\n       const query = 'SELECT * FROM products';\n       const conn = await pool.getConnection();\n       try {\n           const rows = await conn.query(query);\n           return rows;\n       } catch (error) {\n           throw error;\n       } finally {\n           conn.release();\n       }\n   }\n\n   // Get a single product by ID\n   async function getProductById(id) {\n       const query = 'SELECT * FROM products WHERE id = ?';\n       const conn = await pool.getConnection();\n       try {\n           const rows = await conn.query(query, [id]);\n           return rows[0];\n       } catch (error) {\n           throw error;\n       } finally {\n           conn.release();\n       }\n   }\n\n   // Update a product\n   async function updateProduct(id, name, price) {\n       const query = 'UPDATE products SET name = ?, price = ? WHERE id = ?';\n       const conn = await pool.getConnection();\n       try {\n           const result = await conn.query(query, [name, price, id]);\n           return result.affectedRows > 0;\n       } catch (error) {\n           throw error;\n       } finally {\n           conn.release();\n       }\n   }\n\n   // Delete a product\n   async function deleteProduct(id) {\n       const query = 'DELETE FROM products WHERE id = ?';\n       const conn = await pool.getConnection();\n       try {\n           const result = await conn.query(query, [id]);\n           return result.affectedRows > 0;\n       } catch (error) {\n           throw error;\n       } finally {\n           conn.release();\n       }\n   }\n\n   module.exports = {\n       createProduct,\n       getProducts,\n       getProductById,\n       updateProduct,\n       deleteProduct\n   };\n   ```\n\n6. **Create an `index.js` file** to test the CRUD operations:\n\n   ```javascript\n   const products = require('./products');\n\n   // Create a new product\n   (async () => {\n       try {\n           const productId = await products.createProduct('Laptop', 999.99);\n           console.log('Created product with ID:', productId);\n\n           const allProducts = await products.getProducts();\n           console.log('All products:', allProducts);\n\n           const product = await products.getProductById(productId);\n           console.log('Product by ID:', product);\n\n           const updated = await products.updateProduct(productId, 'Gaming Laptop', 1299.99);\n           console.log('Product updated:', updated);\n\n           const deleted = await products.deleteProduct(productId);\n           console.log('Product deleted:', deleted);\n       } catch (error) {\n           console.error('Error:', error);\n       }\n   })();\n   ```\n\n7. **Set up your MariaDB database:**\n\n   - Create a database and a \"products\" table.\n\n   ```sql\n   CREATE DATABASE your_database_name;\n   USE your_database_name;\n\n   CREATE TABLE products (\n       id INT AUTO_INCREMENT PRIMARY KEY,\n       name VARCHAR(255) NOT NULL,\n       price DECIMAL(10, 2) NOT NULL\n   );\n   ```\n\n8. **Run your application:**\n\n   ```bash\n   node index.js\n   ```\n\nThis setup provides a basic Node.js application that connects to a MariaDB database and performs CRUD operations on a \"products\" table, using environment variables for database credentials. You can expand this by adding more features, error handling, and integrating with a web framework like Express for building a full-fledged API."
    }
]