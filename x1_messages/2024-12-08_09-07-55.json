[
    {
        "role": "user",
        "content": "Create a Python script that implements a stack data structure using a list, with push, pop, and peek operations."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's create a simple stack data structure in Python using a list. A stack is a Last-In-First-Out (LIFO) data structure, which means the last element added is the first one to be removed.\n\nWe'll implement three main operations:\n\n1. `push(item)`: Add an item to the top of the stack.\n\n2. `pop()`: Remove and return the item from the top of the stack.\n\n3. `peek()`: Return the item at the top of the stack without removing it.\n\nAdditionally, we'll add some extra methods for completeness:\n\n- `is_empty()`: Check if the stack is empty.\n\n- `size()`: Return the number of items in the stack.\n\nHere's how you can implement this:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"pop from empty stack\")\n        return self.items.pop()\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"peek from empty stack\")\n        return self.items[-1]\n\n    def size(self):\n        return len(self.items)\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    print(\"Is the stack empty? \", stack.is_empty())  # True\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(\"Stack size:\", stack.size())  # 3\n    print(\"Top item:\", stack.peek())  # 3\n    print(\"Popped item:\", stack.pop())  # 3\n    print(\"Stack size after pop:\", stack.size())  # 2\n    print(\"Is the stack empty? \", stack.is_empty())  # False\n```\n\n### Explanation:\n\n1. **Initialization (`__init__`)**:\n   - We use a list `items` to store the stack elements.\n\n2. **`is_empty`**:\n   - Returns `True` if the stack is empty, otherwise `False`.\n\n3. **`push(item)`**:\n   - Adds the item to the end of the list, which represents the top of the stack.\n\n4. **`pop()`**:\n   - Removes and returns the last item from the list (top of the stack).\n   - Raises an `IndexError` if the stack is empty.\n\n5. **`peek()`**:\n   - Returns the last item from the list without removing it.\n   - Raises an `IndexError` if the stack is empty.\n\n6. **`size()`**:\n   - Returns the number of items in the stack.\n\nThis implementation is straightforward and leverages Python's list methods for efficiency. The `append` and `pop` operations on lists are typically O(1) complexity, making them suitable for stack operations.\n\nIf you have any questions or need further modifications, feel free to ask!\n"
    }
]