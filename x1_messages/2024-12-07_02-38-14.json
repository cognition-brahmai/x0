[
    {
        "role": "user",
        "content": "Create a Python script that connects to a MySQL database and performs CRUD operations on a table named \"products\". The table should have columns for product ID, name, price, and quantity. Implement functions for adding, updating, deleting, and retrieving products from the table. Include error handling and proper closing of the database connection."
    },
    {
        "role": "assistant",
        "content": "As an AI language model, I can't create or execute actual Python scripts, but I can certainly help you write one! I'll guide you through creating a Python script that connects to a MySQL database and performs CRUD (Create, Read, Update, Delete) operations on a \"products\" table. I'll make sure to include error handling and proper database connection management.\n\nFirst, you'll need to have MySQL installed and a database set up. You'll also need the `mysql-connector-python` package installed in your Python environment. You can install it using pip if you haven't already:\n\n```bash\npip install mysql-connector-python\n```\n\nNow, let's outline the steps we'll take in our script:\n\n1. **Connect to the MySQL database.**\n2. **Create a \"products\" table if it doesn't exist.**\n3. **Implement functions to:**\n   - Add a product.\n   - Update a product.\n   - Delete a product.\n   - Retrieve products.\n4. **Handle errors gracefully.**\n5. **Ensure the database connection is closed properly.**\n\nLet's start by setting up the database connection and creating the \"products\" table.\n\n### Step 1: Connect to the MySQL Database\n\nWe'll need to establish a connection to the MySQL database using the `mysql.connector` module. You'll need to provide your database host, user, password, and database name.\n\n```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection():\n    try:\n        connection = mysql.connector.connect(\n            host='your_host',\n            database='your_database',\n            user='your_user',\n            password='your_password'\n        )\n        if connection.is_connected():\n            print(\"Successfully connected to the database\")\n            return connection\n    except Error as e:\n        print(f\"Error connecting to MySQL: {e}\")\n        return None\n```\n\nReplace `'your_host'`, `'your_database'`, `'your_user'`, and `'your_password'` with your actual database credentials.\n\n### Step 2: Create the \"products\" Table\n\nWe'll create a table named \"products\" with columns for product ID, name, price, and quantity. We'll check if the table already exists to avoid duplication.\n\n```python\ndef create_products_table(connection):\n    try:\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS products (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                price DECIMAL(10, 2) NOT NULL,\n                quantity INT NOT NULL\n            )\n        \"\"\")\n        connection.commit()\n        print(\"Products table created successfully\")\n    except Error as e:\n        print(f\"Error creating table: {e}\")\n```\n\n### Step 3: Implement CRUD Functions\n\n#### Add a Product\n\n```python\ndef add_product(connection, name, price, quantity):\n    try:\n        cursor = connection.cursor()\n        query = \"INSERT INTO products (name, price, quantity) VALUES (%s, %s, %s)\"\n        cursor.execute(query, (name, price, quantity))\n        connection.commit()\n        print(\"Product added successfully\")\n    except Error as e:\n        print(f\"Error adding product: {e}\")\n```\n\n#### Update a Product\n\n```python\ndef update_product(connection, product_id, name, price, quantity):\n    try:\n        cursor = connection.cursor()\n        query = \"UPDATE products SET name=%s, price=%s, quantity=%s WHERE id=%s\"\n        cursor.execute(query, (name, price, quantity, product_id))\n        connection.commit()\n        print(\"Product updated successfully\")\n    except Error as e:\n        print(f\"Error updating product: {e}\")\n```\n\n#### Delete a Product\n\n```python\ndef delete_product(connection, product_id):\n    try:\n        cursor = connection.cursor()\n        query = \"DELETE FROM products WHERE id=%s\"\n        cursor.execute(query, (product_id,))\n        connection.commit()\n        print(\"Product deleted successfully\")\n    except Error as e:\n        print(f\"Error deleting product: {e}\")\n```\n\n#### Retrieve Products\n\n```python\ndef get_products(connection):\n    try:\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT id, name, price, quantity FROM products\")\n        rows = cursor.fetchall()\n        for row in rows:\n            print(f\"ID: {row[0]}, Name: {row[1]}, Price: {row[2]}, Quantity: {row[3]}\")\n    except Error as e:\n        print(f\"Error fetching products: {e}\")\n```\n\n### Step 4: Handle Errors Gracefully\n\nWe've already included error handling in each function using try-except blocks. This will catch and print any errors that occur during database operations.\n\n### Step 5: Ensure Proper Database Connection Closure\n\nIt's important to close the database connection when we're done to free up resources. We'll create a function to handle this.\n\n```python\ndef close_connection(connection):\n    if connection.is_connected():\n        connection.close()\n        print(\"Database connection closed\")\n```\n\n### Putting It All Together\n\nNow, let's put all these functions together in a complete script. We'll also add a simple demonstration of how to use these functions.\n\n```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection():\n    try:\n        connection = mysql.connector.connect(\n            host='your_host',\n            database='your_database',\n            user='your_user',\n            password='your_password'\n        )\n        if connection.is_connected():\n            print(\"Successfully connected to the database\")\n            return connection\n    except Error as e:\n        print(f\"Error connecting to MySQL: {e}\")\n        return None\n\ndef create_products_table(connection):\n    try:\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"\n            CREATE TABLE IF NOT EXISTS products (\n                id INT AUTO_INCREMENT PRIMARY KEY,\n                name VARCHAR(255) NOT NULL,\n                price DECIMAL(10, 2) NOT NULL,\n                quantity INT NOT NULL\n            )\n        \"\"\")\n        connection.commit()\n        print(\"Products table created successfully\")\n    except Error as e:\n        print(f\"Error creating table: {e}\")\n\ndef add_product(connection, name, price, quantity):\n    try:\n        cursor = connection.cursor()\n        query = \"INSERT INTO products (name, price, quantity) VALUES (%s, %s, %s)\"\n        cursor.execute(query, (name, price, quantity))\n        connection.commit()\n        print(\"Product added successfully\")\n    except Error as e:\n        print(f\"Error adding product: {e}\")\n\ndef update_product(connection, product_id, name, price, quantity):\n    try:\n        cursor = connection.cursor()\n        query = \"UPDATE products SET name=%s, price=%s, quantity=%s WHERE id=%s\"\n        cursor.execute(query, (name, price, quantity, product_id))\n        connection.commit()\n        print(\"Product updated successfully\")\n    except Error as e:\n        print(f\"Error updating product: {e}\")\n\ndef delete_product(connection, product_id):\n    try:\n        cursor = connection.cursor()\n        query = \"DELETE FROM products WHERE id=%s\"\n        cursor.execute(query, (product_id,))\n        connection.commit()\n        print(\"Product deleted successfully\")\n    except Error as e:\n        print(f\"Error deleting product: {e}\")\n\ndef get_products(connection):\n    try:\n        cursor = connection.cursor()\n        cursor.execute(\"SELECT id, name, price, quantity FROM products\")\n        rows = cursor.fetchall()\n        for row in rows:\n            print(f\"ID: {row[0]}, Name: {row[1]}, Price: {row[2]}, Quantity: {row[3]}\")\n    except Error as e:\n        print(f\"Error fetching products: {e}\")\n\ndef close_connection(connection):\n    if connection.is_connected():\n        connection.close()\n        print(\"Database connection closed\")\n\nif __name__ == \"__main__\":\n    connection = create_connection()\n    if connection:\n        create_products_table(connection)\n        \n        # Demonstration of CRUD operations\n        add_product(connection, \"Laptop\", 1200.00, 10)\n        add_product(connection, \"Mouse\", 25.00, 50)\n        \n        get_products(connection)\n        \n        update_product(connection, 1, \"Gaming Laptop\", 1500.00, 8)\n        \n        get_products(connection)\n        \n        delete_product(connection, 2)\n        \n        get_products(connection)\n        \n        close_connection(connection)\n```\n\n### Explanation\n\n1. **Connection Setup:** The `create_connection` function establishes a connection to the MySQL database using the provided credentials.\n2. **Table Creation:** The `create_products_table` function creates a \"products\" table if it doesn't already exist.\n3. **CRUD Operations:**\n   - `add_product`: Inserts a new product into the table.\n   - `update_product`: Updates an existing product by its ID.\n   - `delete_product`: Deletes a product by its ID.\n   - `get_products`: Retrieves and prints all products in the table.\n4. **Error Handling:** Each database operation is wrapped in a try-except block to handle and display any errors.\n5. **Connection Closure:** The `close_connection` function ensures the database connection is properly closed after operations are complete.\n\nThis script provides a basic framework for interacting with a MySQL database using Python. You can expand upon this by adding more features, improving error handling, or incorporating user input."
    }
]