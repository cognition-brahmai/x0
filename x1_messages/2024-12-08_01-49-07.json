[
    {
        "role": "user",
        "content": "Write a C++ program to implement a singly linked list data structure with functions for adding elements at the beginning, end, and any specified position in the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'll write a C++ program that implements a singly linked list with functions to add elements at the beginning, end, and at a specified position.\n\nFirst, I need to define the structure of a node in the linked list. Each node will contain an integer data and a pointer to the next node.\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n};\n```\n\nNext, I'll create a class for the singly linked list, which will have methods to add elements at the beginning, end, and at a specified position.\n\n```cpp\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Function to add a node at the beginning\n    void addAtBeginning(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Function to add a node at the end\n    void addAtEnd(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n\n        Node* temp = head;\n        while (temp->next != nullptr) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n\n    // Function to add a node at a specified position\n    void addAtPosition(int position, int value) {\n        if (position <= 0) {\n            std::cout << \"Invalid position. Position should be greater than 0.\" << std::endl;\n            return;\n        }\n\n        if (position == 1) {\n            addAtBeginning(value);\n            return;\n        }\n\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        Node* temp = head;\n        for (int i = 1; i < position - 1; ++i) {\n            if (temp == nullptr) {\n                std::cout << \"Position out of range.\" << std::endl;\n                delete newNode;\n                return;\n            }\n            temp = temp->next;\n        }\n\n        newNode->next = temp->next;\n        temp->next = newNode;\n    }\n\n    // Function to display the list\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << \" -> \";\n            temp = temp->next;\n        }\n        std::cout << \"nullptr\" << std::endl;\n    }\n\n    // Destructor to free the memory\n    ~SinglyLinkedList() {\n        Node* temp;\n        while (head != nullptr) {\n            temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n};\n```\n\nNow, I'll write a simple `main` function to test the singly linked list operations.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nint main() {\n    SinglyLinkedList list;\n\n    list.addAtBeginning(3);\n    list.display();  // Output: 3 -> nullptr\n\n    list.addAtEnd(5);\n    list.display();  // Output: 3 -> 5 -> nullptr\n\n    list.addAtPosition(1, 1);\n    list.display();  // Output: 1 -> 3 -> 5 -> nullptr\n\n    list.addAtPosition(3, 4);\n    list.display();  // Output: 1 -> 3 -> 4 -> 5 -> nullptr\n\n    list.addAtPosition(5, 6);\n    list.display();  // Output: 1 -> 3 -> 4 -> 5 -> 6 -> nullptr\n\n    return 0;\n}\n```\n\nThis program defines a singly linked list with functions to add elements at the beginning, end, and at a specified position. It also includes a display function to print the list and a destructor to free the memory allocated for the nodes."
    }
]