[
    {
        "role": "user",
        "content": "Write a Python script that connects to a MySQL database, creates a table called \"employees\" with columns for employee ID, name, department, and salary, and inserts sample data into the table. The script should also include a function to query the database and return the average salary for a given department.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To create a Python script that connects to a MySQL database, you'll need to use the `mysql-connector-python` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install mysql-connector-python\n```\n\nOnce you have the package installed, you can proceed to write the script. Below is an example of how you can achieve this:\n\n```python\nimport mysql.connector\nfrom mysql.connector import Error\n\ndef create_connection(host_name, user_name, user_password, db_name):\n    connection = None\n    try:\n        connection = mysql.connector.connect(\n            host=host_name,\n            user=user_name,\n            passwd=user_password,\n            database=db_name\n        )\n        print(\"Connection to MySQL DB successful\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n    return connection\n\ndef execute_query(connection, query):\n    cursor = connection.cursor()\n    try:\n        cursor.execute(query)\n        connection.commit()\n        print(\"Query executed successfully\")\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef execute_read_query(connection, query):\n    cursor = connection.cursor()\n    result = None\n    try:\n        cursor.execute(query)\n        result = cursor.fetchall()\n        return result\n    except Error as e:\n        print(f\"The error '{e}' occurred\")\n\ndef create_employees_table(connection):\n    create_table_query = \"\"\"\n    CREATE TABLE IF NOT EXISTS employees (\n      id INT AUTO_INCREMENT,\n      name VARCHAR(255) NOT NULL,\n      department VARCHAR(255) NOT NULL,\n      salary DECIMAL(10, 2) NOT NULL,\n      PRIMARY KEY (id)\n    );\n    \"\"\"\n    execute_query(connection, create_table_query)\n\ndef insert_sample_data(connection):\n    sample_data = [\n        (\"John Doe\", \"HR\", 50000),\n        (\"Jane Smith\", \"Finance\", 60000),\n        (\"Alice Johnson\", \"IT\", 70000),\n        (\"Bob Brown\", \"HR\", 55000),\n        (\"Charlie Davis\", \"Finance\", 65000),\n        (\"David Wilson\", \"IT\", 75000)\n    ]\n    for data in sample_data:\n        insert_query = f\"\"\"\n        INSERT INTO employees (name, department, salary)\n        VALUES ('{data[0]}', '{data[1]}', {data[2]});\n        \"\"\"\n        execute_query(connection, insert_query)\n\ndef get_average_salary(connection, department):\n    query = f\"\"\"\n    SELECT AVG(salary) FROM employees WHERE department = '{department}';\n    \"\"\"\n    result = execute_read_query(connection, query)\n    if result:\n        return result[0][0]\n    else:\n        return None\n\ndef main():\n    # Replace these with your database credentials\n    host = \"localhost\"\n    user = \"your_username\"\n    password = \"your_password\"\n    database = \"your_database\"\n\n    connection = create_connection(host, user, password, database)\n\n    if connection is not None:\n        create_employees_table(connection)\n        insert_sample_data(connection)\n\n        department = \"HR\"\n        avg_salary = get_average_salary(connection, department)\n        if avg_salary is not None:\n            print(f\"The average salary in {department} is {avg_salary}\")\n        else:\n            print(f\"No data found for {department}\")\n\n        # Don't forget to close the connection when you're done\n        connection.close()\n    else:\n        print(\"Failed to connect to the database.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Database Connection**:\n   - The `create_connection` function establishes a connection to the MySQL database using the provided credentials.\n\n2. **Executing Queries**:\n   - The `execute_query` function is used to execute DDL and DML statements like creating tables and inserting data.\n   - The `execute_read_query` function is used to execute SELECT statements and fetch data from the database.\n\n3. **Creating the Employees Table**:\n   - The `create_employees_table` function creates a table named \"employees\" with columns for ID, name, department, and salary.\n\n4. **Inserting Sample Data**:\n   - The `insert_sample_data` function inserts sample employee data into the \"employees\" table.\n\n5. **Querying Average Salary**:\n   - The `get_average_salary` function calculates the average salary for a given department.\n\n6. **Main Function**:\n   - The `main` function orchestrates the process by connecting to the database, creating the table, inserting sample data, and querying the average salary for a specified department.\n\nMake sure to replace the placeholder values for `host`, `user`, `password`, and `database` with your actual database credentials.\n\nThis script provides a basic framework for interacting with a MySQL database using Python. You can expand upon this by adding more functions to handle different operations as needed."
    }
]