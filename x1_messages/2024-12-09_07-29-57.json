[
    {
        "role": "user",
        "content": "Using PowerShell, write a script that automates the process of creating new users in Active Directory. The script should take a CSV file as input, where each row represents a new user and columns represent user attributes. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a PowerShell script that automates the creation of new users in Active Directory based on a CSV input file. \n\n## Requirements\n- ActiveDirectory module installed and imported.\n- Appropriate permissions to create users in Active Directory.\n\n## Instructions\n1. Save the following script to a `.ps1` file, for example, `Create-ADUsers.ps1`.\n2. Prepare a CSV file with the required user attributes. The CSV should have headers corresponding to the properties you want to set for the new users.\n3. Run the script from a PowerShell prompt with the path to your CSV file.\n\n## Script\n\n```powershell\n# Import the ActiveDirectory module\nImport-Module ActiveDirectory\n\n# Define the path to the CSV file\n$csvPath = \"C:\\path\\to\\your\\users.csv\"\n\n# Read the CSV file\n$users = Import-Csv -Path $csvPath\n\n# Loop through each user in the CSV\nforeach ($user in $users) {\n    # Extract user properties\n    $username = $user.SamAccountName\n    $givenName = $user.GivenName\n    $surName = $user.Surname\n    $displayName = $user.DisplayName\n    $email = $user.EmailAddress\n    $password = $user.Password\n    $ouPath = $user.OUPath  # Distinguished Name of the OU where the user will be created\n\n    # Check if the user already exists\n    if (Get-ADUser -Filter \"SamAccountName -eq '$username'\") {\n        Write-Warning \"User '$username' already exists.\"\n        continue\n    }\n\n    # Create a new user\n    try {\n        New-ADUser `\n            -SamAccountName $username `\n            -GivenName $givenName `\n            -Surname $surName `\n            -DisplayName $displayName `\n            -EmailAddress $email `\n            -AccountPassword (ConvertTo-SecureString -AsPlainText $password -Force) `\n            -Path $ouPath `\n            -Enabled $true\n\n        Write-Host \"User '$username' created successfully.\" -ForegroundColor Green\n    } catch {\n        Write-Error \"Failed to create user '$username': $_\"\n    }\n}\n```\n\n## CSV Example\nYour CSV file (`users.csv`) should look something like this:\n\n```csv\nSamAccountName,GivenName,Surname,DisplayName,EmailAddress,Password,OUPath\njdoe,John,Doe,John Doe,jdoe@example.com,P@ssw0rd,OU=Users,DC=example,DC=com\njsmith,Jane,Smith,Jane Smith,jsmith@example.com,P@ssw0rd,OU=Users,DC=example,DC=com\n```\n\n## Notes\n- Ensure that the CSV file path is correct.\n- The `OUPath` should be the Distinguished Name (DN) of the Organizational Unit where the user accounts will be created.\n- User passwords are stored in plain text in the CSV for this example. In a production environment, consider more secure methods for handling passwords.\n- This script assumes that all required fields are present in the CSV. Adjust the script as necessary to handle optional fields or different property names."
    }
]