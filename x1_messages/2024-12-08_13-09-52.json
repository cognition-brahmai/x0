[
    {
        "role": "user",
        "content": "Implement a Java application that simulates a simple online store with products, customers, and orders. Use an object-oriented approach to model the different entities and their relationships. The application should support adding new products, registering customers, placing orders, and viewing order history for a specific customer.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a simple online store simulation in Java using an object-oriented approach involves creating classes to represent products, customers, and orders. Each of these classes will have their own attributes and methods to handle operations like adding products, registering customers, placing orders, and viewing order history.\n\n### Approach\n\n1. **Product Class**: This class will represent the products available in the store. Each product will have attributes like ID, name, price, and quantity.\n\n2. **Customer Class**: This class will represent the customers of the store. Each customer will have attributes like ID, name, and a list of orders.\n\n3. **Order Class**: This class will represent orders placed by customers. Each order will have an order ID, a list of products, the customer who placed the order, and the total cost.\n\n4. **Store Class**: This class will manage the overall operations of the store, including adding products, registering customers, placing orders, and viewing order history.\n\n5. **Main Class**: This will be the entry point of the application, providing a simple text-based interface to interact with the store.\n\n### Solution Code\n\n```java\nimport java.util.*;\n\nclass Product {\n    private String id;\n    private String name;\n    private double price;\n    private int quantity;\n\n    public Product(String id, String name, double price, int quantity) {\n        this.id = id;\n        this.name = name;\n        this.price = price;\n        this.quantity = quantity;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public double getPrice() {\n        return price;\n    }\n\n    public int getQuantity() {\n        return quantity;\n    }\n\n    public void setQuantity(int quantity) {\n        this.quantity = quantity;\n    }\n}\n\nclass Customer {\n    private String id;\n    private String name;\n    private List<Order> orders;\n\n    public Customer(String id, String name) {\n        this.id = id;\n        this.name = name;\n        this.orders = new ArrayList<>();\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public List<Order> getOrders() {\n        return orders;\n    }\n\n    public void addOrder(Order order) {\n        orders.add(order);\n    }\n}\n\nclass Order {\n    private String orderId;\n    private List<Product> products;\n    private Customer customer;\n    private double totalCost;\n\n    public Order(String orderId, Customer customer) {\n        this.orderId = orderId;\n        this.products = new ArrayList<>();\n        this.customer = customer;\n        this.totalCost = 0.0;\n    }\n\n    public String getOrderId() {\n        return orderId;\n    }\n\n    public List<Product> getProducts() {\n        return products;\n    }\n\n    public Customer getCustomer() {\n        return customer;\n    }\n\n    public double getTotalCost() {\n        return totalCost;\n    }\n\n    public void addProduct(Product product) {\n        products.add(product);\n        totalCost += product.getPrice();\n    }\n}\n\nclass Store {\n    private List<Product> products;\n    private List<Customer> customers;\n    private static int orderCounter = 1;\n\n    public Store() {\n        this.products = new ArrayList<>();\n        this.customers = new ArrayList<>();\n    }\n\n    public void addProduct(Product product) {\n        products.add(product);\n        System.out.println(\"Product added: \" + product.getName());\n    }\n\n    public void registerCustomer(Customer customer) {\n        customers.add(customer);\n        System.out.println(\"Customer registered: \" + customer.getName());\n    }\n\n    public Order placeOrder(Customer customer, List<Product> products) {\n        Order order = new Order(\"Order-\" + orderCounter++, customer);\n        for (Product product : products) {\n            if (product.getQuantity() > 0) {\n                order.addProduct(product);\n                product.setQuantity(product.getQuantity() - 1);\n            }\n        }\n        customer.addOrder(order);\n        System.out.println(\"Order placed: \" + order.getOrderId());\n        return order;\n    }\n\n    public List<Order> viewOrderHistory(Customer customer) {\n        return customer.getOrders();\n    }\n}\n\npublic class OnlineStore {\n    public static void main(String[] args) {\n        Store store = new Store();\n\n        // Adding products\n        store.addProduct(new Product(\"P001\", \"Laptop\", 1000.0, 10));\n        store.addProduct(new Product(\"P002\", \"Smartphone\", 500.0, 15));\n        store.addProduct(new Product(\"P003\", \"Tablet\", 300.0, 20));\n\n        // Registering customers\n        store.registerCustomer(new Customer(\"C001\", \"John Doe\"));\n        store.registerCustomer(new Customer(\"C002\", \"Jane Smith\"));\n\n        // Placing orders\n        Customer john = store.customers.get(0);\n        List<Product> johnOrderItems = new ArrayList<>();\n        johnOrderItems.add(store.products.get(0)); // Laptop\n        johnOrderItems.add(store.products.get(1)); // Smartphone\n        store.placeOrder(john, johnOrderItems);\n\n        Customer jane = store.customers.get(1);\n        List<Product> janeOrderItems = new ArrayList<>();\n        janeOrderItems.add(store.products.get(2)); // Tablet\n        store.placeOrder(jane, janeOrderItems);\n\n        // Viewing order history\n        List<Order> johnOrders = store.viewOrderHistory(john);\n        for (Order order : johnOrders) {\n            System.out.println(\"Order ID: \" + order.getOrderId() + \", Total Cost: \" + order.getTotalCost());\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Product Class**: Represents a product with ID, name, price, and quantity.\n2. **Customer Class**: Represents a customer with ID, name, and a list of orders.\n3. **Order Class**: Represents an order with order ID, list of products, customer, and total cost.\n4. **Store Class**: Manages products, customers, and orders. It provides methods to add products, register customers, place orders, and view order history.\n5. **OnlineStore Class**: The main class with a simple demonstration of adding products, registering customers, placing orders, and viewing order history.\n\nThis setup provides a basic structure for a simple online store simulation in Java, using object-oriented principles to model the different entities and their interactions."
    }
]