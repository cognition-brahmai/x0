[
    {
        "role": "user",
        "content": "Write a Python script that uses AWS S3 to upload, download, and list objects in a specified bucket. The script should handle authentication and error handling appropriately."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that interacts with AWS S3 to perform operations such as uploading, downloading, and listing objects in a specified bucket. This script uses the `boto3` library, which is the Amazon Web Services (AWS) SDK for Python.\n\nFirst, make sure you have `boto3` installed. You can install it using pip if you haven't already:\n\n```sh\npip install boto3\n```\n\nHere's the script:\n\n```python\nimport boto3\nfrom botocore.exceptions import NoCredentialsError, PartialCredentialsError, ClientError\n\n# Initialize a session using your credentials\nsession = boto3.Session(\n    aws_access_key_id='YOUR_ACCESS_KEY',\n    aws_secret_access_key='YOUR_SECRET_KEY',\n    region_name='YOUR_REGION'\n)\n\ns3 = session.resource('s3')\n\ndef upload_file(bucket_name, file_name, object_name=None):\n    \"\"\"Upload a file to an S3 bucket\n\n    :param bucket_name: Bucket to upload to\n    :param file_name: File to upload\n    :param object_name: S3 object name. If not specified, file_name is used\n    :return: True if file was uploaded, else False\n    \"\"\"\n    if object_name is None:\n        object_name = file_name\n\n    try:\n        response = s3.meta.client.upload_file(file_name, bucket_name, object_name)\n        print(f\"File {file_name} uploaded successfully to {bucket_name}/{object_name}\")\n        return True\n    except FileNotFoundError:\n        print(\"The file was not found\")\n        return False\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n        return False\n    except PartialCredentialsError:\n        print(\"Incomplete credentials provided\")\n        return False\n    except ClientError as e:\n        print(f\"An error occurred: {e}\")\n        return False\n\ndef download_file(bucket_name, object_name, file_name):\n    \"\"\"Download a file from an S3 bucket\n\n    :param bucket_name: Bucket to download from\n    :param object_name: S3 object name\n    :param file_name: File to save as\n    :return: True if file was downloaded, else False\n    \"\"\"\n    try:\n        s3.meta.client.download_file(bucket_name, object_name, file_name)\n        print(f\"File {object_name} downloaded successfully from {bucket_name} to {file_name}\")\n        return True\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n        return False\n    except PartialCredentialsError:\n        print(\"Incomplete credentials provided\")\n        return False\n    except ClientError as e:\n        if e.response['Error']['Code'] == \"404\":\n            print(\"The object does not exist.\")\n        else:\n            print(f\"An error occurred: {e}\")\n        return False\n\ndef list_objects(bucket_name):\n    \"\"\"List objects in an S3 bucket\n\n    :param bucket_name: Bucket to list objects from\n    :return: None\n    \"\"\"\n    try:\n        bucket = s3.Bucket(bucket_name)\n        for obj in bucket.objects.all():\n            print(obj.key)\n    except NoCredentialsError:\n        print(\"Credentials not available\")\n    except PartialCredentialsError:\n        print(\"Incomplete credentials provided\")\n    except ClientError as e:\n        print(f\"An error occurred: {e}\")\n\nif __name__ == \"__main__\":\n    # Example usage\n    bucket_name = 'your-bucket-name'\n\n    # Upload a file\n    upload_file(bucket_name, 'local_file.txt', 's3_object_name.txt')\n\n    # Download a file\n    download_file(bucket_name, 's3_object_name.txt', 'downloaded_file.txt')\n\n    # List objects in the bucket\n    list_objects(bucket_name)\n```\n\n### Explanation:\n1. **Initialization**:\n   - Set up a session with your AWS credentials and region.\n   - Create an S3 resource using the session.\n\n2. **Upload Function**:\n   - `upload_file`: Uploads a specified file to an S3 bucket.\n   - Handles exceptions like `FileNotFoundError`, `NoCredentialsError`, `PartialCredentialsError`, and general `ClientError`.\n\n3. **Download Function**:\n   - `download_file`: Downloads a specified object from an S3 bucket to a local file.\n   - Handles exceptions similar to the upload function and checks if the object exists.\n\n4. **List Objects Function**:\n   - `list_objects`: Lists all objects in a specified S3 bucket.\n   - Handles exceptions related to credentials and other client errors.\n\n5. **Main Block**:\n   - Provides example usage of the functions.\n\n### Notes:\n- Replace `'YOUR_ACCESS_KEY'`, `'YOUR_SECRET_KEY'`, and `'YOUR_REGION'` with your actual AWS credentials and region.\n- Ensure that the IAM user associated with the provided credentials has the necessary permissions to perform S3 operations (e.g., `s3:PutObject`, `s3:GetObject`, `s3:ListBucket`).\n- Handle credentials securely; consider using environment variables or AWS IAM roles for production code."
    }
]