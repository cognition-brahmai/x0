[
    {
        "role": "user",
        "content": "Write a Java program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and any given position in the list."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Java programming task! Let's dive into creating a singly linked list with methods to add elements at the beginning, end, and any specified position.\n\nFirst, let's understand what a singly linked list is. It's a linear data structure where each element (node) points to the next one, forming a sequence. The basic components are nodes, each containing data and a reference to the next node.\n\nWe'll need to define a class for the nodes and another for the linked list itself. Here's a step-by-step plan:\n\n1. **Node Class**: This will hold the data and a reference to the next node.\n2. **LinkedList Class**: This will manage the nodes, including methods to add at the beginning, end, and at a specific position.\n\nLet's start by defining the Node class.\n\n## Node Class\nThe Node class is straightforward. It has two main parts: the data and a reference to the next node.\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n```\n\n## LinkedList Class\nNow, for the LinkedList class, we need to handle the operations:\n\n- **Add at Beginning**: Insert a new node at the start of the list.\n- **Add at End**: Append a new node at the end of the list.\n- **Add at Position**: Insert a new node at a specified position.\n\nWe'll also need a private field to keep track of the head of the list.\n\n### Fields and Constructor\n```java\npublic class LinkedList {\n    private Node head;\n\n    public LinkedList() {\n        this.head = null;\n    }\n}\n```\n\n### Add at Beginning\nTo add a node at the beginning, we need to set the new node's next to the current head and update the head to the new node.\n\n```java\npublic void addAtBeginning(int data) {\n    Node newNode = new Node(data);\n    newNode.next = head;\n    head = newNode;\n}\n```\n\n### Add at End\nAdding at the end requires traversing the list to find the last node and setting its next to the new node.\n\n```java\npublic void addAtEnd(int data) {\n    Node newNode = new Node(data);\n    if (head == null) {\n        head = newNode;\n        return;\n    }\n    Node current = head;\n    while (current.next != null) {\n        current = current.next;\n    }\n    current.next = newNode;\n}\n```\n\n### Add at Position\nAdding at a specific position involves traversing to the position just before the desired index and inserting the new node there.\n\n```java\npublic void addAtPosition(int data, int position) {\n    Node newNode = new Node(data);\n    if (position == 0) {\n        newNode.next = head;\n        head = newNode;\n        return;\n    }\n    Node current = head;\n    for (int i = 0; i < position - 1; i++) {\n        if (current == null) {\n            throw new IndexOutOfBoundsException(\"Position out of bounds\");\n        }\n        current = current.next;\n    }\n    if (current == null) {\n        throw new IndexOutOfBoundsException(\"Position out of bounds\");\n    }\n    newNode.next = current.next;\n    current.next = newNode;\n}\n```\n\n### Example Usage\nTo see this in action, let's create a main method to test these operations.\n\n```java\npublic static void main(String[] args) {\n    LinkedList list = new LinkedList();\n    \n    list.addAtBeginning(3);\n    list.addAtBeginning(2);\n    list.addAtEnd(4);\n    list.addAtPosition(5, 2);\n    \n    // Assuming you have a method to print the list\n    list.printList(); // Output should be: 2 -> 3 -> 5 -> 4\n}\n```\n\n### Helper Method: printList\nTo visualize the list, let's add a print method.\n\n```java\npublic void printList() {\n    Node current = head;\n    while (current != null) {\n        System.out.print(current.data + \" -> \");\n        current = current.next;\n    }\n    System.out.println(\"null\");\n}\n```\n\n## Full Code\nPutting it all together:\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class LinkedList {\n    private Node head;\n\n    public LinkedList() {\n        this.head = null;\n    }\n\n    public void addAtBeginning(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n    }\n\n    public void addAtEnd(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n\n    public void addAtPosition(int data, int position) {\n        Node newNode = new Node(data);\n        if (position == 0) {\n            newNode.next = head;\n            head = newNode;\n            return;\n        }\n        Node current = head;\n        for (int i = 0; i < position - 1; i++) {\n            if (current == null) {\n                throw new IndexOutOfBoundsException(\"Position out of bounds\");\n            }\n            current = current.next;\n        }\n        if (current == null) {\n            throw new IndexOutOfBoundsException(\"Position out of bounds\");\n        }\n        newNode.next = current.next;\n        current.next = newNode;\n    }\n\n    public void printList() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        LinkedList list = new LinkedList();\n        \n        list.addAtBeginning(3);\n        list.addAtBeginning(2);\n        list.addAtEnd(4);\n        list.addAtPosition(5, 2);\n        \n        list.printList(); // Output: 2 -> 3 -> 5 -> 4 -> null\n    }\n}\n```\n\nThis code defines a simple singly linked list with methods to add nodes at the beginning, end, and at a specific position. The `printList` method helps visualize the list's contents. You can extend this class with more methods like deletion, searching, etc., as per your requirements."
    }
]