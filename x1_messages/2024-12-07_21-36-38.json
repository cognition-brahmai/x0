[
    {
        "role": "user",
        "content": "Create a C# console application that simulates a basic banking system. Define classes for customers, accounts, and transactions. Implement methods for depositing, withdrawing, and transferring funds between accounts. Use exception handling to prevent invalid operations such as overdrawing an account or transferring negative amounts.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to try to create a simple banking system using C#. I need to define classes for customers, accounts, and transactions. Also, I have to implement methods for depositing, withdrawing, and transferring funds between accounts. And, importantly, I need to use exception handling to make sure that operations like overdrawing an account or transferring negative amounts don't happen.\n\nFirst, I need to think about the structure of the program. I should probably start by defining the classes. Let's see:\n\n1. **Customer Class**: This should hold information about the customer, like their name and maybe an ID or something.\n\n2. **Account Class**: This will represent a bank account. It should have a balance, and be associated with a customer. It should have methods for depositing and withdrawing money.\n\n3. **Transaction Class**: This might be used to represent individual transactions, like deposits or withdrawals. Not sure yet if I need a separate class for this, but maybe it's a good idea for tracking transaction history.\n\nAlso, I need to think about how to handle exceptions. In C#, I can use try-catch blocks to handle errors. So, if someone tries to withdraw more money than they have, I should throw an exception saying something like \"Insufficient funds.\"\n\nLet me start by sketching out the Customer class.\n\n## Final Solution\nTo create a basic banking system simulation in C#, we need to model customers, their accounts, and the transactions between these accounts. This system will include functionalities for depositing, withdrawing, and transferring funds while ensuring that operations like overdrawing or transferring negative amounts are prevented through exception handling.\n\n### Approach\n\n1. **Customer Class**: Represents bank customers with an ID and name.\n2. **Account Class**: Manages bank accounts associated with customers, including balance tracking and transaction methods like deposit, withdraw, and transfer.\n3. **Transaction Related Logic**: Implemented within the Account class to handle deposit, withdrawal, and transfers with necessary validations.\n\n### Solution Code\n\n```csharp\nusing System;\nusing System.Collections.Generic;\n\nnamespace BankingSystem\n{\n    // Customer class to hold customer details\n    public class Customer\n    {\n        public int Id { get; set; }\n        public string Name { get; set; }\n\n        public Customer(int id, string name)\n        {\n            Id = id;\n            Name = name;\n        }\n    }\n\n    // Account class to represent bank accounts\n    public class Account\n    {\n        private decimal balance;\n        public int AccountNumber { get; private set; }\n        public Customer Owner { get; private set; }\n\n        public Account(int accountNumber, Customer owner)\n        {\n            AccountNumber = accountNumber;\n            Owner = owner;\n            balance = 0;\n        }\n\n        // Deposit method\n        public void Deposit(decimal amount)\n        {\n            if (amount < 0)\n            {\n                throw new ArgumentException(\"Deposit amount cannot be negative.\");\n            }\n            balance += amount;\n            Console.WriteLine($\"Deposited {amount:C} into account {AccountNumber}. New balance: {balance:C}\");\n        }\n\n        // Withdraw method\n        public void Withdraw(decimal amount)\n        {\n            if (amount < 0)\n            {\n                throw new ArgumentException(\"Withdrawal amount cannot be negative.\");\n            }\n            if (balance < amount)\n            {\n                throw new InvalidOperationException(\"Insufficient funds.\");\n            }\n            balance -= amount;\n            Console.WriteLine($\"Withdrew {amount:C} from account {AccountNumber}. New balance: {balance:C}\");\n        }\n\n        // Transfer method\n        public void Transfer(Account toAccount, decimal amount)\n        {\n            if (amount < 0)\n            {\n                throw new ArgumentException(\"Transfer amount cannot be negative.\");\n            }\n            if (balance < amount)\n            {\n                throw new InvalidOperationException(\"Insufficient funds for transfer.\");\n            }\n            Withdraw(amount);\n            toAccount.Deposit(amount);\n            Console.WriteLine($\"Transferred {amount:C} from account {AccountNumber} to account {toAccount.AccountNumber}.\");\n        }\n\n        // Get current balance\n        public decimal GetBalance()\n        {\n            return balance;\n        }\n    }\n\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            // Create customers\n            Customer customer1 = new Customer(1, \"Alice\");\n            Customer customer2 = new Customer(2, \"Bob\");\n\n            // Create accounts\n            Account account1 = new Account(101, customer1);\n            Account account2 = new Account(102, customer2);\n\n            try\n            {\n                // Deposit operations\n                account1.Deposit(1000);\n                account2.Deposit(500);\n\n                // Withdraw operation\n                account1.Withdraw(200);\n\n                // Transfer operation\n                account1.Transfer(account2, 300);\n\n                // Check balances\n                Console.WriteLine($\"Account {account1.AccountNumber} balance: {account1.GetBalance():C}\");\n                Console.WriteLine($\"Account {account2.AccountNumber} balance: {account2.GetBalance():C}\");\n\n                // Attempt to overdraw\n                account2.Withdraw(1000);\n            }\n            catch (Exception ex)\n            {\n                Console.WriteLine($\"Error: {ex.Message}\");\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Customer Class**: \n   - Holds the customer's ID and name.\n   \n2. **Account Class**:\n   - Manages the account's balance, associated customer, and account number.\n   - Provides methods for depositing, withdrawing, and transferring funds.\n   - Includes exception handling to prevent invalid operations such as negative deposits or withdrawals, and insufficient funds.\n\n3. **Program Class**:\n   - Demonstrates the creation of customers and accounts.\n   - Performs deposit, withdrawal, and transfer operations.\n   - Handles and displays any exceptions that occur during these operations.\n\nThis basic banking system ensures that all transactions are handled safely and that invalid operations are appropriately managed through exceptions."
    }
]