[
    {
        "role": "user",
        "content": "Write a C++ program that reads a text file containing a list of integers, sorts them in ascending order using the merge sort algorithm, and writes the sorted numbers back to a new text file. The program should handle errors such as missing input files or invalid content gracefully."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's break down the task into smaller steps to make it easier to understand and implement.\n\n### Steps to Complete the Task\n\n1. **Read the Input File:**\n   - Open the specified text file.\n   - Read the list of integers from the file.\n   - Handle cases where the file might not exist or contains invalid data.\n\n2. **Implement Merge Sort:**\n   - Write a function to perform merge sort on the list of integers.\n   - Merge sort works by dividing the list into two halves, sorting each half, and then merging them back together.\n\n3. **Write the Sorted List to a New File:**\n   - Create a new text file to store the sorted integers.\n   - Write the sorted list to this file.\n\n4. **Handle Errors Gracefully:**\n   - Manage exceptions or errors that might occur during file operations or data processing.\n   - Provide user-friendly error messages.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n\n// Function to merge two subarrays of arr[].\n// First subarray is arr[l..m]\n// Second subarray is arr[m+1..r]\nvoid merge(std::vector<int>& arr, int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n\n    // Create temp arrays\n    std::vector<int> L(n1), R(n2);\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[m + 1 + j];\n\n    // Merge the temp arrays back into arr[l..r]\n    int i = 0, j = 0, k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    // Copy the remaining elements of L[], if there are any\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    // Copy the remaining elements of R[], if there are any\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\n// l is for left index and r is right index of the sub-array of arr to be sorted\nvoid mergeSort(std::vector<int>& arr, int l, int r) {\n    if (l >= r) {\n        return; // Returns recursively\n    }\n    int m = l + (r - l) / 2;\n    mergeSort(arr, l, m);\n    mergeSort(arr, m + 1, r);\n    merge(arr, l, m, r);\n}\n\n// Function to read integers from a file\nstd::vector<int> readIntegersFromFile(const std::string& filename) {\n    std::vector<int> numbers;\n    std::ifstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file: \" << filename << std::endl;\n        return numbers;\n    }\n\n    int num;\n    while (file >> num) {\n        numbers.push_back(num);\n    }\n\n    file.close();\n    return numbers;\n}\n\n// Function to write integers to a file\nvoid writeIntegersToFile(const std::vector<int>& numbers, const std::string& filename) {\n    std::ofstream file(filename);\n    if (!file.is_open()) {\n        std::cerr << \"Error opening file for writing: \" << filename << std::endl;\n        return;\n    }\n\n    for (int num : numbers) {\n        file << num << std::endl;\n    }\n\n    file.close();\n}\n\nint main() {\n    std::string inputFilename;\n    std::cout << \"Enter the input filename: \";\n    std::cin >> inputFilename;\n\n    std::vector<int> numbers = readIntegersFromFile(inputFilename);\n    if (numbers.empty()) {\n        std::cerr << \"No numbers read from the file.\" << std::endl;\n        return 1;\n    }\n\n    // Perform merge sort\n    mergeSort(numbers, 0, numbers.size() - 1);\n\n    // Write sorted numbers to a new file\n    std::string outputFilename = \"sorted_\" + inputFilename;\n    writeIntegersToFile(numbers, outputFilename);\n\n    std::cout << \"Sorted numbers have been written to \" << outputFilename << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Reading the Input File:**\n   - The `readIntegersFromFile` function attempts to open the specified file and reads integers line by line.\n   - If the file cannot be opened, an error message is printed, and an empty vector is returned.\n\n2. **Merge Sort Implementation:**\n   - The `mergeSort` function recursively divides the array into two halves until each sub-array contains a single element.\n   - The `merge` function combines these sub-arrays in sorted order.\n\n3. **Writing the Sorted List:**\n   - The `writeIntegersToFile` function creates a new file with the sorted numbers.\n   - If the file cannot be opened for writing, an error message is printed.\n\n4. **Error Handling:**\n   - The program checks if the input file was read successfully and if any numbers were read.\n   - Appropriate error messages are displayed for file operation failures.\n\nThis approach ensures that the program handles various edge cases and errors gracefully while performing the required tasks efficiently."
    }
]