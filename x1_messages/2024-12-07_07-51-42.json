[
    {
        "role": "user",
        "content": "Implement a linked list data structure in C. Your implementation should include functions for adding elements at both ends of the list, deleting elements, searching for elements, and displaying all elements of the list."
    },
    {
        "role": "assistant",
        "content": "Implementing a linked list in C involves creating structures to represent the nodes of the list and functions to manipulate these nodes. Below is a step-by-step guide to implementing a singly linked list with the specified functionalities: adding elements at both ends, deleting elements, searching for elements, and displaying all elements.\n\n### Step 1: Define the Node Structure\n\nFirst, define a structure for the nodes of the linked list. Each node should contain the data and a pointer to the next node.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n```\n\n### Step 2: Function to Add Elements at the Beginning\n\nCreate a function to add a new element at the beginning of the list.\n\n```c\nvoid insertAtBeginning(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = *head;\n    *head = newNode;\n}\n```\n\n### Step 3: Function to Add Elements at the End\n\nCreate a function to add a new element at the end of the list.\n\n```c\nvoid insertAtEnd(struct Node** head, int value) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = value;\n    newNode->next = NULL;\n\n    if (*head == NULL) {\n        *head = newNode;\n        return;\n    }\n\n    struct Node* last = *head;\n    while (last->next != NULL) {\n        last = last->next;\n    }\n    last->next = newNode;\n}\n```\n\n### Step 4: Function to Delete an Element\n\nCreate a function to delete a specific element from the list.\n\n```c\nvoid deleteElement(struct Node** head, int key) {\n    struct Node* temp = *head;\n    struct Node* prev = NULL;\n\n    if (temp != NULL && temp->data == key) {\n        *head = temp->next;\n        free(temp);\n        return;\n    }\n\n    while (temp != NULL && temp->data != key) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == NULL) return;\n\n    prev->next = temp->next;\n    free(temp);\n}\n```\n\n### Step 5: Function to Search for an Element\n\nCreate a function to search for an element in the list and return its position.\n\n```c\nint searchElement(struct Node* head, int key) {\n    struct Node* current = head;\n    int position = 1;\n\n    while (current != NULL) {\n        if (current->data == key) {\n            return position;\n        }\n        current = current->next;\n        position++;\n    }\n    return -1; // Element not found\n}\n```\n\n### Step 6: Function to Display the List\n\nCreate a function to display all elements of the list.\n\n```c\nvoid displayList(struct Node* head) {\n    struct Node* current = head;\n    while (current != NULL) {\n        printf(\"%d -> \", current->data);\n        current = current->next;\n    }\n    printf(\"NULL\\n\");\n}\n```\n\n### Step 7: Main Function\n\nFinally, implement the main function to test the above functions.\n\n```c\nint main() {\n    struct Node* head = NULL;\n\n    insertAtEnd(&head, 1);\n    insertAtEnd(&head, 2);\n    insertAtEnd(&head, 3);\n    insertAtBeginning(&head, 0);\n\n    printf(\"List after insertions:\\n\");\n    displayList(head);\n\n    int key = 2;\n    int position = searchElement(head, key);\n    if (position != -1) {\n        printf(\"%d is at position %d\\n\", key, position);\n    } else {\n        printf(\"%d not found\\n\", key);\n    }\n\n    deleteElement(&head, key);\n    printf(\"List after deletion:\\n\");\n    displayList(head);\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Defines the basic unit of the linked list with `data` and `next` pointer.\n2. **Insert at Beginning**: Adds a new node at the start by updating the head pointer.\n3. **Insert at End**: Traverses the list to find the last node and appends a new node.\n4. **Delete Element**: Searches for the element and removes it by adjusting pointers.\n5. **Search Element**: Traverses the list to find the position of the element.\n6. **Display List**: Prints all elements from the head to the end.\n\nThis implementation covers the basic operations needed for a singly linked list in C."
    }
]