[
    {
        "role": "user",
        "content": "Develop a Python script that connects to an Elasticsearch instance, creates an index with custom mappings, and inserts sample data into the index. The script should also be able to query the data based on specific criteria provided by the user.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python script that interacts with an Elasticsearch instance. We'll cover connecting to Elasticsearch, creating an index with custom mappings, inserting sample data, and querying the data based on user-provided criteria.\n\n### Prerequisites\n\n1. **Elasticsearch installed and running**: Ensure you have Elasticsearch installed and running on your machine or have access to an Elasticsearch instance. For local setup, you can download it from [Elasticsearch official website](https://www.elastic.co/downloads/elasticsearch).\n\n2. **Python and Elasticsearch library**: Make sure Python is installed on your system. You'll also need the `elasticsearch` library, which you can install using pip:\n\n    ```bash\n    pip install elasticsearch\n    ```\n\n### Step 1: Connecting to Elasticsearch\n\nFirst, you need to connect to your Elasticsearch instance. Assuming it's running locally on the default port, the connection code would look like this:\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Connect to the local Elasticsearch instance\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\n# Check if the connection is successful\nif not es.ping():\n    print(\"Elasticsearch is not running or not accessible.\")\nelse:\n    print(\"Connected to Elasticsearch!\")\n```\n\n### Step 2: Creating an Index with Custom Mappings\n\nNext, you'll create an index with custom mappings. Mappings define the schema for your documents in the index.\n\n```python\nindex_name = 'sample_index'\n\n# Define mappings\nmapping = {\n    \"mappings\": {\n        \"properties\": {\n            \"title\": {\"type\": \"text\"},\n            \"content\": {\"type\": \"text\"},\n            \"author\": {\"type\": \"keyword\"},\n            \"publish_date\": {\"type\": \"date\"}\n        }\n    }\n}\n\n# Create the index with mappings\nif not es.indices.exists(index=index_name):\n    es.indices.create(index=index_name, body=mapping)\n    print(f\"Index '{index_name}' created.\")\nelse:\n    print(f\"Index '{index_name}' already exists.\")\n```\n\n### Step 3: Inserting Sample Data\n\nNow, let's insert some sample data into the index.\n\n```python\n# Sample documents\ndocs = [\n    {\n        \"title\": \"First Document\",\n        \"content\": \"This is the first document.\",\n        \"author\": \"John Doe\",\n        \"publish_date\": \"2023-01-01\"\n    },\n    {\n        \"title\": \"Second Document\",\n        \"content\": \"This is the second document.\",\n        \"author\": \"Jane Doe\",\n        \"publish_date\": \"2023-02-01\"\n    },\n    {\n        \"title\": \"Third Document\",\n        \"content\": \"This is the third document.\",\n        \"author\": \"John Doe\",\n        \"publish_date\": \"2023-03-01\"\n    }\n]\n\n# Insert documents\nfor doc in docs:\n    res = es.index(index=index_name, document=doc)\n    print(f\"Document inserted with ID: {res['_id']}\")\n```\n\n### Step 4: Querying Data Based on User Criteria\n\nFinally, we'll create a function to query the data based on user-provided criteria.\n\n```python\ndef query_data():\n    print(\"Enter your search criteria:\")\n    print(\"1. Search by author\")\n    print(\"2. Search by publish date\")\n    print(\"3. Search by keyword in content\")\n    choice = input(\"Enter your choice (1/2/3): \")\n\n    if choice == '1':\n        author = input(\"Enter author name: \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"author\": author\n                }\n            }\n        }\n    elif choice == '2':\n        date = input(\"Enter publish date (YYYY-MM-DD): \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"publish_date\": date\n                }\n            }\n        }\n    elif choice == '3':\n        keyword = input(\"Enter keyword to search in content: \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"content\": keyword\n                }\n            }\n        }\n    else:\n        print(\"Invalid choice.\")\n        return\n\n    # Execute the search\n    res = es.search(index=index_name, body=query)\n    print(f\"Found {res['hits']['total']['value']} document(s):\")\n    for hit in res['hits']['hits']:\n        print(hit[\"_source\"])\n\n# Call the function\nquery_data()\n```\n\n### Full Script\n\nHere's the complete script combining all the steps:\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Connect to the local Elasticsearch instance\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\n# Check if the connection is successful\nif not es.ping():\n    print(\"Elasticsearch is not running or not accessible.\")\nelse:\n    print(\"Connected to Elasticsearch!\")\n\nindex_name = 'sample_index'\n\n# Define mappings\nmapping = {\n    \"mappings\": {\n        \"properties\": {\n            \"title\": {\"type\": \"text\"},\n            \"content\": {\"type\": \"text\"},\n            \"author\": {\"type\": \"keyword\"},\n            \"publish_date\": {\"type\": \"date\"}\n        }\n    }\n}\n\n# Create the index with mappings\nif not es.indices.exists(index=index_name):\n    es.indices.create(index=index_name, body=mapping)\n    print(f\"Index '{index_name}' created.\")\nelse:\n    print(f\"Index '{index_name}' already exists.\")\n\n# Sample documents\ndocs = [\n    {\n        \"title\": \"First Document\",\n        \"content\": \"This is the first document.\",\n        \"author\": \"John Doe\",\n        \"publish_date\": \"2023-01-01\"\n    },\n    {\n        \"title\": \"Second Document\",\n        \"content\": \"This is the second document.\",\n        \"author\": \"Jane Doe\",\n        \"publish_date\": \"2023-02-01\"\n    },\n    {\n        \"title\": \"Third Document\",\n        \"content\": \"This is the third document.\",\n        \"author\": \"John Doe\",\n        \"publish_date\": \"2023-03-01\"\n    }\n]\n\n# Insert documents\nfor doc in docs:\n    res = es.index(index=index_name, document=doc)\n    print(f\"Document inserted with ID: {res['_id']}\")\n\ndef query_data():\n    print(\"Enter your search criteria:\")\n    print(\"1. Search by author\")\n    print(\"2. Search by publish date\")\n    print(\"3. Search by keyword in content\")\n    choice = input(\"Enter your choice (1/2/3): \")\n\n    if choice == '1':\n        author = input(\"Enter author name: \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"author\": author\n                }\n            }\n        }\n    elif choice == '2':\n        date = input(\"Enter publish date (YYYY-MM-DD): \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"publish_date\": date\n                }\n            }\n        }\n    elif choice == '3':\n        keyword = input(\"Enter keyword to search in content: \")\n        query = {\n            \"query\": {\n                \"match\": {\n                    \"content\": keyword\n                }\n            }\n        }\n    else:\n        print(\"Invalid choice.\")\n        return\n\n    # Execute the search\n    res = es.search(index=index_name, body=query)\n    print(f\"Found {res['hits']['total']['value']} document(s):\")\n    for hit in res['hits']['hits']:\n        print(hit[\"_source\"])\n\n# Call the function\nquery_data()\n```\n\n### Explanation\n\n1. **Connection**: The script connects to an Elasticsearch instance running on `localhost` at port `9200`.\n\n2. **Index Creation**: It checks if an index named `sample_index` exists. If not, it creates the index with specified mappings for fields like `title`, `content`, `author`, and `publish_date`.\n\n3. **Data Insertion**: Sample documents are inserted into the index.\n\n4. **Querying Data**: The script provides a simple menu for the user to choose search criteria (by author, publish date, or keyword in content). Based on the choice, it constructs a query and searches the index, displaying the results.\n\nThis script should give you a good starting point for interacting with Elasticsearch using Python. You can expand upon this by adding more features, handling exceptions, and improving the user interface as needed."
    }
]