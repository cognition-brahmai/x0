[
    {
        "role": "user",
        "content": "Create a Python script that reads a text file line by line and prints out the lines containing a specified keyword.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To create a Python script that reads a text file line by line and prints out the lines containing a specified keyword, you can follow these steps:\n\n1. **Open the file**: Use Python's built-in `open()` function to open the text file in read mode.\n\n2. **Read the file line by line**: Use a loop to read each line one by one.\n\n3. **Check for the keyword**: For each line, check if the keyword is present.\n\n4. **Print the matching lines**: If the keyword is found in a line, print that line.\n\nHere's a simple example to illustrate this:\n\n```python\ndef find_lines_with_keyword(file_path, keyword):\n    try:\n        # Open the file in read mode\n        with open(file_path, 'r') as file:\n            # Read and print lines containing the keyword\n            for line in file:\n                if keyword in line:\n                    print(line.strip())  # strip() removes any leading/trailing whitespace\n    except FileNotFoundError:\n        print(f\"File not found: {file_path}\")\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n\n# Example usage\nfile_path = 'example.txt'  # Replace with your file path\nkeyword = 'Python'  # Replace with your keyword\nfind_lines_with_keyword(file_path, keyword)\n```\n\n### Explanation:\n\n1. **Function Definition**: The function `find_lines_with_keyword` takes two parameters: `file_path` (the path to the text file) and `keyword` (the word to search for in the file).\n\n2. **File Handling**: The `with open(file_path, 'r') as file:` statement opens the file and ensures it gets closed after the block of code is executed. This is a good practice to avoid resource leaks.\n\n3. **Reading Lines**: The `for line in file:` loop iterates over each line in the file.\n\n4. **Checking for Keyword**: The `if keyword in line:` condition checks if the keyword is present in the current line.\n\n5. **Printing Matching Lines**: If the keyword is found, `print(line.strip())` prints the line, stripping any extra whitespace.\n\n6. **Error Handling**: The `try-except` block handles potential errors, such as the file not being found or other I/O errors.\n\nYou can modify this script according to your needs, such as writing the matching lines to another file instead of printing them, or making the search case-insensitive by converting both the line and the keyword to lowercase."
    }
]