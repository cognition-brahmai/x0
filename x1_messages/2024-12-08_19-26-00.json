[
    {
        "role": "user",
        "content": "Implement a binary search algorithm in JavaScript or TypeScript that takes an array of integers and a target integer as input, and returns the index of the target integer if found, or -1 if not found.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a binary search algorithm in JavaScript or TypeScript involves several key steps. Binary search is an efficient algorithm for finding an item from a sorted list of items. It works by repeatedly dividing in half the portion of the list that could contain the item, until you've narrowed down the possible locations to just one.\n\n### Explanation of Binary Search\n\n1. **Sorted Array Requirement**: Binary search requires the array to be sorted. If the array isn't sorted, the algorithm won't work correctly.\n  \n2. **Midpoint Calculation**: At each step, the algorithm calculates the midpoint of the current segment of the array.\n\n3. **Comparison**:\n   - If the midpoint element is equal to the target, the search is successful, and the index is returned.\n   - If the target is less than the midpoint element, the search continues on the left half of the array.\n   - If the target is greater than the midpoint element, the search continues on the right half of the array.\n\n4. **Termination**: The process repeats until the target is found or the segment being viewed is empty (i.e., the starting index is greater than the ending index).\n\n### Solution Code in JavaScript\n\n```javascript\nfunction binarySearch(arr, target) {\n    let start = 0;\n    let end = arr.length - 1;\n    \n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return -1;\n}\n\n// Example usage:\nconst sortedArray = [1, 3, 5, 7, 9];\nconsole.log(binarySearch(sortedArray, 5)); // Output: 2\nconsole.log(binarySearch(sortedArray, 2)); // Output: -1\n```\n\n### Solution Code in TypeScript\n\n```typescript\nfunction binarySearch(arr: number[], target: number): number {\n    let start = 0;\n    let end = arr.length - 1;\n    \n    while (start <= end) {\n        let mid = Math.floor((start + end) / 2);\n        if (arr[mid] === target) {\n            return mid;\n        } else if (arr[mid] < target) {\n            start = mid + 1;\n        } else {\n            end = mid - 1;\n        }\n    }\n    return -1;\n}\n\n// Example usage:\nconst sortedArray: number[] = [1, 3, 5, 7, 9];\nconsole.log(binarySearch(sortedArray, 5)); // Output: 2\nconsole.log(binarySearch(sortedArray, 2)); // Output: -1\n```\n\n### Explanation of the Code\n\n1. **Initialization**:\n   - `start` is set to the beginning of the array (index 0).\n   - `end` is set to the end of the array (index `arr.length - 1`).\n\n2. **Loop Condition**:\n   - The loop runs as long as `start` is less than or equal to `end`.\n\n3. **Midpoint Calculation**:\n   - `mid` is calculated as the floor of the average of `start` and `end`.\n\n4. **Comparison and Adjustment**:\n   - If `arr[mid]` is equal to `target`, return `mid`.\n   - If `arr[mid]` is less than `target`, adjust `start` to `mid + 1`.\n   - If `arr[mid]` is greater than `target`, adjust `end` to `mid - 1`.\n\n5. **Termination**:\n   - If the target is not found after the loop, return -1.\n\nThis implementation ensures that the search space is halved in each iteration, leading to a time complexity of O(log n), which is very efficient for large datasets."
    }
]