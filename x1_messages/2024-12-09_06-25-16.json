[
    {
        "role": "user",
        "content": "Implement a simple chat application using WebSocket protocol in Python. The server should accept multiple clients simultaneously, broadcast messages received from any client to all connected clients, and handle disconnections gracefully. Clients should be able to send and receive messages through a basic command-line interface."
    },
    {
        "role": "assistant",
        "content": "To create a simple chat application using WebSocket protocol in Python, we can use the `websockets` library for handling WebSocket connections and the `asyncio` library for asynchronous programming. Here's a step-by-step guide to implementing both the server and the client components.\n\n### Server Implementation\n\n1. **Install Required Libraries:**\n   Ensure you have the `websockets` library installed. You can install it using pip if you haven't already:\n   ```bash\n   pip install websockets\n   ```\n\n2. **Create the Server Script:**\n   Create a Python script for the server, e.g., `chat_server.py`.\n\n3. **Implement the Server:**\n   The server will handle multiple clients simultaneously, broadcast messages to all connected clients, and manage disconnections.\n\n   ```python\n   import asyncio\n   import websockets\n\n   # Set to hold connected clients\n   connected_clients = set()\n\n   async def broadcast(message):\n       if connected_clients:\n           await asyncio.wait([client.send(message) for client in connected_clients])\n\n   async def handler(websocket, path):\n       # Add client to the connected set\n       connected_clients.add(websocket)\n       try:\n           async for message in websocket:\n               print(f\"Received message: {message}\")\n               # Broadcast the message to all clients\n               await broadcast(message)\n       finally:\n           # Remove client from the set upon disconnection\n           connected_clients.remove(websocket)\n\n   start_server = websockets.serve(handler, \"localhost\", 6789)\n\n   if __name__ == \"__main__\":\n       asyncio.get_event_loop().run_until_complete(start_server)\n       asyncio.get_event_loop().run_forever()\n   ```\n\n   - **Explanation:**\n     - `connected_clients` is a set that holds all connected WebSocket clients.\n     - `broadcast` is an asynchronous function that sends a message to all connected clients.\n     - `handler` is the main function that handles each client connection. It adds the client to the set, listens for messages, broadcasts any received messages, and removes the client from the set upon disconnection.\n\n### Client Implementation\n\n1. **Create the Client Script:**\n   Create another Python script for the client, e.g., `chat_client.py`.\n\n2. **Implement the Client:**\n   The client will connect to the server, send messages, and receive messages through a command-line interface.\n\n   ```python\n   import asyncio\n   import websockets\n   import sys\n\n   async def client():\n       uri = \"ws://localhost:6789\"\n       async with websockets.connect(uri) as websocket:\n           # Start two tasks: one for sending messages, another for receiving\n           consumer_task = asyncio.create_task(receive_messages(websocket))\n           producer_task = asyncio.create_task(send_messages(websocket))\n           done, pending = await asyncio.wait(\n               [consumer_task, producer_task],\n               return_when=asyncio.FIRST_COMPLETED,\n           )\n           for task in pending:\n               task.cancel()\n\n   async def receive_messages(websocket):\n       try:\n           while True:\n               message = await websocket.recv()\n               print(f\"Received: {message}\")\n       except websockets.exceptions.ConnectionClosed:\n           print(\"Connection closed.\")\n       except Exception as e:\n           print(f\"An error occurred: {e}\")\n\n   async def send_messages(websocket):\n       try:\n           while True:\n               message = input(\"Enter message: \")\n               await websocket.send(message)\n       except websockets.exceptions.ConnectionClosed:\n           print(\"Connection closed.\")\n       except Exception as e:\n           print(f\"An error occurred: {e}\")\n\n   if __name__ == \"__main__\":\n       asyncio.run(client())\n   ```\n\n   - **Explanation:**\n     - The client connects to the server at `ws://localhost:6789`.\n     - Two asynchronous tasks are created: one for sending messages (`send_messages`) and one for receiving messages (`receive_messages`).\n     - The `receive_messages` function listens for messages from the server and prints them.\n     - The `send_messages` function reads user input and sends it to the server.\n\n### Running the Application\n\n1. **Start the Server:**\n   Run the server script:\n   ```bash\n   python chat_server.py\n   ```\n\n2. **Start Multiple Clients:**\n   Open multiple terminal windows and run the client script in each:\n   ```bash\n   python chat_client.py\n   ```\n\n3. **Interact:**\n   Type messages in any client window, and they should be broadcasted to all connected clients.\n\nThis setup provides a basic chat application where multiple clients can connect, send messages, and receive messages from other clients through a WebSocket server."
    }
]