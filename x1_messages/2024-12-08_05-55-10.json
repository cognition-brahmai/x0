[
    {
        "role": "user",
        "content": "Implement a stack data structure in C++ with the following methods: push, pop, top, and is_empty. The stack should be implemented using an array.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Implementing a stack data structure in C++ using an array is a great way to understand both data structures and programming fundamentals. I'll guide you through the process step by step.\n\nFirst, let's understand what a stack is. A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed.\n\nIn C++, we can implement a stack using an array by defining a class that manages the array and provides the necessary methods: push, pop, top, and is_empty.\n\nHere's a basic outline of what we'll do:\n\n1. **Define the Stack Class**: This class will have private members to store the array and the current size of the stack.\n\n2. **Push Method**: Adds an element to the top of the stack.\n\n3. **Pop Method**: Removes the top element from the stack.\n\n4. **Top Method**: Returns the top element without removing it.\n\n5. **Is_Empty Method**: Checks if the stack is empty.\n\nWe also need to handle potential errors, such as pushing elements beyond the array's capacity or popping from an empty stack.\n\nLet's start by defining the class and its private members.\n\n## Final Solution\nTo implement a stack data structure in C++ using an array, we can create a class that manages the array and provides the necessary methods: `push`, `pop`, `top`, and `is_empty`. Below is a complete implementation:\n\n```cpp\n#include <iostream>\n#include <stdexcept> // For std::out_of_range\n\nclass Stack {\nprivate:\n    static const int MAX_SIZE = 100; // Define a maximum size for the stack\n    int arr[MAX_SIZE];\n    int top_idx;\n\npublic:\n    Stack() : top_idx(-1) {} // Constructor initializes top index to -1\n\n    void push(int value) {\n        if (top_idx >= MAX_SIZE - 1) {\n            throw std::out_of_range(\"Stack overflow\");\n        }\n        arr[++top_idx] = value;\n    }\n\n    int pop() {\n        if (is_empty()) {\n            throw std::out_of_range(\"Stack underflow\");\n        }\n        return arr[top_idx--];\n    }\n\n    int top() const {\n        if (is_empty()) {\n            throw std::out_of_range(\"Stack is empty\");\n        }\n        return arr[top_idx];\n    }\n\n    bool is_empty() const {\n        return top_idx == -1;\n    }\n};\n\nint main() {\n    Stack s;\n    try {\n        s.push(10);\n        s.push(20);\n        s.push(30);\n        std::cout << \"Top element is: \" << s.top() << std::endl; // Output: 30\n        std::cout << \"Popped element: \" << s.pop() << std::endl; // Output: 30\n        std::cout << \"Is stack empty? \" << (s.is_empty() ? \"Yes\" : \"No\") << std::endl; // Output: No\n        std::cout << \"Popped element: \" << s.pop() << std::endl; // Output: 20\n        std::cout << \"Popped element: \" << s.pop() << std::endl; // Output: 10\n        std::cout << \"Is stack empty? \" << (s.is_empty() ? \"Yes\" : \"No\") << std::endl; // Output: Yes\n        s.pop(); // Should throw an exception\n    } catch (const std::out_of_range& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Class Definition**:\n   - `Stack` class manages an array `arr` of integers with a maximum size `MAX_SIZE`.\n   - `top_idx` keeps track of the top element's index in the stack.\n\n2. **Constructor**:\n   - Initializes `top_idx` to -1, indicating an empty stack.\n\n3. **push(int value)**:\n   - Adds an element to the top of the stack.\n   - Checks if the stack is full (`top_idx >= MAX_SIZE - 1`), throwing an exception if it is.\n\n4. **pop()**:\n   - Removes and returns the top element of the stack.\n   - Throws an exception if the stack is empty.\n\n5. **top() const**:\n   - Returns the top element without removing it.\n   - Throws an exception if the stack is empty.\n\n6. **is_empty() const**:\n   - Returns `true` if the stack is empty, otherwise `false`.\n\n7. **main()**:\n   - Demonstrates the usage of the `Stack` class with push, pop, top, and is_empty operations.\n   - Handles exceptions for stack underflow and overflow."
    }
]