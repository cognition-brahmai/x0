[
    {
        "role": "user",
        "content": "Write a Python program that connects to the Twitter API using Tweepy, streams tweets containing specified keywords, and performs sentiment analysis on them using TextBlob. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python program that connects to the Twitter API using Tweepy, streams tweets containing specified keywords, and performs sentiment analysis on them using TextBlob.\n\nFirst, make sure you have the required libraries installed. You can install them using pip:\n\n```bash\npip install tweepy textblob\n```\n\nNext, you need to set up your Twitter API credentials. To do this, create a Twitter Developer account and create an app to get your API keys and access tokens.\n\nOnce you have your credentials, you can proceed to write the code.\n\n## Final Solution\nTo achieve the task of streaming tweets containing specified keywords and performing sentiment analysis on them, we will use the Tweepy library to connect to the Twitter API and the TextBlob library for sentiment analysis.\n\n### Approach\n\n1. **Setup Twitter API Credentials:** Obtain your API keys and access tokens from the Twitter Developer portal.\n2. **Authenticate with Twitter API:** Use Tweepy to authenticate using the credentials.\n3. **Stream Tweets:** Define a listener class to handle incoming tweets and filter tweets based on specified keywords.\n4. **Perform Sentiment Analysis:** Use TextBlob to analyze the sentiment of each tweet.\n\n### Solution Code\n\n```python\nimport tweepy\nfrom textblob import TextBlob\n\n# Twitter API credentials\nconsumer_key = 'YOUR_CONSUMER_KEY'\nconsumer_secret = 'YOUR_CONSUMER_SECRET'\naccess_token = 'YOUR_ACCESS_TOKEN'\naccess_token_secret = 'YOUR_ACCESS_TOKEN_SECRET'\n\n# Authenticate to Twitter\nauth = tweepy.OAuthHandler(consumer_key, consumer_secret)\nauth.set_access_token(access_token, access_token_secret)\napi = tweepy.API(auth)\n\n# Define a listener class to handle incoming tweets\nclass MyStreamListener(tweepy.StreamListener):\n    def on_status(self, status):\n        # Print the tweet's full text\n        print(f\"Tweet: {status.extended_tweet['full_text'] if 'extended_tweet' in status._json else status.text}\")\n        \n        # Perform sentiment analysis\n        analysis = TextBlob(status.text)\n        print(f\"Sentiment: {analysis.sentiment}\")\n        print()\n\n    def on_error(self, status_code):\n        if status_code == 420:\n            # Returning False in on_data disconnects the stream\n            return False\n\n# Set up the stream\nmyStreamListener = MyStreamListener()\nmyStream = tweepy.Stream(auth=api.auth, listener=myStreamListener)\n\n# Define the keywords to track\nkeywords = ['python', 'programming', 'machine learning']\n\n# Start streaming tweets containing the keywords\nmyStream.filter(track=keywords)\n```\n\n### Explanation\n\n1. **Setup Twitter API Credentials:** Replace `'YOUR_CONSUMER_KEY'`, `'YOUR_CONSUMER_SECRET'`, `'YOUR_ACCESS_TOKEN'`, and `'YOUR_ACCESS_TOKEN_SECRET'` with your actual Twitter API credentials.\n\n2. **Authenticate with Twitter API:** Use Tweepy's `OAuthHandler` to authenticate with your consumer key and secret, then set access token and secret.\n\n3. **Stream Tweets:** Create a custom stream listener class `MyStreamListener` that inherits from `tweepy.StreamListener`. Override the `on_status` method to handle incoming tweets. In this method, print the tweet's text and perform sentiment analysis using TextBlob. Also, handle errors in the `on_error` method.\n\n4. **Perform Sentiment Analysis:** For each tweet, create a TextBlob object and print its sentiment, which includes polarity and subjectivity.\n\n5. **Start Streaming:** Define the keywords to track and start the stream to capture tweets containing these keywords.\n\nThis setup will continuously stream tweets containing the specified keywords and perform real-time sentiment analysis on them."
    }
]