[
    {
        "role": "user",
        "content": "Develop a JavaScript/Node.js program that monitors a specified directory for changes (file creation, modification, or deletion) and logs these events in real-time. The program should also support sending notifications via email or SMS using AWS Lambda when specific file patterns are detected.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a JavaScript/Node.js program that watches a directory for any changes like when files are created, modified, or deleted. Not only that, but it also needs to log these changes in real-time and, more interestingly, send notifications via email or SMS using AWS Lambda if certain file patterns are detected. That sounds like a pretty cool project! Let's break it down into manageable parts so I can tackle it step by step.\n\nFirst things first, I need to set up a Node.js environment because that's what the task specifies. I'm familiar with Node.js, but it's been a while since I worked on something like this, so I might need to refresh some concepts.\n\n### Step 1: Setting Up the Project\n\nI'll start by creating a new directory for my project and initializing a new Node.js project with `npm init`. This will help me manage dependencies and scripts easily.\n\n```bash\nmkdir directory-watcher\ncd directory-watcher\nnpm init -y\n```\n\n### Step 2: Installing Necessary Packages\n\nI need to monitor directory changes, so I'll use the `chokidar` package, which is a popular choice for file watching in Node.js. For logging, I can use the built-in `console.log`, but for more robust logging, maybe I'll look into a logging library like `winston`.\n\nFor the AWS Lambda part, I need to set up functions that can send emails and SMS notifications. I'll need the `aws-sdk` package for interacting with AWS services like SNS (for SMS) and SES (for email).\n\nLet's install these packages:\n\n```bash\nnpm install chokidar aws-sdk winston\n```\n\n### Step 3: Setting Up Logging\n\nI'll configure `winston` to handle logging. It's flexible and allows different transports for logging, like console, file, etc.\n\nFirst, I'll set up a basic logger:\n\n```javascript\nconst { createLogger, format, transports } = require('winston');\n\nconst logger = createLogger({\n  level: 'info',\n  format: format.json(),\n  transports: [\n    new transports.Console(),\n    new transports.File({ filename: 'combined.log' })\n  ]\n});\n\nmodule.exports = logger;\n```\n\nThis will log messages to both the console and a file named `combined.log`.\n\n### Step 4: Monitoring Directory Changes\n\nNow, I'll use `chokidar` to watch the specified directory for changes. I need to handle three types of events: creation, modification, and deletion.\n\nI'll create a function to set up the watcher:\n\n```javascript\nconst chokidar = require('chokidar');\nconst logger = require('./logger');\n\nfunction watchDirectory(path) {\n  const watcher = chokidar.watch(path, {\n    persistent: true,\n    ignoreInitial: true\n  });\n\n  watcher\n    .on('add', (path) => logger.info({ event: 'created', path }))\n    .on('change', (path) => logger.info({ event: 'modified', path }))\n    .on('unlink', (path) => logger.info({ event: 'deleted', path }))\n    .on('error', (error) => logger.error({ event: 'error', error }))\n    .on('ready', () => logger.info({ event: 'watcher_ready', path }))\n    .on('raw', (event, path, details) => \n      logger.debug({ event: 'raw', path, details })\n    );\n}\n\nmodule.exports = watchDirectory;\n```\n\nThis function sets up a watcher on the given path and logs events using the winston logger.\n\n### Step 5: Setting Up AWS Lambda for Notifications\n\nFor sending notifications via email or SMS, I'll need to set up AWS Lambda functions. However, since this is a Node.js program, I can invoke Lambda functions directly using the AWS SDK.\n\nFirst, I need to configure the AWS SDK with my credentials and region.\n\n```javascript\nconst AWS = require('aws-sdk');\n\nAWS.config.update({\n  region: 'us-west-2', // Change to your region\n  accessKeyId: 'YOUR_ACCESS_KEY',\n  secretAccessKey: 'YOUR_SECRET_KEY'\n});\n\nconst lambda = new AWS.Lambda();\n```\n\nReplace `'YOUR_ACCESS_KEY'` and `'YOUR_SECRET_KEY'` with your actual AWS credentials. For production code, it's better to use environment variables or AWS IAM roles.\n\nNext, I'll create functions to send email and SMS using Lambda.\n\nAssuming I have two Lambda functions:\n\n- `sendEmail`: Triggers SES to send an email.\n\n- `sendSMS`: Triggers SNS to send an SMS.\n\nI'll create a function to invoke these Lambda functions based on the file pattern detected.\n\n```javascript\nasync function notify(pattern, event) {\n  const params = {\n    FunctionName: pattern === 'email' ? 'sendEmail' : 'sendSMS',\n    Payload: JSON.stringify(event)\n  };\n\n  try {\n    const data = await lambda.invoke(params).promise();\n    logger.info({ event: 'notification_sent', pattern, data });\n  } catch (error) {\n    logger.error({ event: 'notification_error', pattern, error });\n  }\n}\n```\n\nThis function takes a pattern ('email' or 'sms') and the event details, then invokes the corresponding Lambda function.\n\n### Step 6: Detecting Specific File Patterns\n\nI need to define which file patterns trigger notifications. For example, if a file with a certain extension is created, send an email; if a file with another extension is deleted, send an SMS.\n\nI'll use regular expressions to match file names.\n\nDefine patterns:\n\n```javascript\nconst notificationPatterns = [\n  {\n    ext: /\\.txt$/, // Text files\n    onEvent: 'created',\n    notify: 'email'\n  },\n  {\n    ext: /\\.log$/, // Log files\n    onEvent: 'deleted',\n    notify: 'sms'\n  }\n];\n```\n\nThen, in the watcher callbacks, check if the event matches any pattern and trigger the notification.\n\nModify the `watchDirectory` function:\n\n```javascript\nfunction watchDirectory(path) {\n  const watcher = chokidar.watch(path, {\n    persistent: true,\n    ignoreInitial: true\n  });\n\n  const handleEvent = async (event, path) => {\n    logger.info({ event, path });\n\n    notificationPatterns.forEach(pattern => {\n      const fileExt = path.substring(path.lastIndexOf('.'));\n      if (pattern.ext.test(fileExt) && pattern.onEvent === event) {\n        notify(pattern.notify, { event, path });\n      }\n    });\n  };\n\n  watcher\n    .on('add', (path) => handleEvent('created', path))\n    .on('change', (path) => handleEvent('modified', path))\n    .on('unlink', (path) => handleEvent('deleted', path))\n    .on('error', (error) => logger.error({ event: 'error', error }))\n    .on('ready', () => logger.info({ event: 'watcher_ready', path }))\n    .on('raw', (event, path, details) => \n      logger.debug({ event: 'raw', path, details })\n    );\n}\n\nmodule.exports = watchDirectory;\n```\n\n### Step 7: Setting Up AWS Lambda Functions\n\nI need to create two Lambda functions: one for sending emails via SES and another for sending SMS via SNS.\n\n#### sendEmail Lambda\n\nThis function will take email details from the payload and use SES to send an email.\n\nExample code for `sendEmail` Lambda:\n\n```javascript\nconst AWS = require('aws-sdk');\nconst ses = new AWS.SES();\n\nexports.handler = async (event) => {\n  const params = {\n    Destination: {\n      ToAddresses: ['recipient@example.com']\n    },\n    Message: {\n      Body: {\n        Text: { Data: `File event: ${event.event} - ${event.path}` }\n      },\n      Subject: { Data: 'File Notification' }\n    },\n    Source: 'sender@example.com'\n  };\n\n  try {\n    await ses.sendEmail(params).promise();\n    console.log('Email sent successfully');\n  } catch (error) {\n    console.error('Failed to send email:', error);\n  }\n};\n```\n\n#### sendSMS Lambda\n\nThis function will take SMS details from the payload and use SNS to send an SMS.\n\nExample code for `sendSMS` Lambda:\n\n```javascript\nconst AWS = require('aws-sdk');\nconst sns = new AWS.SNS();\n\nexports.handler = async (event) => {\n  const params = {\n    Message: `File event: ${event.event} - ${event.path}`,\n    PhoneNumber: '+1234567890'\n  };\n\n  try {\n    await sns.publish(params).promise();\n    console.log('SMS sent successfully');\n  } catch (error) {\n    console.error('Failed to send SMS:', error);\n  }\n};\n```\n\nMake sure to configure your AWS resources correctly, including setting up SES and SNS, and allowing your Lambda functions to access them.\n\n### Step 8: Putting It All Together\n\nFinally, in my main application file, I'll require the `watchDirectory` function and specify the directory to watch.\n\n```javascript\nconst watchDirectory = require('./watchDirectory');\n\nconst pathToWatch = './some-directory';\nwatchDirectory(pathToWatch);\n```\n\nMake sure to replace `./some-directory` with the actual path you want to monitor.\n\n### Step 9: Testing\n\nTo test this setup, I need to:\n\n1. Run the Node.js program.\n\n2. Make changes (create, modify, delete files) in the watched directory.\n\n3. Check the logs to ensure events are being logged correctly.\n\n4. Verify that notifications are being sent via email or SMS when specific file patterns are detected.\n\n### Step 10: Deployment and Considerations\n\nFor deployment, consider the following:\n\n- Use environment variables for sensitive information like AWS credentials.\n\n- Ensure that the AWS Lambda functions have the necessary permissions to access SES and SNS.\n\n- Set up proper error handling and logging in both the main application and Lambda functions.\n\n- Consider scaling and performance if monitoring large directories or high-frequency changes.\n\n### Conclusion\n\nThis project involves setting up a file watcher in Node.js, logging events, and triggering AWS Lambda functions for notifications based on specific file patterns. By breaking it down into steps and using appropriate tools like `chokidar` and `winston`, along with AWS services, we can create a robust system for real-time directory monitoring and notification."
    }
]