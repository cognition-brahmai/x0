[
    {
        "role": "user",
        "content": "Write a C++ program that implements a simple stack data structure with push, pop, and peek operations. Include exception handling for cases when the stack is empty or full."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple implementation of a stack data structure in C++. This stack has the basic operations: push, pop, and peek. It also includes exception handling for cases when the stack is empty or full.\n\n```cpp\n#include <iostream>\n#include <exception>\n\nclass StackFullException : public std::exception {\npublic:\n    const char* what() const throw() {\n        return \"Stack is full\";\n    }\n};\n\nclass StackEmptyException : public std::exception {\npublic:\n    const char* what() const throw() {\n        return \"Stack is empty\";\n    }\n};\n\nclass Stack {\nprivate:\n    static const int MAX_SIZE = 100;\n    int arr[MAX_SIZE];\n    int top;\n\npublic:\n    Stack() : top(-1) {}\n\n    void push(int value) {\n        if (top >= MAX_SIZE - 1) {\n            throw StackFullException();\n        }\n        arr[++top] = value;\n    }\n\n    int pop() {\n        if (top < 0) {\n            throw StackEmptyException();\n        }\n        return arr[top--];\n    }\n\n    int peek() {\n        if (top < 0) {\n            throw StackEmptyException();\n        }\n        return arr[top];\n    }\n\n    bool isEmpty() {\n        return top == -1;\n    }\n\n    bool isFull() {\n        return top == MAX_SIZE - 1;\n    }\n};\n\nint main() {\n    Stack stack;\n\n    try {\n        // Pushing elements\n        stack.push(10);\n        stack.push(20);\n        stack.push(30);\n        std::cout << \"Top element is: \" << stack.peek() << std::endl;\n\n        // Popping elements\n        std::cout << \"Popped element: \" << stack.pop() << std::endl;\n        std::cout << \"Popped element: \" << stack.pop() << std::endl;\n        std::cout << \"Popped element: \" << stack.pop() << std::endl;\n        std::cout << \"Popped element: \" << stack.pop() << std::endl; // This should throw an exception\n\n    } catch (const StackEmptyException& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    } catch (const StackFullException& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Exception Classes**:\n   - `StackFullException` and `StackEmptyException` are custom exception classes derived from the standard `std::exception` class. They provide messages for when the stack is full or empty.\n\n2. **Stack Class**:\n   - Uses a fixed-size array (`arr`) to store stack elements.\n   - `top` is initialized to -1 indicating an empty stack.\n   - `push(int value)`: Adds an element to the top of the stack. If the stack is full, it throws a `StackFullException`.\n   - `pop()`: Removes and returns the top element of the stack. If the stack is empty, it throws a `StackEmptyException`.\n   - `peek()`: Returns the top element without removing it. If the stack is empty, it throws a `StackEmptyException`.\n   - `isEmpty()`: Returns true if the stack is empty.\n   - `isFull()`: Returns true if the stack is full.\n\n3. **Main Function**:\n   - Demonstrates pushing and popping elements from the stack.\n   - Handles exceptions using try-catch blocks to manage errors gracefully.\n\nThis implementation provides a basic understanding of stack operations and exception handling in C++."
    }
]