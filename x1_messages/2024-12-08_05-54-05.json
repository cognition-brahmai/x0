[
    {
        "role": "user",
        "content": "Write a Golang program that uses Elasticsearch to index a collection of documents (title, content, date) and performs full-text search on the content field. The program should accept a query string from the command line and return the top 10 matching documents sorted by relevance.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Okay, let's tackle this task. I need to write a Go program that interacts with Elasticsearch to index some documents and then perform a full-text search on them. The documents have fields like title, content, and date. The program should take a query string from the command line and return the top 10 most relevant documents.\n\nFirst, I need to make sure I have Elasticsearch running somewhere. Maybe locally, or on a server. For simplicity, I'll assume it's running locally on the default port, which is 9200.\n\nNext, I need to set up a Go project. I should create a new directory for this project and initialize it with `go mod init`. Let's say I name the module `elasticsearch-search`.\n\nI'll need to import the necessary packages. For Elasticsearch, there's an official Go client called `github.com/olivere/elastic/v7`. I should add that to my `go.mod` file.\n\nSo, the initial setup would look like this:\n\n```\nmkdir elasticsearch-search\ncd elasticsearch-search\ngo mod init elasticsearch-search\ngo get github.com/olivere/elastic/v7\n```\n\nNow, I need to think about the structure of the documents. Each document has a title, content, and date. I should define a struct in Go to represent these documents.\n\n```go\ntype Document struct {\n    Title   string `json:\"title\"`\n    Content string `json:\"content\"`\n    Date    string `json:\"date\"`\n}\n```\n\nI need to index a collection of these documents. For the purpose of this program, I'll hardcode a few documents for testing. Later, I can modify it to read from a file or another source.\n\nLet's create a slice of Document objects.\n\n```go\ndocuments := []Document{\n    {Title: \"First Document\", Content: \"This is the first document.\", Date: \"2023-01-01\"},\n    {Title: \"Second Document\", Content: \"This is the second document.\", Date: \"2023-01-02\"},\n    // Add more documents as needed\n}\n```\n\nNow, I need to connect to the Elasticsearch instance. Using the `olivere/elastic` package, I can create an Elasticsearch client.\n\n```go\nclient, err := elastic.NewClient(elastic.SetURL(\"http://localhost:9200\"))\nif err != nil {\n    // Handle error\n}\n```\n\nI should also specify the index name where these documents will be stored. Let's call the index \"documents\".\n\nBefore indexing, I should check if the index exists. If not, I need to create it.\n\n```go\nexists, err := client.IndexExists(\"documents\").Do(ctx)\nif err != nil {\n    // Handle error\n}\nif !exists {\n    mappings := `{\n        \"mappings\": {\n            \"properties\": {\n                \"title\": {\"type\": \"text\"},\n                \"content\": {\"type\": \"text\"},\n                \"date\": {\"type\": \"date\"}\n            }\n        }\n    }`\n    createIndex, err := client.CreateIndex(\"documents\").BodyString(mappings).Do(ctx)\n    if err != nil {\n        // Handle error\n    }\n    if !createIndex.Acknowledged {\n        // Handle index creation failure\n    }\n}\n```\n\nNow, I need to index each document. For each document in the slice, I'll use the `Index()` function of the client.\n\n```go\nfor _, doc := range documents {\n    _, err := client.Index().\n        Index(\"documents\").\n        BodyJson(doc).\n        Do(ctx)\n    if err != nil {\n        // Handle error\n    }\n}\n```\n\nAfter indexing, I need to perform a full-text search on the \"content\" field. The query string should be provided via the command line.\n\nI'll assume that the query string is the first command line argument.\n\n```go\nquery := os.Args[1]\n```\n\nI need to create a search query that searches in the \"content\" field for the given query string.\n\nUsing the Elasticsearch client, I can build a query using the `QueryStringQuery`.\n\n```go\nsearchResult, err := client.Search().\n    Index(\"documents\").\n    Query(elastic.NewQueryStringQuery(query)).\n    Sort(\"date\", false).\n    From(0).Size(10).\n    Do(ctx)\nif err != nil {\n    // Handle error\n}\n```\n\nThis query searches in the \"documents\" index using the query string query, sorts the results by \"date\" in ascending order, and returns the top 10 results.\n\nFinally, I need to iterate through the search results and print the documents.\n\n```go\nfor _, hit := range searchResult.Hits.Hits {\n    var doc Document\n    err := json.Unmarshal(hit.Source, &doc)\n    if err != nil {\n        // Handle error\n    }\n    fmt.Printf(\"Title: %s\\nContent: %s\\nDate: %s\\n\\n\", doc.Title, doc.Content, doc.Date)\n}\n```\n\nPutting it all together, the complete program would look like this:\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"flag\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/olivere/elastic/v7\"\n)\n\ntype Document struct {\n    Title   string `json:\"title\"`\n    Content string `json:\"content\"`\n    Date    string `json:\"date\"`\n}\n\nfunc main() {\n    // Initialize Elasticsearch client\n    client, err := elastic.NewClient(elastic.SetURL(\"http://localhost:9200\"))\n    if err != nil {\n        fmt.Println(\"Error creating Elasticsearch client:\", err)\n        return\n    }\n\n    // Define index name\n    indexName := \"documents\"\n\n    // Check if index exists\n    ctx := context.Background()\n    exists, err := client.IndexExists(indexName).Do(ctx)\n    if err != nil {\n        fmt.Println(\"Error checking index existence:\", err)\n        return\n    }\n\n    if !exists {\n        // Create index with mappings\n        mappings := `{\n            \"mappings\": {\n                \"properties\": {\n                    \"title\": {\"type\": \"text\"},\n                    \"content\": {\"type\": \"text\"},\n                    \"date\": {\"type\": \"date\"}\n                }\n            }\n        }`\n        createIndex, err := client.CreateIndex(indexName).BodyString(mappings).Do(ctx)\n        if err != nil {\n            fmt.Println(\"Error creating index:\", err)\n            return\n        }\n        if !createIndex.Acknowledged {\n            fmt.Println(\"Index creation not acknowledged\")\n            return\n        }\n    }\n\n    // Index sample documents\n    documents := []Document{\n        {Title: \"First Document\", Content: \"This is the first document.\", Date: \"2023-01-01\"},\n        {Title: \"Second Document\", Content: \"This is the second document.\", Date: \"2023-01-02\"},\n        // Add more documents as needed\n    }\n\n    for _, doc := range documents {\n        _, err := client.Index().\n            Index(indexName).\n            BodyJson(doc).\n            Do(ctx)\n        if err != nil {\n            fmt.Println(\"Error indexing document:\", err)\n            return\n        }\n    }\n\n    // Get query string from command line argument\n    query := os.Args[1]\n\n    // Perform search\n    searchResult, err := client.Search().\n        Index(indexName).\n        Query(elastic.NewQueryStringQuery(query)).\n        Sort(\"date\", false).\n        From(0).Size(10).\n        Do(ctx)\n    if err != nil {\n        fmt.Println(\"Error searching:\", err)\n        return\n    }\n\n    // Print search results\n    for _, hit := range searchResult.Hits.Hits {\n        var doc Document\n        err := json.Unmarshal(hit.Source, &doc)\n        if err != nil {\n            fmt.Println(\"Error unmarshalling document:\", err)\n            continue\n        }\n        fmt.Printf(\"Title: %s\\nContent: %s\\nDate: %s\\n\\n\", doc.Title, doc.Content, doc.Date)\n    }\n}\n```\n\nThis program does the following:\n\n1. Connects to an Elasticsearch instance running locally on port 9200.\n\n2. Checks if an index named \"documents\" exists, and creates it with appropriate mappings if it doesn't.\n\n3. Indexes a set of sample documents.\n\n4. Accepts a query string from the command line.\n\n5. Performs a full-text search on the \"content\" field using the query string.\n\n6. Retrieves and prints the top 10 matching documents sorted by date.\n\n## Final Solution\nTo create a Go program that uses Elasticsearch to index documents and perform full-text search, follow these steps:\n\n### Prerequisites\n1. **Elasticsearch**: Ensure Elasticsearch is running locally on the default port (9200) or update the connection settings accordingly.\n2. **Go**: Make sure Go is installed on your system.\n3. **Package Installation**: Use the official Elasticsearch Go client.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"os\"\n\n    \"github.com/olivere/elastic/v7\"\n)\n\ntype Document struct {\n    Title   string `json:\"title\"`\n    Content string `json:\"content\"`\n    Date    string `json:\"date\"`\n}\n\nfunc main() {\n    // Initialize Elasticsearch client\n    client, err := elastic.NewClient(elastic.SetURL(\"http://localhost:9200\"))\n    if err != nil {\n        fmt.Println(\"Error creating Elasticsearch client:\", err)\n        return\n    }\n\n    // Define index name\n    indexName := \"documents\"\n\n    // Check if index exists\n    ctx := context.Background()\n    exists, err := client.IndexExists(indexName).Do(ctx)\n    if err != nil {\n        fmt.Println(\"Error checking index existence:\", err)\n        return\n    }\n\n    if !exists {\n        // Create index with mappings\n        mappings := `{\n            \"mappings\": {\n                \"properties\": {\n                    \"title\": {\"type\": \"text\"},\n                    \"content\": {\"type\": \"text\"},\n                    \"date\": {\"type\": \"date\"}\n                }\n            }\n        }`\n        createIndex, err := client.CreateIndex(indexName).BodyString(mappings).Do(ctx)\n        if err != nil {\n            fmt.Println(\"Error creating index:\", err)\n            return\n        }\n        if !createIndex.Acknowledged {\n            fmt.Println(\"Index creation not acknowledged\")\n            return\n        }\n    }\n\n    // Index sample documents\n    documents := []Document{\n        {Title: \"First Document\", Content: \"This is the first document.\", Date: \"2023-01-01\"},\n        {Title: \"Second Document\", Content: \"This is the second document.\", Date: \"2023-01-02\"},\n        // Add more documents as needed\n    }\n\n    for _, doc := range documents {\n        _, err := client.Index().\n            Index(indexName).\n            BodyJson(doc).\n            Do(ctx)\n        if err != nil {\n            fmt.Println(\"Error indexing document:\", err)\n            return\n        }\n    }\n\n    // Get query string from command line argument\n    if len(os.Args) < 2 {\n        fmt.Println(\"Please provide a query string.\")\n        return\n    }\n    query := os.Args[1]\n\n    // Perform search\n    searchResult, err := client.Search().\n        Index(indexName).\n        Query(elastic.NewQueryStringQuery(query)).\n        Sort(\"date\", false).\n        From(0).Size(10).\n        Do(ctx)\n    if err != nil {\n        fmt.Println(\"Error searching:\", err)\n        return\n    }\n\n    // Print search results\n    for _, hit := range searchResult.Hits.Hits {\n        var doc Document\n        err := json.Unmarshal(hit.Source, &doc)\n        if err != nil {\n            fmt.Println(\"Error unmarshalling document:\", err)\n            continue\n        }\n        fmt.Printf(\"Title: %s\\nContent: %s\\nDate: %s\\n\\n\", doc.Title, doc.Content, doc.Date)\n    }\n}\n```\n\n### Explanation\n\n1. **Elasticsearch Client Initialization**:\n   - Connects to the Elasticsearch instance running locally on port 9200.\n\n2. **Index Management**:\n   - Checks if the index `documents` exists. If not, it creates the index with specified mappings for `title`, `content`, and `date`.\n\n3. **Indexing Documents**:\n   - Indexes sample documents into the Elasticsearch index.\n\n4. **Full-Text Search**:\n   - Accepts a query string from the command line.\n   - Performs a full-text search on the `content` field using the provided query string.\n   - Retrieves and prints the top 10 matching documents sorted by date.\n\n### Usage\n\n1. **Run the Program**:\n   ```sh\n   go run main.go \"search query\"\n   ```\n\n2. **Example**:\n   ```sh\n   go run main.go \"first document\"\n   ```\n\nThis will output the documents that match the query string, sorted by date."
    }
]