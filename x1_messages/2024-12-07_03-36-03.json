[
    {
        "role": "user",
        "content": "Create an HTML5 web page with a form that collects user information such as name, email, and age. Use JavaScript to validate the input fields, ensuring that the name is not empty, the email address is in the correct format, and the age is between 18 and 99. Display appropriate error messages for invalid inputs."
    },
    {
        "role": "assistant",
        "content": "I'm going to create an HTML5 web page that includes a form for collecting user information such as name, email, and age. I'll also use JavaScript to validate these inputs to ensure they meet specific criteria, and display error messages if they don't.\n\nFirst, I need to set up the basic structure of the HTML page. I'll start by creating the `<!DOCTYPE html>` declaration, followed by the `<html>` tags, and within those, the `<head>` and `<body>` sections.\n\nIn the `<head>`, I'll include the `<title>` to name the page, and maybe add some meta tags for better responsiveness on different devices. I might also include a `<style>` section for some basic styling, or link to an external CSS file, but for simplicity, I'll keep the styles inline or within a `<style>` tag.\n\nNow, for the form, I'll use the `<form>` element, and within it, I'll have input fields for name, email, and age, each wrapped in `<label>` tags for better accessibility. I'll also include a submit button.\n\nFor validation, I'll use JavaScript. I'll add an event listener to the form's submit event, which will prevent the default form submission and instead run my validation functions.\n\nLet's think about the validation requirements:\n\n1. **Name:** Should not be empty.\n\n2. **Email:** Should be in a correct email format.\n\n3. **Age:** Should be a number between 18 and 99.\n\nI'll need to write functions to check each of these conditions.\n\nFirst, for the name field, I'll simply check if the input field is empty. If it is, I'll display an error message next to the field.\n\nFor the email field, I'll use a regular expression to validate the email format. There are many ways to validate emails, but I'll use a simple regex that checks for the basic structure of an email address: one or more characters, followed by an '@' symbol, followed by one or more characters, a period, and then two or more characters for the domain part.\n\nFor the age field, I'll check if the input is a number and if it falls within the range of 18 to 99. I might also want to trim any whitespace and ensure that the input is actually a number.\n\nIf any of these validations fail, I'll display an error message next to the respective input field and prevent the form from being submitted. If all validations pass, I can allow the form to submit or perform further actions, like submitting the data via AJAX.\n\nI should also consider enhancing the user experience by providing real-time validation, meaning that the error messages appear as soon as the user leaves the input field or types something invalid. To achieve this, I can add event listeners for 'blur' events on each input field.\n\nLet me outline the steps I'll take:\n\n1. Create the HTML structure.\n\n2. Add the form with input fields for name, email, and age.\n\n3. Add a submit button.\n\n4. Write JavaScript functions to validate each input field.\n\n5. Attach event listeners to the form's submit event and to each input field's blur event for real-time validation.\n\n6. Display error messages next to the input fields if validation fails.\n\n7. Prevent form submission if any validation fails.\n\nI'll also need to think about how to structure the HTML to make it easy to attach these event listeners and manipulate the error messages.\n\nPerhaps I'll add a `<span>` element next to each input field where I can display the error message, and initially set its display to 'none'. Then, in the validation functions, I can set the innerHTML of the span to the error message and show it if validation fails, and hide it if validation succeeds.\n\nLet me sketch a rough outline of the HTML structure:\n\n```html\n\n<form id=\"userForm\">\n\n  <label for=\"name\">Name:</label>\n\n  <input type=\"text\" id=\"name\" name=\"name\">\n\n  <span id=\"nameError\" class=\"error\"></span>\n\n  \n\n  <label for=\"email\">Email:</label>\n\n  <input type=\"email\" id=\"email\" name=\"email\">\n\n  <span id=\"emailError\" class=\"error\"></span>\n\n  \n\n  <label for=\"age\">Age:</label>\n\n  <input type=\"number\" id=\"age\" name=\"age\">\n\n  <span id=\"ageError\" class=\"error\"></span>\n\n  \n\n  <button type=\"submit\">Submit</button>\n\n</form>\n\n```\n\nAnd corresponding CSS for basic styling and hiding the error messages initially:\n\n```css\n\n.error {\n\n  color: red;\n\n  display: none;\n\n}\n\n```\n\nThen, in JavaScript, I'll select the form and the input fields, and add event listeners.\n\nFirst, I'll add event listeners for the 'blur' event on each input field to perform real-time validation.\n\nSecond, I'll add an event listener for the form's 'submit' event to perform validation when the user tries to submit the form.\n\nIn the validation functions, I'll check each field accordingly and show or hide the error messages.\n\nLet me think about the JavaScript functions.\n\nFirst, for the name field:\n\n- Check if the input is empty.\n\n- If empty, display an error message next to the name field.\n\n- If not empty, hide the error message.\n\nFor the email field:\n\n- Use a regular expression to check if the email is in the correct format.\n\n- If not in the correct format, display an error message.\n\n- If in the correct format, hide the error message.\n\nFor the age field:\n\n- Check if the input is a number.\n\n- Check if the number is between 18 and 99.\n\n- If not a number or out of range, display an error message.\n\n- If valid, hide the error message.\n\nI'll need to write a function for each type of validation.\n\nAlso, I should consider trimming any whitespace from the inputs to avoid false positives.\n\nLet me consider writing a general validateFunction that can be used for each field, but given the different validation requirements, it might be better to have separate functions for each field.\n\nAlternatively, I can write a generic validation function that takes the input field, the validation rule, and the error message span, and handles showing/hiding the error message based on the validation result.\n\nThis would make the code more modular and easier to maintain.\n\nSo, I'll proceed with writing a generic validateFunction.\n\nFirst, I'll define the validation rules for each field:\n\n- Name: must not be empty.\n\n- Email: must match a specific regex pattern.\n\n- Age: must be a number between 18 and 99.\n\nThen, I'll write a validateFunction that takes the input element, the validation rule, and the error message span.\n\nInside the validateFunction, I'll perform the validation based on the rule provided and update the error message span accordingly.\n\nWait, but different fields have different validation logic. So, perhaps it's better to have separate validation functions for each field, and call them appropriately in the event listeners.\n\nLet me try that approach.\n\nSo, I'll write validateName(), validateEmail(), and validateAge() functions.\n\nEach function will:\n\n- Get the value of the input field.\n\n- Trim any whitespace.\n\n- Perform the specific validation.\n\n- If valid, hide the error message span.\n\n- If invalid, set the error message in the span and show it.\n\nThen, in the 'blur' event listeners for each input field, I'll call the corresponding validation function.\n\nAdditionally, in the form's 'submit' event listener, I'll call all the validation functions and only prevent the default submission if any validation fails.\n\nI need to keep track of whether all validations have passed. I can set a flag, say, isValidForm, initially set to true. Then, in each validation function, if a validation fails, set isValidForm to false.\n\nAfter all validations are run, if isValidForm is still true, allow the form to submit; otherwise, prevent the submission.\n\nWait, actually, in the form's 'submit' event listener, I can call each validation function, and if any of them return false, prevent the submission.\n\nSo, I'll modify the validation functions to return true if validation passes and false if it fails.\n\nThen, in the form's 'submit' event listener, I'll call all validation functions and use their return values to decide whether to prevent the submission.\n\nThis seems efficient.\n\nNow, let's think about the real-time validation.\n\nWhen the user leaves the input field (on 'blur' event), I'll validate the field and show any errors immediately.\n\nThis way, the user gets feedback as they fill out the form, which is better for user experience.\n\nAlso, I should consider validating the fields when the form is submitted, in case the user hasn't interacted with a particular field.\n\nNow, regarding the email validation regex.\n\nI need a regex that matches the general structure of an email address.\n\nA simple regex could be: `^\\S+@\\S+\\.\\S+$`\n\nThis matches one or more non-whitespace characters, followed by an '@' symbol, followed by one or more non-whitespace characters, a period, and then one or more non-whitespace characters.\n\nThis should cover most standard email addresses.\n\nBut email validation can be quite complex, as emails can have various special characters and domains.\n\nFor the sake of this exercise, I'll stick with this simple regex.\n\nIf I have time, I can look up a more comprehensive regex for email validation.\n\nSimilarly, for the age field, I'll use JavaScript's Number() function to convert the input to a number and then check if it's between 18 and 99.\n\nI should also check if the input is a valid number.\n\nLet me think about edge cases.\n\nFor name:\n\n- Empty string: invalid.\n\n- Only whitespace: invalid.\n\n- Contains numbers or special characters: allowed, as names can have various characters.\n\nFor email:\n\n- Missing '@' symbol: invalid.\n\n- Multiple '@' symbols: invalid.\n\n- No domain extension: invalid.\n\nFor age:\n\n- Non-numeric input: invalid.\n\n- Decimal numbers: invalid, as age should be an integer.\n\n- Numbers outside the 18-99 range: invalid.\n\nI should handle these cases appropriately in the validation functions.\n\nAlso, for the age field, I might want to restrict the input type to number, but even then, users can enter decimal numbers or non-numeric characters.\n\nSo, I'll need to perform additional checks in the validation function.\n\nNow, let's think about how to display the error messages.\n\nI'll have a `<span>` next to each input field with an id like `nameError`, `emailError`, and `ageError`.\n\nInitially, these spans will be hidden using CSS.\n\nIn the validation functions, if validation fails, I'll set the innerHTML of the corresponding span to the error message and set its display to 'inline-block' or 'block'.\n\nIf validation succeeds, I'll set the innerHTML to an empty string and set display to 'none'.\n\nThis way, the error messages will appear dynamically based on user input.\n\nI should also ensure that when the user starts typing in a field again, any existing error message for that field is cleared, assuming they are trying to correct the input.\n\nTo achieve this, I can add an 'input' event listener to each field that calls the validation function for that field.\n\nBut since I already have 'blur' event listeners, which trigger when the field loses focus, that should suffice for most cases.\n\nHowever, adding 'input' event listeners could provide even more\u5b9e\u65f6\u53cd\u9988\uff0c\u4f46\u53ef\u80fd\u4f1a\u589e\u52a0\u4e00\u4e9b\u590d\u6742\u6027\u3002\n\n\u4e5f\u8bb8\u5728'blur'\u4e8b\u4ef6\u4e0a\u8fdb\u884c\u9a8c\u8bc1\u5c31\u8db3\u591f\u4e86\u3002\n\n\u73b0\u5728\uff0c\u6211\u9700\u8981\u51b3\u5b9a\u5982\u4f55\u7ed3\u6784\u5316JavaScript\u4ee3\u7801\u3002\n\n\u6211\u53ef\u4ee5\u5c06\u6240\u6709\u4ee3\u7801\u653e\u5728\u4e00\u4e2a<script>\u6807\u7b7e\u4e2d\uff0c\u4f46\u4e3a\u4e86\u66f4\u597d\u7684\u7ec4\u7ec7\uff0c\u6211\u53ef\u4ee5\u5c06\u9a8c\u8bc1\u51fd\u6570\u5206\u5f00\uff0c\u5e76\u53ef\u80fd\u5c06\u4e8b\u4ef6\u76d1\u542c\u5668\u7684\u8bbe\u7f6e\u5206\u5f00\u3002\n\n\u6211\u8fd8\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u7c7b\u6216\u6a21\u5757\uff0c\u4f46\u4e3a\u4e86\u7b80\u5355\u8d77\u89c1\uff0c\u6211\u5c06\u4f7f\u7528\u51fd\u6570\u3002\n\n\u8ba9\u6211\u5f00\u59cb\u7f16\u5199\u4ee3\u7801\u3002\n\n\u9996\u5148\uff0cHTML\u7ed3\u6784\uff1a\n\n```html\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n\n  <meta charset=\"UTF-8\">\n\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n  <title>User Information Form</title>\n\n  <style>\n\n    .error {\n\n      color: red;\n\n      display: none;\n\n    }\n\n  </style>\n\n</head>\n\n<body>\n\n  <h2>User Information Form</h2>\n\n  <form id=\"userForm\">\n\n    <div>\n\n      <label for=\"name\">Name:</label>\n\n      <input type=\"text\" id=\"name\" name=\"name\">\n\n      <span id=\"nameError\" class=\"error\"></span>\n\n    </div>\n\n    <div>\n\n      <label for=\"email\">Email:</label>\n\n      <input type=\"email\" id=\"email\" name=\"email\">\n\n      <span id=\"emailError\" class=\"error\"></span>\n\n    </div>\n\n    <div>\n\n      <label for=\"age\">Age:</label>\n\n      <input type=\"number\" id=\"age\" name=\"age\">\n\n      <span id=\"ageError\" class=\"error\"></span>\n\n    </div>\n\n    <div>\n\n      <button type=\"submit\">Submit</button>\n\n    </div>\n\n  </form>\n\n  <script src=\"script.js\"></script>\n\n</body>\n\n</html>\n\n```\n\n\u6211\u5c06JavaScript\u4ee3\u7801\u653e\u5728\u4e00\u4e2a\u5355\u72ec\u7684\u6587\u4ef6\u4e2d\uff0c\u540d\u4e3a\u201cscript.js\u201d\uff0c\u4ee5\u4fbf\u66f4\u597d\u5730\u7ec4\u7ec7\u4ee3\u7801\u3002\n\n\u73b0\u5728\uff0c\u6211\u6765\u7f16\u5199\u201cscript.js\u201d\u3002\n\n\u9996\u5148\uff0c\u6211\u9700\u8981\u9009\u62e9\u6240\u6709\u7684\u8f93\u5165\u5b57\u6bb5\u548c\u9519\u8bef\u6d88\u606f\u8de8\u5ea6\u3002\n\n\u7136\u540e\uff0c\u4e3a\u6bcf\u4e2a\u8f93\u5165\u5b57\u6bb5\u6dfb\u52a0'blur'\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4ee5\u5728\u7528\u6237\u79bb\u5f00\u5b57\u6bb5\u65f6\u9a8c\u8bc1\u8f93\u5165\u3002\n\n\u6700\u540e\uff0c\u4e3a\u8868\u5355\u7684'submit'\u4e8b\u4ef6\u6dfb\u52a0\u76d1\u542c\u5668\uff0c\u4ee5\u5728\u63d0\u4ea4\u65f6\u9a8c\u8bc1\u6240\u6709\u5b57\u6bb5\u3002\n\n\u8ba9\u6211\u5f00\u59cb\u7f16\u5199\u9a8c\u8bc1\u51fd\u6570\u3002\n\n\u9996\u5148\u662fvalidateName\u51fd\u6570\uff1a\n\n```javascript\n\nfunction validateName() {\n\n  const nameInput = document.getElementById('name');\n\n  const nameError = document.getElementById('nameError');\n\n  const nameValue = nameInput.value.trim();\n\n  if (nameValue === '') {\n\n    nameError.innerHTML = 'Name is required.';\n\n    nameError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    nameError.innerHTML = '';\n\n    nameError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\n```\n\n\u63a5\u4e0b\u6765\u662fvalidateEmail\u51fd\u6570\uff1a\n\n```javascript\n\nfunction validateEmail() {\n\n  const emailInput = document.getElementById('email');\n\n  const emailError = document.getElementById('emailError');\n\n  const emailValue = emailInput.value.trim();\n\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n\n  if (!emailRegex.test(emailValue)) {\n\n    emailError.innerHTML = 'Please enter a valid email address.';\n\n    emailError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    emailError.innerHTML = '';\n\n    emailError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\n```\n\n\u7136\u540e\u662fvalidateAge\u51fd\u6570\uff1a\n\n```javascript\n\nfunction validateAge() {\n\n  const ageInput = document.getElementById('age');\n\n  const ageError = document.getElementById('ageError');\n\n  const ageValue = ageInput.value.trim();\n\n  const age = Number(ageValue);\n\n  if (isNaN(age) || age < 18 || age > 99) {\n\n    ageError.innerHTML = 'Age must be a number between 18 and 99.';\n\n    ageError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    ageError.innerHTML = '';\n\n    ageError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\n```\n\n\u73b0\u5728\uff0c\u6211\u9700\u8981\u4e3a\u6bcf\u4e2a\u8f93\u5165\u5b57\u6bb5\u6dfb\u52a0'blur'\u4e8b\u4ef6\u76d1\u542c\u5668\uff0c\u4ee5\u5728\u7528\u6237\u79bb\u5f00\u5b57\u6bb5\u65f6\u8c03\u7528\u76f8\u5e94\u7684\u9a8c\u8bc1\u51fd\u6570\u3002\n\n```javascript\n\ndocument.getElementById('name').addEventListener('blur', validateName);\n\ndocument.getElementById('email').addEventListener('blur', validateEmail);\n\ndocument.getElementById('age').addEventListener('blur', validateAge);\n\n```\n\n\u6b64\u5916\uff0c\u6211\u9700\u8981\u4e3a\u8868\u5355\u7684'submit'\u4e8b\u4ef6\u6dfb\u52a0\u76d1\u542c\u5668\uff0c\u4ee5\u5728\u63d0\u4ea4\u65f6\u9a8c\u8bc1\u6240\u6709\u5b57\u6bb5\u3002\n\n\u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u5931\u8d25\uff0c\u5e94\u963b\u6b62\u8868\u5355\u63d0\u4ea4\u3002\n\n```javascript\n\ndocument.getElementById('userForm').addEventListener('submit', function(event) {\n\n  let isValid = true;\n\n  \n\n  if (!validateName()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!validateEmail()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!validateAge()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!isValid) {\n\n    event.preventDefault();\n\n  }\n\n});\n\n```\n\n\u8fd9\u91cc\uff0c\u6211\u5728\u63d0\u4ea4\u65f6\u8c03\u7528\u6bcf\u4e2a\u9a8c\u8bc1\u51fd\u6570\uff0c\u5e76\u6839\u636e\u9a8c\u8bc1\u7ed3\u679c\u8bbe\u7f6eisValid\u53d8\u91cf\u3002\n\n\u5982\u679c\u4efb\u4f55\u9a8c\u8bc1\u5931\u8d25\uff0cisValid\u4fdd\u6301false\uff0c\u4e8b\u4ef6\u88ab\u963b\u6b62\uff0c\u8868\u5355\u4e0d\u63d0\u4ea4\u3002\n\n\u73b0\u5728\uff0c\u6211\u9700\u8981\u5c06\u6240\u6709\u8fd9\u4e9b\u4ee3\u7801\u653e\u5165\u201cscript.js\u201d\u6587\u4ef6\u4e2d\u3002\n\n\u8ba9\u6211\u6574\u7406\u4e00\u4e0b\u4ee3\u7801\uff1a\n\n```javascript\n\n// Select elements\n\nconst nameInput = document.getElementById('name');\n\nconst nameError = document.getElementById('nameError');\n\nconst emailInput = document.getElementById('email');\n\nconst emailError = document.getElementById('emailError');\n\nconst ageInput = document.getElementById('age');\n\nconst ageError = document.getElementById('ageError');\n\nconst form = document.getElementById('userForm');\n\n// Validation functions\n\nfunction validateName() {\n\n  const nameValue = nameInput.value.trim();\n\n  if (nameValue === '') {\n\n    nameError.innerHTML = 'Name is required.';\n\n    nameError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    nameError.innerHTML = '';\n\n    nameError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\nfunction validateEmail() {\n\n  const emailValue = emailInput.value.trim();\n\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n\n  if (!emailRegex.test(emailValue)) {\n\n    emailError.innerHTML = 'Please enter a valid email address.';\n\n    emailError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    emailError.innerHTML = '';\n\n    emailError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\nfunction validateAge() {\n\n  const ageValue = ageInput.value.trim();\n\n  const age = Number(ageValue);\n\n  if (isNaN(age) || age < 18 || age > 99) {\n\n    ageError.innerHTML = 'Age must be a number between 18 and 99.';\n\n    ageError.style.display = 'inline-block';\n\n    return false;\n\n  } else {\n\n    ageError.innerHTML = '';\n\n    ageError.style.display = 'none';\n\n    return true;\n\n  }\n\n}\n\n// Event listeners\n\nnameInput.addEventListener('blur', validateName);\n\nemailInput.addEventListener('blur', validateEmail);\n\nageInput.addEventListener('blur', validateAge);\n\nform.addEventListener('submit', function(event) {\n\n  let isValid = true;\n\n  \n\n  if (!validateName()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!validateEmail()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!validateAge()) {\n\n    isValid = false;\n\n  }\n\n  \n\n  if (!isValid) {\n\n    event.preventDefault();\n\n  }\n\n});\n\n```\n\n\u8fd9\u5e94\u8be5\u80fd\u6b63\u5e38\u5de5\u4f5c\u3002\n\n\u8ba9\u6211\u8003\u8651\u4e00\u4e0b\u53ef\u80fd\u7684\u6539\u8fdb\u3002\n\n1. **\u589e\u5f3a\u7684\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1**\uff1a\u5f53\u524d\u7684\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1\u6b63\u5219\u8868\u8fbe\u5f0f\u76f8\u5f53\u57fa\u672c\u3002\u6211\u53ef\u4ee5\u4f7f\u7528\u66f4\u590d\u6742\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\u6765\u63d0\u9ad8\u51c6\u786e\u6027\u3002\n\n2. **\u5e74\u9f84\u5b57\u6bb5\u7684\u8f93\u5165\u7c7b\u578b**\uff1a\u6211\u5c06\u5e74\u9f84\u5b57\u6bb5\u7684\u8f93\u5165\u7c7b\u578b\u8bbe\u7f6e\u4e3a\u201cnumber\u201d\uff0c\u4f46\u7528\u6237\u4ecd\u7136\u53ef\u4ee5\u8f93\u5165\u975e\u6570\u5b57\u5b57\u7b26\u3002\u4e3a\u4e86\u66f4\u597d\u5730\u63a7\u5236\uff0c\u6211\u53ef\u4ee5\u6dfb\u52a0\u989d\u5916\u7684\u68c0\u67e5\u3002\n\n3. **\u7528\u6237\u4f53\u9a8c**\uff1a\u53ef\u4ee5\u6dfb\u52a0\u66f4\u591a\u7684\u7528\u6237\u53cd\u9988\uff0c\u4f8b\u5982\u5728\u8f93\u5165\u6b63\u786e\u65f6\u663e\u793a\u6210\u529f\u56fe\u6807\u6216\u6d88\u606f\u3002\n\n4. **\u56fd\u9645\u5316**\uff1a\u5982\u679c\u9700\u8981\u652f\u6301\u591a\u79cd\u8bed\u8a00\uff0c\u53ef\u4ee5\u6dfb\u52a0\u5bf9\u591a\u8bed\u8a00\u9519\u8bef\u6d88\u606f\u7684\u652f\u6301\u3002\n\n5. **\u53ef\u8bbf\u95ee\u6027**\uff1a\u786e\u4fdd\u8868\u5355\u5bf9\u4f7f\u7528\u5c4f\u5e55\u9605\u8bfb\u5668\u7b49\u8f85\u52a9\u6280\u672f\u7684\u7528\u6237\u53cb\u597d\u3002\n\n\u5bf9\u4e8e\u73b0\u5728\uff0c\u8fd9\u4e2a\u57fa\u672c\u7684\u5b9e\u73b0\u5e94\u8be5\u6ee1\u8db3\u9700\u6c42\u3002\n\n\u6211\u53ef\u4ee5\u6d4b\u8bd5\u8fd9\u4e2a\u8868\u5355\uff0c\u786e\u4fdd\u6240\u6709\u7684\u9a8c\u8bc1\u90fd\u5728\u6b63\u786e\u7684\u65f6\u95f4\u89e6\u53d1\uff0c\u5e76\u4e14\u9519\u8bef\u6d88\u606f\u663e\u793a\u548c\u9690\u85cf\u6b63\u786e\u3002\n\n\u6211\u5e94\u8be5\u6d4b\u8bd5\u5404\u79cd\u573a\u666f\uff0c\u5305\u62ec\uff1a\n\n- \u6240\u6709\u5b57\u6bb5\u90fd\u586b\u5199\u6b63\u786e\u3002\n\n- \u4e2a\u522b\u5b57\u6bb5\u4e3a\u7a7a\u6216\u65e0\u6548\u3002\n\n- \u8fb9\u7f18\u60c5\u51b5\uff0c\u5982\u6700\u5c0f\u548c\u6700\u5927\u5e74\u9f84\uff0c\u7535\u5b50\u90ae\u4ef6\u5730\u5740\u7684\u6781\u9650\u60c5\u51b5\u7b49\u3002\n\n\u901a\u8fc7\u8fd9\u4e9b\u6d4b\u8bd5\uff0c\u6211\u53ef\u4ee5\u786e\u4fdd\u8868\u5355\u9a8c\u8bc1\u5de5\u4f5c\u6b63\u5e38\u3002\n\n## \u6700\u7ec8\u89e3\u51b3\u65b9\u6848\n\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u6709\u6548\u7684\u7528\u6237\u4fe1\u606f\u6536\u96c6\u8868\u5355\uff0c\u5e76\u4f7f\u7528JavaScript\u8fdb\u884c\u8f93\u5165\u9a8c\u8bc1\uff0c\u6211\u4eec\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\u3002\n\n### \u89e3\u51b3\u65b9\u6848\u4ee3\u7801\n\n**index.html**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>User Information Form</title>\n  <style>\n    .error {\n      color: red;\n      display: none;\n    }\n  </style>\n</head>\n<body>\n  <h2>User Information Form</h2>\n  <form id=\"userForm\">\n    <div>\n      <label for=\"name\">Name:</label>\n      <input type=\"text\" id=\"name\" name=\"name\">\n      <span id=\"nameError\" class=\"error\"></span>\n    </div>\n    <div>\n      <label for=\"email\">Email:</label>\n      <input type=\"email\" id=\"email\" name=\"email\">\n      <span id=\"emailError\" class=\"error\"></span>\n    </div>\n    <div>\n      <label for=\"age\">Age:</label>\n      <input type=\"number\" id=\"age\" name=\"age\">\n      <span id=\"ageError\" class=\"error\"></span>\n    </div>\n    <div>\n      <button type=\"submit\">Submit</button>\n    </div>\n  </form>\n  <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n**script.js**\n\n```javascript\n// Select elements\nconst nameInput = document.getElementById('name');\nconst nameError = document.getElementById('nameError');\nconst emailInput = document.getElementById('email');\nconst emailError = document.getElementById('emailError');\nconst ageInput = document.getElementById('age');\nconst ageError = document.getElementById('ageError');\nconst form = document.getElementById('userForm');\n\n// Validation functions\nfunction validateName() {\n  const nameValue = nameInput.value.trim();\n  if (nameValue === '') {\n    nameError.innerHTML = 'Name is required.';\n    nameError.style.display = 'inline-block';\n    return false;\n  } else {\n    nameError.innerHTML = '';\n    nameError.style.display = 'none';\n    return true;\n  }\n}\n\nfunction validateEmail() {\n  const emailValue = emailInput.value.trim();\n  const emailRegex = /^\\S+@\\S+\\.\\S+$/;\n  if (!emailRegex.test(emailValue)) {\n    emailError.innerHTML = 'Please enter a valid email address.';\n    emailError.style.display = 'inline-block';\n    return false;\n  } else {\n    emailError.innerHTML = '';\n    emailError.style.display = 'none';\n    return true;\n  }\n}\n\nfunction validateAge() {\n  const ageValue = ageInput.value.trim();\n  const age = Number(ageValue);\n  if (isNaN(age) || age < 18 || age > 99) {\n    ageError.innerHTML = 'Age must be a number between 18 and 99.';\n    ageError.style.display = 'inline-block';\n    return false;\n  } else {\n    ageError.innerHTML = '';\n    ageError.style.display = 'none';\n    return true;\n  }\n}\n\n// Event listeners\nnameInput.addEventListener('blur', validateName);\nemailInput.addEventListener('blur', validateEmail);\nageInput.addEventListener('blur', validateAge);\nform.addEventListener('submit', function(event) {\n  let isValid = true;\n\n  if (!validateName()) {\n    isValid = false;\n  }\n\n  if (!validateEmail()) {\n    isValid = false;\n  }\n\n  if (!validateAge()) {\n    isValid = false;\n  }\n\n  if (!isValid) {\n    event.preventDefault();\n  }\n});\n```\n\n### \u89e3\u51b3\u65b9\u6848\u8bf4\u660e\n\n1. **HTML\u7ed3\u6784**:\n    - \u521b\u5efa\u4e00\u4e2a\u5305\u542b\u59d3\u540d\u3001\u7535\u5b50\u90ae\u4ef6\u548c\u5e74\u9f84\u8f93\u5165\u5b57\u6bb5\u7684\u8868\u5355\u3002\n    - \u6bcf\u4e2a\u8f93\u5165\u5b57\u6bb5\u65c1\u8fb9\u90fd\u6709\u4e00\u4e2a\u7528\u4e8e\u663e\u793a\u9519\u8bef\u6d88\u606f\u7684`<span>`\u5143\u7d20\u3002\n\n2. **CSS\u6837\u5f0f**:\n    - \u521d\u59cb\u5316\u9519\u8bef\u6d88\u606f\u4e3a\u9690\u85cf\u72b6\u6001\uff0c\u4ec5\u5728\u9a8c\u8bc1\u5931\u8d25\u65f6\u663e\u793a\u3002\n\n3. **JavaScript\u9a8c\u8bc1**:\n    - **\u59d3\u540d\u9a8c\u8bc1**: \u68c0\u67e5\u662f\u5426\u4e3a\u7a7a\u3002\n    - **\u7535\u5b50\u90ae\u4ef6\u9a8c\u8bc1**: \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u68c0\u67e5\u683c\u5f0f\u3002\n    - **\u5e74\u9f84\u9a8c\u8bc1**: \u68c0\u67e5\u662f\u5426\u4e3a18\u523099\u4e4b\u95f4\u7684\u6570\u5b57\u3002\n\n4. **\u4e8b\u4ef6\u76d1\u542c**:\n    - \u5728\u7528\u6237\u79bb\u5f00\u8f93\u5165\u5b57\u6bb5\u65f6\uff08`blur`\u4e8b\u4ef6\uff09\u8fdb\u884c\u5b9e\u65f6\u9a8c\u8bc1\u3002\n    - \u5728\u8868\u5355\u63d0\u4ea4\u65f6\u8fdb\u884c\u5168\u9762\u9a8c\u8bc1\uff0c\u786e\u4fdd\u6240\u6709\u5b57\u6bb5\u90fd\u6709\u6548\uff0c\u5426\u5219\u963b\u6b62\u8868\u5355\u63d0\u4ea4\u3002\n\n\u901a\u8fc7\u8fd9\u79cd\u65b9\u5f0f\uff0c\u6211\u4eec\u53ef\u4ee5\u786e\u4fdd\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\u662f\u6709\u6548\u548c\u7b26\u5408\u9884\u671f\u7684\uff0c\u4ece\u800c\u63d0\u9ad8\u5e94\u7528\u7684 robustness \u548c\u7528\u6237\u4f53\u9a8c\u3002"
    }
]