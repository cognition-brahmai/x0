[
    {
        "role": "user",
        "content": "Write a Java program that uses the observer pattern to implement a simple event-driven system with multiple listeners and events."
    },
    {
        "role": "assistant",
        "content": "Certainly! The observer pattern is a software design pattern in which an object, called the subject, maintains a list of its dependents, called observers, and notifies them automatically of any state changes, usually by calling one of their methods. It is mainly used to implement distributed event-handling systems.\n\nIn this example, we'll create a simple event-driven system where multiple listeners can subscribe to different types of events, and when an event occurs, all subscribed listeners are notified.\n\n### Components of the Observer Pattern\n\n1. **Subject (Observable)**: Manages subscriptions and notifications.\n2. **Observer**: Defines a method for notification.\n3. **Concrete Subject**: Maintains a list of observers and notifies them of any state changes.\n4. **Concrete Observer**: Implements the observer interface and updates itself when notified.\n\n### Implementation\n\nFor this example, we'll create a simple event system where events are strings representing different types of occurrences, and listeners are objects that can handle these events.\n\n#### Step 1: Define the Observer Interface\n\n```java\npublic interface EventListener {\n    void onEvent(String event);\n}\n```\n\n#### Step 2: Create the Subject Class\n\nThe subject will manage a list of observers and provide methods to add, remove, and notify them.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class EventManager {\n    private List<EventListener> listeners = new ArrayList<>();\n\n    public void addListener(EventListener listener) {\n        listeners.add(listener);\n    }\n\n    public void removeListener(EventListener listener) {\n        listeners.remove(listener);\n    }\n\n    public void notifyListeners(String event) {\n        for (EventListener listener : listeners) {\n            listener.onEvent(event);\n        }\n    }\n}\n```\n\n#### Step 3: Create Concrete Observers\n\nThese are classes that implement the `EventListener` interface and define how they handle events.\n\n```java\npublic class ConsoleListener implements EventListener {\n    @Override\n    public void onEvent(String event) {\n        System.out.println(\"ConsoleListener received event: \" + event);\n    }\n}\n\npublic class FileLoggerListener implements EventListener {\n    @Override\n    public void onEvent(String event) {\n        System.out.println(\"FileLoggerListener logged event: \" + event);\n        // Here you can add code to log the event to a file\n    }\n}\n```\n\n#### Step 4: Create and Use the Event Manager\n\nNow, let's create an instance of `EventManager`, add some listeners, and trigger some events.\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        EventManager eventManager = new EventManager();\n\n        // Create listeners\n        EventListener consoleListener = new ConsoleListener();\n        EventListener fileLoggerListener = new FileLoggerListener();\n\n        // Add listeners to the event manager\n        eventManager.addListener(consoleListener);\n        eventManager.addListener(fileLoggerListener);\n\n        // Notify listeners about an event\n        eventManager.notifyListeners(\"System Started\");\n\n        // Remove a listener\n        eventManager.removeListener(consoleListener);\n\n        // Notify listeners again\n        eventManager.notifyListeners(\"User Logged In\");\n    }\n}\n```\n\n### Explanation\n\n1. **Observer Interface (`EventListener`)**: Defines the contract for all listeners, specifying that they must implement the `onEvent` method.\n2. **Subject Class (`EventManager`)**: Manages the list of listeners and provides methods to add, remove, and notify them. When `notifyListeners` is called, it iterates through the list of listeners and calls their `onEvent` method with the provided event.\n3. **Concrete Observers (`ConsoleListener` and `FileLoggerListener`)**: Implement the `EventListener` interface and define specific actions to take when an event is received.\n4. **Main Class**: Sets up the event manager, adds listeners, triggers events, and demonstrates removing a listener.\n\nThis simple implementation showcases the observer pattern in action, allowing for a flexible and decoupled event handling system."
    }
]