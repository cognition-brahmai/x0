[
    {
        "role": "user",
        "content": "Write a Java program that reads a CSV file containing information about employees (name, age, department, and salary) and calculates the average salary per department. The program should be able to handle exceptions such as missing or incorrect data."
    },
    {
        "role": "assistant",
        "content": "To solve this problem, we'll write a Java program that reads a CSV file containing employee data and calculates the average salary per department. We'll need to handle potential exceptions such as missing or incorrect data.\n\n### Approach\n\n1. **Reading the CSV File:** We'll use Java's built-in `BufferedReader` to read the CSV file line by line.\n2. **Parsing the Data:** Each line will be split into components based on commas. We'll store the data in a suitable data structure.\n3. **Handling Exceptions:** We'll handle cases where data might be missing or incorrectly formatted.\n4. **Calculating Average Salary:** We'll use a `Map` to keep track of the total salary and the count of employees per department, then calculate the average.\n\n### Solution Code\n\n```java\nimport java.io.*;\nimport java.util.*;\n\npublic class EmployeeSalaryAnalyzer {\n\n    public static void main(String[] args) {\n        String csvFile = \"employees.csv\";\n        String line;\n        String delimiter = \",\";\n        Map<String, DepartmentData> departmentMap = new HashMap<>();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            // Skip the header line\n            br.readLine();\n\n            while ((line = br.readLine()) != null) {\n                String[] data = line.split(delimiter);\n                if (data.length != 4) {\n                    System.out.println(\"Skipping invalid data: \" + line);\n                    continue;\n                }\n\n                String name = data[0].trim();\n                int age;\n                String department = data[2].trim();\n                double salary;\n\n                try {\n                    age = Integer.parseInt(data[1].trim());\n                } catch (NumberFormatException e) {\n                    System.out.println(\"Invalid age for \" + name + \": \" + data[1]);\n                    continue;\n                }\n\n                try {\n                    salary = Double.parseDouble(data[3].trim());\n                } catch (NumberFormatException e) {\n                    System.out.println(\"Invalid salary for \" + name + \": \" + data[3]);\n                    continue;\n                }\n\n                DepartmentData deptData = departmentMap.get(department);\n                if (deptData == null) {\n                    deptData = new DepartmentData();\n                    departmentMap.put(department, deptData);\n                }\n                deptData.totalSalary += salary;\n                deptData.employeeCount++;\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Print average salaries per department\n        for (Map.Entry<String, DepartmentData> entry : departmentMap.entrySet()) {\n            String dept = entry.getKey();\n            DepartmentData data = entry.getValue();\n            double averageSalary = data.totalSalary / data.employeeCount;\n            System.out.printf(\"Average salary in %s: %.2f%n\", dept, averageSalary);\n        }\n    }\n\n    static class DepartmentData {\n        double totalSalary = 0;\n        int employeeCount = 0;\n    }\n}\n```\n\n### Explanation\n\n1. **Reading the CSV File:** We open the CSV file using a `BufferedReader` and skip the header line.\n2. **Parsing the Data:** Each line is split by commas. We check if there are exactly four components (name, age, department, salary). If not, we skip the line.\n3. **Handling Exceptions:** We handle `NumberFormatException` for age and salary parsing. If age or salary is invalid, we skip that employee's data.\n4. **Calculating Average Salary:** We use a `Map` where the key is the department name and the value is an object containing the total salary and the number of employees in that department. After processing all employees, we calculate the average salary for each department and print it.\n\nThis approach ensures that the program is robust and can handle various exceptions that might occur while reading and parsing the CSV file."
    }
]