[
    {
        "role": "user",
        "content": "Write a Node.js script that connects to an Azure Storage account and uploads a local file to a specified container. The script should also list all files in the container and download a specific file by name.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you write a Node.js script that interacts with Azure Storage. We'll be performing three main tasks:\n\n1. Uploading a local file to a specified container.\n2. Listing all files in that container.\n3. Downloading a specific file by name.\n\nTo achieve this, we'll be using the `@azure/storage-blob` package, which is the official Azure Storage Blob SDK for JavaScript.\n\n### Prerequisites\n\nBefore we start, make sure you have the following:\n\n- Node.js installed on your machine.\n- An Azure Storage account.\n- Your Storage account's connection string or account name and key.\n\n### Step 1: Set Up Your Project\n\nFirst, create a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir azure-storage-example\ncd azure-storage-example\nnpm init -y\n```\n\nNext, install the Azure Storage Blob SDK:\n\n```bash\nnpm install @azure/storage-blob\n```\n\n### Step 2: Write the Script\n\nCreate a new file, say `azureStorage.js`, and open it in your favorite text editor.\n\n#### Import Required Modules\n\nWe need to import the necessary modules from the SDK:\n\n```javascript\nconst { BlobServiceClient } = require('@azure/storage-blob');\n```\n\n#### Configure Your Storage Connection\n\nYou can connect to your storage account using either the connection string or the account name and key. For this example, I'll use the connection string.\n\nReplace `'your_connection_string'` with your actual connection string:\n\n```javascript\nconst connectionString = 'your_connection_string';\n```\n\n#### Create a BlobServiceClient\n\nUsing the connection string, create a `BlobServiceClient` instance:\n\n```javascript\nconst blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n```\n\n#### Specify the Container Name\n\nDefine the name of the container where you want to upload and list files:\n\n```javascript\nconst containerName = 'your_container_name';\n```\n\nMake sure the container exists in your storage account. If not, you'll need to create it first.\n\n#### Upload a Local File\n\nFirst, read the local file you want to upload. For this example, let's assume the file is named `localfile.txt`:\n\n```javascript\nconst fs = require('fs');\nconst filePath = 'localfile.txt';\nconst data = fs.readFileSync(filePath);\n```\n\nThen, get a reference to the container and create a block blob client for the file you want to upload:\n\n```javascript\nasync function uploadFile() {\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n    const blockBlobClient = containerClient.getBlockBlobClient('uploadedfile.txt');\n\n    try {\n        await blockBlobClient.uploadData(data);\n        console.log(`File '${filePath}' uploaded as 'uploadedfile.txt'`);\n    } catch (error) {\n        console.error(\"Error uploading file:\", error);\n    }\n}\n```\n\n#### List All Files in the Container\n\nTo list all blobs in the container:\n\n```javascript\nasync function listFiles() {\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n\n    try {\n        console.log(\"\\nListing blobs...\");\n\n        for await (const blob of containerClient.listBlobsFlat()) {\n            console.log(` - ${blob.name}`);\n        }\n    } catch (error) {\n        console.error(\"Error listing files:\", error);\n    }\n}\n```\n\n#### Download a Specific File\n\nTo download a blob by name, first get a block blob client for the blob, then download its content:\n\n```javascript\nasync function downloadFile(blobName) {\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n    try {\n        const response = await blockBlobClient.download(0);\n        const downloadedContent = (await streamToString(response.readableStreamBody)).toString();\n        console.log(`Downloaded file content: ${downloadedContent}`);\n    } catch (error) {\n        console.error(\"Error downloading file:\", error);\n    }\n}\n\nfunction streamToString(stream) {\n    const chunks = [];\n    return new Promise((resolve, reject) => {\n        stream.on(\"data\", (chunk) => chunks.push(Buffer.from(chunk)));\n        stream.on(\"error\", (err) => reject(err));\n        stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf8\")));\n    });\n}\n```\n\n#### Main Function to Execute Tasks\n\nFinally, create a main function to execute all the tasks in sequence:\n\n```javascript\nasync function main() {\n    await uploadFile();\n    await listFiles();\n    await downloadFile('uploadedfile.txt');\n}\n\nmain().catch((error) => {\n    console.error(\"Error running script:\", error);\n});\n```\n\n### Step 3: Run the Script\n\nSave your script and run it using Node.js:\n\n```bash\nnode azureStorage.js\n```\n\nThis should upload the local file, list all files in the container, and download the specified file, logging the outputs to the console.\n\n### Notes\n\n- Ensure that the Azure Storage SDK is up to date by checking the [official documentation](https://docs.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-nodejs).\n- Handle errors appropriately in a production environment.\n- Be cautious with your connection strings and never hardcode them in your source code. Consider using environment variables or Azure Key Vault for better security.\n\nThis script provides a basic example of interacting with Azure Blob Storage using Node.js. You can expand upon this by adding more features, such as handling different types of files, implementing authentication, or managing storage accounts programmatically.\n"
    }
]