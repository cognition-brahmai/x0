[
    {
        "role": "user",
        "content": "Create a C++ program that simulates a basic banking system. Users should be able to create accounts, deposit money, withdraw money, and check account balances. Implement proper error handling for invalid inputs and insufficient funds."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a basic banking system in C++ involves several steps. We'll need to handle user accounts, allow deposits and withdrawals, and check balances. We'll also need to make sure that the program handles errors gracefully, such as invalid inputs or attempts to withdraw more money than is available.\n\nFirst, let's outline the key components we'll need:\n\n1. **Account Class**: This will store account information like the account number, owner's name, and balance.\n\n2. **Bank Class**: This will manage multiple accounts, allowing creation of new accounts, deposits, withdrawals, and balance checks.\n\n3. **User Interface**: A simple text-based interface to interact with the bank system.\n\n4. **Error Handling**: Proper handling for invalid inputs and insufficient funds.\n\nLet's start by defining the `Account` class.\n\n### Account Class\n\nThe `Account` class will have private members for the account number, owner's name, and balance. It will have public methods to get and set these values.\n\n```cpp\nclass Account {\nprivate:\n    int accountNumber;\n    std::string ownerName;\n    double balance;\n\npublic:\n    Account(int accNum, std::string name, double initialBalance);\n    int getAccountNumber() const;\n    std::string getOwnerName() const;\n    double getBalance() const;\n    void deposit(double amount);\n    bool withdraw(double amount);\n};\n```\n\nNow, let's implement the methods for the `Account` class.\n\n```cpp\nAccount::Account(int accNum, std::string name, double initialBalance)\n    : accountNumber(accNum), ownerName(name), balance(initialBalance) {}\n\nint Account::getAccountNumber() const {\n    return accountNumber;\n}\n\nstd::string Account::getOwnerName() const {\n    return ownerName;\n}\n\ndouble Account::getBalance() const {\n    return balance;\n}\n\nvoid Account::deposit(double amount) {\n    if (amount > 0) {\n        balance += amount;\n    } else {\n        std::cout << \"Invalid deposit amount.\" << std::endl;\n    }\n}\n\nbool Account::withdraw(double amount) {\n    if (amount > 0 && amount <= balance) {\n        balance -= amount;\n        return true;\n    } else {\n        std::cout << \"Invalid withdrawal amount or insufficient funds.\" << std::endl;\n        return false;\n    }\n}\n```\n\n### Bank Class\n\nThe `Bank` class will manage multiple accounts using a map where the account number is the key and the account object is the value.\n\n```cpp\n#include <map>\n\nclass Bank {\nprivate:\n    std::map<int, Account> accounts;\n    int nextAccountNumber;\n\npublic:\n    Bank();\n    void createAccount(std::string name, double initialBalance);\n    Account* findAccount(int accNum);\n    void deposit(int accNum, double amount);\n    void withdraw(int accNum, double amount);\n    void checkBalance(int accNum);\n};\n```\n\nImplementing the `Bank` class.\n\n```cpp\nBank::Bank() : nextAccountNumber(1) {}\n\nvoid Bank::createAccount(std::string name, double initialBalance) {\n    int accNum = nextAccountNumber++;\n    accounts[accNum] = Account(accNum, name, initialBalance);\n    std::cout << \"Account created successfully. Your account number is: \" << accNum << std::endl;\n}\n\nAccount* Bank::findAccount(int accNum) {\n    auto it = accounts.find(accNum);\n    if (it != accounts.end()) {\n        return &it->second;\n    } else {\n        std::cout << \"Account not found.\" << std::endl;\n        return nullptr;\n    }\n}\n\nvoid Bank::deposit(int accNum, double amount) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        account->deposit(amount);\n        std::cout << \"Deposit successful. New balance: \" << account->getBalance() << std::endl;\n    }\n}\n\nvoid Bank::withdraw(int accNum, double amount) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        if (account->withdraw(amount)) {\n            std::cout << \"Withdrawal successful. New balance: \" << account->getBalance() << std::endl;\n        }\n    }\n}\n\nvoid Bank::checkBalance(int accNum) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        std::cout << \"Account balance: \" << account->getBalance() << std::endl;\n    }\n}\n```\n\n### User Interface\n\nWe'll create a simple text-based interface to interact with the bank system. This will involve a menu where users can choose to create an account, deposit money, withdraw money, check balance, or exit.\n\n```cpp\n#include <iostream>\n#include <string>\n\nint main() {\n    Bank bank;\n    int choice;\n    int accNum;\n    std::string name;\n    double amount;\n\n    do {\n        std::cout << \"\\n===== Banking System =====\\n\";\n        std::cout << \"1. Create Account\\n\";\n        std::cout << \"2. Deposit\\n\";\n        std::cout << \"3. Withdraw\\n\";\n        std::cout << \"4. Check Balance\\n\";\n        std::cout << \"5. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter name: \";\n                std::cin.ignore();\n                std::getline(std::cin, name);\n                std::cout << \"Enter initial balance: \";\n                std::cin >> amount;\n                bank.createAccount(name, amount);\n                break;\n            case 2:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                std::cout << \"Enter amount to deposit: \";\n                std::cin >> amount;\n                bank.deposit(accNum, amount);\n                break;\n            case 3:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                std::cout << \"Enter amount to withdraw: \";\n                std::cin >> amount;\n                bank.withdraw(accNum, amount);\n                break;\n            case 4:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                bank.checkBalance(accNum);\n                break;\n            case 5:\n                std::cout << \"Exiting...\" << std::endl;\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\" << std::endl;\n        }\n    } while (choice != 5);\n\n    return 0;\n}\n```\n\n### Error Handling\n\nWe've implemented basic error handling in the `Account` class methods for deposit and withdrawal. For example, deposits must be positive amounts, and withdrawals must not exceed the available balance. In the `Bank` class, we check if an account exists before performing operations on it.\n\nThis should give you a good starting point for a basic banking system in C++. You can expand upon this by adding more features like multiple account types, transaction histories, or user authentication.\n\n**Final Solution Code**\n\nTo create a basic banking system in C++, we need to handle user accounts, allow deposits and withdrawals, check balances, and manage multiple accounts. Below is a complete implementation with proper error handling.\n\n#### Account Class\n\nThis class stores account information and provides methods to manipulate and access account data.\n\n```cpp\n#include <iostream>\n#include <map>\n#include <string>\n\nclass Account {\nprivate:\n    int accountNumber;\n    std::string ownerName;\n    double balance;\n\npublic:\n    Account(int accNum, std::string name, double initialBalance);\n    int getAccountNumber() const;\n    std::string getOwnerName() const;\n    double getBalance() const;\n    void deposit(double amount);\n    bool withdraw(double amount);\n};\n```\n\nImplementation:\n\n```cpp\nAccount::Account(int accNum, std::string name, double initialBalance)\n    : accountNumber(accNum), ownerName(name), balance(initialBalance) {}\n\nint Account::getAccountNumber() const {\n    return accountNumber;\n}\n\nstd::string Account::getOwnerName() const {\n    return ownerName;\n}\n\ndouble Account::getBalance() const {\n    return balance;\n}\n\nvoid Account::deposit(double amount) {\n    if (amount > 0) {\n        balance += amount;\n    } else {\n        std::cout << \"Invalid deposit amount.\" << std::endl;\n    }\n}\n\nbool Account::withdraw(double amount) {\n    if (amount > 0 && amount <= balance) {\n        balance -= amount;\n        return true;\n    } else {\n        std::cout << \"Invalid withdrawal amount or insufficient funds.\" << std::endl;\n        return false;\n    }\n}\n```\n\n#### Bank Class\n\nThis class manages multiple accounts and provides methods to create accounts, deposit, withdraw, and check balances.\n\n```cpp\nclass Bank {\nprivate:\n    std::map<int, Account> accounts;\n    int nextAccountNumber;\n\npublic:\n    Bank();\n    void createAccount(std::string name, double initialBalance);\n    Account* findAccount(int accNum);\n    void deposit(int accNum, double amount);\n    void withdraw(int accNum, double amount);\n    void checkBalance(int accNum);\n};\n```\n\nImplementation:\n\n```cpp\nBank::Bank() : nextAccountNumber(1) {}\n\nvoid Bank::createAccount(std::string name, double initialBalance) {\n    int accNum = nextAccountNumber++;\n    accounts[accNum] = Account(accNum, name, initialBalance);\n    std::cout << \"Account created successfully. Your account number is: \" << accNum << std::endl;\n}\n\nAccount* Bank::findAccount(int accNum) {\n    auto it = accounts.find(accNum);\n    if (it != accounts.end()) {\n        return &it->second;\n    } else {\n        std::cout << \"Account not found.\" << std::endl;\n        return nullptr;\n    }\n}\n\nvoid Bank::deposit(int accNum, double amount) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        account->deposit(amount);\n        std::cout << \"Deposit successful. New balance: \" << account->getBalance() << std::endl;\n    }\n}\n\nvoid Bank::withdraw(int accNum, double amount) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        if (account->withdraw(amount)) {\n            std::cout << \"Withdrawal successful. New balance: \" << account->getBalance() << std::endl;\n        }\n    }\n}\n\nvoid Bank::checkBalance(int accNum) {\n    Account* account = findAccount(accNum);\n    if (account) {\n        std::cout << \"Account balance: \" << account->getBalance() << std::endl;\n    }\n}\n```\n\n#### Main Function\n\nThis provides a simple text-based user interface to interact with the banking system.\n\n```cpp\nint main() {\n    Bank bank;\n    int choice;\n    int accNum;\n    std::string name;\n    double amount;\n\n    do {\n        std::cout << \"\\n===== Banking System =====\\n\";\n        std::cout << \"1. Create Account\\n\";\n        std::cout << \"2. Deposit\\n\";\n        std::cout << \"3. Withdraw\\n\";\n        std::cout << \"4. Check Balance\\n\";\n        std::cout << \"5. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        std::cin >> choice;\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter name: \";\n                std::cin.ignore();\n                std::getline(std::cin, name);\n                std::cout << \"Enter initial balance: \";\n                std::cin >> amount;\n                bank.createAccount(name, amount);\n                break;\n            case 2:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                std::cout << \"Enter amount to deposit: \";\n                std::cin >> amount;\n                bank.deposit(accNum, amount);\n                break;\n            case 3:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                std::cout << \"Enter amount to withdraw: \";\n                std::cin >> amount;\n                bank.withdraw(accNum, amount);\n                break;\n            case 4:\n                std::cout << \"Enter account number: \";\n                std::cin >> accNum;\n                bank.checkBalance(accNum);\n                break;\n            case 5:\n                std::cout << \"Exiting...\" << std::endl;\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\" << std::endl;\n        }\n    } while (choice != 5);\n\n    return 0;\n}\n```\n\nThis code provides a basic structure for a banking system with account creation, deposits, withdrawals, and balance checks, complete with error handling for invalid inputs and insufficient funds."
    }
]