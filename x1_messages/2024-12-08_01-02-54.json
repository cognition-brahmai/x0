[
    {
        "role": "user",
        "content": "Create a Golang command-line tool that interacts with the GitHub API to perform the following tasks:\n    - List repositories for a given user.\n    - Create a new repository.\n    - Delete an existing repository.\n    - Add or update a file in a repository."
    },
    {
        "role": "assistant",
        "content": "Creating a command-line tool in Golang that interacts with the GitHub API involves several steps. You'll need to handle authentication, make HTTP requests to the GitHub API, and parse JSON responses. Below is a step-by-step guide to help you build this tool.\n\n### Step 1: Set Up Your Go Environment\n\nEnsure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\n### Step 2: Create a New Go Module\n\nCreate a new directory for your project and initialize a new Go module:\n\n```sh\nmkdir github-tool\ncd github-tool\ngo mod init github-tool\n```\n\n### Step 3: Install Required Packages\n\nYou'll need the following packages:\n\n- `github.com/google/go-github/v42` for interacting with the GitHub API.\n- `golang.org/x/oauth2` for authentication.\n\nInstall them using:\n\n```sh\ngo get github.com/google/go-github/v42/github\ngo get golang.org/x/oauth2\n```\n\n### Step 4: Set Up Authentication\n\nGitHub API requires authentication for most operations. You can use a personal access token (PAT) for this purpose.\n\n1. **Generate a PAT:**\n   - Go to your GitHub settings.\n   - Developer settings > Personal access tokens > Generate new token.\n   - Give it a description and select the necessary scopes (e.g., `repo` for repository access).\n\n2. **Store the PAT securely:**\n   - For simplicity, you can store it in an environment variable.\n   - Export it in your shell: `export GITHUB_TOKEN=your_token_here`\n\n### Step 5: Create the Main Function\n\nCreate a `main.go` file and set up the basic structure:\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/google/go-github/v42/github\"\n\t\"golang.org/x/oauth2\"\n)\n\nfunc main() {\n\tflag.Parse()\n\n\ttoken := os.Getenv(\"GITHUB_TOKEN\")\n\tif token == \"\" {\n\t\tlog.Fatal(\"GITHUB_TOKEN environment variable is not set.\")\n\t}\n\n\tctx := context.Background()\n\tts := oauth2.StaticTokenSource(\n\t\t&oauth2.Token{AccessToken: token},\n\t)\n\ttc := oauth2.NewClient(ctx, ts)\n\n\tclient := github.NewClient(tc)\n\n\tswitch flag.Arg(0) {\n\tcase \"list\":\n\t\tlistRepositories(client, flag.Arg(1))\n\tcase \"create\":\n\t\tcreateRepository(client, flag.Arg(1), flag.Arg(2))\n\tcase \"delete\":\n\t\tdeleteRepository(client, flag.Arg(1), flag.Arg(2))\n\tcase \"add-update-file\":\n\t\taddOrUpdateFile(client, flag.Arg(1), flag.Arg(2), flag.Arg(3), flag.Arg(4))\n\tdefault:\n\t\tfmt.Println(\"Usage:\")\n\t\tfmt.Println(\"  github-tool list <username>\")\n\t\tfmt.Println(\"  github-tool create <username> <repo_name>\")\n\t\tfmt.Println(\"  github-tool delete <username> <repo_name>\")\n\t\tfmt.Println(\"  github-tool add-update-file <username> <repo_name> <file_path> <content>\")\n\t}\n}\n```\n\n### Step 6: Implement Functions\n\n#### List Repositories\n\n```go\nfunc listRepositories(client *github.Client, username string) {\n\trepos, _, err := client.Repositories.List(ctx, username, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error listing repositories: %v\", err)\n\t}\n\tfor _, repo := range repos {\n\t\tfmt.Println(*repo.Name)\n\t}\n}\n```\n\n#### Create a New Repository\n\n```go\nfunc createRepository(client *github.Client, username, repoName string) {\n\tnewRepo := &github.Repository{\n\t\tName: github.String(repoName),\n\t}\n\t_, _, err := client.Repositories.Create(ctx, username, newRepo)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating repository: %v\", err)\n\t}\n\tfmt.Printf(\"Repository %s created successfully.\\n\", repoName)\n}\n```\n\n#### Delete an Existing Repository\n\n```go\nfunc deleteRepository(client *github.Client, username, repoName string) {\n\t_, err := client.Repositories.Delete(ctx, username, repoName)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error deleting repository: %v\", err)\n\t}\n\tfmt.Printf(\"Repository %s deleted successfully.\\n\", repoName)\n}\n```\n\n#### Add or Update a File in a Repository\n\n```go\nfunc addOrUpdateFile(client *github.Client, username, repoName, filePath, content string) {\n\tfileBytes := []byte(content)\n\tfileSHA, _, err := client.Repositories.GetContents(ctx, username, repoName, filePath, nil)\n\tvar sha *string\n\tif err == nil {\n\t\t// File exists, update it\n\t\tsha = fileSHA.SHA\n\t} else {\n\t\t// File does not exist, create it\n\t\tsha = nil\n\t}\ncommit := &github.RepositoryContentFileOptions{\n\t\tMessage: github.String(\"Update \" + filePath),\n\t\tContent: fileBytes,\n\t\tSHA:     sha,\n\t}\n\t_, _, err = client.Repositories.UpdateFile(ctx, username, repoName, filePath, commit)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error updating file: %v\", err)\n\t}\n\tfmt.Printf(\"File %s updated successfully.\\n\", filePath)\n}\n```\n\n### Step 7: Build and Run the Tool\n\nBuild your tool:\n\n```sh\ngo build -o github-tool main.go\n```\n\nRun the tool with different commands:\n\n- List repositories:\n\n  ```sh\n  ./github-tool list <username>\n  ```\n\n- Create a new repository:\n\n  ```sh\n  ./github-tool create <username> <repo_name>\n  ```\n\n- Delete an existing repository:\n\n  ```sh\n  ./github-tool delete <username> <repo_name>\n  ```\n\n- Add or update a file in a repository:\n\n  ```sh\n  ./github-tool add-update-file <username> <repo_name> <file_path> \"<content>\"\n  ```\n\n### Step 8: Handle Errors and Improve Usability\n\n- Add more robust error handling.\n- Provide better usage messages.\n- Consider using subcommands for better organization.\n\nThis should give you a solid starting point for building a command-line tool that interacts with the GitHub API using Go."
    }
]