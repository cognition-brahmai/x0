[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified position, as well as removing elements by value or position.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, let's dive into creating a singly linked list in Python. A linked list is a linear data structure where each element is a separate object, known as a node, that points to the next node in the sequence. This is different from arrays or lists in Python, which are built-in and use contiguous memory allocation.\n\nFirst, we need to understand what a node is. Each node in a linked list consists of two parts:\n\n1. **Data**: The value stored in the node.\n\n2. **Next**: A reference (or link) to the next node in the sequence.\n\nOur task is to create a class for the node and another class for the linked list itself, which will contain methods to manipulate the nodes.\n\n### Step 1: Define the Node Class\n\nWe'll start by defining a simple `Node` class that holds data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\nHere, `data` is the value of the node, and `next` is initially set to `None`, meaning it doesn't point to any other node.\n\n### Step 2: Define the Singly Linked List Class\n\nNow, we'll create the `LinkedList` class that will use nodes to build the list. This class will have methods to add elements at the beginning, end, and specified positions, as well as remove elements by value or position.\n\n#### Initialization\n\nWe'll initialize the linked list with a head node set to `None`.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n```\n\n#### Method to Add a Node at the Beginning\n\nThis method will add a new node with the given data at the start of the linked list.\n\n```python\ndef insert_at_beginning(self, data):\n    new_node = Node(data)\n    new_node.next = self.head\n    self.head = new_node\n```\n\n#### Method to Add a Node at the End\n\nThis method will traverse the linked list to the last node and add a new node there.\n\n```python\ndef insert_at_end(self, data):\n    new_node = Node(data)\n    if self.head is None:\n        self.head = new_node\n        return\n    last = self.head\n    while last.next:\n        last = last.next\n    last.next = new_node\n```\n\n#### Method to Add a Node at a Specified Position\n\nThis method will add a new node at a given position. Positions start at 0, where 0 is the beginning of the list.\n\n```python\ndef insert_at_position(self, position, data):\n    if position < 0:\n        print(\"Position cannot be negative\")\n        return\n    if position == 0:\n        self.insert_at_beginning(data)\n        return\n    new_node = Node(data)\n    current = self.head\n    count = 0\n    while current and count < position - 1:\n        current = current.next\n        count += 1\n    if current is None:\n        print(\"Position out of range\")\n        return\n    new_node.next = current.next\n    current.next = new_node\n```\n\n#### Method to Remove a Node by Value\n\nThis method will remove the first occurrence of a node with the given value.\n\n```python\ndef remove_by_value(self, key):\n    current = self.head\n    if current and current.data == key:\n        self.head = current.next\n        current = None\n        return\n    prev = None\n    while current and current.data != key:\n        prev = current\n        current = current.next\n    if current is None:\n        print(\"Value not found in the list\")\n        return\n    prev.next = current.next\n    current = None\n```\n\n#### Method to Remove a Node by Position\n\nThis method will remove a node at the given position. Positions start at 0.\n\n```python\ndef remove_by_position(self, position):\n    if position < 0:\n        print(\"Position cannot be negative\")\n        return\n    if self.head is None:\n        print(\"List is empty\")\n        return\n    if position == 0:\n        self.head = self.head.next\n        return\n    current = self.head\n    count = 0\n    while current and count < position - 1:\n        current = current.next\n        count += 1\n    if current is None:\n        print(\"Position out of range\")\n        return\n    if current.next is None:\n        print(\"Position out of range\")\n        return\n    current.next = current.next.next\n```\n\n#### Method to Display the Linked List\n\nIt's helpful to have a method to print the linked list for verification.\n\n```python\ndef display(self):\n    current = self.head\n    while current:\n        print(current.data, end=\" -> \")\n        current = current.next\n    print(\"None\")\n```\n\n### Complete Code\n\nPutting it all together:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        last = self.head\n        while last.next:\n            last = last.next\n        last.next = new_node\n\n    def insert_at_position(self, position, data):\n        if position < 0:\n            print(\"Position cannot be negative\")\n            return\n        if position == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, key):\n        current = self.head\n        if current and current.data == key:\n            self.head = current.next\n            current = None\n            return\n        prev = None\n        while current and current.data != key:\n            prev = current\n            current = current.next\n        if current is None:\n            print(\"Value not found in the list\")\n            return\n        prev.next = current.next\n        current = None\n\n    def remove_by_position(self, position):\n        if position < 0:\n            print(\"Position cannot be negative\")\n            return\n        if self.head is None:\n            print(\"List is empty\")\n            return\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if current is None:\n            print(\"Position out of range\")\n            return\n        if current.next is None:\n            print(\"Position out of range\")\n            return\n        current.next = current.next.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    llist = LinkedList()\n    llist.insert_at_end(1)\n    llist.insert_at_end(2)\n    llist.insert_at_end(3)\n    llist.display()  # Output: 1 -> 2 -> 3 -> None\n    llist.insert_at_beginning(0)\n    llist.display()  # Output: 0 -> 1 -> 2 -> 3 -> None\n    llist.insert_at_position(2, 1.5)\n    llist.display()  # Output: 0 -> 1 -> 1.5 -> 2 -> 3 -> None\n    llist.remove_by_value(1.5)\n    llist.display()  # Output: 0 -> 1 -> 2 -> 3 -> None\n    llist.remove_by_position(2)\n    llist.display()  # Output: 0 -> 1 -> 3 -> None\n```\n\n### Explanation\n\n1. **Node Class**: Represents each element in the linked list with `data` and `next` attributes.\n\n2. **LinkedList Class**:\n   - **insert_at_beginning**: Adds a new node at the start.\n   - **insert_at_end**: Adds a new node at the end.\n   - **insert_at_position**: Adds a new node at a specified position.\n   - **remove_by_value**: Removes the first occurrence of a node with the given value.\n   - **remove_by_position**: Removes the node at the given position.\n   - **display**: Prints the linked list.\n\nThis implementation covers the basic operations needed for a singly linked list, providing a solid foundation for more complex operations and applications."
    }
]