[
    {
        "role": "user",
        "content": "Develop a Node.js Express application that serves as a RESTful API for managing a simple to-do list. The API should support endpoints for creating, reading, updating, and deleting tasks, as well as marking them as complete or incomplete. Use MongoDB as the backend database, and ensure proper error handling and validation for user inputs.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through building a simple to-do list API using Node.js, Express, and MongoDB. This will cover the basics of CRUD operations and some error handling.\n\nFirst things first, make sure you have Node.js installed on your machine. You can download it from nodejs.org. Once you have Node.js set up, you'll also need to install MongoDB. You can download it from mongodb.com. Make sure to set up a MongoDB instance that your application can connect to.\n\nNow, let's start by setting up a new Node.js project. Open your terminal or command prompt and create a new directory for your project:\n\n```\nmkdir todo-api\ncd todo-api\n```\n\nInitialize a new Node.js project:\n\n```\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\nNext, install the necessary dependencies. We'll need Express for the server, Mongoose for interacting with MongoDB, and body-parser for handling request bodies:\n\n```\nnpm install express mongoose body-parser\n```\n\nNow, let's set up the basic structure of our application. Create the following files and folders:\n\n```\ntodo-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Task.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 tasks.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\nLet's start by defining our Task model. Open `models/Task.js` and add the following code:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst taskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  completed: { type: Boolean, default: false }\n});\n\nmodule.exports = mongoose.model('Task', taskSchema);\n```\n\nThis defines a Task model with a title (a required string) and a completed status (a boolean with a default value of false).\n\nNext, set up the routes for our API. Open `routes/tasks.js` and add the following code:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst Task = require('../models/Task');\n\n// Get all tasks\nrouter.get('/', async (req, res) => {\n  try {\n    const tasks = await Task.find();\n    res.json(tasks);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get one task by ID\nrouter.get('/:id', getTask, (req, res) => {\n  res.json(res.task);\n});\n\n// Create a new task\nrouter.post('/', async (req, res) => {\n  const task = new Task({\n    title: req.body.title,\n    completed: req.body.completed\n  });\n\n  try {\n    const newTask = await task.save();\n    res.status(201).json(newTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update a task\nrouter.patch('/:id', getTask, async (req, res) => {\n  if (req.body.title != null) {\n    res.task.title = req.body.title;\n  }\n  if (req.body.completed != null) {\n    res.task.completed = req.body.completed;\n  }\n\n  try {\n    const updatedTask = await res.task.save();\n    res.json(updatedTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a task\nrouter.delete('/:id', getTask, async (req, res) => {\n  try {\n    await res.task.remove();\n    res.json({ message: 'Deleted Task' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\nasync function getTask(req, res, next) {\n  let task;\n  try {\n    task = await Task.findById(req.params.id);\n    if (task == null) {\n      return res.status(404).json({ message: 'Cannot find task' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.task = task;\n  next();\n}\n\nmodule.exports = router;\n```\n\nThis router handles all the CRUD operations for tasks. It includes middleware for getting a task by ID, creating, updating, and deleting tasks, with proper error handling.\n\nNow, let's set up the main application file, `app.js`:\n\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst tasksRouter = require('./routes/tasks');\n\nconst app = express();\napp.use(express.json());\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost:27017/todo-api', {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n})\n.then(() => {\n  console.log('Connected to MongoDB');\n})\n.catch((err) => {\n  console.error('Connection error', err);\n});\n\napp.use('/tasks', tasksRouter);\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nIn this file, we connect to our MongoDB instance and set up the tasks router to handle requests to the `/tasks` endpoint.\n\nMake sure your MongoDB server is running, and then start your application:\n\n```\nnode app.js\n```\n\nYou should see \"Connected to MongoDB\" and \"Server is running on port 3000\" in your console.\n\nNow, you can test your API using tools like Postman or curl. Here are some example commands:\n\n- To get all tasks:\n\n```\ncurl http://localhost:3000/tasks\n```\n\n- To create a new task:\n\n```\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Task\"}' http://localhost:3000/tasks\n```\n\n- To update a task:\n\n```\ncurl -X PATCH -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Task\",\"completed\":true}' http://localhost:3000/tasks/<task_id>\n```\n\n- To delete a task:\n\n```\ncurl -X DELETE http://localhost:3000/tasks/<task_id>\n```\n\nReplace `<task_id>` with the actual ID of the task you want to update or delete.\n\nThis is a very basic implementation. In a real-world application, you'd want to add more robust error handling, input validation, and possibly user authentication and authorization.\n\nAlso, consider adding environment variables for your database connection string and other configuration settings to keep sensitive information secure.\n\nI hope this helps you get started with building your to-do list API! If you have any questions or need further assistance, feel free to ask."
    }
]