[
    {
        "role": "user",
        "content": "Write a Python function that checks if a number is perfect square without using any built-in function."
    },
    {
        "role": "assistant",
        "content": "A perfect square is a number that can be expressed as the product of two equal integers. For example, 9 is a perfect square because it's 3*3, but 10 isn't because there's no integer multiplied by itself that equals 10.\n\nTo check if a number is a perfect square without using any built-in functions, we can implement a simple algorithm. One straightforward way is to iterate through numbers starting from 1 up to the number itself and check if any number multiplied by itself equals the given number.\n\nHowever, this approach can be inefficient for large numbers because it may require many iterations. A more efficient method is to use a binary search approach, which reduces the number of iterations needed, especially for larger numbers.\n\nHere's a step-by-step explanation of how the binary search approach works:\n\n1. **Initialization**: Start with two pointers, `low` and `high`. Set `low` to 1 and `high` to the given number.\n\n2. **Binary Search Loop**:\n   - While `low` is less than or equal to `high`:\n     - Calculate the midpoint, `mid`, between `low` and `high`.\n     - Compute the square of `mid`.\n     - If the square of `mid` is equal to the given number, return `True` (it's a perfect square).\n     - If the square of `mid` is less than the given number, set `low` to `mid + 1`.\n     - If the square of `mid` is greater than the given number, set `high` to `mid - 1`.\n\n3. **Completion**: If the loop completes without finding a perfect square, return `False`.\n\nThis method is efficient because it divides the search space in half each time, leading to a time complexity of O(log n), where n is the given number.\n\nLet's implement this in Python:\n\n```python\ndef is_perfect_square(num):\n    if num < 1:\n        return False\n    low = 1\n    high = num\n    while low <= high:\n        mid = (low + high) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        elif square < num:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return False\n\n# Test the function\nprint(is_perfect_square(16))  # True\nprint(is_perfect_square(14))  # False\n```\n\n### Explanation:\n\n1. **Initialization**: We set `low` to 1 and `high` to the given number.\n2. **Binary Search**:\n   - We calculate the midpoint `mid` and its square.\n   - If the square equals the number, it's a perfect square.\n   - If the square is less than the number, we adjust `low` to `mid + 1`.\n   - If the square is greater than the number, we adjust `high` to `mid - 1`.\n3. **Result**: If we exhaust the search space without finding a perfect square, return `False`.\n\nThis approach ensures that we efficiently determine if a number is a perfect square without relying on any built-in functions."
    }
]