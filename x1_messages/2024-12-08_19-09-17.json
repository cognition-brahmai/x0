[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a simple command-line calculator, accepting two numbers and an operator (+, -, *, /) as input, performing the operation, and outputting the result.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple C++ program that acts as a command-line calculator. It takes two numbers and an operator as input and performs the specified operation, then outputs the result.\n\n```cpp\n#include <iostream>\n#include <stdexcept>\n\nint main() {\n    double num1, num2;\n    char operatorChar;\n\n    std::cout << \"Simple Calculator\\n\";\n    std::cout << \"Enter first number: \";\n    if (!(std::cin >> num1)) {\n        std::cerr << \"Invalid input. Please enter a valid number.\\n\";\n        return 1;\n    }\n\n    std::cout << \"Enter operator (+, -, *, /): \";\n    if (!(std::cin >> operatorChar)) {\n        std::cerr << \"Invalid input. Please enter a valid operator.\\n\";\n        return 1;\n    }\n\n    std::cout << \"Enter second number: \";\n    if (!(std::cin >> num2)) {\n        std::cerr << \"Invalid input. Please enter a valid number.\\n\";\n        return 1;\n    }\n\n    double result;\n    try {\n        switch (operatorChar) {\n            case '+':\n                result = num1 + num2;\n                break;\n            case '-':\n                result = num1 - num2;\n                break;\n            case '*':\n                result = num1 * num2;\n                break;\n            case '/':\n                if (num2 == 0) {\n                    throw std::runtime_error(\"Division by zero is not allowed.\");\n                }\n                result = num1 / num2;\n                break;\n            default:\n                throw std::invalid_argument(\"Invalid operator. Please use +, -, *, or /.\");\n        }\n    } catch (const std::exception& e) {\n        std::cerr << \"Error: \" << e.what() << '\\n';\n        return 1;\n    }\n\n    std::cout << \"Result: \" << result << '\\n';\n    return 0;\n}\n```\n\n### Explanation:\n1. **Input Handling**:\n   - The program prompts the user to enter two numbers and an operator.\n   - It checks if the inputs are valid using `std::cin` and provides error messages for invalid inputs.\n\n2. **Operation Processing**:\n   - Based on the operator entered, it performs the corresponding arithmetic operation.\n   - For division, it checks if the denominator is zero to avoid division by zero errors.\n\n3. **Error Handling**:\n   - Uses `try-catch` blocks to handle exceptions such as invalid operators or division by zero.\n   - Provides meaningful error messages to the user.\n\n4. **Output**:\n   - Displays the result of the operation if successful.\n\nThis program is a basic example of a command-line calculator in C++ and handles common error scenarios to ensure robustness."
    }
]