[
    {
        "role": "user",
        "content": "Write a Python script that monitors a directory for newly added image files (JPEG, PNG, etc.), automatically resizes them to a specified width and height using the Pillow library, and uploads the resized images to an AWS S3 bucket.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Python script that monitors a directory for newly added image files, resizes them, and uploads them to an AWS S3 bucket, you can follow these steps:\n\n1. **Set up your environment:**\n   - Install necessary libraries: `Pillow` for image processing and `boto3` for interacting with AWS S3.\n   - Configure AWS credentials so that `boto3` can access your S3 bucket.\n\n2. **Monitor the directory:**\n   - Use the `watchdog` library to monitor the directory for new files.\n\n3. **Resize images:**\n   - Use `Pillow` to open and resize the images to the specified dimensions.\n\n4. **Upload to S3:**\n   - Use `boto3` to upload the resized images to the specified S3 bucket.\n\nBelow is a complete Python script that accomplishes these tasks:\n\n### Prerequisites\n\n- Install required packages:\n\n```bash\npip install pillow boto3 watchdog\n```\n\n- Configure AWS credentials:\n\n  You can set up your AWS credentials using the AWS CLI or by creating a `~/.aws/credentials` file.\n\n  Example `~/.aws/credentials`:\n\n  ```ini\n  [default]\n  aws_access_key_id = YOUR_ACCESS_KEY\n  aws_secret_access_key = YOUR_SECRET_KEY\n  ```\n\n### Script\n\n```python\nimport time\nfrom PIL import Image\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\nimport boto3\nimport os\n\n# Configuration\nDIRECTORY_TO_WATCH = \"/path/to/watch\"  # Change this to the directory you want to monitor\nS3_BUCKET_NAME = \"your-s3-bucket-name\"  # Change this to your S3 bucket name\nRESIZED_IMAGE_SIZE = (800, 600)  # Resize dimensions (width, height)\n\nclass ImageResizeAndUploadHandler(FileSystemEventHandler):\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            if file_path.lower().endswith(('.png', '.jpg', '.jpeg')):\n                self.resize_and_upload(file_path)\n\n    def resize_and_upload(self, file_path):\n        try:\n            # Open the image\n            with Image.open(file_path) as img:\n                # Resize the image\n                img = img.resize(RESIZED_IMAGE_SIZE, Image.ANTIALIAS)\n                # Save the resized image temporarily\n                resized_path = file_path + \".resized\"\n                img.save(resized_path)\n\n                # Upload to S3\n                s3 = boto3.client('s3')\n                s3.upload_file(resized_path, S3_BUCKET_NAME, os.path.basename(resized_path))\n\n                # Optionally, remove the temporary resized file\n                os.remove(resized_path)\n\n                print(f\"Uploaded {resized_path} to {S3_BUCKET_NAME}\")\n        except Exception as e:\n            print(f\"Error processing {file_path}: {e}\")\n\nif __name__ == \"__main__\":\n    event_handler = ImageResizeAndUploadHandler()\n    observer = Observer()\n    observer.schedule(event_handler, DIRECTORY_TO_WATCH, recursive=False)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n```\n\n### Explanation\n\n1. **Directory Monitoring:**\n   - The script uses the `watchdog` library to monitor the specified directory for new files.\n   - When a new file is created, the `on_created` method is triggered.\n\n2. **Image Processing:**\n   - If the new file is an image (JPEG or PNG), it is opened using `Pillow`.\n   - The image is resized to the dimensions specified in `RESIZED_IMAGE_SIZE`.\n\n3. **Upload to S3:**\n   - The resized image is saved temporarily.\n   - `boto3` is used to upload the resized image to the specified S3 bucket.\n   - The temporary resized file is then removed.\n\n4. **Error Handling:**\n   - Any exceptions during file processing are caught and printed.\n\nMake sure to replace `/path/to/watch` with the actual path of the directory you want to monitor and `your-s3-bucket-name` with your actual S3 bucket name. Also, ensure that your AWS credentials are correctly configured.\n\n"
    }
]