[
    {
        "role": "user",
        "content": "Write a bash script to monitor CPU usage and send an email alert when it exceeds a certain threshold. The script should take two command line arguments: the threshold percentage (e.g., 80%) and the recipient's email address.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Writing a bash script to monitor CPU usage and send an email alert when it goes beyond a specified threshold is a practical task, especially for system administrators who need to keep an eye on server performance.\n\nFirst, let's understand what we need to do:\n\n1. **Monitor CPU Usage:** We need to check the current CPU usage periodically.\n2. **Check Against Threshold:** Compare the current CPU usage with a predefined threshold.\n3. **Send Email Alert:** If the CPU usage exceeds the threshold, send an email to a specified recipient.\n\nTo achieve this, we'll use some standard Linux utilities and bash scripting features.\n\n### Approach\n\n1. **Reading Command Line Arguments:** The script will accept two arguments: the threshold percentage and the email address.\n2. **Monitoring CPU Usage:** We'll use the `top` command to get real-time CPU usage data.\n3. **Sending Email:** If the CPU usage exceeds the threshold, we'll use the `mail` command to send an alert email.\n\n### Solution Code\n\n```bash\n#!/bin/bash\n\n# Check if exactly two arguments are provided\nif [ \"$#\" -ne 2 ]; then\n    echo \"Usage: $0 <threshold_percentage> <email_address>\"\n    exit 1\nfi\n\nTHRESHOLD=$1\nEMAIL=$2\n\n# Function to get current CPU usage\nget_cpu_usage() {\n    top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1}'\n}\n\n# Monitor CPU usage and send email if threshold is exceeded\nwhile true; do\n    CPU_USAGE=$(get_cpu_usage)\n    if (( $(echo \"$CPU_USAGE > $THRESHOLD\" | bc -l) )); then\n        echo \"CPU usage is above threshold: $CPU_USAGE%\" | mail -s \"CPU Usage Alert\" $EMAIL\n    fi\n    # Sleep for a minute before checking again\n    sleep 60\ndone\n```\n\n### Explanation\n\n1. **Argument Check:** The script first checks if exactly two arguments are provided. If not, it prints usage information and exits.\n2. **CPU Usage Function:** The `get_cpu_usage` function uses `top -bn1` to get a single batch of statistics, `grep` to find the CPU line, `sed` to extract the idle percentage, and `awk` to calculate the used percentage.\n3. **Monitoring Loop:** The script enters an infinite loop where it checks the CPU usage every minute. If the usage exceeds the threshold, it sends an email using the `mail` command.\n4. **Sleep Interval:** The script sleeps for 60 seconds between checks to avoid high CPU usage itself.\n\n### Notes\n\n- Ensure that the `mail` utility is installed and configured on your system to send emails.\n- You might need to adjust the email sending part based on your email server configuration.\n- Running this script in the background or using a process manager is recommended for continuous monitoring.\n\nThis script provides a basic framework for monitoring CPU usage and alerting via email. Depending on your specific needs, you can enhance it further, such as adding more detailed logging, supporting multiple email recipients, or monitoring other system metrics."
    }
]