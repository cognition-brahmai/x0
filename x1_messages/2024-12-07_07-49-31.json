[
    {
        "role": "user",
        "content": "Write a Java program that reads a CSV file containing user information (name, age, email) and writes the data into an SQLite database. The program should handle exceptions for missing or incorrect data in the CSV file."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java program that reads a CSV file containing user information (name, age, email) and writes the data into an SQLite database. The program includes exception handling to manage missing or incorrect data in the CSV file.\n\nFirst, ensure you have the necessary dependencies:\n\n1. **SQLite JDBC Driver**: You can download it from [SQLite JDBC](https://repo1.maven.org/maven2/org/xerial/sqlite-jdbc/3.36.0.3/sqlite-jdbc-3.36.0.3.jar).\n\n2. **OpenCSV Library**: This library helps in reading CSV files easily. You can download it from [OpenCSV](http://opencsv.sourceforge.net/).\n\nAdd these JAR files to your project's classpath.\n\n## Program Code\n\n```java\nimport com.opencsv.CSVReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.SQLException;\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class CsvToSqlite {\n\n    public static void main(String[] args) {\n        String csvFile = \"users.csv\";\n        String jdbcUrl = \"jdbc:sqlite:user_database.db\";\n\n        try (Connection conn = DriverManager.getConnection(jdbcUrl)) {\n            createTable(conn);\n\n            List<User> users = readCsv(csvFile);\n            insertUsers(conn, users);\n\n            System.out.println(\"Data imported successfully.\");\n        } catch (SQLException | IOException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n\n    private static void createTable(Connection conn) throws SQLException {\n        String sql = \"CREATE TABLE IF NOT EXISTS users (\" +\n                \"id INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                \"name TEXT NOT NULL,\" +\n                \"age INTEGER NOT NULL,\" +\n                \"email TEXT NOT NULL UNIQUE\" +\n                \");\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.execute();\n        }\n    }\n\n    private static List<User> readCsv(String csvFile) throws IOException {\n        List<User> users = new ArrayList<>();\n        try (CSVReader reader = new CSVReader(new FileReader(csvFile))) {\n            String[] line;\n            while ((line = reader.readNext()) != null) {\n                if (line.length != 3) {\n                    System.err.println(\"Skipping invalid row: \" + String.join(\", \", line));\n                    continue;\n                }\n                String name = line[0].trim();\n                String ageStr = line[1].trim();\n                String email = line[2].trim();\n\n                int age;\n                try {\n                    age = Integer.parseInt(ageStr);\n                } catch (NumberFormatException e) {\n                    System.err.println(\"Invalid age format: \" + ageStr);\n                    continue;\n                }\n\n                if (name.isEmpty() || email.isEmpty()) {\n                    System.err.println(\"Skipping row with empty name or email.\");\n                    continue;\n                }\n\n                users.add(new User(name, age, email));\n            }\n        }\n        return users;\n    }\n\n    private static void insertUsers(Connection conn, List<User> users) throws SQLException {\n        String sql = \"INSERT INTO users(name, age, email) VALUES(?,?,?)\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            for (User user : users) {\n                try {\n                    pstmt.setString(1, user.name);\n                    pstmt.setInt(2, user.age);\n                    pstmt.setString(3, user.email);\n                    pstmt.addBatch();\n                } catch (SQLException e) {\n                    System.err.println(\"Error inserting user: \" + user + \", \" + e.getMessage());\n                }\n            }\n            pstmt.executeBatch();\n        }\n    }\n\n    static class User {\n        String name;\n        int age;\n        String email;\n\n        User(String name, int age, String email) {\n            this.name = name;\n            this.age = age;\n            this.email = email;\n        }\n\n        @Override\n        public String toString() {\n            return \"User{name='\" + name + \"', age=\" + age + \", email='\" + email + \"'}\";\n        }\n    }\n}\n```\n\n## Explanation\n\n1. **Database Setup**:\n   - The `createTable` method creates an SQLite table named `users` if it doesn't already exist. The table has columns for `id`, `name`, `age`, and `email`.\n\n2. **Reading CSV**:\n   - The `readCsv` method uses OpenCSV to read the CSV file. It expects three columns: name, age, and email.\n   - It validates each row to ensure there are exactly three fields and that the age is a valid integer.\n   - Rows with missing or incorrect data are skipped and error messages are printed.\n\n3. **Inserting Data**:\n   - The `insertUsers` method prepares an SQL INSERT statement and uses a batch to insert multiple users efficiently.\n   - It handles exceptions for individual user insertions and prints error messages for failed inserts.\n\n4. **User Class**:\n   - A simple class to hold user data.\n\nMake sure to adjust the CSV file path and database URL as needed. This program provides a robust way to import CSV data into an SQLite database while handling common data issues."
    }
]