[
    {
        "role": "user",
        "content": "Write a Golang REST API with two endpoints: one for creating new users (with username, email, and password) and another for retrieving user information by their username. Store user data in a MariaDB database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'll guide you through creating a simple Golang REST API with two endpoints: one for creating new users and another for retrieving user information by username. We'll store the user data in a MariaDB database.\n\n### Prerequisites\n\n1. **Golang** installed on your machine.\n2. **MariaDB** installed and running.\n3. **GORM** package for ORM operations.\n4. **Gin** package for building the web server.\n\nYou can install the required packages using `go get`:\n\n```sh\ngo get -u gorm.io/gorm\ngo get -u gorm.io/driver/mysql\ngo get -u github.com/gin-gonic/gin\n```\n\n### Step 1: Set Up the Database\n\nFirst, set up your MariaDB database. You'll need to create a database and a table for users.\n\n#### Create Database and Table\n\n```sql\nCREATE DATABASE go_rest_api;\n\nUSE go_rest_api;\n\nCREATE TABLE users (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    username VARCHAR(255) NOT NULL UNIQUE,\n    email VARCHAR(255) NOT NULL UNIQUE,\n    password VARCHAR(255) NOT NULL\n);\n```\n\n### Step 2: Define the User Model\n\nCreate a `user.go` file to define the user model.\n\n```go\npackage models\n\ntype User struct {\n    ID       uint   `json:\"id\"`\n    Username string `json:\"username\" gorm:\"unique\"`\n    Email    string `json:\"email\" gorm:\"unique\"`\n    Password string `json:\"password\"`\n}\n```\n\n### Step 3: Set Up the Database Connection\n\nCreate a `db.go` file to handle the database connection.\n\n```go\npackage models\n\nimport (\n    \"gorm.io/driver/mysql\"\n    \"gorm.io/gorm\"\n)\n\nvar DB *gorm.DB\n\nfunc Connect() {\n    dsn := \"user:password@tcp(127.0.0.1:3306)/go_rest_api?charset=utf8mb4&parseTime=True&loc=Local\"\n    db, err := gorm.Open(mysql.Open(dsn), &gorm.Config{})\n    if err != nil {\n        panic(\"Failed to connect to database!\")\n    }\n    DB = db\n}\n```\n\nMake sure to replace `\"user:password@tcp(127.0.0.1:3306)/go_rest_api\"` with your actual database connection details.\n\n### Step 4: Implement the API Endpoints\n\nCreate a `main.go` file to set up the Gin web server and define the API endpoints.\n\n```go\npackage main\n\nimport (\n    \"github.com/gin-gonic/gin\"\n    \"your_package_name/models\"\n)\n\nfunc main() {\n    models.Connect()\n    models.DB.AutoMigrate(&models.User{})\n\n    router := gin.Default()\n\n    router.POST(\"/users\", CreateUser)\n    router.GET(\"/users/:username\", GetUserByUsername)\n\n    router.Run(\":8080\")\n}\n\nfunc CreateUser(c *gin.Context) {\n    var newUser models.User\n    if err := c.ShouldBindJSON(&newUser); err != nil {\n        c.JSON(400, gin.H{\"error\": err.Error()})\n        return\n    }\n\n    result := models.DB.Create(&newUser)\n    if result.Error != nil {\n        c.JSON(500, gin.H{\"error\": \"Failed to create user\"})\n        return\n    }\n\n    c.JSON(201, newUser)\n}\n\nfunc GetUserByUsername(c *gin.Context) {\n    username := c.Param(\"username\")\n\n    var user models.User\n    result := models.DB.Where(\"username = ?\", username).First(&user)\n    if result.RowsAffected == 0 {\n        c.JSON(404, gin.H{\"error\": \"User not found\"})\n        return\n    }\n\n    c.JSON(200, user)\n}\n```\n\nReplace `\"your_package_name\"` with the actual package name of your project.\n\n### Step 5: Run the Application\n\nMake sure your MariaDB server is running and the database is set up correctly. Then, run your Go application:\n\n```sh\ngo run main.go\n```\n\nYour API should now be running on `http://localhost:8080`.\n\n### Testing the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n#### Create a New User\n\n**Endpoint:** `POST /users`\n\n**Request Body:**\n\n```json\n{\n    \"username\": \"exampleuser\",\n    \"email\": \"user@example.com\",\n    \"password\": \"password123\"\n}\n```\n\n#### Get User by Username\n\n**Endpoint:** `GET /users/:username`\n\n**URL:** `http://localhost:8080/users/exampleuser`\n\nThis setup provides a basic REST API for creating and retrieving users with data stored in a MariaDB database using GORM for ORM operations and Gin for the web framework."
    }
]