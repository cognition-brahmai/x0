[
    {
        "role": "user",
        "content": "Develop a Python script that generates a static website from Markdown files. The script should read a directory of Markdown files, convert them to HTML using a library like Mistune, and apply a consistent template with navigation links. The generated website should be saved in a specified output directory.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I have this task to create a Python script that turns Markdown files into a static website. I need to read a bunch of Markdown files, convert them to HTML, and make sure they all look the same with navigation links. Then, save everything in a specific folder. Sounds manageable!\n\nFirst, I need to understand what tools I have. The\u63d0\u793a mentions using a library like Mistune for converting Markdown to HTML. I should probably look into Mistune to see how it works. Also, I need to apply a consistent template, which probably means having a base HTML template that each page uses, including the navigation.\n\nLet me break this down step by step.\n\n**Step 1: Set up the project structure**\n\nI need to decide how the directories will be organized. For example:\n\n- `input_dir/`: contains all the Markdown files.\n\n- `templates/`: contains the HTML template.\n\n- `output_dir/`: where the generated HTML files will be saved.\n\nI can make these directories configurable via command-line arguments or config files, but for simplicity, maybe hardcode them for now.\n\n**Step 2: Read Markdown files**\n\nI need to read all the Markdown files from the input directory. I should probably assume that all files in this directory with a `.md` extension are Markdown files to be processed.\n\nI can use Python's `os` module to list all files in the directory and filter by `.md` extension.\n\n**Step 3: Convert Markdown to HTML**\n\nFor this, I'll use the Mistune library. I need to install it first if I don't have it.\n\nI can do `pip install mistune` to install it.\n\nOnce installed, I can import it and use it to convert Markdown text to HTML.\n\n**Step 4: Apply a consistent template**\n\nI need a base HTML template that each page will use. This template should include the navigation links.\n\nProbably, the template will have placeholders where the content will be inserted.\n\nI can use Python's string formatting or even a templating engine like Jinja2 for this.\n\nBut to keep it simple, maybe use plain string formatting for now.\n\n**Step 5: Generate navigation links**\n\nThe navigation should probably list all the pages. So, I need to generate a list of links based on the Markdown files found.\n\nI can extract the file names without extensions and use them as page titles and URLs.\n\n**Step 6: Save the generated HTML files**\n\nFinally, save each generated HTML file in the output directory, preserving the structure if necessary.\n\n**Potential challenges:**\n\n- Handling relative paths for assets like CSS or images.\n\n- Ensuring that the navigation is correctly updated for each page.\n\n- Dealing with special characters or potential security issues like XSS.\n\n**Plan of action:**\n\n1. Set up the project structure with input, template, and output directories.\n\n2. Write a function to read all Markdown files from the input directory.\n\n3. Install and import Mistune, then write a function to convert Markdown to HTML.\n\n4. Create a base HTML template with placeholders for title and content.\n\n5. Write a function to generate navigation links based on the list of Markdown files.\n\n6. Combine the navigation and content into the template for each page.\n\n7. Save each generated HTML file in the output directory.\n\n8. Test the script with a sample set of Markdown files.\n\nI think that covers the basics. I might need to adjust some details as I implement it, but this should be a good starting point.\n\n## Final Solution\nTo create a Python script that generates a static website from Markdown files, follow these steps:\n\n### Approach\n\n1. **Set Up Project Structure:**\n   - `input_dir/`: Contains Markdown files.\n   - `templates/`: Contains the HTML template.\n   - `output_dir/`: Where the generated HTML files will be saved.\n\n2. **Read Markdown Files:**\n   - Read all `.md` files from the `input_dir`.\n\n3. **Convert Markdown to HTML:**\n   - Use the `Mistune` library to convert Markdown to HTML.\n\n4. **Apply Consistent Template:**\n   - Use a base HTML template with placeholders for content and navigation.\n\n5. **Generate Navigation Links:**\n   - Create navigation links based on the Markdown files found.\n\n6. **Save Generated HTML Files:**\n   - Save each HTML file in the `output_dir`.\n\n### Solution Code\n\n```python\nimport os\nimport mistune\n\n# Directory setup\ninput_dir = 'input_dir'\ntemplate_dir = 'templates'\noutput_dir = 'output_dir'\n\n# Ensure output directory exists\nif not os.path.exists(output_dir):\n    os.makedirs(output_dir)\n\n# Read all Markdown files\ndef get_markdown_files(directory):\n    return [f for f in os.listdir(directory) if f.endswith('.md')]\n\n# Convert Markdown to HTML\nmarkdown = mistune.create_markdown(plugins=['strikethrough', 'table'])\n\n# Read template\nwith open(os.path.join(template_dir, 'base.html'), 'r') as file:\n    template = file.read()\n\n# Generate navigation links\ndef generate_nav(files):\n    nav = ''\n    for file in files:\n        name = os.path.splitext(file)[0]\n        nav += f'<li><a href=\"{name}.html\">{name}</a></li>'\n    return nav\n\nnav_links = generate_nav(get_markdown_files(input_dir))\n\n# Process each Markdown file\nfor md_file in get_markdown_files(input_dir):\n    with open(os.path.join(input_dir, md_file), 'r') as file:\n        content = file.read()\n    html_content = markdown(content)\n    \n    # Extract title (assuming first line is title)\n    title = html_content.split('\\n')[0].replace('<h1>', '').replace('</h1>', '')\n    \n    # Apply template\n    final_html = template.replace('{{ title }}', title)\n    final_html = final_html.replace('{{ nav }}', nav_links)\n    final_html = final_html.replace('{{ content }}', html_content)\n    \n    # Save to output directory\n    html_file_name = os.path.splitext(md_file)[0] + '.html'\n    with open(os.path.join(output_dir, html_file_name), 'w') as file:\n        file.write(final_html)\n\nprint(f\"Static website generated in {output_dir}\")\n```\n\n### Explanation\n\n1. **Directory Setup:**\n   - Define paths for input, template, and output directories.\n\n2. **Read Markdown Files:**\n   - List all `.md` files in the input directory.\n\n3. **Convert Markdown to HTML:**\n   - Use `Mistune` to convert Markdown content to HTML.\n\n4. **Read Template:**\n   - Read the base HTML template from the template directory.\n\n5. **Generate Navigation Links:**\n   - Create navigation links based on the available Markdown files.\n\n6. **Process Each Markdown File:**\n   - Read and convert each Markdown file to HTML.\n   - Extract the title (assuming it's the first line).\n   - Apply the template, replacing placeholders with actual content and navigation.\n   - Save the generated HTML file in the output directory.\n\nThis script provides a basic static site generator using Python and Mistune, suitable for converting Markdown files into a consistent, navigable static website."
    }
]