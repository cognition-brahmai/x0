[
    {
        "role": "user",
        "content": "Implement a C++ program that calculates the factorial of a given non-negative integer using recursion."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that calculates the factorial of a given non-negative integer using recursion. The program includes a recursive function to compute the factorial and a main function to handle user input and display the result.\n\n```cpp\n#include <iostream>\n\n// Recursive function to calculate factorial\nunsigned long long factorial(int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    int number;\n    std::cout << \"Enter a non-negative integer: \";\n    std::cin >> number;\n\n    if (number < 0) {\n        std::cout << \"Factorial is not defined for negative numbers.\" << std::endl;\n    } else {\n        unsigned long long result = factorial(number);\n        std::cout << \"Factorial of \" << number << \" is \" << result << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Recursive Function**: The `factorial` function is defined to compute the factorial of a given integer `n`. It uses a base case where if `n` is 0, it returns 1 (since 0! = 1). For all other positive integers, it calls itself with `n-1` until it reaches the base case.\n\n2. **Main Function**: \n   - Prompts the user to enter a non-negative integer.\n   - Reads the input and checks if it is negative. If negative, it outputs an error message since factorial is not defined for negative numbers.\n   - If the number is non-negative, it calculates the factorial using the recursive function and displays the result.\n\nThis program effectively demonstrates the use of recursion for calculating factorials in C++."
    }
]