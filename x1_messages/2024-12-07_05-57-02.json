[
    {
        "role": "user",
        "content": "Implement a simple REST API in Node.js using Express that supports CRUD operations on a collection of books. Each book should have a title, author, publication year, and ISBN. The API should support filtering by author and searching by title."
    },
    {
        "role": "assistant",
        "content": "Implementing a REST API in Node.js using Express for managing a collection of books involves several steps. Below is a step-by-step guide to create an API that supports CRUD operations, filtering by author, and searching by title.\n\n### Step 1: Set Up the Project\n\nFirst, initialize a new Node.js project and install the necessary dependencies.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\nnpm install express body-parser\n```\n\n### Step 2: Create the Server\n\nCreate a file named `server.js` and set up the basic Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n    console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 3: Define the Book Model\n\nFor simplicity, we'll use an in-memory array to store books. In a real-world scenario, you'd use a database.\n\n```javascript\nlet books = [];\nlet idCounter = 1;\n\nconst getBookById = (id) => {\n    return books.find(book => book.id === id);\n};\n\nconst addBook = (book) => {\n    book.id = idCounter++;\n    books.push(book);\n    return book;\n};\n\nconst updateBook = (id, updates) => {\n    const book = getBookById(id);\n    if (book) {\n        Object.assign(book, updates);\n    }\n    return book;\n};\n\nconst deleteBook = (id) => {\n    const index = books.findIndex(book => book.id === id);\n    if (index !== -1) {\n        return books.splice(index, 1)[0];\n    }\n    return null;\n};\n```\n\n### Step 4: Create API Endpoints\n\nDefine the routes for CRUD operations, filtering, and searching.\n\n#### Get all books with filtering and searching\n\n```javascript\napp.get('/books', (req, res) => {\n    let result = books;\n\n    const author = req.query.author;\n    const title = req.query.title;\n\n    if (author) {\n        result = result.filter(book => book.author.toLowerCase().includes(author.toLowerCase()));\n    }\n\n    if (title) {\n        result = result.filter(book => book.title.toLowerCase().includes(title.toLowerCase()));\n    }\n\n    res.json(result);\n});\n```\n\n#### Get a single book by ID\n\n```javascript\napp.get('/books/:id', (req, res) => {\n    const book = getBookById(parseInt(req.params.id));\n    if (book) {\n        res.json(book);\n    } else {\n        res.status(404).json({ message: 'Book not found' });\n    }\n});\n```\n\n#### Add a new book\n\n```javascript\napp.post('/books', (req, res) => {\n    const { title, author, publicationYear, isbn } = req.body;\n    if (!title || !author || !publicationYear || !isbn) {\n        return res.status(400).json({ message: 'All fields are required' });\n    }\n    const newBook = addBook({ title, author, publicationYear, isbn });\n    res.status(201).json(newBook);\n});\n```\n\n#### Update a book\n\n```javascript\napp.put('/books/:id', (req, res) => {\n    const book = getBookById(parseInt(req.params.id));\n    if (book) {\n        const updatedBook = updateBook(book.id, req.body);\n        res.json(updatedBook);\n    } else {\n        res.status(404).json({ message: 'Book not found' });\n    }\n});\n```\n\n#### Delete a book\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n    const deletedBook = deleteBook(parseInt(req.params.id));\n    if (deletedBook) {\n        res.json(deletedBook);\n    } else {\n        res.status(404).json({ message: 'Book not found' });\n    }\n});\n```\n\n### Step 5: Test the API\n\nYou can use tools like Postman or curl to test the API.\n\n#### Get all books\n\n```bash\ncurl http://localhost:3000/books\n```\n\n#### Get a book by ID\n\n```bash\ncurl http://localhost:3000/books/1\n```\n\n#### Add a new book\n\n```bash\ncurl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\": \"Sample Book\", \"author\": \"John Doe\", \"publicationYear\": 2020, \"isbn\": \"1234567890\"}'\n```\n\n#### Update a book\n\n```bash\ncurl -X PUT http://localhost:3000/books/1 -H \"Content-Type: application/json\" -d '{\"title\": \"Updated Book\"}'\n```\n\n#### Delete a book\n\n```bash\ncurl -X DELETE http://localhost:3000/books/1\n```\n\n### Step 6: Filtering and Searching\n\nTo filter by author or search by title, use query parameters.\n\n#### Filter by author\n\n```bash\ncurl http://localhost:3000/books?author=John\n```\n\n#### Search by title\n\n```bash\ncurl http://localhost:3000/books?title=Sample\n```\n\n#### Combine filtering and searching\n\n```bash\ncurl http://localhost:3000/books?author=John&title=Sample\n```\n\n### Conclusion\n\nThis simple REST API in Node.js using Express allows you to perform CRUD operations on a collection of books and includes filtering by author and searching by title. For a production-level application, consider using a database and adding more robust error handling and validation."
    }
]