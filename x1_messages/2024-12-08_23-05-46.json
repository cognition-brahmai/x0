[
    {
        "role": "user",
        "content": "Implement a Python script that performs the merge sort algorithm on an input list of integers.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a merge sort algorithm in Python involves dividing the input list into two halves, sorting each half recursively, and then merging the sorted halves back together. Below is a step-by-step guide to creating a Python script that performs merge sort on an input list of integers.\n\n## Final Solution\nTo implement the merge sort algorithm in Python, we need to follow these steps:\n\n1. **Divide**: Split the input list into two halves.\n2. **Conquer**: Recursively sort each half.\n3. **Combine**: Merge the two sorted halves back into a single sorted list.\n\nHere is the complete Python script that performs merge sort on an input list of integers:\n\n```python\ndef merge_sort(arr):\n    if len(arr) <= 1:\n        return arr\n\n    # Find the middle point to divide the array into two halves\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    # Recursively sort the two halves\n    left_sorted = merge_sort(left_half)\n    right_sorted = merge_sort(right_half)\n\n    # Merge the sorted halves\n    return merge(left_sorted, right_sorted)\n\ndef merge(left, right):\n    merged = []\n    left_index = 0\n    right_index = 0\n\n    # Merge the two lists into merged list\n    while left_index < len(left) and right_index < len(right):\n        if left[left_index] < right[right_index]:\n            merged.append(left[left_index])\n            left_index += 1\n        else:\n            merged.append(right[right_index])\n            right_index += 1\n\n    # If there are remaining elements in left or right, extend them\n    if left_index < len(left):\n        merged.extend(left[left_index:])\n    if right_index < len(right):\n        merged.extend(right[right_index:])\n\n    return merged\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_list = [38, 27, 43, 3, 9, 82, 10]\n    sorted_list = merge_sort(sample_list)\n    print(\"Original list:\", sample_list)\n    print(\"Sorted list:\", sorted_list)\n```\n\n## Explanation\n\n1. **Merge Sort Function**:\n    - **Base Case**: If the list is of length 0 or 1, it is already sorted.\n    - **Divide**: Find the middle index and split the list into two halves.\n    - **Conquer**: Recursively sort each half.\n    - **Combine**: Merge the two sorted halves using the `merge` function.\n\n2. **Merge Function**:\n    - Initialize an empty list `merged` to store the merged result.\n    - Use indices `left_index` and `right_index` to track the current position in the left and right lists.\n    - Compare elements from both lists and append the smaller one to `merged`.\n    - If there are remaining elements in either list, extend the `merged` list with them.\n\n3. **Example Usage**:\n    - A sample list is provided and sorted using the `merge_sort` function.\n    - The original and sorted lists are printed for verification.\n\nThis implementation ensures that the list is sorted efficiently using the merge sort algorithm, which has a time complexity of \\(O(n \\log n)\\)."
    }
]