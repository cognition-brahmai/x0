[
    {
        "role": "user",
        "content": "Write a Java program that implements a doubly linked list data structure with methods for adding elements at the beginning, end, and specified index, as well as removing elements by value or index."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java program that implements a doubly linked list with the specified methods:\n\n```java\npublic class DoublyLinkedList {\n    // Node inner class to represent elements in the list\n    private static class Node {\n        int data;\n        Node prev;\n        Node next;\n\n        Node(int data) {\n            this.data = data;\n            this.prev = null;\n            this.next = null;\n        }\n    }\n\n    private Node head;\n    private Node tail;\n    private int size;\n\n    public DoublyLinkedList() {\n        this.head = null;\n        this.tail = null;\n        this.size = 0;\n    }\n\n    // Method to add an element at the beginning of the list\n    public void addFirst(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            tail = newNode;\n        } else {\n            newNode.next = head;\n            head.prev = newNode;\n            head = newNode;\n        }\n        size++;\n    }\n\n    // Method to add an element at the end of the list\n    public void addLast(int data) {\n        Node newNode = new Node(data);\n        if (tail == null) {\n            head = newNode;\n            tail = newNode;\n        } else {\n            newNode.prev = tail;\n            tail.next = newNode;\n            tail = newNode;\n        }\n        size++;\n    }\n\n    // Method to add an element at a specified index\n    public void addAt(int index, int data) {\n        if (index < 0 || index > size) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n        }\n        if (index == 0) {\n            addFirst(data);\n        } else if (index == size) {\n            addLast(data);\n        } else {\n            Node current = head;\n            for (int i = 0; i < index; i++) {\n                current = current.next;\n            }\n            Node newNode = new Node(data);\n            newNode.prev = current.prev;\n            newNode.next = current;\n            current.prev.next = newNode;\n            current.prev = newNode;\n            size++;\n        }\n    }\n\n    // Method to remove an element by value\n    public void removeByValue(int data) {\n        Node current = head;\n        while (current != null) {\n            if (current.data == data) {\n                if (current.prev != null) {\n                    current.prev.next = current.next;\n                } else {\n                    head = current.next;\n                }\n                if (current.next != null) {\n                    current.next.prev = current.prev;\n                } else {\n                    tail = current.prev;\n                }\n                size--;\n                return;\n            }\n            current = current.next;\n        }\n    }\n\n    // Method to remove an element by index\n    public void removeAt(int index) {\n        if (index < 0 || index >= size) {\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n        }\n        if (index == 0) {\n            head = head.next;\n            if (head != null) {\n                head.prev = null;\n            } else {\n                tail = null;\n            }\n        } else if (index == size - 1) {\n            tail = tail.prev;\n            tail.next = null;\n        } else {\n            Node current = head;\n            for (int i = 0; i < index; i++) {\n                current = current.next;\n            }\n            current.prev.next = current.next;\n            current.next.prev = current.prev;\n        }\n        size--;\n    }\n\n    // Method to display the list\n    public void display() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" \");\n            current = current.next;\n        }\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        DoublyLinkedList list = new DoublyLinkedList();\n        list.addFirst(10);\n        list.addLast(20);\n        list.addAt(1, 15);\n        list.display(); // Output: 10 15 20\n        list.removeByValue(15);\n        list.display(); // Output: 10 20\n        list.removeAt(0);\n        list.display(); // Output: 20\n    }\n}\n```\n\n### Explanation:\n1. **Node Class**: Represents each element in the doubly linked list with `data`, `prev`, and `next` pointers.\n2. **DoublyLinkedList Class**:\n   - **addFirst(int data)**: Adds a new node with the given data at the beginning of the list.\n   - **addLast(int data)**: Adds a new node with the given data at the end of the list.\n   - **addAt(int index, int data)**: Adds a new node with the given data at the specified index.\n   - **removeByValue(int data)**: Removes the first node containing the specified data.\n   - **removeAt(int index)**: Removes the node at the specified index.\n   - **display()**: Prints the elements of the list.\n3. **Main Method**: Demonstrates the usage of the DoublyLinkedList methods.\n\nThis implementation ensures that all operations maintain the integrity of the doubly linked list structure."
    }
]