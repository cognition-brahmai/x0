[
    {
        "role": "user",
        "content": "Write a Python script to implement the bubble sort algorithm on an array of integers and print the sorted array."
    },
    {
        "role": "assistant",
        "content": "Sure! Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere is a Python script that implements the bubble sort algorithm on an array of integers and prints the sorted array:\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n - i - 1):\n            # Traverse the array from 0 to n-i-1\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n\n# Example usage:\narr = [64, 34, 25, 12, 22, 11, 90]\nprint(\"Original array is:\", arr)\nbubble_sort(arr)\nprint(\"Sorted array is:\", arr)\n```\n\nIn this script, the `bubble_sort` function takes an array of integers as input and sorts it in ascending order using the bubble sort algorithm. The outer loop runs `n` times where `n` is the length of the array, and the inner loop runs `n - i - 1` times for each iteration of the outer loop, where `i` is the current iteration number of the outer loop. This is because after each pass of the outer loop, the largest element is placed at the end of the array, so there's no need to check it again in the next passes.\n\nThe `if` statement inside the inner loop checks if the current element is greater than the next element. If it is, they are swapped using a simultaneous assignment in Python, which is a more Pythonic way to swap values without needing a temporary variable.\n\nFinally, an example array is defined and passed to the `bubble_sort` function, and the sorted array is printed.\n\n## Explanation\n- **Outer Loop**: Runs from the first element to the last, ensuring each element is considered.\n- **Inner Loop**: Runs from the first element to the unsorted portion of the array, bubbling the largest element to the end in each pass.\n- **Swapping**: If an element is greater than the one next to it, they are swapped to move the larger elements towards the end.\n\nThis algorithm is not efficient for large datasets as its average and worst-case complexity are O(n\u00b2), but it's simple and useful for small datasets or educational purposes."
    }
]