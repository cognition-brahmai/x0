[
    {
        "role": "user",
        "content": "Develop a Python script that reads all files in a given directory and calculates the MD5 hash of each file's content. The output should be a dictionary where keys are filenames and values are their corresponding MD5 hashes."
    },
    {
        "role": "assistant",
        "content": "To achieve this task, we need to read all files in a specified directory, calculate the MD5 hash for each file's content, and store these hashes in a dictionary with filenames as keys. Below is a step-by-step guide and the corresponding Python script to accomplish this.\n\n### Approach\n1. **List all files in the directory:** Use `os.listdir()` to get a list of all files in the specified directory.\n2. **Read file content:** For each file, open it in binary mode to read its content.\n3. **Calculate MD5 hash:** Use the `hashlib` library to compute the MD5 hash of the file's content.\n4. **Store in dictionary:** Keep a dictionary where each key is a filename and each value is the corresponding MD5 hash.\n\n### Solution Code\n```python\nimport os\nimport hashlib\n\ndef calculate_md5(file_path):\n    \"\"\"Calculate MD5 hash for a given file.\"\"\"\n    hash_md5 = hashlib.md5()\n    with open(file_path, \"rb\") as f:\n        for chunk in iter(lambda: f.read(4096), b\"\"):\n            hash_md5.update(chunk)\n    return hash_md5.hexdigest()\n\ndef files_md5_in_directory(directory):\n    \"\"\"Generate a dictionary of filenames and their MD5 hashes in a given directory.\"\"\"\n    md5_dict = {}\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path):\n            md5_hash = calculate_md5(file_path)\n            md5_dict[filename] = md5_hash\n    return md5_dict\n\n# Example usage:\nif __name__ == \"__main__\":\n    directory = input(\"Enter the directory path: \")\n    md5_dictionary = files_md5_in_directory(directory)\n    for filename, md5 in md5_dictionary.items():\n        print(f\"{filename}: {md5}\")\n```\n\n### Explanation\n1. **calculate_md5 function:** This function takes a file path, reads the file in binary mode, and computes its MD5 hash. It reads the file in chunks to handle large files efficiently.\n2. **files_md5_in_directory function:** This function lists all files in the specified directory, calculates the MD5 hash for each file using the `calculate_md5` function, and stores the results in a dictionary.\n3. **Example usage:** The script prompts the user to enter a directory path, generates the MD5 hashes for all files in that directory, and prints the filenames along with their hashes.\n\nThis script ensures efficient handling of files of various sizes and provides a clear mapping of filenames to their MD5 hashes."
    }
]