[
    {
        "role": "user",
        "content": "Implement a C program to create a doubly linked list & provide insertion, deletion and display operations."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a doubly linked list in C involves creating nodes that have pointers to both the next and previous nodes. This allows for efficient insertion and deletion operations from both ends of the list.\n\nHere's a step-by-step guide to creating a doubly linked list with insertion, deletion, and display operations:\n\n### Step 1: Define the Node Structure\n\nFirst, we need to define the structure for a node in the doubly linked list. Each node will contain data and two pointers: one pointing to the next node and another pointing to the previous node.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the structure for a node\nstruct Node {\n    int data;\n    struct Node* next;\n    struct Node* prev;\n};\n```\n\n### Step 2: Function to Insert a Node at the End\n\nInserting a node at the end (append) involves traversing the list to the last node and then appending the new node there.\n\n```c\n// Function to insert a node at the end of the list\nvoid insertAtEnd(struct Node** head, int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->next = NULL;\n\n    if (*head == NULL) {\n        newNode->prev = NULL;\n        *head = newNode;\n        return;\n    }\n\n    struct Node* last = *head;\n    while (last->next != NULL) {\n        last = last->next;\n    }\n\n    last->next = newNode;\n    newNode->prev = last;\n}\n```\n\n### Step 3: Function to Delete a Node by Value\n\nDeleting a node by its value involves searching for the node and then adjusting the pointers of the previous and next nodes.\n\n```c\n// Function to delete a node by value\nvoid deleteNode(struct Node** head, int key) {\n    struct Node* temp = *head;\n    struct Node* prevNode = NULL;\n\n    // If the list is empty\n    if (temp == NULL)\n        return;\n\n    // If the node to be deleted is the head node\n    if (temp->data == key) {\n        *head = temp->next;\n        if (*head != NULL)\n            (*head)->prev = NULL;\n        free(temp);\n        return;\n    }\n\n    // Search for the node to be deleted\n    while (temp != NULL && temp->data != key) {\n        prevNode = temp;\n        temp = temp->next;\n    }\n\n    // If the node was not found\n    if (temp == NULL)\n        return;\n\n    // Unlink the node from the list\n    prevNode->next = temp->next;\n    if (temp->next != NULL)\n        temp->next->prev = prevNode;\n    free(temp);\n}\n```\n\n### Step 4: Function to Display the List\n\nDisplaying the list involves traversing the list from the head and printing each node's data.\n\n```c\n// Function to display the list\nvoid displayList(struct Node* node) {\n    while (node != NULL) {\n        printf(\"%d \", node->data);\n        node = node->next;\n    }\n    printf(\"\\n\");\n}\n```\n\n### Step 5: Main Function\n\nIn the main function, we'll create the doubly linked list, perform insertions, deletions, and display the list at various stages.\n\n```c\nint main() {\n    struct Node* head = NULL;\n\n    insertAtEnd(&head, 1);\n    insertAtEnd(&head, 2);\n    insertAtEnd(&head, 3);\n    insertAtEnd(&head, 4);\n\n    printf(\"Original list: \");\n    displayList(head);\n\n    deleteNode(&head, 2);\n\n    printf(\"After deleting 2: \");\n    displayList(head);\n\n    insertAtEnd(&head, 5);\n\n    printf(\"After inserting 5: \");\n    displayList(head);\n\n    deleteNode(&head, 1);\n\n    printf(\"After deleting 1: \");\n    displayList(head);\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Defines the structure of each node in the doubly linked list.\n2. **Insert at End**: Appends a new node with the given data to the end of the list.\n3. **Delete Node**: Removes the first occurrence of a node with the specified data.\n4. **Display List**: Prints the data of all nodes in the list from head to tail.\n5. **Main Function**: Demonstrates the creation of the list, insertion, deletion, and display operations.\n\nThis should give you a good starting point for working with doubly linked lists in C. Let me know if you have any questions or need further clarification!"
    }
]