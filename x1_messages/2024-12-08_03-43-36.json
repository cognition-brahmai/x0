[
    {
        "role": "user",
        "content": "Create a Python script that performs the merge sort algorithm on an array of integers.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements the merge sort algorithm for sorting an array of integers.\n\n```python\ndef merge_sort(arr):\n    if len(arr) > 1:\n        # Find the middle point to divide the array into two halves\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        # Recursively sort both halves\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        # Merge the sorted halves\n        i = j = k = 0\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        # Check if any element was left in the left half\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        # Check if any element was left in the right half\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\n# Example usage\nif __name__ == \"__main__\":\n    sample_array = [38, 27, 43, 3, 9, 82, 10]\n    print(\"Original array:\", sample_array)\n    merge_sort(sample_array)\n    print(\"Sorted array:\", sample_array)\n```\n\n### Explanation:\n1. **Divide**: The array is divided into two halves until each sub-array contains a single element.\n2. **Conquer**: Recursively sort the sub-arrays.\n3. **Combine**: Merge the sorted sub-arrays to produce the sorted result.\n\nThis script defines a `merge_sort` function that sorts an array in place. The example usage demonstrates sorting a sample array and printing both the original and sorted arrays."
    }
]