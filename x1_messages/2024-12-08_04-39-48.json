[
    {
        "role": "user",
        "content": "Create a Python implementation of a singly linked list with methods for adding elements at the beginning, end, and specified index, removing elements by value or index, and finding the length of the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a singly linked list in Python involves defining a Node class to represent each element in the list and a LinkedList class to manage the nodes. Here's a step-by-step guide to implementing the requested methods:\n\n1. **Node Class**: This class will have two attributes - `data` to store the value of the node and `next` to point to the next node in the list.\n\n2. **LinkedList Class**: This class will have a head attribute to keep track of the first node. It will also include methods to:\n   - Add elements at the beginning (`add_at_beginning`).\n   - Add elements at the end (`add_at_end`).\n   - Add elements at a specified index (`add_at_index`).\n   - Remove elements by value (`remove_by_value`).\n   - Remove elements by index (`remove_by_index`).\n   - Find the length of the list (`get_length`).\n\nLet's start by defining the Node class:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\nNow, let's define the LinkedList class with the required methods:\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_index(self, index, data):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if index == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        new_node.next = current.next\n        current.next = new_node\n\n    def remove_by_value(self, value):\n        current = self.head\n        previous = None\n        while current and current.data != value:\n            previous = current\n            current = current.next\n        if not current:\n            raise ValueError(\"Value not found in the list\")\n        if previous:\n            previous.next = current.next\n        else:\n            self.head = current.next\n\n    def remove_by_index(self, index):\n        if index < 0:\n            raise ValueError(\"Index must be non-negative\")\n        if not self.head:\n            raise IndexError(\"Cannot remove from an empty list\")\n        if index == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        position = 0\n        while current and position < index - 1:\n            current = current.next\n            position += 1\n        if not current or not current.next:\n            raise IndexError(\"Index out of range\")\n        current.next = current.next.next\n\n    def get_length(self):\n        count = 0\n        current = self.head\n        while current:\n            count += 1\n            current = current.next\n        return count\n\n    def __str__(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        return \" -> \".join(elements)\n```\n\n### Explanation:\n\n1. **add_at_beginning(data)**: Creates a new node with the given data and makes it the new head of the list.\n   \n2. **add_at_end(data)**: Traverses the list to the last node and appends a new node there.\n   \n3. **add_at_index(index, data)**: Inserts a new node at the specified index. If the index is 0, it adds the node at the beginning. If the index is out of range, it raises an IndexError.\n   \n4. **remove_by_value(value)**: Removes the first node that matches the given value. If the value is not found, it raises a ValueError.\n   \n5. **remove_by_index(index)**: Removes the node at the specified index. If the index is out of range or negative, it raises an IndexError.\n   \n6. **get_length()**: Returns the number of nodes in the list by traversing it.\n   \n7. **__str__()**: Returns a string representation of the list for easy visualization.\n\nThis implementation should cover all the basic operations you need for a singly linked list in Python. If you have any specific requirements or need further modifications, feel free to ask!"
    }
]