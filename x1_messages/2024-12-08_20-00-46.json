[
    {
        "role": "user",
        "content": "Develop a Python script that connects to a PostgreSQL database, creates a table called \"employees\" with columns for employee ID, first name, last name, and salary, and inserts sample data into the table."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To create a Python script that connects to a PostgreSQL database, creates a table named \"employees,\" and inserts sample data, you'll need to have Python and PostgreSQL set up on your machine, along with the psycopg2 library, which is a PostgreSQL adapter for Python.\n\nFirst, make sure you have PostgreSQL installed and running on your system. You'll also need to create a database where you'll create the \"employees\" table.\n\nNext, install the psycopg2 library if you haven't already. You can install it using pip:\n\n```bash\npip install psycopg2\n```\n\nNow, let's write the Python script step by step.\n\n1. **Connecting to the PostgreSQL Database:**\n\nYou need to establish a connection to your PostgreSQL database. For this, you'll need the database name, user name, password, and host address.\n\nHere's a basic connection string:\n\n```python\nimport psycopg2\n\ntry:\n    connection = psycopg2.connect(\n        database=\"your_database_name\",\n        user=\"your_username\",\n        password=\"your_password\",\n        host=\"127.0.0.1\",\n        port=\"5432\"\n    )\n    print(\"Connected to the database\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\nReplace `\"your_database_name\"`, `\"your_username\"`, and `\"your_password\"` with your actual database name, username, and password.\n\n2. **Creating the \"employees\" Table:**\n\nOnce connected, you can create a table using SQL commands.\n\nHere's how you can create the \"employees\" table with columns for employee ID, first name, last name, and salary:\n\n```python\ncreate_table_query = '''\nCREATE TABLE employees (\n    employee_id SERIAL PRIMARY KEY,\n    first_name VARCHAR(50),\n    last_name VARCHAR(50),\n    salary INTEGER\n)\n'''\n\ntry:\n    cursor = connection.cursor()\n    cursor.execute(create_table_query)\n    connection.commit()\n    print(\"Table created successfully\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    if connection:\n        cursor.close()\n        connection.close()\n        print(\"Database connection closed.\")\n```\n\nIn this query:\n\n- `employee_id` is a SERIAL type, which auto-increments for each new record.\n\n- `first_name` and `last_name` are VARCHAR types to store names.\n\n- `salary` is an INTEGER type to store the salary.\n\n3. **Inserting Sample Data into the \"employees\" Table:**\n\nAfter creating the table, you can insert some sample data.\n\nHere's an example of inserting a few records:\n\n```python\ninsert_query = '''\nINSERT INTO employees (first_name, last_name, salary)\nVALUES (%s, %s, %s)\n'''\n\nsample_data = [\n    ('John', 'Doe', 50000),\n    ('Jane', 'Smith', 55000),\n    ('Alice', 'Johnson', 60000),\n    ('Bob', 'Brown', 65000)\n]\n\ntry:\n    cursor = connection.cursor()\n    for data in sample_data:\n        cursor.execute(insert_query, data)\n    connection.commit()\n    print(\"Data inserted successfully\")\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\nfinally:\n    if connection:\n        cursor.close()\n        connection.close()\n        print(\"Database connection closed.\")\n```\n\nIn this script:\n\n- We define an INSERT query with placeholders (`%s`) for the values.\n\n- We prepare a list of tuples, each representing a row of data to be inserted.\n\n- We loop through the sample_data list and execute the INSERT query for each tuple.\n\n- Finally, we commit the changes and close the connection.\n\nPutting It All Together:\n\nHere's the complete Python script:\n\n```python\nimport psycopg2\n\ndef main():\n    try:\n        # Connect to the database\n        connection = psycopg2.connect(\n            database=\"your_database_name\",\n            user=\"your_username\",\n            password=\"your_password\",\n            host=\"127.0.0.1\",\n            port=\"5432\"\n        )\n        print(\"Connected to the database\")\n        \n        # Create the employees table\n        create_table_query = '''\n        CREATE TABLE employees (\n            employee_id SERIAL PRIMARY KEY,\n            first_name VARCHAR(50),\n            last_name VARCHAR(50),\n            salary INTEGER\n        )\n        '''\n        cursor = connection.cursor()\n        cursor.execute(create_table_query)\n        connection.commit()\n        print(\"Table created successfully\")\n        \n        # Insert sample data\n        insert_query = '''\n        INSERT INTO employees (first_name, last_name, salary)\n        VALUES (%s, %s, %s)\n        '''\n        sample_data = [\n            ('John', 'Doe', 50000),\n            ('Jane', 'Smith', 55000),\n            ('Alice', 'Johnson', 60000),\n            ('Bob', 'Brown', 65000)\n        ]\n        for data in sample_data:\n            cursor.execute(insert_query, data)\n        connection.commit()\n        print(\"Data inserted successfully\")\n        \n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    finally:\n        if connection:\n            cursor.close()\n            connection.close()\n            print(\"Database connection closed.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nMake sure to replace the database connection parameters with your actual database credentials.\n\nThis script will connect to your PostgreSQL database, create a table named \"employees\" with the specified columns, and insert the sample data into the table."
    }
]