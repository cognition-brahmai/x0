[
    {
        "role": "user",
        "content": "Write a Python program that implements a simple image editor with basic features such as cropping, resizing, rotating, and adjusting brightness/contrast. The program should use the Pillow library for image manipulation and accept command-line arguments for input/output file paths and desired operations. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a simple image editor using Python and the Pillow library, you can follow these steps:\n\n1. **Install Pillow**: Ensure you have the Pillow library installed. You can install it using pip if you haven't already:\n   ```bash\n   pip install pillow\n   ```\n\n2. **Import Necessary Modules**: Import the required modules in your Python script.\n\n3. **Define Functions for Each Operation**: Create functions to handle cropping, resizing, rotating, and adjusting brightness/contrast.\n\n4. **Parse Command-Line Arguments**: Use the `argparse` module to handle command-line arguments for input and output file paths and operations.\n\n5. **Implement the Main Function**: Based on the provided arguments, perform the specified operations on the image and save the output.\n\nHere's a sample implementation:\n\n```python\nimport argparse\nfrom PIL import Image, ImageEnhance\n\ndef crop_image(image, left, upper, right, lower):\n    return image.crop((left, upper, right, lower))\n\ndef resize_image(image, width, height):\n    return image.resize((width, height))\n\ndef rotate_image(image, degrees):\n    return image.rotate(degrees)\n\ndef adjust_brightness(image, factor):\n    enhancer = ImageEnhance.Brightness(image)\n    return enhancer.enhance(factor)\n\ndef adjust_contrast(image, factor):\n    enhancer = ImageEnhance.Contrast(image)\n    return enhancer.enhance(factor)\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Simple Image Editor\")\n    parser.add_argument(\"input\", help=\"Input image file path\")\n    parser.add_argument(\"output\", help=\"Output image file path\")\n    parser.add_argument(\"--crop\", nargs=4, type=int, metavar=('LEFT', 'UPPER', 'RIGHT', 'LOWER'), help=\"Crop the image\")\n    parser.add_argument(\"--resize\", nargs=2, type=int, metavar=('WIDTH', 'HEIGHT'), help=\"Resize the image\")\n    parser.add_argument(\"--rotate\", type=float, help=\"Rotate the image by degrees\")\n    parser.add_argument(\"--brightness\", type=float, help=\"Adjust brightness (factor > 1 increases brightness)\")\n    parser.add_argument(\"--contrast\", type=float, help=\"Adjust contrast (factor > 1 increases contrast)\")\n\n    args = parser.parse_args()\n\n    try:\n        image = Image.open(args.input)\n    except IOError:\n        print(\"Cannot open image file.\")\n        return\n\n    if args.crop:\n        image = crop_image(image, *args.crop)\n    if args.resize:\n        image = resize_image(image, *args.resize)\n    if args.rotate:\n        image = rotate_image(image, args.rotate)\n    if args.brightness:\n        image = adjust_brightness(image, args.brightness)\n    if args.contrast:\n        image = adjust_contrast(image, args.contrast)\n\n    try:\n        image.save(args.output)\n        print(f\"Image saved to {args.output}\")\n    except IOError:\n        print(\"Cannot save image file.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Functions**:\n   - `crop_image`: Crops the image based on the provided coordinates.\n   - `resize_image`: Resizes the image to the specified width and height.\n   - `rotate_image`: Rotates the image by the specified number of degrees.\n   - `adjust_brightness` and `adjust_contrast`: Adjust the brightness and contrast using the `ImageEnhance` module.\n\n2. **Command-Line Arguments**:\n   - Positional arguments for input and output file paths.\n   - Optional arguments for cropping, resizing, rotating, and adjusting brightness and contrast.\n\n3. **Main Function**:\n   - Parses the command-line arguments.\n   - Opens the input image.\n   - Applies the specified operations in sequence.\n   - Saves the resulting image to the output path.\n\nThis script provides a basic framework for a command-line image editor using Pillow. You can extend it further by adding more features or improving error handling as needed."
    }
]