[
    {
        "role": "user",
        "content": "Implement a Python script that uses NumPy to perform matrix operations such as addition, subtraction, multiplication, and inversion. The script should accept input matrices from the user and display the result of the selected operation."
    },
    {
        "role": "assistant",
        "content": "To create a Python script that performs matrix operations using NumPy, you'll need to follow these steps:\n\n1. **Import NumPy**: This library is essential for handling matrices and performing operations on them.\n\n2. **Accept Input Matrices**: You'll need to get matrix inputs from the user. This can be done by asking for the dimensions and elements of each matrix.\n\n3. **Perform Operations**: Based on user selection, perform addition, subtraction, multiplication, or inversion of matrices.\n\n4. **Display Results**: Show the result of the operation to the user.\n\nBelow is a sample script that accomplishes this:\n\n```python\nimport numpy as np\n\ndef get_matrix_from_user(matrix_name):\n    rows = int(input(f\"Enter the number of rows for {matrix_name}: \"))\n    cols = int(input(f\"Enter the number of columns for {matrix_name}: \"))\n    print(f\"Enter elements of {matrix_name} separated by space:\")\n    entries = list(map(float, input().split()))\n    return np.array(entries).reshape(rows, cols)\n\ndef main():\n    print(\"Matrix Operations Using NumPy\")\n    \n    matrix_a = get_matrix_from_user(\"Matrix A\")\n    matrix_b = get_matrix_from_user(\"Matrix B\")\n    \n    print(\"\\nMatrix A:\")\n    print(matrix_a)\n    print(\"\\nMatrix B:\")\n    print(matrix_b)\n    \n    print(\"\\nSelect operation:\")\n    print(\"1. Addition\")\n    print(\"2. Subtraction\")\n    print(\"3. Multiplication\")\n    print(\"4. Inversion of Matrix A\")\n    print(\"5. Inversion of Matrix B\")\n    \n    choice = int(input(\"Enter your choice (1-5): \"))\n    \n    if choice == 1:\n        result = np.add(matrix_a, matrix_b)\n        print(\"\\nResult of Addition:\")\n    elif choice == 2:\n        result = np.subtract(matrix_a, matrix_b)\n        print(\"\\nResult of Subtraction:\")\n    elif choice == 3:\n        result = np.dot(matrix_a, matrix_b)\n        print(\"\\nResult of Multiplication:\")\n    elif choice == 4:\n        if np.linalg.det(matrix_a) == 0:\n            print(\"\\nMatrix A is singular and cannot be inverted.\")\n            return\n        result = np.linalg.inv(matrix_a)\n        print(\"\\nInverse of Matrix A:\")\n    elif choice == 5:\n        if np.linalg.det(matrix_b) == 0:\n            print(\"\\nMatrix B is singular and cannot be inverted.\")\n            return\n        result = np.linalg.inv(matrix_b)\n        print(\"\\nInverse of Matrix B:\")\n    else:\n        print(\"Invalid choice\")\n        return\n    \n    print(result)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Importing NumPy**: We import NumPy for matrix operations.\n\n2. **Getting Matrices from User**: The `get_matrix_from_user` function asks the user for the dimensions and elements of a matrix and returns it as a NumPy array.\n\n3. **Main Function**:\n   - Displays a menu for the user to select the operation.\n   - Based on the choice, performs the selected operation using NumPy functions.\n   - For inversion, checks if the matrix is invertible by ensuring its determinant is not zero.\n   - Displays the result of the operation.\n\nThis script provides a straightforward way to perform basic matrix operations using NumPy, making it easy for users to input matrices and see the results of various operations."
    }
]