[
    {
        "role": "user",
        "content": "Create a Python script that implements a singly linked list with methods for inserting elements at the beginning, end, and specified position, as well as deleting elements by value or position."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a Python script for a singly linked list with the specified methods. Below is a step-by-step guide to building this data structure.\n\n### Step 1: Define the Node Class\nFirst, we need to define a class for the nodes that will make up the linked list. Each node will hold data and a reference to the next node in the list.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the Singly Linked List Class\nNext, we'll create the main class for the singly linked list. This class will have methods to insert elements at the beginning, end, and specified positions, as well as to delete elements by value or position.\n\n```python\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    # Method to insert a node at the beginning of the list\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    # Method to insert a node at the end of the list\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    # Method to insert a node at a specified position\n    def insert_at_position(self, position, data):\n        if position < 0:\n            print(\"Position must be non-negative.\")\n            return\n        if position == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    # Method to delete a node by value\n    def delete_by_value(self, value):\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            print(\"Value not found in the list.\")\n            return\n        current.next = current.next.next\n\n    # Method to delete a node by position\n    def delete_by_position(self, position):\n        if position < 0:\n            print(\"Position must be non-negative.\")\n            return\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current or not current.next:\n            print(\"Position out of range.\")\n            return\n        current.next = current.next.next\n\n    # Method to display the list\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n```\n\n### Step 3: Testing the Singly Linked List\nFinally, let's test the functionality of our singly linked list by performing various operations.\n\n```python\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    \n    # Inserting elements\n    sll.insert_at_beginning(3)\n    sll.insert_at_end(5)\n    sll.insert_at_position(1, 4)\n    sll.insert_at_position(0, 2)\n    sll.insert_at_position(4, 6)\n    \n    # Displaying the list\n    sll.display()  # Output: 2 -> 3 -> 4 -> 5 -> 6 -> None\n    \n    # Deleting by value\n    sll.delete_by_value(4)\n    sll.display()  # Output: 2 -> 3 -> 5 -> 6 -> None\n    \n    # Deleting by position\n    sll.delete_by_position(2)\n    sll.display()  # Output: 2 -> 3 -> 6 -> None\n```\n\n### Explanation\n1. **Node Class**: Represents each element in the linked list with `data` and `next` attributes.\n2. **SinglyLinkedList Class**: Manages the linked list operations:\n   - `insert_at_beginning`: Adds a new node at the start.\n   - `insert_at_end`: Adds a new node at the end.\n   - `insert_at_position`: Inserts a new node at a specified position.\n   - `delete_by_value`: Removes the first occurrence of a node with the given value.\n   - `delete_by_position`: Removes the node at the specified position.\n   - `display`: Prints the list to visualize its contents.\n\nThis script provides a comprehensive implementation of a singly linked list with the required functionalities."
    }
]