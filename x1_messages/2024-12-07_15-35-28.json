[
    {
        "role": "user",
        "content": "Write a Golang program that connects to an Elasticsearch instance, creates an index, inserts sample documents, and performs a basic text search on the inserted documents. Use command line arguments for specifying the Elasticsearch URL, index name, and search query."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Go programming and Elasticsearch tasks! Let's dive into creating a program that connects to an Elasticsearch instance, manages indices, inserts documents, and performs searches based on command-line arguments.\n\n### Approach\n\n1. **Connecting to Elasticsearch:** We'll use the official Elasticsearch Go client to interact with the Elasticsearch instance.\n2. **Creating an Index:** We'll define an index with a specific mapping if necessary.\n3. **Inserting Sample Documents:** We'll insert a few sample documents into the specified index.\n4. **Performing a Text Search:** We'll execute a basic text search query based on user input.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"context\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/elastic/go-elasticsearch/v8\"\n\t\"github.com/elastic/go-elasticsearch/v8/esapi\"\n\t\"github.com/elastic/go-elasticsearch/v8/esutil\"\n\t\"github.com/urfave/cli/v2\"\n)\n\n// Document represents a sample document structure.\ntype Document struct {\n\tID      string `json:\"id\"`\n\tTitle   string `json:\"title\"`\n\tContent string `json:\"content\"`\n}\n\nfunc main() {\n\tapp := &cli.App{\n\t\tName:  \"elasticsearch-cli\",\n\t\tUsage: \"Interact with Elasticsearch\",\n\t\tFlags: []cli.Flag{\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:     \"url\",\n\t\t\t\tAliases:  []string{\"u\"},\n\t\t\t\tRequired: true,\n\t\t\t\tUsage:    \"Elasticsearch URL\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:     \"index\",\n\t\t\t\tAliases:  []string{\"i\"},\n\t\t\t\tRequired: true,\n\t\t\t\tUsage:    \"Index name\",\n\t\t\t},\n\t\t\t&cli.StringFlag{\n\t\t\t\tName:     \"query\",\n\t\t\t\tAliases:  []string{\"q\"},\n\t\t\t\tRequired: true,\n\t\t\t\tUsage:    \"Search query\",\n\t\t\t},\n\t\t},\n\t\tAction: func(c *cli.Context) error {\n\t\t\tesURL := c.String(\"url\")\n\t\t\tindexName := c.String(\"index\")\n\t\t\tquery := c.String(\"query\")\n\n\t\t\tes, err := elasticsearch.NewClient(elasticsearch.Config{\n\t\t\t\tAddresses: []string{esURL},\n\t\t\t})\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Error creating Elasticsearch client: %s\", err)\n\t\t\t}\n\n\t\t\t// Create index\n\t\t\tcreateIndex(es, indexName)\n\n\t\t\t// Insert sample documents\n\t\t\tinsertDocuments(es, indexName)\n\n\t\t\t// Perform search\n\t\t\tsearch(es, indexName, query)\n\n\t\t\treturn nil\n\t\t},\n\t}\n\n\terr := app.Run(os.Args)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\nfunc createIndex(es *elasticsearch.Client, indexName string) {\n\texists, err := es.Indices.Exists([]string{indexName}, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error checking index existence: %s\", err)\n\t}\n\tif !exists {\n\t\treq := esapi.IndicesCreateRequest{\n\t\t\tIndex: indexName,\n\t\t}\n\t\tres, err := req.Do(context.Background(), es)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error creating index: %s\", err)\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif res.IsError() {\n\t\t\tlog.Fatalf(\"Error creating index: %s\", res.String())\n\t\t}\n\t\tfmt.Println(\"Index created successfully\")\n\t} else {\n\t\tfmt.Println(\"Index already exists\")\n\t}\n}\n\nfunc insertDocuments(es *elasticsearch.Client, indexName string) {\n\tdoc1 := Document{ID: \"1\", Title: \"First Document\", Content: \"This is the first sample document.\"}\n\tdoc2 := Document{ID: \"2\", Title: \"Second Document\", Content: \"This is the second sample document.\"}\n\n\tdocuments := []Document{doc1, doc2}\n\n\tfor _, doc := range documents {\n\t\tput := esutil.NewStringSerializer(\"application/json\")\n\t\tput.AddJSON(doc)\n\n\t\tres, err := es.Bulk(\n\t\t\tes.Bulk.WithContext(context.Background()),\n\t\t\tes.Bulk.WithIndex(indexName),\n\t\t\tes.Bulk.WithBody(strings.NewReader(put.String())),\n\t\t\tes.Bulk.WithRefresh(\"wait_for\"),\n\t\t)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error inserting document: %s\", err)\n\t\t}\n\t\tdefer res.Body.Close()\n\t\tif res.IsError() {\n\t\t\tlog.Fatalf(\"Error inserting document: %s\", res.String())\n\t\t}\n\t\tfmt.Printf(\"Document %s inserted successfully\\n\", doc.ID)\n\t}\n}\n\nfunc search(es *elasticsearch.Client, indexName string, query string) {\n\tsearchSource := map[string]interface{}{\n\t\t\"query\": map[string]interface{}{\n\t\t\t\"match\": map[string]interface{}{\n\t\t\t\t\"content\": query,\n\t\t\t},\n\t\t},\n\t}\n\n\tsearchReq := esapi.SearchRequest{\n\t\tIndex:      []string{indexName},\n\t\tBody:       strings.NewReader(fmt.Sprintf(\"%s\", searchSource)),\n\t\tTrackTotalHits: true,\n\t}\n\n\tres, err := searchReq.Do(context.Background(), es)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error performing search: %s\", err)\n\t}\n\tdefer res.Body.Close()\n\n\tif res.IsError() {\n\t\tlog.Fatalf(\"Error performing search: %s\", res.String())\n\t}\n\n\tvar result map[string]interface{}\n\tif err := json.NewDecoder(res.Body).Decode(&result); err != nil {\n\t\tlog.Fatalf(\"Error parsing search response: %s\", err)\n\t}\n\n\tfmt.Println(\"Search Results:\")\n\tfor _, hit := range result[\"hits\"].(map[string]interface{})[\"hits\"].([]interface{}) {\n\t\tsource := hit.(map[string]interface{})[\"_source\"]\n\t\tfmt.Printf(\"ID: %s, Title: %s, Content: %s\\n\",\n\t\t\tsource[\"id\"], source[\"title\"], source[\"content\"])\n\t}\n}\n```\n\n### Explanation\n\n1. **Connecting to Elasticsearch:**\n   - We use the `github.com/elastic/go-elasticsearch/v8` package to create a client connected to the specified Elasticsearch URL.\n\n2. **Creating an Index:**\n   - We check if the index exists. If not, we create it using the `IndicesCreate` API.\n\n3. **Inserting Sample Documents:**\n   - We define a `Document` struct and create sample documents.\n   - We use the `Bulk` API to insert these documents into the specified index.\n\n4. **Performing a Text Search:**\n   - We construct a match query based on the user-provided search query.\n   - We execute the search using the `Search` API and print the results.\n\nThis program provides a straightforward way to interact with Elasticsearch using command-line arguments for flexibility.\n"
    }
]