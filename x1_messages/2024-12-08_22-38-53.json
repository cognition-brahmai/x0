[
    {
        "role": "user",
        "content": "Create a python script that connects to a MariaDB database, creates a table for storing user information (username, email, password), and provides functions for adding, updating, deleting, and retrieving users from the database. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll help you create a Python script that connects to a MariaDB database, sets up a table for user information, and includes functions for managing users. We'll use the `mysql-connector-python` package to handle the database connection.\n\nFirst, make sure you have the `mysql-connector-python` package installed. You can install it using pip if you haven't already:\n\n```bash\npip install mysql-connector-python\n```\n\nNow, let's create the Python script step by step.\n\n### Step 1: Connect to the MariaDB Database\n\nWe need to establish a connection to the MariaDB database. For this, you'll need to know the database host, user, password, and the database name.\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n```\n\nReplace `'your_host'`, `'your_user'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n\n### Step 2: Create the Users Table\n\nNext, we'll create a table to store user information. The table will have columns for username, email, and password.\n\n```python\ndef create_users_table(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            username VARCHAR(50) NOT NULL UNIQUE,\n            email VARCHAR(100) NOT NULL UNIQUE,\n            password VARCHAR(255) NOT NULL\n        )\n    \"\"\")\n    connection.commit()\n    cursor.close()\n```\n\nThis function creates a table named `users` if it doesn't already exist. Each user has a unique ID, username, email, and password.\n\n### Step 3: Functions for Managing Users\n\nNow, we'll create functions to add, update, delete, and retrieve users from the database.\n\n#### Adding a User\n\n```python\ndef add_user(connection, username, email, password):\n    cursor = connection.cursor()\n    query = \"INSERT INTO users (username, email, password) VALUES (%s, %s, %s)\"\n    values = (username, email, password)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n```\n\n#### Updating a User\n\n```python\ndef update_user(connection, user_id, username, email, password):\n    cursor = connection.cursor()\n    query = \"UPDATE users SET username=%s, email=%s, password=%s WHERE id=%s\"\n    values = (username, email, password, user_id)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n```\n\n#### Deleting a User\n\n```python\ndef delete_user(connection, user_id):\n    cursor = connection.cursor()\n    query = \"DELETE FROM users WHERE id=%s\"\n    values = (user_id,)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n```\n\n#### Retrieving Users\n\n```python\ndef get_all_users(connection):\n    cursor = connection.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM users\")\n    users = cursor.fetchall()\n    cursor.close()\n    return users\n\ndef get_user_by_id(connection, user_id):\n    cursor = connection.cursor(dictionary=True)\n    query = \"SELECT * FROM users WHERE id=%s\"\n    values = (user_id,)\n    cursor.execute(query, values)\n    user = cursor.fetchone()\n    cursor.close()\n    return user\n```\n\n### Step 4: Main Function to Demonstrate Usage\n\nFinally, let's create a main function to demonstrate how to use these functions.\n\n```python\ndef main():\n    connection = create_connection()\n    create_users_table(connection)\n    \n    # Add a new user\n    add_user(connection, 'john_doe', 'john@example.com', 'password123')\n    \n    # Update a user\n    update_user(connection, 1, 'john_doe_updated', 'john.updated@example.com', 'new_password123')\n    \n    # Delete a user\n    delete_user(connection, 2)\n    \n    # Get all users\n    all_users = get_all_users(connection)\n    print(\"All users:\")\n    for user in all_users:\n        print(user)\n    \n    # Get a user by ID\n    user = get_user_by_id(connection, 1)\n    print(\"User with ID 1:\")\n    print(user)\n    \n    connection.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Complete Script\n\nHere's the complete script in one piece:\n\n```python\nimport mysql.connector\n\ndef create_connection():\n    connection = mysql.connector.connect(\n        host='your_host',\n        user='your_user',\n        password='your_password',\n        database='your_database'\n    )\n    return connection\n\ndef create_users_table(connection):\n    cursor = connection.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS users (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            username VARCHAR(50) NOT NULL UNIQUE,\n            email VARCHAR(100) NOT NULL UNIQUE,\n            password VARCHAR(255) NOT NULL\n        )\n    \"\"\")\n    connection.commit()\n    cursor.close()\n\ndef add_user(connection, username, email, password):\n    cursor = connection.cursor()\n    query = \"INSERT INTO users (username, email, password) VALUES (%s, %s, %s)\"\n    values = (username, email, password)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n\ndef update_user(connection, user_id, username, email, password):\n    cursor = connection.cursor()\n    query = \"UPDATE users SET username=%s, email=%s, password=%s WHERE id=%s\"\n    values = (username, email, password, user_id)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n\ndef delete_user(connection, user_id):\n    cursor = connection.cursor()\n    query = \"DELETE FROM users WHERE id=%s\"\n    values = (user_id,)\n    cursor.execute(query, values)\n    connection.commit()\n    cursor.close()\n\ndef get_all_users(connection):\n    cursor = connection.cursor(dictionary=True)\n    cursor.execute(\"SELECT * FROM users\")\n    users = cursor.fetchall()\n    cursor.close()\n    return users\n\ndef get_user_by_id(connection, user_id):\n    cursor = connection.cursor(dictionary=True)\n    query = \"SELECT * FROM users WHERE id=%s\"\n    values = (user_id,)\n    cursor.execute(query, values)\n    user = cursor.fetchone()\n    cursor.close()\n    return user\n\ndef main():\n    connection = create_connection()\n    create_users_table(connection)\n    \n    # Add a new user\n    add_user(connection, 'john_doe', 'john@example.com', 'password123')\n    \n    # Update a user\n    update_user(connection, 1, 'john_doe_updated', 'john.updated@example.com', 'new_password123')\n    \n    # Delete a user\n    delete_user(connection, 2)\n    \n    # Get all users\n    all_users = get_all_users(connection)\n    print(\"All users:\")\n    for user in all_users:\n        print(user)\n    \n    # Get a user by ID\n    user = get_user_by_id(connection, 1)\n    print(\"User with ID 1:\")\n    print(user)\n    \n    connection.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\nMake sure to replace the database connection details with your actual database credentials.\n\nThis script sets up a basic system for managing users in a MariaDB database using Python. It includes functions for adding, updating, deleting, and retrieving users, along with a demonstration in the `main` function."
    }
]