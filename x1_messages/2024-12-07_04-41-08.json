[
    {
        "role": "user",
        "content": "Create a Bash script that monitors system resources like CPU usage, memory consumption, and disk space, sending email alerts when thresholds are exceeded."
    },
    {
        "role": "assistant",
        "content": "Creating a Bash script to monitor system resources and send email alerts is a great way to keep track of your system's health. Below is a step-by-step guide to help you create such a script.\n\n### Step 1: Set Up Email Notification\n\nFirst, ensure that your system can send emails. You can use `mailutils` or `ssmtp` for this purpose.\n\n#### Using `mailutils`:\n\n1. Install `mailutils`:\n   ```bash\n   sudo apt-get install mailutils\n   ```\n\n2. Configure `mailutils` by editing `/etc/mailutils/system`:\n   ```bash\n   sudo nano /etc/mailutils/system\n   ```\n   Add your SMTP server details:\n   ```\n   set smtp=your_smtp_server\n   set from=your_email@example.com\n   ```\n\n#### Using `ssmtp`:\n\n1. Install `ssmtp`:\n   ```bash\n   sudo apt-get install ssmtp\n   ```\n\n2. Configure `ssmtp` by editing `/etc/ssmtp/ssmtp.conf`:\n   ```bash\n   sudo nano /etc/ssmtp/ssmtp.conf\n   ```\n   Add your SMTP server details:\n   ```\n   root=your_email@example.com\n   mailhub=your_smtp_server:587\n   AuthUser=your_smtp_username\n   AuthPass=your_smtp_password\n   UseSTARTTLS=YES\n   ```\n\n### Step 2: Create the Monitoring Script\n\nCreate a Bash script that checks CPU usage, memory consumption, and disk space, and sends email alerts if any of these exceed predefined thresholds.\n\n1. Open a new file for editing:\n   ```bash\n   nano monitor_system.sh\n   ```\n\n2. Add the following script:\n\n   ```bash\n   #!/bin/bash\n\n   # Configuration\n   EMAIL=\"your_email@example.com\"\n   CPU_THRESHOLD=80  # in percent\n   MEM_THRESHOLD=80  # in percent\n   DISK_THRESHOLD=90 # in percent\n\n   # Get CPU usage\n   CPU_USAGE=$(top -bn1 | grep \"Cpu(s)\" | sed \"s/.*, *\\([0-9.]*\\)%* id.*/\\1/\" | awk '{print 100 - $1\"%\"}' | tr -d '%')\n   CPU_USAGE=${CPU_USAGE%.*} # Remove decimal part\n\n   # Get memory usage\n   MEM_USAGE=$(free | awk '/Mem/{printf(\"%.2f\"), $3/$2*100}')\n   MEM_USAGE=${MEM_USAGE%.*} # Remove decimal part\n\n   # Get disk usage\n   DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | tr -d '%')\n\n   # Send email function\n   send_email() {\n       echo -e \"To: $EMAIL\\nSubject: System Alert: $1\\n\\n$2\" | sendmail -t\n   }\n\n   # Check CPU usage\n   if [ \"$CPU_USAGE\" -ge \"$CPU_THRESHOLD\" ]; then\n       send_email \"High CPU Usage\" \"CPU usage is at $CPU_USAGE% which is above the threshold of $CPU_THRESHOLD%.\"\n   fi\n\n   # Check memory usage\n   if [ \"$MEM_USAGE\" -ge \"$MEM_THRESHOLD\" ]; then\n       send_email \"High Memory Usage\" \"Memory usage is at $MEM_USAGE% which is above the threshold of $MEM_THRESHOLD%.\"\n   fi\n\n   # Check disk usage\n   if [ \"$DISK_USAGE\" -ge \"$DISK_THRESHOLD\" ]; then\n       send_email \"High Disk Usage\" \"Disk usage is at $DISK_USAGE% which is above the threshold of $DISK_THRESHOLD%.\"\n   fi\n   ```\n\n3. Make the script executable:\n   ```bash\n   chmod +x monitor_system.sh\n   ```\n\n### Step 3: Schedule the Script\n\nUse `cron` to schedule the script to run at regular intervals.\n\n1. Open crontab editor:\n   ```bash\n   crontab -e\n   ```\n\n2. Add a cron job to run the script every 15 minutes:\n   ```bash\n   */15 * * * * /path/to/monitor_system.sh\n   ```\n\nReplace `/path/to/monitor_system.sh` with the actual path to your script.\n\n### Explanation\n\n- **CPU Usage**: Uses `top` to get CPU usage and calculates the percentage.\n- **Memory Usage**: Uses `free` command to get memory usage.\n- **Disk Usage**: Uses `df` command to get disk usage.\n- **Email Notification**: Uses `sendmail` to send emails via configured SMTP server.\n\nThis script checks the system resources every 15 minutes and sends an email if any of the thresholds are exceeded. You can adjust the thresholds and scheduling as per your requirements."
    }
]