[
    {
        "role": "user",
        "content": "Build a Node.js server that accepts incoming WebSocket connections and broadcasts messages received from clients to all connected clients. The server should also maintain a list of connected clients and their associated usernames.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you build a simple Node.js server that uses WebSockets to handle real-time communication between clients. This server will broadcast messages to all connected clients and keep track of connected users with their usernames.\n\nFirst, make sure you have Node.js installed on your machine. You can download it from [nodejs.org](https://nodejs.org/).\n\nWe'll be using the `ws` library for WebSockets in Node.js. To set up your project, create a new directory for your server and initialize a new Node.js project:\n\n```bash\nmkdir websocket-server\ncd websocket-server\nnpm init -y\n```\n\nNext, install the `ws` library:\n\n```bash\nnpm install ws\n```\n\nNow, let's create the server. We'll start by setting up a basic WebSocket server that listens for connections and handles messages.\n\nCreate a file named `server.js` and open it in your favorite text editor.\n\nFirst, import the necessary modules:\n\n```javascript\nconst http = require('http');\nconst WebSocket = require('ws');\n```\n\nWe'll create an HTTP server and then create a WebSocket server that attaches to this HTTP server.\n\n```javascript\nconst server = http.createServer();\nconst wss = new WebSocket.Server({ server });\n\nserver.listen(8080, () => {\n  console.log('Server is listening on port 8080');\n});\n```\n\nThis sets up a server listening on port 8080.\n\nNext, we need to handle WebSocket connections. We'll maintain a list of connected clients along with their usernames.\n\nAdd the following code inside `server.js`:\n\n```javascript\nconst clients = new Map();\n\nwss.on('connection', (socket) => {\n  console.log('A client connected');\n\n  socket.on('message', (message) => {\n    const data = JSON.parse(message);\n    if (data.type === 'username') {\n      clients.set(socket, data.username);\n      console.log(`${data.username} has connected`);\n    } else if (data.type === 'message') {\n      const username = clients.get(socket);\n      if (username) {\n        const broadcastMessage = `${username}: ${data.message}`;\n        wss.clients.forEach((client) => {\n          if (client.readyState === WebSocket.OPEN) {\n            client.send(broadcastMessage);\n          }\n        });\n      }\n    }\n  });\n\n  socket.on('close', () => {\n    const username = clients.get(socket);\n    if (username) {\n      clients.delete(socket);\n      console.log(`${username} has disconnected`);\n    }\n  });\n});\n```\n\nHere's what's happening:\n\n1. **Connection Handling**: When a client connects, we log that a client has connected.\n\n2. **Message Handling**: When a message is received from a client, we parse it as JSON. The message can be of two types:\n   - `username`: This is used to set the username for the connected client. We store the username associated with the socket in a Map.\n   - `message`: This is a chat message that should be broadcast to all connected clients. We retrieve the username from the Map and send the message to all clients.\n\n3. **Close Handling**: When a client disconnects, we remove their entry from the Map and log that they have disconnected.\n\nNow, you need a way for clients to connect to this server and send messages. For simplicity, let's create a basic HTML page with JavaScript to handle WebSocket connections.\n\nCreate an HTML file named `index.html` in the same directory:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>WebSocket Chat</title>\n</head>\n<body>\n  <h1>WebSocket Chat</h1>\n  <input type=\"text\" id=\"username\" placeholder=\"Enter your username\">\n  <button onclick=\"connect()\">Connect</button>\n  <ul id=\"messages\"></ul>\n  <input type=\"text\" id=\"messageInput\" placeholder=\"Type a message\">\n  <button onclick=\"sendMessage()\">Send</button>\n\n  <script>\n    let socket;\n\n    function connect() {\n      const username = document.getElementById('username').value;\n      socket = new WebSocket('ws://localhost:8080');\n\n      socket.addEventListener('open', function (event) {\n        socket.send(JSON.stringify({ type: 'username', username: username }));\n      });\n\n      socket.addEventListener('message', function (event) {\n        const messagesList = document.getElementById('messages');\n        const message = document.createElement('li');\n        message.textContent = event.data;\n        messagesList.appendChild(message);\n      });\n\n      socket.addEventListener('close', function (event) {\n        console.log('Disconnected from server');\n      });\n    }\n\n    function sendMessage() {\n      const messageInput = document.getElementById('messageInput');\n      const message = messageInput.value;\n      socket.send(JSON.stringify({ type: 'message', message: message }));\n      messageInput.value = '';\n    }\n  </script>\n</body>\n</html>\n```\n\nHere's how it works:\n\n1. **Connect Function**: When the user clicks the \"Connect\" button, it retrieves the username from the input field, creates a new WebSocket connection to the server, and sends a `username` message to set the username.\n\n2. **Message Handling**: When a message is received from the server, it's appended to the list of messages in the HTML.\n\n3. **Send Message**: When the user types a message and clicks \"Send\", it sends a `message` type with the message content to the server, which then broadcasts it to all connected clients.\n\nTo test this setup:\n\n1. Start the server by running `node server.js` in your terminal.\n\n2. Open `index.html` in multiple browser windows or tabs.\n\n3. In each window, enter a username and click \"Connect\".\n\n4. Type messages in the input field and click \"Send\" to see the messages broadcasted to all connected clients.\n\nThis is a basic implementation. In a real-world scenario, you would need to handle errors, implement security measures, and possibly scale the server for more users.\n\nI hope this helps you get started with WebSocket communication in Node.js! If you have any questions or need further assistance, feel free to ask."
    }
]