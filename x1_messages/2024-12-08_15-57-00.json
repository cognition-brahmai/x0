[
    {
        "role": "user",
        "content": "Implement a C++ class for a basic stack data structure with push, pop, and top operations."
    },
    {
        "role": "assistant",
        "content": "Here is a simple implementation of a stack in C++. This class uses a dynamic array to store the elements.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Stack {\nprivate:\n    std::vector<int> elements;\n\npublic:\n    // Push an element onto the stack\n    void push(int value) {\n        elements.push_back(value);\n    }\n\n    // Remove the top element from the stack\n    void pop() {\n        if (!elements.empty()) {\n            elements.pop_back();\n        } else {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n        }\n    }\n\n    // Get the top element of the stack\n    int top() {\n        if (!elements.empty()) {\n            return elements.back();\n        } else {\n            std::cout << \"Stack is empty.\" << std::endl;\n            return -1; // or throw an exception\n        }\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() {\n        return elements.empty();\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n\n    std::cout << \"Top element: \" << stack.top() << std::endl;  // Output: 3\n\n    stack.pop();\n\n    std::cout << \"Top element after pop: \" << stack.top() << std::endl;  // Output: 2\n\n    std::cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl;  // Output: No\n\n    while (!stack.isEmpty()) {\n        std::cout << \"Popping: \" << stack.top() << std::endl;\n        stack.pop();\n    }\n\n    std::cout << \"Is stack empty after popping all elements? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl;  // Output: Yes\n\n    return 0;\n}\n```\n\nThis code defines a `Stack` class that uses a `std::vector<int>` to store the elements. The `push`, `pop`, and `top` methods are implemented to add, remove, and access the top element of the stack, respectively. The `isEmpty` method checks if the stack is empty.\n\nIn the `main` function, we demonstrate how to use the `Stack` class by pushing elements onto the stack, popping elements off, and checking the top element and if the stack is empty.\n\n**Note:** In a real-world scenario, you might want to handle errors more gracefully, such as by throwing exceptions instead of returning -1 from the `top` method when the stack is empty."
    }
]