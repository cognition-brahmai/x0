[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add an element at the beginning, end, and a specific position, delete an element by value, and display the contents of the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a Python class for a singly linked list. A singly linked list is a data structure consisting of nodes where each node contains a data part and a reference (or link) to the next node in the sequence.\n\n### Class Definition\n\nWe'll start by defining a class for the nodes and another class for the linked list itself.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position must be a non-negative integer.\")\n            return\n        if position == 0:\n            self.add_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if self.head is None:\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next:\n            if current.next.data == value:\n                current.next = current.next.next\n                return\n            current = current.next\n        print(\"Value not found in the list.\")\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n```\n\n### Explanation\n\n1. **Node Class**:\n    - Each node has a `data` attribute to store the data and a `next` attribute to point to the next node.\n\n2. **SinglyLinkedList Class**:\n    - **add_beginning(data)**: Adds a new node with the given data at the beginning of the list.\n    - **add_end(data)**: Adds a new node with the given data at the end of the list.\n    - **add_at_position(position, data)**: Adds a new node with the given data at the specified position. Position starts at 0.\n    - **delete_by_value(value)**: Deletes the first node that matches the given value.\n    - **display()**: Prints the data of all nodes in the list.\n\nThis should cover the basic operations you need for a singly linked list. Let me know if you have any questions or need further explanations!"
    }
]