[
    {
        "role": "user",
        "content": "Develop a Node.js script that connects to a Memcached server, stores key-value pairs, and retrieves values based on keys provided as command-line arguments.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Node.js script that interacts with a Memcached server, you'll need to install the `memcached` package, which is a popular client for connecting to Memcached servers in Node.js. Below are the steps to achieve this:\n\n### Prerequisites\n1. **Node.js**: Ensure that Node.js is installed on your machine. You can download it from [nodejs.org](https://nodejs.org/).\n2. **Memcached Server**: Make sure you have a Memcached server running. You can install it using your package manager (e.g., `sudo apt-get install memcached` on Ubuntu).\n\n### Steps\n\n1. **Initialize Node.js Project**\n   Create a new directory for your project and initialize it with npm.\n\n   ```bash\n   mkdir memcached-example\n   cd memcached-example\n   npm init -y\n   ```\n\n2. **Install Required Packages**\n   Install the `memcached` package.\n\n   ```bash\n   npm install memcached\n   ```\n\n3. **Create the Script**\n   Create a file named `memcached.js` and add the following code:\n\n   ```javascript\n   #!/usr/bin/env node\n\n   const Memcached = require('memcached');\n   const args = process.argv.slice(2);\n\n   if (args.length < 3) {\n     console.log('Usage: node memcached.js <host:port> <action> [key] [value]');\n     process.exit(1);\n   }\n\n   const [host, action, key, value] = args;\n\n   const memcached = new Memcached(host, { retries: 1 });\n\n   switch (action) {\n     case 'set':\n       if (!key || !value) {\n         console.log('Usage for set: node memcached.js <host:port> set <key> <value>');\n         process.exit(1);\n       }\n       memcached.set(key, value, 0, (err) => {\n         if (err) throw err;\n         console.log(`Set ${key} to ${value}`);\n         process.exit(0);\n       });\n       break;\n     case 'get':\n       if (!key) {\n         console.log('Usage for get: node memcached.js <host:port> get <key>');\n         process.exit(1);\n       }\n       memcached.get(key, (err, data) => {\n         if (err) throw err;\n         if (data !== null) {\n           console.log(`Got ${key}: ${data}`);\n         } else {\n           console.log(`Key ${key} not found`);\n         }\n         process.exit(0);\n       });\n       break;\n     default:\n       console.log('Invalid action. Use \"set\" or \"get\".');\n       process.exit(1);\n   }\n   ```\n\n4. **Make the Script Executable**\n   Ensure that your script is executable.\n\n   ```bash\n   chmod +x memcached.js\n   ```\n\n5. **Usage Examples**\n   - **Set a key-value pair:**\n\n     ```bash\n     ./memcached.js localhost:11211 set mykey myvalue\n     ```\n\n   - **Get a value by key:**\n\n     ```bash\n     ./memcached.js localhost:11211 get mykey\n     ```\n\n### Explanation\n\n- **Command-Line Arguments**: The script expects the Memcached server address, an action (`set` or `get`), and optionally a key and value.\n- **Memcached Client**: The `memcached` package is used to connect to the Memcached server.\n- **Set Operation**: Stores a key-value pair in Memcached.\n- **Get Operation**: Retrieves the value associated with a key from Memcached.\n\nThis script provides a basic interface to interact with a Memcached server using Node.js, suitable for simple key-value operations via the command line."
    }
]