[
    {
        "role": "user",
        "content": "Write a Python script that monitors CPU usage and memory consumption on a Linux system, and sends an email alert if either exceeds a specified threshold. Use the psutil library for system monitoring and smtplib for sending emails.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that keeps an eye on the CPU usage and memory consumption on a Linux machine. If either of these goes beyond a certain limit that I set, the script should send me an email alert. Sounds useful for keeping tabs on system performance!\n\nFirst things first, I need to make sure I have the right tools for the job. The task mentions using the `psutil` library for monitoring the system and `smtplib` for sending emails. I'm familiar with both, but it's always good to refresh my memory.\n\nStarting with `psutil`, it's a super handy cross-platform library for retrieving information on running processes and system utilization (like CPU, memory, disks, network, and sensors). Since the task is specifically for a Linux system, I should also be aware of any Linux-specific features or considerations, but `psutil` is designed to be cross-platform, so it should work well.\n\nI need to install `psutil` if it's not already installed. I can do this using `pip`:\n\n```bash\npip install psutil\n```\n\nNext, for sending emails, `smtplib` is a built-in Python library, so I don't need to install anything extra for that. It's perfect for handling the email alerts.\n\nNow, let's think about the structure of the script. I need to:\n\n1. Monitor CPU usage and memory consumption.\n\n2. Check if either of these exceeds a specified threshold.\n\n3. If it does, send an email alert.\n\nI should also consider how frequently the script should check the system metrics. Maybe every minute or so? That can be adjustable.\n\nLet me outline the steps in more detail:\n\n- Import the necessary libraries: `psutil` for monitoring and `smtplib` for emails.\n\n- Define the thresholds for CPU usage and memory consumption. These should be configurable.\n\n- Set up the email details: sender email, receiver email, SMTP server details, etc.\n\n- Create a function to check the CPU usage and memory consumption.\n\n- If either metric exceeds its threshold, construct an email message with the current metrics and send it.\n\n- Decide on an interval for checking the metrics and loop accordingly.\n\nLet me consider potential pitfalls:\n\n- Email authentication: Depending on the SMTP server, I might need to handle authentication, which could involve sensitive information.\n\n- Exception handling: Need to make sure that if something goes wrong (e.g., unable to send email), the script doesn't crash and keeps running.\n\n- Performance impact: Since the script is monitoring system resources, I need to ensure that it doesn't consume too many resources itself.\n\nAlright, let's start by importing the necessary libraries.\n\n```python\nimport psutil\nimport smtplib\nfrom email.mime.text import MIMEText\nimport time\n```\n\nI'm also importing `MIMEText` from `email.mime.text` to create proper email messages.\n\nNext, I need to define the thresholds. Let's say, for example, CPU usage over 80% and memory usage over 90%. But these should be configurable, so I'll make them variables that can be set at the beginning of the script.\n\n```python\ncpu_threshold = 80  # in percentage\nmemory_threshold = 90  # in percentage\n```\n\nNow, setting up the email details. This is sensitive information, so in a real-world scenario, I should handle it carefully, maybe using environment variables or a config file that's not version-controlled.\n\n```python\nsender_email = \"your_email@example.com\"\nreceiver_email = \"receiver@example.com\"\nsmtp_server = \"smtp.example.com\"\nsmtp_port = 587\nsmtp_username = \"your_email@example.com\"\nsmtp_password = \"your_password\"\n```\n\nI should consider using environment variables for the email and SMTP credentials to avoid hardcoding them.\n\nNow, creating a function to check the CPU and memory usage.\n\n```python\ndef get_sys_metrics():\n    cpu_usage = psutil.cpu_percent(interval=1)\n    memory_usage = psutil.virtual_memory().percent\n    return cpu_usage, memory_usage\n```\n\nHere, `psutil.cpu_percent(interval=1)` will give the CPU usage percentage over one second. `psutil.virtual_memory().percent` gives the memory usage percentage.\n\nNext, I need a function to send an email alert.\n\n```python\ndef send_email_alert(subject, message):\n    msg = MIMEText(message)\n    msg['Subject'] = subject\n    msg['From'] = sender_email\n    msg['To'] = receiver_email\n\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender_email, receiver_email, msg.as_string())\n```\n\nThis function constructs an email message with the given subject and message, logs into the SMTP server, and sends the email.\n\nNow, I need to set up a loop that checks the system metrics at regular intervals. Let's say every 60 seconds.\n\n```python\ncheck_interval = 60  # in seconds\n\nwhile True:\n    cpu_usage, memory_usage = get_sys_metrics()\n    if cpu_usage > cpu_threshold or memory_usage > memory_threshold:\n        subject = \"System Resource Alert\"\n        message = f\"CPU Usage: {cpu_usage}%\\nMemory Usage: {memory_usage}%\"\n        send_email_alert(subject, message)\n    time.sleep(check_interval)\n```\n\nThis loop will run indefinitely, checking the metrics every 60 seconds and sending an email if either usage exceeds the threshold.\n\nI should add some print statements for debugging purposes, to see the metrics even when they don't exceed the thresholds.\n\n```python\nwhile True:\n    cpu_usage, memory_usage = get_sys_metrics()\n    print(f\"CPU Usage: {cpu_usage}%, Memory Usage: {memory_usage}%\")\n    if cpu_usage > cpu_threshold or memory_usage > memory_usage:\n        subject = \"System Resource Alert\"\n        message = f\"CPU Usage: {cpu_usage}%\\nMemory Usage: {memory_usage}%\"\n        send_email_alert(subject, message)\n    time.sleep(check_interval)\n```\n\nAlso, I should handle exceptions that might occur during email sending or system metric retrieval.\n\n```python\nwhile True:\n    try:\n        cpu_usage, memory_usage = get_sys_metrics()\n        print(f\"CPU Usage: {cpu_usage}%, Memory Usage: {memory_usage}%\")\n        if cpu_usage > cpu_threshold or memory_usage > memory_threshold:\n            subject = \"System Resource Alert\"\n            message = f\"CPU Usage: {cpu_usage}%\\nMemory Usage: {memory_usage}%\"\n            send_email_alert(subject, message)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    time.sleep(check_interval)\n```\n\nThis way, even if something goes wrong, the script will print the error and continue running.\n\nLet me think about refining the email message. Maybe include more details about the system status, like disk usage or network stats, but for now, focusing on CPU and memory should suffice.\n\nAlso, considering that email alerts can be annoying if they come too frequently, maybe I should implement a mechanism to send alerts only once every certain period if the condition persists.\n\nFor example, if CPU usage is above the threshold, send an alert, and then wait for 10 minutes before sending another alert, even if the usage remains high. This way, I don't get flooded with emails, but I still get notified about persistent issues.\n\nTo implement this, I can keep track of when the last alert was sent for each metric.\n\n```python\nlast_cpu_alert = 0\nlast_memory_alert = 0\nalert_interval = 600  # 10 minutes in seconds\n\nwhile True:\n    current_time = time.time()\n    cpu_usage, memory_usage = get_sys_metrics()\n    print(f\"CPU Usage: {cpu_usage}%, Memory Usage: {memory_usage}%\")\n\n    if cpu_usage > cpu_threshold and current_time - last_cpu_alert > alert_interval:\n        subject = \"CPU Usage Alert\"\n        message = f\"CPU Usage: {cpu_usage}%\"\n        send_email_alert(subject, message)\n        last_cpu_alert = current_time\n\n    if memory_usage > memory_threshold and current_time - last_memory_alert > alert_interval:\n        subject = \"Memory Usage Alert\"\n        message = f\"Memory Usage: {memory_usage}%\"\n        send_email_alert(subject, message)\n        last_memory_alert = current_time\n\n    time.sleep(check_interval)\n```\n\nHere, I'm tracking the last time an alert was sent for CPU and memory separately. If the usage exceeds the threshold and enough time has passed since the last alert, an email is sent, and the last alert time is updated.\n\nThis should help in reducing the number of alerts while still being informed about ongoing issues.\n\nAnother consideration is to have a way to stop the script gracefully, maybe after a certain condition or via user input, but for now, since it's intended to run indefinitely, a continuous loop is acceptable.\n\nI should also think about logging the metrics or alerts to a file for later analysis, but that might be beyond the scope of this task.\n\nLet me summarize the script's components:\n\n1. Import necessary libraries.\n\n2. Define thresholds for CPU and memory usage.\n\n3. Set up email and SMTP server details.\n\n4. Function to retrieve CPU and memory usage using `psutil`.\n\n5. Function to send email alerts using `smtplib`.\n\n6. Main loop that checks metrics at regular intervals and sends alerts if thresholds are exceeded, with a cooldown period to avoid frequent alerts.\n\nI think this covers the requirements. Now, I'll write the complete script accordingly.\n\n## Final Solution\nTo monitor CPU usage and memory consumption on a Linux system and send email alerts when these metrics exceed specified thresholds, you can use the following Python script. This script uses the `psutil` library for system monitoring and `smtplib` for sending emails.\n\n### Prerequisites\n\n- Install the `psutil` library using pip:\n  ```bash\n  pip install psutil\n  ```\n\n### Script\n\n```python\nimport psutil\nimport smtplib\nfrom email.mime.text import MIMEText\nimport time\n\n# Define thresholds\ncpu_threshold = 80  # in percentage\nmemory_threshold = 90  # in percentage\n\n# Email details\nsender_email = \"your_email@example.com\"\nreceiver_email = \"receiver@example.com\"\nsmtp_server = \"smtp.example.com\"\nsmtp_port = 587\nsmtp_username = \"your_email@example.com\"\nsmtp_password = \"your_password\"\n\n# Alert cooldown interval in seconds (e.g., 600 seconds = 10 minutes)\nalert_interval = 600\n\n# Check interval in seconds (e.g., 60 seconds = 1 minute)\ncheck_interval = 60\n\n# Track last alert times\nlast_cpu_alert = 0\nlast_memory_alert = 0\n\ndef get_sys_metrics():\n    \"\"\"Retrieve CPU and memory usage percentages.\"\"\"\n    cpu_usage = psutil.cpu_percent(interval=1)\n    memory_usage = psutil.virtual_memory().percent\n    return cpu_usage, memory_usage\n\ndef send_email_alert(subject, message):\n    \"\"\"Send an email alert with the given subject and message.\"\"\"\n    msg = MIMEText(message)\n    msg['Subject'] = subject\n    msg['From'] = sender_email\n    msg['To'] = receiver_email\n\n    with smtplib.SMTP(smtp_server, smtp_port) as server:\n        server.starttls()\n        server.login(smtp_username, smtp_password)\n        server.sendmail(sender_email, receiver_email, msg.as_string())\n\ntry:\n    while True:\n        current_time = time.time()\n        cpu_usage, memory_usage = get_sys_metrics()\n        print(f\"CPU Usage: {cpu_usage}%, Memory Usage: {memory_usage}%\")\n\n        if cpu_usage > cpu_threshold and current_time - last_cpu_alert > alert_interval:\n            subject = \"CPU Usage Alert\"\n            message = f\"CPU Usage: {cpu_usage}%\"\n            send_email_alert(subject, message)\n            last_cpu_alert = current_time\n\n        if memory_usage > memory_threshold and current_time - last_memory_alert > alert_interval:\n            subject = \"Memory Usage Alert\"\n            message = f\"Memory Usage: {memory_usage}%\"\n            send_email_alert(subject, message)\n            last_memory_alert = current_time\n\n        time.sleep(check_interval)\nexcept Exception as e:\n    print(f\"An error occurred: {e}\")\n```\n\n### Instructions\n\n1. **Configure Thresholds:** Set `cpu_threshold` and `memory_threshold` to the desired percentage values.\n2. **Set Email Details:** Update `sender_email`, `receiver_email`, `smtp_server`, `smtp_port`, `smtp_username`, and `smtp_password` with your email and SMTP server details.\n3. **Adjust Intervals:** Modify `alert_interval` and `check_interval` to set the alert cooldown period and check frequency, respectively.\n4. **Run the Script:** Execute the script in a Python environment where `psutil` is installed. Ensure the script has the necessary permissions to monitor system resources and send emails.\n\nThis script will continuously monitor the CPU and memory usage, printing the current usage and sending email alerts if the usage exceeds the specified thresholds, with a cooldown period to prevent frequent alerts."
    }
]