[
    {
        "role": "user",
        "content": "Create a C++ implementation of a singly linked list, including methods for adding elements, deleting elements, and searching for elements by value."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Creating a singly linked list in C++ involves defining a structure for the nodes and implementing functions to add, delete, and search for elements.\n\nFirst, let's define the structure for a node in the linked list. Each node will contain an integer value and a pointer to the next node.\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n};\n```\n\nNext, we'll create a class for the singly linked list, which will have methods to add elements, delete elements, and search for elements by value.\n\nHere's a step-by-step implementation:\n\n1. **Adding Elements:**\n   - `addToHead(int value)`: Adds a new node with the given value to the beginning of the list.\n   - `addToTail(int value)`: Adds a new node with the given value to the end of the list.\n\n2. **Deleting Elements:**\n   - `deleteFromHead()`: Removes the first node from the list.\n   - `deleteFromTail()`: Removes the last node from the list.\n   - `deleteByValue(int value)`: Removes the first node that matches the given value.\n\n3. **Searching for Elements:**\n   - `search(int value)`: Returns true if the value is found in the list, otherwise false.\n\nAdditionally, we'll include a constructor to initialize the list and a destructor to clean up the list when it's no longer needed.\n\nHere's the complete implementation:\n\n```cpp\n#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\n    // Helper function to delete all nodes\n    void deleteAll() {\n        while (head != nullptr) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n\npublic:\n    // Constructor\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Destructor\n    ~SinglyLinkedList() {\n        deleteAll();\n    }\n\n    // Add a new node with the given value to the head of the list\n    void addToHead(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Add a new node with the given value to the tail of the list\n    void addToTail(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n        } else {\n            Node* current = head;\n            while (current->next != nullptr) {\n                current = current->next;\n            }\n            current->next = newNode;\n        }\n    }\n\n    // Remove the first node from the list\n    void deleteFromHead() {\n        if (head != nullptr) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n\n    // Remove the last node from the list\n    void deleteFromTail() {\n        if (head == nullptr) return;\n\n        if (head->next == nullptr) {\n            delete head;\n            head = nullptr;\n            return;\n        }\n\n        Node* current = head;\n        while (current->next->next != nullptr) {\n            current = current->next;\n        }\n        delete current->next;\n        current->next = nullptr;\n    }\n\n    // Remove the first node that matches the given value\n    void deleteByValue(int value) {\n        if (head == nullptr) return;\n\n        if (head->data == value) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node* current = head;\n        while (current->next != nullptr) {\n            if (current->next->data == value) {\n                Node* temp = current->next;\n                current->next = current->next->next;\n                delete temp;\n                return;\n            }\n            current = current->next;\n        }\n    }\n\n    // Search for a value in the list\n    bool search(int value) {\n        Node* current = head;\n        while (current != nullptr) {\n            if (current->data == value) {\n                return true;\n            }\n            current = current->next;\n        }\n        return false;\n    }\n\n    // Display the list\n    void display() {\n        Node* current = head;\n        while (current != nullptr) {\n            std::cout << current->data << \" -> \";\n            current = current->next;\n        }\n        std::cout << \"nullptr\" << std::endl;\n    }\n};\n\nint main() {\n    SinglyLinkedList list;\n\n    list.addToHead(3);\n    list.addToHead(2);\n    list.addToHead(1);\n    list.display();  // Output: 1 -> 2 -> 3 -> nullptr\n\n    list.addToTail(4);\n    list.display();  // Output: 1 -> 2 -> 3 -> 4 -> nullptr\n\n    list.deleteFromHead();\n    list.display();  // Output: 2 -> 3 -> 4 -> nullptr\n\n    list.deleteFromTail();\n    list.display();  // Output: 2 -> 3 -> nullptr\n\n    list.deleteByValue(3);\n    list.display();  // Output: 2 -> nullptr\n\n    std::cout << \"Search for 2: \" << (list.search(2) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Found\n    std::cout << \"Search for 3: \" << (list.search(3) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Not Found\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Node Structure:**\n   - Each node contains an integer `data` and a pointer to the `next` node.\n\n2. **SinglyLinkedList Class:**\n   - **Constructor:** Initializes the head pointer to `nullptr`.\n   - **Destructor:** Calls `deleteAll()` to free the memory allocated for nodes.\n   - **addToHead(int value):** Adds a new node with the given value to the beginning of the list.\n   - **addToTail(int value):** Adds a new node with the given value to the end of the list.\n   - **deleteFromHead():** Removes the first node from the list.\n   - **deleteFromTail():** Removes the last node from the list.\n   - **deleteByValue(int value):** Removes the first node that matches the given value.\n   - **search(int value):** Searches for the given value in the list and returns `true` if found, otherwise `false`.\n   - **display():** Prints the elements of the list.\n\n3. **Main Function:**\n   - Demonstrates the usage of the singly linked list by performing various operations and displaying the list after each operation.\n\nThis implementation should cover the basic operations you need for a singly linked list in C++. If you have any specific requirements or need further modifications, feel free to ask!"
    }
]