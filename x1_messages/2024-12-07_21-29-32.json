[
    {
        "role": "user",
        "content": "Design a Java application that simulates a basic chat room using sockets. The application should support multiple clients connecting to a central server and exchanging messages in real-time.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, designing a basic chat room using Java sockets involves creating both a server and multiple client applications that can connect to this server. The server will handle incoming connections from clients and facilitate the exchange of messages among them in real-time.\n\n### Key Components\n\n1. **Server**:\n   - Listens for incoming client connections.\n   - Manages a list of connected clients.\n   - Broadcasts messages received from one client to all other connected clients.\n\n2. **Client**:\n   - Connects to the server.\n   - Sends messages to the server.\n   - Receives messages from the server and displays them.\n\n### Approach\n\n1. **Server Setup**:\n   - Use a `ServerSocket` to listen for incoming connections.\n   - Accept connections from clients using `accept()` method, which returns a `Socket` object for each client.\n   - Handle each client connection in a separate thread to manage multiple clients concurrently.\n\n2. **Client Handling**:\n   - Each client thread reads messages from its input stream and broadcasts them to all other clients.\n   - Manage a list of active client sockets to keep track of connected clients.\n\n3. **Client Setup**:\n   - Use a `Socket` to connect to the server.\n   - Provide a simple interface for users to input messages.\n   - Display incoming messages from the server.\n\n### Solution Code\n\n#### Server Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 1234;\n    private Set<PrintWriter> clientWriters = new HashSet<>();\n\n    public static void main(String[] args) throws IOException {\n        new ChatServer().start();\n    }\n\n    public void start() throws IOException {\n        System.out.println(\"Chat Server is starting...\");\n        ServerSocket serverSocket = new ServerSocket(PORT);\n        try {\n            while (true) {\n                Socket socket = serverSocket.accept();\n                new ClientHandler(socket, this).start();\n            }\n        } finally {\n            serverSocket.close();\n        }\n    }\n\n    synchronized void addWriter(PrintWriter out) {\n        clientWriters.add(out);\n    }\n\n    synchronized void removeWriter(PrintWriter out) {\n        clientWriters.remove(out);\n    }\n\n    synchronized void broadcast(String message) {\n        for (PrintWriter out : clientWriters) {\n            out.println(message);\n            out.flush();\n        }\n    }\n}\n\nclass ClientHandler extends Thread {\n    private Socket socket;\n    private ChatServer server;\n\n    public ClientHandler(Socket socket, ChatServer server) {\n        this.socket = socket;\n        this.server = server;\n    }\n\n    public void run() {\n        try (\n            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))\n        ) {\n            server.addWriter(out);\n            String message;\n            while ((message = in.readLine()) != null) {\n                System.out.println(\"Received: \" + message);\n                server.broadcast(message);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            server.removeWriter(out);\n        }\n    }\n}\n```\n\n#### Client Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.Scanner;\n\npublic class ChatClient {\n    private static final String SERVER_ADDRESS = \"localhost\";\n    private static final int SERVER_PORT = 1234;\n\n    public static void main(String[] args) throws IOException {\n        new ChatClient().start();\n    }\n\n    public void start() throws IOException {\n        Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n        try (\n            PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            Scanner scanner = new Scanner(System.in)\n        ) {\n            System.out.println(\"Connected to chat server. Type messages below:\");\n            Thread readerThread = new Thread(() -> {\n                String message;\n                try {\n                    while ((message = in.readLine()) != null) {\n                        System.out.println(\"Received: \" + message);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n            readerThread.start();\n\n            while (scanner.hasNextLine()) {\n                String message = scanner.nextLine();\n                out.println(message);\n            }\n        } finally {\n            socket.close();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server**:\n   - Listens on port 1234.\n   - Accepts multiple client connections and handles each in a separate `ClientHandler` thread.\n   - Maintains a set of `PrintWriter` objects for connected clients to broadcast messages.\n\n2. **Client**:\n   - Connects to the server at `localhost` on port 1234.\n   - Reads user input from the console and sends it to the server.\n   - Displays messages received from the server in real-time.\n\nThis setup provides a basic real-time chat functionality using Java sockets, suitable for educational and introductory purposes."
    }
]