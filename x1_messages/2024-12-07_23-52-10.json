[
    {
        "role": "user",
        "content": "Write a Python program that implements a simple chat server and client using sockets. The server should support multiple clients and broadcast messages to all connected clients. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple chat server and client using Python's socket module. We'll make sure that the server can handle multiple clients and broadcast messages to all connected clients.\n\n### Server Code\n\nFirst, let's write the server code. The server will need to:\n\n1. Create a socket and bind it to a specific address and port.\n2. Listen for incoming connections.\n3. Accept connections from clients and handle each client in a separate thread.\n4. Broadcast messages received from one client to all other connected clients.\n\nHere's the server code:\n\n```python\nimport socket\nimport threading\n\n# List to keep track of connected clients\nclients = []\n\ndef broadcast(message, connection):\n    for client in clients:\n        if client != connection:\n            try:\n                client.send(message)\n            except:\n                # Remove the client if unable to send data\n                remove(client)\n\ndef handle_client(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024)\n            if message:\n                print(\"Received:\", message.decode())\n                broadcast(message, client_socket)\n            else:\n                # Remove the client if no message\n                remove(client_socket)\n                break\n        except:\n            continue\n\ndef remove(connection):\n    if connection in clients:\n        clients.remove(connection)\n\ndef main():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind(('127.0.0.1', 12345))\n    server.listen(5)\n    print(\"Server listening on port 12345\")\n\n    while True:\n        client_socket, addr = server.accept()\n        clients.append(client_socket)\n        print(f\"Connected to {addr[0]}:{addr[1]}\")\n        thread = threading.Thread(target=handle_client, args=(client_socket,))\n        thread.start()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Client Code\n\nNow, let's write the client code. The client will need to:\n\n1. Create a socket and connect to the server's address and port.\n2. Send messages to the server.\n3. Receive messages from the server and display them.\n\nHere's the client code:\n\n```python\nimport socket\nimport threading\n\ndef receive_messages(sock):\n    while True:\n        try:\n            message = sock.recv(1024)\n            if message:\n                print(message.decode())\n        except:\n            print(\"Connection closed\")\n            break\n\ndef main():\n    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client.connect(('127.0.0.1', 12345))\n    print(\"Connected to server\")\n\n    # Start a thread to receive messages\n    receive_thread = threading.Thread(target=receive_messages, args=(client,))\n    receive_thread.start()\n\n    while True:\n        message = input()\n        if message.lower() == 'exit':\n            break\n        client.send(message.encode())\n\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n- **Server:**\n  - The server creates a socket and binds it to `127.0.0.1` on port `12345`.\n  - It listens for incoming connections and accepts them, adding each client socket to the `clients` list.\n  - Each client is handled in a separate thread, which receives messages and broadcasts them to all other clients.\n  - If a client disconnects or an error occurs, the client is removed from the `clients` list.\n\n- **Client:**\n  - The client creates a socket and connects to the server.\n  - It starts a thread to receive messages from the server and print them.\n  - The main thread allows the user to input messages, which are sent to the server.\n  - Entering 'exit' will terminate the connection.\n\nThis setup allows multiple clients to connect to the server and exchange messages in real-time."
    }
]