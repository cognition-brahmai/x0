[
    {
        "role": "user",
        "content": "Create a Python script that connects to a Cassandra database, creates a table for storing user information (name, email, age), inserts sample data, and queries the data based on specified conditions (e.g., users older than 30).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To create a Python script that connects to a Cassandra database, you'll need to have the Cassandra driver installed. You can install it using pip if you haven't already:\n\n```bash\npip install cassandra-driver\n```\n\nOnce you have the driver installed, you can proceed to write the script. Below is a step-by-step guide and a sample script to achieve what you've described.\n\n### Steps:\n\n1. **Connect to the Cassandra cluster.**\n2. **Create a keyspace if it doesn't exist.**\n3. **Set the keyspace for the current session.**\n4. **Create a table for storing user information.**\n5. **Insert sample data into the table.**\n6. **Query the data based on specified conditions (e.g., users older than 30).**\n7. **Print the results.**\n\n### Sample Script:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\n\n# Step 1: Connect to the Cassandra cluster\ncluster = Cluster(['127.0.0.1'])  # Use your Cassandra cluster IP addresses\nsession = cluster.connect()\n\n# Step 2: Create a keyspace if it doesn't exist\nkeyspace = \"user_keyspace\"\nsession.execute(\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS %s\n    WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n\"\"\" % keyspace)\n\n# Step 3: Set the keyspace for the current session\nsession.set_keyspace(keyspace)\n\n# Step 4: Create a table for storing user information\ntable_name = \"users\"\nsession.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS %s (\n        name text,\n        email text PRIMARY KEY,\n        age int\n    )\n\"\"\" % table_name)\n\n# Step 5: Insert sample data into the table\nsample_data = [\n    (\"Alice\", \"alice@example.com\", 25),\n    (\"Bob\", \"bob@example.com\", 35),\n    (\"Charlie\", \"charlie@example.com\", 32),\n    (\"David\", \"david@example.com\", 28)\n]\n\nfor name, email, age in sample_data:\n    session.execute(\"\"\"\n        INSERT INTO %s (name, email, age) VALUES ('%s', '%s', %d)\n    \"\"\" % (table_name, name, email, age))\n\n# Step 6: Query the data based on specified conditions (users older than 30)\nquery = SimpleStatement(\"\"\"\n    SELECT * FROM %s WHERE age > 30\n\"\"\" % table_name)\n\n# Step 7: Print the results\nprint(\"Users older than 30:\")\nfor row in session.execute(query):\n    print(f\"Name: {row.name}, Email: {row.email}, Age: {row.age}\")\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation:\n\n1. **Connecting to the Cluster:** We connect to the Cassandra cluster running on localhost. If your cluster is running on different IP addresses, update the `Cluster` function accordingly.\n2. **Creating Keyspace:** We create a keyspace named `user_keyspace` with a simple replication strategy. Adjust the replication factor as needed.\n3. **Setting Keyspace:** Set the current session to use the created keyspace.\n4. **Creating Table:** Create a table named `users` with columns for name, email, and age. Email is set as the primary key.\n5. **Inserting Data:** Insert sample user data into the table.\n6. **Querying Data:** Use a `SimpleStatement` to query users older than 30.\n7. **Printing Results:** Print the queried user information.\n8. **Closing Connection:** Properly shut down the connection to the cluster.\n\nThis script provides a basic example of interacting with a Cassandra database using Python. You can expand upon this by adding more features or handling exceptions as needed."
    }
]