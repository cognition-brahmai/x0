[
    {
        "role": "user",
        "content": "Develop a Node.js script that connects to an Azure Storage account and uploads a local file to a specified container. The script should take command line arguments for the storage account connection string, container name, and local file path.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Node.js script that uploads a local file to an Azure Storage container. We'll use command-line arguments for the storage account connection string, container name, and local file path. Here's how we can approach this:\n\n1. **Set up the project**: Initialize a new Node.js project and install the necessary packages.\n2. **Install Azure Storage SDK**: We'll use the `@azure/storage-blob` package to interact with Azure Storage.\n3. **Parse command-line arguments**: Use the `minimist` package to handle command-line options.\n4. **Upload the file**: Connect to the Azure Storage account, create a blob client for the specified container, and upload the local file.\n\nLet's start by setting up the project.\n\n### Step 1: Set up the project\n\nFirst, create a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir azure-storage-upload\ncd azure-storage-upload\nnpm init -y\n```\n\nThis will create a `package.json` file with default values.\n\n### Step 2: Install necessary packages\n\nWe need to install the Azure Storage Blob SDK and a package to handle command-line arguments. Let's use `minimist` for parsing command-line options.\n\nInstall the required packages:\n\n```bash\nnpm install @azure/storage-blob minimist\n```\n\n### Step 3: Create the script\n\nCreate a new file called `upload.js` in your project directory.\n\n### Step 4: Parse command-line arguments\n\nWe'll use `minimist` to parse the command-line arguments. The script should accept the following options:\n\n- `--connection-string` or `-c`: The Azure Storage account connection string.\n- `--container` or `-k`: The name of the container to upload the file to.\n- `--file` or `-f`: The local file path to upload.\n\nHere's how you can parse these arguments:\n\n```javascript\nconst minimist = require('minimist');\n\nconst argv = minimist(process.argv.slice(2), {\n  alias: {\n    connection_string: 'c',\n    container: 'k',\n    file: 'f'\n  }\n});\n\nconst connectionString = argv.connection_string;\nconst containerName = argv.container;\nconst localFilePath = argv.file;\n```\n\n### Step 5: Upload the file to Azure Storage\n\nNow, we'll use the Azure Storage Blob SDK to upload the file.\n\nFirst, import the necessary modules:\n\n```javascript\nconst { BlobServiceClient } = require('@azure/storage-blob');\n```\n\nThen, create a function to upload the file:\n\n```javascript\nasync function uploadFile(connectionString, containerName, localFilePath) {\n  try {\n    // Create a BlobServiceClient from the connection string\n    const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n\n    // Get a reference to the container\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n\n    // Create the container if it doesn't exist\n    const createContainerResponse = await containerClient.createIfNotExists();\n    console.log(`Container ${containerName} created with status ${createContainerResponse.statusCode}`);\n\n    // Get a reference to the blob\n    const blobName = path.basename(localFilePath);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n    // Upload the local file\n    const data = createReadStream(localFilePath);\n    const uploadResponse = await blockBlobClient.uploadData(data);\n    console.log(`File ${localFilePath} uploaded to ${containerName}/${blobName} with status ${uploadResponse.statusCode}`);\n  } catch (error) {\n    console.error('Error uploading file:', error.message);\n  }\n}\n```\n\n### Step 6: Add error handling and usage instructions\n\nTo make the script more user-friendly, add checks for missing arguments and display usage instructions.\n\n```javascript\nif (!connectionString || !containerName || !localFilePath) {\n  console.log('Usage: node upload.js -c <connection_string> -k <container_name> -f <local_file_path>');\n  process.exit(1);\n}\n```\n\n### Step 7: Put it all together\n\nHere's the complete script:\n\n```javascript\nconst minimist = require('minimist');\nconst { BlobServiceClient } = require('@azure/storage-blob');\nconst fs = require('fs');\nconst path = require('path');\n\nconst argv = minimist(process.argv.slice(2), {\n  alias: {\n    connection_string: 'c',\n    container: 'k',\n    file: 'f'\n  }\n});\n\nconst connectionString = argv.connection_string;\nconst containerName = argv.container;\nconst localFilePath = argv.file;\n\nif (!connectionString || !containerName || !localFilePath) {\n  console.log('Usage: node upload.js -c <connection_string> -k <container_name> -f <local_file_path>');\n  process.exit(1);\n}\n\nasync function uploadFile(connectionString, containerName, localFilePath) {\n  try {\n    // Create a BlobServiceClient from the connection string\n    const blobServiceClient = BlobServiceClient.fromConnectionString(connectionString);\n\n    // Get a reference to the container\n    const containerClient = blobServiceClient.getContainerClient(containerName);\n\n    // Create the container if it doesn't exist\n    const createContainerResponse = await containerClient.createIfNotExists();\n    console.log(`Container ${containerName} created with status ${createContainerResponse.statusCode}`);\n\n    // Get a reference to the blob\n    const blobName = path.basename(localFilePath);\n    const blockBlobClient = containerClient.getBlockBlobClient(blobName);\n\n    // Upload the local file\n    const data = fs.createReadStream(localFilePath);\n    const uploadResponse = await blockBlobClient.uploadData(data);\n    console.log(`File ${localFilePath} uploaded to ${containerName}/${blobName} with status ${uploadResponse.statusCode}`);\n  } catch (error) {\n    console.error('Error uploading file:', error.message);\n  }\n}\n\nuploadFile(connectionString, containerName, localFilePath);\n```\n\n### Step 8: Run the script\n\nSave the script and run it from the command line with the required arguments:\n\n```bash\nnode upload.js -c \"<your_connection_string>\" -k \"<your_container_name>\" -f \"<path_to_your_file>\"\n```\n\nReplace `<your_connection_string>`, `<your_container_name>`, and `<path_to_your_file>` with your actual values.\n\nThat's it! This script will connect to your Azure Storage account, create the specified container if it doesn't exist, and upload the local file to it."
    }
]