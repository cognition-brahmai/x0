[
    {
        "role": "user",
        "content": "Write a Golang program that connects to a PostgreSQL database, creates a table called \"employees\" with columns id, name, age, and department, and inserts 5 sample records into the table."
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through writing a Go program that connects to a PostgreSQL database, creates a table named \"employees,\" and inserts five sample records into it. Make sure you have Go installed on your machine and also have access to a PostgreSQL database.\n\nFirst, you need to install the necessary packages. You'll need the `lib/pq` package for connecting to PostgreSQL from Go. You can install it using:\n\n```sh\ngo get -u github.com/lib/pq\n```\n\nNow, let's write the code step by step.\n\n1. **Import the required packages:**\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/lib/pq\"\n)\n```\n\n2. **Define your database connection parameters:**\n\nReplace the values with your actual database credentials.\n\n```go\nconst (\n\thost     = \"localhost\"\n\tport     = 5432\n\tuser     = \"your_user\"\n\tpassword = \"your_password\"\n\tdbname   = \"your_dbname\"\n)\n```\n\n3. **Create a function to connect to the database:**\n\nThis function will return a `*sql.DB` object that you can use to interact with the database.\n\n```go\nfunc dbConnect() *sql.DB {\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",\n\t\thost, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn db\n}\n```\n\n4. **Create the \"employees\" table:**\n\nDefine a SQL statement to create the table if it doesn't exist.\n\n```go\nfunc createTable(db *sql.DB) {\n\tsqlStmt := `\n\tCREATE TABLE IF NOT EXISTS employees (\n\t\tid SERIAL PRIMARY KEY,\n\t\tname TEXT NOT NULL,\n\t\tage INTEGER NOT NULL,\n\t\tdepartment TEXT NOT NULL\n\t);\n\t`\n\n\t_, err := db.Exec(sqlStmt)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating table: %v\", err)\n\t}\n\tlog.Println(\"Table created successfully\")\n}\n```\n\n5. **Insert sample records into the \"employees\" table:**\n\nDefine a list of employees and insert them into the database.\n\n```go\ntype Employee struct {\n\tName       string\n\tAge        int\n\tDepartment string\n}\n\nfunc insertEmployees(db *sql.DB) {\n\temployees := []Employee{\n\t\t{\"Alice\", 30, \"HR\"},\n\t\t{\"Bob\", 25, \"IT\"},\n\t\t{\"Charlie\", 35, \"Finance\"},\n\t\t{\"David\", 28, \"Marketing\"},\n\t\t{\"Eve\", 22, \"Sales\"},\n\t}\n\n\tfor _, emp := range employees {\n\t\tsqlStmt := `\n\t\tINSERT INTO employees (name, age, department) VALUES ($1, $2, $3);\n\t\t`\n\t\t_, err := db.Exec(sqlStmt, emp.Name, emp.Age, emp.Department)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error inserting employee: %v\", err)\n\t\t}\n\t\tlog.Printf(\"Inserted employee: %s\", emp.Name)\n\t}\n}\n```\n\n6. **Main function to orchestrate the operations:**\n\nConnect to the database, create the table, and insert the employees.\n\n```go\nfunc main() {\n\tdb := dbConnect()\n\tdefer db.Close()\n\n\tcreateTable(db)\n\tinsertEmployees(db)\n}\n```\n\n### Full Code\n\nHere's the complete code for your reference:\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/lib/pq\"\n)\n\nconst (\n\thost     = \"localhost\"\n\tport     = 5432\n\tuser     = \"your_user\"\n\tpassword = \"your_password\"\n\tdbname   = \"your_dbname\"\n)\n\ntype Employee struct {\n\tName       string\n\tAge        int\n\tDepartment string\n}\n\nfunc dbConnect() *sql.DB {\n\tpsqlInfo := fmt.Sprintf(\"host=%s port=%d user=%s password=%s dbname=%s sslmode=disable\",\n\t\thost, port, user, password, dbname)\n\n\tdb, err := sql.Open(\"postgres\", psqlInfo)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\treturn db\n}\n\nfunc createTable(db *sql.DB) {\n\tsqlStmt := `\n\tCREATE TABLE IF NOT EXISTS employees (\n\t\tid SERIAL PRIMARY KEY,\n\t\tname TEXT NOT NULL,\n\t\tage INTEGER NOT NULL,\n\t\tdepartment TEXT NOT NULL\n\t);\n\t`\n\n\t_, err := db.Exec(sqlStmt)\n\tif err != nil {\n\t\tlog.Fatalf(\"Error creating table: %v\", err)\n\t}\n\tlog.Println(\"Table created successfully\")\n}\n\nfunc insertEmployees(db *sql.DB) {\n\temployees := []Employee{\n\t\t{\"Alice\", 30, \"HR\"},\n\t\t{\"Bob\", 25, \"IT\"},\n\t\t{\"Charlie\", 35, \"Finance\"},\n\t\t{\"David\", 28, \"Marketing\"},\n\t\t{\"Eve\", 22, \"Sales\"},\n\t}\n\n\tfor _, emp := range employees {\n\t\tsqlStmt := `\n\t\tINSERT INTO employees (name, age, department) VALUES ($1, $2, $3);\n\t\t`\n\t\t_, err := db.Exec(sqlStmt, emp.Name, emp.Age, emp.Department)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"Error inserting employee: %v\", err)\n\t\t}\n\t\tlog.Printf(\"Inserted employee: %s\", emp.Name)\n\t}\n}\n\nfunc main() {\n\tdb := dbConnect()\n\tdefer db.Close()\n\n\tcreateTable(db)\n\tinsertEmployees(db)\n}\n```\n\n### Explanation\n\n1. **Connecting to the Database:**\n   - We use the `sql.Open` function from the `database/sql` package to establish a connection to the PostgreSQL database.\n   - The connection string is constructed using the provided host, port, user, password, and dbname.\n\n2. **Creating the Table:**\n   - We define a SQL statement to create a table named \"employees\" with columns for id, name, age, and department.\n   - The `id` column is a serial primary key, which means it will auto-increment.\n   - We use the `db.Exec` method to execute the SQL statement.\n\n3. **Inserting Records:**\n   - We define a struct `Employee` to hold employee data.\n   - We create a slice of `Employee` structs with sample data.\n   - We loop through the slice and use the `db.Exec` method to insert each employee into the database.\n\n4. **Main Function:**\n   - We connect to the database, create the table, and insert the sample records in sequence.\n\nMake sure to replace the placeholder values for `host`, `port`, `user`, `password`, and `dbname` with your actual database credentials. Also, ensure that the PostgreSQL server is running and accessible.\n\nThis program will create the \"employees\" table if it doesn't exist and insert five sample records into it. Each step is logged to provide feedback on the operations being performed."
    }
]