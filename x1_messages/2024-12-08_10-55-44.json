[
    {
        "role": "user",
        "content": "Build a Python Flask web application that allows users to upload images, apply basic image processing operations (e.g., resizing, cropping, rotating), and download the processed images.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I can help you build a Python Flask web application for image processing! Let's get started.\n\nFirst, make sure you have Python installed on your system. You can download it from python.org if you haven't already.\n\nNext, install Flask and the required libraries for image processing. Open your terminal or command prompt and run:\n\n```\npip install flask Pillow\n```\n\nNow, create a new directory for your project, say \"image_processor\". Inside this directory, create the following files and folders:\n\n- app.py\n\n- templates/\n\n- upload.html\n\n- process.html\n\n- static/\n\n- uploads/\n\n- processed/\n\nLet's start by setting up the basic Flask application in app.py:\n\n```python\n\nfrom flask import Flask, render_template, request, send_from_directory\n\nimport os\n\napp = Flask(__name__)\n\n# Configure upload folder\n\napp.config['UPLOAD_FOLDER'] = 'static/uploads/'\n\napp.config['PROCESSED_FOLDER'] = 'static/processed/'\n\n@app.route('/')\n\ndef index():\n\nreturn render_template('upload.html')\n\n@app.route('/upload', methods=['POST'])\n\ndef upload():\n\nif request.method == 'POST':\n\nfile = request.files['file']\n\nif file:\n\nfilename = file.filename\n\nfile_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n\nfile.save(file_path)\n\nreturn render_template('process.html', filename=filename)\n\nreturn 'File upload failed.'\n\n@app.route('/process', methods=['POST'])\n\ndef process():\n\n# Handle image processing based on user input\n\npass\n\n@app.route('/download/<filename>')\n\ndef download(filename):\n\nprocessed_path = os.path.join(app.config['PROCESSED_FOLDER'], filename)\n\nreturn send_from_directory(app.config['PROCESSED_FOLDER'], filename, as_attachment=True)\n\nif __name__ == '__main__':\n\napp.run(debug=True)\n\n```\n\nIn this code, we have three routes:\n\n1. The root route (/) renders the upload.html template.\n\n2. The /upload route handles the file upload and renders the process.html template with the filename.\n\n3. The /download/<filename> route allows users to download the processed image.\n\nNow, let's create the upload.html template in the templates folder:\n\n```html\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n\n<meta charset=\"UTF-8\">\n\n<title>Image Upload</title>\n\n</head>\n\n<body>\n\n<h1>Upload an Image</h1>\n\n<form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n\n<input type=\"file\" name=\"file\" accept=\"image/*\">\n\n<button type=\"submit\">Upload</button>\n\n</form>\n\n</body>\n\n</html>\n\n```\n\nThis is a simple HTML form that allows users to select and upload an image file.\n\nNext, create the process.html template:\n\n```html\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n\n<meta charset=\"UTF-8\">\n\n<title>Process Image</title>\n\n</head>\n\n<body>\n\n<h1>Process Image</h1>\n\n<p>Uploaded Image:</p>\n\n<img src=\"{{ url_for('static', filename='uploads/' + filename) }}\" alt=\"Uploaded Image\" width=\"300\">\n\n<form action=\"/process\" method=\"post\">\n\n<input type=\"hidden\" name=\"filename\" value=\"{{ filename }}\">\n\n<p>Resize:</p>\n\n<label for=\"width\">Width:</label>\n\n<input type=\"number\" name=\"width\" min=\"1\">\n\n<label for=\"height\">Height:</label>\n\n<input type=\"number\" name=\"height\" min=\"1\">\n\n<p>Crop:</p>\n\n<label for=\"left\">Left:</label>\n\n<input type=\"number\" name=\"left\" min=\"0\">\n\n<label for=\"top\">Top:</label>\n\n<input type=\"number\" name=\"top\" min=\"0\">\n\n<label for=\"crop_width\">Width:</label>\n\n<input type=\"number\" name=\"crop_width\" min=\"1\">\n\n<label for=\"crop_height\">Height:</label>\n\n<input type=\"number\" name=\"crop_height\" min=\"1\">\n\n<p>Rotate:</p>\n\n<label for=\"angle\">Angle (degrees):</label>\n\n<input type=\"number\" name=\"angle\" min=\"-360\" max=\"360\">\n\n<button type=\"submit\">Process Image</button>\n\n</form>\n\n</body>\n\n</html>\n\n```\n\nThis template displays the uploaded image and provides input fields for resizing, cropping, and rotating the image.\n\nNow, we need to implement the image processing functionality in the /process route. For this, we'll use the Pillow library, which is a fork of PIL (Python Imaging Library).\n\nFirst, import the necessary modules in app.py:\n\n```python\n\nfrom PIL import Image\n\nimport uuid\n\n```\n\nThen, update the /process route to handle the image processing based on user input:\n\n```python\n\n@app.route('/process', methods=['POST'])\n\ndef process():\n\nfilename = request.form['filename']\n\nfile_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n\nimg = Image.open(file_path)\n\n# Get user inputs\n\nwidth = int(request.form['width']) if request.form['width'] else None\n\nheight = int(request.form['height']) if request.form['height'] else None\n\nleft = int(request.form['left']) if request.form['left'] else None\n\ntop = int(request.form['top']) if request.form['top'] else None\n\ncrop_width = int(request.form['crop_width']) if request.form['crop_width'] else None\n\ncrop_height = int(request.form['crop_height']) if request.form['crop_height'] else None\n\nangle = float(request.form['angle']) if request.form['angle'] else None\n\n# Apply resizing\n\nif width and height:\n\nimg = img.resize((width, height), Image.ANTIALIAS)\n\n# Apply cropping\n\nif left is not None and top is not None and crop_width is not None and crop_height is not None:\n\nleft = min(left, img.width - 1)\n\ntop = min(top, img.height - 1)\n\nright = left + crop_width\n\nbottom = top + crop_height\n\nimg = img.crop((left, top, right, bottom))\n\n# Apply rotation\n\nif angle is not None:\n\nimg = img.rotate(angle, expand=True)\n\n# Save the processed image\n\nprocessed_filename = str(uuid.uuid4()) + '.jpg'\n\nprocessed_path = os.path.join(app.config['PROCESSED_FOLDER'], processed_filename)\n\nimg.save(processed_path)\n\nreturn render_template('download.html', filename=processed_filename)\n\n```\n\nIn this code, we open the uploaded image using Pillow, apply resizing, cropping, and rotation based on user input, and save the processed image with a unique filename in the processed folder.\n\nFinally, create a download.html template to provide a download link for the processed image:\n\n```html\n\n<!DOCTYPE html>\n\n<html lang=\"en\">\n\n<head>\n\n<meta charset=\"UTF-8\">\n\n<title>Download Processed Image</title>\n\n</head>\n\n<body>\n\n<h1>Processed Image</h1>\n\n<p>Download your processed image:</p>\n\n<a href=\"{{ url_for('download', filename=filename) }}\">Download</a>\n\n</body>\n\n</html>\n\n```\n\nNow, run your Flask application by executing app.py:\n\n```\n\npython app.py\n\n```\n\nOpen your web browser and navigate to http://127.0.0.1:5000/. You should see the image upload form. Upload an image, apply the desired processing operations, and download the processed image.\n\nThat's it! You've built a basic image processing web application using Python Flask and Pillow.\n\n## Final Solution\nTo create a Python Flask web application that allows users to upload images, apply basic image processing operations (such as resizing, cropping, and rotating), and download the processed images, follow the steps below.\n\n### Prerequisites\n- Python installed on your system.\n- Flask and Pillow libraries installed. You can install them using pip:\n  ```\n  pip install flask Pillow\n  ```\n\n### Project Structure\nCreate a new directory for your project, say \"image_processor\". Inside this directory, create the following files and folders:\n```\nimage_processor/\n\u2502\n\u251c\u2500\u2500 app.py\n\u251c\u2500\u2500 templates/\n\u2502   \u251c\u2500\u2500 upload.html\n\u2502   \u251c\u2500\u2500 process.html\n\u2502   \u2514\u2500\u2500 download.html\n\u2514\u2500\u2500 static/\n    \u251c\u2500\u2500 uploads/\n    \u2514\u2500\u2500 processed/\n```\n\n### Implementation\n\n1. **app.py**\n   This is the main application file.\n\n   ```python\n   from flask import Flask, render_template, request, send_from_directory\n   import os\n   from PIL import Image\n   import uuid\n\n   app = Flask(__name__)\n\n   # Configure upload folder\n   app.config['UPLOAD_FOLDER'] = 'static/uploads/'\n   app.config['PROCESSED_FOLDER'] = 'static/processed/'\n\n   @app.route('/')\n   def index():\n       return render_template('upload.html')\n\n   @app.route('/upload', methods=['POST'])\n   def upload():\n       if request.method == 'POST':\n           file = request.files['file']\n           if file:\n               filename = file.filename\n               file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n               file.save(file_path)\n               return render_template('process.html', filename=filename)\n       return 'File upload failed.'\n\n   @app.route('/process', methods=['POST'])\n   def process():\n       filename = request.form['filename']\n       file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n       img = Image.open(file_path)\n\n       # Get user inputs\n       width = int(request.form['width']) if request.form['width'] else None\n       height = int(request.form['height']) if request.form['height'] else None\n       left = int(request.form['left']) if request.form['left'] else None\n       top = int(request.form['top']) if request.form['top'] else None\n       crop_width = int(request.form['crop_width']) if request.form['crop_width'] else None\n       crop_height = int(request.form['crop_height']) if request.form['crop_height'] else None\n       angle = float(request.form['angle']) if request.form['angle'] else None\n\n       # Apply resizing\n       if width and height:\n           img = img.resize((width, height), Image.ANTIALIAS)\n\n       # Apply cropping\n       if left is not None and top is not None and crop_width is not None and crop_height is not None:\n           left = min(left, img.width - 1)\n           top = min(top, img.height - 1)\n           right = left + crop_width\n           bottom = top + crop_height\n           img = img.crop((left, top, right, bottom))\n\n       # Apply rotation\n       if angle is not None:\n           img = img.rotate(angle, expand=True)\n\n       # Save the processed image\n       processed_filename = str(uuid.uuid4()) + '.jpg'\n       processed_path = os.path.join(app.config['PROCESSED_FOLDER'], processed_filename)\n       img.save(processed_path)\n\n       return render_template('download.html', filename=processed_filename)\n\n   @app.route('/download/<filename>')\n   def download(filename):\n       processed_path = os.path.join(app.config['PROCESSED_FOLDER'], filename)\n       return send_from_directory(app.config['PROCESSED_FOLDER'], filename, as_attachment=True)\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n2. **templates/upload.html**\n   This is the HTML form for uploading images.\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Image Upload</title>\n   </head>\n   <body>\n       <h1>Upload an Image</h1>\n       <form action=\"/upload\" method=\"post\" enctype=\"multipart/form-data\">\n           <input type=\"file\" name=\"file\" accept=\"image/*\">\n           <button type=\"submit\">Upload</button>\n       </form>\n   </body>\n   </html>\n   ```\n\n3. **templates/process.html**\n   This template allows users to specify image processing operations.\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Process Image</title>\n   </head>\n   <body>\n       <h1>Process Image</h1>\n       <p>Uploaded Image:</p>\n       <img src=\"{{ url_for('static', filename='uploads/' + filename) }}\" alt=\"Uploaded Image\" width=\"300\">\n       <form action=\"/process\" method=\"post\">\n           <input type=\"hidden\" name=\"filename\" value=\"{{ filename }}\">\n           <p>Resize:</p>\n           <label for=\"width\">Width:</label>\n           <input type=\"number\" name=\"width\" min=\"1\">\n           <label for=\"height\">Height:</label>\n           <input type=\"number\" name=\"height\" min=\"1\">\n           <p>Crop:</p>\n           <label for=\"left\">Left:</label>\n           <input type=\"number\" name=\"left\" min=\"0\">\n           <label for=\"top\">Top:</label>\n           <input type=\"number\" name=\"top\" min=\"0\">\n           <label for=\"crop_width\">Width:</label>\n           <input type=\"number\" name=\"crop_width\" min=\"1\">\n           <label for=\"crop_height\">Height:</label>\n           <input type=\"number\" name=\"crop_height\" min=\"1\">\n           <p>Rotate:</p>\n           <label for=\"angle\">Angle (degrees):</label>\n           <input type=\"number\" name=\"angle\" min=\"-360\" max=\"360\">\n           <button type=\"submit\">Process Image</button>\n       </form>\n   </body>\n   </html>\n   ```\n\n4. **templates/download.html**\n   This template provides a download link for the processed image.\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Download Processed Image</title>\n   </head>\n   <body>\n       <h1>Processed Image</h1>\n       <p>Download your processed image:</p>\n       <a href=\"{{ url_for('download', filename=filename) }}\">Download</a>\n   </body>\n   </html>\n   ```\n\n### Running the Application\n1. Ensure all necessary directories (`static/uploads/` and `static/processed/`) are created.\n2. Run the Flask application:\n   ```\n   python app.py\n   ```\n3. Access the application in your web browser at [http://127.0.0.1:5000/](http://127.0.0.1:5000/).\n4. Upload an image, specify the processing operations, and download the processed image.\n\nThis setup provides a basic image processing web application using Flask and Pillow, allowing users to upload images, apply transformations, and download the results."
    }
]