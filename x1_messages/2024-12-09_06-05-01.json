[
    {
        "role": "user",
        "content": "Develop a Golang program that simulates a basic vending machine with the following functionalities:\n   - Accepts coins as input and keeps track of the total amount inserted.\n   - Displays a list of available products with their prices.\n   - Allows the user to select a product, and dispenses it if enough money has been inserted."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Developing a vending machine simulation in Golang is a great project to understand basic programming concepts like loops, conditionals, and data structures. Let's break down the requirements and plan how to implement them step by step.\n\n### Requirements\n\n1. **Accepts coins as input and keeps track of the total amount inserted.**\n2. **Displays a list of available products with their prices.**\n3. **Allows the user to select a product, and dispenses it if enough money has been inserted.**\n\n### Approach\n\n1. **Coin Input:**\n   - We'll assume the vending machine accepts specific coin denominations (e.g., 1, 5, 10, 25 cents).\n   - We'll keep track of the total amount inserted by the user.\n\n2. **Product List:**\n   - We'll define a list of products, each with a name and a price.\n   - We'll display this list to the user.\n\n3. **Product Selection:**\n   - The user will select a product by entering its name or an identifier.\n   - We'll check if the amount inserted is sufficient to purchase the selected product.\n   - If sufficient, dispense the product and calculate change if any.\n   - If insufficient, inform the user and allow them to insert more coins or cancel.\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n\t\"strings\"\n)\n\ntype Product struct {\n\tName  string\n\tPrice int\n}\n\nfunc main() {\n\t// Available products\n\tproducts := []Product{\n\t\t{\"Coke\", 100},\n\t\t{\"Pepsi\", 100},\n\t\t{\"Water\", 50},\n\t\t{\"Chips\", 75},\n\t}\n\n\t// Available coin denominations\n\tcoins := []int{1, 5, 10, 25}\n\n\t// Initialize total amount\n\ttotalInserted := 0\n\n\tscanner := bufio.NewScanner(os.Stdin)\n\n\tfor {\n\t\tfmt.Println(\"\\nVending Machine Menu:\")\n\t\tfmt.Println(\"1. Insert Coin\")\n\t\tfmt.Println(\"2. Select Product\")\n\t\tfmt.Println(\"3. Exit\")\n\t\tfmt.Print(\"Choose an option: \")\n\n\t\tscanner.Scan()\n\t\toption := scanner.Text()\n\n\t\tswitch option {\n\t\tcase \"1\":\n\t\t\t// Insert coin\n\t\t\tfmt.Println(\"Available coins: 1, 5, 10, 25 cents\")\n\t\t\tfmt.Print(\"Insert coin: \")\n\t\t\tscanner.Scan()\n\t\t\tcoinStr := scanner.Text()\n\t\t\tcoin, err := strconv.Atoi(coinStr)\n\t\t\tif err != nil || !contains(coins, coin) {\n\t\t\t\tfmt.Println(\"Invalid coin. Please insert a valid coin.\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\ttotalInserted += coin\n\t\t\tfmt.Printf(\"Total amount inserted: %d cents\\n\", totalInserted)\n\t\tcase \"2\":\n\t\t\t// Select product\n\t\t\tfmt.Println(\"Available products:\")\n\t\t\tfor i, product := range products {\n\t\t\t\tfmt.Printf(\"%d. %s - %d cents\\n\", i+1, product.Name, product.Price)\n\t\t\t}\n\t\t\tfmt.Print(\"Select a product by number: \")\n\t\t\tscanner.Scan()\n\t\t\u9078\u9805 := scanner.Text()\n\t\t\t\u9078\u9805Num, err := strconv.Atoi(\u9078\u9805)\n\t\t\tif err != nil || \u9078\u9805Num < 1 || \u9078\u9805Num > len(products) {\n\t\t\t\tfmt.Println(\"Invalid selection. Please select a valid product number.\")\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tselectedProduct := products[\u9078\u9805Num-1]\n\t\t\tif totalInserted >= selectedProduct.Price {\n\t\t\t\tchange := totalInserted - selectedProduct.Price\n\t\t\t\tfmt.Printf(\"Dispensing %s. Your change: %d cents\\n\", selectedProduct.Name, change)\n\t\t\t\ttotalInserted = 0\n\t\t\t} else {\n\t\t\t\tfmt.Println(\"Insufficient funds. Please insert more coins.\")\n\t\t\t}\n\t\tcase \"3\":\n\t\t\t// Exit\n\t\t\tfmt.Println(\"Exiting the vending machine. Thank you!\")\n\t\t\treturn\n\t\tdefault:\n\t\t\tfmt.Println(\"Invalid option. Please choose a valid option.\")\n\t\t}\n\t}\n}\n\nfunc contains(slice []int, item int) bool {\n\tfor _, v := range slice {\n\t\tif v == item {\n\t\t\treturn true\n\t\t}\n\t}\n\treturn false\n}\n```\n\n### Explanation\n\n1. **Product Definition:**\n   - We define a `Product` struct with `Name` and `Price`.\n   - A slice of `Product` holds the available items.\n\n2. **Coin Denominations:**\n   - We define accepted coin values.\n   - Users can insert these coins, and the total is accumulated.\n\n3. **Menu Options:**\n   - **Option 1:** Insert a coin. Validates the coin and adds to the total.\n   - **Option 2:** Select a product. Displays products, allows selection, checks if enough money is inserted, dispenses product and calculates change.\n   - **Option 3:** Exit the program.\n\n4. **Helper Function:**\n   - `contains` checks if a slice contains a specific integer.\n\nThis program runs in an infinite loop, allowing multiple transactions until the user chooses to exit. It handles basic input validation and provides feedback to the user at each step."
    }
]