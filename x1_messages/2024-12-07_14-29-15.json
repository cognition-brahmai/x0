[
    {
        "role": "user",
        "content": "Develop a Java program that reads data from an API (such as OpenWeatherMap or NewsAPI) and stores the fetched data in an Apache Kafka topic. Create a separate consumer application that reads the data from the Kafka topic and processes it in some way (e.g., filtering, aggregation).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's break down the task into smaller steps to make it manageable.\n\nFirst, you need to choose an API to fetch data from. You mentioned OpenWeatherMap and NewsAPI, so let's go with OpenWeatherMap for this example. You'll need to sign up for an API key from OpenWeatherMap to access their data.\n\nNext, you'll need to set up Apache Kafka. Kafka is a distributed streaming platform that allows you to publish and subscribe to streams of records. You'll need to install Kafka and set up a Kafka broker.\n\nOnce you have the API key and Kafka set up, you can proceed to write the Java program that reads data from OpenWeatherMap and publishes it to a Kafka topic.\n\nAfter that, you'll create a separate consumer application that reads data from the Kafka topic and processes it. For example, you can filter the data based on certain criteria or aggregate it in some way.\n\nLet's start by setting up the producer application that fetches data from OpenWeatherMap and publishes it to Kafka.\n\n## Step 1: Set Up OpenWeatherMap API\n\n1. **Sign up for OpenWeatherMap API key:**\n   - Go to [OpenWeatherMap](https://openweathermap.org/) and sign up for an account.\n   - Navigate to the API section and get an API key.\n\n2. **Choose the API endpoint:**\n   - For this example, let's use the current weather data endpoint: `https://api.openweathermap.org/data/2.5/weather?q={city name}&appid={API key}`\n\n## Step 2: Set Up Apache Kafka\n\n1. **Download and install Kafka:**\n   - Go to the [Apache Kafka](https://kafka.apache.org/downloads) website and download the latest version.\n   - Follow the installation instructions in the documentation.\n\n2. **Start the Kafka broker:**\n   - Open a terminal and navigate to the Kafka installation directory.\n   - Start the ZooKeeper server: `bin/zookeeper-server-start.sh config/zookeeper.properties`\n   - Start the Kafka broker: `bin/kafka-server-start.sh config/server.properties`\n\n3. **Create a Kafka topic:**\n   - Run the following command to create a topic named \"weather-data\":\n     ```sh\n     bin/kafka-topics.sh --create --topic weather-data --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1\n     ```\n\n## Step 3: Write the Producer Application\n\n1. **Add dependencies:**\n   - You'll need Kafka client and HTTP client libraries. If you're using Maven, add the following dependencies to your `pom.xml`:\n     ```xml\n     <dependencies>\n         <dependency>\n             <groupId>org.apache.kafka</groupId>\n             <artifactId>kafka-clients</artifactId>\n             <version>3.0.0</version>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.httpcomponents</groupId>\n             <artifactId>httpclient</artifactId>\n             <version>4.5.13</version>\n         </dependency>\n     </dependencies>\n     ```\n\n2. **Write the producer code:**\n   - Create a Java class named `WeatherDataProducer`:\n     ```java\n     import org.apache.http.HttpResponse;\n     import org.apache.http.client.methods.CloseableHttpResponse;\n     import org.apache.http.client.methods.HttpGet;\n     import org.apache.http.impl.client.CloseableHttpClient;\n     import org.apache.http.impl.client.HttpClients;\n     import org.apache.kafka.clients.producer.KafkaProducer;\n     import org.apache.kafka.clients.producer.Producer;\n     import org.apache.kafka.clients.producer.ProducerRecord;\n     import org.apache.kafka.clients.producer.RecordMetadata;\n     import org.json.JSONObject;\n\n     import java.io.BufferedReader;\n     import java.io.InputStreamReader;\n     import java.util.Properties;\n     import java.util.concurrent.Future;\n\n     public class WeatherDataProducer {\n\n         private static final String BOOTSTRAP_SERVERS = \"localhost:9092\";\n         private static final String TOPIC = \"weather-data\";\n         private static final String API_KEY = \"your_openweathermap_api_key\";\n         private static final String CITY = \"London\";\n\n         public static void main(String[] args) throws Exception {\n             // Create Kafka producer properties\n             Properties props = new Properties();\n             props.put(\"bootstrap.servers\", BOOTSTRAP_SERVERS);\n             props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n             props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n             // Create Kafka producer\n             Producer<String, String> producer = new KafkaProducer<>(props);\n\n             // Fetch weather data from OpenWeatherMap API\n             String weatherData = fetchWeatherData(CITY, API_KEY);\n\n             // Send data to Kafka topic\n             ProducerRecord<String, String> record = new ProducerRecord<>(TOPIC, CITY, weatherData);\n             Future<RecordMetadata> metadataFuture = producer.send(record);\n             RecordMetadata metadata = metadataFuture.get();\n\n             System.out.println(\"Sent data to topic: \" + metadata.topic() + \", partition: \" + metadata.partition() + \", offset: \" + metadata.offset());\n\n             // Close producer\n             producer.close();\n         }\n\n         private static String fetchWeatherData(String city, String apiKey) throws Exception {\n             CloseableHttpClient httpClient = HttpClients.createDefault();\n             HttpGet request = new HttpGet(\"https://api.openweathermap.org/data/2.5/weather?q=\" + city + \"&appid=\" + apiKey);\n             try (CloseableHttpResponse response = httpClient.execute(request)) {\n                 BufferedReader rd = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));\n                 StringBuilder result = new StringBuilder();\n                 String line;\n                 while ((line = rd.readLine()) != null) {\n                     result.append(line);\n                 }\n                 return result.toString();\n             }\n         }\n     }\n     ```\n\n3. **Replace `your_openweathermap_api_key` with your actual API key.**\n\n4. **Run the producer application:**\n   - Compile and run the `WeatherDataProducer` class.\n   - Check the Kafka topic to ensure data is being published.\n\n## Step 4: Write the Consumer Application\n\n1. **Add dependencies:**\n   - Ensure you have the Kafka client dependency in your `pom.xml`.\n\n2. **Write the consumer code:**\n   - Create a Java class named `WeatherDataConsumer`:\n     ```java\n     import org.apache.kafka.clients.consumer.ConsumerRecord;\n     import org.apache.kafka.clients.consumer.ConsumerRecords;\n     import org.apache.kafka.clients.consumer.KafkaConsumer;\n     import org.json.JSONObject;\n\n     import java.time.Duration;\n     import java.util.Collections;\n     import java.util.Properties;\n\n     public class WeatherDataConsumer {\n\n         private static final String BOOTSTRAP_SERVERS = \"localhost:9092\";\n         private static final String TOPIC = \"weather-data\";\n\n         public static void main(String[] args) {\n             // Create Kafka consumer properties\n             Properties props = new Properties();\n             props.put(\"bootstrap.servers\", BOOTSTRAP_SERVERS);\n             props.put(\"group.id\", \"weather-data-group\");\n             props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n             props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n             props.put(\"auto.offset.reset\", \"earliest\");\n\n             // Create Kafka consumer\n             KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n             consumer.subscribe(Collections.singletonList(TOPIC));\n\n             try {\n                 while (true) {\n                     ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n                     for (ConsumerRecord<String, String> record : records) {\n                         String key = record.key();\n                         String value = record.value();\n                         System.out.println(\"Received message: key=\" + key + \", value=\" + value);\n\n                         // Process the data (e.g., filter, aggregate)\n                         processWeatherData(key, value);\n                     }\n                 }\n             } finally {\n                 consumer.close();\n             }\n         }\n\n         private static void processWeatherData(String city, String data) {\n             JSONObject json = new JSONObject(data);\n             double temperature = json.getJSONObject(\"main\").getDouble(\"temp\");\n             System.out.println(\"Temperature in \" + city + \": \" + temperature + \" Kelvin\");\n             // Add more processing as needed\n         }\n     }\n     ```\n\n3. **Run the consumer application:**\n   - Compile and run the `WeatherDataConsumer` class.\n   - Ensure it receives and processes the data from the Kafka topic.\n\n## Conclusion\n\nYou have now created a Java program that fetches data from OpenWeatherMap API and publishes it to an Apache Kafka topic. Additionally, you have a separate consumer application that reads and processes the data from the Kafka topic. This setup can be extended and modified based on your specific requirements, such as fetching data at regular intervals, processing data in real-time, or integrating with other systems."
    }
]