[
    {
        "role": "user",
        "content": "Write a C++ program that simulates a simple bank account system with features like deposit, withdrawal, and balance inquiry. Use object-oriented programming principles and include appropriate error checking for invalid inputs and insufficient funds."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Let's create a simple bank account system in C++ using object-oriented programming principles. We'll include functionalities for depositing money, withdrawing money, and checking the balance. We'll also add error checking to handle invalid inputs and insufficient funds.\n\nFirst, we need to define a class for the bank account. Let's call it `BankAccount`. This class will have private member variables to store the account balance and public member functions to deposit, withdraw, and inquire about the balance.\n\nHere's a step-by-step plan:\n\n1. **Define the `BankAccount` class:**\n   - Private members:\n     - `double balance;` to store the account balance.\n   - Public member functions:\n     - `BankAccount(double initialBalance);` constructor to initialize the balance.\n     - `void deposit(double amount);` to add money to the account.\n     - `bool withdraw(double amount);` to withdraw money from the account.\n     - `double getBalance();` to get the current balance.\n\n2. **Error checking:**\n   - In the constructor, ensure the initial balance is non-negative.\n   - In the `deposit` function, ensure the deposit amount is positive.\n   - In the `withdraw` function, ensure the withdrawal amount is positive and that there are sufficient funds in the account.\n\n3. **Main function:**\n   - Create an instance of `BankAccount` with an initial balance.\n   - Provide a simple menu-driven interface for the user to perform operations.\n\nLet's start by writing the code for the `BankAccount` class.\n\n```cpp\n#include <iostream>\n#include <limits>\n\nclass BankAccount {\nprivate:\n    double balance;\n\npublic:\n    BankAccount(double initialBalance) {\n        if (initialBalance < 0) {\n            std::cerr << \"Initial balance cannot be negative. Setting balance to 0.\" << std::endl;\n            balance = 0;\n        } else {\n            balance = initialBalance;\n        }\n    }\n\n    void deposit(double amount) {\n        if (amount <= 0) {\n            std::cerr << \"Deposit amount must be positive.\" << std::endl;\n        } else {\n            balance += amount;\n            std::cout << \"Deposited: \" << amount << \". New balance: \" << balance << std::endl;\n        }\n    }\n\n    bool withdraw(double amount) {\n        if (amount <= 0) {\n            std::cerr << \"Withdrawal amount must be positive.\" << std::endl;\n            return false;\n        }\n        if (balance < amount) {\n            std::cerr << \"Insufficient funds. Current balance: \" << balance << std::endl;\n            return false;\n        }\n        balance -= amount;\n        std::cout << \"Withdrew: \" << amount << \". New balance: \" << balance << std::endl;\n        return true;\n    }\n\n    double getBalance() {\n        return balance;\n    }\n};\n```\n\nNext, we'll write the `main` function to interact with the user.\n\n```cpp\nint main() {\n    double initialBalance;\n    std::cout << \"Enter initial balance: \";\n    while (!(std::cin >> initialBalance)) {\n        std::cerr << \"Invalid input. Please enter a numeric value.\" << std::endl;\n        std::cin.clear();\n        std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n    }\n\n    BankAccount account(initialBalance);\n\n    int choice;\n    double amount;\n    do {\n        std::cout << \"\\nBank Account Menu:\\n\";\n        std::cout << \"1. Deposit\\n\";\n        std::cout << \"2. Withdraw\\n\";\n        std::cout << \"3. Check Balance\\n\";\n        std::cout << \"4. Exit\\n\";\n        std::cout << \"Enter your choice: \";\n        while (!(std::cin >> choice)) {\n            std::cerr << \"Invalid input. Please enter a numeric value.\" << std::endl;\n            std::cin.clear();\n            std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n        }\n\n        switch (choice) {\n            case 1:\n                std::cout << \"Enter deposit amount: \";\n                while (!(std::cin >> amount)) {\n                    std::cerr << \"Invalid input. Please enter a numeric value.\" << std::endl;\n                    std::cin.clear();\n                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n                }\n                account.deposit(amount);\n                break;\n            case 2:\n                std::cout << \"Enter withdrawal amount: \";\n                while (!(std::cin >> amount)) {\n                    std::cerr << \"Invalid input. Please enter a numeric value.\" << std::endl;\n                    std::cin.clear();\n                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n                }\n                account.withdraw(amount);\n                break;\n            case 3:\n                std::cout << \"Current balance: \" << account.getBalance() << std::endl;\n                break;\n            case 4:\n                std::cout << \"Exiting...\" << std::endl;\n                break;\n            default:\n                std::cout << \"Invalid choice. Please try again.\" << std::endl;\n        }\n    } while (choice != 4);\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **BankAccount Class:**\n   - **Constructor:** Initializes the account balance. If the initial balance is negative, it sets the balance to 0 and prints an error message.\n   - **deposit:** Adds the specified amount to the balance if the amount is positive.\n   - **withdraw:** Subtracts the specified amount from the balance if the amount is positive and sufficient funds are available.\n   - **getBalance:** Returns the current balance.\n\n2. **Main Function:**\n   - Prompts the user to enter the initial balance and creates a `BankAccount` object.\n   - Displays a menu with options to deposit, withdraw, check balance, or exit.\n   - Reads the user's choice and performs the corresponding operation.\n   - Includes input validation to handle invalid inputs gracefully.\n\nThis should give you a basic but functional bank account system in C++. You can further enhance it by adding more features like multiple accounts, transaction history, etc."
    }
]