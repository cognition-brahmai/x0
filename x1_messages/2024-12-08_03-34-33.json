[
    {
        "role": "user",
        "content": "Develop a Python script that uses the Elasticsearch client library to create an index, add documents, perform a search query, and display the results in a formatted manner.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'll guide you through creating a Python script that interacts with Elasticsearch using its official Python client library. We'll cover creating an index, adding documents to it, performing a search query, and displaying the results in a nice format.\n\n### Prerequisites\n\n1. **Elasticsearch installed and running**: Make sure you have Elasticsearch installed and running on your machine or have access to a running instance. You can download it from [Elasticsearch's official website](https://www.elastic.co/downloads/elasticsearch).\n\n2. **Python Elasticsearch client library**: Install the Elasticsearch client library for Python using pip:\n   ```bash\n   pip install elasticsearch\n   ```\n\n### Step-by-Step Guide\n\n#### 1. Import the Elasticsearch Library\n\nFirst, import the Elasticsearch class from the elasticsearch module.\n\n```python\nfrom elasticsearch import Elasticsearch\n```\n\n#### 2. Connect to Elasticsearch\n\nCreate an instance of the Elasticsearch client. By default, it connects to localhost on port 9200.\n\n```python\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n```\n\nYou can check if the connection is successful by using:\n\n```python\nif not es.ping():\n    print('Elasticsearch is not running!')\n    exit()\nelse:\n    print('Connected to Elasticsearch!')\n```\n\n#### 3. Create an Index\n\nDefine a function to create an index in Elasticsearch. If the index already exists, you might want to handle that case.\n\n```python\ndef create_index(index_name):\n    if not es.indices.exists(index=index_name):\n        es.indices.create(index=index_name)\n        print(f'Index \"{index_name}\" created.')\n    else:\n        print(f'Index \"{index_name}\" already exists.')\n```\n\n#### 4. Add Documents to the Index\n\nDefine a function to add documents to the specified index.\n\n```python\ndef add_document(index_name, doc_id, document):\n    res = es.index(index=index_name, id=doc_id, body=document)\n    print(f'Document added/updated: {res[\"result\"]}')\n```\n\n#### 5. Perform a Search Query\n\nDefine a function to perform a search query on the index.\n\n```python\ndef search(index_name, query):\n    res = es.search(index=index_name, body=query)\n    return res\n```\n\n#### 6. Display Results in a Formatted Manner\n\nDefine a function to format and print the search results.\n\n```python\ndef print_search_results(results):\n    for hit in results['hits']['hits']:\n        print(f\"_id: {hit['_id']}, Score: {hit['_score']}\")\n        print(f\"Source: {hit['_source']}\")\n        print(\"-\" * 40)\n```\n\n### Putting It All Together\n\nNow, let's put all these functions together in a single script.\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Connect to Elasticsearch\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\nif not es.ping():\n    print('Elasticsearch is not running!')\n    exit()\nelse:\n    print('Connected to Elasticsearch!')\n\ndef create_index(index_name):\n    if not es.indices.exists(index=index_name):\n        es.indices.create(index=index_name)\n        print(f'Index \"{index_name}\" created.')\n    else:\n        print(f'Index \"{index_name}\" already exists.')\n\ndef add_document(index_name, doc_id, document):\n    res = es.index(index=index_name, id=doc_id, body=document)\n    print(f'Document added/updated: {res[\"result\"]}')\n\ndef search(index_name, query):\n    res = es.search(index=index_name, body=query)\n    return res\n\ndef print_search_results(results):\n    for hit in results['hits']['hits']:\n        print(f\"_id: {hit['_id']}, Score: {hit['_score']}\")\n        print(f\"Source: {hit['_source']}\")\n        print(\"-\" * 40)\n\nif __name__ == \"__main__\":\n    index_name = 'my_index'\n    \n    # Create index\n    create_index(index_name)\n    \n    # Add documents\n    doc1 = {'name': 'John Doe', 'age': 30, 'interests': ['reading', 'cycling']}\n    add_document(index_name, '1', doc1)\n    \n    doc2 = {'name': 'Jane Smith', 'age': 25, 'interests': ['traveling', 'photography']}\n    add_document(index_name, '2', doc2)\n    \n    # Search query\n    query = {\n        \"query\": {\n            \"match\": {\n                \"interests\": \"reading\"\n            }\n        }\n    }\n    \n    # Perform search\n    results = search(index_name, query)\n    \n    # Print results\n    print_search_results(results)\n```\n\n### Explanation\n\n1. **Connecting to Elasticsearch**: We create an Elasticsearch client instance and check if the server is running.\n2. **Creating an Index**: We define a function to create an index if it doesn't already exist.\n3. **Adding Documents**: We define a function to add documents to the index with specified IDs.\n4. **Performing a Search**: We define a function to execute a search query using the match query for simplicity.\n5. **Displaying Results**: We define a function to format and print the search results, showing the document ID, search score, and the document source.\n\nThis script provides a basic framework for interacting with Elasticsearch using Python. You can expand upon this by adding more complex queries, handling different data types, or incorporating error handling as needed."
    }
]