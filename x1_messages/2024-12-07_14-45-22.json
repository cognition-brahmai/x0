[
    {
        "role": "user",
        "content": "Design a RESTful API using Node.js and Express that manages a simple inventory system. The API should support CRUD operations on items with properties such as item ID, name, description, price, and quantity. Also, implement user authentication using JWT tokens and role-based access control for different types of users (admin, manager, employee)."
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to design a RESTful API for an inventory system using Node.js and Express. It needs to handle CRUD operations for items, which have properties like item ID, name, description, price, and quantity. Also, I need to implement user authentication using JWT tokens and role-based access control for different user types: admin, manager, and employee.\n\nFirst, I need to set up a new Node.js project. I'll start by creating a new directory for my project and initializing it with npm.\n\n```\nmkdir inventory-api\ncd inventory-api\nnpm init -y\n```\n\nNext, I'll install the necessary dependencies. For this project, I'll need Express for the server, bcrypt for password hashing, jsonwebtoken for JWT token generation and verification, and probably some middleware like bodyParser to handle request data.\n\n```\nnpm install express bcrypt jsonwebtoken body-parser\n```\n\nI should also set up a database to store items and user data. For simplicity, I'll use SQLite, which is easy to set up and doesn't require a separate database server.\n\n```\nnpm install sqlite3\n```\n\nNow, I'll create the basic structure of my project. I'll have separate directories for controllers, models, routes, and middleware.\n\n```\nmkdir controllers models routes middleware\n```\n\nStarting with the database setup, I'll create a file called `db.js` in the root directory to handle the database connection.\n\n```javascript\n// db.js\nconst sqlite3 = require('sqlite3').verbose();\n\nlet db = new sqlite3.Database(':memory:', (err) => {\n  if (err) {\n    return console.error(err.message);\n  }\n  console.log('Connected to the in-memory SQLite database.');\n});\n\ndb.serialize(() => {\n  db.run('CREATE TABLE items (id INTEGER PRIMARY KEY, name TEXT, description TEXT, price REAL, quantity INTEGER)');\n  db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, role TEXT)');\n});\n\nmodule.exports = db;\n```\n\nI'm using an in-memory database for simplicity, but in a real-world scenario, I'd use a persistent database file.\n\nNext, I'll create models for items and users. These models will handle interactions with the database.\n\nIn `models/item.js`:\n\n```javascript\nconst db = require('../db');\n\nclass Item {\n  static getAll(callback) {\n    db.all('SELECT * FROM items', callback);\n  }\n\n  static getOne(id, callback) {\n    db.get('SELECT * FROM items WHERE id = ?', [id], callback);\n  }\n\n  static create(item, callback) {\n    db.run('INSERT INTO items (name, description, price, quantity) VALUES (?, ?, ?, ?)', [item.name, item.description, item.price, item.quantity], callback);\n  }\n\n  static update(id, item, callback) {\n    db.run('UPDATE items SET name = ?, description = ?, price = ?, quantity = ? WHERE id = ?', [item.name, item.description, item.price, item.quantity, id], callback);\n  }\n\n  static delete(id, callback) {\n    db.run('DELETE FROM items WHERE id = ?', [id], callback);\n  }\n}\n\nmodule.exports = Item;\n```\n\nSimilarly, in `models/user.js`:\n\n```javascript\nconst db = require('../db');\nconst bcrypt = require('bcrypt');\n\nclass User {\n  static register(user, callback) {\n    bcrypt.hash(user.password, 10, (err, hash) => {\n      if (err) return callback(err);\n      db.run('INSERT INTO users (username, password, role) VALUES (?, ?, ?)', [user.username, hash, user.role], callback);\n    });\n  }\n\n  static authenticate(username, password, callback) {\n    db.get('SELECT * FROM users WHERE username = ?', [username], (err, user) => {\n      if (err) return callback(err);\n      if (!user) return callback(null, false);\n      bcrypt.compare(password, user.password, (err, res) => {\n        if (err) return callback(err);\n        if (res) {\n          callback(null, user);\n        } else {\n          callback(null, false);\n        }\n      });\n    });\n  }\n\n  static getRoles(callback) {\n    db.all('SELECT role FROM users', callback);\n  }\n}\n\nmodule.exports = User;\n```\n\nNow, I'll set up authentication using JWT. I'll create a middleware to verify JWT tokens and another to handle role-based access control.\n\nIn `middleware/auth.js`:\n\n```javascript\nconst jwt = require('jsonwebtoken');\nconst config = require('../config');\n\nfunction authenticateToken(req, res, next) {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n  if (token == null) return res.sendStatus(401);\n\n  jwt.verify(token, config.secret, (err, user) => {\n    if (err) return res.sendStatus(403);\n    req.user = user;\n    next();\n  });\n}\n\nmodule.exports = authenticateToken;\n```\n\nIn `middleware/roles.js`:\n\n```javascript\nfunction authorize(role) {\n  return (req, res, next) => {\n    if (req.user.role === role) {\n      next();\n    } else {\n      res.sendStatus(403);\n    }\n  };\n}\n\nmodule.exports = authorize;\n```\n\nI need to create a `config.js` file to store the JWT secret.\n\nIn `config.js`:\n\n```javascript\nmodule.exports = {\n  secret: 'your_jwt_secret_here'\n};\n```\n\nNow, I'll create controllers to handle the business logic for items and users.\n\nIn `controllers/itemController.js`:\n\n```javascript\nconst Item = require('../models/item');\n\nexports.getItems = (req, res) => {\n  Item.getAll((err, items) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else {\n      res.json(items);\n    }\n  });\n};\n\nexports.getItem = (req, res) => {\n  Item.getOne(req.params.id, (err, item) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else if (item) {\n      res.json(item);\n    } else {\n      res.status(404).send('Item not found');\n    }\n  });\n};\n\nexports.createItem = (req, res) => {\n  Item.create(req.body, (err) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else {\n      res.status(201).send('Item created');\n    }\n  });\n};\n\nexports.updateItem = (req, res) => {\n  Item.update(req.params.id, req.body, (err) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else {\n      res.send('Item updated');\n    }\n  });\n};\n\nexports.deleteItem = (req, res) => {\n  Item.delete(req.params.id, (err) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else {\n      res.send('Item deleted');\n    }\n  });\n};\n```\n\nIn `controllers/userController.js`:\n\n```javascript\nconst User = require('../models/user');\nconst jwt = require('jsonwebtoken');\nconst config = require('../config');\n\nexports.register = (req, res) => {\n  User.register(req.body, (err, result) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else {\n      res.status(201).send('User registered');\n    }\n  });\n};\n\nexports.login = (req, res) => {\n  User.authenticate(req.body.username, req.body.password, (err, user) => {\n    if (err) {\n      res.status(500).send(err.message);\n    } else if (user) {\n      const token = jwt.sign({ username: user.username, role: user.role }, config.secret, { expiresIn: '1h' });\n      res.json({ token });\n    } else {\n      res.status(401).send('Invalid credentials');\n    }\n  });\n};\n```\n\nNext, I'll set up the routes for items and users.\n\nIn `routes/itemRoutes.js`:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst itemController = require('../controllers/itemController');\nconst auth = require('../middleware/auth');\nconst roles = require('../middleware/roles');\n\nrouter.get('/', auth, itemController.getItems);\nrouter.get('/:id', auth, itemController.getItem);\nrouter.post('/', auth, roles('admin'), itemController.createItem);\nrouter.put('/:id', auth, roles('admin'), itemController.updateItem);\nrouter.delete('/:id', auth, roles('admin'), itemController.deleteItem);\n\nmodule.exports = router;\n```\n\nIn `routes/userRoutes.js`:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst userController = require('../controllers/userController');\n\nrouter.post('/register', userController.register);\nrouter.post('/login', userController.login);\n\nmodule.exports = router;\n```\n\nNow, I'll set up the main app file to use these routes and middleware.\n\nIn `app.js`:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst itemRoutes = require('./routes/itemRoutes');\nconst userRoutes = require('./routes/userRoutes');\n\nconst app = express();\n\napp.use(bodyParser.json());\n\napp.use('/items', itemRoutes);\napp.use('/users', userRoutes);\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\nI need to make sure that the role-based access control is properly implemented. In the `itemRoutes`, I've protected the CRUD operations with the `auth` middleware and the `roles('admin')` middleware for create, update, and delete operations. This means only authenticated users with the 'admin' role can perform these actions.\n\nSimilarly, I can adjust the middleware for different routes based on the required roles.\n\nFinally, I should test the API to ensure that it works as expected. I can use tools like Postman or write some test scripts to verify that the authentication works, that only authorized users can perform certain actions, and that the CRUD operations on items are functioning correctly.\n\nThis is a basic implementation, and in a real-world scenario, I would need to add more features like input validation, error handling, and perhaps more granular access controls.\n\n## Final Solution\nTo create a RESTful API for managing an inventory system with user authentication and role-based access control, follow these steps:\n\n### Prerequisites\n- Node.js installed on your machine.\n- Basic understanding of Express.js, JWT, and SQLite.\n\n### Project Setup\n1. **Initialize the project:**\n   ```bash\n   mkdir inventory-api\n   cd inventory-api\n   npm init -y\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install express bcrypt jsonwebtoken body-parser sqlite3\n   ```\n\n### Directory Structure\n```\ninventory-api/\n\u251c\u2500\u2500 app.js\n\u251c\u2500\u2500 config.js\n\u251c\u2500\u2500 db.js\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 itemController.js\n\u2502   \u2514\u2500\u2500 userController.js\n\u251c\u2500\u2500 models/\n\u2502   \u251c\u2500\u2500 item.js\n\u2502   \u2514\u2500\u2500 user.js\n\u251c\u2500\u2500 middleware/\n\u2502   \u251c\u2500\u2500 auth.js\n\u2502   \u2514\u2500\u2500 roles.js\n\u251c\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 itemRoutes.js\n\u2502   \u2514\u2500\u2500 userRoutes.js\n```\n\n### Database Setup\n- **db.js:**\n  ```javascript\n  const sqlite3 = require('sqlite3').verbose();\n\n  let db = new sqlite3.Database(':memory:', (err) => {\n    if (err) {\n      return console.error(err.message);\n    }\n    console.log('Connected to the in-memory SQLite database.');\n  });\n\n  db.serialize(() => {\n    db.run('CREATE TABLE items (id INTEGER PRIMARY KEY, name TEXT, description TEXT, price REAL, quantity INTEGER)');\n    db.run('CREATE TABLE users (id INTEGER PRIMARY KEY, username TEXT UNIQUE, password TEXT, role TEXT)');\n  });\n\n  module.exports = db;\n  ```\n\n### Models\n- **models/item.js:**\n  ```javascript\n  const db = require('../db');\n\n  class Item {\n    static getAll(callback) {\n      db.all('SELECT * FROM items', callback);\n    }\n\n    static getOne(id, callback) {\n      db.get('SELECT * FROM items WHERE id = ?', [id], callback);\n    }\n\n    static create(item, callback) {\n      db.run('INSERT INTO items (name, description, price, quantity) VALUES (?, ?, ?, ?)', [item.name, item.description, item.price, item.quantity], callback);\n    }\n\n    static update(id, item, callback) {\n      db.run('UPDATE items SET name = ?, description = ?, price = ?, quantity = ? WHERE id = ?', [item.name, item.description, item.price, item.quantity, id], callback);\n    }\n\n    static delete(id, callback) {\n      db.run('DELETE FROM items WHERE id = ?', [id], callback);\n    }\n  }\n\n  module.exports = Item;\n  ```\n\n- **models/user.js:**\n  ```javascript\n  const db = require('../db');\n  const bcrypt = require('bcrypt');\n\n  class User {\n    static register(user, callback) {\n      bcrypt.hash(user.password, 10, (err, hash) => {\n        if (err) return callback(err);\n        db.run('INSERT INTO users (username, password, role) VALUES (?, ?, ?)', [user.username, hash, user.role], callback);\n      });\n    }\n\n    static authenticate(username, password, callback) {\n      db.get('SELECT * FROM users WHERE username = ?', [username], (err, user) => {\n        if (err) return callback(err);\n        if (!user) return callback(null, false);\n        bcrypt.compare(password, user.password, (err, res) => {\n          if (err) return callback(err);\n          if (res) {\n            callback(null, user);\n          } else {\n            callback(null, false);\n          }\n        });\n      });\n    }\n\n    static getRoles(callback) {\n      db.all('SELECT role FROM users', callback);\n    }\n  }\n\n  module.exports = User;\n  ```\n\n### Middleware\n- **middleware/auth.js:**\n  ```javascript\n  const jwt = require('jsonwebtoken');\n  const config = require('../config');\n\n  function authenticateToken(req, res, next) {\n    const authHeader = req.headers['authorization'];\n    const token = authHeader && authHeader.split(' ')[1];\n    if (token == null) return res.sendStatus(401);\n\n    jwt.verify(token, config.secret, (err, user) => {\n      if (err) return res.sendStatus(403);\n      req.user = user;\n      next();\n    });\n  }\n\n  module.exports = authenticateToken;\n  ```\n\n- **middleware/roles.js:**\n  ```javascript\n  function authorize(role) {\n    return (req, res, next) => {\n      if (req.user.role === role) {\n        next();\n      } else {\n        res.sendStatus(403);\n      }\n    };\n  }\n\n  module.exports = authorize;\n  ```\n\n### Config\n- **config.js:**\n  ```javascript\n  module.exports = {\n    secret: 'your_jwt_secret_here'\n  };\n  ```\n\n### Controllers\n- **controllers/itemController.js:**\n  ```javascript\n  const Item = require('../models/item');\n\n  exports.getItems = (req, res) => {\n    Item.getAll((err, items) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.json(items);\n      }\n    });\n  };\n\n  exports.getItem = (req, res) => {\n    Item.getOne(req.params.id, (err, item) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else if (item) {\n        res.json(item);\n      } else {\n        res.status(404).send('Item not found');\n      }\n    });\n  };\n\n  exports.createItem = (req, res) => {\n    Item.create(req.body, (err) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.status(201).send('Item created');\n      }\n    });\n  };\n\n  exports.updateItem = (req, res) => {\n    Item.update(req.params.id, req.body, (err) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.send('Item updated');\n      }\n    });\n  };\n\n  exports.deleteItem = (req, res) => {\n    Item.delete(req.params.id, (err) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.send('Item deleted');\n      }\n    });\n  };\n  ```\n\n- **controllers/userController.js:**\n  ```javascript\n  const User = require('../models/user');\n  const jwt = require('jsonwebtoken');\n  const config = require('../config');\n\n  exports.register = (req, res) => {\n    User.register(req.body, (err, result) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else {\n        res.status(201).send('User registered');\n      }\n    });\n  };\n\n  exports.login = (req, res) => {\n    User.authenticate(req.body.username, req.body.password, (err, user) => {\n      if (err) {\n        res.status(500).send(err.message);\n      } else if (user) {\n        const token = jwt.sign({ username: user.username, role: user.role }, config.secret, { expiresIn: '1h' });\n        res.json({ token });\n      } else {\n        res.status(401).send('Invalid credentials');\n      }\n    });\n  };\n  ```\n\n### Routes\n- **routes/itemRoutes.js:**\n  ```javascript\n  const express = require('express');\n  const router = express.Router();\n  const itemController = require('../controllers/itemController');\n  const auth = require('../middleware/auth');\n  const roles = require('../middleware/roles');\n\n  router.get('/', auth, itemController.getItems);\n  router.get('/:id', auth, itemController.getItem);\n  router.post('/', auth, roles('admin'), itemController.createItem);\n  router.put('/:id', auth, roles('admin'), itemController.updateItem);\n  router.delete('/:id', auth, roles('admin'), itemController.deleteItem);\n\n  module.exports = router;\n  ```\n\n- **routes/userRoutes.js:**\n  ```javascript\n  const express = require('express');\n  const router = express.Router();\n  const userController = require('../controllers/userController');\n\n  router.post('/register', userController.register);\n  router.post('/login', userController.login);\n\n  module.exports = router;\n  ```\n\n### App Setup\n- **app.js:**\n  ```javascript\n  const express = require('express');\n  const bodyParser = require('body-parser');\n  const itemRoutes = require('./routes/itemRoutes');\n  const userRoutes = require('./routes/userRoutes');\n\n  const app = express();\n\n  app.use(bodyParser.json());\n\n  app.use('/items', itemRoutes);\n  app.use('/users', userRoutes);\n\n  const PORT = process.env.PORT || 3000;\n  app.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n  });\n  ```\n\n### Testing\n- Use tools like Postman to test the API endpoints.\n- Ensure authentication and role-based access control are working as expected.\n\nThis setup provides a basic inventory management system with user authentication and role-based access control using JWT tokens. For a production environment, consider adding more features like input validation, error handling, and using a persistent database."
    }
]