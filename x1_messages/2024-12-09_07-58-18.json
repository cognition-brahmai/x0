[
    {
        "role": "user",
        "content": "Create a Node.js application that serves as a RESTful API for managing a collection of books. Each book has a title, author, and publication year. The API should support adding new books, updating existing ones, deleting books, and fetching information about individual books or all books in the collection. Use MariaDB as the database backend."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you create a RESTful API for managing a collection of books using Node.js and MariaDB. We'll use Express.js for the server and the mariadb package to interact with the database.\n\nFirst, make sure you have Node.js and MariaDB installed on your machine.\n\nLet's start by setting up the project structure:\n\n1. Create a new directory for your project:\n\n   ```bash\n   mkdir book-api\n   cd book-api\n   ```\n\n2. Initialize a new Node.js project:\n\n   ```bash\n   npm init -y\n   ```\n\n3. Install the required packages:\n\n   ```bash\n   npm install express mariadb body-parser\n   ```\n\nNow, let's create the necessary files:\n\n- `server.js`: This will be the main server file.\n\n- `db.js`: This will handle the database connection.\n\n- `books.js`: This will contain the routes for managing books.\n\nFirst, create `db.js` to handle the database connection:\n\n```javascript\nconst mariadb = require('mariadb');\n\nconst pool = mariadb.createPool({\n  host: 'localhost',\n  user: 'your_database_user',\n  password: 'your_database_password',\n  database: 'book_database',\n  connectionLimit: 5\n});\n\nmodule.exports = pool;\n```\n\nReplace `'your_database_user'`, `'your_database_password'`, and `'book_database'` with your actual MariaDB credentials and database name.\n\nNext, create `books.js` to define the book routes:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst db = require('./db');\n\n// Get all books\nrouter.get('/', async (req, res) => {\n  try {\n    const books = await db.query('SELECT * FROM books');\n    res.json(books);\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Get a single book by ID\nrouter.get('/:id', async (req, res) => {\n  try {\n    const id = req.params.id;\n    const book = await db.query('SELECT * FROM books WHERE id = ?', [id]);\n    if (book.length === 0) {\n      res.status(404).send('Book not found');\n    } else {\n      res.json(book[0]);\n    }\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Add a new book\nrouter.post('/', async (req, res) => {\n  try {\n    const { title, author, publicationYear } = req.body;\n    const result = await db.query('INSERT INTO books (title, author, publicationYear) VALUES (?, ?, ?)', [title, author, publicationYear]);\n    res.status(201).json({ id: result.insertId, title, author, publicationYear });\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Update a book\nrouter.put('/:id', async (req, res) => {\n  try {\n    const id = req.params.id;\n    const { title, author, publicationYear } = req.body;\n    const result = await db.query('UPDATE books SET title = ?, author = ?, publicationYear = ? WHERE id = ?', [title, author, publicationYear, id]);\n    if (result.affectedRows === 0) {\n      res.status(404).send('Book not found');\n    } else {\n      res.json({ id, title, author, publicationYear });\n    }\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\n// Delete a book\nrouter.delete('/:id', async (req, res) => {\n  try {\n    const id = req.params.id;\n    const result = await db.query('DELETE FROM books WHERE id = ?', [id]);\n    if (result.affectedRows === 0) {\n      res.status(404).send('Book not found');\n    } else {\n      res.status(204).send();\n    }\n  } catch (err) {\n    res.status(500).send(err.message);\n  }\n});\n\nmodule.exports = router;\n```\n\nFinally, create `server.js` to set up the Express server:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst booksRouter = require('./books');\n\nconst app = express();\nconst port = 3000;\n\napp.use(bodyParser.json());\n\napp.use('/api/books', booksRouter);\n\napp.listen(port, () => {\n  console.log(`Server is running on http://localhost:${port}`);\n});\n```\n\nBefore running the server, make sure you have created the `book_database` and the `books` table in MariaDB. You can create the database and table using the following SQL commands:\n\n```sql\nCREATE DATABASE IF NOT EXISTS book_database;\n\nUSE book_database;\n\nCREATE TABLE IF NOT EXISTS books (\n  id INT AUTO_INCREMENT PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  author VARCHAR(255) NOT NULL,\n  publicationYear INT NOT NULL\n);\n```\n\nYou can run these commands in the MariaDB command line or using any MariaDB GUI tool.\n\nNow, you can start the server by running:\n\n```bash\nnode server.js\n```\n\nYour RESTful API for managing books should now be up and running on `http://localhost:3000/api/books`.\n\nYou can test the API using tools like Postman or curl to perform CRUD operations on the books.\n\n## Final Solution\nTo create a RESTful API for managing a collection of books using Node.js and MariaDB, follow these steps:\n\n### Project Setup\n\n1. **Initialize Project:**\n   ```bash\n   mkdir book-api\n   cd book-api\n   npm init -y\n   ```\n\n2. **Install Dependencies:**\n   ```bash\n   npm install express mariadb body-parser\n   ```\n\n### Database Configuration\n\n1. **db.js:**\n   Configure the MariaDB connection.\n   ```javascript\n   const mariadb = require('mariadb');\n\n   const pool = mariadb.createPool({\n     host: 'localhost',\n     user: 'your_database_user',\n     password: 'your_database_password',\n     database: 'book_database',\n     connectionLimit: 5\n   });\n\n   module.exports = pool;\n   ```\n\n2. **Create Database and Table:**\n   Run the following SQL commands to set up your database:\n   ```sql\n   CREATE DATABASE IF NOT EXISTS book_database;\n   USE book_database;\n   CREATE TABLE IF NOT EXISTS books (\n     id INT AUTO_INCREMENT PRIMARY KEY,\n     title VARCHAR(255) NOT NULL,\n     author VARCHAR(255) NOT NULL,\n     publicationYear INT NOT NULL\n   );\n   ```\n\n### API Endpoints\n\n1. **books.js:**\n   Define routes for CRUD operations.\n   ```javascript\n   const express = require('express');\n   const router = express.Router();\n   const db = require('./db');\n\n   // Get all books\n   router.get('/', async (req, res) => {\n     try {\n       const books = await db.query('SELECT * FROM books');\n       res.json(books);\n     } catch (err) {\n       res.status(500).send(err.message);\n     }\n   });\n\n   // Get a single book by ID\n   router.get('/:id', async (req, res) => {\n     try {\n       const id = req.params.id;\n       const book = await db.query('SELECT * FROM books WHERE id = ?', [id]);\n       if (book.length === 0) {\n         res.status(404).send('Book not found');\n       } else {\n         res.json(book[0]);\n       }\n     } catch (err) {\n       res.status(500).send(err.message);\n     }\n   });\n\n   // Add a new book\n   router.post('/', async (req, res) => {\n     try {\n       const { title, author, publicationYear } = req.body;\n       const result = await db.query('INSERT INTO books (title, author, publicationYear) VALUES (?, ?, ?)', [title, author, publicationYear]);\n       res.status(201).json({ id: result.insertId, title, author, publicationYear });\n     } catch (err) {\n       res.status(500).send(err.message);\n     }\n   });\n\n   // Update a book\n   router.put('/:id', async (req, res) => {\n     try {\n       const id = req.params.id;\n       const { title, author, publicationYear } = req.body;\n       const result = await db.query('UPDATE books SET title = ?, author = ?, publicationYear = ? WHERE id = ?', [title, author, publicationYear, id]);\n       if (result.affectedRows === 0) {\n         res.status(404).send('Book not found');\n       } else {\n         res.json({ id, title, author, publicationYear });\n       }\n     } catch (err) {\n       res.status(500).send(err.message);\n     }\n   });\n\n   // Delete a book\n   router.delete('/:id', async (req, res) => {\n     try {\n       const id = req.params.id;\n       const result = await db.query('DELETE FROM books WHERE id = ?', [id]);\n       if (result.affectedRows === 0) {\n         res.status(404).send('Book not found');\n       } else {\n         res.status(204).send();\n       }\n     } catch (err) {\n       res.status(500).send(err.message);\n     }\n   });\n\n   module.exports = router;\n   ```\n\n### Server Setup\n\n1. **server.js:**\n   Set up the Express server.\n   ```javascript\n   const express = require('express');\n   const bodyParser = require('body-parser');\n   const booksRouter = require('./books');\n\n   const app = express();\n   const port = 3000;\n\n   app.use(bodyParser.json());\n\n   app.use('/api/books', booksRouter);\n\n   app.listen(port, () => {\n     console.log(`Server is running on http://localhost:${port}`);\n   });\n   ```\n\n### Running the Server\n\n1. **Start the Server:**\n   ```bash\n   node server.js\n   ```\n\nYour API is now live at `http://localhost:3000/api/books`. Use tools like Postman or curl to test the endpoints for managing books."
    }
]