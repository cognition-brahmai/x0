[
    {
        "role": "user",
        "content": "Implement a stack data structure in Python with push, pop, and peek operations. Include error handling for empty stacks.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to implement a stack data structure in Python with the requested operations: push, pop, and peek. I'll also make sure to include error handling for cases when the stack is empty.\n\nFirst, I need to understand what a stack is. A stack is a linear data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed.\n\nIn Python, I can implement a stack using a list, where the end of the list acts as the top of the stack. This way, I can use the append() method to push elements onto the stack and the pop() method to remove elements from the stack.\n\nLet me start by creating a class called Stack. This class will have the following methods:\n\n1. **push(item)**: Adds an item to the top of the stack.\n\n2. **pop()**: Removes and returns the item from the top of the stack. If the stack is empty, it should handle the error.\n\n3. **peek()**: Returns the item at the top of the stack without removing it. If the stack is empty, it should handle the error.\n\nAdditionally, I might want to include some other methods like **is_empty()** to check if the stack is empty and **size()** to return the number of elements in the stack.\n\nLet me sketch a rough outline:\n\n- Initialize the stack as an empty list in the constructor.\n\n- Implement push to append an item to the list.\n\n- Implement pop to remove and return the last item from the list, with error handling for an empty stack.\n\n- Implement peek to return the last item without removing it, with error handling for an empty stack.\n\n- Implement is_empty to check if the stack is empty.\n\n- Implement size to return the number of items in the stack.\n\nNow, let's think about error handling. When pop or peek is called on an empty stack, it should not raise an exception but instead return a meaningful message or value.\n\nFor example, I can return a string message like \"Stack is empty\" or raise a custom exception. But since the prompt says to include error handling, I'll choose to return a message indicating that the stack is empty.\n\nAlso, I should consider the time complexity of these operations. Since I'm using a list, append and pop operations from the end of the list are O(1), which is efficient.\n\nLet me also think about how to test this stack implementation. I should write some test cases to ensure that push, pop, and peek work as expected, including testing empty stack scenarios.\n\nHere's a plan for the test cases:\n\n1. Create a new stack and verify that it's empty.\n\n2. Push some items onto the stack and verify the size increases.\n\n3. Peek at the top item and ensure it's the last item pushed.\n\n4. Pop items and verify they are removed in the correct order.\n\n5. Try popping or peeking from an empty stack and verify the error handling.\n\nNow, let's proceed to implement the Stack class.\n\n## Final Solution\nTo implement a stack data structure in Python with push, pop, and peek operations, along with error handling for empty stacks, you can use the following code:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            return \"Stack is empty\"\n        return self.items.pop()\n\n    def peek(self):\n        if self.is_empty():\n            return \"Stack is empty\"\n        return self.items[-1]\n```\n\n### Explanation\n\n1. **Initialization (`__init__`)**:\n    - Initializes an empty list `items` to store the stack elements.\n\n2. **Is Empty (`is_empty`)**:\n    - Returns `True` if the stack is empty, otherwise `False`.\n\n3. **Size (`size`)**:\n    - Returns the number of elements in the stack.\n\n4. **Push (`push`)**:\n    - Adds an item to the top of the stack using the `append` method.\n\n5. **Pop (`pop`)**:\n    - Removes and returns the top item of the stack using the `pop` method.\n    - If the stack is empty, returns \"Stack is empty\".\n\n6. **Peek (`peek`)**:\n    - Returns the top item of the stack without removing it.\n    - If the stack is empty, returns \"Stack is empty\".\n\nThis implementation ensures that all stack operations adhere to the LIFO principle and handles errors gracefully when dealing with empty stacks."
    }
]