[
    {
        "role": "user",
        "content": "Develop a Java-based command-line utility that takes a user's input string and returns its MD5 hash. Ensure that the utility accepts only one argument and provides an error message if more than one argument is provided or if the input string exceeds 50 characters.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Java-based command-line utility that takes a user's input string and returns its MD5 hash. Sounds straightforward, but there are a few specifics to keep in mind. Let's break it down step by step.\n\nFirst, I need to understand what MD5 is. MD5 stands for Message-Digest algorithm 5, which is a widely used cryptographic hash function that produces a 128-bit (16-byte) hash value. It's commonly used to check the integrity of files, but it's not recommended for security-sensitive applications due to vulnerabilities that allow for hash collisions.\n\nNow, for this utility, I need to accept a single string as input from the command line and generate its MD5 hash. The utility should handle cases where more than one argument is provided or if the input string exceeds 50 characters by displaying an appropriate error message.\n\nLet me start by setting up a basic Java class with a main method, since this is a command-line utility.\n\n```java\npublic class MD5HashUtility {\n    public static void main(String[] args) {\n        // Code goes here\n    }\n}\n```\n\nNext, I need to handle the command-line arguments. The utility should accept exactly one argument, and that argument should be a string no longer than 50 characters.\n\nSo, in the main method, I'll check the number of arguments provided. If there are more than one, I'll print an error message and exit.\n\n```java\nif (args.length > 1) {\n    System.out.println(\"Error: Only one argument is allowed.\");\n    return;\n}\n```\n\nThen, I'll check the length of the provided string. If it's longer than 50 characters, I'll print an error message and exit.\n\n```java\nString input = args[0];\nif (input.length() > 50) {\n    System.out.println(\"Error: Input string exceeds 50 characters.\");\n    return;\n}\n```\n\nNow, if both checks pass, I need to compute the MD5 hash of the input string and print it out.\n\nTo compute the MD5 hash in Java, I can use the `MessageDigest` class from the `java.security` package. I'll need to get an instance of `MessageDigest` for MD5, update it with the input string's bytes, and then get the hash bytes. Finally, I'll convert those bytes to a hexadecimal string.\n\nFirst, I need to import the necessary classes:\n\n```java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n```\n\nThen, inside the main method, after the checks:\n\n```java\ntry {\n    MessageDigest md = MessageDigest.getInstance(\"MD5\");\n    byte[] hashBytes = md.digest(input.getBytes());\n    StringBuilder hexString = new StringBuilder();\n    for (byte b : hashBytes) {\n        String hex = Integer.toHexString(0xff & b);\n        if (hex.length() == 1) hexString.append('0');\n        hexString.append(hex);\n    }\n    System.out.println(\"MD5 hash: \" + hexString.toString());\n} catch (NoSuchAlgorithmException e) {\n    System.out.println(\"Error: MD5 algorithm not found.\");\n}\n```\n\nPutting it all together, the complete code would look like this:\n\n```java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class MD5HashUtility {\n    public static void main(String[] args) {\n        if (args.length > 1) {\n            System.out.println(\"Error: Only one argument is allowed.\");\n            return;\n        }\n        \n        String input = args[0];\n        if (input.length() > 50) {\n            System.out.println(\"Error: Input string exceeds 50 characters.\");\n            return;\n        }\n        \n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashBytes = md.digest(input.getBytes());\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hashBytes) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            System.out.println(\"MD5 hash: \" + hexString.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: MD5 algorithm not found.\");\n        }\n    }\n}\n```\n\nLet me test this utility with some sample inputs to ensure it works correctly.\n\n1. Providing no arguments:\n\n```\njava MD5HashUtility\n```\n\nSince there are zero arguments, which is less than one, the utility should proceed without argument count error. But in this case, `args[0]` would cause an ArrayIndexOutOfBoundsException. I need to handle the case when no arguments are provided.\n\nLet me add a check for zero arguments:\n\n```java\nif (args.length == 0) {\n    System.out.println(\"Error: One argument is required.\");\n    return;\n}\n```\n\nSo, the updated main method starts with:\n\n```java\nif (args.length == 0) {\n    System.out.println(\"Error: One argument is required.\");\n    return;\n}\nif (args.length > 1) {\n    System.out.println(\"Error: Only one argument is allowed.\");\n    return;\n}\n```\n\n2. Providing more than one argument:\n\n```\njava MD5HashUtility arg1 arg2\n```\n\nShould print \"Error: Only one argument is allowed.\"\n\n3. Providing a string longer than 50 characters:\n\n```\njava MD5HashUtility 'thisstringiswaybiggerthanfiftycharactersinlengthwhichshouldtriggertheerrormessage'\n```\n\nShould print \"Error: Input string exceeds 50 characters.\"\n\n4. Providing a valid string:\n\n```\njava MD5HashUtility 'hello'\n```\n\nShould print the MD5 hash of \"hello\".\n\nI should also consider edge cases, such as empty strings or strings with special characters.\n\n5. Providing an empty string:\n\n```\njava MD5HashUtility ''\n```\n\nShould print the MD5 hash of an empty string, which is \"d41d8cd98f00b204e9800998ecf8427e\".\n\n6. Providing a string with special characters:\n\n```\njava MD5HashUtility 'special@chars!123'\n```\n\nShould print the MD5 hash of \"special@chars!123\".\n\nAdditionally, I should ensure that the utility handles non-ASCII characters correctly. For example:\n\n7. Providing a string with Unicode characters:\n\n```\njava MD5HashUtility 'caf\u00e9'\n```\n\nShould print the MD5 hash of \"caf\u00e9\".\n\nI should also think about potential exceptions. For instance, if for some reason the MD5 algorithm is not available in the Java environment, although this is unlikely, I've already handled that with a catch block.\n\nAnother consideration is the encoding of the input string. By default, `String.getBytes()` uses the platform's default encoding, which might not be consistent across different systems. To ensure consistency, I can specify the encoding, such as UTF-8.\n\nSo, I'll modify the line where I get the bytes:\n\n```java\nbyte[] hashBytes = md.digest(input.getBytes(StandardCharsets.UTF_8));\n```\n\nFor that, I need to import `StandardCharsets`:\n\n```java\nimport java.nio.charset.StandardCharsets;\n```\n\nThis ensures that the string is encoded in UTF-8 before hashing, which is a good practice for consistency.\n\nLet me update the code accordingly:\n\n```java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.nio.charset.StandardCharsets;\n\npublic class MD5HashUtility {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Error: One argument is required.\");\n            return;\n        }\n        if (args.length > 1) {\n            System.out.println(\"Error: Only one argument is allowed.\");\n            return;\n        }\n        \n        String input = args[0];\n        if (input.length() > 50) {\n            System.out.println(\"Error: Input string exceeds 50 characters.\");\n            return;\n        }\n        \n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashBytes = md.digest(input.getBytes(StandardCharsets.UTF_8));\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hashBytes) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            System.out.println(\"MD5 hash: \" + hexString.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: MD5 algorithm not found.\");\n        }\n    }\n}\n```\n\nI should also think about whether I need to handle other exceptions, but in this simple utility, I believe this covers the main scenarios.\n\nTo compile and run this utility, I would save the code in a file named `MD5HashUtility.java`, then compile it using `javac MD5HashUtility.java`, and run it with `java MD5HashUtility \"input_string\"`.\n\nI might also want to add some comments to the code for clarity, although the prompt didn't specify that.\n\nIn summary, this utility checks for the correct number of arguments, ensures the input string doesn't exceed 50 characters, and computes and prints the MD5 hash of the input string using UTF-8 encoding.\n\n## Final Solution\nTo create a Java-based command-line utility that takes a user's input string and returns its MD5 hash, follow these steps:\n\n1. **Understand MD5**: MD5 is a hashing algorithm that produces a 128-bit hash value. It's commonly used for checking data integrity but is not recommended for security-sensitive applications due to its vulnerabilities.\n\n2. **Set Up the Java Class**: Create a class with a `main` method to handle command-line inputs.\n\n3. **Handle Command-Line Arguments**:\n    - Ensure only one argument is provided; otherwise, display an error message.\n    - Check that the input string does not exceed 50 characters; if it does, display an error message.\n\n4. **Compute MD5 Hash**:\n    - Use `MessageDigest` from `java.security` to compute the MD5 hash.\n    - Convert the hash bytes to a hexadecimal string.\n\n5. **Edge Cases and Error Handling**:\n    - Handle cases where no arguments are provided.\n    - Ensure the utility handles strings with special characters and Unicode characters correctly.\n    - Specify UTF-8 encoding for consistency.\n\nHere is the complete code for the utility:\n\n```java\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\nimport java.nio.charset.StandardCharsets;\n\npublic class MD5HashUtility {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Error: One argument is required.\");\n            return;\n        }\n        if (args.length > 1) {\n            System.out.println(\"Error: Only one argument is allowed.\");\n            return;\n        }\n        \n        String input = args[0];\n        if (input.length() > 50) {\n            System.out.println(\"Error: Input string exceeds 50 characters.\");\n            return;\n        }\n        \n        try {\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\n            byte[] hashBytes = md.digest(input.getBytes(StandardCharsets.UTF_8));\n            StringBuilder hexString = new StringBuilder();\n            for (byte b : hashBytes) {\n                String hex = Integer.toHexString(0xff & b);\n                if (hex.length() == 1) hexString.append('0');\n                hexString.append(hex);\n            }\n            System.out.println(\"MD5 hash: \" + hexString.toString());\n        } catch (NoSuchAlgorithmException e) {\n            System.out.println(\"Error: MD5 algorithm not found.\");\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Argument Checks**:\n    - If no arguments are provided, display an error message.\n    - If more than one argument is provided, display an error message.\n    - If the input string exceeds 50 characters, display an error message.\n\n2. **MD5 Hash Computation**:\n    - Use `MessageDigest.getInstance(\"MD5\")` to obtain an MD5 digest instance.\n    - Convert the input string to bytes using UTF-8 encoding.\n    - Compute the hash bytes and convert them to a hexadecimal string.\n\n3. **Error Handling**:\n    - Catch `NoSuchAlgorithmException` in case MD5 is not supported, though this is unlikely.\n    - Ensure consistent encoding for string to byte conversion.\n\nThis utility ensures that only one string argument is processed, checks its length, and computes its MD5 hash, providing appropriate error messages for invalid inputs."
    }
]