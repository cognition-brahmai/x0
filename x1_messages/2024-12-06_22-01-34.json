[
    {
        "role": "user",
        "content": "Implement a C++ program that plays Hangman against the user. The program should randomly select a word from a list of words stored in a text file and allow the user to guess one letter at a time. Display the current state of the guessed word and the remaining attempts after each guess.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a C++ program that plays Hangman against the user. Here's a step-by-step guide to achieve this:\n\n### Step 1: Setup the Project\n\nFirst, make sure you have a C++ compiler installed on your system. You can use any IDE or text editor you prefer.\n\n### Step 2: Plan the Program\n\nWe need to:\n\n1. Read a list of words from a text file.\n2. Randomly select one word for the game.\n3. Allow the user to guess letters one at a time.\n4. Keep track of the user's guesses and remaining attempts.\n5. Display the current state of the word and remaining attempts after each guess.\n\n### Step 3: Implement the Program\n\n#### 3.1 Include Necessary Headers\n\n```cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cstdlib>\n#include <cctype>\n```\n\n#### 3.2 Read Words from a File\n\nCreate a function to read words from a text file and store them in a vector.\n\n```cpp\nstd::vector<std::string> readWordsFromFile(const std::string& filename) {\n    std::vector<std::string> words;\n    std::ifstream file(filename);\n    if (file.is_open()) {\n        std::string word;\n        while (getline(file, word)) {\n            // Assuming each word is on a separate line\n            words.push_back(word);\n        }\n        file.close();\n    } else {\n        std::cerr << \"Unable to open file: \" << filename << std::endl;\n    }\n    return words;\n}\n```\n\n#### 3.3 Select a Random Word\n\nCreate a function to select a random word from the vector.\n\n```cpp\nstd::string selectRandomWord(const std::vector<std::string>& words) {\n    if (words.empty()) {\n        return \"\";\n    }\n    srand(time(0));\n    int randomIndex = rand() % words.size();\n    return words[randomIndex];\n}\n```\n\n#### 3.4 Play the Game\n\nImplement the main game loop where the user guesses letters.\n\n```cpp\nvoid playHangman(const std::string& word) {\n    std::string guessedWord(word.length(), '_');\n    std::vector<char> guessedLetters;\n    const int maxAttempts = 6;\n    int attempts = 0;\n\n    while (attempts < maxAttempts) {\n        std::cout << \"Current word: \" << guessedWord << std::endl;\n        std::cout << \"Guessed letters: \";\n        for (char letter : guessedLetters) {\n            std::cout << letter << \" \";\n        }\n        std::cout << std::endl;\n        std::cout << \"Attempts left: \" << maxAttempts - attempts << std::endl;\n\n        char guess;\n        std::cout << \"Guess a letter: \";\n        std::cin >> guess;\n        guess = tolower(guess);\n\n        if (guessedLetters.empty() || std::find(guessedLetters.begin(), guessedLetters.end(), guess) == guessedLetters.end()) {\n            guessedLetters.push_back(guess);\n            if (word.find(guess) != std::string::npos) {\n                for (size_t i = 0; i < word.length(); ++i) {\n                    if (word[i] == guess) {\n                        guessedWord[i] = guess;\n                    }\n                }\n                if (guessedWord == word) {\n                    std::cout << \"Congratulations! You've guessed the word: \" << word << std::endl;\n                    return;\n                }\n            } else {\n                attempts++;\n                std::cout << \"Letter not found. Attempts remaining: \" << maxAttempts - attempts << std::endl;\n            }\n        } else {\n            std::cout << \"You already guessed that letter. Try again.\" << std::endl;\n        }\n    }\n\n    std::cout << \"Sorry, you've run out of attempts. The word was: \" << word << std::endl;\n}\n```\n\n#### 3.5 Main Function\n\nCombine all the parts in the main function.\n\n```cpp\nint main() {\n    const std::string filename = \"words.txt\";\n    std::vector<std::string> words = readWordsFromFile(filename);\n\n    if (words.empty()) {\n        std::cerr << \"No words loaded. Exiting.\" << std::endl;\n        return 1;\n    }\n\n    std::string word = selectRandomWord(words);\n    if (word.empty()) {\n        std::cerr << \"No word selected. Exiting.\" << std::endl;\n        return 1;\n    }\n\n    playHangman(word);\n\n    return 0;\n}\n```\n\n### Step 4: Create the Words File\n\nCreate a text file named `words.txt` with each word on a separate line. For example:\n\n```\napple\nbanana\ncherry\ndate\nelderberry\nfig\ngrape\n```\n\n### Step 5: Compile and Run\n\nCompile your program using a C++ compiler:\n\n```sh\ng++ -o hangman hangman.cpp\n```\n\nRun the program:\n\n```sh\n./hangman\n```\n\n### Step 6: Test the Program\n\nPlay the game by guessing letters and ensure that it works as expected.\n\n### Final Solution\n\nTo implement a C++ program that plays Hangman against the user, follow these steps:\n\n1. **Setup the Project**: Ensure you have a C++ compiler installed.\n\n2. **Plan the Program**:\n    - Read words from a text file.\n    - Randomly select one word.\n    - Allow user to guess letters one at a time.\n    - Track guesses and remaining attempts.\n    - Display current state after each guess.\n\n3. **Implement the Program**:\n\n    - **Include Necessary Headers**:\n        ```cpp\n        #include <iostream>\n        #include <fstream>\n        #include <string>\n        #include <vector>\n        #include <ctime>\n        #include <cstdlib>\n        #include <cctype>\n        ```\n\n    - **Read Words from a File**:\n        ```cpp\n        std::vector<std::string> readWordsFromFile(const std::string& filename) {\n            std::vector<std::string> words;\n            std::ifstream file(filename);\n            if (file.is_open()) {\n                std::string word;\n                while (getline(file, word)) {\n                    words.push_back(word);\n                }\n                file.close();\n            } else {\n                std::cerr << \"Unable to open file: \" << filename << std::endl;\n            }\n            return words;\n        }\n        ```\n\n    - **Select a Random Word**:\n        ```cpp\n        std::string selectRandomWord(const std::vector<std::string>& words) {\n            if (words.empty()) {\n                return \"\";\n            }\n            srand(time(0));\n            int randomIndex = rand() % words.size();\n            return words[randomIndex];\n        }\n        ```\n\n    - **Play the Game**:\n        ```cpp\n        void playHangman(const std::string& word) {\n            std::string guessedWord(word.length(), '_');\n            std::vector<char> guessedLetters;\n            const int maxAttempts = 6;\n            int attempts = 0;\n\n            while (attempts < maxAttempts) {\n                std::cout << \"Current word: \" << guessedWord << std::endl;\n                std::cout << \"Guessed letters: \";\n                for (char letter : guessedLetters) {\n                    std::cout << letter << \" \";\n                }\n                std::cout << std::endl;\n                std::cout << \"Attempts left: \" << maxAttempts - attempts << std::endl;\n\n                char guess;\n                std::cout << \"Guess a letter: \";\n                std::cin >> guess;\n                guess = tolower(guess);\n\n                if (std::find(guessedLetters.begin(), guessedLetters.end(), guess) == guessedLetters.end()) {\n                    guessedLetters.push_back(guess);\n                    if (word.find(guess) != std::string::npos) {\n                        for (size_t i = 0; i < word.length(); ++i) {\n                            if (word[i] == guess) {\n                                guessedWord[i] = guess;\n                            }\n                        }\n                        if (guessedWord == word) {\n                            std::cout << \"Congratulations! You've guessed the word: \" << word << std::endl;\n                            return;\n                        }\n                    } else {\n                        attempts++;\n                        std::cout << \"Letter not found. Attempts remaining: \" << maxAttempts - attempts << std::endl;\n                    }\n                } else {\n                    std::cout << \"You already guessed that letter. Try again.\" << std::endl;\n                }\n            }\n\n            std::cout << \"Sorry, you've run out of attempts. The word was: \" << word << std::endl;\n        }\n        ```\n\n    - **Main Function**:\n        ```cpp\n        int main() {\n            const std::string filename = \"words.txt\";\n            std::vector<std::string> words = readWordsFromFile(filename);\n\n            if (words.empty()) {\n                std::cerr << \"No words loaded. Exiting.\" << std::endl;\n                return 1;\n            }\n\n            std::string word = selectRandomWord(words);\n            if (word.empty()) {\n                std::cerr << \"No word selected. Exiting.\" << std::endl;\n                return 1;\n            }\n\n            playHangman(word);\n\n            return 0;\n        }\n        ```\n\n4. **Create the Words File**: A text file named `words.txt` with each word on a separate line.\n\n5. **Compile and Run**:\n    ```sh\n    g++ -o hangman hangman.cpp\n    ./hangman\n    ```\n\n6. **Test the Program**: Play the game to ensure it functions correctly."
    }
]