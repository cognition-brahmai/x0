[
    {
        "role": "user",
        "content": "Create a C++ implementation of a singly linked list data structure, including methods for insertion, deletion, and traversal.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a singly linked list in C++ involves creating a structure for the nodes and then defining functions to perform operations like insertion, deletion, and traversal. I'll walk you through each step.\n\nFirst, let's understand what a singly linked list is. It's a linear data structure where each element (node) points to the next node in the sequence, forming a chain. Each node contains two parts: data and a link to the next node.\n\nHere's a basic outline of what we'll cover:\n\n1. **Define the Node Structure**\n2. **Implement the Linked List Class**\n3. **Insertion Methods**\n   - Insert at the Beginning\n   - Insert at the End\n   - Insert After a Given Node\n4. **Deletion Methods**\n   - Delete a Node by Value\n5. **Traversal Method**\n   - Print the Linked List\n\nLet's start by defining the node structure.\n\n### 1. Define the Node Structure\n\nWe'll create a simple structure for the node that contains an integer data and a pointer to the next node.\n\n```cpp\nstruct Node {\n    int data;\n    Node* next;\n};\n```\n\n### 2. Implement the Linked List Class\n\nNow, we'll create a class for the singly linked list that will manage the nodes.\n\n```cpp\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    // Insertion methods\n    void insertAtBeginning(int value);\n    void insertAtEnd(int value);\n    void insertAfter(Node* prevNode, int value);\n\n    // Deletion method\n    void deleteNode(int value);\n\n    // Traversal method\n    void printList() const;\n};\n```\n\n### 3. Insertion Methods\n\n#### Insert at the Beginning\n\nThis method inserts a new node at the start of the list.\n\n```cpp\nvoid SinglyLinkedList::insertAtBeginning(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = head;\n    head = newNode;\n}\n```\n\n#### Insert at the End\n\nThis method traverses the list to the end and inserts a new node there.\n\n```cpp\nvoid SinglyLinkedList::insertAtEnd(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = nullptr;\n\n    if (head == nullptr) {\n        head = newNode;\n        return;\n    }\n\n    Node* last = head;\n    while (last->next != nullptr) {\n        last = last->next;\n    }\n    last->next = newNode;\n}\n```\n\n#### Insert After a Given Node\n\nThis method inserts a new node after a specified existing node.\n\n```cpp\nvoid SinglyLinkedList::insertAfter(Node* prevNode, int value) {\n    if (prevNode == nullptr) {\n        std::cout << \"The given previous node cannot be nullptr.\" << std::endl;\n        return;\n    }\n\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = prevNode->next;\n    prevNode->next = newNode;\n}\n```\n\n### 4. Deletion Methods\n\n#### Delete a Node by Value\n\nThis method searches for a node with the given value and removes it from the list.\n\n```cpp\nvoid SinglyLinkedList::deleteNode(int value) {\n    Node* temp = head;\n    Node* prev = nullptr;\n\n    if (temp != nullptr && temp->data == value) {\n        head = temp->next;\n        delete temp;\n        return;\n    }\n\n    while (temp != nullptr && temp->data != value) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == nullptr) {\n        std::cout << \"Node with value \" << value << \" not found.\" << std::endl;\n        return;\n    }\n\n    prev->next = temp->next;\n    delete temp;\n}\n```\n\n### 5. Traversal Method\n\n#### Print the Linked List\n\nThis method traverses the list and prints the data of each node.\n\n```cpp\nvoid SinglyLinkedList::printList() const {\n    Node* temp = head;\n    while (temp != nullptr) {\n        std::cout << temp->data << \" -> \";\n        temp = temp->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n```\n\n### Putting It All Together\n\nHere's the complete code for the singly linked list implementation:\n\n```cpp\n#include <iostream>\n\nstruct Node {\n    int data;\n    Node* next;\n};\n\nclass SinglyLinkedList {\nprivate:\n    Node* head;\n\npublic:\n    SinglyLinkedList() : head(nullptr) {}\n\n    void insertAtBeginning(int value);\n    void insertAtEnd(int value);\n    void insertAfter(Node* prevNode, int value);\n    void deleteNode(int value);\n    void printList() const;\n};\n\nvoid SinglyLinkedList::insertAtBeginning(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = head;\n    head = newNode;\n}\n\nvoid SinglyLinkedList::insertAtEnd(int value) {\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = nullptr;\n\n    if (head == nullptr) {\n        head = newNode;\n        return;\n    }\n\n    Node* last = head;\n    while (last->next != nullptr) {\n        last = last->next;\n    }\n    last->next = newNode;\n}\n\nvoid SinglyLinkedList::insertAfter(Node* prevNode, int value) {\n    if (prevNode == nullptr) {\n        std::cout << \"The given previous node cannot be nullptr.\" << std::endl;\n        return;\n    }\n\n    Node* newNode = new Node();\n    newNode->data = value;\n    newNode->next = prevNode->next;\n    prevNode->next = newNode;\n}\n\nvoid SinglyLinkedList::deleteNode(int value) {\n    Node* temp = head;\n    Node* prev = nullptr;\n\n    if (temp != nullptr && temp->data == value) {\n        head = temp->next;\n        delete temp;\n        return;\n    }\n\n    while (temp != nullptr && temp->data != value) {\n        prev = temp;\n        temp = temp->next;\n    }\n\n    if (temp == nullptr) {\n        std::cout << \"Node with value \" << value << \" not found.\" << std::endl;\n        return;\n    }\n\n    prev->next = temp->next;\n    delete temp;\n}\n\nvoid SinglyLinkedList::printList() const {\n    Node* temp = head;\n    while (temp != nullptr) {\n        std::cout << temp->data << \" -> \";\n        temp = temp->next;\n    }\n    std::cout << \"nullptr\" << std::endl;\n}\n\nint main() {\n    SinglyLinkedList list;\n\n    list.insertAtEnd(1);\n    list.insertAtBeginning(2);\n    list.insertAtBeginning(3);\n    list.insertAtEnd(4);\n    list.insertAfter(list.head->next, 5);\n\n    std::cout << \"Created List: \";\n    list.printList();\n\n    list.deleteNode(3);\n    std::cout << \"After deleting 3: \";\n    list.printList();\n\n    list.deleteNode(6);\n    std::cout << \"After trying to delete 6: \";\n    list.printList();\n\n    return 0;\n}\n```\n\nThis code defines a simple singly linked list with methods to insert at the beginning, end, and after a given node, delete a node by value, and print the list. The `main` function demonstrates these operations.\n\nI hope this helps! Let me know if you have any questions or need further clarification."
    }
]