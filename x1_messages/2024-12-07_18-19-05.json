[
    {
        "role": "user",
        "content": "Implement a C++ program that uses pointers and dynamic memory allocation to create a linked list data structure with functions for adding elements, removing elements, and searching for elements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a linked list in C++ using pointers and dynamic memory allocation is a great way to understand how data structures work at a low level. In this explanation, I'll guide you through creating a simple singly linked list with functions to add elements, remove elements, and search for elements.\n\n### Step-by-Step Guide\n\n1. **Define the Node Structure:**\n   - Each node in the linked list will contain data and a pointer to the next node.\n   \n2. **Create the LinkedList Class:**\n   - This class will manage the operations on the linked list, including adding, removing, and searching for elements.\n   \n3. **Implement the Functions:**\n   - `addNode`: Adds a new node to the end of the list.\n   - `removeNode`: Removes a node with a specific value.\n   - `searchNode`: Searches for a node with a specific value and returns whether it exists.\n   \n4. **Memory Management:**\n   - Use `new` to allocate memory for new nodes.\n   - Use `delete` to free memory when removing nodes.\n\n### Code Implementation\n\n```cpp\n#include <iostream>\n\n// Define the Node structure\nstruct Node {\n    int data;\n    Node* next;\n};\n\n// Define the LinkedList class\nclass LinkedList {\nprivate:\n    Node* head;\n\npublic:\n    LinkedList() : head(nullptr) {}\n\n    // Function to add a new node at the end\n    void addNode(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n        } else {\n            Node* temp = head;\n            while (temp->next != nullptr) {\n                temp = temp->next;\n            }\n            temp->next = newNode;\n        }\n    }\n\n    // Function to remove a node with a specific value\n    void removeNode(int value) {\n        if (head == nullptr) return;\n\n        if (head->data == value) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node* current = head;\n        while (current->next != nullptr) {\n            if (current->next->data == value) {\n                Node* temp = current->next;\n                current->next = current->next->next;\n                delete temp;\n                return;\n            }\n            current = current->next;\n        }\n    }\n\n    // Function to search for a node with a specific value\n    bool searchNode(int value) {\n        Node* current = head;\n        while (current != nullptr) {\n            if (current->data == value) {\n                return true;\n            }\n            current = current->next;\n        }\n        return false;\n    }\n\n    // Function to display the list (for testing purposes)\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            std::cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        std::cout << std::endl;\n    }\n\n    // Destructor to free the memory\n    ~LinkedList() {\n        while (head != nullptr) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n        }\n    }\n};\n\nint main() {\n    LinkedList list;\n\n    list.addNode(10);\n    list.addNode(20);\n    list.addNode(30);\n\n    list.display();  // Output: 10 20 30\n\n    list.removeNode(20);\n    list.display();  // Output: 10 30\n\n    std::cout << \"Search for 30: \" << (list.searchNode(30) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Found\n    std::cout << \"Search for 20: \" << (list.searchNode(20) ? \"Found\" : \"Not Found\") << std::endl;  // Output: Not Found\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Node Structure:**\n   - Each node contains an integer `data` and a pointer `next` to the next node.\n\n2. **LinkedList Class:**\n   - **Constructor:** Initializes the head to `nullptr`.\n   - **addNode:** Adds a new node with the given value to the end of the list.\n   - **removeNode:** Removes the first node that matches the given value.\n   - **searchNode:** Searches for a node with the given value and returns `true` if found, else `false`.\n   - **display:** Prints the list (for testing purposes).\n   - **Destructor:** Frees the memory allocated for each node to prevent memory leaks.\n\nThis implementation provides a basic understanding of how to manage a linked list using pointers and dynamic memory allocation in C++. You can expand this by adding more functionalities like inserting at the beginning, deleting the entire list, etc."
    }
]