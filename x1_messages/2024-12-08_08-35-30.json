[
    {
        "role": "user",
        "content": "Create a Node.js REST API that manages a simple task list. The API should support creating, updating, deleting, and listing tasks. Each task should have a title, description, due date, and completion status. Use MongoDB as the backend database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you create a simple task list REST API using Node.js and MongoDB. We'll use Express.js for the backend framework and Mongoose for interacting with MongoDB.\n\n## Prerequisites\n\n- Node.js installed on your machine.\n- Basic understanding of JavaScript/ES6.\n- MongoDB installed and running locally or a connection string for a remote MongoDB instance.\n\n## Project Setup\n\nFirst, create a new directory for your project and initialize it with npm:\n\n```bash\nmkdir task-list-api\ncd task-list-api\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express mongoose body-parser dotenv\n```\n\n## Directory Structure\n\nYour project structure should look like this:\n\n```\ntask-list-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Task.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 tasks.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n## Configuration\n\nCreate a `.env` file to store your MongoDB connection string:\n\n```\nMONGODB_URI=mongodb://localhost:27017/tasklist\nPORT=3000\n```\n\n## Models\n\nCreate a `models` directory and add a `Task.js` file to define the task schema:\n\n```javascript\n// models/Task.js\nconst mongoose = require('mongoose');\n\nconst taskSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  description: { type: String, required: true },\n  dueDate: { type: Date, required: true },\n  completed: { type: Boolean, default: false }\n}, { timestamps: true });\n\nmodule.exports = mongoose.model('Task', taskSchema);\n```\n\n## Routes\n\nCreate a `routes` directory and add a `tasks.js` file to handle task-related routes:\n\n```javascript\n// routes/tasks.js\nconst express = require('express');\nconst router = express.Router();\nconst Task = require('../models/Task');\n\n// Get all tasks\nrouter.get('/', async (req, res) => {\n  try {\n    const tasks = await Task.find();\n    res.json(tasks);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get one task by ID\nrouter.get('/:id', getTask, (req, res) => {\n  res.json(res.task);\n});\n\n// Create a new task\nrouter.post('/', async (req, res) => {\n  const task = new Task({\n    title: req.body.title,\n    description: req.body.description,\n    dueDate: req.body.dueDate,\n    completed: req.body.completed\n  });\n\n  try {\n    const newTask = await task.save();\n    res.status(201).json(newTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update a task\nrouter.patch('/:id', getTask, async (req, res) => {\n  if (req.body.title != null) {\n    res.task.title = req.body.title;\n  }\n  if (req.body.description != null) {\n    res.task.description = req.body.description;\n  }\n  if (req.body.dueDate != null) {\n    res.task.dueDate = req.body.dueDate;\n  }\n  if (req.body.completed != null) {\n    res.task.completed = req.body.completed;\n  }\n\n  try {\n    const updatedTask = await res.task.save();\n    res.json(updatedTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a task\nrouter.delete('/:id', getTask, async (req, res) => {\n  try {\n    await res.task.remove();\n    res.json({ message: 'Deleted Task' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware to get task by ID\nasync function getTask(req, res, next) {\n  let task;\n  try {\n    task = await Task.findById(req.params.id);\n    if (task == null) {\n      return res.status(404).json({ message: 'Cannot find task' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.task = task;\n  next();\n}\n\nmodule.exports = router;\n```\n\n## App Setup\n\nCreate the main `app.js` file:\n\n```javascript\n// app.js\nrequire('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst tasksRouter = require('./routes/tasks');\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(express.json());\napp.use('/tasks', tasksRouter);\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => {\n    console.log('Connected to MongoDB');\n    app.listen(port, () => {\n      console.log(`Server is running on port ${port}`);\n    });\n  })\n  .catch((error) => {\n    console.error('MongoDB connection error:', error);\n  });\n```\n\n## Running the Application\n\nStart your server by running:\n\n```bash\nnode app.js\n```\n\nYour API should now be running on `http://localhost:3000/tasks`.\n\n## Testing the API\n\nYou can use tools like Postman or curl to test the API endpoints:\n\n- **Get all tasks:** `GET /tasks`\n- **Get a single task:** `GET /tasks/:id`\n- **Create a task:** `POST /tasks` with JSON body\n- **Update a task:** `PATCH /tasks/:id` with JSON body\n- **Delete a task:** `DELETE /tasks/:id`\n\n## Conclusion\n\nYou've successfully created a simple task list REST API using Node.js, Express, and MongoDB. This API allows you to perform basic CRUD operations on tasks. You can further enhance this by adding authentication, validation, and more features as needed."
    }
]