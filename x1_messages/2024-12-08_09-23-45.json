[
    {
        "role": "user",
        "content": "Using Python, implement a function that finds the longest consecutive sequence in an unsorted array of integers. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! To solve this problem, we need to find the longest consecutive sequence in an unsorted array of integers. We'll use Python for this implementation.\n\n### Approach\n\n1. **Understand the Problem:**\n   - We are given an array of integers, which may contain duplicates and is not sorted.\n   - We need to find the length of the longest consecutive elements sequence.\n\n2. **Example:**\n   - Input: [100, 4, 200, 1, 3, 2]\n   - Output: 4 (because the sequence is [1, 2, 3, 4])\n\n3. **Efficient Solution Using a Set:**\n   - Convert the array to a set for O(1) lookups.\n   - Iterate through each number in the set.\n   - For each number, check if it's the start of a sequence (i.e., no preceding number exists).\n   - If it is, then count the length of the sequence starting from this number.\n\n4. **Steps in Code:**\n   - Create a set from the array for quick lookups.\n   - Initialize a variable to keep track of the longest sequence found.\n   - For each number in the set:\n     - If the number minus one is not in the set, it's the start of a sequence.\n     - Incrementally check for the next numbers in the sequence and count the length.\n     - Update the longest sequence if the current sequence is longer.\n\n### Solution Code\n\n```python\ndef longest_consecutive(nums):\n    num_set = set(nums)\n    longest = 0\n\n    for num in num_set:\n        # Check if it's the start of a sequence\n        if num - 1 not in num_set:\n            current_num = num\n            current_streak = 1\n\n            while current_num + 1 in num_set:\n                current_num += 1\n                current_streak += 1\n\n            longest = max(longest, current_streak)\n\n    return longest\n\n# Example usage:\nnums = [100, 4, 200, 1, 3, 2]\nprint(longest_consecutive(nums))  # Output: 4\n```\n\n### Explanation\n\n1. **Set Conversion:**\n   - Convert the list to a set to eliminate duplicates and allow O(1) lookups.\n\n2. **Sequence Detection:**\n   - For each number in the set, check if it's the start of a sequence by verifying that `num - 1` is not in the set.\n   - If it is the start, iterate through the subsequent numbers to find the length of the sequence.\n\n3. **Track Longest Sequence:**\n   - Keep track of the longest sequence found during the iteration.\n\nThis approach ensures that we efficiently find the longest consecutive sequence with a time complexity of O(n), where n is the number of elements in the array."
    }
]