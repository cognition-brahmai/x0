[
    {
        "role": "user",
        "content": "Develop a Python Flask web application that allows users to create and manage a simple to-do list. The application should support user registration, login, and the ability to add, edit, delete, and mark tasks as completed. Store the data in an SQLite database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through building a simple to-do list web application using Python and Flask. This app will let users register, log in, and manage their to-do lists, including adding, editing, deleting, and marking tasks as completed. We'll store all the data in an SQLite database, which is great for starting out because it's easy to set up and doesn't require a separate database server.\n\nFirst, make sure you have Python installed on your computer. You can download it from python.org if you don't have it already. Also, install Flask and other necessary libraries. You can do this using pip, Python's package installer. Open your terminal or command prompt and run:\n\n```bash\npip install Flask Flask-SQLAlchemy Flask-Login\n```\n\nThese libraries will help us handle the web framework, database operations, and user authentication.\n\nNext, let's set up the basic structure of our Flask application. Create a new directory for your project, and inside it, create the following files:\n\n- `app.py`: This will contain the main application code.\n\n- `models.py`: Here, we'll define our database models.\n\n- `forms.py`: We'll create forms for user registration, login, and task management.\n\n- `templates/`: This folder will hold our HTML templates for the web pages.\n\n- `static/`: This folder will contain static files like CSS and JavaScript.\n\nLet's start by setting up the basic Flask app in `app.py`:\n\n```python\nfrom flask import Flask, render_template, redirect, url_for, flash\nfrom forms import RegistrationForm, LoginForm, TaskForm\nfrom models import User, Task, db, login_manager\nfrom flask_login import login_user, current_user, logout_user, login_required\n\napp = Flask(__name__)\napp.config['SECRET_KEY'] = 'your_secret_key'\napp.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///site.db'\n\ndb.init_app(app)\nlogin_manager.init_app(app)\n\n@login_manager.user_loader\ndef load_user(user_id):\n    return User.query.get(int(user_id))\n\n@app.route(\"/\")\n@app.route(\"/home\")\ndef home():\n    return render_template('home.html')\n\n@app.route(\"/register\", methods=['GET', 'POST'])\ndef register():\n    form = RegistrationForm()\n    if form.validate_on_submit():\n        # Create a new user and add to the database\n        user = User(username=form.username.data, email=form.email.data)\n        user.set_password(form.password.data)\n        db.session.add(user)\n        db.session.commit()\n        flash('Your account has been created! You can now log in.', 'success')\n        return redirect(url_for('login'))\n    return render_template('register.html', title='Register', form=form)\n\n@app.route(\"/login\", methods=['GET', 'POST'])\ndef login():\n    form = LoginForm()\n    if form.validate_on_submit():\n        user = User.query.filter_by(email=form.email.data).first()\n        if user and user.check_password(form.password.data):\n            login_user(user, remember=form.remember.data)\n            return redirect(url_for('tasks'))\n        else:\n            flash('Login Unsuccessful. Please check email and password.', 'danger')\n    return render_template('login.html', title='Login', form=form)\n\n@app.route(\"/logout\")\ndef logout():\n    logout_user()\n    return redirect(url_for('home'))\n\n@app.route(\"/tasks\")\n@login_required\ndef tasks():\n    tasks = current_user.tasks.all()\n    return render_template('tasks.html', tasks=tasks)\n\n@app.route(\"/task/add\", methods=['GET', 'POST'])\n@login_required\ndef add_task():\n    form = TaskForm()\n    if form.validate_on_submit():\n        task = Task(title=form.title.data, description=form.description.data, user=current_user)\n        db.session.add(task)\n        db.session.commit()\n        flash('Your task has been added!', 'success')\n        return redirect(url_for('tasks'))\n    return render_template('add_task.html', title='Add Task', form=form)\n\n@app.route(\"/task/<int:task_id>/update\", methods=['GET', 'POST'])\n@login_required\ndef update_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    if task.user != current_user:\n        abort(403)\n    form = TaskForm()\n    if form.validate_on_submit():\n        task.title = form.title.data\n        task.description = form.description.data\n        db.session.commit()\n        flash('Your task has been updated!', 'success')\n        return redirect(url_for('tasks'))\n    elif request.method == 'GET':\n        form.title.data = task.title\n        form.description.data = task.description\n    return render_template('add_task.html', title='Update Task', form=form)\n\n@app.route(\"/task/<int:task_id>/delete\", methods=['POST'])\n@login_required\ndef delete_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    if task.user != current_user:\n        abort(403)\n    db.session.delete(task)\n    db.session.commit()\n    flash('Your task has been deleted!', 'success')\n    return redirect(url_for('tasks'))\n\n@app.route(\"/task/<int:task_id>/complete\", methods=['POST'])\n@login_required\ndef complete_task(task_id):\n    task = Task.query.get_or_404(task_id)\n    if task.user != current_user:\n        abort(403)\n    task.completed = True\n    db.session.commit()\n    flash('Task marked as completed!', 'success')\n    return redirect(url_for('tasks'))\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nIn this code, we've set up routes for the home page, user registration, login, logout, task management, and more. We're using Flask's `render_template` to render HTML pages, and we're utilizing Flask-WTF for handling forms.\n\nNow, let's define our database models in `models.py`:\n\n```python\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_login import UserMixin, LoginManager\nfrom werkzeug.security import generate_password_hash, check_password_hash\n\ndb = SQLAlchemy()\nlogin_manager = LoginManager()\n\nclass User(UserMixin, db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(20), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n    password_hash = db.Column(db.String(128), nullable=False)\n    tasks = db.relationship('Task', backref='author', lazy=True)\n\n    def set_password(self, password):\n        self.password_hash = generate_password_hash(password)\n\n    def check_password(self, password):\n        return check_password_hash(self.password_hash, password)\n\nclass Task(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    title = db.Column(db.String(100), nullable=False)\n    description = db.Column(db.Text, nullable=True)\n    completed = db.Column(db.Boolean, default=False)\n    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)\n```\n\nHere, we have a `User` model with fields for username, email, and password hash. The `Task` model has fields for title, description, completion status, and a foreign key linking to the user who created it.\n\nNext, we need to create forms for user interaction. In `forms.py`, we'll define forms for registration, login, and task management:\n\n```python\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField, SubmitField, TextAreaField, BooleanField\nfrom wtforms.validators import DataRequired, Length, Email, EqualTo, ValidationError\nfrom models import User\n\nclass RegistrationForm(FlaskForm):\n    username = StringField('Username', validators=[DataRequired(), Length(min=2, max=20)])\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo('password')])\n    submit = SubmitField('Sign Up')\n\n    def validate_username(self, username):\n        user = User.query.filter_by(username=username.data).first()\n        if user:\n            raise ValidationError('That username is taken. Please choose a different one.')\n\n    def validate_email(self, email):\n        user = User.query.filter_by(email=email.data).first()\n        if user:\n            raise ValidationError('That email is already in use. Please choose a different one.')\n\nclass LoginForm(FlaskForm):\n    email = StringField('Email', validators=[DataRequired(), Email()])\n    password = PasswordField('Password', validators=[DataRequired()])\n    remember = BooleanField('Remember Me')\n    submit = SubmitField('Login')\n\nclass TaskForm(FlaskForm):\n    title = StringField('Title', validators=[DataRequired()])\n    description = TextAreaField('Description')\n    submit = SubmitField('Submit')\n```\n\nThese forms handle input validation and provide a clean way to interact with the user.\n\nNow, let's create the HTML templates in the `templates` folder. Here are some example templates to get you started:\n\n1. `home.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Home</title>\n</head>\n<body>\n    <h1>Welcome to the To-Do List App</h1>\n    {% if current_user.is_authenticated %}\n        <p>Hello, {{ current_user.username }}!</p>\n        <p><a href=\"{{ url_for('tasks') }}\">My Tasks</a></p>\n        <p><a href=\"{{ url_for('logout') }}\">Logout</a></p>\n    {% else %}\n        <p><a href=\"{{ url_for('register') }}\">Register</a></p>\n        <p><a href=\"{{ url_for('login') }}\">Login</a></p>\n    {% endif %}\n</body>\n</html>\n```\n\n2. `register.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Register</title>\n</head>\n<body>\n    <h1>Register</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <p>\n            {{ form.username.label }}<br>\n            {{ form.username(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.email.label }}<br>\n            {{ form.email(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.password.label }}<br>\n            {{ form.password(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.confirm_password.label }}<br>\n            {{ form.confirm_password(class=\"form-control\") }}\n        </p>\n        <p>{{ form.submit(class=\"btn btn-primary\") }}</p>\n    </form>\n</body>\n</html>\n```\n\n3. `login.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Login</title>\n</head>\n<body>\n    <h1>Login</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <p>\n            {{ form.email.label }}<br>\n            {{ form.email(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.password.label }}<br>\n            {{ form.password(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.remember.label }}<br>\n            {{ form.remember }}\n        </p>\n        <p>{{ form.submit(class=\"btn btn-primary\") }}</p>\n    </form>\n</body>\n</html>\n```\n\n4. `tasks.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Tasks</title>\n</head>\n<body>\n    <h1>My Tasks</h1>\n    <p><a href=\"{{ url_for('add_task') }}\">Add New Task</a></p>\n    <ul>\n        {% for task in tasks %}\n        <li>\n            {{ task.title }}\n            {% if task.completed %}\n            (Completed)\n            {% else %}\n            <a href=\"{{ url_for('complete_task', task_id=task.id) }}\">Mark as Completed</a>\n            {% endif %}\n            | <a href=\"{{ url_for('update_task', task_id=task.id) }}\">Edit</a>\n            | <a href=\"{{ url_for('delete_task', task_id=task.id) }}\">Delete</a>\n        </li>\n        {% endfor %}\n    </ul>\n</body>\n</html>\n```\n\n5. `add_task.html`:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>{% if title == 'Add Task' %}Add Task{% else %}Update Task{% endif %}</title>\n</head>\n<body>\n    <h1>{% if title == 'Add Task' %}Add Task{% else %}Update Task{% endif %}</h1>\n    <form method=\"POST\">\n        {{ form.hidden_tag() }}\n        <p>\n            {{ form.title.label }}<br>\n            {{ form.title(class=\"form-control\") }}\n        </p>\n        <p>\n            {{ form.description.label }}<br>\n            {{ form.description(class=\"form-control\") }}\n        </p>\n        <p>{{ form.submit(class=\"btn btn-primary\") }}</p>\n    </form>\n</body>\n</html>\n```\n\nThese templates provide the front-end for user interaction. You can style them further using CSS, which you can place in the `static/css` directory.\n\nBefore running the app, make sure to set up the database. With your terminal in the project directory, run the following commands:\n\n```bash\nflask db init\nflask db migrate\nflask db upgrade\n```\n\nThese commands will set up the necessary database tables based on your models.\n\nFinally, run your Flask application by executing:\n\n```bash\nflask run\n```\n\nNow, open your web browser and go to `http://127.0.0.1:5000/` to see your to-do list app in action.\n\nThat's it! You've created a simple to-do list web application with user authentication and task management using Flask and SQLite. This is a basic starting point, and you can expand upon it by adding more features, improving the user interface, or enhancing security measures."
    }
]