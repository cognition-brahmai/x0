[
    {
        "role": "user",
        "content": "Write a Java program that reads a CSV file containing user information (first name, last name, email, and age) and stores the data in an SQLite database. The program should also provide methods to query the database for all users, users with specific ages, and users with specific email domains."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to tackle this task of creating a Java program that handles reading a CSV file with user information and storing it in an SQLite database. Then, I need to provide methods to query this database in different ways. Let's break this down step by step.\n\nFirst things first, I need to make sure I have the right tools and dependencies for this job. Since we're dealing with Java, SQLite, and CSV files, I'll need to include the appropriate libraries in my project.\n\n### Step 1: Set Up the Project\n\nI'll start by setting up a new Java project. I can use any IDE like IntelliJ IDEA or Eclipse for this purpose. For dependencies, I'll need:\n\n- **SQLite JDBC Driver**: To connect to the SQLite database from Java.\n\nI can add this dependency using Maven or Gradle. Since I'm familiar with Maven, I'll go with that.\n\n#### Adding Dependencies\n\nIf you're using Maven, add the following dependency to your `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>org.xerial</groupId>\n    <artifactId>sqlite-jdbc</artifactId>\n    <version>3.36.0.3</version>\n</dependency>\n```\n\n### Step 2: Reading the CSV File\n\nNext, I need to read the CSV file containing user information. The file has columns for first name, last name, email, and age.\n\nI could write my own CSV parser, but that might be error-prone. Instead, I'll use a library like OpenCSV to handle reading the CSV file.\n\n#### Adding OpenCSV Dependency\n\nAdd the OpenCSV dependency to `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>com.opencsv</groupId>\n    <artifactId>opencsv</artifactId>\n    <version>5.5.2</version>\n</dependency>\n```\n\n### Step 3: Creating the Database and Table\n\nI need to create an SQLite database and a table to store user information. The table should have columns corresponding to the CSV data: first name, last name, email, and age.\n\n#### SQL Schema\n\n```sql\nCREATE TABLE users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    first_name TEXT NOT NULL,\n    last_name TEXT NOT NULL,\n    email TEXT NOT NULL UNIQUE,\n    age INTEGER NOT NULL\n);\n```\n\n### Step 4: Importing Data from CSV to Database\n\nNow, I'll write a Java program to read the CSV file and insert the data into the SQLite database.\n\n#### Steps:\n\n1. Read the CSV file using OpenCSV.\n2. Connect to the SQLite database using the JDBC driver.\n3. Insert each row from the CSV into the database.\n\n### Step 5: Implementing Query Methods\n\nI need to provide methods to query the database:\n\n- Get all users.\n- Get users with a specific age.\n- Get users with a specific email domain.\n\n#### Example Methods:\n\n- `getAllUsers()`\n- `getUsersByAge(int age)`\n- `getUsersByEmailDomain(String domain)`\n\n### Step 6: Testing the Program\n\nFinally, I need to test the program to ensure that data is correctly imported and that queries work as expected.\n\n### Complete Program\n\nHere's a complete Java program that accomplishes the task:\n\n```java\nimport com.opencsv.CSVReader;\nimport com.opencsv.exceptions.CsvException;\n\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass User {\n    int id;\n    String firstName;\n    String lastName;\n    String email;\n    int age;\n\n    User(int id, String firstName, String lastName, String email, int age) {\n        this.id = id;\n        this.firstName = firstName;\n        this.lastName = lastName;\n        this.email = email;\n        this.age = age;\n    }\n\n    @Override\n    public String toString() {\n        return \"User{\" +\n                \"id=\" + id +\n                \", firstName='\" + firstName + '\\'' +\n                \", lastName='\" + lastName + '\\'' +\n                \", email='\" + email + '\\'' +\n                \", age=\" + age +\n                '}';\n    }\n}\n\npublic class UserDatabase {\n\n    private static final String DB_URL = \"jdbc:sqlite:user.db\";\n\n    public static void main(String[] args) {\n        try {\n            // Create and connect to the database\n            Connection conn = connect();\n\n            // Create table\n            createTable(conn);\n\n            // Read CSV and import data\n            importCSV(conn, \"users.csv\");\n\n            // Query examples\n            List<User> allUsers = getAllUsers(conn);\n            System.out.println(\"All Users:\");\n            for (User user : allUsers) {\n                System.out.println(user);\n            }\n\n            List<User> usersAge25 = getUsersByAge(conn, 25);\n            System.out.println(\"\\nUsers aged 25:\");\n            for (User user : usersAge25) {\n                System.out.println(user);\n            }\n\n            List<User> usersGmail = getUsersByEmailDomain(conn, \"gmail.com\");\n            System.out.println(\"\\nUsers with gmail.com:\");\n            for (User user : usersGmail) {\n                System.out.println(user);\n            }\n\n            // Close connection\n            conn.close();\n        } catch (SQLException | IOException | CsvException e) {\n            System.err.println(e.getMessage());\n        }\n    }\n\n    private static Connection connect() throws SQLException {\n        return DriverManager.getConnection(DB_URL);\n    }\n\n    private static void createTable(Connection conn) throws SQLException {\n        String sql = \"CREATE TABLE IF NOT EXISTS users (\" +\n                \"id INTEGER PRIMARY KEY AUTOINCREMENT,\" +\n                \"first_name TEXT NOT NULL,\" +\n                \"last_name TEXT NOT NULL,\" +\n                \"email TEXT NOT NULL UNIQUE,\" +\n                \"age INTEGER NOT NULL\" +\n                \");\";\n        try (Statement stmt = conn.createStatement()) {\n            stmt.execute(sql);\n        }\n    }\n\n    private static void importCSV(Connection conn, String fileName) throws IOException, CsvException, SQLException {\n        try (CSVReader reader = new CSVReader(new FileReader(fileName));\n             PreparedStatement pstmt = conn.prepareStatement(\"INSERT INTO users(first_name, last_name, email, age) VALUES (?, ?, ?, ?)\")) {\n\n            String[] line;\n            reader.readNext(); // Skip header\n            while ((line = reader.readNext()) != null) {\n                pstmt.setString(1, line[0]);\n                pstmt.setString(2, line[1]);\n                pstmt.setString(3, line[2]);\n                pstmt.setInt(4, Integer.parseInt(line[3]));\n                pstmt.addBatch();\n            }\n            pstmt.executeBatch();\n        }\n    }\n\n    private static List<User> getAllUsers(Connection conn) throws SQLException {\n        List<User> users = new ArrayList<>();\n        String sql = \"SELECT * FROM users;\";\n        try (Statement stmt = conn.createStatement();\n             ResultSet rs = stmt.executeQuery(sql)) {\n\n            while (rs.next()) {\n                User user = new User(\n                        rs.getInt(\"id\"),\n                        rs.getString(\"first_name\"),\n                        rs.getString(\"last_name\"),\n                        rs.getString(\"email\"),\n                        rs.getInt(\"age\")\n                );\n                users.add(user);\n            }\n        }\n        return users;\n    }\n\n    private static List<User> getUsersByAge(Connection conn, int age) throws SQLException {\n        List<User> users = new ArrayList<>();\n        String sql = \"SELECT * FROM users WHERE age = ?;\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setInt(1, age);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                while (rs.next()) {\n                    User user = new User(\n                            rs.getInt(\"id\"),\n                            rs.getString(\"first_name\"),\n                            rs.getString(\"last_name\"),\n                            rs.getString(\"email\"),\n                            rs.getInt(\"age\")\n                    );\n                    users.add(user);\n                }\n            }\n        }\n        return users;\n    }\n\n    private static List<User> getUsersByEmailDomain(Connection conn, String domain) throws SQLException {\n        List<User> users = new ArrayList<>();\n        String sql = \"SELECT * FROM users WHERE email LIKE ?;\";\n        try (PreparedStatement pstmt = conn.prepareStatement(sql)) {\n            pstmt.setString(1, \"%\" + domain);\n            try (ResultSet rs = pstmt.executeQuery()) {\n                while (rs.next()) {\n                    User user = new User(\n                            rs.getInt(\"id\"),\n                            rs.getString(\"first_name\"),\n                            rs.getString(\"last_name\"),\n                            rs.getString(\"email\"),\n                            rs.getInt(\"age\")\n                    );\n                    users.add(user);\n                }\n            }\n        }\n        return users;\n    }\n}\n```\n\n### Explanation\n\n1. **Dependencies**: We use SQLite JDBC for database operations and OpenCSV for reading CSV files.\n2. **Database Setup**: We create a table `users` if it doesn't exist.\n3. **Data Import**: We read the CSV file and insert data into the `users` table.\n4. **Query Methods**:\n   - `getAllUsers()`: Retrieves all users.\n   - `getUsersByAge(int age)`: Retrieves users of a specific age.\n   - `getUsersByEmailDomain(String domain)`: Retrieves users with emails from a specific domain.\n5. **Testing**: The main method demonstrates importing data and querying the database.\n\nThis program provides a straightforward way to manage user data from a CSV file using an SQLite database in Java."
    }
]