[
    {
        "role": "user",
        "content": "Develop a Python script that calculates the factorial of a given number using recursion. The script should handle input validation and display appropriate error messages if necessary."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a Python script that calculates the factorial of a given number using recursion. We'll also make sure to include input validation to handle any incorrect inputs and display appropriate error messages.\n\nFirst, what is a factorial? The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It's denoted by n!. For example, 5! = 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 120.\n\nNow, recursion is a method where the solution to a problem depends on solutions to smaller instances of the same problem. In the case of factorial, n! = n \u00d7 (n-1)! and we know that 1! = 1 and 0! = 1.\n\nSo, for our script, we'll need:\n\n1. A recursive function to calculate the factorial.\n\n2. Input validation to ensure the user enters a non-negative integer.\n\n3. Appropriate error messages for invalid inputs.\n\nLet's start by writing the recursive function for factorial.\n\n## Step 1: Recursive Function for Factorial\n\nWe'll define a function called `factorial` that takes an integer `n` as its argument.\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n\nThis function checks if `n` is 0 and returns 1 (since 0! = 1). For any other positive integer, it returns `n` multiplied by the factorial of `n - 1`.\n\n## Step 2: Input Validation\n\nWe need to ensure that the user inputs a non-negative integer. If the input is negative or not an integer, we should display an error message.\n\nWe'll use a loop to keep asking for input until a valid input is provided.\n\n```python\ndef get_valid_input():\n    while True:\n        try:\n            n = int(input(\"Enter a non-negative integer: \"))\n            if n < 0:\n                print(\"Error: Factorial is not defined for negative numbers.\")\n            else:\n                return n\n        except ValueError:\n            print(\"Error: Invalid input. Please enter an integer.\")\n```\n\nIn this function:\n\n- We use a `try` block to attempt to convert the input to an integer.\n\n- If the input is not an integer, a `ValueError` is raised, and we print an error message.\n\n- If the input is an integer but negative, we print an error message.\n\n- If the input is valid (a non-negative integer), we return it.\n\n## Step 3: Main Script\n\nNow, we'll put it all together in the main part of the script.\n\n```python\ndef main():\n    print(\"Factorial Calculator\")\n    n = get_valid_input()\n    result = factorial(n)\n    print(f\"The factorial of {n} is {result}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nHere:\n\n- We define a `main` function that prints a message, gets a valid input from the user, calculates the factorial using the recursive function, and prints the result.\n\n- We check if the script is run directly (not imported as a module) and if so, call the `main` function.\n\n## Complete Script\n\nPutting it all together, the complete script looks like this:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\ndef get_valid_input():\n    while True:\n        try:\n            n = int(input(\"Enter a non-negative integer: \"))\n            if n < 0:\n                print(\"Error: Factorial is not defined for negative numbers.\")\n            else:\n                return n\n        except ValueError:\n            print(\"Error: Invalid input. Please enter an integer.\")\n\ndef main():\n    print(\"Factorial Calculator\")\n    n = get_valid_input()\n    result = factorial(n)\n    print(f\"The factorial of {n} is {result}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Explanation\n\n1. **Factorial Function**: A recursive function that calculates the factorial of a given non-negative integer.\n2. **Input Validation**: A function that repeatedly asks the user for input until a valid non-negative integer is provided.\n3. **Main Function**: Orchestrates the script by getting valid input and computing the factorial, then displaying the result.\n\nThis script ensures that only valid inputs are processed and provides clear error messages for invalid inputs, making it user-friendly and robust."
    }
]