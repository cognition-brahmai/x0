[
    {
        "role": "user",
        "content": "Develop a Python script that monitors a directory for changes and automatically uploads modified or newly created files to an FTP server. Use proper error handling and logging for any issues that may occur during the upload process.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python script that watches a specific folder for any changes like new files being added or existing files being modified. As soon as any of these changes happen, the script should automatically upload those files to an FTP server. Also, it's important to handle any errors that might come up during the upload process and log those issues for troubleshooting later.\n\nFirst, I need to understand what tools and libraries I'll be using for this task. Python has a few libraries that can help with monitoring file system changes and interacting with FTP servers.\n\nFor monitoring the directory, I can use the `watchdog` library, which provides a flexible event handling mechanism for file system events. It's more efficient and reliable than polling the directory at regular intervals.\n\nFor FTP operations, Python's built-in `ftplib` library should suffice. It allows us to connect to an FTP server, log in, and perform file uploads.\n\nI'll also need to handle logging, so I'll use Python's `logging` module to record any events or errors that occur during the execution of the script.\n\nBefore I dive into coding, I should plan out the steps and components of the script:\n\n1. **Set up logging:** Configure the logging module to write logs to a file, including timestamps and error levels.\n\n2. **Configure FTP connection:** Define the FTP server details such as host, port, username, and password. Create a function to establish an FTP connection and handle logging in.\n\n3. **Define event handlers:** Using `watchdog`, set up event handlers to respond to specific file system events like file creation and modification.\n\n4. **Implement upload functionality:** Create a function that takes a file path as input and uploads it to the FTP server. This function should handle any exceptions that occur during the upload process and log them appropriately.\n\n5. **Set up the observer:** Use `watchdog`'s `Observer` class to monitor the specified directory for events. Assign the event handlers to the observer.\n\n6. **Start the observer:** Begin monitoring the directory and keep the script running indefinitely to continuously watch for changes.\n\nNow, let's think about some potential pitfalls and how to handle them:\n\n- **FTP connection issues:** If the FTP server is down or unreachable, the script should log the error and retry connecting after a certain interval.\n\n- **File in use:** If a file is being modified or is in use when the script attempts to upload it, it might cause an error. I can implement a retry mechanism with a delay to handle such scenarios.\n\n- **Permission issues:** Ensure that the script has the necessary permissions to read the files in the monitored directory and to write to the FTP server.\n\n- **Large files:** For large files, consider uploading them in chunks to avoid memory issues.\n\n- **Security:** Hardcoding credentials in the script isn't secure. I should consider using environment variables or a configuration file to store sensitive information.\n\nLet me outline how I'll address these concerns:\n\n- **FTP connection issues:** Implement a retry mechanism with exponential backoff for connecting to the FTP server.\n\n- **File in use:** Implement retries with increasing delays for uploading files that are temporarily unavailable.\n\n- **Permission issues:** Make sure to run the script with appropriate permissions and handle exceptions related to file access.\n\n- **Large files:** Upload files in chunks to manage memory usage.\n\n- **Security:** Use environment variables to store the FTP credentials and other sensitive information.\n\nNow, let's start writing some code. First, I'll set up the logging.\n\n## Final Solution\nTo create a Python script that monitors a directory for changes and automatically uploads modified or newly created files to an FTP server, you can follow the steps below. This solution uses the `watchdog` library for directory monitoring and Python's built-in `ftplib` for FTP operations. It also employs proper error handling and logging.\n\n### Solution Code\n\n```python\nimport os\nimport time\nimport logging\nfrom ftplib import FTP, error_perm\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\n# Configure logging\nlogging.basicConfig(filename='ftp_upload.log', level=logging.INFO, format='%(asctime)s - %(message)s')\n\n# FTP server configuration\nFTP_HOST = os.getenv('FTP_HOST', 'your_ftp_host')\nFTP_PORT = int(os.getenv('FTP_PORT', 21))\nFTP_USER = os.getenv('FTP_USER', 'your_ftp_user')\nFTP_PASS = os.getenv('FTP_PASS', 'your_ftp_pass')\nFTP_DIR = os.getenv('FTP_DIR', '/path/on/ftp')\n\n# Local directory to monitor\nWATCH_DIR = os.getenv('WATCH_DIR', '/path/to/local/directory')\n\nclass FTPUplaoder:\n    def __init__(self, host, port, user, password, directory):\n        self.host = host\n        self.port = port\n        self.user = user\n        self.password = password\n        self.directory = directory\n        self.ftp = None\n\n    def connect(self):\n        attempt = 1\n        while True:\n            try:\n                self.ftp = FTP()\n                self.ftp.connect(self.host, self.port)\n                self.ftp.login(self.user, self.password)\n                self.ftp.cwd(self.directory)\n                logging.info(\"Connected to FTP server\")\n                break\n            except error_perm as e:\n                logging.error(f\"FTP connection error: {e}\")\n                wait_time = 60 * attempt  # Wait time in seconds\n                logging.info(f\"Retrying connection in {wait_time} seconds...\")\n                time.sleep(wait_time)\n                attempt += 1\n\n    def upload_file(self, file_path):\n        file_name = os.path.basename(file_path)\n        retry_attempts = 3\n        for attempt in range(retry_attempts):\n            try:\n                with open(file_path, 'rb') as file:\n                    self.ftp.storbinary(f'STOR {file_name}', file)\n                logging.info(f\"Uploaded {file_path} to FTP server\")\n                break\n            except Exception as e:\n                logging.error(f\"Error uploading {file_path}: {e}\")\n                if attempt < retry_attempts - 1:\n                    wait_time = 10 * (attempt + 1)\n                    logging.info(f\"Retrying upload in {wait_time} seconds...\")\n                    time.sleep(wait_time)\n                else:\n                    logging.error(f\"Failed to upload {file_path} after {retry_attempts} attempts\")\n\n    def disconnect(self):\n        if self.ftp:\n            self.ftp.quit()\n            logging.info(\"Disconnected from FTP server\")\n\nclass UploadHandler(FileSystemEventHandler):\n    def __init__(self, ftp_uploader):\n        self.ftp_uploader = ftp_uploader\n\n    def on_modified(self, event):\n        if event.is_directory:\n            return\n        self.upload_file(event.src_path)\n\n    def on_created(self, event):\n        if event.is_directory:\n            return\n        self.upload_file(event.src_path)\n\n    def upload_file(self, file_path):\n        _, file_extension = os.path.splitext(file_path)\n        if file_extension:  # Ignore directories\n            self.ftp_uploader.upload_file(file_path)\n\ndef main():\n    ftp_uploader = FTPUplaoder(FTP_HOST, FTP_PORT, FTP_USER, FTP_PASS, FTP_DIR)\n    ftp_uploader.connect()\n\n    event_handler = UploadHandler(ftp_uploader)\n    observer = Observer()\n    observer.schedule(event_handler, WATCH_DIR, recursive=False)\n    observer.start()\n    logging.info(f\"Watching directory: {WATCH_DIR}\")\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n    ftp_uploader.disconnect()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Logging Setup:**\n   - Configures logging to write to a file named `ftp_upload.log` with timestamps and messages.\n\n2. **FTP Configuration:**\n   - Retrieves FTP server details from environment variables for security.\n\n3. **FTPUplaoder Class:**\n   - Manages FTP connections and uploads.\n   - Implements retry logic for connecting to the FTP server and uploading files.\n\n4. **UploadHandler Class:**\n   - Handles file system events (created and modified files).\n   - Calls the FTP uploader to upload the files.\n\n5. **Main Function:**\n   - Initializes the FTP uploader and establishes a connection.\n   - Sets up the watchdog observer to monitor the specified directory.\n   - Keeps the script running to continuously monitor for changes and handles graceful shutdown.\n\nThis script ensures that any new or modified files in the specified directory are uploaded to the FTP server, with robust error handling and logging for reliability."
    }
]