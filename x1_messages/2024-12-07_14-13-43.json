[
    {
        "role": "user",
        "content": "Write a Java program to implement a singly linked list data structure with basic operations such as insertion, deletion, and traversal.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Java program that implements a singly linked list with basic operations like insertion, deletion, and traversal.\n\n```java\nclass Node {\n    int data;\n    Node next;\n\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n    }\n}\n\npublic class SinglyLinkedList {\n    Node head;\n\n    public SinglyLinkedList() {\n        this.head = null;\n    }\n\n    // Insert a new node at the beginning of the list\n    public void insertAtBeginning(int data) {\n        Node newNode = new Node(data);\n        newNode.next = head;\n        head = newNode;\n    }\n\n    // Insert a new node at the end of the list\n    public void insertAtEnd(int data) {\n        Node newNode = new Node(data);\n        if (head == null) {\n            head = newNode;\n            return;\n        }\n        Node current = head;\n        while (current.next != null) {\n            current = current.next;\n        }\n        current.next = newNode;\n    }\n\n    // Delete a node with a specific value\n    public void deleteNode(int key) {\n        Node temp = head, prev = null;\n\n        // If the head node itself holds the key to be deleted\n        if (temp != null && temp.data == key) {\n            head = temp.next; // Changed head\n            return;\n        }\n\n        // Search for the key to be deleted, keep track of the previous node as we need to change 'prev.next'\n        while (temp != null && temp.data != key) {\n            prev = temp;\n            temp = temp.next;\n        }\n\n        // If key was not present in linked list\n        if (temp == null) return;\n\n        // Unlink the node from linked list\n        prev.next = temp.next;\n    }\n\n    // Traverse and print the list\n    public void traverse() {\n        Node current = head;\n        while (current != null) {\n            System.out.print(current.data + \" -> \");\n            current = current.next;\n        }\n        System.out.println(\"null\");\n    }\n\n    public static void main(String[] args) {\n        SinglyLinkedList list = new SinglyLinkedList();\n\n        list.insertAtEnd(1);\n        list.insertAtBeginning(2);\n        list.insertAtEnd(3);\n        list.insertAtBeginning(4);\n        list.traverse(); // Output: 4 -> 2 -> 1 -> 3 -> null\n\n        list.deleteNode(2);\n        list.traverse(); // Output: 4 -> 1 -> 3 -> null\n\n        list.deleteNode(4);\n        list.traverse(); // Output: 1 -> 3 -> null\n\n        list.deleteNode(3);\n        list.traverse(); // Output: 1 -> null\n\n        list.deleteNode(1);\n        list.traverse(); // Output: null\n    }\n}\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents a single node in the linked list.\n   - Each node contains an integer `data` and a reference (`next`) to the next node.\n\n2. **SinglyLinkedList Class**:\n   - Contains a reference to the `head` of the list.\n   - **insertAtBeginning(int data)**: Inserts a new node with the given data at the beginning of the list.\n   - **insertAtEnd(int data)**: Inserts a new node with the given data at the end of the list.\n   - **deleteNode(int key)**: Deletes the first occurrence of the node with the specified data.\n   - **traverse()**: Prints the elements of the list from head to tail.\n\n3. **Main Method**:\n   - Demonstrates the usage of the singly linked list by performing insertions, deletions, and traversals."
    }
]