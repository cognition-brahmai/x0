[
    {
        "role": "user",
        "content": "In JavaScript, write a script to fetch data from an API of your choice. The script should handle errors gracefully and provide meaningful feedback to the user in case of failure. Also, implement pagination support if the API provides it. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Okay, I'll write a JavaScript script to fetch data from an API. I need to choose an API that provides pagination support so I can demonstrate that feature as well. Let's go with the JSONPlaceholder API; it's a fake online REST API for testing and prototyping. It has endpoints for posts, comments, photos, etc., and some of them support pagination.\n\nFirst, I need to set up a basic HTML file with a script tag where I can write my JavaScript code. Since I'm dealing with asynchronous operations (fetching data from an API), I'll use async/await for better readability.\n\nHere's a simple HTML structure:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>API Fetch Demo</title>\n</head>\n<body>\n    <h1>Posts</h1>\n    <div id=\"posts\"></div>\n    <button id=\"load-more\">Load More</button>\n    <div id=\"error-message\"></div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\nNow, I'll create the `script.js` file where I'll write the JavaScript code to fetch data from the API.\n\nI need to fetch posts from the JSONPlaceholder API. The posts endpoint is `https://jsonplaceholder.typicode.com/posts`. This API doesn't inherently support pagination through query parameters, but I can implement client-side pagination by fetching a certain number of posts at a time.\n\nLet's say I want to fetch 10 posts per page. I'll keep track of the current page and update it when the user clicks the \"Load More\" button.\n\nHere's how I can structure my JavaScript code:\n\n1. Define variables for the current page and posts per page.\n2. Select the elements from the DOM that I'll be interacting with (the posts container, the load more button, and the error message container).\n3. Write an async function to fetch the posts based on the current page.\n4. Handle any errors that might occur during the fetch operation and display an error message.\n5. Append the fetched posts to the posts container.\n6. Add an event listener to the \"Load More\" button to increment the page and fetch the next set of posts.\n\nLet me start by defining the variables and selecting the DOM elements:\n\n```javascript\nconst postsContainer = document.getElementById('posts');\nconst loadMoreButton = document.getElementById('load-more');\nconst errorMessage = document.getElementById('error-message');\n\nlet currentPage = 1;\nconst postsPerPage = 10;\n```\n\nNext, I'll write the async function to fetch the posts:\n\n```javascript\nasync function fetchPosts(page) {\n    try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${postsPerPage}`);\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n        errorMessage.textContent = 'Error fetching data. Please try again later.';\n        loadMoreButton.disabled = true;\n        throw error;\n    }\n}\n```\n\nIn this function, I'm using the fetch API to get the posts. I'm passing `_page` and `_limit` parameters to simulate pagination, even though JSONPlaceholder doesn't officially support these parameters. However, JSONPlaceholder does support the `_page` and `_limit` parameters for pagination, so this should work.\n\nI'm handling any network errors or HTTP errors by throwing an error, which will be caught in the error boundary.\n\nNow, I need to write a function to display the posts:\n\n```javascript\nfunction displayPosts(posts) {\n    posts.forEach(post => {\n        const postElement = document.createElement('div');\n        postElement.innerHTML = `\n            <h2>${post.title}</h2>\n            <p>${post.body}</p>\n        `;\n        postsContainer.appendChild(postElement);\n    });\n}\n```\n\nThis function creates a new div for each post and appends it to the posts container.\n\nNext, I'll write a function to handle the loading of more posts when the button is clicked:\n\n```javascript\nasync function loadMorePosts() {\n    try {\n        const posts = await fetchPosts(currentPage);\n        if (posts.length === 0) {\n            loadMoreButton.disabled = true;\n            errorMessage.textContent = 'No more posts to load.';\n            return;\n        }\n        displayPosts(posts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading more posts:', error);\n    }\n}\n```\n\nIn this function, I'm fetching the posts for the current page, displaying them, and then incrementing the current page. If no posts are returned, I disable the \"Load More\" button and display a message indicating that there are no more posts to load.\n\nFinally, I'll add an event listener to the \"Load More\" button to call the `loadMorePosts` function:\n\n```javascript\nloadMoreButton.addEventListener('click', loadMorePosts);\n```\n\nAnd I should also load the first page of posts when the page loads:\n\n```javascript\nwindow.addEventListener('load', async () => {\n    try {\n        const initialPosts = await fetchPosts(currentPage);\n        displayPosts(initialPosts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading initial posts:', error);\n    }\n});\n```\n\nPutting it all together, here's the complete `script.js`:\n\n```javascript\nconst postsContainer = document.getElementById('posts');\nconst loadMoreButton = document.getElementById('load-more');\nconst errorMessage = document.getElementById('error-message');\n\nlet currentPage = 1;\nconst postsPerPage = 10;\n\nasync function fetchPosts(page) {\n    try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${postsPerPage}`);\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n        errorMessage.textContent = 'Error fetching data. Please try again later.';\n        loadMoreButton.disabled = true;\n        throw error;\n    }\n}\n\nfunction displayPosts(posts) {\n    posts.forEach(post => {\n        const postElement = document.createElement('div');\n        postElement.innerHTML = `\n            <h2>${post.title}</h2>\n            <p>${post.body}</p>\n        `;\n        postsContainer.appendChild(postElement);\n    });\n}\n\nasync function loadMorePosts() {\n    try {\n        const posts = await fetchPosts(currentPage);\n        if (posts.length === 0) {\n            loadMoreButton.disabled = true;\n            errorMessage.textContent = 'No more posts to load.';\n            return;\n        }\n        displayPosts(posts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading more posts:', error);\n    }\n}\n\nwindow.addEventListener('load', async () => {\n    try {\n        const initialPosts = await fetchPosts(currentPage);\n        displayPosts(initialPosts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading initial posts:', error);\n    }\n});\n\nloadMoreButton.addEventListener('click', loadMorePosts);\n```\n\nThis script should fetch posts from the JSONPlaceholder API, display them on the page, and allow the user to load more posts using pagination. It also handles errors gracefully by displaying an error message and disabling the \"Load More\" button when appropriate.\n\n## Final Solution\nTo create a JavaScript script that fetches data from an API and implements pagination, we can use the JSONPlaceholder API, which is a free fake online REST API for testing and prototyping.\n\n### Approach\n\n1. **HTML Structure**: Set up a basic HTML file with elements to display posts, a button to load more posts, and an area to show error messages.\n2. **JavaScript Logic**:\n   - Use the Fetch API to retrieve data from the JSONPlaceholder.\n   - Implement pagination by controlling the page and number of posts per page.\n   - Handle errors gracefully and provide user feedback.\n3. **DOM Interaction**: Update the DOM to display fetched posts and manage the state of the \"Load More\" button.\n\n### Solution Code\n\n#### HTML (index.html)\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>API Fetch Demo</title>\n</head>\n<body>\n    <h1>Posts</h1>\n    <div id=\"posts\"></div>\n    <button id=\"load-more\">Load More</button>\n    <div id=\"error-message\"></div>\n\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n#### JavaScript (script.js)\n\n```javascript\nconst postsContainer = document.getElementById('posts');\nconst loadMoreButton = document.getElementById('load-more');\nconst errorMessage = document.getElementById('error-message');\n\nlet currentPage = 1;\nconst postsPerPage = 10;\n\nasync function fetchPosts(page) {\n    try {\n        const response = await fetch(`https://jsonplaceholder.typicode.com/posts?_page=${page}&_limit=${postsPerPage}`);\n        if (!response.ok) {\n            throw new Error('Network response was not ok ' + response.statusText);\n        }\n        const data = await response.json();\n        return data;\n    } catch (error) {\n        console.error('There has been a problem with your fetch operation:', error);\n        errorMessage.textContent = 'Error fetching data. Please try again later.';\n        loadMoreButton.disabled = true;\n        throw error;\n    }\n}\n\nfunction displayPosts(posts) {\n    posts.forEach(post => {\n        const postElement = document.createElement('div');\n        postElement.innerHTML = `\n            <h2>${post.title}</h2>\n            <p>${post.body}</p>\n        `;\n        postsContainer.appendChild(postElement);\n    });\n}\n\nasync function loadMorePosts() {\n    try {\n        const posts = await fetchPosts(currentPage);\n        if (posts.length === 0) {\n            loadMoreButton.disabled = true;\n            errorMessage.textContent = 'No more posts to load.';\n            return;\n        }\n        displayPosts(posts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading more posts:', error);\n    }\n}\n\nwindow.addEventListener('load', async () => {\n    try {\n        const initialPosts = await fetchPosts(currentPage);\n        displayPosts(initialPosts);\n        currentPage++;\n    } catch (error) {\n        console.error('Error loading initial posts:', error);\n    }\n});\n\nloadMoreButton.addEventListener('click', loadMorePosts);\n```\n\n### Explanation\n\n1. **HTML Setup**: Basic structure with areas to display posts, a button to load more posts, and an error message area.\n2. **JavaScript Functions**:\n   - `fetchPosts(page)`: Fetches posts for the given page using the Fetch API.\n   - `displayPosts(posts)`: Creates and appends post elements to the posts container.\n   - `loadMorePosts()`: Fetches and displays posts for the next page and handles pagination logic.\n3. **Event Listeners**:\n   - Load initial posts when the window loads.\n   - Load more posts when the \"Load More\" button is clicked.\n4. **Error Handling**: Displays an error message and disables the \"Load More\" button in case of fetch errors or when no more posts are available.\n\nThis approach ensures that the application handles API responses and errors gracefully while providing a smooth user experience through pagination."
    }
]