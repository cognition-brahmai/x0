[
    {
        "role": "user",
        "content": "Create a Java class implementing a stack data structure using an array, including methods for push, pop, peek, isEmpty, and isFull."
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in Java using an array. This class includes methods for push, pop, peek, isEmpty, and isFull.\n\n```java\npublic class ArrayStack {\n    private int top;\n    private int capacity;\n    private int[] stackArray;\n\n    // Constructor to initialize the stack with a given capacity\n    public ArrayStack(int size) {\n        capacity = size;\n        stackArray = new int[capacity];\n        top = -1;\n    }\n\n    // Method to add an element to the stack\n    public void push(int value) {\n        if (isFull()) {\n            System.out.println(\"Stack is full. Cannot push \" + value);\n            return;\n        }\n        stackArray[++top] = value;\n        System.out.println(value + \" pushed to stack\");\n    }\n\n    // Method to remove the top element from the stack\n    public int pop() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot pop\");\n            return -1; // Assuming -1 as error value\n        }\n        int poppedValue = stackArray[top--];\n        return poppedValue;\n    }\n\n    // Method to look at the top element of the stack without removing it\n    public int peek() {\n        if (isEmpty()) {\n            System.out.println(\"Stack is empty. Cannot peek\");\n            return -1; // Assuming -1 as error value\n        }\n        return stackArray[top];\n    }\n\n    // Method to check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Method to check if the stack is full\n    public boolean isFull() {\n        return (top == capacity - 1);\n    }\n\n    // Main method for testing the stack operations\n    public static void main(String[] args) {\n        ArrayStack stack = new ArrayStack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        stack.push(6); // Should print \"Stack is full. Cannot push 6\"\n\n        System.out.println(\"Top element is: \" + stack.peek());\n\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop(); // Should print \"Stack is empty. Cannot pop\"\n\n        System.out.println(\"Is stack empty? \" + stack.isEmpty());\n    }\n}\n```\n\n### Explanation:\n\n1. **Class Definition:**\n   - `ArrayStack` class has three private variables: `top` (to keep track of the top element), `capacity` (to store the maximum size of the stack), and `stackArray` (the array used for storing stack elements).\n\n2. **Constructor:**\n   - Initializes the stack with a given capacity, sets `top` to -1 (indicating an empty stack), and creates the array with the specified capacity.\n\n3. **Push Operation:**\n   - Adds an element to the top of the stack if the stack is not full.\n   - Increments `top` and assigns the value to the new top position.\n\n4. **Pop Operation:**\n   - Removes the top element from the stack if the stack is not empty.\n   - Decrements `top` and returns the value at the previous top position.\n\n5. **Peek Operation:**\n   - Returns the top element without removing it, if the stack is not empty.\n\n6. **IsEmpty and IsFull Methods:**\n   - `isEmpty()` checks if `top` is -1.\n   - `isFull()` checks if `top` has reached the maximum index of the array.\n\n7. **Main Method:**\n   - Demonstrates the usage of the stack by performing push, pop, and peek operations and checks for empty and full conditions.\n\nThis implementation assumes that the stack holds integers. You can modify the type of the array and the methods' parameters and return types to handle different data types as needed."
    }
]