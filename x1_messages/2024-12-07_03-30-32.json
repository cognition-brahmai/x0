[
    {
        "role": "user",
        "content": "Develop a Java application that uses the AWS SDK to manage EC2 instances. The application should provide a simple text-based interface for listing all instances, starting or stopping instances by ID, and creating new instances based on predefined templates.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to try to tackle this task of developing a Java application that manages AWS EC2 instances using the AWS SDK. I've never done anything like this before, but I'm excited to learn something new.\n\nFirst things first, I need to understand what AWS EC2 is and what the AWS SDK provides. From what I know, EC2 stands for Elastic Compute Cloud, which is AWS's virtual server offering. It allows users to rent virtual computers on which they can run their own software. The AWS SDK, on the other hand, is a set of tools that makes it easier to integrate AWS services into applications.\n\nSo, my goal is to create a Java application that can interact with EC2 instances through this SDK. The application should have a text-based interface, meaning users will input commands via the console, and the application will perform actions based on those commands.\n\nLet me list out the functionalities I need to implement:\n\n1. List all EC2 instances.\n\n2. Start an EC2 instance by its ID.\n\n3. Stop an EC2 instance by its ID.\n\n4. Create a new EC2 instance based on predefined templates.\n\nAlright, starting with setting up the environment. I need to have Java installed, and I'll probably use an IDE like IntelliJ or Eclipse to write the code. Also, I need to include the AWS SDK for Java in my project dependencies.\n\nI think I'll use Maven for dependency management since it's widely used and integrates well with most IDEs.\n\nSo, first step: Set up a new Maven project and add the AWS SDK dependency.\n\nI can create a new Maven project by creating a `pom.xml` file with the necessary configurations.\n\nHere's a basic `pom.xml` structure:\n\n```xml\n\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n\n     xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n\n     xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n\n<modelVersion>4.0.0</modelVersion>\n\n<groupId>com.example</groupId>\n\n<artifactId>aws-ec2-manager</artifactId>\n\n<version>1.0-SNAPSHOT</version>\n\n<dependencies>\n\n    <dependency>\n\n        <groupId>com.amazonaws</groupId>\n\n        <artifactId>aws-java-sdk-ec2</artifactId>\n\n        <version>1.12.109</version>\n\n    </dependency>\n\n</dependencies>\n\n</project>\n\n```\n\nI need to make sure to use the latest version of the AWS SDK for EC2.\n\nNext, I need to set up AWS credentials for the application to use. AWS requires credentials to authenticate API requests. I can set these credentials in a few ways:\n\n1. Through environment variables.\n\n2. Through the AWS credentials file.\n\n3. Through IAM roles if running on an EC2 instance.\n\nSince this is a standalone Java application, I'll assume that the credentials are set in the AWS credentials file, which is usually located at `~/.aws/credentials` on Linux or `C:\\Users\\YourUser\\.aws\\credentials` on Windows.\n\nThe credentials file should look like this:\n\n```\n\n[default]\n\naws_access_key_id=YOUR_ACCESS_KEY\n\naws_secret_access_key=YOUR_SECRET_KEY\n\n```\n\nI should also set the region in a separate configuration file, `~/.aws/config`:\n\n```\n\n[default]\n\nregion=us-west-2\n\n```\n\nAlternatively, I can hardcode the credentials and region in the code, but that's not secure and not recommended.\n\nIn the code, I can create an `AmazonEC2` client using the default credentials provider chain, which will look for credentials in the standard locations.\n\nNow, let's think about the text-based interface. I need to create a simple console application that reads user inputs and performs actions based on those inputs.\n\nI can use the `Scanner` class in Java to read inputs from the console.\n\nLet me sketch out a basic structure of the application:\n\n- Display a menu with options: list instances, start instance, stop instance, create instance, exit.\n\n- Read the user's choice.\n\n- Based on the choice, call the corresponding method.\n\n- For listing instances, retrieve all instances from EC2 and print their IDs and states.\n\n- For starting or stopping instances, take the instance ID as input and perform the action.\n\n- For creating a new instance, use a predefined template to specify the instance type, AMI ID, etc.\n\nI need to handle exceptions and errors gracefully, informing the user if something goes wrong.\n\nLet me start by creating a class, say, `EC2Manager`, which will have methods for each functionality.\n\nFirst, the method to list all instances.\n\nI need to use the `describeInstances` method of the `AmazonEC2` client.\n\nHere's a rough outline:\n\n```java\n\npublic void listInstances() {\n\n    DescribeInstancesResult result = ec2.describeInstances();\n\n    for (Reservation reservation : result.getReservations()) {\n\n        for (Instance instance : reservation.getInstances()) {\n\n            System.out.println(\"Instance ID: \" + instance.getInstanceId() + \", State: \" + instance.getState().getName());\n\n        }\n\n    }\n\n}\n\n```\n\nSimilarly, for starting an instance:\n\n```java\n\npublic void startInstance(String instanceId) {\n\n    try {\n\n        ec2.startInstances(new StartInstancesRequest().withInstanceIds(instanceId));\n\n        System.out.println(\"Starting instance: \" + instanceId);\n\n    } catch (AmazonServiceException e) {\n\n        System.err.println(\"Error starting instance: \" + e.getMessage());\n\n    }\n\n}\n\n```\n\nAnd for stopping an instance:\n\n```java\n\npublic void stopInstance(String instanceId) {\n\n    try {\n\n        ec2.stopInstances(new StopInstancesRequest().withInstanceIds(instanceId));\n\n        System.out.println(\"Stopping instance: \" + instanceId);\n\n    } catch (AmazonServiceException e) {\n\n        System.err.println(\"Error stopping instance: \" + e.getMessage());\n\n    }\n\n}\n\n```\n\nFor creating a new instance, I need to specify more details like the AMI ID, instance type, key pair, etc.\n\nI'll assume that these details are predefined in the application.\n\nHere's a sample method:\n\n```java\n\npublic void createInstance() {\n\n    String amiId = \"ami-0c55b159cbfafe1f0\"; // Example AMI ID\n\n    String instanceType = \"t2.micro\";\n\n    String keyPairName = \"my-key-pair\";\n\n    String securityGroupId = \"sg-0123456789abcdef0\";\n\n    RunInstancesRequest request = new RunInstancesRequest()\n\n            .withImageId(amiId)\n\n            .withInstanceType(instanceType)\n\n            .withKeyName(keyPairName)\n\n            .withMinCount(1)\n\n            .withMaxCount(1)\n\n            .withSecurityGroupIds(securityGroupId);\n\n    RunInstancesResult result = ec2.runInstances(request);\n\n    String newInstanceId = result.getReservation().getInstances().get(0).getInstanceId();\n\n    System.out.println(\"Launched new instance: \" + newInstanceId);\n\n}\n\n```\n\nI need to make sure that the AMI ID, key pair name, and security group ID are valid and exist in the user's account.\n\nNow, for the main application class, I'll create a loop that displays the menu and reads user inputs until the user chooses to exit.\n\nHere's a rough structure:\n\n```java\n\npublic class EC2ManagerApp {\n\n    private EC2Manager manager;\n\n    public EC2ManagerApp() {\n\n        manager = new EC2Manager();\n\n    }\n\n    public static void main(String[] args) {\n\n        EC2ManagerApp app = new EC2ManagerApp();\n\n        app.run();\n\n    }\n\n    public void run() {\n\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n\n            System.out.println(\"\\nEC2 Manager\");\n\n            System.out.println(\"1. List instances\");\n\n            System.out.println(\"2. Start instance\");\n\n            System.out.println(\"3. Stop instance\");\n\n            System.out.println(\"4. Create instance\");\n\n            System.out.println(\"5. Exit\");\n\n            System.out.print(\"Choose an option: \");\n\n            int choice = scanner.nextInt();\n\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n\n                case 1:\n\n                    manager.listInstances();\n\n                    break;\n\n                case 2:\n\n                    System.out.print(\"Enter instance ID to start: \");\n\n                    String startId = scanner.nextLine();\n\n                    manager.startInstance(startId);\n\n                    break;\n\n                case 3:\n\n                    System.out.print(\"Enter instance ID to stop: \");\n\n                    String stopId = scanner.nextLine();\n\n                    manager.stopInstance(stopId);\n\n                    break;\n\n                case 4:\n\n                    manager.createInstance();\n\n                    break;\n\n                case 5:\n\n                    System.out.println(\"Exiting...\");\n\n                    return;\n\n                default:\n\n                    System.out.println(\"Invalid option. Please try again.\");\n\n            }\n\n        }\n\n    }\n\n}\n\n```\n\nI need to handle potential exceptions, such as invalid instance IDs or permissions issues.\n\nAlso, I should consider adding more details to the instance list, like public IP, private IP, etc., to make it more useful.\n\nLet me enhance the `listInstances` method to include more information:\n\n```java\n\npublic void listInstances() {\n\n    DescribeInstancesResult result = ec2.describeInstances();\n\n    for (Reservation reservation : result.getReservations()) {\n\n        for (Instance instance : reservation.getInstances()) {\n\n            System.out.println(\"Instance ID: \" + instance.getInstanceId());\n\n            System.out.println(\"  State: \" + instance.getState().getName());\n\n            System.out.println(\"  Type: \" + instance.getInstanceType());\n\n            System.out.println(\"  Public IP: \" + instance.getPublicIpAddress());\n\n            System.out.println(\"  Private IP: \" + instance.getPrivateIpAddress());\n\n            System.out.println(\"  AMI: \" + instance.getImageId());\n\n        }\n\n    }\n\n}\n\n```\n\nThis should give users a better overview of their instances.\n\nAlso, for creating instances, I might want to allow more flexibility in the future, such as choosing different AMIs or instance types, but for now, using predefined values is sufficient.\n\nI should also consider adding error handling for cases where required resources don't exist, like invalid AMI IDs or security groups.\n\nAdditionally, I need to make sure that the application doesn't leak sensitive information and handles exceptions gracefully.\n\nNow, to test this application, I need to have an AWS account with appropriate permissions to manage EC2 instances.\n\nI should also ensure that the AWS SDK is correctly configured with the necessary credentials and region.\n\nLet me think about how to handle regions. By default, the SDK uses the region specified in the configuration file, but I might want to allow users to specify different regions within the application.\n\nFor simplicity, I'll assume that all operations are performed in a single, default region.\n\nMoving forward, I can enhance the application by adding more features, such as terminating instances, changing instance types, or managing security groups, but for now, the basic functionalities should suffice.\n\nI should also consider adding some validation for user inputs, like checking if the instance ID is in the correct format before attempting to start or stop an instance.\n\nMoreover, starting and stopping instances are asynchronous operations, so the state might not change immediately. I might want to add some logic to wait for the state to change, but that could make the application less responsive.\n\nFor now, I'll just inform the user that the action has been initiated and let them check the status separately.\n\nAlright, I think I have a good plan here. Let me proceed to implement the `EC2Manager` class with the methods outlined above.\n\nFirst, I need to set up the `AmazonEC2` client in the `EC2Manager` class.\n\nI can use the default credentials provider, as mentioned earlier.\n\nHere's how I can initialize the client:\n\n```java\n\nimport com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\n\nimport com.amazonaws.services.ec2.AmazonEC2;\n\nimport com.amazonaws.services.ec2.AmazonEC2ClientBuilder;\n\npublic class EC2Manager {\n\n    private AmazonEC2 ec2;\n\n    public EC2Manager() {\n\n        this.ec2 = AmazonEC2ClientBuilder.standard()\n\n                .withCredentials(new DefaultAWSCredentialsProviderChain())\n\n                .build();\n\n    }\n\n    // Methods for listing, starting, stopping, and creating instances go here\n\n}\n\n```\n\nI need to make sure that the AWS SDK is correctly imported in the project.\n\nNow, I can implement the `listInstances` method as sketched earlier.\n\nSimilarly, implement the `startInstance`, `stopInstance`, and `createInstance` methods.\n\nI should also handle any potential `AmazonServiceException` or `AmazonClientException` that might be thrown by the SDK methods.\n\nFor example, in `startInstance`:\n\n```java\n\ntry {\n\n    ec2.startInstances(new StartInstancesRequest().withInstanceIds(instanceId));\n\n    System.out.println(\"Starting instance: \" + instanceId);\n\n} catch (AmazonServiceException e) {\n\n    System.err.println(\"Error starting instance: \" + e.getMessage());\n\n} catch (AmazonClientException e) {\n\n    System.err.println(\"Client error: \" + e.getMessage());\n\n}\n\n```\n\nI need to ensure that the application doesn't crash due to exceptions and provides meaningful error messages to the user.\n\nNow, for the `EC2ManagerApp` class, I'll create a loop that keeps displaying the menu until the user chooses to exit.\n\nI'll use the `Scanner` class to read user inputs.\n\nI need to handle invalid inputs gracefully, perhaps by catching `InputMismatchException` or by checking if the input is within the expected range.\n\nAlso, since `scanner.nextInt()` leaves the newline character in the input buffer, I need to consume it to avoid skipping the next input.\n\nI can do this by adding `scanner.nextLine()` after reading the integer choice.\n\nLet me write a sample code snippet for the menu:\n\n```java\n\nScanner scanner = new Scanner(System.in);\n\nboolean exit = false;\n\nwhile (!exit) {\n\n    System.out.println(\"\\nEC2 Manager\");\n\n    System.out.println(\"1. List instances\");\n\n    System.out.println(\"2. Start instance\");\n\n    System.out.println(\"3. Stop instance\");\n\n    System.out.println(\"4. Create instance\");\n\n    System.out.println(\"5. Exit\");\n\n    System.out.print(\"Choose an option: \");\n\n    int choice = scanner.nextInt();\n\n    scanner.nextLine(); // Consume newline\n\n    switch (choice) {\n\n        case 1:\n\n            manager.listInstances();\n\n            break;\n\n        case 2:\n\n            System.out.print(\"Enter instance ID to start: \");\n\n            String startId = scanner.nextLine();\n\n            manager.startInstance(startId);\n\n            break;\n\n        case 3:\n\n            System.out.print(\"Enter instance ID to stop: \");\n\n            String stopId = scanner.nextLine();\n\n            manager.stopInstance(stopId);\n\n            break;\n\n        case 4:\n\n            manager.createInstance();\n\n            break;\n\n        case 5:\n\n            exit = true;\n\n            System.out.println(\"Exiting...\");\n\n            break;\n\n        default:\n\n            System.out.println(\"Invalid option. Please try again.\");\n\n    }\n\n}\n\n```\n\nThis seems straightforward. Now, I need to make sure that the application can handle cases where there are no instances to list or if the specified instance ID doesn't exist.\n\nIn such cases, the AWS SDK will throw exceptions, which I need to catch and display appropriate error messages.\n\nAdditionally, when creating a new instance, I need to ensure that the AMI ID, key pair name, and security group ID are valid and exist in the user's account.\n\nIf any of these are invalid, the `runInstances` method will throw an exception, which I should handle.\n\nLet me think about how to make the application more user-friendly.\n\nPerhaps, after starting or stopping an instance, I can display the current state of the instance.\n\nHowever, since these operations are asynchronous, the state might not update immediately.\n\nAlternatively, I can provide an option to list instances after performing an action.\n\nAlso, for creating instances, I might want to allow users to specify some parameters, like the instance type or AMI ID, but for now, using predefined values is acceptable.\n\nAnother consideration is to handle pagination if the user has a large number of instances.\n\nThe `describeInstances` method returns up to 1000 reservations at a time, but if there are more, it provides a `NextToken` for retrieving the next page.\n\nHowever, for simplicity, I'll assume that the user has fewer than 1000 reservations.\n\nIf needed, I can implement pagination in the future.\n\nNow, I need to test each functionality separately.\n\nFirst, test listing instances to ensure that it retrieves and displays the instance information correctly.\n\nThen, test starting and stopping instances by providing valid and invalid instance IDs to see how the application handles errors.\n\nFinally, test creating a new instance and verify that it appears in the list of instances.\n\nI should also consider edge cases, such as trying to start an already running instance or stop an already stopped instance.\n\nThe AWS SDK should handle these cases appropriately, either by doing nothing or by throwing exceptions.\n\nI need to make sure that the application doesn't crash in such scenarios.\n\nAdditionally, I should consider adding some delays between operations to allow time for instance state transitions, but that might make the application too slow for practical use.\n\nFor now, I'll assume that users will handle the timing themselves by checking the instance states after performing actions.\n\nAlright, I think I've covered the basic requirements for this application.\n\nLet me summarize the steps I need to take to complete this task:\n\n1. Set up a Maven project with the AWS SDK dependency.\n\n2. Create an `EC2Manager` class with methods to list, start, stop, and create instances.\n\n3. Implement a text-based interface in `EC2ManagerApp` that allows users to choose actions from a menu.\n\n4. Handle exceptions and errors gracefully to provide useful feedback to the user.\n\n5. Test each functionality with actual AWS resources to ensure correctness.\n\nI need to make sure that I have the necessary permissions in my AWS account to perform these operations.\n\nI should also be cautious while stopping or terminating instances to avoid accidentally stopping or terminating production instances.\n\nPerhaps, I can create a separate test AWS account for developing and testing this application.\n\nSecurity is also a concern. I need to ensure that credentials are stored securely and that the application doesn't expose any sensitive information.\n\nI should follow best practices for handling AWS credentials, such as using IAM roles or environment variables instead of hardcoding them.\n\nSince I'm using the default credentials provider chain, it should look for credentials in the standard locations, which are relatively secure if properly configured.\n\nIn conclusion, this should be a good starting point for a Java application to manage AWS EC2 instances via the AWS SDK.\n\nI'll proceed to implement the code based on this plan and test it thoroughly before considering it complete.\n\n## Final Solution\nTo create a Java application that manages AWS EC2 instances using the AWS SDK, follow these steps:\n\n### Prerequisites\n1. **Java Development Kit (JDK)** installed on your machine.\n2. **AWS Account** with necessary permissions to manage EC2 instances.\n3. **AWS SDK for Java** included in your project dependencies.\n\n### Project Setup\n1. **Create a Maven Project:**\n   - Create a directory for your project.\n   - Inside the directory, create a `pom.xml` file with the following content:\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>aws-ec2-manager</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>com.amazonaws</groupId>\n            <artifactId>aws-java-sdk-ec2</artifactId>\n            <version>1.12.109</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n2. **Set up AWS Credentials:**\n   - Ensure that your AWS credentials are set in the AWS credentials file, typically located at `~/.aws/credentials` on Linux or `C:\\Users\\YourUser\\.aws\\credentials` on Windows.\n\n   ```ini\n   [default]\n   aws_access_key_id=YOUR_ACCESS_KEY\n   aws_secret_access_key=YOUR_SECRET_KEY\n   ```\n\n   - Set the region in the AWS configuration file, `~/.aws/config`:\n\n   ```ini\n   [default]\n   region=us-west-2\n   ```\n\n### Implementation\n\n1. **Create the EC2Manager Class:**\n   - This class will handle interactions with the EC2 service.\n\n```java\nimport com.amazonaws.auth.DefaultAWSCredentialsProviderChain;\nimport com.amazonaws.services.ec2.AmazonEC2;\nimport com.amazonaws.services.ec2.AmazonEC2ClientBuilder;\nimport com.amazonaws.services.ec2.model.*;\n\npublic class EC2Manager {\n\n    private AmazonEC2 ec2;\n\n    public EC2Manager() {\n        this.ec2 = AmazonEC2ClientBuilder.standard()\n                .withCredentials(new DefaultAWSCredentialsProviderChain())\n                .build();\n    }\n\n    public void listInstances() {\n        DescribeInstancesResult result = ec2.describeInstances();\n        for (Reservation reservation : result.getReservations()) {\n            for (Instance instance : reservation.getInstances()) {\n                System.out.println(\"Instance ID: \" + instance.getInstanceId());\n                System.out.println(\"  State: \" + instance.getState().getName());\n                System.out.println(\"  Type: \" + instance.getInstanceType());\n                System.out.println(\"  Public IP: \" + instance.getPublicIpAddress());\n                System.out.println(\"  Private IP: \" + instance.getPrivateIpAddress());\n                System.out.println(\"  AMI: \" + instance.getImageId());\n            }\n        }\n    }\n\n    public void startInstance(String instanceId) {\n        try {\n            ec2.startInstances(new StartInstancesRequest().withInstanceIds(instanceId));\n            System.out.println(\"Starting instance: \" + instanceId);\n        } catch (AmazonServiceException e) {\n            System.err.println(\"Error starting instance: \" + e.getMessage());\n        }\n    }\n\n    public void stopInstance(String instanceId) {\n        try {\n            ec2.stopInstances(new StopInstancesRequest().withInstanceIds(instanceId));\n            System.out.println(\"Stopping instance: \" + instanceId);\n        } catch (AmazonServiceException e) {\n            System.err.println(\"Error stopping instance: \" + e.getMessage());\n        }\n    }\n\n    public void createInstance() {\n        String amiId = \"ami-0c55b159cbfafe1f0\"; // Replace with your AMI ID\n        String instanceType = \"t2.micro\";\n        String keyPairName = \"my-key-pair\"; // Replace with your key pair name\n        String securityGroupId = \"sg-0123456789abcdef0\"; // Replace with your security group ID\n\n        RunInstancesRequest request = new RunInstancesRequest()\n                .withImageId(amiId)\n                .withInstanceType(instanceType)\n                .withKeyName(keyPairName)\n                .withMinCount(1)\n                .withMaxCount(1)\n                .withSecurityGroupIds(securityGroupId);\n\n        RunInstancesResult result = ec2.runInstances(request);\n        String newInstanceId = result.getReservation().getInstances().get(0).getInstanceId();\n        System.out.println(\"Launched new instance: \" + newInstanceId);\n    }\n}\n```\n\n2. **Create the EC2ManagerApp Class:**\n   - This class provides a text-based interface for users to interact with the EC2 manager.\n\n```java\nimport java.util.Scanner;\n\npublic class EC2ManagerApp {\n\n    private EC2Manager manager;\n\n    public EC2ManagerApp() {\n        manager = new EC2Manager();\n    }\n\n    public static void main(String[] args) {\n        EC2ManagerApp app = new EC2ManagerApp();\n        app.run();\n    }\n\n    public void run() {\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            System.out.println(\"\\nEC2 Manager\");\n            System.out.println(\"1. List instances\");\n            System.out.println(\"2. Start instance\");\n            System.out.println(\"3. Stop instance\");\n            System.out.println(\"4. Create instance\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Choose an option: \");\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            switch (choice) {\n                case 1:\n                    manager.listInstances();\n                    break;\n                case 2:\n                    System.out.print(\"Enter instance ID to start: \");\n                    String startId = scanner.nextLine();\n                    manager.startInstance(startId);\n                    break;\n                case 3:\n                    System.out.print(\"Enter instance ID to stop: \");\n                    String stopId = scanner.nextLine();\n                    manager.stopInstance(stopId);\n                    break;\n                case 4:\n                    manager.createInstance();\n                    break;\n                case 5:\n                    System.out.println(\"Exiting...\");\n                    return;\n                default:\n                    System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n}\n```\n\n### Running the Application\n1. **Build the project using Maven:**\n\n   ```sh\n   mvn clean package\n   ```\n\n2. **Run the application:**\n\n   ```sh\n   java -cp target/aws-ec2-manager-1.0-SNAPSHOT.jar com.example.EC2ManagerApp\n   ```\n\n3. **Interact with the text-based menu to manage your EC2 instances.**\n\n### Notes\n- Replace placeholder values in the `createInstance` method with actual AMI ID, key pair name, and security group ID.\n- Ensure that your AWS credentials and region are correctly configured.\n- Handle exceptions and errors gracefully to provide useful feedback to the user.\n- This application provides basic functionality. Consider adding more features and enhancing error handling for production use."
    }
]