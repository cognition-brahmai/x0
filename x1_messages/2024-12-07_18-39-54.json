[
    {
        "role": "user",
        "content": "Develop a Node.js REST API using Express framework that allows users to manage their tasks. The API should support CRUD operations on tasks (create, read, update, delete), with each task having a title, description, due date, and completion status. Use MongoDB as the backend database."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you build a Node.js REST API for managing tasks using the Express framework and MongoDB. This API will allow users to create, read, update, and delete tasks, each with a title, description, due date, and completion status.\n\nFirst things first, make sure you have Node.js and MongoDB installed on your machine. You can download Node.js from nodejs.org and MongoDB from mongodb.com.\n\nLet's start by setting up a new Node.js project. Open your terminal or command prompt and create a new directory for your project:\n\n```bash\nmkdir task-manager-api\ncd task-manager-api\n```\n\nNow, initialize a new Node.js project:\n\n```bash\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\nNext, install the necessary dependencies:\n\n```bash\nnpm install express mongoose body-parser dotenv\n```\n\n- **Express**: A minimal and flexible Node.js web application framework.\n- **Mongoose**: An Object Data Modeling (ODM) library for MongoDB and Node.js.\n- **Body-parser**: Middleware for parsing request bodies (though in Express 4.16.0 and above, it's built-in).\n- **Dotenv**: For managing environment variables.\n\nNow, let's set up the basic structure of your project:\n\n```\ntask-manager-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 Task.js\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 tasks.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### Step 1: Configure Environment Variables\n\nCreate a `.env` file in the root directory to store your environment variables, such as the MongoDB connection string.\n\n```\nMONGO_URI=your_mongodb_connection_string\nPORT=5000\n```\n\nReplace `your_mongodb_connection_string` with your actual MongoDB connection string.\n\n### Step 2: Set Up MongoDB Schema and Model\n\nIn the `models` directory, create a `Task.js` file to define the schema and model for tasks.\n\n```javascript\n// models/Task.js\nconst mongoose = require('mongoose');\n\nconst TaskSchema = new mongoose.Schema({\n  title: {\n    type: String,\n    required: true\n  },\n  description: {\n    type: String,\n    required: true\n  },\n  dueDate: {\n    type: Date,\n    required: true\n  },\n  completed: {\n    type: Boolean,\n    default: false\n  }\n}, { timestamps: true });\n\nmodule.exports = mongoose.model('Task', TaskSchema);\n```\n\n### Step 3: Set Up Express Server\n\nCreate the main server file `app.js`.\n\n```javascript\n// app.js\nrequire('dotenv').config();\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst tasksRouter = require('./routes/tasks');\n\nconst app = express();\nconst PORT = process.env.PORT || 5000;\n\n// Middleware\napp.use(express.json());\n\n// Routes\napp.use('/api/tasks', tasksRouter);\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGO_URI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}, () => {\n  console.log('Connected to MongoDB');\n});\n\n// Start server\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n```\n\n### Step 4: Set Up Routes\n\nIn the `routes` directory, create a `tasks.js` file to handle task-related routes.\n\n```javascript\n// routes/tasks.js\nconst express = require('express');\nconst router = express.Router();\nconst Task = require('../models/Task');\n\n// Get all tasks\nrouter.get('/', async (req, res) => {\n  try {\n    const tasks = await Task.find();\n    res.json(tasks);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get one task by ID\nrouter.get('/:id', getTask, (req, res) => {\n  res.json(res.task);\n});\n\n// Create a new task\nrouter.post('/', async (req, res) => {\n  const task = new Task({\n    title: req.body.title,\n    description: req.body.description,\n    dueDate: req.body.dueDate,\n    completed: req.body.completed\n  });\n\n  try {\n    const newTask = await task.save();\n    res.status(201).json(newTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update a task\nrouter.patch('/:id', getTask, async (req, res) => {\n  if (req.body.title != null) {\n    res.task.title = req.body.title;\n  }\n  if (req.body.description != null) {\n    res.task.description = req.body.description;\n  }\n  if (req.body.dueDate != null) {\n    res.task.dueDate = req.body.dueDate;\n  }\n  if (req.body.completed != null) {\n    res.task.completed = req.body.completed;\n  }\n\n  try {\n    const updatedTask = await res.task.save();\n    res.json(updatedTask);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a task\nrouter.delete('/:id', getTask, async (req, res) => {\n  try {\n    await res.task.remove();\n    res.json({ message: 'Deleted Task' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware to get task by ID\nasync function getTask(req, res, next) {\n  let task;\n  try {\n    task = await Task.findById(req.params.id);\n    if (task == null) {\n      return res.status(404).json({ message: 'Cannot find task' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.task = task;\n  next();\n}\n\nmodule.exports = router;\n```\n\n### Step 5: Run the Server\n\nMake sure your MongoDB server is running, then start your Node.js server:\n\n```bash\nnode app.js\n```\n\nYour API should now be running on `http://localhost:5000/api/tasks`.\n\n### Summary of Endpoints\n\n- **GET /api/tasks**: Get all tasks.\n- **GET /api/tasks/:id**: Get a single task by ID.\n- **POST /api/tasks**: Create a new task.\n- **PATCH /api/tasks/:id**: Update a task.\n- **DELETE /api/tasks/:id**: Delete a task.\n\nEach task has the following fields:\n\n- `title`: String (required)\n- `description`: String (required)\n- `dueDate`: Date (required)\n- `completed`: Boolean (default: false)\n\nThis setup provides a basic CRUD API for managing tasks. You can expand upon this by adding more features, such as user authentication, validation, and error handling."
    }
]