[
    {
        "role": "user",
        "content": "Write a Python script that connects to a MariaDB database, creates a table for storing information about books (title, author, publication year), and provides functions for adding new books, updating existing records, and deleting books by ID.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that connects to a MariaDB database, creates a table for storing book information, and includes functions for adding, updating, and deleting books.\n\nFirst, make sure you have the `mariadb` package installed. You can install it using pip if you haven't already:\n\n```sh\npip install mariadb\n```\n\nHere's the Python script:\n\n```python\nimport mariadb\nimport sys\n\n# Database connection parameters\nconfig = {\n    'user': 'your_username',\n    'password': 'your_password',\n    'host': 'localhost',\n    'database': 'your_database'\n}\n\ndef connect_to_db():\n    try:\n        conn = mariadb.connect(**config)\n        return conn\n    except mariadb.Error as e:\n        print(f\"Error connecting to MariaDB Platform: {e}\")\n        sys.exit(1)\n\ndef create_books_table():\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    cursor.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS books (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            title VARCHAR(255) NOT NULL,\n            author VARCHAR(100) NOT NULL,\n            publication_year YEAR\n        )\n    \"\"\")\n    conn.commit()\n    cursor.close()\n    conn.close()\n\ndef add_book(title, author, publication_year):\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    try:\n        cursor.execute(\"\"\"\n            INSERT INTO books (title, author, publication_year)\n            VALUES (?, ?, ?)\n        \"\"\", (title, author, publication_year))\n        conn.commit()\n        print(\"Book added successfully.\")\n    except mariadb.Error as e:\n        print(f\"Error: {e}\")\n    cursor.close()\n    conn.close()\n\ndef update_book(book_id, title, author, publication_year):\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    try:\n        cursor.execute(\"\"\"\n            UPDATE books\n            SET title=?, author=?, publication_year=?\n            WHERE id=?\n        \"\"\", (title, author, publication_year, book_id))\n        conn.commit()\n        if cursor.rowcount == 0:\n            print(\"No book found with that ID.\")\n        else:\n            print(\"Book updated successfully.\")\n    except mariadb.Error as e:\n        print(f\"Error: {e}\")\n    cursor.close()\n    conn.close()\n\ndef delete_book(book_id):\n    conn = connect_to_db()\n    cursor = conn.cursor()\n    try:\n        cursor.execute(\"\"\"\n            DELETE FROM books\n            WHERE id=?\n        \"\"\", (book_id,))\n        conn.commit()\n        if cursor.rowcount == 0:\n            print(\"No book found with that ID.\")\n        else:\n            print(\"Book deleted successfully.\")\n    except mariadb.Error as e:\n        print(f\"Error: {e}\")\n    cursor.close()\n    conn.close()\n\nif __name__ == \"__main__\":\n    create_books_table()\n    # Example usage:\n    # add_book('The Great Gatsby', 'F. Scott Fitzgerald', 1925)\n    # update_book(1, 'New Title', 'New Author', 2000)\n    # delete_book(1)\n```\n\n### Explanation:\n\n1. **Connecting to the Database:**\n   - The `connect_to_db` function establishes a connection to the MariaDB database using the provided configuration.\n\n2. **Creating the Books Table:**\n   - The `create_books_table` function creates a table named `books` if it doesn't already exist. The table has columns for `id`, `title`, `author`, and `publication_year`.\n\n3. **Adding a New Book:**\n   - The `add_book` function inserts a new book into the `books` table with the provided title, author, and publication year.\n\n4. **Updating an Existing Book:**\n   - The `update_book` function updates the details of a book based on its `id`. It takes the book's ID and the new title, author, and publication year as parameters.\n\n5. **Deleting a Book:**\n   - The `delete_book` function deletes a book from the `books` table based on its `id`.\n\nMake sure to replace `'your_username'`, `'your_password'`, and `'your_database'` with your actual database credentials.\n\nYou can test the functions by uncommenting the example usage lines at the bottom of the script."
    }
]