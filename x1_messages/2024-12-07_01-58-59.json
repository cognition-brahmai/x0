[
    {
        "role": "user",
        "content": "Write a Python script that monitors a directory for new files and automatically compresses them into a .zip archive once they are detected."
    },
    {
        "role": "assistant",
        "content": "Sure! To create a Python script that monitors a directory for new files and automatically compresses them into a .zip archive, you can use the `watchdog` library for monitoring file system events and the built-in `zipfile` module for compression.\n\nFirst, you need to install the `watchdog` library if you haven't already. You can install it using pip:\n\n```bash\npip install watchdog\n```\n\nHere's a sample script that accomplishes this task:\n\n```python\nimport time\nimport zipfile\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\nimport os\n\nclass FileCompressHandler(FileSystemEventHandler):\n    def __init__(self, watch_dir, zip_path):\n        self.watch_dir = watch_dir\n        self.zip_path = zip_path\n\n    def on_created(self, event):\n        if not event.is_directory:\n            file_path = event.src_path\n            relative_path = os.path.relpath(file_path, self.watch_dir)\n            with zipfile.ZipFile(self.zip_path, 'a') as zipf:\n                zipf.write(file_path, arcname=relative_path)\n            print(f\"Compressed {file_path} into {self.zip_path}\")\n\ndef main():\n    watch_dir = input(\"Enter the directory to watch: \")\n    zip_path = input(\"Enter the path for the zip archive: \")\n\n    if not os.path.isdir(watch_dir):\n        print(\"Invalid directory path.\")\n        return\n\n    event_handler = FileCompressHandler(watch_dir, zip_path)\n    observer = Observer()\n    observer.schedule(event_handler, watch_dir, recursive=False)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **FileCompressHandler Class**:\n    - This class inherits from `FileSystemEventHandler` and overrides the `on_created` method to handle new file creation events.\n    - When a new file is created in the watched directory, it compresses the file into the specified .zip archive using `zipfile.ZipFile`.\n\n2. **main Function**:\n    - Prompts the user to enter the directory to watch and the path for the zip archive.\n    - Validates the directory path.\n    - Sets up an `Observer` to monitor the directory for new files using the `FileCompressHandler`.\n    - Starts the observer and keeps it running until interrupted (e.g., via Ctrl+C).\n\n### Usage:\n\n1. Run the script.\n2. Enter the directory path you want to monitor when prompted.\n3. Enter the path where you want the .zip archive to be created.\n4. The script will continue running and compress any new files added to the monitored directory into the specified .zip archive.\n\nThis script provides a basic implementation. Depending on your requirements, you might want to add more features, such as handling different file types differently, compressing files periodically, or adding error handling for file operations."
    }
]