[
    {
        "role": "user",
        "content": "Design a PHP web application that allows users to enter their favorite movies and stores them in a SQLite database. The application should have a form for entering movie titles and a page that displays all stored movies sorted alphabetically. Ensure proper validation and error handling for user inputs.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a PHP web application where users can enter their favorite movies, and these movies get stored in a SQLite database. Then, there should be a page that shows all these movies sorted alphabetically. Also, I need to make sure that the user inputs are validated and handled properly to avoid any errors.\n\nFirst, I need to set up the environment. Since it's PHP and SQLite, I can work on any server that has PHP installed with SQLite support. Most modern PHP installations include SQLite, so that should be fine.\n\nI'll start by planning the structure of the application. I think I'll need at least two pages: one for entering movie titles and another for displaying them. Maybe I'll call them \"add_movie.php\" and \"view_movies.php.\"\n\nLet me think about the database part. I need a SQLite database to store the movie titles. I'll create a simple table with an auto-incrementing ID and a field for the movie title.\n\nHere's a rough sketch of the database schema:\n\n```\n\nCREATE TABLE movies (\n\nid INTEGER PRIMARY KEY AUTOINCREMENT,\n\ntitle TEXT NOT NULL\n\n);\n\n```\n\nOkay, now for the \"add_movie.php\" page. This page should have a form where users can input the movie title. When the form is submitted, the title should be inserted into the database.\n\nI need to make sure that the title is not empty and maybe strip any unnecessary characters to prevent SQL injection or other vulnerabilities. Since SQLite in PHP can use prepared statements, that would be a safe way to handle user inputs.\n\nLet me outline the steps for \"add_movie.php\":\n\n1. Display a form with a text input for the movie title and a submit button.\n\n2. When the form is submitted, check if the title is not empty.\n\n3. If it's empty, display an error message.\n\n4. If it's not empty, prepare an SQL statement to insert the title into the database.\n\n5. Execute the statement.\n\n6. Redirect back to the form page or maybe to the \"view_movies.php\" page.\n\nFor the \"view_movies.php\" page, I need to retrieve all movie titles from the database and display them in alphabetical order.\n\nSteps for \"view_movies.php\":\n\n1. Connect to the SQLite database.\n\n2. Retrieve all movies from the \"movies\" table, ordered by title ascending.\n\n3. Loop through the results and display each movie title.\n\n4. Maybe add a link to go back to the \"add_movie.php\" page.\n\nI should also think about how to handle database connections. In PHP, I can use the SQLite3 class to handle database operations.\n\nLet me consider creating a separate PHP file to handle the database connection, say \"db.php\", and include it in both \"add_movie.php\" and \"view_movies.php.\" This way, I don't have to repeat the connection code.\n\nIn \"db.php\", I'll have something like:\n\n```\n\n<?php\n\n$database = new SQLite3('movies.db');\n\nif (!$database) {\n\ndie(\"Could not connect to the database: \" . sqlite_last_error());\n\n}\n\n?>\n\n```\n\nThen, in \"add_movie.php\" and \"view_movies.php\", I can include \"db.php\" to get the database connection.\n\nNow, let's think about the form in \"add_movie.php.\" I need to handle both GET and POST requests. When the page is first loaded, it should display the form. When the form is submitted, it should handle the POST request.\n\nIn PHP, I can check if the form is submitted using the $_SERVER['REQUEST_METHOD'] == 'POST' condition.\n\nAlso, for better user experience, I can display a success message after a movie is added.\n\nLet me sketch the \"add_movie.php\" code:\n\n```\n\n<?php\n\ninclude 'db.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n\nif (empty($_POST['title'])) {\n\n$error = \"Title is required.\";\n\n} else {\n\n$title = $_POST['title'];\n\n$stmt = $database->prepare('INSERT INTO movies (title) VALUES (?)');\n\n$stmt->bindValue(1, $title, SQLITE3_TEXT);\n\n$result = $stmt->execute();\n\nif ($result) {\n\nheader('Location: view_movies.php');\n\nexit;\n\n} else {\n\n$error = \"Error adding movie.\";\n\n}\n\n}\n\n}\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Add Movie</title>\n\n</head>\n\n<body>\n\n<h1>Add Your Favorite Movie</h1>\n\n<?php if (isset($error)) { echo \"<p>$error</p>\"; } ?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n\n<label for=\"title\">Movie Title:</label>\n\n<input type=\"text\" id=\"title\" name=\"title\" required>\n\n<button type=\"submit\">Add Movie</button>\n\n</form>\n\n<a href=\"view_movies.php\">View Movies</a>\n\n</body>\n\n</html>\n\n```\n\nLooks good. Now, for \"view_movies.php\":\n\n```\n\n<?php\n\ninclude 'db.php';\n\n$stmt = $database->prepare('SELECT * FROM movies ORDER BY title ASC');\n\n$result = $stmt->execute();\n\n$movies = $result->fetchAll(SQLITE3_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>View Movies</title>\n\n</head>\n\n<body>\n\n<h1>Favorite Movies</h1>\n\n<ul>\n\n<?php foreach ($movies as $movie): ?>\n\n<li><?php echo htmlspecialchars($movie['title']); ?></li>\n\n<?php endforeach; ?>\n\n</ul>\n\n<a href=\"add_movie.php\">Add a Movie</a>\n\n</body>\n\n</html>\n\n```\n\nSimple enough. I should also think about initializing the database. I need to make sure that the \"movies\" table exists before trying to insert or select data.\n\nMaybe I can create a \"init_db.php\" file that checks if the table exists and creates it if not.\n\nHere's what \"init_db.php\" could look like:\n\n```\n\n<?php\n\ninclude 'db.php';\n\n$table_exists = $database->querySingle(\"SELECT name FROM sqlite_master WHERE type='table' AND name='movies'\");\n\nif (!$table_exists) {\n\n$database->exec('CREATE TABLE movies (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL)');\n\n}\n\n?>\n\n```\n\nThen, in \"add_movie.php\" and \"view_movies.php\", I can include \"init_db.php\" to ensure the table is there.\n\nLet me update \"add_movie.php\" and \"view_movies.php\" to include \"init_db.php\" instead of \"db.php\", and move the database connection code to \"init_db.php.\"\n\nUpdated \"init_db.php\":\n\n```\n\n<?php\n\n$database = new SQLite3('movies.db');\n\nif (!$database) {\n\ndie(\"Could not connect to the database: \" . sqlite_last_error());\n\n}\n\n$table_exists = $database->querySingle(\"SELECT name FROM sqlite_master WHERE type='table' AND name='movies'\");\n\nif (!$table_exists) {\n\n$database->exec('CREATE TABLE movies (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL)');\n\n}\n\n?>\n\n```\n\nUpdated \"add_movie.php\":\n\n```\n\n<?php\n\ninclude 'init_db.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n\nif (empty($_POST['title'])) {\n\n$error = \"Title is required.\";\n\n} else {\n\n$title = $_POST['title'];\n\n$stmt = $database->prepare('INSERT INTO movies (title) VALUES (?)');\n\n$stmt->bindValue(1, $title, SQLITE3_TEXT);\n\n$result = $stmt->execute();\n\nif ($result) {\n\nheader('Location: view_movies.php');\n\nexit;\n\n} else {\n\n$error = \"Error adding movie.\";\n\n}\n\n}\n\n}\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Add Movie</title>\n\n</head>\n\n<body>\n\n<h1>Add Your Favorite Movie</h1>\n\n<?php if (isset($error)) { echo \"<p>$error</p>\"; } ?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n\n<label for=\"title\">Movie Title:</label>\n\n<input type=\"text\" id=\"title\" name=\"title\" required>\n\n<button type=\"submit\">Add Movie</button>\n\n</form>\n\n<a href=\"view_movies.php\">View Movies</a>\n\n</body>\n\n</html>\n\n```\n\nUpdated \"view_movies.php\":\n\n```\n\n<?php\n\ninclude 'init_db.php';\n\n$stmt = $database->prepare('SELECT * FROM movies ORDER BY title ASC');\n\n$result = $stmt->execute();\n\n$movies = $result->fetchAll(SQLITE3_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>View Movies</title>\n\n</head>\n\n<body>\n\n<h1>Favorite Movies</h1>\n\n<ul>\n\n<?php foreach ($movies as $movie): ?>\n\n<li><?php echo htmlspecialchars($movie['title']); ?></li>\n\n<?php endforeach; ?>\n\n</ul>\n\n<a href=\"add_movie.php\">Add a Movie</a>\n\n</body>\n\n</html>\n\n```\n\nI think this covers the basic requirements. Users can enter movie titles, which are stored in a SQLite database, and they can view all movies sorted alphabetically.\n\nI should also consider adding some styling to make the pages look better, but for now, this plain HTML should suffice.\n\nAdditionally, to prevent any SQL injection, I'm using prepared statements with bound parameters, which is good practice.\n\nI might also want to handle cases where the database file doesn't exist or there are issues with writing to it. Maybe add some error handling in \"init_db.php.\"\n\nLet me add some basic error handling when creating the table.\n\nUpdated \"init_db.php\":\n\n```\n\n<?php\n\n$database = new SQLite3('movies.db');\n\nif (!$database) {\n\ndie(\"Could not connect to the database: \" . sqlite_last_error());\n\n}\n\n$table_exists = $database->querySingle(\"SELECT name FROM sqlite_master WHERE type='table' AND name='movies'\");\n\nif (!$table_exists) {\n\ntry {\n\n$database->exec('CREATE TABLE movies (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL)');\n\n} catch (Exception $e) {\n\ndie(\"Error creating table: \" . $e->getMessage());\n\n}\n\n}\n\n?>\n\n```\n\nThat should catch any errors that occur during table creation.\n\nI should also think about sanitizing the movie titles to prevent any XSS attacks when displaying them in \"view_movies.php.\" I'm already using htmlspecialchars, which is good, as it converts special characters to their HTML entities.\n\nLet me double-check the form in \"add_movie.php.\" I have a required attribute on the text input, which is good for client-side validation. But I'm also checking on the server-side if the title is empty, which is necessary.\n\nMaybe I can also trim any leading or trailing spaces from the title to keep the data clean.\n\nUpdated \"add_movie.php\":\n\n```\n\n<?php\n\ninclude 'init_db.php';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n\n$title = trim($_POST['title']);\n\nif (empty($title)) {\n\n$error = \"Title is required.\";\n\n} else {\n\n$stmt = $database->prepare('INSERT INTO movies (title) VALUES (?)');\n\n$stmt->bindValue(1, $title, SQLITE3_TEXT);\n\n$result = $stmt->execute();\n\nif ($result) {\n\nheader('Location: view_movies.php');\n\nexit;\n\n} else {\n\n$error = \"Error adding movie.\";\n\n}\n\n}\n\n}\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Add Movie</title>\n\n</head>\n\n<body>\n\n<h1>Add Your Favorite Movie</h1>\n\n<?php if (isset($error)) { echo \"<p>$error</p>\"; } ?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n\n<label for=\"title\">Movie Title:</label>\n\n<input type=\"text\" id=\"title\" name=\"title\" required>\n\n<button type=\"submit\">Add Movie</button>\n\n</form>\n\n<a href=\"view_movies.php\">View Movies</a>\n\n</body>\n\n</html>\n\n```\n\nBetter.\n\nI might also want to limit the title to a certain length, say 255 characters, to prevent very long titles from causing issues.\n\nI can add a maxlength attribute to the input field and also truncate the title in PHP.\n\nUpdated \"add_movie.php\":\n\n```\n\n<?php\n\ninclude 'init_db.php';\n\n$max_title_length = 255;\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n\n$title = trim($_POST['title']);\n\nif (empty($title)) {\n\n$error = \"Title is required.\";\n\n} else {\n\n// Truncate title to max length\n\n$title = substr($title, 0, $max_title_length);\n\n$stmt = $database->prepare('INSERT INTO movies (title) VALUES (?)');\n\n$stmt->bindValue(1, $title, SQLITE3_TEXT);\n\n$result = $stmt->execute();\n\nif ($result) {\n\nheader('Location: view_movies.php');\n\nexit;\n\n} else {\n\n$error = \"Error adding movie.\";\n\n}\n\n}\n\n}\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>Add Movie</title>\n\n</head>\n\n<body>\n\n<h1>Add Your Favorite Movie</h1>\n\n<?php if (isset($error)) { echo \"<p>$error</p>\"; } ?>\n\n<form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n\n<label for=\"title\">Movie Title:</label>\n\n<input type=\"text\" id=\"title\" name=\"title\" required maxlength=\"<?php echo $max_title_length; ?>\">\n\n<button type=\"submit\">Add Movie</button>\n\n</form>\n\n<a href=\"view_movies.php\">View Movies</a>\n\n</body>\n\n</html>\n\n```\n\nAnd in \"view_movies.php\", I can make sure that no movie title exceeds the maximum length when displaying them.\n\nBut since I'm already truncating in \"add_movie.php\", it should be fine.\n\nI should also consider adding a message on \"view_movies.php\" if there are no movies yet.\n\nUpdated \"view_movies.php\":\n\n```\n\n<?php\n\ninclude 'init_db.php';\n\n$stmt = $database->prepare('SELECT * FROM movies ORDER BY title ASC');\n\n$result = $stmt->execute();\n\n$movies = $result->fetchAll(SQLITE3_ASSOC);\n\n?>\n\n<!DOCTYPE html>\n\n<html>\n\n<head>\n\n<title>View Movies</title>\n\n</head>\n\n<body>\n\n<h1>Favorite Movies</h1>\n\n<?php if (empty($movies)): ?>\n\n<p>No movies added yet.</p>\n\n<?php else: ?>\n\n<ul>\n\n<?php foreach ($movies as $movie): ?>\n\n<li><?php echo htmlspecialchars($movie['title']); ?></li>\n\n<?php endforeach; ?>\n\n</ul>\n\n<?php endif; ?>\n\n<a href=\"add_movie.php\">Add a Movie</a>\n\n</body>\n\n</html>\n\n```\n\nGood.\n\nMaybe I can also add a header or some styling to make it look nicer, but for now, this should work.\n\nI should test this application to make sure it works as expected.\n\nFirst, create the \"init_db.php\" file to set up the database and table.\n\nThen, create \"add_movie.php\" and \"view_movies.php\" as per the above code.\n\nPlace all three files in a web-accessible directory, like the htdocs folder if using XAMPP or similar local server software.\n\nStart the server and navigate to \"add_movie.php\" in a web browser.\n\nTry adding a movie title and see if it gets stored in the database and displayed on \"view_movies.php.\"\n\nAlso, test edge cases, like entering an empty title or very long titles, to ensure proper validation and handling.\n\nOverall, this seems to cover the requirements outlined in the task.\n\n## Final Solution\nTo create a PHP web application that allows users to enter their favorite movies and stores them in a SQLite database, with a page to display all stored movies sorted alphabetically, follow these steps:\n\n### Files Structure\n1. **init_db.php** - Initializes the database and creates the table if it doesn't exist.\n2. **add_movie.php** - Form to add a new movie.\n3. **view_movies.php** - Displays all movies sorted alphabetically.\n\n### Step-by-Step Implementation\n\n#### 1. Create `init_db.php`\n\nThis file handles the database connection and initializes the table.\n\n```php\n<?php\n$database = new SQLite3('movies.db');\nif (!$database) {\n    die(\"Could not connect to the database: \" . sqlite_last_error());\n}\n\n$table_exists = $database->querySingle(\"SELECT name FROM sqlite_master WHERE type='table' AND name='movies'\");\nif (!$table_exists) {\n    try {\n        $database->exec('CREATE TABLE movies (id INTEGER PRIMARY KEY AUTOINCREMENT, title TEXT NOT NULL)');\n    } catch (Exception $e) {\n        die(\"Error creating table: \" . $e->getMessage());\n    }\n}\n?>\n```\n\n#### 2. Create `add_movie.php`\n\nThis file contains a form to add a new movie and handles the form submission.\n\n```php\n<?php\ninclude 'init_db.php';\n\n$max_title_length = 255;\n$error = '';\n\nif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n    $title = trim($_POST['title']);\n    if (empty($title)) {\n        $error = \"Title is required.\";\n    } else {\n        // Truncate title to max length\n        $title = substr($title, 0, $max_title_length);\n        $stmt = $database->prepare('INSERT INTO movies (title) VALUES (?)');\n        $stmt->bindValue(1, $title, SQLITE3_TEXT);\n        $result = $stmt->execute();\n        if ($result) {\n            header('Location: view_movies.php');\n            exit;\n        } else {\n            $error = \"Error adding movie.\";\n        }\n    }\n}\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Add Movie</title>\n</head>\n<body>\n    <h1>Add Your Favorite Movie</h1>\n    <?php if (!empty($error)): ?>\n        <p><?php echo htmlspecialchars($error); ?></p>\n    <?php endif; ?>\n    <form method=\"post\" action=\"<?php echo htmlspecialchars($_SERVER[\"PHP_SELF\"]); ?>\">\n        <label for=\"title\">Movie Title:</label>\n        <input type=\"text\" id=\"title\" name=\"title\" required maxlength=\"<?php echo $max_title_length; ?>\">\n        <button type=\"submit\">Add Movie</button>\n    </form>\n    <a href=\"view_movies.php\">View Movies</a>\n</body>\n</html>\n```\n\n#### 3. Create `view_movies.php`\n\nThis file retrieves and displays all movies from the database, sorted alphabetically.\n\n```php\n<?php\ninclude 'init_db.php';\n\n$stmt = $database->prepare('SELECT * FROM movies ORDER BY title ASC');\n$result = $stmt->execute();\n$movies = $result->fetchAll(SQLITE3_ASSOC);\n?>\n\n<!DOCTYPE html>\n<html>\n<head>\n    <title>View Movies</title>\n</head>\n<body>\n    <h1>Favorite Movies</h1>\n    <?php if (empty($movies)): ?>\n        <p>No movies added yet.</p>\n    <?php else: ?>\n        <ul>\n            <?php foreach ($movies as $movie): ?>\n                <li><?php echo htmlspecialchars($movie['title']); ?></li>\n            <?php endforeach; ?>\n        </ul>\n    <?php endif; ?>\n    <a href=\"add_movie.php\">Add a Movie</a>\n</body>\n</html>\n```\n\n### Testing the Application\n\n1. **Set up the environment**: Ensure you have a web server with PHP and SQLite support.\n2. **Place files**: Put `init_db.php`, `add_movie.php`, and `view_movies.php` in your web server's document root.\n3. **Access through browser**: Open `add_movie.php` in your browser.\n4. **Add movies**: Enter movie titles and ensure they are stored and displayed correctly in `view_movies.php`.\n\nThis setup ensures that user inputs are validated, errors are handled properly, and data is stored securely using prepared statements."
    }
]