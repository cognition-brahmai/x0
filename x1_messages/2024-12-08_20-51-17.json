[
    {
        "role": "user",
        "content": "Create a Java program that simulates a basic banking system. The program should allow users to create accounts, deposit money, withdraw money, and check their account balance. Ensure proper error handling for invalid transactions.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple banking system in Java. It should let users make accounts, put money in, take money out, and check how much they have. And I need to make sure it handles mistakes properly, like trying to take out more money than is there.\n\nFirst, I need to think about what exactly is needed. So, a bank account has a balance, right? And it should be able to do a few things: deposit, withdraw, and check balance. Also, users need to be able to create accounts, so maybe there should be some way to manage multiple accounts.\n\nMaybe I can start by thinking about what an account is. Each account should have an ID, maybe a name associated with it, and the balance. And it should be able to perform those operations: deposit, withdraw, and check balance.\n\nI should probably make a class for the account. Let's call it BankAccount. Inside this class, I'll have private variables for the account ID, the owner's name, and the balance.\n\nNow, for the operations:\n\n- Deposit: This should add money to the balance. I need to make sure that the amount deposited is positive.\n\n- Withdraw: This should subtract money from the balance, but only if there's enough money in the account. If someone tries to withdraw more than the balance, it should give an error.\n\n- Check balance: This should just return the current balance.\n\nAlso, when creating an account, I need to set the account ID and the owner's name. Maybe the balance starts at zero by default.\n\nI should think about how to handle errors. In Java, I can use exceptions for that. For example, if someone tries to withdraw more than the balance, I can throw an InsufficientFundsException or something like that.\n\nWait, but I need to define that exception because I don't think Java has a built-in exception for that. Or I can just use the built-in IllegalArgumentException.\n\nAlso, for the account ID, maybe it should be unique for each account. So, I need some way to manage the account IDs and make sure they don't repeat.\n\nMaybe I can have a separate class to manage all the accounts, like a Bank class. This class can have a list of BankAccount objects, and it can handle creating new accounts with unique IDs.\n\nLet me sketch a rough outline:\n\n- BankAccount class:\n\n- private int id;\n\n- private String owner;\n\n- private double balance;\n\n- constructors, getters, setters\n\n- deposit(amount: double): adds amount to balance, checks if amount > 0\n\n- withdraw(amount: double): subtracts amount from balance, checks if balance >= amount\n\n- getBalance(): returns balance\n\n- Bank class:\n\n- private List<BankAccount> accounts;\n\n- nextId: static int to generate unique IDs\n\n- createAccount(owner: String): creates a new BankAccount with the next available ID and adds it to the list\n\n- findAccount(id: int): finds the account with the given ID\n\n- deposit(id: int, amount: double): finds the account and calls deposit\n\n- withdraw(id: int, amount: double): finds the account and calls withdraw\n\n- getBalance(id: int): finds the account and returns the balance\n\nNow, for the main program, I need to have some kind of user interface where users can input what they want to do.\n\nSince it's a console application, I'll use Scanner to read inputs from the user.\n\nI can have a loop that keeps asking the user what they want to do: create account, deposit, withdraw, check balance, or exit.\n\nFor creating an account, it will ask for the owner's name, then create the account and assign an ID.\n\nFor deposit, withdraw, or check balance, it will ask for the account ID and perform the operation.\n\nI need to make sure that if someone enters an invalid account ID, it handles that gracefully, maybe by checking if the account exists before performing the operation.\n\nAlso, for deposit and withdraw, I need to make sure that the amount is positive.\n\nI should think about how to structure the code. Maybe have the BankAccount class in one file, the Bank class in another, and the main program in another.\n\nLet me start by writing the BankAccount class.\n\n## Final Solution\nTo create a basic banking system in Java, we need to simulate account creation, deposits, withdrawals, and balance checks with proper error handling. This solution consists of three main parts: the `BankAccount` class, the `Bank` class, and the `Main` class for user interaction.\n\n### Approach\n\n1. **BankAccount Class**:\n   - Represents a bank account with ID, owner's name, and balance.\n   - Methods to deposit, withdraw, and check balance.\n   - Ensures deposits are positive amounts and withdrawals do not exceed the balance.\n\n2. **Bank Class**:\n   - Manages multiple accounts using a list.\n   - Provides methods to create accounts, find accounts by ID, and perform transactions.\n\n3. **Main Class**:\n   - Provides a simple text-based menu for users to interact with the banking system.\n   - Allows creating accounts, depositing, withdrawing, checking balance, and exiting the program.\n\n### Solution Code\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Scanner;\n\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\nclass BankAccount {\n    private int id;\n    private String owner;\n    private double balance;\n\n    public BankAccount(int id, String owner) {\n        this.id = id;\n        this.owner = owner;\n        this.balance = 0.0;\n    }\n\n    public int getId() {\n        return id;\n    }\n\n    public String getOwner() {\n        return owner;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void deposit(double amount) throws IllegalArgumentException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Amount must be positive.\");\n        }\n        balance += amount;\n    }\n\n    public void withdraw(double amount) throws IllegalArgumentException, InsufficientFundsException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Amount must be positive.\");\n        }\n        if (balance < amount) {\n            throw new InsufficientFundsException(\"Insufficient funds to complete the withdrawal.\");\n        }\n        balance -= amount;\n    }\n}\n\nclass Bank {\n    private List<BankAccount> accounts;\n    private static int nextId = 1;\n\n    public Bank() {\n        accounts = new ArrayList<>();\n    }\n\n    public BankAccount createAccount(String owner) {\n        BankAccount newAccount = new BankAccount(nextId, owner);\n        accounts.add(newAccount);\n        nextId++;\n        return newAccount;\n    }\n\n    public BankAccount findAccount(int id) {\n        for (BankAccount account : accounts) {\n            if (account.getId() == id) {\n                return account;\n            }\n        }\n        return null;\n    }\n\n    public void deposit(int id, double amount) throws IllegalArgumentException {\n        BankAccount account = findAccount(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        account.deposit(amount);\n    }\n\n    public void withdraw(int id, double amount) throws IllegalArgumentException, InsufficientFundsException {\n        BankAccount account = findAccount(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        account.withdraw(amount);\n    }\n\n    public double getBalance(int id) throws IllegalArgumentException {\n        BankAccount account = findAccount(id);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        return account.getBalance();\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        Scanner scanner = new Scanner(System.in);\n\n        while (true) {\n            System.out.println(\"\\nBanking System Menu:\");\n            System.out.println(\"1. Create Account\");\n            System.out.println(\"2. Deposit\");\n            System.out.println(\"3. Withdraw\");\n            System.out.println(\"4. Check Balance\");\n            System.out.println(\"5. Exit\");\n            System.out.print(\"Choose an option: \");\n            int choice = scanner.nextInt();\n            scanner.nextLine(); // Consume newline\n\n            try {\n                switch (choice) {\n                    case 1:\n                        System.out.print(\"Enter account owner's name: \");\n                        String owner = scanner.nextLine();\n                        BankAccount newAccount = bank.createAccount(owner);\n                        System.out.println(\"Account created with ID: \" + newAccount.getId());\n                        break;\n                    case 2:\n                        System.out.print(\"Enter account ID: \");\n                        int id = scanner.nextInt();\n                        System.out.print(\"Enter deposit amount: \");\n                        double amount = scanner.nextDouble();\n                        bank.deposit(id, amount);\n                        System.out.println(\"Deposit successful.\");\n                        break;\n                    case 3:\n                        System.out.print(\"Enter account ID: \");\n                        id = scanner.nextInt();\n                        System.out.print(\"Enter withdrawal amount: \");\n                        amount = scanner.nextDouble();\n                        bank.withdraw(id, amount);\n                        System.out.println(\"Withdrawal successful.\");\n                        break;\n                    case 4:\n                        System.out.print(\"Enter account ID: \");\n                        id = scanner.nextInt();\n                        double balance = bank.getBalance(id);\n                        System.out.println(\"Account balance: \" + balance);\n                        break;\n                    case 5:\n                        System.out.println(\"Exiting...\");\n                        scanner.close();\n                        return;\n                    default:\n                        System.out.println(\"Invalid option. Please choose again.\");\n                }\n            } catch (Exception e) {\n                System.out.println(\"Error: \" + e.getMessage());\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **BankAccount Class**:\n   - Manages individual account details and transactions.\n   - Ensures transaction validity through exceptions.\n\n2. **Bank Class**:\n   - Manages multiple accounts and provides methods to interact with them.\n   - Generates unique account IDs.\n\n3. **Main Class**:\n   - Provides a menu-driven interface for users.\n   - Handles user inputs and interactions with the banking system.\n   - Manages exceptions to provide meaningful error messages.\n\nThis design ensures a simple and effective simulation of a basic banking system with essential functionalities and robust error handling."
    }
]