[
    {
        "role": "user",
        "content": "Create a Python script that implements a singly linked list data structure with methods for inserting elements at the beginning, end, and specific positions, deleting elements by value, and displaying the contents of the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements a singly linked list with the specified methods:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def insert_at_position(self, position, data):\n        if position < 0:\n            print(\"Position must be non-negative.\")\n            return\n        if position == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            print(\"Value not found in the list.\")\n            return\n        current.next = current.next.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.insert_at_beginning(3)\n    sll.insert_at_end(5)\n    sll.insert_at_position(1, 4)\n    sll.display()  # Output: 3 -> 4 -> 5 -> None\n    sll.delete_by_value(4)\n    sll.display()  # Output: 3 -> 5 -> None\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents a single node in the linked list with `data` and `next` pointers.\n\n2. **SinglyLinkedList Class**:\n   - Initializes with a `head` pointer set to `None`.\n   - **insert_at_beginning(data)**: Inserts a new node with the given data at the beginning of the list.\n   - **insert_at_end(data)**: Inserts a new node with the given data at the end of the list.\n   - **insert_at_position(position, data)**: Inserts a new node with the given data at the specified position (0-based indexing). Handles edge cases like negative positions and positions out of range.\n   - **delete_by_value(value)**: Deletes the first node containing the given value. Handles cases where the list is empty or the value is not found.\n   - **display()**: Prints the contents of the list from head to tail.\n\n3. **Example Usage**:\n   - Demonstrates inserting elements at different positions and deleting by value, followed by displaying the list to verify operations."
    }
]