[
    {
        "role": "user",
        "content": "Write a Python program that implements the Dijkstra's shortest path algorithm for a given graph represented as an adjacency matrix. The program should take the source node as input and output the shortest distance from the source to all other nodes in the graph.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Dijkstra's algorithm is a popular method for finding the shortest paths between nodes in a graph, which works particularly well for graphs with non-negative edge weights. Below is a Python implementation of Dijkstra's algorithm using an adjacency matrix representation of the graph.\n\n```python\nimport sys\n\ndef dijkstra(adj_matrix, source):\n    num_nodes = len(adj_matrix)\n    visited = [False] * num_nodes\n    distances = [sys.maxsize] * num_nodes\n    distances[source] = 0\n\n    for _ in range(num_nodes):\n        # Select the node with the smallest distance value from the set of nodes not yet visited.\n        min_distance = sys.maxsize\n        min_index = -1\n        for v in range(num_nodes):\n            if not visited[v] and distances[v] < min_distance:\n                min_distance = distances[v]\n                min_index = v\n\n        u = min_index\n        visited[u] = True\n\n        # Update distances of adjacent vertices of the currently visited node.\n        for v in range(num_nodes):\n            if adj_matrix[u][v] > 0 and not visited[v]:\n                new_distance = distances[u] + adj_matrix[u][v]\n                if new_distance < distances[v]:\n                    distances[v] = new_distance\n\n    return distances\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example adjacency matrix for a graph with 5 nodes.\n    adj_matrix = [\n        [0, 10, 0, 5, 0],\n        [10, 0, 1, 2, 0],\n        [0, 1, 0, 0, 4],\n        [5, 2, 0, 0, 3],\n        [0, 0, 4, 3, 0]\n    ]\n    source_node = 0\n    shortest_distances = dijkstra(adj_matrix, source_node)\n    print(\"Shortest distances from node\", source_node, \":\", shortest_distances)\n```\n\n### Explanation:\n\n1. **Initialization**:\n   - We initialize the number of nodes (`num_nodes`) based on the size of the adjacency matrix.\n   - Create a list `visited` to track which nodes have been processed.\n   - Initialize a list `distances` with maximum possible distances for all nodes except the source node, which is set to 0.\n\n2. **Main Loop**:\n   - For each node in the graph, select the unvisited node with the smallest known distance from the source.\n   - Mark this node as visited.\n   - Update the distances of its adjacent unvisited nodes. If a shorter path is found via the current node, update the distance.\n\n3. **Example Usage**:\n   - An example adjacency matrix is provided for a graph with 5 nodes.\n   - The source node is set to 0.\n   - The `dijkstra` function is called, and the resulting shortest distances from the source node are printed.\n\nThis implementation ensures that we find the shortest paths from the source node to all other nodes in the graph efficiently, provided there are no negative edge weights."
    }
]