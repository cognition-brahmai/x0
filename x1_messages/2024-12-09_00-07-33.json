[
    {
        "role": "user",
        "content": "Create a python program that implements the insertion sort algorithm for sorting a list of numbers in ascending order. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python program that implements the insertion sort algorithm to sort a list of numbers in ascending order:\n\n```python\ndef insertion_sort(arr):\n    # Traverse through 1 to len(arr)\n    for i in range(1, len(arr)):\n        key = arr[i]\n        # Move elements of arr[0..i-1], that are greater than key,\n        # to one position ahead of their current position\n        j = i - 1\n        while j >= 0 and key < arr[j]:\n            arr[j + 1] = arr[j]\n            j -= 1\n        arr[j + 1] = key\n\n# Example usage:\nif __name__ == \"__main__\":\n    sample_list = [12, 11, 13, 5, 6]\n    print(\"Original list:\", sample_list)\n    insertion_sort(sample_list)\n    print(\"Sorted list:\", sample_list)\n```\n\n### Explanation:\n1. **Function Definition**: The `insertion_sort` function takes a list `arr` as input.\n2. **Outer Loop**: It iterates from the second element (index 1) to the end of the list. This loop selects each element in turn to insert it into its correct position in the already sorted part of the list.\n3. **Inner Loop**: For each selected element (`key`), it compares it with the elements in the sorted part of the list (from index 0 to `i-1`). It shifts those elements one position to the right if they are greater than `key`.\n4. **Insertion**: Once the correct position is found, `key` is inserted into that position.\n5. **Example Usage**: The `if __name__ == \"__main__\":` block demonstrates how to use the `insertion_sort` function with a sample list.\n\nThis implementation sorts the list in place, meaning it doesn't require additional space for a new list; it modifies the original list directly."
    }
]