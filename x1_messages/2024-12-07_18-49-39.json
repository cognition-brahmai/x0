[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for insertion, deletion, searching, and printing the list elements.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'll help you with that. A singly linked list is a fundamental data structure where each node contains some data and a reference (or link) to the next node in the sequence. We'll create a Python class to represent this data structure and implement methods for insertion, deletion, searching, and printing the list elements.\n\n### Explanation\n\n1. **Node Class**:\n   - Each node will have two attributes: `data` to store the value and `next` to point to the next node.\n\n2. **SinglyLinkedList Class**:\n   - This class will manage the linked list and contain methods to:\n     - Insert a new node (at the beginning, end, or at a specific position).\n     - Delete a node by value or position.\n     - Search for a node by value.\n     - Print the list elements.\n\n3. **Insertion**:\n   - **Insert at Beginning**: Add a new node at the start of the list.\n   - **Insert at End**: Add a new node at the end of the list.\n   - **Insert at Position**: Add a new node at a specified position.\n\n4. **Deletion**:\n   - **Delete by Value**: Remove the first occurrence of a node with the given value.\n   - **Delete by Position**: Remove the node at the specified position.\n\n5. **Searching**:\n   - **Search by Value**: Check if a node with the given value exists in the list.\n\n6. **Printing**:\n   - Print all elements of the list from the head to the tail.\n\n### Solution Code\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def insert_at_position(self, position, data):\n        if position < 0:\n            print(\"Position must be a non-negative integer.\")\n            return\n        if position == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if self.is_empty():\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if current.next:\n            current.next = current.next.next\n        else:\n            print(\"Value not found in the list.\")\n\n    def delete_by_position(self, position):\n        if position < 0:\n            print(\"Position must be a non-negative integer.\")\n            return\n        if self.is_empty():\n            print(\"List is empty.\")\n            return\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current or not current.next:\n            print(\"Position out of range.\")\n            return\n        current.next = current.next.next\n\n    def search(self, value):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == value:\n                print(f\"Value {value} found at position {index}.\")\n                return\n            current = current.next\n            index += 1\n        print(\"Value not found in the list.\")\n\n    def print_list(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.insert_at_end(10)\n    sll.insert_at_end(20)\n    sll.insert_at_beginning(5)\n    sll.insert_at_position(2, 15)\n    sll.print_list()  # Output: 5 -> 10 -> 15 -> 20\n    sll.delete_by_value(10)\n    sll.print_list()  # Output: 5 -> 15 -> 20\n    sll.delete_by_position(1)\n    sll.print_list()  # Output: 5 -> 20\n    sll.search(15)    # Output: Value 15 found at position 1\n    sll.search(30)    # Output: Value not found in the list\n```\n\n### Explanation of the Code\n\n1. **Node Class**:\n   - Initializes with `data` and `next` set to `None`.\n\n2. **SinglyLinkedList Class**:\n   - Initializes with `head` set to `None`.\n   - `is_empty()`: Checks if the list is empty.\n   - `insert_at_beginning(data)`: Inserts a new node at the beginning.\n   - `insert_at_end(data)`: Inserts a new node at the end.\n   - `insert_at_position(position, data)`: Inserts a new node at the specified position.\n   - `delete_by_value(value)`: Deletes the first node with the specified value.\n   - `delete_by_position(position)`: Deletes the node at the specified position.\n   - `search(value)`: Searches for a node with the specified value and prints its position.\n   - `print_list()`: Prints all elements of the list.\n\n3. **Example Usage**:\n   - Demonstrates inserting, deleting, searching, and printing operations.\n\nThis implementation covers all the basic operations you'd need for a singly linked list in Python. If you have any questions or need further clarification, feel free to ask!"
    }
]