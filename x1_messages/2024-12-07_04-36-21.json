[
    {
        "role": "user",
        "content": "Write a Golang program that converts temperatures between Celsius, Fahrenheit, and Kelvin.\n   - The input temperature and unit should be provided as command-line arguments.\n   - The output should display the converted temperature in all three units."
    },
    {
        "role": "assistant",
        "content": "Certainly! I'll help you write a Go program that converts temperatures between Celsius, Fahrenheit, and Kelvin based on command-line inputs. We'll need to handle different units and ensure the program is user-friendly.\n\nFirst, let's outline what the program needs to do:\n\n1. Accept two command-line arguments: the temperature value and the unit it's in (C for Celsius, F for Fahrenheit, K for Kelvin).\n2. Convert this temperature to all three units: Celsius, Fahrenheit, and Kelvin.\n3. Display the converted temperatures.\n\nWe need to handle the conversions correctly:\n\n- Celsius to Fahrenheit: `(C * 9/5) + 32`\n- Celsius to Kelvin: `C + 273.15`\n- Fahrenheit to Celsius: `(F - 32) * 5/9`\n- Fahrenheit to Kelvin: `(F - 32) * 5/9 + 273.15`\n- Kelvin to Celsius: `K - 273.15`\n- Kelvin to Fahrenheit: `(K - 273.15) * 9/5 + 32`\n\nLet's start by setting up the basic structure of the program.\n\n### Step 1: Program Structure\n\nWe'll create a Go program with the following sections:\n\n- Package declaration\n- Imports\n- Main function\n- Conversion functions\n\n### Step 2: Handling Command-Line Arguments\n\nWe'll use `os.Args` to get command-line arguments. The program should expect two arguments:\n\n1. The temperature value (a float64).\n2. The unit (a string: \"C\", \"F\", or \"K\").\n\n### Step 3: Conversion Functions\n\nWe'll write functions to handle each conversion:\n\n- `celsiusToFahrenheit(c float64) float64`\n- `celsiusToKelvin(c float64) float64`\n- `fahrenheitToCelsius(f float64) float64`\n- `fahrenheitToKelvin(f float64) float64`\n- `kelvinToCelsius(k float64) float64`\n- `kelvinToFahrenheit(k float64) float64`\n\n### Step 4: Main Function Logic\n\n1. Check if exactly two command-line arguments are provided. If not, print usage instructions.\n2. Parse the temperature value from the first argument.\n3. Determine the unit from the second argument.\n4. Based on the unit, perform the necessary conversions and print the results.\n\n### Step 5: Error Handling\n\n- Ensure the temperature value is a valid float64.\n- Validate the unit is one of \"C\", \"F\", or \"K\".\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"strconv\"\n)\n\nfunc celsiusToFahrenheit(c float64) float64 {\n\treturn (c * 9 / 5) + 32\n}\n\nfunc celsiusToKelvin(c float64) float64 {\n\treturn c + 273.15\n}\n\nfunc fahrenheitToCelsius(f float64) float64 {\n\treturn (f - 32) * 5 / 9\n}\n\nfunc fahrenheitToKelvin(f float64) float64 {\n\treturn fahrenheitToCelsius(f) + 273.15\n}\n\nfunc kelvinToCelsius(k float64) float64 {\n\treturn k - 273.15\n}\n\nfunc kelvinToFahrenheit(k float64) float64 {\n\treturn (k - 273.15) * 9 / 5 + 32\n}\n\nfunc main() {\n\tif len(os.Args) != 3 {\n\t\tfmt.Println(\"Usage: tempconv <temperature> <unit>\")\n\t\tfmt.Println(\"Example: tempconv 100 C\")\n\t\tos.Exit(1)\n\t}\n\n\ttempStr := os.Args[1]\n\tunit := os.Args[2]\n\n\ttemp, err := strconv.ParseFloat(tempStr, 64)\n\tif err != nil {\n\t\tfmt.Println(\"Invalid temperature value.\")\n\t\tos.Exit(1)\n\t}\n\n\tvar c, f, k float64\n\n\tswitch unit {\n\tcase \"C\":\n\t\tc = temp\n\t\tf = celsiusToFahrenheit(c)\n\t\tk = celsiusToKelvin(c)\n\tcase \"F\":\n\t\tf = temp\n\t\tc = fahrenheitToCelsius(f)\n\t\tk = fahrenheitToKelvin(f)\n\tcase \"K\":\n\t\tk = temp\n\t\tc = kelvinToCelsius(k)\n\t\tf = kelvinToFahrenheit(k)\n\tdefault:\n\t\tfmt.Println(\"Invalid unit. Please use C, F, or K.\")\n\t\tos.Exit(1)\n\t}\n\n\tfmt.Printf(\"%.2f \u00b0%s is:\\n\", temp, unit)\n\tfmt.Printf(\"%.2f \u00b0C\\n\", c)\n\tfmt.Printf(\"%.2f \u00b0F\\n\", f)\n\tfmt.Printf(\"%.2f K\\n\", k)\n}\n```\n\n### Explanation\n\n1. **Conversion Functions**: Each function performs a specific temperature conversion using the standard formulas.\n2. **Main Function**:\n   - Checks for correct number of command-line arguments.\n   - Parses the temperature value and validates the unit.\n   - Uses a switch statement to determine which conversions to perform based on the input unit.\n   - Prints the original temperature and its conversions to all three units with two decimal places for clarity.\n\nThis program ensures that users can easily convert temperatures between Celsius, Fahrenheit, and Kelvin by providing a straightforward command-line interface."
    }
]