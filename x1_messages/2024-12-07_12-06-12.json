[
    {
        "role": "user",
        "content": "Using SQL, design a database schema for a movie rental store. The schema should include tables for customers, movies, rentals, and payments. Also, write queries to fetch details like 'most rented movie', 'active customers', etc."
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you design a database schema for a movie rental store using SQL. We'll create tables for customers, movies, rentals, and payments, and then write some queries to fetch details like the most rented movie and active customers.\n\n### Database Schema Design\n\n1. **Customers Table**\n   - Stores information about the customers.\n   - Fields: customer_id (PK), name, email, phone, address.\n\n2. **Movies Table**\n   - Stores information about the movies available for rent.\n   - Fields: movie_id (PK), title, genre, release_year, stock.\n\n3. **Rentals Table**\n   - Records each rental transaction.\n   - Fields: rental_id (PK), customer_id (FK), movie_id (FK), rental_date, return_date.\n\n4. **Payments Table**\n   - Records each payment made by customers.\n   - Fields: payment_id (PK), rental_id (FK), amount, payment_date.\n\n### SQL Statements to Create Tables\n\n```sql\n-- Customers Table\nCREATE TABLE customers (\n    customer_id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100),\n    phone VARCHAR(15),\n    address VARCHAR(255)\n);\n\n-- Movies Table\nCREATE TABLE movies (\n    movie_id INT AUTO_INCREMENT PRIMARY KEY,\n    title VARCHAR(100) NOT NULL,\n    genre VARCHAR(50),\n    release_year YEAR,\n    stock INT DEFAULT 0\n);\n\n-- Rentals Table\nCREATE TABLE rentals (\n    rental_id INT AUTO_INCREMENT PRIMARY KEY,\n    customer_id INT,\n    movie_id INT,\n    rental_date DATETIME,\n    return_date DATETIME,\n    FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n    FOREIGN KEY (movie_id) REFERENCES movies(movie_id)\n);\n\n-- Payments Table\nCREATE TABLE payments (\n    payment_id INT AUTO_INCREMENT PRIMARY KEY,\n    rental_id INT,\n    amount DECIMAL(10, 2),\n    payment_date DATETIME,\n    FOREIGN KEY (rental_id) REFERENCES rentals(rental_id)\n);\n```\n\n### Sample Queries\n\n1. **Most Rented Movie**\n   - Find the movie that has been rented the most times.\n\n```sql\nSELECT m.title, COUNT(r.rental_id) as rental_count\nFROM movies m\nJOIN rentals r ON m.movie_id = r.movie_id\nGROUP BY m.movie_id\nORDER BY rental_count DESC\nLIMIT 1;\n```\n\n2. **Active Customers**\n   - List customers who have rented movies in the last 30 days.\n\n```sql\nSELECT c.customer_id, c.name, c.email\nFROM customers c\nJOIN rentals r ON c.customer_id = r.customer_id\nWHERE r.rental_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\nGROUP BY c.customer_id;\n```\n\n3. **Total Revenue**\n   - Calculate the total revenue generated from payments.\n\n```sql\nSELECT SUM(p.amount) as total_revenue\nFROM payments p;\n```\n\n4. **Movies Currently Rented Out**\n   - List movies that are currently rented out and haven't been returned yet.\n\n```sql\nSELECT m.title, r.rental_date\nFROM movies m\nJOIN rentals r ON m.movie_id = r.movie_id\nWHERE r.return_date IS NULL;\n```\n\n5. **Customer Rental History**\n   - Get the rental history for a specific customer.\n\n```sql\nSELECT m.title, r.rental_date, r.return_date\nFROM movies m\nJOIN rentals r ON m.movie_id = r.movie_id\nWHERE r.customer_id = ?;  -- Replace ? with the specific customer_id\n```\n\nThese queries should give you a good starting point for managing and analyzing data in your movie rental store database. If you need any further assistance or have more specific requirements, feel free to ask!"
    }
]