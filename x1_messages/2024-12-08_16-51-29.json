[
    {
        "role": "user",
        "content": "Create a Java program that reads a text file line by line and prints out the lines containing a specified keyword."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a Java program that reads a text file line by line and prints out the lines containing a specified keyword, you can follow these steps:\n\n1. **Import necessary classes**: You'll need classes from the `java.io` package to handle file reading and from `java.util` for using `Scanner` or other utilities.\n\n2. **Read the file**: Use a `BufferedReader` to read the file line by line efficiently.\n\n3. **Check for the keyword**: For each line, check if it contains the specified keyword.\n\n4. **Print matching lines**: If a line contains the keyword, print it.\n\nHere's a simple example to illustrate this:\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\n\npublic class KeywordSearch {\n    public static void main(String[] args) {\n        // Specify the path to your text file\n        String filePath = \"path/to/your/file.txt\";\n        \n        // Specify the keyword to search for\n        String keyword = \"example\";\n        \n        // Call the method to search for the keyword in the file\n        searchKeywordInFile(filePath, keyword);\n    }\n    \n    public static void searchKeywordInFile(String filePath, String keyword) {\n        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {\n            String line;\n            while ((line = br.readLine()) != null) {\n                if (line.contains(keyword)) {\n                    System.out.println(line);\n                }\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Import Statements**: We import `BufferedReader`, `FileReader`, and `IOException` from `java.io` to handle file operations and exceptions.\n\n2. **Main Method**: In the `main` method, we define the file path and the keyword to search for. Then, we call the `searchKeywordInFile` method with these parameters.\n\n3. **searchKeywordInFile Method**:\n   - We use a `BufferedReader` to read the file line by line.\n   - For each line, we check if it contains the keyword using the `contains` method.\n   - If it does, we print the line.\n   - We handle any `IOException` that might occur during file operations.\n\n### Notes:\n\n- **File Path**: Make sure to provide the correct path to your text file. It can be an absolute path or a relative path from the project directory.\n\n- **Keyword Search**: The search is case-sensitive. If you need a case-insensitive search, you can convert both the line and the keyword to lowercase (or uppercase) before checking:\n\n  ```java\n  if (line.toLowerCase().contains(keyword.toLowerCase())) {\n      System.out.println(line);\n  }\n  ```\n\n- **Exception Handling**: The `try-with-resources` statement ensures that the `BufferedReader` is closed automatically after the operations are completed, even if an exception occurs.\n\nThis should give you a basic program to search for a keyword in a text file and print the matching lines. Let me know if you need any further assistance!"
    }
]