[
    {
        "role": "user",
        "content": "Develop a Python script that uses the Flask web framework to create a RESTful API for managing a simple task list stored in a MongoDB database. The API should support adding tasks, marking tasks as completed, deleting tasks, and listing all tasks.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a RESTful API using Flask that manages a simple task list stored in a MongoDB database. I need to make sure it supports adding tasks, marking them as completed, deleting them, and listing all tasks. Since I'm supposed to use Flask and MongoDB, I should probably look into Flask extensions that make working with MongoDB easier.\n\nFirst, I need to set up a Flask application. I'll start by creating a new directory for my project and initializing a new Python environment. Then, I'll install Flask and the Flask-PyMongo extension, which allows Flask to connect to a MongoDB database easily.\n\nSo, let's list out the steps I need to follow:\n\n1. Set up the Flask application.\n\n2. Configure the MongoDB connection.\n\n3. Define the models for the tasks.\n\n4. Create the API endpoints for the required operations:\n\na. Add a task\n\nb. Mark a task as completed\n\nc. Delete a task\n\nd. List all tasks\n\n5. Test the API to ensure it works as expected.\n\nI should also consider the structure of the task documents in the MongoDB database. Each task should probably have a unique identifier, a description, and a field indicating whether it's completed or not.\n\nLet me sketch a rough structure for the task document:\n\n{\n\n\"_id\": ObjectId(\"...\"),\n\n\"description\": \"Buy milk\",\n\n\"completed\": false\n\n}\n\nAlright, now for the Flask application setup. I'll create a new file, maybe app.py, and start by importing the necessary modules.\n\nI need to install Flask and Flask-PyMongo. I can do this using pip:\n\npip install Flask Flask-PyMongo\n\nOnce that's done, I can import them in my app.py:\n\nfrom flask import Flask, request, jsonify\n\nfrom flask_pymongo import PyMongo\n\nNext, I need to set up the Flask app and configure the MongoDB connection. I'll assume that MongoDB is running locally on the default port, but I should make this configurable via environment variables for better flexibility.\n\nSo, in app.py:\n\napp = Flask(__name__)\n\napp.config['MONGO_URI'] = 'mongodb://localhost:27017/tasklist'\n\nmongo = PyMongo(app)\n\nNow, I need to define the API endpoints. Let's start with listing all tasks. I'll create a route that returns all tasks in the database.\n\n@app.route('/tasks', methods=['GET'])\n\ndef get_tasks():\n\ntasks = mongo.db.tasks.find()\n\noutput = []\n\nfor task in tasks:\n\noutput.append({\n\n'id': str(task['_id']),\n\n'description': task['description'],\n\n'completed': task['completed']\n\n})\n\nreturn jsonify(output)\n\nI should also handle cases where there are no tasks.\n\nNext, adding a task. I'll create a POST endpoint that accepts JSON data with the task description.\n\n@app.route('/tasks', methods=['POST'])\n\ndef add_task():\n\ndescription = request.json['description']\n\nif not description:\n\nreturn jsonify({'message': 'Description is required'}), 400\n\ntask = {\n\n'description': description,\n\n'completed': False\n\n}\n\nresult = mongo.db.tasks.insert_one(task)\n\nreturn jsonify({'id': str(result.inserted_id), 'description': description, 'completed': False}), 201\n\nI need to make sure that the request contains a description; otherwise, I'll return an error.\n\nNow, marking a task as completed. I'll need to identify the task by its ID and update the 'completed' field.\n\n@app.route('/tasks/<string:task_id>', methods=['PUT'])\n\ndef mark_completed(task_id):\n\nresult = mongo.db.tasks.update_one({'_id': ObjectId(task_id)}, {'$set': {'completed': True}})\n\nif result.matched_count == 0:\n\nreturn jsonify({'message': 'Task not found'}), 404\n\nreturn jsonify({'message': 'Task marked as completed'})\n\nI need to make sure to import ObjectId from bson:\n\nfrom bson.objectid import ObjectId\n\nAlso, I should handle cases where the task ID is invalid.\n\nNext, deleting a task. Similar to marking as completed, I'll identify the task by its ID and remove it from the database.\n\n@app.route('/tasks/<string:task_id>', methods=['DELETE'])\n\ndef delete_task(task_id):\n\nresult = mongo.db.tasks.delete_one({'_id': ObjectId(task_id)})\n\nif result.deleted_count == 0:\n\nreturn jsonify({'message': 'Task not found'}), 404\n\nreturn jsonify({'message': 'Task deleted'})\n\nAlright, now I need to make sure that the app runs when I execute app.py. So, at the end of the file:\n\nif __name__ == '__main__':\n\napp.run(debug=True)\n\nBefore testing, I should make sure that MongoDB is running locally. If it's not, I need to start the MongoDB service.\n\nNow, to test the API, I can use tools like Postman or curl. Let's try adding a task using curl:\n\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"description\":\"Buy milk\"}' http://localhost:5000/tasks\n\nThis should return the newly created task with an ID and completed set to false.\n\nThen, to list all tasks:\n\ncurl http://localhost:5000/tasks\n\nShould return a list of tasks.\n\nTo mark a task as completed:\n\ncurl -X PUT http://localhost:5000/tasks/<task_id>\n\nAnd to delete a task:\n\ncurl -X DELETE http://localhost:5000/tasks/<task_id>\n\nI should also handle errors gracefully, like when a task ID doesn't exist or when the request data is invalid.\n\nAdditionally, I might want to add more features, like updating a task's description or handling task completion status more thoroughly, but for now, these basic operations should suffice.\n\nI should also consider data validation to ensure that the description is not empty and that the task ID is valid.\n\nLastly, in a production environment, I should avoid running the app with debug=True and consider using environment variables for configuration settings.\n\nThat's a basic implementation of a RESTful API for a task list using Flask and MongoDB.\n\n## Final Solution\nTo create a RESTful API for managing a simple task list stored in a MongoDB database using the Flask web framework, follow these steps:\n\n### Prerequisites\n\n1. **Python** installed on your system.\n2. **Flask** and **Flask-PyMongo** libraries installed. You can install them using pip:\n   ```bash\n   pip install Flask Flask-PyMongo\n   ```\n3. **MongoDB** running locally on the default port (`27017`), or adjust the connection settings accordingly.\n\n### Solution Code\n\nCreate a file named `app.py` and add the following code:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_pymongo import PyMongo\nfrom bson.objectid import ObjectId\n\napp = Flask(__name__)\napp.config['MONGO_URI'] = 'mongodb://localhost:27017/tasklist'\nmongo = PyMongo(app)\n\n@app.route('/tasks', methods=['GET'])\ndef get_tasks():\n    tasks = mongo.db.tasks.find()\n    output = []\n    for task in tasks:\n        output.append({\n            'id': str(task['_id']),\n            'description': task['description'],\n            'completed': task['completed']\n        })\n    return jsonify(output)\n\n@app.route('/tasks', methods=['POST'])\ndef add_task():\n    description = request.json.get('description')\n    if not description:\n        return jsonify({'message': 'Description is required'}), 400\n    task = {\n        'description': description,\n        'completed': False\n    }\n    result = mongo.db.tasks.insert_one(task)\n    return jsonify({\n        'id': str(result.inserted_id),\n        'description': description,\n        'completed': False\n    }), 201\n\n@app.route('/tasks/<string:task_id>', methods=['PUT'])\ndef mark_completed(task_id):\n    try:\n        result = mongo.db.tasks.update_one(\n            {'_id': ObjectId(task_id)},\n            {'$set': {'completed': True}}\n        )\n        if result.matched_count == 0:\n            return jsonify({'message': 'Task not found'}), 404\n        return jsonify({'message': 'Task marked as completed'})\n    except Exception as e:\n        return jsonify({'message': 'Invalid task ID'}), 400\n\n@app.route('/tasks/<string:task_id>', methods=['DELETE'])\ndef delete_task(task_id):\n    try:\n        result = mongo.db.tasks.delete_one({'_id': ObjectId(task_id)})\n        if result.deleted_count == 0:\n            return jsonify({'message': 'Task not found'}), 404\n        return jsonify({'message': 'Task deleted'})\n    except Exception as e:\n        return jsonify({'message': 'Invalid task ID'}), 400\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation\n\n1. **Flask Application Setup**:\n   - Import necessary modules and set up the Flask app.\n   - Configure MongoDB connection using Flask-PyMongo.\n\n2. **API Endpoints**:\n   - **GET /tasks**: Retrieve all tasks.\n   - **POST /tasks**: Add a new task.\n   - **PUT /tasks/<task_id>**: Mark a task as completed.\n   - **DELETE /tasks/<task_id>**: Delete a task.\n\n3. **Error Handling**:\n   - Check for required fields in POST requests.\n   - Handle invalid task IDs and missing tasks.\n\n4. **Running the Application**:\n   - Ensure MongoDB is running.\n   - Run the Flask app using `python app.py`.\n   - Access the API endpoints using tools like curl or Postman.\n\nThis setup provides a basic RESTful API for managing a task list with CRUD operations supported via HTTP methods."
    }
]