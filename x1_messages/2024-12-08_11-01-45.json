[
    {
        "role": "user",
        "content": "Write a Python script that monitors a specified directory for changes (file creation, modification, or deletion) and logs these events to a text file along with timestamps."
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a Python script that monitors a specified directory for changes and logs these events to a text file with timestamps, we can use the `watchdog` library. This library provides a flexible event handling mechanism for file system events.\n\nFirst, you need to install the `watchdog` library if you haven't already. You can install it using pip:\n\n```bash\npip install watchdog\n```\n\nHere's a step-by-step guide to create the script:\n\n1. **Import necessary modules:**\n   - `watchdog.observers` for monitoring directory changes.\n   - `watchdog.events` for defining event handlers.\n   - `datetime` for generating timestamps.\n   - `os` for file operations.\n\n2. **Define an event handler class:**\n   - This class will inherit from `watchdog.events.FileSystemEventHandler`.\n   - Override methods to handle different types of events (created, modified, deleted).\n\n3. **Set up the observer:**\n   - Create an observer that will monitor the specified directory.\n   - Schedule the observer to watch the directory with the event handler.\n\n4. **Start the observer thread:**\n   - Start the observer in a separate thread to keep the monitoring asynchronous.\n\n5. **Log events to a text file:**\n   - Append each event with a timestamp to a log file.\n\nHere's a sample script that accomplishes this:\n\n```python\nimport time\nimport datetime\nimport os\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass DirectoryMonitorHandler(FileSystemEventHandler):\n    def __init__(self, log_file):\n        self.log_file = log_file\n\n    def log_event(self, event):\n        now = datetime.datetime.now()\n        timestamp = now.strftime(\"%Y-%m-%d %H:%M:%S\")\n        log_message = f\"{timestamp} - {event.event_type} - {event.src_path}\\n\"\n        with open(self.log_file, \"a\") as log:\n            log.write(log_message)\n\n    def on_created(self, event):\n        self.log_event(event)\n\n    def on_modified(self, event):\n        self.log_event(event)\n\n    def on_deleted(self, event):\n        self.log_event(event)\n\ndef monitor_directory(path, log_file):\n    event_handler = DirectoryMonitorHandler(log_file)\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n\nif __name__ == \"__main__\":\n    directory_to_watch = input(\"Enter the directory to monitor: \")\n    log_file = \"directory_changes.log\"\n    monitor_directory(directory_to_watch, log_file)\n```\n\n### Explanation:\n\n1. **DirectoryMonitorHandler Class:**\n   - Inherits from `FileSystemEventHandler`.\n   - Initializes with a log file path.\n   - Defines a `log_event` method to log events with timestamps.\n   - Overrides `on_created`, `on_modified`, and `on_deleted` methods to handle respective events by logging them.\n\n2. **monitor_directory Function:**\n   - Sets up the event handler and observer.\n   - Schedules the observer to watch the specified directory recursively.\n   - Starts the observer thread and keeps it running until interrupted.\n\n3. **Main Block:**\n   - Takes user input for the directory to monitor.\n   - Specifies the log file name.\n   - Calls the monitoring function with the provided directory and log file.\n\nThis script will continuously monitor the specified directory and log all file creation, modification, and deletion events to \"directory_changes.log\" with timestamps. You can stop the monitoring by interrupting the script (e.g., pressing Ctrl+C).\n"
    }
]