[
    {
        "role": "user",
        "content": "Develop a Java program that simulates a basic ATM system with features like account creation, deposit, withdrawal, balance inquiry, and fund transfer between accounts, while persisting the account data in a SQLite database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a simple ATM system in Java that can handle account creation, deposits, withdrawals, balance checks, and transferring funds between accounts. And everything needs to be saved in a SQLite database. Okay, let's break this down.\n\nFirst things first, I need to set up a SQLite database to store the account information. Each account should have at least an account number, owner's name, and balance. Maybe I'll also include a PIN for security purposes. So, the database should have a table something like this:\n\n- Account table:\n\n- account_number (primary key)\n\n- owner_name\n\n- pin\n\n- balance\n\nI need to make sure that the account_number is unique for each account.\n\nNext, I need to create Java classes to interact with this database. I should use JDBC to connect to the SQLite database and perform CRUD operations.\n\nLet's think about the features one by one.\n\n1. Account Creation:\n\n- The user should be able to provide the owner's name and initial deposit.\n\n- The system should assign a unique account number.\n\n- The user should set a PIN for their account.\n\n- This information should be stored in the database.\n\n2. Deposit:\n\n- The user provides the account number and the amount to deposit.\n\n- The system should verify the account exists and update the balance.\n\n3. Withdrawal:\n\n- The user provides the account number, PIN, and the amount to withdraw.\n\n- The system should check if the PIN is correct and if there are sufficient funds.\n\n- If both are okay, update the balance.\n\n4. Balance Inquiry:\n\n- The user provides the account number and PIN.\n\n- The system verifies the PIN and displays the current balance.\n\n5. Fund Transfer:\n\n- The user provides the sender's account number, PIN, receiver's account number, and the amount to transfer.\n\n- The system should verify both accounts exist, check if the sender has enough balance, and then deduct from sender and add to receiver.\n\nAlright, now let's think about the structure of the Java program.\n\nI can create a class called ATM with methods for each of these operations. I'll need to handle database connections properly, making sure to close them after operations to avoid leaks.\n\nAlso, for the account number, I can either auto-generate it in the database using a sequence or just generate it in the Java code. Maybe using a simple counter for now.\n\nSecurity is important, especially with PINs. I should make sure that PINs are stored securely, but since this is a simple simulation, I'll store them as plain text for now. In a real-world scenario, PINs should be hashed and salted.\n\nLet me sketch a rough plan:\n\n- Create a SQLite database with the Account table.\n\n- Write Java code to connect to the SQLite database.\n\n- Implement methods for account creation, deposit, withdrawal, balance inquiry, and fund transfer.\n\n- Create a simple text-based interface to interact with the ATM system.\n\nLet me start by setting up the database.\n\nFirst, I need to create the database and the table.\n\nI can use SQLite browser or write SQL commands in the code to create the table if it doesn't exist.\n\nHere's the SQL for the Account table:\n\n```\n\nCREATE TABLE IF NOT EXISTS Account (\n\n account_number INTEGER PRIMARY KEY AUTOINCREMENT,\n\n owner_name TEXT NOT NULL,\n\n pin TEXT NOT NULL,\n\n balance REAL NOT NULL\n\n);\n\n```\n\nOkay, so account_number is an integer that auto-increments. owner_name is text, pin is text (for simplicity), and balance is a real number.\n\nNow, in Java, I need to establish a connection to this SQLite database.\n\nI'll need the JDBC driver for SQLite. I can include the SQLite JDBC jar in my project.\n\nAssuming I have the jar, I can load the driver and connect to the database.\n\nHere's a sample code snippet for that:\n\n```\n\nimport java.sql.Connection;\n\nimport java.sql.DriverManager;\n\nimport java.sql.SQLException;\n\npublic class DatabaseConnector {\n\n public static Connection connect() {\n\n Connection conn = null;\n\n try {\n\n // db parameters\n\n String url = \"jdbc:sqlite:atm.db\";\n\n // create a connection to the database\n\n conn = DriverManager.getConnection(url);\n\n System.out.println(\"Connection to SQLite has been established.\");\n\n } catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n return conn;\n\n }\n\n}\n\n```\n\nOkay, so this will connect to a database file named atm.db in the current directory.\n\nNow, for account creation, I need to insert a new row into the Account table.\n\nI'll need to get the owner's name and initial deposit from the user, and generate a PIN.\n\nWait, better yet, let the user set their own PIN during account creation.\n\nSo, the process is:\n\n- User provides owner's name.\n\n- User sets a PIN.\n\n- User provides initial deposit amount.\n\n- The system generates an account number and stores the information in the database.\n\nFor generating the account number, since I'm using AUTOINCREMENT in the database, I can let the database handle it.\n\nHere's a method for account creation:\n\n```\n\npublic void createAccount(String ownerName, String pin, double initialDeposit) {\n\n String sql = \"INSERT INTO Account(owner_name, pin, balance) VALUES(?,?,?)\";\n\n try (Connection conn = DatabaseConnector.connect();\n\n PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n pstmt.setString(1, ownerName);\n\n pstmt.setString(2, pin);\n\n pstmt.setDouble(3, initialDeposit);\n\n pstmt.executeUpdate();\n\n } catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n}\n\n```\n\nGood, that should work.\n\nNext, for deposit:\n\n- User provides account number and deposit amount.\n\n- The system finds the account, adds the deposit amount to the balance, and updates the database.\n\nI need to make sure that the account exists before updating the balance.\n\nHere's a method for deposit:\n\n```\n\npublic void deposit(int accountNumber, double amount) {\n\n String sql = \"UPDATE Account SET balance = balance + ? WHERE account_number = ?\";\n\n try (Connection conn = DatabaseConnector.connect();\n\n PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n pstmt.setDouble(1, amount);\n\n pstmt.setInt(2, accountNumber);\n\n int rowsAffected = pstmt.executeUpdate();\n\n if (rowsAffected == 0) {\n\n System.out.println(\"Account not found.\");\n\n }\n\n } catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n}\n\n```\n\nSimilar approach for withdrawal, but with some additional checks.\n\n- User provides account number, PIN, and withdrawal amount.\n\n- The system verifies the PIN, checks if the balance is sufficient, and then deducts the amount.\n\nI need to retrieve the PIN and balance first to perform these checks.\n\nHere's a method for withdrawal:\n\n```\n\npublic void withdraw(int accountNumber, String pin, double amount) {\n\n String sqlSelect = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n\n String sqlUpdate = \"UPDATE Account SET balance = balance - ? WHERE account_number = ?\";\n\n try (Connection conn = DatabaseConnector.connect();\n\n PreparedStatement pstmtSelect = conn.prepareStatement(sqlSelect);\n\n PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate)) {\n\n pstmtSelect.setInt(1, accountNumber);\n\n ResultSet rs = pstmtSelect.executeQuery();\n\n if (rs.next()) {\n\n String storedPin = rs.getString(\"pin\");\n\n double currentBalance = rs.getDouble(\"balance\");\n\n if (pin.equals(storedPin)) {\n\n if (currentBalance >= amount) {\n\n pstmtUpdate.setDouble(1, amount);\n\n pstmtUpdate.setInt(2, accountNumber);\n\n pstmtUpdate.executeUpdate();\n\n System.out.println(\"Withdrawal successful.\");\n\n } else {\n\n System.out.println(\"Insufficient funds.\");\n\n }\n\n } else {\n\n System.out.println(\"Invalid PIN.\");\n\n }\n\n } else {\n\n System.out.println(\"Account not found.\");\n\n }\n\n } catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n}\n\n```\n\nFor balance inquiry:\n\n- User provides account number and PIN.\n\n- The system verifies the PIN and displays the balance.\n\nSimilar to withdrawal, but without changing the balance.\n\nHere's a method for balance inquiry:\n\n```\n\npublic void checkBalance(int accountNumber, String pin) {\n\n String sql = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n\n try (Connection conn = DatabaseConnector.connect();\n\n PreparedStatement pstmt = conn.prepareStatement(sql)) {\n\n pstmt.setInt(1, accountNumber);\n\n ResultSet rs = pstmt.executeQuery();\n\n if (rs.next()) {\n\n String storedPin = rs.getString(\"pin\");\n\n double balance = rs.getDouble(\"balance\");\n\n if (pin.equals(storedPin)) {\n\n System.out.println(\"Current balance: \" + balance);\n\n } else {\n\n System.out.println(\"Invalid PIN.\");\n\n }\n\n } else {\n\n System.out.println(\"Account not found.\");\n\n }\n\n } catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n}\n\n```\n\nFinally, for fund transfer:\n\n- User provides sender's account number, sender's PIN, receiver's account number, and transfer amount.\n\n- The system verifies both accounts exist, checks if the sender has sufficient funds, and then deducts from sender and adds to receiver.\n\nThis needs to be atomic to avoid race conditions. Maybe use a database transaction.\n\nHere's a method for fund transfer:\n\n```\n\npublic void transferFunds(int fromAccount, String pin, int toAccount, double amount) {\n\n String sqlSelectFrom = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n\n String sqlSelectTo = \"SELECT balance FROM Account WHERE account_number = ?\";\n\n String sqlUpdateFrom = \"UPDATE Account SET balance = balance - ? WHERE account_number = ?\";\n\n String sqlUpdateTo = \"UPDATE Account SET balance = balance + ? WHERE account_number = ?\";\n\n try (Connection conn = DatabaseConnector.connect()) {\n\n conn.setAutoCommit(false); // Start a transaction\n\n try (PreparedStatement pstmtSelectFrom = conn.prepareStatement(sqlSelectFrom);\n\n PreparedStatement pstmtSelectTo = conn.prepareStatement(sqlSelectTo);\n\n PreparedStatement pstmtUpdateFrom = conn.prepareStatement(sqlUpdateFrom);\n\n PreparedStatement pstmtUpdateTo = conn.prepareStatement(sqlUpdateTo)) {\n\n // Check sender's account\n\n pstmtSelectFrom.setInt(1, fromAccount);\n\n ResultSet rsFrom = pstmtSelectFrom.executeQuery();\n\n if (!rsFrom.next()) {\n\n System.out.println(\"Sender's account not found.\");\n\n conn.rollback();\n\n return;\n\n }\n\n String storedPin = rsFrom.getString(\"pin\");\n\n double fromBalance = rsFrom.getDouble(\"balance\");\n\n if (!pin.equals(storedPin)) {\n\n System.out.println(\"Invalid PIN.\");\n\n conn.rollback();\n\n return;\n\n }\n\n if (fromBalance < amount) {\n\n System.out.println(\"Insufficient funds.\");\n\n conn.rollback();\n\n return;\n\n }\n\n // Check receiver's account\n\n pstmtSelectTo.setInt(1, toAccount);\n\n ResultSet rsTo = pstmtSelectTo.executeQuery();\n\n if (!rsTo.next()) {\n\n System.out.println(\"Receiver's account not found.\");\n\n conn.rollback();\n\n return;\n\n }\n\n // Perform transfer\n\n pstmtUpdateFrom.setDouble(1, amount);\n\n pstmtUpdateFrom.setInt(2, fromAccount);\n\n pstmtUpdateFrom.executeUpdate();\n\n pstmtUpdateTo.setDouble(1, amount);\n\n pstmtUpdateTo.setInt(2, toAccount);\n\n pstmtUpdateTo.executeUpdate();\n\n conn.commit(); // Commit the transaction\n\n System.out.println(\"Transfer successful.\");\n\n } catch (SQLException e) {\n\n conn.rollback(); // Rollback on error\n\n System.out.println(e.getMessage());\n\n }\n\n }\n\n catch (SQLException e) {\n\n System.out.println(e.getMessage());\n\n }\n\n}\n\n```\n\nAlright, now I need to create a simple text-based interface to interact with these methods.\n\nI can create a loop that presents a menu to the user, and based on their choice, calls the appropriate method.\n\nHere's a rough outline:\n\n```\n\npublic class ATM {\n\n // Methods for account creation, deposit, withdrawal, balance inquiry, fund transfer\n\n \n\n public static void main(String[] args) {\n\n ATM atm = new ATM();\n\n Scanner scanner = new Scanner(System.in);\n\n \n\n while (true) {\n\n System.out.println(\"ATM System\");\n\n System.out.println(\"1. Create Account\");\n\n System.out.println(\"2. Deposit\");\n\n System.out.println(\"3. Withdraw\");\n\n System.out.println(\"4. Check Balance\");\n\n System.out.println(\"5. Transfer Funds\");\n\n System.out.println(\"6. Exit\");\n\n \n\n System.out.print(\"Choose an option: \");\n\n int choice = scanner.nextInt();\n\n \n\n switch (choice) {\n\n case 1:\n\n System.out.print(\"Enter owner's name: \");\n\n String ownerName = scanner.next();\n\n System.out.print(\"Set PIN: \");\n\n String pin = scanner.next();\n\n System.out.print(\"Initial deposit amount: \");\n\n double initialDeposit = scanner.nextDouble();\n\n atm.createAccount(ownerName, pin, initialDeposit);\n\n break;\n\n case 2:\n\n System.out.print(\"Enter account number: \");\n\n int accountNumber = scanner.nextInt();\n\n System.out.print(\"Enter deposit amount: \");\n\n double depositAmount = scanner.nextDouble();\n\n atm.deposit(accountNumber, depositAmount);\n\n break;\n\n case 3:\n\n System.out.print(\"Enter account number: \");\n\n int withdrawAccount = scanner.nextInt();\n\n System.out.print(\"Enter PIN: \");\n\n String withdrawPin = scanner.next();\n\n System.out.print(\"Enter withdrawal amount: \");\n\n double withdrawAmount = scanner.nextDouble();\n\n atm.withdraw(withdrawAccount, withdrawPin, withdrawAmount);\n\n break;\n\n case 4:\n\n System.out.print(\"Enter account number: \");\n\n int balanceAccount = scanner.nextInt();\n\n System.out.print(\"Enter PIN: \");\n\n String balancePin = scanner.next();\n\n atm.checkBalance(balanceAccount, balancePin);\n\n break;\n\n case 5:\n\n System.out.print(\"Enter sender's account number: \");\n\n int fromAccount = scanner.nextInt();\n\n System.out.print(\"Enter sender's PIN: \");\n\n String transferPin = scanner.next();\n\n System.out.print(\"Enter receiver's account number: \");\n\n int toAccount = scanner.nextInt();\n\n System.out.print(\"Enter transfer amount: \");\n\n double transferAmount = scanner.nextDouble();\n\n atm.transferFunds(fromAccount, transferPin, toAccount, transferAmount);\n\n break;\n\n case 6:\n\n System.out.println(\"Goodbye!\");\n\n scanner.close();\n\n System.exit(0);\n\n break;\n\n default:\n\n System.out.println(\"Invalid option. Please try again.\");\n\n }\n\n }\n\n }\n\n}\n\n```\n\nThis should give a basic interface for users to interact with the ATM system.\n\nI need to make sure that the database is properly set up before running the program. I can create the atm.db file and the Account table manually or have the program create them if they don't exist.\n\nAlso, error handling is important. I should handle cases where the database connection fails or other SQL exceptions occur.\n\nAdditionally, to make it more user-friendly, I can add input validations, like ensuring that account numbers and amounts are positive numbers, and PINS are of a certain length.\n\nFor now, this should suffice as a basic implementation of the ATM system with the required features.\n\n**Final Solution**\n\nTo create a basic ATM system in Java that interacts with a SQLite database, follow these steps:\n\n### Step 1: Set Up the SQLite Database\n\n1. **Create the Database and Table:**\n\n   Use the following SQL command to create the `Account` table:\n\n   ```sql\n   CREATE TABLE IF NOT EXISTS Account (\n       account_number INTEGER PRIMARY KEY AUTOINCREMENT,\n       owner_name TEXT NOT NULL,\n       pin TEXT NOT NULL,\n       balance REAL NOT NULL\n   );\n   ```\n\n2. **Ensure SQLite JDBC Driver is Included:**\n\n   Download the SQLite JDBC driver and include it in your project's classpath.\n\n### Step 2: Implement the Java Classes\n\n1. **Database Connection Class:**\n\n   ```java\n   import java.sql.Connection;\n   import java.sql.DriverManager;\n   import java.sql.SQLException;\n\n   public class DatabaseConnector {\n       public static Connection connect() {\n           Connection conn = null;\n           try {\n               String url = \"jdbc:sqlite:atm.db\";\n               conn = DriverManager.getConnection(url);\n               System.out.println(\"Connection to SQLite has been established.\");\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n           return conn;\n       }\n   }\n   ```\n\n2. **ATM Class with Methods:**\n\n   ```java\n   import java.sql.PreparedStatement;\n   import java.sql.ResultSet;\n   import java.sql.SQLException;\n   import java.util.Scanner;\n\n   public class ATM {\n\n       // Method to create a new account\n       public void createAccount(String ownerName, String pin, double initialDeposit) {\n           String sql = \"INSERT INTO Account(owner_name, pin, balance) VALUES(?,?,?)\";\n           try (Connection conn = DatabaseConnector.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n               pstmt.setString(1, ownerName);\n               pstmt.setString(2, pin);\n               pstmt.setDouble(3, initialDeposit);\n               pstmt.executeUpdate();\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n       }\n\n       // Method to deposit funds into an account\n       public void deposit(int accountNumber, double amount) {\n           String sql = \"UPDATE Account SET balance = balance + ? WHERE account_number = ?\";\n           try (Connection conn = DatabaseConnector.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n               pstmt.setDouble(1, amount);\n               pstmt.setInt(2, accountNumber);\n               int rowsAffected = pstmt.executeUpdate();\n               if (rowsAffected == 0) {\n                   System.out.println(\"Account not found.\");\n               }\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n       }\n\n       // Method to withdraw funds from an account\n       public void withdraw(int accountNumber, String pin, double amount) {\n           String sqlSelect = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n           String sqlUpdate = \"UPDATE Account SET balance = balance - ? WHERE account_number = ?\";\n           try (Connection conn = DatabaseConnector.connect();\n                PreparedStatement pstmtSelect = conn.prepareStatement(sqlSelect);\n                PreparedStatement pstmtUpdate = conn.prepareStatement(sqlUpdate)) {\n               pstmtSelect.setInt(1, accountNumber);\n               ResultSet rs = pstmtSelect.executeQuery();\n               if (rs.next()) {\n                   String storedPin = rs.getString(\"pin\");\n                   double currentBalance = rs.getDouble(\"balance\");\n                   if (pin.equals(storedPin)) {\n                       if (currentBalance >= amount) {\n                           pstmtUpdate.setDouble(1, amount);\n                           pstmtUpdate.setInt(2, accountNumber);\n                           pstmtUpdate.executeUpdate();\n                           System.out.println(\"Withdrawal successful.\");\n                       } else {\n                           System.out.println(\"Insufficient funds.\");\n                       }\n                   } else {\n                       System.out.println(\"Invalid PIN.\");\n                   }\n               } else {\n                   System.out.println(\"Account not found.\");\n               }\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n       }\n\n       // Method to check the balance of an account\n       public void checkBalance(int accountNumber, String pin) {\n           String sql = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n           try (Connection conn = DatabaseConnector.connect();\n                PreparedStatement pstmt = conn.prepareStatement(sql)) {\n               pstmt.setInt(1, accountNumber);\n               ResultSet rs = pstmt.executeQuery();\n               if (rs.next()) {\n                   String storedPin = rs.getString(\"pin\");\n                   double balance = rs.getDouble(\"balance\");\n                   if (pin.equals(storedPin)) {\n                       System.out.println(\"Current balance: \" + balance);\n                   } else {\n                       System.out.println(\"Invalid PIN.\");\n                   }\n               } else {\n                   System.out.println(\"Account not found.\");\n               }\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n       }\n\n       // Method to transfer funds between accounts\n       public void transferFunds(int fromAccount, String pin, int toAccount, double amount) {\n           String sqlSelectFrom = \"SELECT pin, balance FROM Account WHERE account_number = ?\";\n           String sqlSelectTo = \"SELECT balance FROM Account WHERE account_number = ?\";\n           String sqlUpdateFrom = \"UPDATE Account SET balance = balance - ? WHERE account_number = ?\";\n           String sqlUpdateTo = \"UPDATE Account SET balance = balance + ? WHERE account_number = ?\";\n           try (Connection conn = DatabaseConnector.connect()) {\n               conn.setAutoCommit(false);\n               try (PreparedStatement pstmtSelectFrom = conn.prepareStatement(sqlSelectFrom);\n                    PreparedStatement pstmtSelectTo = conn.prepareStatement(sqlSelectTo);\n                    PreparedStatement pstmtUpdateFrom = conn.prepareStatement(sqlUpdateFrom);\n                    PreparedStatement pstmtUpdateTo = conn.prepareStatement(sqlUpdateTo)) {\n                   // Check sender's account\n                   pstmtSelectFrom.setInt(1, fromAccount);\n                   ResultSet rsFrom = pstmtSelectFrom.executeQuery();\n                   if (!rsFrom.next()) {\n                       System.out.println(\"Sender's account not found.\");\n                       conn.rollback();\n                       return;\n                   }\n                   String storedPin = rsFrom.getString(\"pin\");\n                   double fromBalance = rsFrom.getDouble(\"balance\");\n                   if (!pin.equals(storedPin)) {\n                       System.out.println(\"Invalid PIN.\");\n                       conn.rollback();\n                       return;\n                   }\n                   if (fromBalance < amount) {\n                       System.out.println(\"Insufficient funds.\");\n                       conn.rollback();\n                       return;\n                   }\n                   // Check receiver's account\n                   pstmtSelectTo.setInt(1, toAccount);\n                   ResultSet rsTo = pstmtSelectTo.executeQuery();\n                   if (!rsTo.next()) {\n                       System.out.println(\"Receiver's account not found.\");\n                       conn.rollback();\n                       return;\n                   }\n                   // Perform transfer\n                   pstmtUpdateFrom.setDouble(1, amount);\n                   pstmtUpdateFrom.setInt(2, fromAccount);\n                   pstmtUpdateFrom.executeUpdate();\n                   pstmtUpdateTo.setDouble(1, amount);\n                   pstmtUpdateTo.setInt(2, toAccount);\n                   pstmtUpdateTo.executeUpdate();\n                   conn.commit();\n                   System.out.println(\"Transfer successful.\");\n               } catch (SQLException e) {\n                   conn.rollback();\n                   System.out.println(e.getMessage());\n               }\n           } catch (SQLException e) {\n               System.out.println(e.getMessage());\n           }\n       }\n\n       public static void main(String[] args) {\n           ATM atm = new ATM();\n           Scanner scanner = new Scanner(System.in);\n\n           while (true) {\n               System.out.println(\"ATM System\");\n               System.out.println(\"1. Create Account\");\n               System.out.println(\"2. Deposit\");\n               System.out.println(\"3. Withdraw\");\n               System.out.println(\"4. Check Balance\");\n               System.out.println(\"5. Transfer Funds\");\n               System.out.println(\"6. Exit\");\n\n               System.out.print(\"Choose an option: \");\n               int choice = scanner.nextInt();\n\n               switch (choice) {\n                   case 1:\n                       System.out.print(\"Enter owner's name: \");\n                       scanner.nextLine(); // Consume newline\n                       String ownerName = scanner.nextLine();\n                       System.out.print(\"Set PIN: \");\n                       String pin = scanner.nextLine();\n                       System.out.print(\"Initial deposit amount: \");\n                       double initialDeposit = scanner.nextDouble();\n                       atm.createAccount(ownerName, pin, initialDeposit);\n                       break;\n                   case 2:\n                       System.out.print(\"Enter account number: \");\n                       int accountNumber = scanner.nextInt();\n                       System.out.print(\"Enter deposit amount: \");\n                       double depositAmount = scanner.nextDouble();\n                       atm.deposit(accountNumber, depositAmount);\n                       break;\n                   case 3:\n                       System.out.print(\"Enter account number: \");\n                       int withdrawAccount = scanner.nextInt();\n                       System.out.print(\"Enter PIN: \");\n                       scanner.nextLine(); // Consume newline\n                       String withdrawPin = scanner.nextLine();\n                       System.out.print(\"Enter withdrawal amount: \");\n                       double withdrawAmount = scanner.nextDouble();\n                       atm.withdraw(withdrawAccount, withdrawPin, withdrawAmount);\n                       break;\n                   case 4:\n                       System.out.print(\"Enter account number: \");\n                       int balanceAccount = scanner.nextInt();\n                       System.out.print(\"Enter PIN: \");\n                       scanner.nextLine(); // Consume newline\n                       String balancePin = scanner.nextLine();\n                       atm.checkBalance(balanceAccount, balancePin);\n                       break;\n                   case 5:\n                       System.out.print(\"Enter sender's account number: \");\n                       int fromAccount = scanner.nextInt();\n                       System.out.print(\"Enter sender's PIN: \");\n                       scanner.nextLine(); // Consume newline\n                       String transferPin = scanner.nextLine();\n                       System.out.print(\"Enter receiver's account number: \");\n                       int toAccount = scanner.nextInt();\n                       System.out.print(\"Enter transfer amount: \");\n                       double transferAmount = scanner.nextDouble();\n                       atm.transferFunds(fromAccount, transferPin, toAccount, transferAmount);\n                       break;\n                   case 6:\n                       System.out.println(\"Goodbye!\");\n                       scanner.close();\n                       System.exit(0);\n                       break;\n                   default:\n                       System.out.println(\"Invalid option. Please try again.\");\n               }\n           }\n       }\n   }\n   ```\n\n### Explanation:\n\n1. **Database Setup:**\n   - The `Account` table stores account details with unique account numbers.\n   \n2. **Java Classes:**\n   - **DatabaseConnector:** Manages the connection to the SQLite database.\n   - **ATM:** Contains methods for account creation, deposit, withdrawal, balance inquiry, and fund transfer. It also includes a main method to provide a text-based menu for user interactions.\n\n3. **Error Handling:**\n   - Basic error handling is implemented to manage database connection issues and invalid user inputs.\n\n4. **Transactions:**\n   - Fund transfers are handled within a database transaction to ensure data integrity.\n\nThis setup provides a foundational ATM system with essential functionalities, persisted in a SQLite database."
    }
]