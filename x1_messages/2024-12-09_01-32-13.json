[
    {
        "role": "user",
        "content": "Write a Python script that connects to multiple APIs (e.g., weather, news, stock prices) and generates a daily summary email report for the user.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a Python script that connects to multiple APIs and generates a daily summary email report involves several steps. We'll need to:\n\n1. **Choose the APIs**: For this example, let's use the OpenWeatherMap API for weather data, the NewsAPI for news headlines, and the Alpha Vantage API for stock prices.\n\n2. **Set up API keys**: Each API will require an API key, which you'll need to obtain by signing up on their respective websites.\n\n3. **Fetch data from APIs**: Use Python's `requests` library to make HTTP requests to these APIs and retrieve the necessary data.\n\n4. **Format the data**: Organize the retrieved data into a readable format suitable for an email.\n\n5. **Send the email**: Use Python's `smtplib` and `email` libraries to compose and send the email.\n\nLet's break this down step by step.\n\n### Step 1: Choose and Set Up APIs\n\n#### OpenWeatherMap\n\n- **Sign up**: Go to [OpenWeatherMap](https://openweathermap.org/) and sign up for an account to get your API key.\n\n- **API endpoint**: `http://api.openweathermap.org/data/2.5/weather?q={city name}&appid={your api key}`\n\n#### NewsAPI\n\n- **Sign up**: Go to [NewsAPI](https://newsapi.org/) and sign up for an account to get your API key.\n\n- **API endpoint**: `https://newsapi.org/v2/top-headlines?country={country code}&apiKey={your api key}`\n\n#### Alpha Vantage\n\n- **Sign up**: Go to [Alpha Vantage](https://www.alphavantage.co/) and sign up for an account to get your API key.\n\n- **API endpoint**: `https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={stock symbol}&apikey={your api key}`\n\n### Step 2: Install Required Libraries\n\nYou'll need the `requests` library to make HTTP requests and `smtplib` along with `email` libraries for sending emails. You can install `requests` using pip if you don't have it already:\n\n```bash\npip install requests\n```\n\n### Step 3: Write the Python Script\n\nBelow is a sample Python script that accomplishes the task:\n\n```python\nimport requests\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\n# Configuration\nweather_api_key = 'your_openweathermap_api_key'\nnews_api_key = 'your_newsapi_api_key'\nstock_api_key = 'your_alphavantage_api_key'\nsender_email = 'your_email@example.com'\nreceiver_email = 'receiver_email@example.com'\nemail_password = 'your_email_password'\n\ndef get_weather(city):\n    url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={weather_api_key}&units=metric'\n    response = requests.get(url)\n    data = response.json()\n    if data['cod'] != 200:\n        return None\n    main = data['main']\n    weather = data['weather'][0]\n    return {\n        'temperature': main['temp'],\n        'description': weather['description']\n    }\n\ndef get_news(country):\n    url = f'https://newsapi.org/v2/top-headlines?country={country}&apiKey={news_api_key}'\n    response = requests.get(url)\n    data = response.json()\n    if data['status'] != 'ok':\n        return None\n    articles = data['articles']\n    return [(article['title'], article['url']) for article in articles[:5]]\n\ndef get_stock_price(symbol):\n    url = f'https://www.alphavantage.co/query?function=GLOBAL_QUOTE&symbol={symbol}&apikey={stock_api_key}'\n    response = requests.get(url)\n    data = response.json()\n    if 'Global Quote' not in data:\n        return None\n    quote = data['Global Quote']\n    return {\n        'price': quote['05. price'],\n        'change': quote['09. change']\n    }\n\ndef create_email_content(weather, news, stock):\n    content = f\"Daily Summary Report\\n\\n\"\n    content += f\"Weather: {weather['description']}, Temperature: {weather['temperature']}\u00b0C\\n\\n\"\n    content += \"Top News:\\n\"\n    for title, url in news:\n        content += f\"- {title}: {url}\\n\"\n    content += f\"\\nStock Price: {stock['price']} ({stock['change']})\\n\"\n    return content\n\ndef send_email(subject, content):\n    msg = MIMEMultipart()\n    msg['From'] = sender_email\n    msg['To'] = receiver_email\n    msg['Subject'] = subject\n    msg.attach(MIMEText(content, 'plain'))\n    \n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    server.login(sender_email, email_password)\n    text = msg.as_string()\n    server.sendmail(sender_email, receiver_email, text)\n    server.quit()\n\nif __name__ == \"__main__\":\n    city = 'London'\n    country = 'us'\n    stock_symbol = 'AAPL'\n    \n    weather = get_weather(city)\n    news = get_news(country)\n    stock = get_stock_price(stock_symbol)\n    \n    if weather and news and stock:\n        content = create_email_content(weather, news, stock)\n        send_email('Daily Summary Report', content)\n        print(\"Email sent successfully!\")\n    else:\n        print(\"Failed to retrieve data from one or more APIs.\")\n```\n\n### Explanation\n\n1. **Fetching Weather Data**: The `get_weather` function retrieves current weather data for a specified city using the OpenWeatherMap API.\n\n2. **Fetching News Headlines**: The `get_news` function fetches top news headlines for a specified country using the NewsAPI.\n\n3. **Fetching Stock Price**: The `get_stock_price` function gets the latest price and change for a specified stock symbol using the Alpha Vantage API.\n\n4. **Creating Email Content**: The `create_email_content` function formats the retrieved data into a readable string.\n\n5. **Sending Email**: The `send_email` function composes and sends the email using SMTP.\n\n### Notes\n\n- Replace placeholders like `your_openweathermap_api_key`, `your_email@example.com`, etc., with actual values.\n\n- Ensure that your email server details (SMTP server address and port) are correctly specified in the `send_email` function.\n\n- Handle exceptions and errors appropriately in a production environment.\n\nThis script provides a basic framework. You can expand it by adding more APIs, enhancing error handling, or including additional features like scheduling the script to run daily using a task scheduler."
    }
]