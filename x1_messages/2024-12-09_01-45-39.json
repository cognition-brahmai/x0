[
    {
        "role": "user",
        "content": "Write a Java program that calculates the factorial of a given number using recursion, and handles potential stack overflow errors gracefully."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java program that calculates the factorial of a given number using recursion and includes handling for potential stack overflow errors.\n\n```java\npublic class FactorialCalculator {\n\n    public static void main(String[] args) {\n        int number = 1000; // Example number, you can change this value\n        try {\n            long result = factorial(number);\n            System.out.println(\"Factorial of \" + number + \" is: \" + result);\n        } catch (StackOverflowError e) {\n            System.err.println(\"Error: Stack overflow detected. The number is too large for recursion.\");\n        }\n    }\n\n    public static long factorial(int n) {\n        if (n < 0) {\n            throw new IllegalArgumentException(\"Factorial is not defined for negative numbers.\");\n        }\n        if (n > 20) { // Factorial of numbers greater than 20 can cause stack overflow with recursion\n            throw new IllegalArgumentException(\"Number is too large for recursive factorial calculation.\");\n        }\n        if (n == 0 || n == 1) {\n            return 1;\n        } else {\n            return n * factorial(n - 1);\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **Factorial Calculation**:\n   - The `factorial` method calculates the factorial of a given number using recursion.\n   - It handles the base cases where `n` is 0 or 1, returning 1.\n   - For other values, it recursively calls itself with `n-1` until it reaches the base case.\n\n2. **Error Handling**:\n   - The method checks if the input number is negative and throws an `IllegalArgumentException` if it is, since factorial is not defined for negative numbers.\n   - It also checks if the number is greater than 20. This is because the factorial of numbers larger than 20 can lead to stack overflow errors due to deep recursion in Java.\n   - In the `main` method, we wrap the factorial calculation in a try-catch block to catch any `StackOverflowError` that might occur if the recursion depth is too high.\n\n3. **Example Usage**:\n   - The `main` method demonstrates how to use the `factorial` method with an example number (1000 in this case).\n   - If a stack overflow error occurs, it prints an error message indicating that the number is too large for recursive calculation.\n\nThis approach ensures that the program handles potential errors gracefully and provides meaningful feedback to the user."
    }
]