[
    {
        "role": "user",
        "content": "Implement a TypeScript class representing a basic calculator with methods for addition, subtraction, multiplication, and division. The class should include error handling for invalid inputs and division by zero.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I'd be happy to help you with that! Let's create a TypeScript class that represents a basic calculator. This class will have methods for addition, subtraction, multiplication, and division. We'll also include error handling to manage invalid inputs and prevent division by zero.\n\nFirst, make sure you have TypeScript installed. If not, you can install it using npm:\n\n```bash\nnpm install -g typescript\n```\n\nNow, let's create a new TypeScript file, say `calculator.ts`.\n\nWe'll start by defining the class and its methods.\n\n### Calculator Class\n\n```typescript\nclass Calculator {\n    // Method for addition\n    add(a: number, b: number): number {\n        return a + b;\n    }\n\n    // Method for subtraction\n    subtract(a: number, b: number): number {\n        return a - b;\n    }\n\n    // Method for multiplication\n    multiply(a: number, b: number): number {\n        return a * b;\n    }\n\n    // Method for division with error handling for division by zero\n    divide(a: number, b: number): number {\n        if (b === 0) {\n            throw new Error(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### Error Handling for Invalid Inputs\n\nTo handle invalid inputs, we can add input validation in each method. We'll check if the provided arguments are numbers and throw an error if they are not.\n\nHere's how we can modify the methods to include input validation:\n\n```typescript\nclass Calculator {\n    // Helper method to check if a value is a number\n    private static isNumber(value: any): boolean {\n        return typeof value === 'number' && !isNaN(value);\n    }\n\n    // Method for addition with input validation\n    add(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a + b;\n    }\n\n    // Method for subtraction with input validation\n    subtract(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a - b;\n    }\n\n    // Method for multiplication with input validation\n    multiply(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a * b;\n    }\n\n    // Method for division with input validation and error handling for division by zero\n    divide(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        if (b === 0) {\n            throw new Error(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n```\n\n### Usage Example\n\nNow, let's see how to use this `Calculator` class.\n\n```typescript\nconst calc = new Calculator();\n\ntry {\n    console.log(\"Addition: \", calc.add(10, 5)); // Output: 15\n    console.log(\"Subtraction: \", calc.subtract(10, 5)); // Output: 5\n    console.log(\"Multiplication: \", calc.multiply(10, 5)); // Output: 50\n    console.log(\"Division: \", calc.divide(10, 5)); // Output: 2\n    console.log(\"Division by zero: \", calc.divide(10, 0)); // Should throw an error\n} catch (error) {\n    console.error(error);\n}\n\ntry {\n    console.log(\"Addition with invalid input: \", calc.add(10, \"5\" as any)); // Should throw an error\n} catch (error) {\n    console.error(error);\n}\n```\n\n### Explanation\n\n1. **Class Definition**: We define a class `Calculator` with methods for basic arithmetic operations.\n2. **Input Validation**: Each method checks if the inputs are numbers using a helper method `isNumber`. If not, it throws a `TypeError`.\n3. **Division by Zero**: The `divide` method checks if the divisor is zero and throws an `Error` if it is.\n4. **Usage**: We create an instance of `Calculator` and perform operations, handling any errors that may occur.\n\nThis setup ensures that the calculator handles both arithmetic operations and potential errors gracefully.\n\n### Compiling TypeScript\n\nTo compile the TypeScript file to JavaScript, use the following command:\n\n```bash\ntsc calculator.ts\n```\n\nThis will generate a `calculator.js` file that you can run using Node.js.\n\n### Final Code\n\nHere's the complete code for `calculator.ts`:\n\n```typescript\nclass Calculator {\n    // Helper method to check if a value is a number\n    private static isNumber(value: any): boolean {\n        return typeof value === 'number' && !isNaN(value);\n    }\n\n    // Method for addition with input validation\n    add(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a + b;\n    }\n\n    // Method for subtraction with input validation\n    subtract(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a - b;\n    }\n\n    // Method for multiplication with input validation\n    multiply(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        return a * b;\n    }\n\n    // Method for division with input validation and error handling for division by zero\n    divide(a: any, b: any): number {\n        if (!Calculator.isNumber(a) || !Calculator.isNumber(b)) {\n            throw new TypeError(\"Both arguments must be numbers.\");\n        }\n        if (b === 0) {\n            throw new Error(\"Division by zero is not allowed.\");\n        }\n        return a / b;\n    }\n}\n\nconst calc = new Calculator();\n\ntry {\n    console.log(\"Addition: \", calc.add(10, 5)); // Output: 15\n    console.log(\"Subtraction: \", calc.subtract(10, 5)); // Output: 5\n    console.log(\"Multiplication: \", calc.multiply(10, 5)); // Output: 50\n    console.log(\"Division: \", calc.divide(10, 5)); // Output: 2\n    console.log(\"Division by zero: \", calc.divide(10, 0)); // Should throw an error\n} catch (error) {\n    console.error(error);\n}\n\ntry {\n    console.log(\"Addition with invalid input: \", calc.add(10, \"5\" as any)); // Should throw an error\n} catch (error) {\n    console.error(error);\n}\n```\n\nThis should cover all the requirements for a basic calculator class in TypeScript with error handling. If you have any more questions or need further assistance, feel free to ask!"
    }
]