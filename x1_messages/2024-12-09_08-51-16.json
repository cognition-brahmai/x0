[
    {
        "role": "user",
        "content": "Develop a Python script that uses the FastAPI framework to create a RESTful API with endpoints for creating, reading, updating, and deleting records in a SQLite database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple RESTful API using FastAPI that interacts with a SQLite database. We'll cover the basics of setting up FastAPI, connecting to a SQLite database, and creating endpoints for CRUD operations.\n\n### Step 1: Install Required Packages\n\nFirst, you need to install FastAPI and Uvicorn (as the ASGI server). You might also want to install SQLAlchemy for database operations, but for simplicity, we'll use the built-in SQLite capabilities of Python.\n\n```bash\npip install fastapi uvicorn\n```\n\n### Step 2: Set Up the SQLite Database\n\nWe'll create a simple SQLite database with one table for this example. Let's create a `database.db` file and define a `User` table.\n\n```python\nimport sqlite3\n\n# Connect to SQLite database (creates if not exists)\nconn = sqlite3.connect('database.db')\nc = conn.cursor()\n\n# Create table\nc.execute('''CREATE TABLE IF NOT EXISTS users\n             (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)''')\n\n# Commit and close\nconn.commit()\nconn.close()\n```\n\n### Step 3: Define the Data Model\n\nIn FastAPI, you can use Pydantic for data validation. Let's define a Pydantic model for our `User`.\n\n```python\nfrom pydantic import BaseModel\n\nclass User(BaseModel):\n    id: int\n    name: str\n    age: int\n```\n\n### Step 4: Implement CRUD Operations\n\nNow, we'll create functions to handle CRUD operations.\n\n#### Create\n\nTo create a new user.\n\n```python\ndef create_user(user: User):\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    c.execute(\"INSERT INTO users (name, age) VALUES (?, ?)\", (user.name, user.age))\n    user_id = c.lastrowid\n    conn.commit()\n    conn.close()\n    return {\"id\": user_id, \"name\": user.name, \"age\": user.age}\n```\n\n#### Read\n\nTo retrieve all users or a single user by ID.\n\n```python\ndef get_all_users():\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    c.execute(\"SELECT * FROM users\")\n    users = c.fetchall()\n    conn.close()\n    return [{\"id\": row[0], \"name\": row[1], \"age\": row[2]} for row in users]\n\ndef get_user(user_id: int):\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    c.execute(\"SELECT * FROM users WHERE id=?\", (user_id,))\n    user = c.fetchone()\n    conn.close()\n    if user:\n        return {\"id\": user[0], \"name\": user[1], \"age\": user[2]}\n    else:\n        return {\"error\": \"User not found\"}\n```\n\n#### Update\n\nTo update an existing user.\n\n```python\ndef update_user(user_id: int, user: User):\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    c.execute(\"UPDATE users SET name=?, age=? WHERE id=?\", (user.name, user.age, user_id))\n    conn.commit()\n    conn.close()\n    if c.rowcount:\n        return {\"id\": user_id, \"name\": user.name, \"age\": user.age}\n    else:\n        return {\"error\": \"User not found\"}\n```\n\n#### Delete\n\nTo delete a user by ID.\n\n```python\ndef delete_user(user_id: int):\n    conn = sqlite3.connect('database.db')\n    c = conn.cursor()\n    c.execute(\"DELETE FROM users WHERE id=?\", (user_id,))\n    conn.commit()\n    conn.close()\n    if c.rowcount:\n        return {\"message\": \"User deleted\"}\n    else:\n        return {\"error\": \"User not found\"}\n```\n\n### Step 5: Create FastAPI Endpoints\n\nNow, let's set up the FastAPI app and define the endpoints.\n\n```python\nfrom fastapi import FastAPI, HTTPException\n\napp = FastAPI()\n\n@app.post(\"/users/\", response_model=User)\ndef create_user_endpoint(user: User):\n    return create_user(user)\n\n@app.get(\"/users/\", response_model=list[User])\ndef read_users():\n    return get_all_users()\n\n@app.get(\"/users/{user_id}\", response_model=User)\ndef read_user(user_id: int):\n    user = get_user(user_id)\n    if \"error\" in user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return user\n\n@app.put(\"/users/{user_id}\", response_model=User)\ndef update_user_endpoint(user_id: int, user: User):\n    updated_user = update_user(user_id, user)\n    if \"error\" in updated_user:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return updated_user\n\n@app.delete(\"/users/{user_id}\", response_model=dict)\ndef delete_user_endpoint(user_id: int):\n    result = delete_user(user_id)\n    if \"error\" in result:\n        raise HTTPException(status_code=404, detail=\"User not found\")\n    return result\n```\n\n### Step 6: Run the API\n\nTo run the API, use Uvicorn:\n\n```bash\nuvicorn main:app --reload\n```\n\nReplace `main` with the name of your Python script.\n\n### Summary\n\nYou've now created a simple RESTful API using FastAPI that interacts with a SQLite database. This includes endpoints for creating, reading, updating, and deleting users. You can expand this by adding more models and endpoints as needed.\n\n### Additional Tips\n\n- **Error Handling:** Improve error handling for better user experience.\n- **Data Validation:** Use Pydantic for more robust data validation.\n- **Database Connection Pooling:** For production, consider using connection pooling.\n- **Security:** Add security measures like authentication and authorization.\n\nThis should give you a solid foundation to build upon. Happy coding!"
    }
]