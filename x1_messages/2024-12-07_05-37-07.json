[
    {
        "role": "user",
        "content": "Implement a Java program that simulates a bank system with basic operations like deposit, withdrawal, transfer, and balance inquiry. The program should also include exception handling mechanisms for cases such as insufficient funds or invalid account details. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm here to help you with implementing a Java program that simulates a bank system. This sounds like a fun project! So, basically, we need to create a system where users can deposit money, withdraw money, transfer funds between accounts, and check their balance. Also, we have to handle exceptions like insufficient funds or invalid account details. Got it.\n\nFirst, I think we need to plan out the structure of this program. Let's start by thinking about what components we need.\n\n1. **Accounts**: We need to represent bank accounts. Each account should have an ID, account holder's name, and a balance.\n\n2. **Operations**: We need methods to deposit, withdraw, transfer funds, and check balance.\n\n3. **Exception Handling**: We should handle cases where someone tries to withdraw more than the balance or uses invalid account details.\n\nLet me think about how to structure the accounts. Maybe we can create a class called `BankAccount` that holds the account details.\n\n```java\npublic class BankAccount {\n    private String accountId;\n    private String accountHolder;\n    private double balance;\n\n    public BankAccount(String accountId, String accountHolder, double initialBalance) {\n        this.accountId = accountId;\n        this.accountHolder = accountHolder;\n        this.balance = initialBalance;\n    }\n\n    // Getters and setters\n}\n```\n\nOkay, that seems straightforward. Now, we need a way to manage multiple accounts. Maybe we can have a `Bank` class that holds a list of `BankAccount` objects.\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Bank {\n    private Map<String, BankAccount> accounts;\n\n    public Bank() {\n        accounts = new HashMap<>();\n    }\n\n    public void addAccount(BankAccount account) {\n        accounts.put(account.getAccountId(), account);\n    }\n\n    public BankAccount getAccount(String accountId) {\n        return accounts.get(accountId);\n    }\n}\n```\n\nUsing a `HashMap` will allow us to quickly look up accounts by their ID, which should be efficient.\n\nNow, let's think about the operations:\n\n- **Deposit**: We need to add money to an account.\n\n- **Withdrawal**: We need to remove money from an account, but only if there are sufficient funds.\n\n- **Transfer**: We need to transfer money from one account to another.\n\n- **Balance Inquiry**: We need to check the balance of an account.\n\nFor each of these operations, we'll need to handle potential errors, like trying to withdraw more than the balance or using an invalid account ID.\n\nLet's start by implementing the deposit method in the `Bank` class.\n\n```java\npublic void deposit(String accountId, double amount) throws IllegalArgumentException {\n    BankAccount account = accounts.get(accountId);\n    if (account == null) {\n        throw new IllegalArgumentException(\"Account not found.\");\n    }\n    if (amount <= 0) {\n        throw new IllegalArgumentException(\"Deposit amount must be positive.\");\n    }\n    account.setBalance(account.getBalance() + amount);\n}\n```\n\nHere, we're checking if the account exists and if the deposit amount is positive. If not, we throw an `IllegalArgumentException` with an appropriate message.\n\nNext, the withdrawal method.\n\n```java\npublic void withdraw(String accountId, double amount) throws IllegalArgumentException, InsufficientFundsException {\n    BankAccount account = accounts.get(accountId);\n    if (account == null) {\n        throw new IllegalArgumentException(\"Account not found.\");\n    }\n    if (amount <= 0) {\n        throw new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n    }\n    if (account.getBalance() < amount) {\n        throw new InsufficientFundsException(\"Insufficient funds in account.\");\n    }\n    account.setBalance(account.getBalance() - amount);\n}\n```\n\nI've introduced a custom exception here called `InsufficientFundsException`. We'll need to define that.\n\n```java\npublic class InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n```\n\nSimilarly, for the transfer method, we need to handle both the withdrawal from one account and the deposit into another, ensuring that both operations succeed or fail together.\n\n```java\npublic void transfer(String fromAccountId, String toAccountId, double amount) \n    throws IllegalArgumentException, InsufficientFundsException {\n    BankAccount fromAccount = accounts.get(fromAccountId);\n    BankAccount toAccount = accounts.get(toAccountId);\n    if (fromAccount == null || toAccount == null) {\n        throw new IllegalArgumentException(\"One or both accounts not found.\");\n    }\n    if (amount <= 0) {\n        throw new IllegalArgumentException(\"Transfer amount must be positive.\");\n    }\n    if (fromAccount.getBalance() < amount) {\n        throw new InsufficientFundsException(\"Insufficient funds in the from account.\");\n    }\n    fromAccount.setBalance(fromAccount.getBalance() - amount);\n    toAccount.setBalance(toAccount.getBalance() + amount);\n}\n```\n\nFor balance inquiry, it's straightforward.\n\n```java\npublic double getBalance(String accountId) throws IllegalArgumentException {\n    BankAccount account = accounts.get(accountId);\n    if (account == null) {\n        throw new IllegalArgumentException(\"Account not found.\");\n    }\n    return account.getBalance();\n}\n```\n\nNow, to use this bank system, we need a way to interact with it. Maybe we can create a simple command-line interface where users can enter commands like \"deposit 12345 100\" to deposit 100 into account 12345.\n\nLet's think about how to implement that.\n\nFirst, we'll need to create a `Bank` object and add some sample accounts to it.\n\n```java\npublic class BankSystem {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addAccount(new BankAccount(\"12345\", \"Alice\", 1000));\n        bank.addAccount(new BankAccount(\"67890\", \"Bob\", 500));\n\n        // Now, we can perform operations on these accounts.\n        try {\n            bank.deposit(\"12345\", 500);\n            System.out.println(\"Deposit successful.\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            bank.withdraw(\"67890\", 200);\n            System.out.println(\"Withdrawal successful.\");\n        } catch (IllegalArgumentException | InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            bank.transfer(\"12345\", \"67890\", 300);\n            System.out.println(\"Transfer successful.\");\n        } catch (IllegalArgumentException | InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            double balance = bank.getBalance(\"12345\");\n            System.out.println(\"Balance: \" + balance);\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```\n\nThis is a basic example to demonstrate how the bank system works. For a full-fledged application, we would need to handle user inputs, maybe persist data to a database, and provide a more user-friendly interface.\n\nAlso, in a real-world scenario, we'd need to consider security aspects like encrypting account details and ensuring that only authorized users can perform operations on accounts.\n\nBut for now, this should satisfy the requirements of simulating a bank system with basic operations and exception handling.\n\nIf you have any specific requirements or want to add more features, feel free to let me know!\n\n**Final Solution**\n\nTo create a simple bank system simulation in Java, we need to implement basic operations such as deposit, withdrawal, transfer, and balance inquiry, along with exception handling for cases like insufficient funds or invalid account details.\n\n### Approach\n\n1. **BankAccount Class**: Represents a bank account with an ID, account holder's name, and balance.\n2. **Bank Class**: Manages multiple accounts using a HashMap for quick lookups. Implements methods for deposit, withdrawal, transfer, and balance inquiry with appropriate exception handling.\n3. **Custom Exceptions**: Define custom exceptions like `InsufficientFundsException` to handle specific error cases.\n4. **BankSystem Class**: Provides a main method to demonstrate the functionality of the bank system with sample accounts and operations.\n\n### Solution Code\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\n// Class to represent a bank account\nclass BankAccount {\n    private String accountId;\n    private String accountHolder;\n    private double balance;\n\n    public BankAccount(String accountId, String accountHolder, double initialBalance) {\n        this.accountId = accountId;\n        this.accountHolder = accountHolder;\n        this.balance = initialBalance;\n    }\n\n    public String getAccountId() {\n        return accountId;\n    }\n\n    public String getAccountHolder() {\n        return accountHolder;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n\n    public void setBalance(double balance) {\n        this.balance = balance;\n    }\n}\n\n// Class to represent the bank and manage accounts\nclass Bank {\n    private Map<String, BankAccount> accounts;\n\n    public Bank() {\n        accounts = new HashMap<>();\n    }\n\n    public void addAccount(BankAccount account) {\n        accounts.put(account.getAccountId(), account);\n    }\n\n    public BankAccount getAccount(String accountId) {\n        return accounts.get(accountId);\n    }\n\n    public void deposit(String accountId, double amount) throws IllegalArgumentException {\n        BankAccount account = accounts.get(accountId);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Deposit amount must be positive.\");\n        }\n        account.setBalance(account.getBalance() + amount);\n    }\n\n    public void withdraw(String accountId, double amount) throws IllegalArgumentException, InsufficientFundsException {\n        BankAccount account = accounts.get(accountId);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n        }\n        if (account.getBalance() < amount) {\n            throw new InsufficientFundsException(\"Insufficient funds in account.\");\n        }\n        account.setBalance(account.getBalance() - amount);\n    }\n\n    public void transfer(String fromAccountId, String toAccountId, double amount)\n            throws IllegalArgumentException, InsufficientFundsException {\n        BankAccount fromAccount = accounts.get(fromAccountId);\n        BankAccount toAccount = accounts.get(toAccountId);\n        if (fromAccount == null || toAccount == null) {\n            throw new IllegalArgumentException(\"One or both accounts not found.\");\n        }\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Transfer amount must be positive.\");\n        }\n        if (fromAccount.getBalance() < amount) {\n            throw new InsufficientFundsException(\"Insufficient funds in the from account.\");\n        }\n        fromAccount.setBalance(fromAccount.getBalance() - amount);\n        toAccount.setBalance(toAccount.getBalance() + amount);\n    }\n\n    public double getBalance(String accountId) throws IllegalArgumentException {\n        BankAccount account = accounts.get(accountId);\n        if (account == null) {\n            throw new IllegalArgumentException(\"Account not found.\");\n        }\n        return account.getBalance();\n    }\n}\n\n// Custom exception for insufficient funds\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\n// Class to run the bank system simulation\npublic class BankSystem {\n    public static void main(String[] args) {\n        Bank bank = new Bank();\n        bank.addAccount(new BankAccount(\"12345\", \"Alice\", 1000));\n        bank.addAccount(new BankAccount(\"67890\", \"Bob\", 500));\n\n        // Perform operations\n        try {\n            bank.deposit(\"12345\", 500);\n            System.out.println(\"Deposit successful.\");\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            bank.withdraw(\"67890\", 200);\n            System.out.println(\"Withdrawal successful.\");\n        } catch (IllegalArgumentException | InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            bank.transfer(\"12345\", \"67890\", 300);\n            System.out.println(\"Transfer successful.\");\n        } catch (IllegalArgumentException | InsufficientFundsException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n\n        try {\n            double balance = bank.getBalance(\"12345\");\n            System.out.println(\"Balance: \" + balance);\n        } catch (IllegalArgumentException e) {\n            System.out.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n\n- **BankAccount Class**: Holds account details and provides methods to access and modify them.\n- **Bank Class**: Manages accounts and performs transactions, including deposit, withdrawal, transfer, and balance inquiry, with necessary error checks.\n- **InsufficientFundsException**: A custom exception to handle cases where a user tries to withdraw or transfer more funds than available.\n- **BankSystem Class**: Demonstrates the functionality of the bank system by creating sample accounts and performing various operations, handling exceptions as needed.\n\nThis solution provides a basic simulation of a bank system in Java, suitable for educational purposes or as a starting point for more complex applications."
    }
]