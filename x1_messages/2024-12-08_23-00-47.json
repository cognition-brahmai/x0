[
    {
        "role": "user",
        "content": "Implement a Ruby script that reads a CSV file containing user data (name, age, email) and filters out users who are under 18 years old. Save the filtered data in a new CSV file.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I have this task to implement a Ruby script that reads a CSV file with user data\u2014name, age, and email\u2014and filters out users who are under 18 years old. Then, I need to save the filtered data into a new CSV file. Okay, let's break this down step by step.\n\nFirst, I need to make sure I have Ruby installed on my system. I can check that by running `ruby -v` in the terminal. If it's installed, it should show me the version. Assuming it is, I can proceed.\n\nNext, I need to handle CSV files in Ruby. I know that Ruby has a built-in CSV library, so I don't need to install anything extra. That's convenient. So, I'll need to require 'csv' at the beginning of my script.\n\nNow, I need to read the input CSV file. The file should have columns for name, age, and email. I need to parse this file and filter out users who are under 18. That means I need to look at the age column and keep only those records where age is 18 or above.\n\nOnce I have the filtered list, I need to write it to a new CSV file with the same columns: name, age, and email.\n\nLet me think about the structure of the script. I'll need to:\n\n1. Require the necessary libraries.\n\n2. Read the input CSV file.\n\n3. Iterate through each row, check the age, and collect rows where age >= 18.\n\n4. Write these filtered rows to a new CSV file.\n\nAlso, I should consider edge cases, like what if the CSV file is empty, or what if the age column has non-numeric values. But for now, let's assume that the CSV is well-formed.\n\nLet me sketch a rough outline of the code:\n\n```ruby\nrequire 'csv'\n\n# Read the input CSV\ncsv_text = File.read('input.csv')\n\n# Parse the CSV\ncsv = CSV.parse(csv_text, headers: true)\n\n# Filter rows where age >= 18\nfiltered_csv = csv.select { |row| row['age'].to_i >= 18 }\n\n# Write to a new CSV file\nCSV.open('output.csv', 'w') do |csv_out|\n  csv_out << ['name', 'age', 'email']\n  filtered_csv.each do |row|\n    csv_out << [row['name'], row['age'], row['email']]\n  end\nend\n```\n\nOkay, this looks straightforward. Let me explain what's happening here.\n\nFirst, I'm requiring the CSV library.\n\nThen, I'm reading the input CSV file named 'input.csv'. I'm assuming that the input file is in the same directory as the script.\n\nI'm parsing the CSV with headers, so that I can access columns by their names, like row['name'], row['age'], and row['email'].\n\nThen, I'm selecting only those rows where the age is 18 or older. I'm converting the age to an integer using to_i, assuming that the age is a numeric string in the CSV.\n\nFinally, I'm writing the filtered rows to 'output.csv'. I'm opening the file in write mode, writing the headers first, and then each filtered row.\n\nI should also consider error handling, like what if the input file doesn't exist, or there are rows with missing age values. For now, I'll keep it simple, but in a more robust script, I should add checks and handle such cases gracefully.\n\nAdditionally, I might want to specify the CSV options more explicitly, like setting the col_sep (column separator) if it's not the default comma.\n\nAlso, I should ensure that the script can handle large CSV files efficiently, but since this is a simple script, and assuming the CSV isn't enormous, this approach should work fine.\n\nLet me think about how to run this script. I'll need to have Ruby installed, and place the input.csv in the same directory as the script. Then, I can run the script using `ruby script.rb`, and it should generate output.csv with the filtered data.\n\nI might also want to make the input and output file names configurable, perhaps by passing them as arguments to the script. That would make it more flexible.\n\nFor example, I could modify the script to accept input and output file names from the command line:\n\n```ruby\nrequire 'csv'\n\nif ARGV.length < 2\n  puts \"Usage: ruby script.rb input.csv output.csv\"\n  exit\nend\n\ninput_file = ARGV[0]\noutput_file = ARGV[1]\n\ncsv_text = File.read(input_file)\n\ncsv = CSV.parse(csv_text, headers: true)\n\nfiltered_csv = csv.select { |row| row['age'].to_i >= 18 }\n\nCSV.open(output_file, 'w') do |csv_out|\n  csv_out << ['name', 'age', 'email']\n  filtered_csv.each do |row|\n    csv_out << [row['name'], row['age'], row['email']]\n  end\nend\n```\n\nNow, I can run the script like `ruby script.rb input.csv output.csv`, which is more flexible.\n\nI should also consider handling cases where the input file doesn't exist or is unreadable. I can add exception handling for that.\n\nSimilarly, I can handle cases where the age column is missing or has non-numeric values by adding checks and perhaps skipping those rows or handling them differently.\n\nBut for the scope of this task, the above script should suffice.\n\nLet me test this logic with a sample input CSV.\n\nSuppose input.csv contains:\n\n```\nname,age,email\n\nAlice,25,a@example.com\n\nBob,17,b@example.com\n\nCharlie,19,c@example.com\n\n```\n\nAfter running the script, output.csv should contain:\n\n```\nname,age,email\n\nAlice,25,a@example.com\n\nCharlie,19,c@example.com\n\n```\n\nYes, that looks correct.\n\nI think this script meets the requirements. It reads the input CSV, filters users who are 18 or older, and writes the filtered data to a new CSV file.\n\n## Final Solution\nTo solve this problem, we will implement a Ruby script that reads a CSV file containing user data (name, age, email), filters out users who are under 18 years old, and saves the filtered data into a new CSV file.\n\n### Approach\n1. **Read the Input CSV:** Use Ruby's built-in CSV library to read and parse the input CSV file.\n2. **Filter Users:** Select users who are 18 years old or older based on the age column.\n3. **Write to Output CSV:** Write the filtered user data to a new CSV file with the same columns.\n\n### Solution Code\n```ruby\nrequire 'csv'\n\n# Check if correct number of arguments are provided\nif ARGV.length < 2\n  puts \"Usage: ruby script.rb input.csv output.csv\"\n  exit\nend\n\n# Assign input and output file names from arguments\ninput_file = ARGV[0]\noutput_file = ARGV[1]\n\n# Read the input CSV file\ncsv_text = File.read(input_file)\n\n# Parse the CSV data with headers\ncsv = CSV.parse(csv_text, headers: true)\n\n# Filter rows where age is 18 or older\nfiltered_csv = csv.select { |row| row['age'].to_i >= 18 }\n\n# Write the filtered rows to the output CSV file\nCSV.open(output_file, 'w') do |csv_out|\n  csv_out << ['name', 'age', 'email']\n  filtered_csv.each do |row|\n    csv_out << [row['name'], row['age'], row['email']]\n  end\nend\n```\n\n### Explanation\n1. **Reading the Input CSV:**\n   - We use `File.read` to read the contents of the input CSV file.\n   - `CSV.parse` is used to parse the CSV data, recognizing the first row as headers, which allows us to access columns by name (e.g., `row['name']`).\n\n2. **Filtering Users:**\n   - We select rows where the age column, converted to an integer with `to_i`, is greater than or equal to 18.\n\n3. **Writing to Output CSV:**\n   - We open the output CSV file in write mode.\n   - We write the headers first (`name`, `age`, `email`).\n   - We iterate over the filtered rows and write each row's name, age, and email to the output file.\n\nThis script provides a straightforward way to filter users based on age and save the results to a new CSV file, making it easy to integrate into larger data processing workflows."
    }
]