[
    {
        "role": "user",
        "content": "Create a Python class for a singly linked list with methods to add elements at the beginning, end, and any specific position in the list. Also include methods to delete elements by value and position, and to display the contents of the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you create a Python class for a singly linked list with the specified methods. Below is the implementation:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            print(\"Value not found in the list.\")\n            return\n        current.next = current.next.next\n\n    def delete_by_position(self, position):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if not self.head:\n            print(\"List is empty.\")\n            return\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current or not current.next:\n            print(\"Position out of range.\")\n            return\n        current.next = current.next.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" -> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_beginning(3)\n    sll.add_at_end(5)\n    sll.add_at_position(1, 4)\n    sll.display()  # Output: 3 -> 4 -> 5 -> None\n    sll.delete_by_value(4)\n    sll.display()  # Output: 3 -> 5 -> None\n    sll.delete_by_position(1)\n    sll.display()  # Output: 3 -> None\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents each element in the linked list with `data` and `next` attributes.\n\n2. **SinglyLinkedList Class**:\n   - **`__init__`**: Initializes the head of the list.\n   - **`add_at_beginning`**: Adds a new node with the given data at the beginning of the list.\n   - **`add_at_end`**: Adds a new node with the given data at the end of the list.\n   - **`add_at_position`**: Adds a new node with the given data at the specified position.\n   - **`delete_by_value`**: Deletes the first node containing the specified value.\n   - **`delete_by_position`**: Deletes the node at the specified position.\n   - **`display`**: Prints the elements of the list.\n\nThis implementation covers all the required functionalities for a singly linked list, including addition and deletion operations at different positions and by value."
    }
]