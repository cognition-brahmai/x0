[
    {
        "role": "user",
        "content": "In Java, write a program that simulates a parking lot system. The parking lot has different types of slots like Compact, Large, Handicapped etc. Vehicles come in different sizes too - Motorcycle, Car, Bus etc. Your task is to assign appropriate slot to incoming vehicle based on its size."
    },
    {
        "role": "assistant",
        "content": "I'm going to attempt to design a simple parking lot system in Java that can handle different types of vehicles and parking slots. The main goal is to assign appropriate parking slots to incoming vehicles based on their size.\n\nFirst, I need to define the types of parking slots and vehicles. According to the problem, parking slots can be Compact, Large, Handicapped, etc., and vehicles can be Motorcycle, Car, Bus, etc. I should create classes or enums to represent these types.\n\nLet's start by defining enums for VehicleType and SlotType.\n\n```java\npublic enum VehicleType {\n    MOTORCYCLE, CAR, BUS\n}\n\npublic enum SlotType {\n    COMPACT, LARGE, HANDICAPPED\n}\n```\n\nNext, I need to define a class for ParkingSlot that knows its type and whether it's available or not.\n\n```java\npublic class ParkingSlot {\n    private SlotType type;\n    private boolean isAvailable;\n\n    public ParkingSlot(SlotType type) {\n        this.type = type;\n        this.isAvailable = true;\n    }\n\n    public SlotType getType() {\n        return type;\n    }\n\n    public boolean isAvailable() {\n        return isAvailable;\n    }\n\n    public void setAvailable(boolean available) {\n        isAvailable = available;\n    }\n}\n```\n\nNow, I need to define a Vehicle class that knows its type.\n\n```java\npublic class Vehicle {\n    private VehicleType type;\n\n    public Vehicle(VehicleType type) {\n        this.type = type;\n    }\n\n    public VehicleType getType() {\n        return type;\n    }\n}\n```\n\nThe core of the system is the ParkingLot class, which manages the parking slots and can assign slots to incoming vehicles.\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class ParkingLot {\n    private List<ParkingSlot> slots;\n\n    public ParkingLot() {\n        this.slots = new ArrayList<>();\n        // Initialize slots with some data for testing\n        slots.add(new ParkingSlot(SlotType.COMPACT));\n        slots.add(new ParkingSlot(SlotType.LARGE));\n        slots.add(new ParkingSlot(SlotType.HANDICAPPED));\n        slots.add(new ParkingSlot(SlotType.COMPACT));\n    }\n\n    public ParkingSlot park(Vehicle vehicle) {\n        for (ParkingSlot slot : slots) {\n            if (isVehicleCompatibleWithSlot(vehicle, slot) && slot.isAvailable()) {\n                slot.setAvailable(false);\n                return slot;\n            }\n        }\n        return null; // No suitable slot found\n    }\n\n    private boolean isVehicleCompatibleWithSlot(Vehicle vehicle, ParkingSlot slot) {\n        switch (vehicle.getType()) {\n            case MOTORCYCLE:\n                return slot.getType() == SlotType.COMPACT ||\n                       slot.getType() == SlotType.HANDICAPPED;\n            case CAR:\n                return slot.getType() == SlotType.COMPACT ||\n                       slot.getType() == SlotType.LARGE ||\n                       slot.getType() == SlotType.HANDICAPPED;\n            case BUS:\n                return slot.getType() == SlotType.LARGE;\n            default:\n                return false;\n        }\n    }\n}\n```\n\nIn this simple implementation, the park method iterates through all parking slots and assigns the first available slot that is compatible with the vehicle's type.\n\nTo make this more efficient, especially with a large number of slots, I could organize the slots into lists based on their type and directly check the appropriate list based on the vehicle's type.\n\nLet's improve the ParkingLot class by categorizing slots based on their type.\n\n```java\nimport java.util.*;\n\npublic class ParkingLot {\n    private Map<SlotType, List<ParkingSlot>> slots;\n\n    public ParkingLot() {\n        this.slots = new EnumMap<>(SlotType.class);\n        for (SlotType type : SlotType.values()) {\n            slots.put(type, new ArrayList<>());\n        }\n        // Initialize slots with some data for testing\n        addSlot(new ParkingSlot(SlotType.COMPACT));\n        addSlot(new ParkingSlot(SlotType.LARGE));\n        addSlot(new ParkingSlot(SlotType.HANDICAPPED));\n        addSlot(new ParkingSlot(SlotType.COMPACT));\n    }\n\n    public void addSlot(ParkingSlot slot) {\n        slots.get(slot.getType()).add(slot);\n    }\n\n    public ParkingSlot park(Vehicle vehicle) {\n        for (SlotType type : getCompatibleSlotTypes(vehicle.getType())) {\n            for (ParkingSlot slot : slots.get(type)) {\n                if (slot.isAvailable()) {\n                    slot.setAvailable(false);\n                    return slot;\n                }\n            }\n        }\n        return null; // No suitable slot found\n    }\n\n    private List<SlotType> getCompatibleSlotTypes(VehicleType vehicleType) {\n        switch (vehicleType) {\n            case MOTORCYCLE:\n                return Arrays.asList(SlotType.COMPACT, SlotType.HANDICAPPED);\n            case CAR:\n                return Arrays.asList(SlotType.COMPACT, SlotType.LARGE, SlotType.HANDICAPPED);\n            case BUS:\n                return Arrays.asList(SlotType.LARGE);\n            default:\n                return new ArrayList<>();\n        }\n    }\n}\n```\n\nIn this improved version, I use a Map to group parking slots by their type, which makes it faster to look for compatible slots.\n\nFinally, I can write a simple test to see if this system works.\n\n```java\npublic class Main {\n    public static void main(String[] args) {\n        ParkingLot parkingLot = new ParkingLot();\n        Vehicle motorcycle = new Vehicle(VehicleType.MOTORCYCLE);\n        Vehicle car = new Vehicle(VehicleType.CAR);\n        Vehicle bus = new Vehicle(VehicleType.BUS);\n\n        ParkingSlot slot1 = parkingLot.park(motorcycle);\n        ParkingSlot slot2 = parkingLot.park(car);\n        ParkingSlot slot3 = parkingLot.park(bus);\n\n        System.out.println(\"Motorcycle parked in: \" + slot1);\n        System.out.println(\"Car parked in: \" + slot2);\n        System.out.println(\"Bus parked in: \" + slot3);\n    }\n}\n```\n\nThis is a very basic implementation and can be expanded in many ways. For example:\n\n- Adding more types of vehicles and slots.\n- Implementing different pricing for different slot types.\n- Keeping track of the time a vehicle has been parked and calculating parking fees.\n- Implementing exit functionality to make a slot available again when a vehicle leaves.\n- Handling the case where no suitable slot is available by waiting for a slot to become free or redirecting to another parking lot.\n- Using a more sophisticated algorithm to assign slots, such as assigning the closest available slot or balancing the load across different areas of the parking lot.\n\nFor now, this should serve as a starting point for a parking lot system in Java."
    }
]