[
    {
        "role": "user",
        "content": "Write a Python script to implement a stack data structure with push, pop, and peek operations, along with checking if the stack is empty or full."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! A stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack is the first one to be removed. In Python, we can implement a stack using a list, which provides dynamic resizing and various methods to manipulate the elements.\n\nTo create a stack, we'll define a class called `Stack` that will have the following methods:\n\n1. `__init__(self, capacity)`: Initializes the stack with a specified capacity.\n2. `push(self, item)`: Adds an item to the top of the stack.\n3. `pop(self)`: Removes and returns the item from the top of the stack.\n4. `peek(self)`: Returns the item at the top of the stack without removing it.\n5. `is_empty(self)`: Checks if the stack is empty.\n6. `is_full(self)`: Checks if the stack is full based on the predefined capacity.\n\nHere's how you can implement this:\n\n```python\nclass Stack:\n    def __init__(self, capacity):\n        self.capacity = capacity\n        self.stack = []\n\n    def push(self, item):\n        if not self.is_full():\n            self.stack.append(item)\n        else:\n            print(\"Stack is full. Cannot push item.\")\n\n    def pop(self):\n        if not self.is_empty():\n            return self.stack.pop()\n        else:\n            print(\"Stack is empty. Cannot pop item.\")\n            return None\n\n    def peek(self):\n        if not self.is_empty():\n            return self.stack[-1]\n        else:\n            print(\"Stack is empty. Cannot peek.\")\n            return None\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n    def is_full(self):\n        return len(self.stack) == self.capacity\n\n# Example usage:\nstack = Stack(5)\nstack.push(1)\nstack.push(2)\nprint(stack.peek())  # Output: 2\nprint(stack.pop())   # Output: 2\nprint(stack.is_empty())  # Output: False\nstack.push(3)\nstack.push(4)\nstack.push(5)\nstack.push(6)  # Output: Stack is full. Cannot push item.\nprint(stack.is_full())  # Output: True\n```\n\nIn this implementation:\n\n- The `__init__` method initializes the stack with a given capacity and an empty list to store the elements.\n\n- The `push` method adds an item to the top of the stack if the stack is not full.\n\n- The `pop` method removes and returns the top item from the stack if the stack is not empty.\n\n- The `peek` method returns the top item without removing it, provided the stack is not empty.\n\n- The `is_empty` method checks if the stack has no items.\n\n- The `is_full` method checks if the stack has reached its predefined capacity.\n\nThis simple stack implementation should serve as a good starting point for understanding and using stacks in Python. If you have any questions or need further explanations, feel free to ask!"
    }
]