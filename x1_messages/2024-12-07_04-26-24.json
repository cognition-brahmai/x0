[
    {
        "role": "user",
        "content": "Write SQL queries to perform various operations on a database of your choice. These operations should include creating tables, inserting data, updating data, deleting data, and querying data. Be sure to demonstrate the use of joins, subqueries, and aggregate functions."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to write some SQL queries to perform different operations on a database. I'll choose a simple database schema for a library management system. This will include tables for books, authors, and borrowers.\n\nFirst, I need to create the tables.\n\n**1. Creating Tables**\n\nI'll start by creating a table for authors.\n\n```sql\nCREATE TABLE authors (\n    author_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    birth_date DATE\n);\n```\n\nNext, a table for books.\n\n```sql\nCREATE TABLE books (\n    book_id INT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(200) NOT NULL,\n    author_id INT,\n    publication_year YEAR,\n    FOREIGN KEY (author_id) REFERENCES authors(author_id)\n);\n```\n\nThen, a table for borrowers.\n\n```sql\nCREATE TABLE borrowers (\n    borrower_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100),\n    phone VARCHAR(15)\n);\n```\n\nAnd finally, a table to track book borrowings.\n\n```sql\nCREATE TABLE borrowings (\n    borrowing_id INT PRIMARY KEY AUTO_INCREMENT,\n    book_id INT,\n    borrower_id INT,\n    borrow_date DATE,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES books(book_id),\n    FOREIGN KEY (borrower_id) REFERENCES borrowers(borrower_id)\n);\n```\n\n**2. Inserting Data**\n\nNow, I'll insert some data into these tables.\n\nInserting authors:\n\n```sql\nINSERT INTO authors (name, birth_date) VALUES\n('J.K. Rowling', '1965-07-31'),\n('George Orwell', '1903-06-25'),\n('Agatha Christie', '1890-09-15');\n```\n\nInserting books:\n\n```sql\nINSERT INTO books (title, author_id, publication_year) VALUES\n('Harry Potter and the Sorcerer''s Stone', 1, 1997),\n('1984', 2, 1949),\n('Murder on the Orient Express', 3, 1934);\n```\n\nInserting borrowers:\n\n```sql\nINSERT INTO borrowers (name, email, phone) VALUES\n('Alice Smith', 'alice.smith@example.com', '123-456-7890'),\n('Bob Johnson', 'bob.johnson@example.com', '234-567-8901');\n```\n\nInserting borrowings:\n\n```sql\nINSERT INTO borrowings (book_id, borrower_id, borrow_date, return_date) VALUES\n(1, 1, '2023-01-15', '2023-02-15'),\n(2, 2, '2023-01-20', NULL);\n```\n\n**3. Updating Data**\n\nLet's say we need to update the return date for a borrowing.\n\n```sql\nUPDATE borrowings\nSET return_date = '2023-02-28'\nWHERE borrowing_id = 1;\n```\n\n**4. Deleting Data**\n\nIf a borrower returns a book, we might want to delete the borrowing record.\n\n```sql\nDELETE FROM borrowings\nWHERE borrowing_id = 1;\n```\n\n**5. Querying Data**\n\nNow, let's perform some queries to retrieve data.\n\n**a. Simple Select**\n\nRetrieve all books.\n\n```sql\nSELECT * FROM books;\n```\n\n**b. Join Operations**\n\nRetrieve book title and author name.\n\n```sql\nSELECT books.title, authors.name\nFROM books\nJOIN authors ON books.author_id = authors.author_id;\n```\n\n**c. Subqueries**\n\nFind all borrowers who have borrowed books by a specific author.\n\n```sql\nSELECT DISTINCT borrowers.name\nFROM borrowers\nJOIN borrowings ON borrowers.borrower_id = borrowings.borrower_id\nJOIN books ON borrowings.book_id = books.book_id\nWHERE books.author_id = (\n    SELECT author_id\n    FROM authors\n    WHERE name = 'J.K. Rowling'\n);\n```\n\n**d. Aggregate Functions**\n\nFind the number of books borrowed by each borrower.\n\n```sql\nSELECT borrowers.name, COUNT(borrowings.borrowing_id) AS num_borrowed\nFROM borrowers\nLEFT JOIN borrowings ON borrowers.borrower_id = borrowings.borrower_id\nGROUP BY borrowers.borrower_id;\n```\n\n**e. Complex Query with Joins and Aggregates**\n\nFind the total number of books borrowed per author.\n\n```sql\nSELECT authors.name, COUNT(borrowings.borrowing_id) AS total_borrowed\nFROM authors\nJOIN books ON authors.author_id = books.author_id\nLEFT JOIN borrowings ON books.book_id = borrowings.book_id\nGROUP BY authors.author_id;\n```\n\nThese queries cover a range of operations from basic CRUD to more complex joins and aggregations, demonstrating the versatility of SQL in managing and retrieving data from relational databases."
    }
]