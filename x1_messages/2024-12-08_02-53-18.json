[
    {
        "role": "user",
        "content": "Build a Python script that downloads images from a list of URLs, resizes them to a specified dimension using the Pillow library, and uploads the resized images to an Azure Blob Storage container.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to build a Python script that downloads images from a list of URLs, resizes them using the Pillow library, and then uploads the resized images to an Azure Blob Storage container. Sounds like a fun project! Let's break it down into smaller steps so I can tackle each part one by one.\n\nFirst, I need to download images from a list of URLs. That should be straightforward. I can use the `requests` library to get the image data from each URL. I'll need to make sure that the URLs are valid and that the images are accessible.\n\nNext, I need to resize these images to a specified dimension. I've heard of the Pillow library, which is a fork of the Python Imaging Library (PIL). It should have all the tools I need to open the image data, resize it, and save it back in a format that can be uploaded.\n\nFinally, I need to upload these resized images to an Azure Blob Storage container. I'm not super familiar with Azure, but I know they have official SDKs for Python, so I should be able to find documentation on how to upload files to blob storage.\n\nLet me start by making sure I have all the necessary libraries installed. I'll need `requests` for downloading the images, `Pillow` for image processing, and the `azure-storage-blob` library for interacting with Azure Blob Storage.\n\nI can install them using pip:\n\n```bash\npip install requests Pillow azure-storage-blob\n```\n\nAlright, now let's think about the structure of the script. I should probably define the list of image URLs, the desired resize dimensions, and the connection details for Azure Blob Storage.\n\nFor the Azure part, I need to know the storage account name, the container name, and probably the storage account key or a connection string for authentication.\n\nI should also consider error handling. For example, what if an image URL is invalid? Or if there's an issue resizing the image? Or if there's a problem uploading to Azure? It would be good to catch these exceptions and maybe log an error message.\n\nLet me sketch out a rough outline of the script:\n\n1. Import necessary libraries.\n\n2. Define the list of image URLs.\n\n3. Specify the resize dimensions (width and height).\n\n4. Set up Azure Blob Storage connection.\n\n5. For each URL in the list:\n\na. Download the image.\n\nb. Check if the download was successful.\n\nc. Open the image with Pillow.\n\nd. Resize the image to the specified dimensions.\n\ne. Save the resized image to a temporary file.\n\nf. Upload the temporary file to Azure Blob Storage.\n\ng. Optionally, delete the temporary file.\n\n6. Log any errors that occur during these steps.\n\nI should also consider whether I want to overwrite existing blobs in the container or give each resized image a unique name.\n\nMaybe I can use the original URL's filename, if available, or generate a unique filename for each image.\n\nLet me look into how to extract the filename from a URL using Python. I think the `os` library and `urlparse` can help with that.\n\nAlso, I need to make sure that the image formats are compatible with Pillow. Most common formats like JPEG, PNG, and GIF should be supported, but there might be edge cases.\n\nAlright, let's start writing some code. First, I'll import the necessary libraries.\n\n```python\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\nimport os\nfrom urllib.parse import urlparse\n```\n\nNext, I'll define the list of image URLs. For testing purposes, I'll use a couple of sample URLs.\n\n```python\nimage_urls = [\n    \"http://example.com/image1.jpg\",\n    \"http://example.com/image2.png\"\n]\n```\n\nThen, specify the resize dimensions.\n\n```python\nresize_width = 800\nresize_height = 600\n```\n\nNow, set up the Azure Blob Storage connection. I need to provide the connection string and the container name.\n\n```python\nconnection_string = \"your_connection_string_here\"\ncontainer_name = \"your_container_name_here\"\n```\n\nI should probably set this up using the `BlobServiceClient`.\n\n```python\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\ncontainer_client = blob_service_client.get_container_client(container_name)\n```\n\nNow, for each URL in the list, I'll perform the download, resize, and upload steps.\n\nFirst, download the image using `requests`.\n\n```python\nresponse = requests.get(url)\nif response.status_code == 200:\n    image_data = response.content\nelse:\n    print(f\"Failed to download {url}\")\n    continue\n```\n\nThen, open the image with Pillow.\n\n```python\nimage = Image.open(BytesIO(image_data))\n```\n\nResize the image.\n\n```python\nresized_image = image.resize((resize_width, resize_height))\n```\n\nSave the resized image to a temporary file. I need to decide on a filename. Maybe extract the filename from the URL or generate a unique name.\n\n```python\nparsed_url = urlparse(url)\nfilename = os.path.basename(parsed_url.path)\nif not filename:\n    filename = f\"image_{i}.jpg\"  # Fallback filename\n    i += 1\ntemp_file_path = f\"temp_{filename}\"\nresized_image.save(temp_file_path)\n```\n\nUpload the temporary file to Azure Blob Storage.\n\n```python\nwith open(temp_file_path, \"rb\") as data:\n    blob_client = blob_service_client.get_blob_client(container=container_name, blob=filename)\n    blob_client.upload_blob(data, overwrite=True)\n```\n\nFinally, delete the temporary file.\n\n```python\nos.remove(temp_file_path)\n```\n\nI should wrap this all in a try-except block to handle any exceptions that might occur.\n\nAlso, I should think about handling different image formats and ensuring that the saved file has the correct extension.\n\nMaybe I can determine the file format using Pillow and set the filename extension accordingly.\n\n```python\nfile_format = image.format\nfilename = f\"image_{i}.{file_format.lower()}\"\n```\n\nWait, but image.format might not always be reliable. Maybe I should use the MIME type from the response headers to determine the file extension.\n\nAlternatively, I can specify a default extension like '.jpg' or '.png'.\n\nThis might require a bit more research to handle properly.\n\nAlso, I need to consider if the images are being resized correctly. Sometimes, aspect ratios might not match the specified dimensions, so I might need to handle aspect ratio preservation.\n\nPillow's `resize` method doesn't maintain aspect ratio by default. If I specify a new width and height, it will stretch the image to fit those dimensions.\n\nIf I want to maintain the aspect ratio, I might need to calculate the new dimensions based on the original image's width and height.\n\nLet me look up how to resize images while maintaining aspect ratio using Pillow.\n\nFrom what I've found, I can calculate the new dimensions by keeping the aspect ratio constant.\n\nHere's an example:\n\n```python\ndef get_resized_dimensions(original_width, original_height, target_width, target_height):\n    aspect_ratio = original_width / original_height\n    new_height = target_width / aspect_ratio\n    if new_height > target_height:\n        new_height = target_height\n        new_width = new_height * aspect_ratio\n    else:\n        new_width = target_width\n    return int(new_width), int(new_height)\n```\n\nThen, use these new dimensions for resizing.\n\n```python\nnew_width, new_height = get_resized_dimensions(image.width, image.height, resize_width, resize_height)\nresized_image = image.resize((new_width, new_height))\n```\n\nThis should help maintain the aspect ratio.\n\nNow, I need to consider how to handle different image formats and ensure that the uploaded files have the correct extensions.\n\nMaybe I can use the `Imaging.MIME` module to guess the format based on the headers.\n\nAlternatively, I can save all images in a standard format like JPEG or PNG.\n\nFor simplicity, I'll save all resized images as JPEG.\n\n```python\nresized_image.save(temp_file_path, \"JPEG\")\n```\n\nAnd set the filename extension to '.jpg'.\n\n```python\nfilename = f\"image_{i}.jpg\"\n```\n\nThis way, I don't have to worry about determining the format dynamically.\n\nNow, let's think about error handling. I should catch exceptions at each step and print an error message.\n\nFor example, when downloading the image:\n\n```python\ntry:\n    response = requests.get(url)\n    response.raise_for_status()  # Raises an HTTPError for bad responses\nexcept requests.exceptions.RequestException as e:\n    print(f\"Error downloading {url}: {e}\")\n    continue\n```\n\nWhen resizing the image:\n\n```python\ntry:\n    image = Image.open(BytesIO(image_data))\n    new_width, new_height = get_resized_dimensions(image.width, image.height, resize_width, resize_height)\n    resized_image = image.resize((new_width, new_height))\nexcept IOError as e:\n    print(f\"Error processing image from {url}: {e}\")\n    continue\n```\n\nWhen uploading to Azure:\n\n```python\ntry:\n    with open(temp_file_path, \"rb\") as data:\n        blob_client = blob_service_client.get_blob_client(container=container_name, blob=filename)\n        blob_client.upload_blob(data, overwrite=True)\nexcept Exception as e:\n    print(f\"Error uploading {filename} to Azure: {e}\")\nfinally:\n    os.remove(temp_file_path)\n```\n\nThis way, even if there's an error during upload, the temporary file gets deleted.\n\nAlso, I should consider logging these errors instead of just printing them, especially if this script is going to run in a production environment.\n\nNow, let's think about how to handle the filenames. If I use a simple counter for filenames, I might end up with duplicate names if the script is run multiple times.\n\nTo make filenames unique, I can use a combination of the original filename (if available) and a timestamp or a UUID.\n\nFor example, using the `uuid` module:\n\n```python\nimport uuid\n\nfilename = f\"{uuid.uuid4()}.jpg\"\n```\n\nThis ensures that each filename is unique.\n\nAlternatively, if the original URL has a filename, I can include that in the filename.\n\n```python\nparsed_url = urlparse(url)\npath = parsed_url.path\nextension = os.path.splitext(path)[1]\nif extension:\n    filename = f\"{uuid.uuid4()}{extension}\"\nelse:\n    filename = f\"{uuid.uuid4()}.jpg\"\n```\n\nThis way, I preserve the original extension if possible, but default to '.jpg' if no extension is present.\n\nNow, let's think about the complete script structure.\n\nI'll need to:\n\n1. Import all necessary modules.\n\n2. Define the list of image URLs.\n\n3. Specify the resize dimensions.\n\n4. Set up the Azure Blob Storage connection.\n\n5. Define a function to calculate resized dimensions while maintaining aspect ratio.\n\n6. Loop through each URL, download the image, resize it, save it temporarily, upload it to Azure, and clean up.\n\n7. Handle exceptions at each step.\n\nLet me write a draft of the script accordingly.\n\n## Final Solution\nTo accomplish the task of downloading images from a list of URLs, resizing them, and uploading them to an Azure Blob Storage container, you can use the following Python script. This script uses the `requests` library to download images, the `Pillow` library to resize them, and the `azure-storage-blob` library to upload them to Azure Blob Storage.\n\n### Solution Code\n\n```python\nimport requests\nfrom PIL import Image\nfrom io import BytesIO\nfrom azure.storage.blob import BlobServiceClient, BlobClient, ContainerClient\nimport os\nfrom urllib.parse import urlparse\nimport uuid\n\n# List of image URLs\nimage_urls = [\n    \"http://example.com/image1.jpg\",\n    \"http://example.com/image2.png\"\n]\n\n# Resize dimensions\nresize_width = 800\nresize_height = 600\n\n# Azure Blob Storage connection string and container name\nconnection_string = \"your_connection_string_here\"\ncontainer_name = \"your_container_name_here\"\n\n# Set up Azure Blob Storage connection\nblob_service_client = BlobServiceClient.from_connection_string(connection_string)\ncontainer_client = blob_service_client.get_container_client(container_name)\n\ndef get_resized_dimensions(original_width, original_height, target_width, target_height):\n    aspect_ratio = original_width / original_height\n    new_height = target_width / aspect_ratio\n    if new_height > target_height:\n        new_height = target_height\n        new_width = new_height * aspect_ratio\n    else:\n        new_width = target_width\n    return int(new_width), int(new_height)\n\ni = 0\nfor url in image_urls:\n    try:\n        # Download the image\n        response = requests.get(url)\n        response.raise_for_status()\n        image_data = response.content\n\n        # Open and resize the image\n        image = Image.open(BytesIO(image_data))\n        new_width, new_height = get_resized_dimensions(image.width, image.height, resize_width, resize_height)\n        resized_image = image.resize((new_width, new_height))\n\n        # Generate a unique filename\n        filename = f\"{uuid.uuid4()}.jpg\"\n        temp_file_path = f\"temp_{filename}\"\n        resized_image.save(temp_file_path, \"JPEG\")\n\n        # Upload the resized image to Azure Blob Storage\n        with open(temp_file_path, \"rb\") as data:\n            blob_client = blob_service_client.get_blob_client(container=container_name, blob=filename)\n            blob_client.upload_blob(data, overwrite=True)\n\n        # Remove the temporary file\n        os.remove(temp_file_path)\n        print(f\"Successfully uploaded {filename} to Azure Blob Storage.\")\n    except requests.exceptions.RequestException as e:\n        print(f\"Error downloading {url}: {e}\")\n    except IOError as e:\n        print(f\"Error processing image from {url}: {e}\")\n    except Exception as e:\n        print(f\"Error uploading {filename} to Azure: {e}\")\n    finally:\n        i += 1\n```\n\n### Explanation\n\n1. **Downloading Images**: The script uses the `requests` library to download images from the provided URLs. It checks for the success of the download operation.\n\n2. **Resizing Images**: The `Pillow` library is used to open and resize the images while maintaining their aspect ratio. The `get_resized_dimensions` function calculates the new dimensions to preserve the aspect ratio.\n\n3. **Uploading to Azure Blob Storage**: The script uses the `azure-storage-blob` library to upload the resized images to a specified Azure Blob Storage container. Each image is given a unique filename using the `uuid` module to avoid naming conflicts.\n\n4. **Error Handling**: The script includes exception handling for each major step (downloading, processing, and uploading) to manage and log errors appropriately.\n\n5. **Cleanup**: Temporary files are removed after uploading to keep the local filesystem clean.\n\nMake sure to replace `\"your_connection_string_here\"` and `\"your_container_name_here\"` with your actual Azure Blob Storage connection string and container name. Additionally, ensure that you have the necessary permissions to write to the specified container."
    }
]