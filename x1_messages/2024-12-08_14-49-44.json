[
    {
        "role": "user",
        "content": "Create a Node.js REST API that supports CRUD operations for managing a list of tasks, each task having a title, description, due date, and status (completed or pending). Store the tasks in a PostgreSQL database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through creating a Node.js REST API that handles CRUD operations for managing tasks. Each task will have a title, description, due date, and status (completed or pending). We'll store these tasks in a PostgreSQL database.\n\n### Step 1: Set Up Your Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir task-manager-api\ncd task-manager-api\nnpm init -y\n```\n\nInstall the necessary dependencies:\n\n```bash\nnpm install express pg body-parser dotenv\n```\n\n- `express`: For creating the web server and handling routes.\n- `pg`: PostgreSQL client for Node.js.\n- `body-parser`: For parsing request bodies.\n- `dotenv`: For managing environment variables.\n\n### Step 2: Set Up Environment Variables\n\nCreate a `.env` file to store your database credentials and other configuration settings.\n\n```\nDB_HOST=localhost\nDB_PORT=5432\nDB_USER=your_database_user\nDB_PASSWORD=your_database_password\nDB_NAME=task_manager\nPORT=3000\n```\n\nReplace the values with your actual database credentials.\n\n### Step 3: Connect to PostgreSQL\n\nCreate a file named `db.js` to handle the database connection.\n\n```javascript\nconst { Pool } = require('pg');\nrequire('dotenv').config();\n\nconst pool = new Pool({\n  host: process.env.DB_HOST,\n  port: process.env.DB_PORT,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  database: process.env.DB_NAME\n});\n\npool.connect((err) => {\n  if (err) {\n    console.error('Database connection failed:', err);\n  } else {\n    console.log('Connected to the database');\n  }\n});\n\nmodule.exports = pool;\n```\n\n### Step 4: Create the Tasks Table\n\nBefore writing the API endpoints, make sure you have a `tasks` table in your database. You can create it using the following SQL query:\n\n```sql\nCREATE TABLE tasks (\n  id SERIAL PRIMARY KEY,\n  title VARCHAR(255) NOT NULL,\n  description TEXT,\n  due_date DATE,\n  status VARCHAR(20) CHECK (status IN ('completed', 'pending')) DEFAULT 'pending'\n);\n```\n\nYou can run this query using a PostgreSQL client like `psql`.\n\n### Step 5: Set Up Express Server\n\nCreate a file named `app.js` to set up your Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst pool = require('./db');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Routes will be defined here\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 6: Implement CRUD Operations\n\n#### Get All Tasks\n\n```javascript\napp.get('/tasks', (req, res) => {\n  pool.query('SELECT * FROM tasks', (error, results) => {\n    if (error) throw error;\n    res.status(200).json(results.rows);\n  });\n});\n```\n\n#### Get a Single Task by ID\n\n```javascript\napp.get('/tasks/:id', (req, res) => {\n  const id = req.params.id;\n  pool.query('SELECT * FROM tasks WHERE id = $1', [id], (error, results) => {\n    if (error) throw error;\n    if (results.rows.length === 0) {\n      res.status(404).json({ message: 'Task not found' });\n    } else {\n      res.status(200).json(results.rows[0]);\n    }\n  });\n});\n```\n\n#### Create a New Task\n\n```javascript\napp.post('/tasks', (req, res) => {\n  const { title, description, due_date, status } = req.body;\n  pool.query(\n    'INSERT INTO tasks (title, description, due_date, status) VALUES ($1, $2, $3, $4)',\n    [title, description, due_date, status],\n    (error, results) => {\n      if (error) throw error;\n      res.status(201).json({ message: 'Task created successfully' });\n    }\n  );\n});\n```\n\n#### Update a Task\n\n```javascript\napp.put('/tasks/:id', (req, res) => {\n  const id = req.params.id;\n  const { title, description, due_date, status } = req.body;\n  pool.query(\n    'UPDATE tasks SET title = $1, description = $2, due_date = $3, status = $4 WHERE id = $5',\n    [title, description, due_date, status, id],\n    (error, results) => {\n      if (error) throw error;\n      if (results.rowCount === 0) {\n        res.status(404).json({ message: 'Task not found' });\n      } else {\n        res.status(200).json({ message: 'Task updated successfully' });\n      }\n    }\n  );\n});\n```\n\n#### Delete a Task\n\n```javascript\napp.delete('/tasks/:id', (req, res) => {\n  const id = req.params.id;\n  pool.query('DELETE FROM tasks WHERE id = $1', [id], (error, results) => {\n    if (error) throw error;\n    if (results.rowCount === 0) {\n      res.status(404).json({ message: 'Task not found' });\n    } else {\n      res.status(200).json({ message: 'Task deleted successfully' });\n    }\n  });\n});\n```\n\n### Step 7: Test Your API\n\nYou can use tools like Postman or curl to test your API endpoints.\n\n- **GET** `/tasks` to retrieve all tasks.\n- **GET** `/tasks/:id` to retrieve a specific task by ID.\n- **POST** `/tasks` to create a new task. Send a JSON body with `title`, `description`, `due_date`, and `status`.\n- **PUT** `/tasks/:id` to update an existing task. Send a JSON body with the updated fields.\n- **DELETE** `/tasks/:id` to delete a task.\n\n### Step 8: Error Handling\n\nIt's essential to handle errors properly. You can add middleware for error handling in your `app.js`.\n\n```javascript\napp.use((err, req, res, next) => {\n  console.error(err.stack);\n  res.status(500).json({ message: 'Something went wrong' });\n});\n```\n\n### Step 9: Documentation\n\nDocument your API endpoints, including the expected request formats and response schemas. This will help other developers understand how to use your API.\n\n### Conclusion\n\nYou've successfully created a Node.js REST API for managing tasks with CRUD operations, connected to a PostgreSQL database. This API provides a solid foundation that you can build upon, adding more features and improving functionality as needed."
    }
]