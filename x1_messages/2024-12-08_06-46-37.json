[
    {
        "role": "user",
        "content": "Write a TypeScript function that accepts an array of objects representing employees (with properties like id, name, department, and salary) and calculates the average salary per department. Return the result as an object where keys are department names and values are the average salaries.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! To solve this problem, we need to calculate the average salary for each department given an array of employee objects. Each employee object has properties like id, name, department, and salary. The goal is to group employees by their department and then compute the average salary for each department.\n\n### Approach\n\n1. **Initialize Data Structures**: We will use a dictionary (object in JavaScript/TypeScript) to keep track of the sum of salaries and the count of employees in each department.\n2. **Iterate Through Employees**: For each employee, we will add their salary to the sum of their department and increment the count of employees in that department.\n3. **Calculate Average Salaries**: After processing all employees, we will calculate the average salary for each department by dividing the sum of salaries by the number of employees in that department.\n4. **Return the Result**: The result will be an object where each key is a department name and each value is the average salary for that department.\n\n### Solution Code\n\n```typescript\nfunction calculateAverageSalaryPerDepartment(employees: { id: number; name: string; department: string; salary: number; }[]): { [department: string]: number } {\n    const departmentSums: { [department: string]: number } = {};\n    const departmentCounts: { [department: string]: number } = {};\n\n    for (const employee of employees) {\n        const { department, salary } = employee;\n        if (!departmentSums[department]) {\n            departmentSums[department] = 0;\n            departmentCounts[department] = 0;\n        }\n        departmentSums[department] += salary;\n        departmentCounts[department]++;\n    }\n\n    const averageSalaries: { [department: string]: number } = {};\n    for (const department in departmentSums) {\n        averageSalaries[department] = departmentSums[department] / departmentCounts[department];\n    }\n\n    return averageSalaries;\n}\n```\n\n### Explanation\n\n1. **Data Structures**:\n   - `departmentSums`: An object to hold the total salary sum for each department.\n   - `departmentCounts`: An object to hold the count of employees in each department.\n\n2. **Processing Employees**:\n   - For each employee, we check if their department is already a key in our sums and counts objects. If not, we initialize them to 0.\n   - We add the employee's salary to the sum of their department and increment the count of employees in that department.\n\n3. **Calculating Averages**:\n   - We iterate over the keys in `departmentSums` and calculate the average salary by dividing the sum by the count for each department.\n\n4. **Returning the Result**:\n   - The function returns an object where each key is a department name and each value is the computed average salary for that department.\n\nThis approach ensures that we efficiently compute the average salaries in a single pass through the employees array, making it both clear and efficient."
    }
]