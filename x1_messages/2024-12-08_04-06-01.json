[
    {
        "role": "user",
        "content": "Develop a PowerShell script that retrieves system information such as CPU usage, memory usage, disk space, and network statistics. The script should format this information nicely and display it on the console. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Developing a PowerShell script to retrieve system information like CPU usage, memory usage, disk space, and network statistics is a great way to monitor your system's health and performance. I'll guide you through creating such a script, ensuring it presents the data in a readable and organized manner.\n\nFirst, let's outline what we need to do:\n\n1. **CPU Usage**: Get the current CPU usage percentage.\n2. **Memory Usage**: Show both total and available memory, along with usage percentage.\n3. **Disk Space**: Display disk space usage for each drive, including total space, free space, and usage percentage.\n4. **Network Statistics**: Show network adapter statistics, such as bytes sent and received.\n\nWe'll use PowerShell's built-in cmdlets and .NET classes to gather this information and format it nicely for the console.\n\n### Step 1: CPU Usage\n\nTo get CPU usage, we can use the `Get-Counter` cmdlet with the appropriate counter path for CPU usage.\n\n```powershell\n$cpuUsage = Get-Counter -Counter \"\\Processor(_Total)\\% Processor Time\" -SampleInterval 1 -MaxSamples 1\n$cpuPercent = [math]::Round($cpuUsage.CounterSamples.CookedValue, 2)\nWrite-Host \"CPU Usage: $cpuPercent%\"\n```\n\n### Step 2: Memory Usage\n\nFor memory usage, we can use the `Get-CimInstance` cmdlet to retrieve memory statistics.\n\n```powershell\n$os = Get-CimInstance -ClassName Win32_OperatingSystem\n$totalVisibleMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)\n$freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)\n$memoryUsed = $totalVisibleMemory - $freeMemory\n$memoryPercent = [math]::Round(($memoryUsed / $totalVisibleMemory) * 100, 2)\nWrite-Host \"Memory Usage: $memoryUsed MB / $totalVisibleMemory MB ($memoryPercent%)\"\n```\n\n### Step 3: Disk Space\n\nTo get disk space information, we'll use `Get-PSDrive` to list all drives and their properties.\n\n```powershell\nWrite-Host \"Disk Space:\"\n$drives = Get-PSDrive -PSProvider FileSystem\nforeach ($drive in $drives) {\n    $totalSpace = [math]::Round($drive-used / 1GB, 2)\n    $freeSpace = [math]::Round($drive-free / 1GB, 2)\n    $usedSpace = $totalSpace - $freeSpace\n    $usedPercent = [math]::Round(($usedSpace / $totalSpace) * 100, 2)\n    Write-Host \"$($drive.Name): $usedSpace GB / $totalSpace GB ($usedPercent%)\"\n}\n```\n\n### Step 4: Network Statistics\n\nFor network statistics, we can use `Get-NetAdapterStatistics` to get bytes sent and received.\n\n```powershell\nWrite-Host \"Network Statistics:\"\n$networkStats = Get-NetAdapterStatistics\nforeach ($adapter in $networkStats) {\n    $bytesReceived = [math]::Round($adapter.ReceivedBytes / 1MB, 2)\n    $bytesSent = [math]::Round($adapter.SentBytes / 1MB, 2)\n    Write-Host \"$($adapter.Name): Received $bytesReceived MB, Sent $bytesSent MB\"\n}\n```\n\n### Putting It All Together\n\nNow, let's combine all these parts into a single script and add some formatting to make it look nice.\n\n```powershell\n# Clear the console\nClear-Host\n\n# Function to display section headers\nfunction Write-SectionHeader {\n    param ($header)\n    Write-Host \"`n$header\"\n    Write-Host \"------------------------\"\n}\n\n# CPU Usage\nWrite-SectionHeader \"CPU Usage\"\n$cpuUsage = Get-Counter -Counter \"\\Processor(_Total)\\% Processor Time\" -SampleInterval 1 -MaxSamples 1\n$cpuPercent = [math]::Round($cpuUsage.CounterSamples.CookedValue, 2)\nWrite-Host \"Usage: $cpuPercent%\"\n\n# Memory Usage\nWrite-SectionHeader \"Memory Usage\"\n$os = Get-CimInstance -ClassName Win32_OperatingSystem\n$totalVisibleMemory = [math]::Round($os.TotalVisibleMemorySize / 1MB, 2)\n$freeMemory = [math]::Round($os.FreePhysicalMemory / 1MB, 2)\n$memoryUsed = $totalVisibleMemory - $freeMemory\n$memoryPercent = [math]::Round(($memoryUsed / $totalVisibleMemory) * 100, 2)\nWrite-Host \"Used: $memoryUsed MB\"\nWrite-Host \"Total: $totalVisibleMemory MB\"\nWrite-Host \"Usage Percentage: $memoryPercent%\"\n\n# Disk Space\nWrite-SectionHeader \"Disk Space\"\n$drives = Get-PSDrive -PSProvider FileSystem\nforeach ($drive in $drives) {\n    $totalSpace = [math]::Round($drive.Used / 1GB, 2)\n    $freeSpace = [math]::Round($drive.Free / 1GB, 2)\n    $usedSpace = $totalSpace - $freeSpace\n    $usedPercent = [math]::Round(($usedSpace / $totalSpace) * 100, 2)\n    Write-Host \"$($drive.Name):\"\n    Write-Host \"  Used: $usedSpace GB\"\n    Write-Host \"  Free: $freeSpace GB\"\n    Write-Host \"  Total: $totalSpace GB\"\n    Write-Host \"  Usage Percentage: $usedPercent%\"\n}\n\n# Network Statistics\nWrite-SectionHeader \"Network Statistics\"\n$networkStats = Get-NetAdapterStatistics\nforeach ($adapter in $networkStats) {\n    $bytesReceived = [math]::Round($adapter.ReceivedBytes / 1MB, 2)\n    $bytesSent = [math]::Round($adapter.SentBytes / 1MB, 2)\n    Write-Host \"$($adapter.Name):\"\n    Write-Host \"  Received: $bytesReceived MB\"\n    Write-Host \"  Sent: $bytesSent MB\"\n}\n```\n\n### Explanation\n\n1. **CPU Usage**: Uses the `Get-Counter` cmdlet to fetch the current CPU usage percentage.\n2. **Memory Usage**: Uses `Get-CimInstance` to retrieve memory statistics and calculates used memory and usage percentage.\n3. **Disk Space**: Uses `Get-PSDrive` to list all file system drives and calculates used and free space in GB.\n4. **Network Statistics**: Uses `Get-NetAdapterStatistics` to get bytes sent and received for each network adapter.\n\nEach section is separated by a header for clarity, and values are rounded for better readability. This script provides a comprehensive overview of key system metrics directly in the PowerShell console.\n\nI hope this helps you monitor your system effectively! If you have any questions or need further assistance, feel free to ask."
    }
]