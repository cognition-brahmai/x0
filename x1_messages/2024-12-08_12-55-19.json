[
    {
        "role": "user",
        "content": "Implement a simple stack data structure in C++ with push, pop, and peek operations."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a stack in C++ is straightforward, and I'll guide you through it step by step. A stack is a Last-In-First-Out (LIFO) data structure, which means the last element added is the first one to be removed.\n\n### Approach\n\n1. **Class Definition:** We'll create a class called `Stack` to encapsulate the stack operations.\n2. **Data Members:**\n   - An array to store the stack elements.\n   - An integer to keep track of the top of the stack.\n3. **Member Functions:**\n   - `push`: Adds an element to the top of the stack.\n   - `pop`: Removes the top element from the stack.\n   - `peek`: Returns the top element without removing it.\n   - `isEmpty`: Checks if the stack is empty.\n   - `isFull`: Checks if the stack is full.\n\n### Solution Code\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Stack {\nprivate:\n    static const int maxSize = 100; // Maximum size of the stack\n    int arr[maxSize];\n    int top;\n\npublic:\n    Stack() : top(-1) {} // Constructor to initialize top to -1\n\n    // Check if the stack is empty\n    bool isEmpty() {\n        return top == -1;\n    }\n\n    // Check if the stack is full\n    bool isFull() {\n        return top == maxSize - 1;\n    }\n\n    // Add an element to the stack\n    void push(int value) {\n        if (isFull()) {\n            cout << \"Stack is full. Cannot push \" << value << endl;\n            return;\n        }\n        arr[++top] = value;\n        cout << \"Pushed \" << value << \" to stack.\" << endl;\n    }\n\n    // Remove the element from the top of the stack\n    void pop() {\n        if (isEmpty()) {\n            cout << \"Stack is empty. Cannot pop.\" << endl;\n            return;\n        }\n        cout << \"Popped \" << arr[top] << \" from stack.\" << endl;\n        --top;\n    }\n\n    // Get the top element of the stack\n    int peek() {\n        if (isEmpty()) {\n            cout << \"Stack is empty. No element to peek.\" << endl;\n            return -1; // Assuming -1 as error value\n        }\n        return arr[top];\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    cout << \"Top element is: \" << stack.peek() << endl;\n\n    stack.pop();\n    stack.push(40);\n\n    cout << \"Top element is: \" << stack.peek() << endl;\n\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop(); // Trying to pop from empty stack\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Class Definition and Data Members:**\n   - `Stack` class has an array `arr` to store stack elements and an integer `top` to track the top of the stack.\n   - `top` is initialized to -1 in the constructor, indicating an empty stack.\n\n2. **Member Functions:**\n   - `isEmpty()`: Returns true if the stack is empty.\n   - `isFull()`: Returns true if the stack is full.\n   - `push(int value)`: Adds an element to the top of the stack if it's not full.\n   - `pop()`: Removes the top element if the stack is not empty.\n   - `peek()`: Returns the top element without removing it if the stack is not empty.\n\n3. **Main Function:**\n   - Demonstrates pushing and popping elements.\n   - Checks the top element using `peek()`.\n   - Handles cases where operations are performed on an empty or full stack.\n\nThis implementation provides a basic understanding of stack operations in C++. You can expand upon this by adding more features or using dynamic memory allocation for the stack array."
    }
]