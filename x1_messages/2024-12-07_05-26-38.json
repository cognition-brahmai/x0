[
    {
        "role": "user",
        "content": "Write a Python script to implement a binary search tree data structure. The script should include methods for inserting nodes, searching for a node with a specific value, and traversing the tree in-order, pre-order, and post-order.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that implements a binary search tree (BST) with methods for inserting nodes, searching for a specific value, and traversing the tree in in-order, pre-order, and post-order manners.\n\n```python\nclass TreeNode:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = TreeNode(key)\n        else:\n            self._insert_recursive(self.root, key)\n\n    def _insert_recursive(self, node, key):\n        if key < node.val:\n            if node.left is None:\n                node.left = TreeNode(key)\n            else:\n                self._insert_recursive(node.left, key)\n        else:\n            if node.right is None:\n                node.right = TreeNode(key)\n            else:\n                self._insert_recursive(node.right, key)\n\n    def search(self, key):\n        return self._search_recursive(self.root, key)\n\n    def _search_recursive(self, node, key):\n        if node is None or node.val == key:\n            return node\n        if key < node.val:\n            return self._search_recursive(node.left, key)\n        return self._search_recursive(node.right, key)\n\n    def inorder_traversal(self):\n        result = []\n        self._inorder_recursive(self.root, result)\n        return result\n\n    def _inorder_recursive(self, node, result):\n        if node:\n            self._inorder_recursive(node.left, result)\n            result.append(node.val)\n            self._inorder_recursive(node.right, result)\n\n    def preorder_traversal(self):\n        result = []\n        self._preorder_recursive(self.root, result)\n        return result\n\n    def _preorder_recursive(self, node, result):\n        if node:\n            result.append(node.val)\n            self._preorder_recursive(node.left, result)\n            self._preorder_recursive(node.right, result)\n\n    def postorder_traversal(self):\n        result = []\n        self._postorder_recursive(self.root, result)\n        return result\n\n    def _postorder_recursive(self, node, result):\n        if node:\n            self._postorder_recursive(node.left, result)\n            self._postorder_recursive(node.right, result)\n            result.append(node.val)\n\n# Example usage:\nif __name__ == \"__main__\":\n    bst = BST()\n    elements = [50, 30, 70, 20, 40, 60, 80]\n    for elem in elements:\n        bst.insert(elem)\n\n    print(\"In-order traversal:\", bst.inorder_traversal())\n    print(\"Pre-order traversal:\", bst.preorder_traversal())\n    print(\"Post-order traversal:\", bst.postorder_traversal())\n\n    search_key = 60\n    if bst.search(search_key):\n        print(f\"Found {search_key} in the tree.\")\n    else:\n        print(f\"{search_key} not found in the tree.\")\n```\n\n### Explanation:\n\n1. **TreeNode Class**:\n   - Represents each node in the BST.\n   - Each node has a value (`val`), and pointers to left and right child nodes.\n\n2. **BST Class**:\n   - Manages the BST operations.\n   - `insert(key)`: Inserts a new node with the given key into the BST.\n   - `search(key)`: Searches for a node with the given key in the BST.\n   - `inorder_traversal()`, `preorder_traversal()`, `postorder_traversal()`: Perform in-order, pre-order, and post-order traversals respectively and return the list of node values in that order.\n\n3. **Example Usage**:\n   - Creates a BST and inserts several elements.\n   - Performs in-order, pre-order, and post-order traversals and prints the results.\n   - Searches for a specific key and prints whether it was found.\n\nThis script provides a basic implementation of a BST with essential operations."
    }
]