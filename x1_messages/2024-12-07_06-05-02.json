[
    {
        "role": "user",
        "content": "In Java, create an object-oriented program for a library management system. The system should be able to add books, remove books, issue books to members, return books, and check the availability of a book. Each book and member should have a unique ID."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, you need to create a library management system in Java using object-oriented programming principles. The system should be able to handle adding books, removing books, issuing books to members, returning books, and checking the availability of a book. Each book and member should have a unique ID.\n\nFirst, let's think about the classes we'll need in this system. The main entities are books and members, so we'll probably have Book and Member classes. We'll also need a Library class to manage these entities and handle operations like adding, removing, issuing, and returning books.\n\nLet's start by defining the Book class. Each book should have a unique ID, a title, an author, and information about its availability. For simplicity, we can use a boolean to represent whether the book is available or not.\n\nHere's a rough outline of the Book class:\n\n```java\npublic class Book {\n    private int bookId;\n    private String title;\n    private String author;\n    private boolean isAvailable;\n\n    // Constructor\n    public Book(int bookId, String title, String author) {\n        this.bookId = bookId;\n        this.title = title;\n        this.author = author;\n        this.isAvailable = true;\n    }\n\n    // Getters and setters\n    public int getBookId() {\n        return bookId;\n    }\n\n    public String getTitle() {\n        return title;\n    }\n\n    public String getAuthor() {\n        return author;\n    }\n\n    public boolean isAvailable() {\n        return isAvailable;\n    }\n\n    public void setAvailable(boolean available) {\n        isAvailable = available;\n    }\n}\n```\n\nNext, we'll define the Member class. Each member should have a unique ID and possibly a name. For now, let's keep it simple.\n\n```java\npublic class Member {\n    private int memberId;\n    private String name;\n\n    // Constructor\n    public Member(int memberId, String name) {\n        this.memberId = memberId;\n        this.name = name;\n    }\n\n    // Getters and setters\n    public int getMemberId() {\n        return memberId;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n}\n```\n\nNow, we need a Library class that will manage the collection of books and members and provide methods to add books, remove books, issue books, return books, and check book availability.\n\nWe'll use ArrayLists to store the books and members since they can dynamically grow and shrink.\n\nHere's a\u521d\u6b65\u7684 Library class:\n\n```java\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Library {\n    private List<Book> books;\n    private List<Member> members;\n\n    // Constructor\n    public Library() {\n        books = new ArrayList<>();\n        members = new ArrayList<>();\n    }\n\n    // Method to add a book\n    public void addBook(Book book) {\n        books.add(book);\n        System.out.println(\"Book added: \" + book.getTitle());\n    }\n\n    // Method to remove a book\n    public void removeBook(int bookId) {\n        Book bookToRemove = null;\n        for (Book book : books) {\n            if (book.getBookId() == bookId) {\n                bookToRemove = book;\n                break;\n            }\n        }\n        if (bookToRemove != null) {\n            books.remove(bookToRemove);\n            System.out.println(\"Book removed: \" + bookToRemove.getTitle());\n        } else {\n            System.out.println(\"Book with ID \" + bookId + \" not found.\");\n        }\n    }\n\n    // Method to issue a book to a member\n    public void issueBook(int bookId, int memberId) {\n        Book book = findBookById(bookId);\n        Member member = findMemberById(memberId);\n\n        if (book != null && member != null) {\n            if (book.isAvailable()) {\n                book.setAvailable(false);\n                System.out.println(\"Book issued to \" + member.getName() + \": \" + book.getTitle());\n            } else {\n                System.out.println(\"Book is not available.\");\n            }\n        } else {\n            System.out.println(\"Book or member not found.\");\n        }\n    }\n\n    // Method to return a book\n    public void returnBook(int bookId) {\n        Book book = findBookById(bookId);\n        if (book != null) {\n            if (!book.isAvailable()) {\n                book.setAvailable(true);\n                System.out.println(\"Book returned: \" + book.getTitle());\n            } else {\n                System.out.println(\"Book was already available.\");\n            }\n        } else {\n            System.out.println(\"Book with ID \" + bookId + \" not found.\");\n        }\n    }\n\n    // Method to check book availability\n    public void checkAvailability(int bookId) {\n        Book book = findBookById(bookId);\n        if (book != null) {\n            if (book.isAvailable()) {\n                System.out.println(\"Book is available.\");\n            } else {\n                System.out.println(\"Book is not available.\");\n            }\n        } else {\n            System.out.println(\"Book with ID \" + bookId + \" not found.\");\n        }\n    }\n\n    // Helper method to find a book by ID\n    private Book findBookById(int bookId) {\n        for (Book book : books) {\n            if (book.getBookId() == bookId) {\n                return book;\n            }\n        }\n        return null;\n    }\n\n    // Helper method to find a member by ID\n    private Member findMemberById(int memberId) {\n        for (Member member : members) {\n            if (member.getMemberId() == memberId) {\n                return member;\n            }\n        }\n        return null;\n    }\n}\n```\n\nNow, to make this program complete, we need a way to add members to the library. Let's add a method in the Library class to add members.\n\n```java\n// Method to add a member\npublic void addMember(Member member) {\n    members.add(member);\n    System.out.println(\"Member added: \" + member.getName());\n}\n```\n\nFinally, we'll need a simple way to test this system. We can create a main class with a main method to demonstrate the functionality.\n\nHere's an example:\n\n```java\npublic class LibraryManagementSystem {\n    public static void main(String[] args) {\n        Library library = new Library();\n\n        // Adding books\n        Book book1 = new Book(1, \"Java Programming\", \"Author1\");\n        Book book2 = new Book(2, \"Data Structures\", \"Author2\");\n        library.addBook(book1);\n        library.addBook(book2);\n\n        // Adding members\n        Member member1 = new Member(101, \"John Doe\");\n        Member member2 = new Member(102, \"Jane Smith\");\n        library.addMember(member1);\n        library.addMember(member2);\n\n        // Issuing a book\n        library.issueBook(1, 101);\n\n        // Checking availability\n        library.checkAvailability(1);\n\n        // Returning a book\n        library.returnBook(1);\n\n        // Checking availability again\n        library.checkAvailability(1);\n\n        // Removing a book\n        library.removeBook(2);\n    }\n}\n```\n\nThis is a basic implementation of a library management system in Java using object-oriented principles. It covers adding books and members, issuing and returning books, and checking book availability.\n\nIf you have any specific requirements or want to add more features, feel free to ask!"
    }
]