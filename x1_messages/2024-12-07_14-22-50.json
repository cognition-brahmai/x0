[
    {
        "role": "user",
        "content": "Write a Python script that takes a list of numbers as input and returns the sum of all even numbers in the list, along with the count of odd numbers. The script should use functional programming concepts like map, filter, and reduce."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that accomplishes the task you've described. It uses functional programming concepts such as `filter`, `map`, and `reduce` to process a list of numbers, calculate the sum of even numbers, and count the odd numbers.\n\n```python\nfrom functools import reduce\n\ndef process_numbers(numbers):\n    # Filter even numbers and calculate their sum using reduce\n    even_numbers = filter(lambda x: x % 2 == 0, numbers)\n    sum_even = reduce(lambda x, y: x + y, even_numbers, 0)\n    \n    # Filter odd numbers and count them using reduce\n    odd_numbers = filter(lambda x: x % 2 != 0, numbers)\n    count_odd = reduce(lambda x, y: x + 1, odd_numbers, 0)\n    \n    return sum_even, count_odd\n\n# Example usage\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nsum_even, count_odd = process_numbers(numbers)\nprint(f\"Sum of even numbers: {sum_even}\")\nprint(f\"Count of odd numbers: {count_odd}\")\n```\n\n### Explanation:\n1. **Filter Even Numbers:** We use `filter` with a lambda function to select even numbers from the list.\n2. **Sum Even Numbers:** We use `reduce` to sum up the even numbers. The `reduce` function applies a rolling computation to sequential pairs of values in the list.\n3. **Filter Odd Numbers:** Similarly, we use `filter` to select odd numbers.\n4. **Count Odd Numbers:** We use `reduce` again to count the odd numbers by adding 1 for each odd number.\n\nThis approach ensures that we leverage functional programming paradigms to achieve the desired results efficiently."
    }
]