[
    {
        "role": "user",
        "content": "In Java, implement a program to simulate a bank system with basic functionalities like creating an account, depositing money, withdrawing money, and checking balance. Use exception handling to manage errors such as insufficient funds or invalid inputs."
    },
    {
        "role": "assistant",
        "content": "I've created a simple bank system simulation in Java that allows users to create accounts, deposit money, withdraw money, and check their balance. The program uses exception handling to manage errors such as insufficient funds or invalid inputs.\n\n## Final Solution\nTo create this bank system simulation, we will define a `BankAccount` class that handles the basic functionalities of a bank account, such as depositing, withdrawing, and checking the balance. We will also use exception handling to manage errors like insufficient funds or invalid inputs.\n\n### Approach\n1. **BankAccount Class**:\n   - **Attributes**: Account number, account holder's name, and balance.\n   - **Methods**:\n     - `deposit(double amount)`: Adds the specified amount to the balance.\n     - `withdraw(double amount)`: Subtracts the specified amount from the balance if sufficient funds are available, otherwise throws an `InsufficientFundsException`.\n     - `getBalance()`: Returns the current balance.\n\n2. **InsufficientFundsException**:\n   - A custom exception class to handle cases where the withdrawal amount exceeds the balance.\n\n3. **Main Class**:\n   - Demonstrates the usage of the `BankAccount` class by creating an account, depositing, withdrawing, and checking the balance.\n\n### Solution Code\n\n```java\n// BankAccount class to handle basic bank operations\nclass BankAccount {\n    private String accountNumber;\n    private String accountHolderName;\n    private double balance;\n\n    public BankAccount(String accountNumber, String accountHolderName) {\n        this.accountNumber = accountNumber;\n        this.accountHolderName = accountHolderName;\n        this.balance = 0;\n    }\n\n    public void deposit(double amount) {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Deposit amount must be positive.\");\n        }\n        balance += amount;\n    }\n\n    public void withdraw(double amount) throws InsufficientFundsException {\n        if (amount <= 0) {\n            throw new IllegalArgumentException(\"Withdrawal amount must be positive.\");\n        }\n        if (balance < amount) {\n            throw new InsufficientFundsException(\"Insufficient funds for withdrawal.\");\n        }\n        balance -= amount;\n    }\n\n    public double getBalance() {\n        return balance;\n    }\n}\n\n// Custom exception for insufficient funds\nclass InsufficientFundsException extends Exception {\n    public InsufficientFundsException(String message) {\n        super(message);\n    }\n}\n\n// Main class to demonstrate bank operations\npublic class BankSystem {\n    public static void main(String[] args) {\n        try {\n            BankAccount myAccount = new BankAccount(\"123456\", \"John Doe\");\n            System.out.println(\"Account created for \" + myAccount.getAccountHolderName());\n\n            double depositAmount = 1000;\n            myAccount.deposit(depositAmount);\n            System.out.println(\"Deposited: \" + depositAmount);\n            System.out.println(\"Current balance: \" + myAccount.getBalance());\n\n            double withdrawalAmount = 500;\n            myAccount.withdraw(withdrawalAmount);\n            System.out.println(\"Withdrew: \" + withdrawalAmount);\n            System.out.println(\"Current balance: \" + myAccount.getBalance());\n\n            withdrawalAmount = 600;\n            myAccount.withdraw(withdrawalAmount);\n            System.out.println(\"Withdrew: \" + withdrawalAmount);\n            System.out.println(\"Current balance: \" + myAccount.getBalance());\n        } catch (InsufficientFundsException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        } catch (IllegalArgumentException e) {\n            System.err.println(\"Error: \" + e.getMessage());\n        }\n    }\n}\n```\n\n### Explanation\n1. **BankAccount Class**:\n   - Initializes with an account number and holder's name, starting with a zero balance.\n   - `deposit` method adds to the balance, ensuring the amount is positive.\n   - `withdraw` method subtracts from the balance, checking for sufficient funds and positive amount.\n   - `getBalance` method returns the current balance.\n\n2. **InsufficientFundsException**:\n   - A custom exception to handle cases where the withdrawal amount exceeds the available balance.\n\n3. **Main Class**:\n   - Creates a `BankAccount` instance.\n   - Deposits and withdraws amounts, handling exceptions for invalid operations.\n   - Demonstrates exception handling for both insufficient funds and invalid input amounts.\n\nThis approach ensures that the bank system handles transactions safely and manages errors effectively."
    }
]