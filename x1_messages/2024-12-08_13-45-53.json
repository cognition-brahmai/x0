[
    {
        "role": "user",
        "content": "Develop a Node.js Express application that implements a RESTful API for managing a collection of books. The API should support CRUD operations (Create, Read, Update, Delete) on books, including filtering by author and title. Store the book data in a MongoDB database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Node.js Express application that handles a collection of books using a RESTful API. I need to make sure it supports CRUD operations: Create, Read, Update, and Delete. Also, I have to store the book data in a MongoDB database and include filtering by author and title. Sounds manageable, but I'll need to break it down step by step.\n\nFirst things first, I need to set up a new Node.js project. I should create a new directory for this project and initialize it with npm. Let's call the project \"book-api\". So, in the terminal, I'll run:\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nThis will create a new folder and initialize a package.json file with default settings.\n\nNext, I need to install the necessary dependencies. For this project, I'll need Express for the server, Mongoose for interacting with MongoDB, and BodyParser to handle JSON data in requests. I can install them using npm:\n\n```bash\nnpm install express mongoose body-parser\n```\n\nNow, I need to set up the basic structure of the application. I'll create a few files and folders:\n\n- app.js: This will be the main file that initializes the server and defines the routes.\n\n- models/book.js: This will contain the Mongoose schema for the book data.\n\n- routes/books.js: This file will handle the API endpoints for books.\n\nLet's create these files and folders:\n\n```bash\nmkdir models routes\ntouch app.js models/book.js routes/books.js\n```\n\nStarting with the Mongoose model, I need to define what a \"book\" looks like. A book should have at least a title and an author, and maybe other fields like publication date or genre. For simplicity, let's start with title, author, and publication year.\n\nIn models/book.js:\n\n```javascript\nconst mongoose = require('mongoose');\n\nconst bookSchema = new mongoose.Schema({\n  title: { type: String, required: true },\n  author: { type: String, required: true },\n  publicationYear: Number\n});\n\nmodule.exports = mongoose.model('Book', bookSchema);\n```\n\nNext, I'll set up the Express server in app.js. I need to connect to the MongoDB database, set up the middleware, and define the routes.\n\nIn app.js:\n\n```javascript\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst bodyParser = require('body-parser');\nconst books = require('./routes/books');\n\nconst app = express();\n\n// Connect to MongoDB\nmongoose.connect('mongodb://localhost/book-api', { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n\n// Middleware\napp.use(bodyParser.json());\n\n// Routes\napp.use('/api/books', books);\n\nconst port = process.env.PORT || 3000;\napp.listen(port, () => console.log(`Server running on port ${port}`));\n```\n\nI've specified the MongoDB connection URL as 'mongodb://localhost/book-api'. Make sure MongoDB is running on your local machine, or update the URL accordingly.\n\nNow, I need to define the API endpoints in routes/books.js. The CRUD operations correspond to the following HTTP methods:\n\n- Create: POST /api/books\n\n- Read: GET /api/books (all books), GET /api/books/:id (single book)\n\n- Update: PUT /api/books/:id\n\n- Delete: DELETE /api/books/:id\n\nAdditionally, I need to implement filtering by author and title. I can add query parameters to the GET request to filter the results.\n\nIn routes/books.js:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst Book = require('../models/book');\n\n// Get all books with optional filtering\nrouter.get('/', async (req, res) => {\n  try {\n    const { author, title } = req.query;\n    let filter = {};\n\n    if (author) {\n      filter.author = new RegExp(author, 'i'); // Case-insensitive search\n    }\n    if (title) {\n      filter.title = new RegExp(title, 'i');\n    }\n\n    const books = await Book.find(filter);\n    res.json(books);\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Get single book by ID\nrouter.get('/:id', getBook, (req, res) => {\n  res.json(res.book);\n});\n\n// Create a new book\nrouter.post('/', async (req, res) => {\n  const book = new Book({\n    title: req.body.title,\n    author: req.body.author,\n    publicationYear: req.body.publicationYear\n  });\n\n  try {\n    const newBook = await book.save();\n    res.status(201).json(newBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Update a book\nrouter.put('/:id', getBook, async (req, res) => {\n  if (req.body.title != null) {\n    res.book.title = req.body.title;\n  }\n  if (req.body.author != null) {\n    res.book.author = req.body.author;\n  }\n  if (req.body.publicationYear != null) {\n    res.book.publicationYear = req.body.publicationYear;\n  }\n\n  try {\n    const updatedBook = await res.book.save();\n    res.json(updatedBook);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\n// Delete a book\nrouter.delete('/:id', getBook, async (req, res) => {\n  try {\n    await res.book.remove();\n    res.json({ message: 'Deleted Book' });\n  } catch (err) {\n    res.status(500).json({ message: err.message });\n  }\n});\n\n// Middleware to get book by ID\nasync function getBook(req, res, next) {\n  let book;\n\n  try {\n    book = await Book.findById(req.params.id);\n    if (book == null) {\n      return res.status(404).json({ message: 'Cannot find book' });\n    }\n  } catch (err) {\n    return res.status(500).json({ message: err.message });\n  }\n\n  res.book = book;\n  next();\n}\n\nmodule.exports = router;\n```\n\nIn this code, I've defined the routes for CRUD operations. The getBook middleware is used for GET, PUT, and DELETE requests to fetch the book by its ID and handle cases where the book is not found.\n\nI've also implemented filtering in the GET request by checking for query parameters 'author' and 'title' and using regular expressions for case-insensitive searching.\n\nThat should cover the basic requirements. To test the API, I can use tools like Postman or curl to make HTTP requests to the defined endpoints.\n\nFor example, to create a new book:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationYear\":2021}' http://localhost:3000/api/books\n```\n\nTo get all books:\n\n```bash\ncurl http://localhost:3000/api/books\n```\n\nTo get books by author:\n\n```bash\ncurl http://localhost:3000/api/books?author=John\n```\n\nTo update a book:\n\n```bash\ncurl -X PUT -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Title\"}' http://localhost:3000/api/books/{bookId}\n```\n\nTo delete a book:\n\n```bash\ncurl -X DELETE http://localhost:3000/api/books/{bookId}\n```\n\nMake sure to replace `{bookId}` with the actual ID of the book.\n\nThis should give me a fully functional RESTful API for managing a collection of books with the specified features. If I need to add more functionality, like handling genres or additional metadata, I can extend the book schema and update the routes accordingly."
    }
]