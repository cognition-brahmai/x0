[
    {
        "role": "user",
        "content": "Design a Java program that implements a simple chat server and client using sockets. The server should support multiple clients, broadcast messages from one client to all others, and allow clients to choose their username upon joining."
    },
    {
        "role": "assistant",
        "content": "Designing a simple chat server and client using Java sockets involves several steps. We'll create a multi-client server that can handle multiple connections, broadcast messages to all connected clients, and allow each client to choose a username upon joining.\n\n### Overview\n\n1. **Server:**\n   - Listens for incoming client connections.\n   - Manages multiple client connections using threads.\n   - Broadcasts messages from one client to all other connected clients.\n   - Assigns usernames to clients upon connection.\n\n2. **Client:**\n   - Connects to the server.\n   - Sends messages to the server.\n   - Receives messages from the server and displays them.\n\n### Server Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 12345;\n    private static List<ClientHandler> clients = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n        System.out.println(\"Chat Server started on port \" + PORT);\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            ClientHandler clientHandler = new ClientHandler(socket);\n            clients.add(clientHandler);\n            new Thread(clientHandler).start();\n        }\n    }\n\n    public static void broadcastMessage(String message, ClientHandler sender) {\n        for (ClientHandler client : clients) {\n            if (client != sender) {\n                client.sendMessage(message);\n            }\n        }\n    }\n\n    static class ClientHandler implements Runnable {\n        private Socket socket;\n        private PrintWriter out;\n        private String username;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                InputStream input = socket.getInputStream();\n                OutputStream output = socket.getOutputStream();\n                BufferedReader in = new BufferedReader(new InputStreamReader(input));\n                out = new PrintWriter(output, true);\n\n                // Request username\n                out.println(\"Enter your username:\");\n                username = in.readLine();\n                if (username == null || username.isEmpty()) {\n                    username = \"Anonymous\";\n                }\n                out.println(\"Welcome, \" + username + \"!\");\n\n                // Notify all clients about new user\n                broadcastMessage(username + \" has joined the chat.\", this);\n\n                String message;\n                while ((message = in.readLine()) != null) {\n                    System.out.println(username + \": \" + message);\n                    broadcastMessage(username + \": \" + message, this);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                clients.remove(this);\n                broadcastMessage(username + \" has left the chat.\", this);\n            }\n        }\n\n        public void sendMessage(String message) {\n            out.println(message);\n        }\n    }\n}\n```\n\n### Client Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.Scanner;\n\npublic class ChatClient {\n    private static final String SERVER_ADDRESS = \"localhost\";\n    private static final int PORT = 12345;\n\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(SERVER_ADDRESS, PORT);\n        System.out.println(\"Connected to chat server\");\n\n        InputStream input = socket.getInputStream();\n        OutputStream output = socket.getOutputStream();\n        BufferedReader in = new BufferedReader(new InputStreamReader(input));\n        PrintWriter out = new PrintWriter(output, true);\n\n        // Start a thread to read messages from server\n        new Thread(() -> {\n            try {\n                String message;\n                while ((message = in.readLine()) != null) {\n                    System.out.println(message);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }).start();\n\n        // Read user input and send to server\n        Scanner scanner = new Scanner(System.in);\n        while (true) {\n            String message = scanner.nextLine();\n            out.println(message);\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server:**\n   - Uses a `ServerSocket` to listen for incoming connections on a specified port.\n   - For each client connection, it creates a new `ClientHandler` thread to handle communication with that client.\n   - Manages a list of connected clients to broadcast messages.\n   - Assigns a username to each client upon connection.\n\n2. **Client:**\n   - Connects to the server using a `Socket`.\n   - Reads messages from the server in a separate thread and prints them to the console.\n   - Reads user input and sends messages to the server.\n\nThis setup allows multiple clients to connect to the server, choose usernames, and communicate with each other by broadcasting messages."
    }
]