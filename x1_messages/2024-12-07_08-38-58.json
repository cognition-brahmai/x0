[
    {
        "role": "user",
        "content": "Create a Python class for a doubly linked list with methods to add nodes at the beginning, end, and at a specific position in the list. Also include methods to delete nodes by value and display the contents of the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, you want a Python class for a doubly linked list, right? Okay, let's start by understanding what a doubly linked list is.\n\nA doubly linked list is a type of linked list where each node has pointers to both the next node and the previous node. This allows traversal in both directions, which can be quite handy in certain scenarios.\n\nSo, for this class, we need to define a node structure first, which will hold the data and the pointers to the next and previous nodes. Then, we'll define the doubly linked list class that will manage these nodes.\n\nLet's think about the methods you've asked for:\n\n1. **Add nodes at the beginning**: This means we need a method to insert a new node at the start of the list.\n\n2. **Add nodes at the end**: Another method to append a new node at the end of the list.\n\n3. **Add nodes at a specific position**: A method that allows insertion at any given position in the list.\n\n4. **Delete nodes by value**: A method to remove a node based on its value.\n\n5. **Display the contents of the list**: A method to print out the elements of the list.\n\nAlright, let's start by defining the node class.\n\n## Final Solution\nTo create a doubly linked list in Python, we need to define a node structure and then manage these nodes within a class. Below is the implementation of such a class with methods to add nodes at the beginning, end, and at a specific position, as well as methods to delete nodes by value and display the list contents.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n        self.tail = None\n\n    def add_beginning(self, data):\n        new_node = Node(data)\n        if self.head is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def add_end(self, data):\n        new_node = Node(data)\n        if self.tail is None:\n            self.head = new_node\n            self.tail = new_node\n        else:\n            new_node.prev = self.tail\n            self.tail.next = new_node\n            self.tail = new_node\n\n    def add_at_position(self, data, position):\n        if position <= 0:\n            self.add_beginning(data)\n        else:\n            new_node = Node(data)\n            current = self.head\n            current_position = 0\n            while current and current_position < position:\n                current = current.next\n                current_position += 1\n            if current is None:\n                self.add_end(data)\n            else:\n                previous = current.prev\n                new_node.prev = previous\n                new_node.next = current\n                previous.next = new_node\n                current.prev = new_node\n\n    def delete_by_value(self, value):\n        current = self.head\n        while current:\n            if current.data == value:\n                if current.prev:\n                    current.prev.next = current.next\n                else:\n                    self.head = current.next\n                if current.next:\n                    current.next.prev = current.prev\n                else:\n                    self.tail = current.prev\n                return\n            current = current.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\nif __name__ == \"__main__\":\n    dll = DoublyLinkedList()\n    dll.add_beginning(10)\n    dll.add_end(20)\n    dll.add_at_position(15, 1)\n    dll.display()  # Output: 10 <-> 15 <-> 20 <-> None\n    dll.delete_by_value(15)\n    dll.display()  # Output: 10 <-> 20 <-> None\n```\n\n### Explanation\n\n1. **Node Class**: Represents each element in the doubly linked list with `data`, `next`, and `prev` attributes.\n\n2. **DoublyLinkedList Class**:\n   - **add_beginning(data)**: Adds a new node with the given data at the start of the list.\n   - **add_end(data)**: Adds a new node with the given data at the end of the list.\n   - **add_at_position(data, position)**: Inserts a new node at the specified position. If the position is invalid or less than or equal to zero, it adds the node at the beginning.\n   - **delete_by_value(value)**: Removes the first node that matches the given value.\n   - **display()**: Prints the entire list from head to tail.\n\nThis implementation ensures that all operations maintain the integrity of the doubly linked list, updating the previous and next pointers appropriately."
    }
]