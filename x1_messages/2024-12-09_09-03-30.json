[
    {
        "role": "user",
        "content": "Develop a Python Flask web application with two endpoints: one for uploading an image file (JPEG, PNG) and another for resizing the uploaded image to a specified width and height. Save the resized image to disk and return its filename.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I've got this task to create a Python Flask web application with two main endpoints: one for uploading an image file (either JPEG or PNG), and another for resizing that uploaded image to a specified width and height. After resizing, I need to save the image to disk and return its filename. Sounds straightforward, but let's break it down step by step to ensure I cover all the bases.\n\nFirst things first, I need to set up a basic Flask application. Flask is a micro web framework for Python, and it's perfect for small to medium applications like this. I need to make sure I have Flask installed. I can install it using pip if I don't have it already:\n\n```bash\npip install Flask\n```\n\nNext, I need to think about the structure of my application. For clarity, I'll organize my files like this:\n\n```\n/my_flask_app\n    /static\n        /uploads\n    /templates\n    app.py\n```\n\n- `/static/uploads`: This directory will store the uploaded and resized images.\n- `/templates`: This is where I'll keep any HTML templates if needed, but for this task, since it's API-based, I might not need any templates.\n- `app.py`: This will contain all my Flask application code.\n\nNow, let's tackle the first endpoint: uploading an image file. I need to accept JPEG or PNG files. In Flask, handling file uploads involves accessing the `request` object, specifically `request.files`. I need to make sure to configure Flask to accept file uploads.\n\nFirst, I need to import the necessary modules:\n\n```python\nfrom flask import Flask, request, jsonify\nimport os\nfrom PIL import Image\n```\n\nI'll initialize my Flask app:\n\n```python\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'static/uploads/'\napp.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg'}\n```\n\nI defined an `UPLOAD_FOLDER` where uploaded files will be stored, and `ALLOWED_EXTENSIONS` to specify which file types are acceptable.\n\nNext, I need a function to check if the uploaded file has an allowed extension:\n\n```python\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n```\n\nNow, I can create the endpoint for uploading files:\n\n```python\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file and allowed_file(file.filename):\n        filename = file.filename\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'filename': filename}), 200\n    else:\n        return jsonify({'error': 'File type not allowed'}), 400\n```\n\nHere, I check if the 'file' part exists in the request, if a file is actually selected, and if it has an allowed extension. If everything is okay, I save the file to the upload folder and return the filename.\n\nMoving on to the second endpoint: resizing the image. I need to accept parameters for the new width and height, resize the image accordingly, save it, and return the filename of the resized image.\n\nFor image resizing, I'll use the PIL library (Pillow), which is a fork of PIL and adds some user-friendly features.\n\nFirst, make sure to install Pillow if it's not already installed:\n\n```bash\npip install Pillow\n```\n\nNow, I'll create the resizing endpoint:\n\n```python\n@app.route('/resize', methods=['POST'])\ndef resize_image():\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'Request data not found'}), 400\n    filename = data.get('filename')\n    width = data.get('width')\n    height = data.get('height')\n    \n    if not filename or not width or not height:\n        return jsonify({'error': 'Missing parameters'}), 400\n    \n    # Validate width and height\n    if not isinstance(width, int) or not isinstance(height, int) or width <= 0 or height <= 0:\n        return jsonify({'error': 'Width and height must be positive integers'}), 400\n    \n    # Check if file exists\n    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n    if not os.path.exists(file_path):\n        return jsonify({'error': 'File not found'}), 404\n    \n    # Open image\n    try:\n        with Image.open(file_path) as img:\n            # Resize image\n            resized_img = img.resize((width, height))\n            # Save resized image\n            resized_filename = f\"resized_{width}x{height}_{filename}\"\n            resized_file_path = os.path.join(app.config['UPLOAD_FOLDER'], resized_filename)\n            resized_img.save(resized_file_path)\n            return jsonify({'resized_filename': resized_filename}), 200\n    except IOError:\n        return jsonify({'error': 'Cannot open image'}), 500\n```\n\nIn this endpoint, I expect a JSON payload with `filename`, `width`, and `height`. I validate these parameters, check if the file exists, open it using Pillow, resize it, save the resized image with a new filename, and return the new filename.\n\nI added some error handling to manage cases where the file doesn't exist, invalid parameters are provided, or there are issues opening the image.\n\nFinally, I need to run the Flask application. I'll add this at the end of `app.py`:\n\n```python\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nThis will run the Flask app in debug mode, which is helpful for development as it provides detailed error messages and auto-reloads the server on code changes.\n\nTo summarize, here's the complete `app.py`:\n\n```python\nfrom flask import Flask, request, jsonify\nimport os\nfrom PIL import Image\n\napp = Flask(__name__)\napp.config['UPLOAD_FOLDER'] = 'static/uploads/'\napp.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg'}\n\ndef allowed_file(filename):\n    return '.' in filename and \\\n           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']\n\n@app.route('/upload', methods=['POST'])\ndef upload_file():\n    if 'file' not in request.files:\n        return jsonify({'error': 'No file part'}), 400\n    file = request.files['file']\n    if file.filename == '':\n        return jsonify({'error': 'No selected file'}), 400\n    if file and allowed_file(file.filename):\n        filename = file.filename\n        file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n        return jsonify({'filename': filename}), 200\n    else:\n        return jsonify({'error': 'File type not allowed'}), 400\n\n@app.route('/resize', methods=['POST'])\ndef resize_image():\n    data = request.get_json()\n    if not data:\n        return jsonify({'error': 'Request data not found'}), 400\n    filename = data.get('filename')\n    width = data.get('width')\n    height = data.get('height')\n    \n    if not filename or not width or not height:\n        return jsonify({'error': 'Missing parameters'}), 400\n    \n    # Validate width and height\n    if not isinstance(width, int) or not isinstance(height, int) or width <= 0 or height <= 0:\n        return jsonify({'error': 'Width and height must be positive integers'}), 400\n    \n    # Check if file exists\n    file_path = os.path.join(app.config['UPLOAD_FOLDER'], filename)\n    if not os.path.exists(file_path):\n        return jsonify({'error': 'File not found'}), 404\n    \n    # Open image\n    try:\n        with Image.open(file_path) as img:\n            # Resize image\n            resized_img = img.resize((width, height))\n            # Save resized image\n            resized_filename = f\"resized_{width}x{height}_{filename}\"\n            resized_file_path = os.path.join(app.config['UPLOAD_FOLDER'], resized_filename)\n            resized_img.save(resized_file_path)\n            return jsonify({'resized_filename': resized_filename}), 200\n    except IOError:\n        return jsonify({'error': 'Cannot open image'}), 500\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nMake sure the `static/uploads` directory exists, or create it before running the application.\n\nThis should cover the requirements: uploading an image and resizing it with specified dimensions, saving the resized image, and returning its filename."
    }
]