[
    {
        "role": "user",
        "content": "Write a JavaScript function that takes in an array of integers as input and returns an array of those numbers sorted in ascending order using the Bubble Sort algorithm. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Bubble Sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere's how you can implement it in JavaScript:\n\n```javascript\nfunction bubbleSort(arr) {\n    let n = arr.length;\n    for (let i = 0; i < n-1; i++) {\n        for (let j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                // Swap arr[j] and arr[j+1]\n                let temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n\n// Example usage:\nlet numbers = [64, 34, 25, 12, 22, 11, 90];\nlet sortedNumbers = bubbleSort(numbers);\nconsole.log(sortedNumbers);  // Output: [11, 12, 22, 25, 34, 64, 90]\n```\n\nIn this code:\n\n- We define a function `bubbleSort` that takes an array `arr` as input.\n\n- We get the length of the array and store it in `n`.\n\n- We use two nested loops:\n\n- The outer loop runs `n-1` times.\n\n- The inner loop runs `n-i-1` times for each iteration of the outer loop.\n\n- In the inner loop, we compare adjacent elements. If the current element is greater than the next one, we swap them.\n\n- Finally, we return the sorted array.\n\nThis implementation has a time complexity of O(n\u00b2), making it inefficient for large datasets. However, it's straightforward and good for understanding the basics of sorting algorithms."
    }
]