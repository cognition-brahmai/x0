[
    {
        "role": "user",
        "content": "Create a Java application that uses Apache Kafka to produce messages to a topic and consume messages from the same topic, displaying them on the console.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through creating a simple Java application that uses Apache Kafka to produce and consume messages to and from a topic. We'll set up both a producer and a consumer that will interact with the same Kafka topic. By the end of this, you should have a basic understanding of how to integrate Kafka into your Java applications.\n\n### Prerequisites\n\nBefore we start, make sure you have the following installed:\n\n1. **Java Development Kit (JDK)**: You need JDK 8 or later.\n2. **Apache Kafka**: You need to have Kafka installed and running on your machine. If you haven't installed Kafka yet, you can download it from [Apache Kafka's official website](https://kafka.apache.org/downloads).\n3. **Maven**: We'll use Maven to manage dependencies.\n\n### Step 1: Set Up Kafka\n\nIf you haven't already, download and extract Kafka from the official website. Start the ZooKeeper and Kafka server:\n\n```bash\n# Start ZooKeeper\n./bin/zookeeper-server-start.sh ./config/zookeeper.properties\n\n# Start Kafka Server\n./bin/kafka-server-start.sh ./config/server.properties\n```\n\nCreate a Kafka topic that we'll use for this example:\n\n```bash\n./bin/kafka-topics.sh --create --topic my-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1\n```\n\n### Step 2: Create a Maven Project\n\nCreate a new directory for your project and initialize a Maven project:\n\n```bash\nmkdir kafka-example\ncd kafka-example\nmvn archetype:generate -DgroupId=com.example -DartifactId=kafka-example -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\ncd kafka-example\n```\n\n### Step 3: Add Dependencies\n\nOpen the `pom.xml` file and add the Kafka client dependency:\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.apache.kafka</groupId>\n        <artifactId>kafka-clients</artifactId>\n        <version>3.0.0</version> <!-- Check for the latest version -->\n    </dependency>\n</dependencies>\n```\n\n### Step 4: Create the Producer\n\nCreate a new Java class called `KafkaProducer` in the `src/main/java/com/example` package:\n\n```java\npackage com.example;\n\nimport org.apache.kafka.clients.producer.KafkaProducer;\nimport org.apache.kafka.clients.producer.Producer;\nimport org.apache.kafka.clients.producer.ProducerRecord;\n\nimport java.util.Properties;\n\npublic class KafkaProducer {\n\n    public static void main(String[] args) {\n        // Configure the producer\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n        props.put(\"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\");\n\n        Producer<String, String> producer = new KafkaProducer<>(props);\n\n        // Send some messages\n        for (int i = 0; i < 10; i++) {\n            String key = \"key-\" + i;\n            String value = \"value-\" + i;\n            producer.send(new ProducerRecord<>(\"my-topic\", key, value));\n            System.out.println(\"Sent: (\" + key + \", \" + value + \")\");\n        }\n\n        // Flush and close the producer\n        producer.flush();\n        producer.close();\n    }\n}\n```\n\n### Step 5: Create the Consumer\n\nCreate another Java class called `KafkaConsumer` in the same package:\n\n```java\npackage com.example;\n\nimport org.apache.kafka.clients.consumer.ConsumerRecord;\nimport org.apache.kafka.clients.consumer.ConsumerRecords;\nimport org.apache.kafka.clients.consumer.KafkaConsumer;\n\nimport java.time.Duration;\nimport java.util.Collections;\nimport java.util.Properties;\n\npublic class KafkaConsumer {\n\n    public static void main(String[] args) {\n        // Configure the consumer\n        Properties props = new Properties();\n        props.put(\"bootstrap.servers\", \"localhost:9092\");\n        props.put(\"group.id\", \"test-group\");\n        props.put(\"enable.auto.commit\", \"true\");\n        props.put(\"auto.commit.interval.ms\", \"1000\");\n        props.put(\"key.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n        props.put(\"value.deserializer\", \"org.apache.kafka.common.serialization.StringDeserializer\");\n\n        KafkaConsumer<String, String> consumer = new KafkaConsumer<>(props);\n        consumer.subscribe(Collections.singletonList(\"my-topic\"));\n\n        // Poll for new messages\n        try {\n            while (true) {\n                ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));\n                for (ConsumerRecord<String, String> record : records) {\n                    System.out.printf(\"Received: partition = %d, key = %s, value = %s%n\", record.partition(), record.key(), record.value());\n                }\n            }\n        } finally {\n            consumer.close();\n        }\n    }\n}\n```\n\n### Step 6: Run the Producer and Consumer\n\nFirst, run the consumer in one terminal window:\n\n```bash\nmvn compile exec:java -Dexec.mainClass=\"com.example.KafkaConsumer\"\n```\n\nThen, in another terminal window, run the producer:\n\n```bash\nmvn compile exec:java -Dexec.mainClass=\"com.example.KafkaProducer\"\n```\n\nYou should see the messages being sent by the producer and received by the consumer in their respective console outputs.\n\n### Conclusion\n\nYou've successfully created a simple Java application that uses Apache Kafka to produce and consume messages to and from a topic. This is a basic example to get you started. In real-world applications, you'll likely need to handle more complexities, such as error handling, message serialization, and more advanced Kafka features.\n\nFeel free to explore more about Kafka and its capabilities to enhance your application further."
    }
]