[
    {
        "role": "user",
        "content": "Write a C program that implements a doubly linked list. The program should include functions to insert nodes at the beginning, end, and a specified position in the list. It should also include functions to delete nodes from the beginning, end, and a specific position in the list."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C program that implements a doubly linked list with the specified functionalities.\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n\n// Define the structure for a node\nstruct Node {\n    int data;\n    struct Node* prev;\n    struct Node* next;\n};\n\n// Function to create a new node\nstruct Node* createNode(int data) {\n    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));\n    newNode->data = data;\n    newNode->prev = NULL;\n    newNode->next = NULL;\n    return newNode;\n}\n\n// Function to insert a node at the beginning\nvoid insertAtBeginning(struct Node** head, int data) {\n    struct Node* newNode = createNode(data);\n    if (*head != NULL) {\n        (*head)->prev = newNode;\n    }\n    newNode->next = *head;\n    *head = newNode;\n}\n\n// Function to insert a node at the end\nvoid insertAtEnd(struct Node** head, int data) {\n    struct Node* newNode = createNode(data);\n    if (*head == NULL) {\n        *head = newNode;\n        return;\n    }\n    struct Node* current = *head;\n    while (current->next != NULL) {\n        current = current->next;\n    }\n    current->next = newNode;\n    newNode->prev = current;\n}\n\n// Function to insert a node at a specified position\nvoid insertAtPosition(struct Node** head, int data, int position) {\n    if (position <= 0) {\n        printf(\"Invalid position\\n\");\n        return;\n    }\n    if (position == 1) {\n        insertAtBeginning(head, data);\n        return;\n    }\n    struct Node* newNode = createNode(data);\n    struct Node* current = *head;\n    int count = 1;\n    while (current != NULL && count < position - 1) {\n        current = current->next;\n        count++;\n    }\n    if (current == NULL) {\n        printf(\"Position out of range\\n\");\n        free(newNode);\n        return;\n    }\n    newNode->next = current->next;\n    if (current->next != NULL) {\n        current->next->prev = newNode;\n    }\n    current->next = newNode;\n    newNode->prev = current;\n}\n\n// Function to delete a node from the beginning\nvoid deleteFromBeginning(struct Node** head) {\n    if (*head == NULL) {\n        printf(\"List is empty\\n\");\n        return;\n    }\n    struct Node* temp = *head;\n    *head = (*head)->next;\n    if (*head != NULL) {\n        (*head)->prev = NULL;\n    }\n    free(temp);\n}\n\n// Function to delete a node from the end\nvoid deleteFromEnd(struct Node** head) {\n    if (*head == NULL) {\n        printf(\"List is empty\\n\");\n        return;\n    }\n    struct Node* current = *head;\n    while (current->next != NULL) {\n        current = current->next;\n    }\n    if (current->prev != NULL) {\n        current->prev->next = NULL;\n    } else {\n        *head = NULL;\n    }\n    free(current);\n}\n\n// Function to delete a node from a specific position\nvoid deleteFromPosition(struct Node** head, int position) {\n    if (*head == NULL) {\n        printf(\"List is empty\\n\");\n        return;\n    }\n    if (position <= 0) {\n        printf(\"Invalid position\\n\");\n        return;\n    }\n    if (position == 1) {\n        deleteFromBeginning(head);\n        return;\n    }\n    struct Node* current = *head;\n    int count = 1;\n    while (current != NULL && count < position) {\n        current = current->next;\n        count++;\n    }\n    if (current == NULL) {\n        printf(\"Position out of range\\n\");\n        return;\n    }\n    if (current->prev != NULL) {\n        current->prev->next = current->next;\n    } else {\n        *head = current->next;\n    }\n    if (current->next != NULL) {\n        current->next->prev = current->prev;\n    }\n    free(current);\n}\n\n// Function to display the list\nvoid displayList(struct Node* head) {\n    struct Node* current = head;\n    printf(\"List: \");\n    while (current != NULL) {\n        printf(\"%d \", current->data);\n        current = current->next;\n    }\n    printf(\"\\n\");\n}\n\nint main() {\n    struct Node* head = NULL;\n\n    insertAtBeginning(&head, 10);\n    insertAtEnd(&head, 20);\n    insertAtEnd(&head, 30);\n    insertAtBeginning(&head, 5);\n    insertAtPosition(&head, 15, 3);\n    displayList(head);\n\n    deleteFromBeginning(&head);\n    displayList(head);\n\n    deleteFromEnd(&head);\n    displayList(head);\n\n    deleteFromPosition(&head, 2);\n    displayList(head);\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Node Structure**: Each node contains `data`, a pointer to the previous node (`prev`), and a pointer to the next node (`next`).\n2. **createNode Function**: Allocates memory for a new node and initializes its fields.\n3. **insertAtBeginning Function**: Inserts a new node at the start of the list.\n4. **insertAtEnd Function**: Inserts a new node at the end of the list.\n5. **insertAtPosition Function**: Inserts a new node at a specified position in the list.\n6. **deleteFromBeginning Function**: Removes the first node from the list.\n7. **deleteFromEnd Function**: Removes the last node from the list.\n8. **deleteFromPosition Function**: Removes a node at a specified position in the list.\n9. **displayList Function**: Prints the elements of the list.\n\nThis program demonstrates basic operations on a doubly linked list, including insertion and deletion at various positions."
    }
]