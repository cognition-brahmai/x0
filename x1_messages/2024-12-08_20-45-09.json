[
    {
        "role": "user",
        "content": "Implement a Node.js Express server that provides RESTful API endpoints for managing a collection of books. Each book should have a title, author, publication date, and ISBN number. The API should support creating, reading, updating, and deleting books, as well as searching by author or title.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you set up a Node.js Express server with RESTful API endpoints for managing a collection of books. Each book will have a title, author, publication date, and ISBN number. We'll make sure to cover all the CRUD operations: Create, Read, Update, and Delete, as well as searching by author or title.\n\nFirst, you need to have Node.js installed on your machine. If you don't have it yet, you can download it from [nodejs.org](https://nodejs.org/). Once you have Node.js installed, open your terminal or command prompt and create a new directory for your project.\n\nLet's name it \"book-api\". Navigate into the directory and initialize a new Node.js project by running:\n\n```\nnpm init -y\n```\n\nThis command creates a `package.json` file with default settings.\n\nNext, you need to install Express, which is a minimal and flexible Node.js web application framework. Run the following command to install Express:\n\n```\nnpm install express\n```\n\nNow, create a new file called `server.js` in your project directory. This will be the main file for your server.\n\nOpen `server.js` and require the Express module:\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nThis sets up a basic Express server that listens on port 3000.\n\nTo handle JSON data in requests, you need to use the `express.json()` middleware. Add this line before defining your routes:\n\n```javascript\napp.use(express.json());\n```\n\nNow, let's create an in-memory array to store our books. For a real-world application, you'd probably use a database, but for simplicity, we'll use an array.\n\nDefine a `books` array and some sample books:\n\n```javascript\nlet books = [\n  {\n    id: 1,\n    title: 'Book One',\n    author: 'Author A',\n    publicationDate: '2020-01-01',\n    isbn: '1234567890'\n  },\n  {\n    id: 2,\n    title: 'Book Two',\n    author: 'Author B',\n    publicationDate: '2019-06-15',\n    isbn: '0987654321'\n  }\n];\n```\n\nWe'll use an `id` field to uniquely identify each book. In a real application, you'd likely use a database that handles IDs automatically.\n\nNext, let's define the API endpoints.\n\n**1. Get all books**\n\nThis endpoint will return all books in the collection.\n\n```javascript\napp.get('/books', (req, res) => {\n  res.json(books);\n});\n```\n\n**2. Get a single book by ID**\n\nThis endpoint will return a book based on its ID.\n\n```javascript\napp.get('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).json({ message: 'Book not found' });\n  res.json(book);\n});\n```\n\n**3. Create a new book**\n\nThis endpoint will allow you to add a new book to the collection.\n\n```javascript\napp.post('/books', (req, res) => {\n  const newBook = {\n    id: books.length + 1,\n    title: req.body.title,\n    author: req.body.author,\n    publicationDate: req.body.publicationDate,\n    isbn: req.body.isbn\n  };\n  books.push(newBook);\n  res.status(201).json(newBook);\n});\n```\n\n**4. Update a book**\n\nThis endpoint will allow you to update an existing book.\n\n```javascript\napp.put('/books/:id', (req, res) => {\n  const book = books.find(b => b.id === parseInt(req.params.id));\n  if (!book) return res.status(404).json({ message: 'Book not found' });\n\n  book.title = req.body.title || book.title;\n  book.author = req.body.author || book.author;\n  book.publicationDate = req.body.publicationDate || book.publicationDate;\n  book.isbn = req.body.isbn || book.isbn;\n\n  res.json(book);\n});\n```\n\n**5. Delete a book**\n\nThis endpoint will allow you to delete a book by its ID.\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n  const bookIndex = books.findIndex(b => b.id === parseInt(req.params.id));\n  if (bookIndex === -1) return res.status(404).json({ message: 'Book not found' });\n\n  const deletedBook = books.splice(bookIndex, 1);\n  res.json(deletedBook[0]);\n});\n```\n\n**6. Search books by title or author**\n\nThis endpoint will allow you to search for books by title or author.\n\n```javascript\napp.get('/books/search', (req, res) => {\n  const { title, author } = req.query;\n  let result = books;\n\n  if (title) {\n    result = result.filter(book => book.title.toLowerCase().includes(title.toLowerCase()));\n  }\n\n  if (author) {\n    result = result.filter(book => book.author.toLowerCase().includes(author.toLowerCase()));\n  }\n\n  res.json(result);\n});\n```\n\nThat's it! You've now set up a basic RESTful API for managing books using Express in Node.js.\n\nTo test your API, you can use tools like Postman or curl. Here are some examples:\n\n- **Get all books:** `GET http://localhost:3000/books`\n\n- **Get a single book:** `GET http://localhost:3000/books/1`\n\n- **Create a new book:** `POST http://localhost:3000/books` with JSON body:\n\n  ```json\n  {\n    \"title\": \"New Book\",\n    \"author\": \"New Author\",\n    \"publicationDate\": \"2021-01-01\",\n    \"isbn\": \"1112223334\"\n  }\n  ```\n\n- **Update a book:** `PUT http://localhost:3000/books/1` with JSON body:\n\n  ```json\n  {\n    \"title\": \"Updated Book Title\"\n  }\n  ```\n\n- **Delete a book:** `DELETE http://localhost:3000/books/1`\n\n- **Search books:** `GET http://localhost:3000/books/search?title=Book` or `GET http://localhost:3000/books/search?author=Author A`\n\nRemember, since we're using an in-memory array, all data will be lost when you restart the server. For a persistent solution, consider integrating a database like MongoDB or PostgreSQL.\n\nI hope this helps you get started with your book management API! If you have any questions or need further assistance, feel free to ask."
    }
]