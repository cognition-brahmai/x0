[
    {
        "role": "user",
        "content": "Write a python script that creates a RESTful API using FastAPI and integrates it with Swagger/OpenAPI for documentation. The API should have endpoints for creating, reading, updating, and deleting items in a simple key-value store. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a simple RESTful API using FastAPI that acts as a key-value store. We'll also integrate Swagger/OpenAPI for documentation, which will make it easy to understand and interact with the API.\n\nFirst, make sure you have FastAPI and Uvicorn installed. Uvicorn is an ASGI server that we'll use to run our API. You can install both using pip:\n\n```bash\npip install fastapi uvicorn\n```\n\nNow, let's create a new Python file, say `main.py`, and start building our API.\n\n### Step 1: Import necessary modules\n\nWe'll need FastAPI and Uvicorn, as well as some other utilities.\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Dict\n```\n\n### Step 2: Initialize the FastAPI app\n\nCreate an instance of the FastAPI class.\n\n```python\napp = FastAPI()\n```\n\n### Step 3: Define the data model\n\nWe'll use a dictionary to simulate a key-value store. For simplicity, we'll use strings for both keys and values.\n\n```python\nstore: Dict[str, str] = {}\n```\n\n### Step 4: Create the endpoints\n\n#### Create item (POST)\n\nThis endpoint will allow users to add a new key-value pair to the store.\n\n```python\nclass Item(BaseModel):\n    value: str\n\n@app.post(\"/items/{key}\")\nasync def create_item(key: str, item: Item):\n    if key in store:\n        return {\"error\": \"Key already exists\"}\n    store[key] = item.value\n    return {\"success\": True, \"key\": key, \"value\": item.value}\n```\n\n#### Read item (GET)\n\nThis endpoint will retrieve the value associated with a given key.\n\n```python\n@app.get(\"/items/{key}\")\nasync def read_item(key: str):\n    value = store.get(key)\n    if value is None:\n        return {\"error\": \"Key not found\"}\n    return {\"key\": key, \"value\": value}\n```\n\n#### Update item (PUT)\n\nThis endpoint will update the value of an existing key.\n\n```python\n@app.put(\"/items/{key}\")\nasync def update_item(key: str, item: Item):\n    if key not in store:\n        return {\"error\": \"Key not found\"}\n    store[key] = item.value\n    return {\"success\": True, \"key\": key, \"value\": item.value}\n```\n\n#### Delete item (DELETE)\n\nThis endpoint will remove a key-value pair from the store.\n\n```python\n@app.delete(\"/items/{key}\")\nasync def delete_item(key: str):\n    if key not in store:\n        return {\"error\": \"Key not found\"}\n    del store[key]\n    return {\"success\": True, \"deleted_key\": key}\n```\n\n### Step 5: Run the API\n\nTo run the API, you can use Uvicorn by pointing it to your script and the app instance.\n\n```bash\nuvicorn main:app --reload\n```\n\nThis will start the server, and you can access the Swagger UI at `http://127.0.0.1:8000/docs` to interact with your API.\n\n### Complete Code\n\nHere's the complete code for `main.py`:\n\n```python\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom typing import Dict\n\napp = FastAPI()\nstore: Dict[str, str] = {}\n\nclass Item(BaseModel):\n    value: str\n\n@app.post(\"/items/{key}\")\nasync def create_item(key: str, item: Item):\n    if key in store:\n        return {\"error\": \"Key already exists\"}\n    store[key] = item.value\n    return {\"success\": True, \"key\": key, \"value\": item.value}\n\n@app.get(\"/items/{key}\")\nasync def read_item(key: str):\n    value = store.get(key)\n    if value is None:\n        return {\"error\": \"Key not found\"}\n    return {\"key\": key, \"value\": value}\n\n@app.put(\"/items/{key}\")\nasync def update_item(key: str, item: Item):\n    if key not in store:\n        return {\"error\": \"Key not found\"}\n    store[key] = item.value\n    return {\"success\": True, \"key\": key, \"value\": item.value}\n\n@app.delete(\"/items/{key}\")\nasync def delete_item(key: str):\n    if key not in store:\n        return {\"error\": \"Key not found\"}\n    del store[key]\n    return {\"success\": True, \"deleted_key\": key}\n```\n\nThat's it! You now have a simple key-value store API with CRUD operations, complete with Swagger/OpenAPI documentation."
    }
]