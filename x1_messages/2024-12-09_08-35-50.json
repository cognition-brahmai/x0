[
    {
        "role": "user",
        "content": "Create a Python script that connects to a Cassandra database, creates a table for storing user information (name, email, age), inserts sample data, and queries the data based on specified conditions (e.g., users older than 30)."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To interact with a Cassandra database in Python, we'll need to use the `cassandra-driver` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install cassandra-driver\n```\n\nOnce you have the package installed, we can proceed to write the script. Here's a step-by-step guide:\n\n1. **Connecting to the Cassandra Database:**\n   - You'll need to know the contact points (IP addresses of your Cassandra nodes) and the keyspace you want to use.\n\n2. **Creating a Table:**\n   - We'll create a table to store user information with columns for name, email, and age.\n\n3. **Inserting Sample Data:**\n   - We'll insert a few sample records into the table.\n\n4. **Querying Data:**\n   - We'll write a query to retrieve users who are older than 30.\n\nLet's assume you have a Cassandra cluster running locally, and you're using a keyspace named 'user_keyspace'. If your setup is different, adjust the connection parameters accordingly.\n\nHere's the complete Python script:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\n\n# Step 1: Connect to the Cassandra cluster\ncluster = Cluster(['127.0.0.1'])  # Replace with your Cassandra node's IP\nsession = cluster.connect()\n\n# Step 2: Create a keyspace (if it doesn't exist)\nsession.execute(\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS user_keyspace\n    WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n\"\"\")\n\n# Set the keyspace for the session\nsession.set_keyspace('user_keyspace')\n\n# Step 3: Create a table for user information\nsession.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        name text PRIMARY KEY,\n        email text,\n        age int\n    )\n\"\"\")\n\n# Step 4: Insert sample data\nsample_users = [\n    ('Alice', 'alice@example.com', 25),\n    ('Bob', 'bob@example.com', 35),\n    ('Charlie', 'charlie@example.com', 32),\n    ('David', 'david@example.com', 28)\n]\n\nfor user in sample_users:\n    session.execute(\n        \"\"\"\n        INSERT INTO users (name, email, age)\n        VALUES (%s, %s, %s)\n        \"\"\",\n        user\n    )\n\n# Step 5: Query users older than 30\nquery = SimpleStatement(\"SELECT * FROM users WHERE age > 30\")\nrows = session.execute(query)\n\nprint(\"Users older than 30:\")\nfor row in rows:\n    print(f\"Name: {row.name}, Email: {row.email}, Age: {row.age}\")\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation:\n\n1. **Connecting to the Cluster:**\n   - We create a cluster object pointing to the Cassandra node at '127.0.0.1'.\n   - We connect to the cluster and create a session.\n\n2. **Creating a Keyspace:**\n   - We create a keyspace named 'user_keyspace' with a simple replication strategy.\n\n3. **Creating a Table:**\n   - We create a table named 'users' with columns for name, email, and age. The name column is the primary key.\n\n4. **Inserting Sample Data:**\n   - We define a list of sample users and insert them into the 'users' table using prepared statements.\n\n5. **Querying Data:**\n   - We use a `SimpleStatement` to select users where age is greater than 30.\n   - We iterate through the result set and print the user details.\n\n6. **Closing the Connection:**\n   - Finally, we shut down the cluster connection to free up resources.\n\nMake sure your Cassandra server is running and accessible at the specified contact point before executing this script. If you're using a different keyspace or table structure, adjust the script accordingly.\n\nI hope this helps! Let me know if you have any questions or need further assistance."
    }
]