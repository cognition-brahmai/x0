[
    {
        "role": "user",
        "content": "Implement a simple calculator in JavaScript that supports addition, subtraction, multiplication, division, and square root functions. The calculator should have an intuitive user interface and error handling for invalid inputs or mathematical errors like division by zero."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Creating a simple calculator with JavaScript that includes addition, subtraction, multiplication, division, and square root functions is a great project. We'll make sure it has a user-friendly interface and robust error handling.\n\nFirst, let's plan out the steps we need to take:\n\n1. **HTML Structure**: Create the calculator's layout with buttons for numbers, operations, and an display area for results.\n\n2. **CSS Styling**: Make the calculator look nice and intuitive.\n\n3. **JavaScript Functionality**: Add the logic to perform calculations and handle user interactions.\n\n4. **Error Handling**: Ensure the calculator can handle invalid inputs and mathematical errors like division by zero.\n\nLet's start by creating the HTML structure.\n\n### Step 1: HTML Structure\n\nWe'll need:\n\n- A display area to show the current operation and result.\n\n- Number buttons (0-9).\n\n- Operation buttons (+, -, *, /, \u221a).\n\n- An equals button (=) to compute the result.\n\n- A clear button (C) to reset the display.\n\nHere's a basic HTML structure:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Simple Calculator</title>\n    <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n<body>\n    <div class=\"calculator\">\n        <div class=\"display\" id=\"display\">0</div>\n        <div class=\"buttons\">\n            <button class=\"btn\" onclick=\"clearDisplay()\">C</button>\n            <button class=\"btn\" onclick=\"appendNumber('7')\">7</button>\n            <button class=\"btn\" onclick=\"appendNumber('8')\">8</button>\n            <button class=\"btn\" onclick=\"appendNumber('9')\">9</button>\n            <button class=\"btn operator\" onclick=\"setOperator('+')\">+</button>\n            <button class=\"btn\" onclick=\"appendNumber('4')\">4</button>\n            <button class=\"btn\" onclick=\"appendNumber('5')\">5</button>\n            <button class=\"btn\" onclick=\"appendNumber('6')\">6</button>\n            <button class=\"btn operator\" onclick=\"setOperator('-')\">-</button>\n            <button class=\"btn\" onclick=\"appendNumber('1')\">1</button>\n            <button class=\"btn\" onclick=\"appendNumber('2')\">2</button>\n            <button class=\"btn\" onclick=\"appendNumber('3')\">3</button>\n            <button class=\"btn operator\" onclick=\"setOperator('*')\">*</button>\n            <button class=\"btn\" onclick=\"appendNumber('0')\">0</button>\n            <button class=\"btn\" onclick=\"appendDecimal('.')\">.</button>\n            <button class=\"btn\" onclick=\"calculateResult()\">=</button>\n            <button class=\"btn operator\" onclick=\"setOperator('/')\">/</button>\n            <button class=\"btn operator\" onclick=\"calculateSquareRoot()\">\u221a</button>\n        </div>\n    </div>\n    <script src=\"script.js\"></script>\n</body>\n</html>\n```\n\n### Step 2: CSS Styling\n\nWe'll style the calculator to make it look neat and user-friendly.\n\n```css\n/* styles.css */\nbody {\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n    background-color: #f0f0f0;\n    margin: 0;\n}\n\n.calculator {\n    border: 1px solid #999;\n    border-radius: 5px;\n    box-shadow: 2px 2px 5px rgba(0,0,0,0.1);\n    background-color: #fff;\n    padding: 20px;\n}\n\n.display {\n    height: 40px;\n    margin-bottom: 10px;\n    text-align: right;\n    font-size: 2em;\n    padding: 5px;\n    border: 1px solid #999;\n    border-radius: 3px;\n}\n\n.buttons {\n    display: grid;\n    grid-template-columns: repeat(4, 1fr);\n    grid-gap: 5px;\n}\n\n.btn {\n    padding: 15px;\n    font-size: 1.2em;\n    border: 1px solid #999;\n    border-radius: 3px;\n    background-color: #f9f9f9;\n    cursor: pointer;\n}\n\n.btn:active {\n    background-color: #e0e0e0;\n}\n\n.operator {\n    background-color: #e0e0e0;\n}\n```\n\n### Step 3: JavaScript Functionality\n\nNow, we'll add the JavaScript to handle the calculator's functionality.\n\n```javascript\n// script.js\nlet currentDisplay = '0';\nlet firstOperand = null;\nlet operator = null;\n\nfunction updateDisplay() {\n    const display = document.getElementById('display');\n    display.innerText = currentDisplay;\n}\n\nfunction appendNumber(number) {\n    if (currentDisplay === '0') {\n        currentDisplay = number;\n    } else {\n        currentDisplay += number;\n    }\n    updateDisplay();\n}\n\nfunction appendDecimal(decimal) {\n    if (!currentDisplay.includes(decimal)) {\n        currentDisplay += decimal;\n    }\n    updateDisplay();\n}\n\nfunction setOperator(op) {\n    if (firstOperand === null) {\n        firstOperand = parseFloat(currentDisplay);\n        operator = op;\n        currentDisplay = '0';\n    }\n}\n\nfunction clearDisplay() {\n    currentDisplay = '0';\n    firstOperand = null;\n    operator = null;\n    updateDisplay();\n}\n\nfunction calculateResult() {\n    const secondOperand = parseFloat(currentDisplay);\n    let result;\n\n    switch (operator) {\n        case '+':\n            result = firstOperand + secondOperand;\n            break;\n        case '-':\n            result = firstOperand - secondOperand;\n            break;\n        case '*':\n            result = firstOperand * secondOperand;\n            break;\n        case '/':\n            if (secondOperand === 0) {\n                alert(\"Error: Division by zero\");\n                clearDisplay();\n                return;\n            }\n            result = firstOperand / secondOperand;\n            break;\n        default:\n            result = currentDisplay;\n    }\n\n    currentDisplay = result.toString();\n    updateDisplay();\n    firstOperand = null;\n    operator = null;\n}\n\nfunction calculateSquareRoot() {\n    const operand = parseFloat(currentDisplay);\n    if (operand < 0) {\n        alert(\"Error: Square root of negative number\");\n        clearDisplay();\n        return;\n    }\n    const result = Math.sqrt(operand);\n    currentDisplay = result.toString();\n    updateDisplay();\n}\n\nupdateDisplay();\n```\n\n### Explanation\n\n1. **HTML Structure**: We created a basic calculator layout with buttons for numbers, operations, and a display area.\n\n2. **CSS Styling**: We styled the calculator to make it visually appealing and user-friendly.\n\n3. **JavaScript Functionality**:\n   - We manage the display and operations using variables to keep track of the current display, first operand, and the operator.\n   - We handle button clicks to append numbers, set operators, clear the display, and calculate results.\n   - We include error handling for division by zero and negative square roots.\n\nThis should give you a functional and intuitive calculator with the specified features. If you have any questions or need further modifications, feel free to ask!"
    }
]