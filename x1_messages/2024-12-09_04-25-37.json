[
    {
        "role": "user",
        "content": "Develop a Python script that monitors CPU usage on your system every 5 seconds and logs it to a file along with a timestamp.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To monitor CPU usage and log it with timestamps, we'll need to use a few Python libraries: `psutil` to get CPU usage, `time` to handle the timing, and `datetime` to get the current timestamp.\n\nFirst, make sure you have the `psutil` library installed. You can install it using pip if you don't have it already:\n\n```bash\npip install psutil\n```\n\nNow, here's a simple Python script that does what you're asking for:\n\n```python\nimport psutil\nimport time\nfrom datetime import datetime\n\n# Function to get CPU usage and timestamp\ndef get_cpu_usage():\n    cpu_usage = psutil.cpu_percent(interval=1)\n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    return current_time, cpu_usage\n\n# Main function to monitor CPU usage and log to a file\ndef monitor_cpu(output_file, interval=5):\n    with open(output_file, 'a') as file:\n        while True:\n            time.sleep(interval)\n            current_time, cpu_usage = get_cpu_usage()\n            log_entry = f\"{current_time}, {cpu_usage}%\\n\"\n            file.write(log_entry)\n            file.flush()  # Ensure data is written to the file immediately\n\nif __name__ == \"__main__\":\n    output_file = \"cpu_usage.log\"\n    interval = 5  # seconds\n    monitor_cpu(output_file, interval)\n```\n\n### Explanation:\n\n1. **get_cpu_usage Function**:\n    - Uses `psutil.cpu_percent(interval=1)` to get the CPU usage percentage over one second.\n    - Uses `datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")` to get the current timestamp in a readable format.\n\n2. **monitor_cpu Function**:\n    - Opens the specified output file in append mode.\n    - Enters an infinite loop where it sleeps for the specified interval (default is 5 seconds).\n    - Gets the current CPU usage and timestamp.\n    - Writes the log entry to the file, flushing the buffer to ensure immediate writing.\n\n3. **Main Block**:\n    - Sets the output file name and the monitoring interval.\n    - Calls the `monitor_cpu` function with these parameters.\n\n### How to Use:\n\n1. Save the script to a file, e.g., `monitor_cpu.py`.\n2. Run the script in your terminal or command prompt:\n    ```bash\n    python monitor_cpu.py\n    ```\n3. The script will start logging CPU usage every 5 seconds to `cpu_usage.log` in the same directory.\n\nYou can stop the script by interrupting it in the terminal (usually with `Ctrl+C`).\n\nThis should give you a basic CPU usage monitor that logs data with timestamps at regular intervals. If you need any modifications or have further questions, feel free to ask!"
    }
]