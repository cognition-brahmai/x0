[
    {
        "role": "user",
        "content": "Design a RESTful API using Node.js and Express that manages a simple inventory system. The API should support CRUD operations on items with properties such as item ID, name, description, price, and quantity. Also, implement user authentication using JWT tokens and role-based access control for different types of users (admin, manager, employee).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, let's dive into designing this RESTful API for a simple inventory system using Node.js and Express. We'll cover setting up the project, creating the database model, implementing CRUD operations, user authentication with JWT, and role-based access control.\n\n### Project Setup\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with `npm init`.\n\nInstall the necessary dependencies:\n\n```bash\nnpm install express mongoose bcryptjs jsonwebtoken dotenv cors\n```\n\n- `express`: For creating the server and handling routes.\n- `mongoose`: For connecting to MongoDB and defining schemas.\n- `bcryptjs`: For hashing passwords.\n- `jsonwebtoken`: For JWT token generation and verification.\n- `dotenv`: For managing environment variables.\n- `cors`: For handling cross-origin requests.\n\nCreate a `.env` file to store environment variables:\n\n```\nPORT=5000\nMONGO_URI=your_mongo_db_connection_string\nJWT_SECRET=your_jwt_secret\n```\n\n### Database Setup\n\nWe'll use MongoDB with Mongoose for our database operations. Define schemas for users and items.\n\n#### User Schema\n\n```javascript\n// models/User.js\nconst mongoose = require('mongoose');\n\nconst userSchema = new mongoose.Schema({\n  username: { type: String, required: true, unique: true },\n  password: { type: String, required: true },\n  role: { type: String, enum: ['admin', 'manager', 'employee'], default: 'employee' }\n});\n\nmodule.exports = mongoose.model('User', userSchema);\n```\n\n#### Item Schema\n\n```javascript\n// models/Item.js\nconst mongoose = require('mongoose');\n\nconst itemSchema = new mongoose.Schema({\n  itemId: { type: String, required: true, unique: true },\n  name: { type: String, required: true },\n  description: { type: String },\n  price: { type: Number, required: true },\n  quantity: { type: Number, required: true }\n});\n\nmodule.exports = mongoose.model('Item', itemSchema);\n```\n\n### User Authentication\n\nImplement user registration and login with JWT tokens.\n\n#### Registration\n\n```javascript\n// controllers/authController.js\nconst User = require('../models/User');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nexports.register = async (req, res) => {\n  try {\n    const { username, password, role } = req.body;\n    const existingUser = await User.findOne({ username });\n    if (existingUser) {\n      return res.status(400).json({ message: 'Username already exists' });\n    }\n    const hashedPassword = await bcrypt.hash(password, 10);\n    const user = new User({ username, password: hashedPassword, role });\n    await user.save();\n    res.status(201).json({ message: 'User registered successfully' });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n```\n\n#### Login\n\n```javascript\nexports.login = async (req, res) => {\n  try {\n    const { username, password } = req.body;\n    const user = await User.findOne({ username });\n    if (!user) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n    const isPasswordValid = await bcrypt.compare(password, user.password);\n    if (!isPasswordValid) {\n      return res.status(400).json({ message: 'Invalid credentials' });\n    }\n    const token = jwt.sign({ userId: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1h' });\n    res.json({ token });\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n```\n\n### Middleware for Authentication and Authorization\n\nCreate middleware to verify JWT tokens and check user roles.\n\n#### Verify Token\n\n```javascript\n// middleware/authMiddleware.js\nconst jwt = require('jsonwebtoken');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nexports.verifyToken = (req, res, next) => {\n  const token = req.headers['authorization'];\n  if (!token) {\n    return res.status(403).json({ message: 'No token provided' });\n  }\n  jwt.verify(token, process.env.JWT_SECRET, (err, decoded) => {\n    if (err) {\n      return res.status(401).json({ message: 'Unauthorized' });\n    }\n    req.userId = decoded.userId;\n    req.role = decoded.role;\n    next();\n  });\n};\n\nexports.isAdmin = (req, res, next) => {\n  if (req.role === 'admin') {\n    next();\n  } else {\n    res.status(403).json({ message: 'Forbidden' });\n  }\n};\n\nexports.isManagerOrAdmin = (req, res, next) => {\n  if (req.role === 'manager' || req.role === 'admin') {\n    next();\n  } else {\n    res.status(403).json({ message: 'Forbidden' });\n  }\n};\n```\n\n### CRUD Operations for Items\n\nImplement routes for creating, reading, updating, and deleting items. Use role-based access control to restrict certain operations.\n\n#### Item Controller\n\n```javascript\n// controllers/itemController.js\nconst Item = require('../models/Item');\n\nexports.createItem = async (req, res) => {\n  try {\n    const item = new Item(req.body);\n    await item.save();\n    res.status(201).json(item);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.getItems = async (req, res) => {\n  try {\n    const items = await Item.find();\n    res.json(items);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.getItemById = async (req, res) => {\n  try {\n    const item = await Item.findById(req.params.id);\n    if (!item) {\n      return res.status(404).json({ message: 'Item not found' });\n    }\n    res.json(item);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n\nexports.updateItem = async (req, res) => {\n  try {\n    const updatedItem = await Item.findByIdAndUpdate(req.params.id, req.body, { new: true });\n    if (!updatedItem) {\n      return res.status(404).json({ message: 'Item not found' });\n    }\n    res.json(updatedItem);\n  } catch (error) {\n    res.status(400).json({ message: error.message });\n  }\n};\n\nexports.deleteItem = async (req, res) => {\n  try {\n    const deletedItem = await Item.findByIdAndDelete(req.params.id);\n    if (!deletedItem) {\n      return res.status(404).json({ message: 'Item not found' });\n    }\n    res.json(deletedItem);\n  } catch (error) {\n    res.status(500).json({ message: error.message });\n  }\n};\n```\n\n#### Item Routes\n\n```javascript\n// routes/itemRoutes.js\nconst express = require('express');\nconst router = express.Router();\nconst itemController = require('../controllers/itemController');\nconst { verifyToken, isAdmin, isManagerOrAdmin } = require('../middleware/authMiddleware');\n\nrouter.post('/', verifyToken, isAdmin, itemController.createItem);\nrouter.get('/', verifyToken, isManagerOrAdmin, itemController.getItems);\nrouter.get('/:id', verifyToken, isManagerOrAdmin, itemController.getItemById);\nrouter.put('/:id', verifyToken, isAdmin, itemController.updateItem);\nrouter.delete('/:id', verifyToken, isAdmin, itemController.deleteItem);\n\nmodule.exports = router;\n```\n\n### Authentication Routes\n\nDefine routes for user registration and login.\n\n```javascript\n// routes/authRoutes.js\nconst express = require('express');\nconst router = express.Router();\nconst authController = require('../controllers/authController');\n\nrouter.post('/register', authController.register);\nrouter.post('/login', authController.login);\n\nmodule.exports = router;\n```\n\n### App Setup\n\nSet up the main app file to initialize the server and connect to the database.\n\n```javascript\n// app.js\nconst express = require('express');\nconst mongoose = require('mongoose');\nconst itemRoutes = require('./routes/itemRoutes');\nconst authRoutes = require('./routes/authRoutes');\nconst cors = require('cors');\nconst dotenv = require('dotenv');\n\ndotenv.config();\n\nconst app = express();\napp.use(express.json());\napp.use(cors());\n\nmongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.error('MongoDB connection error:', err));\n\napp.use('/api/items', itemRoutes);\napp.use('/api/auth', authRoutes);\n\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => console.log(`Server running on port ${PORT}`));\n```\n\n### Summary\n\n- **Project Setup:** Initialized Node.js project with necessary dependencies.\n- **Database:** Used MongoDB with Mongoose for storing users and items.\n- **Authentication:** Implemented user registration and login with JWT tokens.\n- **Authorization:** Created middleware for role-based access control.\n- **CRUD Operations:** Defined routes and controllers for managing items with different access levels.\n\nThis setup provides a basic inventory management system with user authentication and role-based access control. You can expand upon this by adding more features, improving error handling, and enhancing security measures."
    }
]