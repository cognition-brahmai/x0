[
    {
        "role": "user",
        "content": "Write a Python script that connects to a Cassandra database, creates a table called \"users\" with columns for id, name, email, and age, and inserts 5 sample records into the table.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! To connect to a Cassandra database using Python, you'll need to use the `cassandra-driver` package. If you haven't installed it yet, you can do so using pip:\n\n```bash\npip install cassandra-driver\n```\n\nHere's a Python script that connects to a Cassandra database, creates a table called \"users\" with columns for id, name, email, and age, and inserts 5 sample records into the table:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\n\n# Connect to the Cassandra cluster\nauth_provider = PlainTextAuthProvider(username='your_username', password='your_password')\ncluster = Cluster(contact_points=['127.0.0.1'], auth_provider=auth_provider)\nsession = cluster.connect()\n\n# Create a keyspace if it doesn't exist\nkeyspace = \"mykeyspace\"\nsession.execute(\"\"\"\n    CREATE KEYSPACE IF NOT EXISTS %s\n    WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n\"\"\" % keyspace)\n\n# Set the keyspace for the session\nsession.set_keyspace(keyspace)\n\n# Create the users table\nsession.execute(\"\"\"\n    CREATE TABLE IF NOT EXISTS users (\n        id UUID PRIMARY KEY,\n        name TEXT,\n        email TEXT,\n        age INT\n    )\n\"\"\")\n\n# Insert sample records\nfrom cassandra.util import uuid_from_time\nfrom datetime import datetime\n\nusers_data = [\n    {'id': uuid_from_time(datetime(2023, 1, 1)), 'name': 'Alice', 'email': 'alice@example.com', 'age': 30},\n    {'id': uuid_from_time(datetime(2023, 1, 2)), 'name': 'Bob', 'email': 'bob@example.com', 'age': 25},\n    {'id': uuid_from_time(datetime(2023, 1, 3)), 'name': 'Charlie', 'email': 'charlie@example.com', 'age': 35},\n    {'id': uuid_from_time(datetime(2023, 1, 4)), 'name': 'David', 'email': 'david@example.com', 'age': 28},\n    {'id': uuid_from_time(datetime(2023, 1, 5)), 'name': 'Eve', 'email': 'eve@example.com', 'age': 22},\n]\n\nfor user in users_data:\n    session.execute(\"\"\"\n        INSERT INTO users (id, name, email, age)\n        VALUES (%s, %s, %s, %s)\n    \"\"\", (user['id'], user['name'], user['email'], user['age']))\n\nprint(\"Records inserted successfully.\")\n\n# Close the connection\ncluster.shutdown()\n```\n\n### Explanation:\n\n1. **Connecting to the Cluster:**\n   - We use `PlainTextAuthProvider` for authentication.\n   - `Cluster` is initialized with the contact points and auth provider.\n   - `cluster.connect()` establishes the connection.\n\n2. **Creating a Keyspace:**\n   - A keyspace is created if it doesn't already exist.\n   - We set the replication strategy and factor.\n\n3. **Setting the Keyspace:**\n   - `session.set_keyspace` sets the current keyspace for the session.\n\n4. **Creating the Table:**\n   - The `users` table is created with columns for id, name, email, and age.\n   - `id` is of type UUID and is the primary key.\n\n5. **Inserting Sample Records:**\n   - We generate UUIDs for each record using `uuid_from_time`.\n   - Sample data is inserted into the table using prepared statements.\n\n6. **Closing the Connection:**\n   - `cluster.shutdown()` closes the connection to the cluster.\n\nMake sure to replace `'your_username'` and `'your_password'` with your actual Cassandra credentials. Also, adjust the contact points if your Cassandra cluster is not running locally.\n\n**Note:** Cassandra requires a keyspace to be set before creating tables or inserting data. Therefore, we first create a keyspace and set it for the session."
    }
]