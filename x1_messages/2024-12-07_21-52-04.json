[
    {
        "role": "user",
        "content": "Using SQL, design a database schema for a library management system. This should include tables for books, authors, borrowers, transactions etc. Also, provide queries to add new books, borrow a book, return a book, and list all books borrowed by a particular borrower. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a database schema for a library management system using SQL. I'll create tables for books, authors, borrowers, and transactions. Then, I'll provide queries to add new books, borrow a book, return a book, and list all books borrowed by a particular borrower.\n\nFirst, let's design the database schema.\n\n**Tables:**\n\n1. **Books**\n\n- book_id (primary key)\n\n- title\n\n- author_id (foreign key referencing Authors)\n\n- isbn\n\n- publication_year\n\n- available_copies\n\n2. **Authors**\n\n- author_id (primary key)\n\n- name\n\n- biography\n\n3. **Borrowers**\n\n- borrower_id (primary key)\n\n- name\n\n- email\n\n- phone\n\n4. **Transactions**\n\n- transaction_id (primary key)\n\n- book_id (foreign key referencing Books)\n\n- borrower_id (foreign key referencing Borrowers)\n\n- borrow_date\n\n- return_date\n\nNow, let's create the SQL statements for these tables.\n\n**Creating Tables:**\n\n```sql\nCREATE TABLE Authors (\n    author_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    biography TEXT\n);\n\nCREATE TABLE Books (\n    book_id INT PRIMARY KEY AUTO_INCREMENT,\n    title VARCHAR(255) NOT NULL,\n    author_id INT,\n    isbn VARCHAR(13),\n    publication_year YEAR,\n    available_copies INT DEFAULT 0,\n    FOREIGN KEY (author_id) REFERENCES Authors(author_id)\n);\n\nCREATE TABLE Borrowers (\n    borrower_id INT PRIMARY KEY AUTO_INCREMENT,\n    name VARCHAR(100) NOT NULL,\n    email VARCHAR(100),\n    phone VARCHAR(15)\n);\n\nCREATE TABLE Transactions (\n    transaction_id INT PRIMARY KEY AUTO_INCREMENT,\n    book_id INT,\n    borrower_id INT,\n    borrow_date DATE,\n    return_date DATE,\n    FOREIGN KEY (book_id) REFERENCES Books(book_id),\n    FOREIGN KEY (borrower_id) REFERENCES Borrowers(borrower_id)\n);\n```\n\n**Queries:**\n\n1. **Add a new book:**\n\nTo add a new book, we need to insert data into the Books table. We also need to ensure that the author exists in the Authors table. If the author doesn't exist, we should add them first.\n\n```sql\n-- Add a new author if not exists\nINSERT INTO Authors (name, biography) VALUES ('Author Name', 'Author Biography') ON DUPLICATE KEY UPDATE name=VALUES(name), biography=VALUES(biography);\n\n-- Get the author_id\nSET @author_id = (SELECT author_id FROM Authors WHERE name = 'Author Name');\n\n-- Add a new book\nINSERT INTO Books (title, author_id, isbn, publication_year, available_copies) VALUES ('Book Title', @author_id, 'ISBN1234567890123', 2023, 5);\n```\n\n2. **Borrow a book:**\n\nWhen a book is borrowed, we need to record the transaction in the Transactions table and decrease the available copies in the Books table.\n\n```sql\n-- Start a transaction\nSTART TRANSACTION;\n\n-- Decrease available copies\nUPDATE Books SET available_copies = available_copies - 1 WHERE book_id = 1 AND available_copies > 0;\n\n-- If rows affected, proceed to insert transaction\nIF ROW_COUNT() > 0 THEN\n    INSERT INTO Transactions (book_id, borrower_id, borrow_date) VALUES (1, 1, CURDATE());\n    COMMIT;\nELSE\n    ROLLBACK;\nEND IF;\n```\n\n3. **Return a book:**\n\nWhen a book is returned, we need to update the transaction in the Transactions table by setting the return_date and increase the available copies in the Books table.\n\n```sql\n-- Start a transaction\nSTART TRANSACTION;\n\n-- Update transaction\nUPDATE Transactions SET return_date = CURDATE() WHERE transaction_id = 1 AND return_date IS NULL;\n\n-- If rows affected, proceed to increase available copies\nIF ROW_COUNT() > 0 THEN\n    UPDATE Books SET available_copies = available_copies + 1 WHERE book_id = 1;\n    COMMIT;\nELSE\n    ROLLBACK;\nEND IF;\n```\n\n4. **List all books borrowed by a particular borrower:**\n\nTo list all books borrowed by a particular borrower, we need to join the Transactions, Books, and Authors tables and filter by the borrower_id.\n\n```sql\nSELECT \n    b.title AS book_title,\n    a.name AS author_name,\n    t.borrow_date,\n    t.return_date\nFROM \n    Transactions t\nJOIN \n    Books b ON t.book_id = b.book_id\nJOIN \n    Authors a ON b.author_id = a.author_id\nWHERE \n    t.borrower_id = 1\nORDER BY \n    t.borrow_date DESC;\n```\n\nThese queries should cover the basic functionalities of a library management system. Please let me know if you need any further assistance!"
    }
]