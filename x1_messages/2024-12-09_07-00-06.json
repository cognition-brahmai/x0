[
    {
        "role": "user",
        "content": "Write a Python script that interacts with the Memcached caching system to store and retrieve key-value pairs."
    },
    {
        "role": "assistant",
        "content": "Certainly! To interact with Memcached in Python, you can use the `pymemcache` library. Below is a simple script that demonstrates how to connect to a Memcached server, store key-value pairs, retrieve values, and delete keys.\n\nFirst, make sure you have `pymemcache` installed. You can install it using pip:\n\n```bash\npip install pymemcache\n```\n\nHere's a basic Python script that performs these operations:\n\n```python\nfrom pymemcache.client.base import Client\n\ndef main():\n    # Connect to the Memcached server\n    client = Client(('localhost', 11211))\n    \n    # Store key-value pairs\n    client.set('key1', 'value1')\n    client.set('key2', 'value2')\n    client.set('key3', 'value3')\n    \n    print(\"Stored key-value pairs:\")\n    print(\"key1:\", client.get('key1'))\n    print(\"key2:\", client.get('key2'))\n    print(\"key3:\", client.get('key3'))\n    \n    # Update a key\n    client.set('key2', 'new_value2')\n    print(\"\\nUpdated key2 to 'new_value2'\")\n    print(\"key2:\", client.get('key2'))\n    \n    # Retrieve a value\n    value = client.get('key1')\n    print(\"\\nRetrieved value for key1:\", value)\n    \n    # Delete a key\n    client.delete('key3')\n    print(\"\\nDeleted key3\")\n    print(\"key3:\", client.get('key3'))\n    \n    # Close the connection\n    client.close()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Connecting to Memcached:**\n   - We use `pymemcache.client.base.Client` to connect to the Memcached server running on `localhost` at port `11211`.\n\n2. **Storing Key-Value Pairs:**\n   - The `set` method is used to store key-value pairs in the cache.\n\n3. **Retrieving Values:**\n   - The `get` method retrieves the value associated with a given key.\n\n4. **Updating Values:**\n   - To update a value, simply use the `set` method again with the same key and new value.\n\n5. **Deleting Keys:**\n   - The `delete` method removes a key from the cache.\n\n6. **Closing the Connection:**\n   - It's good practice to close the connection when you're done using `client.close()`.\n\nMake sure your Memcached server is running before executing this script. You can download and install Memcached from its [official website](https://memcached.org/).\n\nThis script provides a basic introduction to using Memcached with Python. Depending on your needs, you can expand upon this to handle more complex scenarios, such as handling multiple servers, setting expiration times for keys, and using other advanced features provided by Memcached and `pymemcache`."
    }
]