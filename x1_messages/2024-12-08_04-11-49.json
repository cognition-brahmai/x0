[
    {
        "role": "user",
        "content": "Create a Python script that connects to a Cassandra database, creates a keyspace and table for storing weather data (temperature, humidity, pressure), inserts sample data into the table, and queries the data to find the average temperature for a specified date range.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. To create a Python script that connects to a Cassandra database, creates a keyspace and table for storing weather data, inserts sample data, and queries the average temperature for a specified date range, you'll need to follow these steps:\n\n1. **Install Required Libraries**: Ensure you have the `cassandra-driver` installed. You can install it using pip if you haven't already.\n\n2. **Connect to the Cassandra Cluster**: Establish a connection to your Cassandra cluster.\n\n3. **Create a Keyspace**: Define and create a keyspace where your weather data will be stored.\n\n4. **Create a Table**: Design a table schema to store temperature, humidity, pressure, and timestamp.\n\n5. **Insert Sample Data**: Populate the table with some sample weather data.\n\n6. **Query Average Temperature**: Write a CQL query to calculate the average temperature within a specified date range.\n\nHere's a complete Python script that accomplishes these tasks:\n\n```python\nfrom cassandra.cluster import Cluster\nfrom cassandra.auth import PlainTextAuthProvider\nfrom datetime import datetime, timedelta\n\n# Step 1: Install Required Libraries\n# Make sure to install 'cassandra-driver' using pip:\n# pip install cassandra-driver\n\n# Step 2: Connect to the Cassandra Cluster\ndef connect_to_cassandra():\n    auth_provider = PlainTextAuthProvider(username='cassandra', password='cassandra')\n    cluster = Cluster(['127.0.0.1'], auth_provider=auth_provider)\n    session = cluster.connect()\n    return session\n\n# Step 3: Create a Keyspace\ndef create_keyspace(session):\n    session.execute(\"\"\"\n        CREATE KEYSPACE IF NOT EXISTS weather_data\n        WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n    \"\"\")\n\n# Step 4: Create a Table\ndef create_table(session):\n    session.set_keyspace('weather_data')\n    session.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS weather_readings (\n            reading_time timestamp,\n            temperature float,\n            humidity float,\n            pressure float,\n            PRIMARY KEY (reading_time)\n        )\n    \"\"\")\n\n# Step 5: Insert Sample Data\ndef insert_sample_data(session):\n    data = [\n        (datetime(2023, 9, 1, 10, 0), 22.5, 60.0, 1013.25),\n        (datetime(2023, 9, 1, 11, 0), 23.0, 58.0, 1013.5),\n        (datetime(2023, 9, 1, 12, 0), 24.0, 55.0, 1013.75),\n        (datetime(2023, 9, 2, 10, 0), 22.0, 65.0, 1012.75),\n        (datetime(2023, 9, 2, 11, 0), 21.5, 68.0, 1013.0),\n        (datetime(2023, 9, 2, 12, 0), 21.0, 70.0, 1013.25),\n    ]\n    for reading in data:\n        session.execute(\"\"\"\n            INSERT INTO weather_readings (reading_time, temperature, humidity, pressure)\n            VALUES (%s, %s, %s, %s)\n        \"\"\", reading)\n\n# Step 6: Query Average Temperature\ndef query_average_temperature(session, start_date, end_date):\n    query = \"\"\"\n        SELECT AVG(temperature) AS avg_temp\n        FROM weather_readings\n        WHERE reading_time >= %s AND reading_time < %s\n    \"\"\"\n    rows = session.execute(query, (start_date, end_date))\n    for row in rows:\n        print(f\"Average Temperature: {row.avg_temp}\")\n\ndef main():\n    session = connect_to_cassandra()\n    create_keyspace(session)\n    create_table(session)\n    insert_sample_data(session)\n    \n    # Specify date range for query\n    start_date = datetime(2023, 9, 1)\n    end_date = datetime(2023, 9, 3)\n    query_average_temperature(session, start_date, end_date)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Connecting to Cassandra**: We use the `cassandra-driver` to connect to the Cassandra cluster. Adjust the connection parameters as needed for your setup.\n\n2. **Creating Keyspace and Table**: The scripts create a keyspace named `weather_data` and a table `weather_readings` to store weather metrics with a primary key on `reading_time`.\n\n3. **Inserting Sample Data**: Sample weather data is inserted into the `weather_readings` table.\n\n4. **Querying Average Temperature**: The script calculates the average temperature within a specified date range and prints the result.\n\nMake sure your Cassandra server is running and accessible at the specified host and port. Also, adjust the authentication details if your Cassandra cluster requires different credentials."
    }
]