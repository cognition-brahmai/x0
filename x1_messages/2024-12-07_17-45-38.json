[
    {
        "role": "user",
        "content": "Write a Golang program that listens for incoming TCP connections on a specified port and responds with the current server time in RFC3339 format. Support command line arguments for specifying the listening IP address and port number. Implement proper error handling for invalid arguments and connection errors."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. Let's create a simple Go program that listens for incoming TCP connections on a specified port and responds with the current server time in RFC3339 format. We'll also make sure to support command-line arguments for specifying the listening IP address and port number, and implement proper error handling.\n\nFirst, make sure you have Go installed on your system. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\nNow, let's start by setting up our project. Create a new directory for your project, say `tcptime`, and navigate into it:\n\n```sh\nmkdir tcptime\ncd tcptime\n```\n\nNext, initialize a new Go module:\n\n```sh\ngo mod init tcptime\n```\n\nNow, let's write the code. We'll use the `net` package to handle TCP connections and `time` package to get the current time.\n\nCreate a new file called `main.go`:\n\n```sh\ntouch main.go\n```\n\nOpen `main.go` in your favorite text editor and start by importing the necessary packages:\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n```\n\nWe'll use the `flag` package to handle command-line arguments for IP address and port number.\n\nDefine variables to hold the IP address and port number:\n\n```go\nvar addr string\nvar port string\n```\n\nIn the `main` function, we'll parse the command-line arguments:\n\n```go\nfunc main() {\n\tflag.StringVar(&addr, \"addr\", \"127.0.0.1\", \"IP address to listen on\")\n\tflag.StringVar(&port, \"port\", \"8080\", \"Port number to listen on\")\n\tflag.Parse()\n\n\tlistenAddr := net.JoinHostPort(addr, port)\n\n\tl, err := net.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\tfmt.Println(\"Error listening:\", err.Error())\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tfmt.Printf(\"Listening on %s\\n\", listenAddr)\n\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n```\n\nHere, we're setting default values for IP and port if not provided via command line. We then create a TCP listener and enter a loop to accept incoming connections. Each connection is handled in a separate goroutine by the `handleConnection` function.\n\nNow, let's implement the `handleConnection` function:\n\n```go\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\tcurrentTime := time.Now().Format(time.RFC3339)\n\t_, err := conn.Write([]byte(currentTime + \"\\n\"))\n\tif err != nil {\n\t\tfmt.Println(\"Error writing to connection:\", err.Error())\n\t\treturn\n\t}\n}\n```\n\nThis function sends the current time in RFC3339 format to the connected client and then closes the connection.\n\nThat's it! Let's test this program.\n\nFirst, build the program:\n\n```sh\ngo build -o tcptime\n```\n\nThen, run it with default settings:\n\n```sh\n./tcptime -addr=127.0.0.1 -port=8080\n```\n\nYou should see:\n\n```\nListening on 127.0.0.1:8080\n```\n\nNow, open another terminal and connect to this server using `telnet` or `nc`:\n\nUsing `telnet`:\n\n```sh\ntelnet 127.0.0.1 8080\n```\n\nUsing `nc` (netcat):\n\n```sh\nnc 127.0.0.1 8080\n```\n\nYou should see the current server time in RFC3339 format.\n\nYou can also specify different IP addresses and ports via command-line arguments, for example:\n\n```sh\n./tcptime -addr=0.0.0.0 -port=9000\n```\n\nThis will make the server listen on all IP addresses on port 9000.\n\nI hope this helps! Let me know if you have any questions or need further assistance.\n\n**Final Code**\n\n```go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"net\"\n\t\"time\"\n)\n\nvar addr string\nvar port string\n\nfunc main() {\n\tflag.StringVar(&addr, \"addr\", \"127.0.0.1\", \"IP address to listen on\")\n\tflag.StringVar(&port, \"port\", \"8080\", \"Port number to listen on\")\n\tflag.Parse()\n\n\tlistenAddr := net.JoinHostPort(addr, port)\n\n\tl, err := net.Listen(\"tcp\", listenAddr)\n\tif err != nil {\n\t\tfmt.Println(\"Error listening:\", err.Error())\n\t\treturn\n\t}\n\tdefer l.Close()\n\n\tfmt.Printf(\"Listening on %s\\n\", listenAddr)\n\n\tfor {\n\t\tconn, err := l.Accept()\n\t\tif err != nil {\n\t\t\tfmt.Println(\"Error accepting connection:\", err.Error())\n\t\t\tcontinue\n\t\t}\n\n\t\tgo handleConnection(conn)\n\t}\n}\n\nfunc handleConnection(conn net.Conn) {\n\tdefer conn.Close()\n\n\tcurrentTime := time.Now().Format(time.RFC3339)\n\t_, err := conn.Write([]byte(currentTime + \"\\n\"))\n\tif err != nil {\n\t\tfmt.Println(\"Error writing to connection:\", err.Error())\n\t\treturn\n\t}\n}\n```\n\n**Command to Run**\n\n```sh\ngo run main.go -addr=127.0.0.1 -port=8080\n```\n\n**Testing**\n\nUse `telnet` or `nc` to connect to the server:\n\n```sh\ntelnet 127.0.0.1 8080\n```\n\nor\n\n```sh\nnc 127.0.0.1 8080\n```\n\n**Expected Output**\n\nYou should see the current server time in RFC3339 format."
    }
]