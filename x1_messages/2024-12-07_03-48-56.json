[
    {
        "role": "user",
        "content": "Implement a Binary Search Tree (BST) in Python, including methods for insertion, deletion, and searching of nodes. The BST should also have an in-order traversal method that returns the sorted sequence of values. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "class Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\ndef insert(root, key):\n    if root is None:\n        return Node(key)\n    else:\n        if root.val < key:\n            root.right = insert(root.right, key)\n        else:\n            root.left = insert(root.left, key)\n    return root\n\ndef minValueNode(node):\n    current = node\n    while(current.left is not None):\n        current = current.left\n    return current\n\ndef delete(root, key):\n    if root is None:\n        return root\n    if key < root.val:\n        root.left = delete(root.left, key)\n    elif(key > root.val):\n        root.right = delete(root.right, key)\n    else:\n        if root.left is None:\n            temp = root.right\n            root = None\n            return temp\n        elif root.right is None:\n            temp = root.left\n            root = None\n            return temp\n        temp = minValueNode(root.right)\n        root.val = temp.val\n        root.right = delete(root.right, temp.val)\n    return root\n\ndef search(root, key):\n    if root is None or root.val == key:\n        return root\n    if root.val < key:\n        return search(root.right, key)\n    return search(root.left, key)\n\ndef inorder(root):\n    res = []\n    if root:\n        res = inorder(root.left)\n        res.append(root.val)\n        res = res + inorder(root.right)\n    return res\n\n# Example usage\nr = Node(50)\nr = insert(r, 30)\nr = insert(r, 20)\nr = insert(r, 40)\nr = insert(r, 70)\nr = insert(r, 60)\nr = insert(r, 80)\n\nprint(\"Inorder traversal of the given tree\")\nprint(inorder(r))\n\nprint(\"\\nDelete 20\")\nr = delete(r, 20)\nprint(\"Inorder traversal of the modified tree\")\nprint(inorder(r))\n\nprint(\"\\nDelete 30\")\nr = delete(r, 30)\nprint(\"Inorder traversal of the modified tree\")\nprint(inorder(r))\n\nprint(\"\\nDelete 50\")\nr = delete(r, 50)\nprint(\"Inorder traversal of the modified tree\")\nprint(inorder(r))\n\nprint(\"\\nSearch for 40:\", \"Found\" if search(r, 40) else \"Not Found\")\nprint(\"Search for 100:\", \"Found\" if search(r, 100) else \"Not Found\")"
    }
]