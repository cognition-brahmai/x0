[
    {
        "role": "user",
        "content": "Write a Python script that creates a command-line interface (CLI) tool for managing a SQLite database of contacts, supporting adding, updating, deleting, and listing contacts with multiple fields (name, phone, email, etc.). PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that creates a CLI tool for managing a SQLite database of contacts. This tool supports adding, updating, deleting, and listing contacts with multiple fields such as name, phone, and email.\n\nFirst, make sure you have SQLite and the `click` library installed. You can install `click` using pip if you don't have it already:\n\n```sh\npip install click\n```\n\nHere's the Python script:\n\n```python\nimport sqlite3\nimport click\n\n# Initialize the database\ndef init_db():\n    conn = sqlite3.connect('contacts.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS contacts (\n            id INTEGER PRIMARY KEY AUTOINCREMENT,\n            name TEXT NOT NULL,\n            phone TEXT,\n            email TEXT\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\n# Add a new contact\n@click.command()\n@click.option('--name', prompt='Name', help='The name of the contact.')\n@click.option('--phone', prompt='Phone', help='The phone number of the contact.')\n@click.option('--email', prompt='Email', help='The email address of the contact.')\ndef add_contact(name, phone, email):\n    conn = sqlite3.connect('contacts.db')\n    c = conn.cursor()\n    c.execute('INSERT INTO contacts (name, phone, email) VALUES (?, ?, ?)', (name, phone, email))\n    conn.commit()\n    conn.close()\n    click.echo(f'Added contact: {name}')\n\n# List all contacts\n@click.command()\ndef list_contacts():\n    conn = sqlite3.connect('contacts.db')\n    c = conn.cursor()\n    c.execute('SELECT id, name, phone, email FROM contacts')\n    contacts = c.fetchall()\n    conn.close()\n    for contact in contacts:\n        click.echo(f'ID: {contact[0]}, Name: {contact[1]}, Phone: {contact[2]}, Email: {contact[3]}')\n\n# Update a contact by ID\n@click.command()\n@click.argument('contact_id', type=int)\n@click.option('--name', help='New name for the contact.')\n@click.option('--phone', help='New phone number for the contact.')\n@click.option('--email', help='New email address for the contact.')\ndef update_contact(contact_id, name, phone, email):\n    conn = sqlite3.connect('contacts.db')\n    c = conn.cursor()\n    updates = []\n    params = []\n    if name:\n        updates.append('name = ?')\n        params.append(name)\n    if phone:\n        updates.append('phone = ?')\n        params.append(phone)\n    if email:\n        updates.append('email = ?')\n        params.append(email)\n    if updates:\n        query = 'UPDATE contacts SET ' + ', '.join(updates) + ' WHERE id = ?'\n        params.append(contact_id)\n        c.execute(query, params)\n        conn.commit()\n        click.echo(f'Updated contact with ID {contact_id}')\n    else:\n        click.echo('No fields provided to update.')\n    conn.close()\n\n# Delete a contact by ID\n@click.command()\n@click.argument('contact_id', type=int)\ndef delete_contact(contact_id):\n    conn = sqlite3.connect('contacts.db')\n    c = conn.cursor()\n    c.execute('DELETE FROM contacts WHERE id = ?', (contact_id,))\n    conn.commit()\n    conn.close()\n    click.echo(f'Deleted contact with ID {contact_id}')\n\n# Main function to run the CLI\ndef main():\n    init_db()\n    # Here you can add more commands or organize them into groups\n    # For simplicity, we're just adding the commands directly\n\nif __name__ == '__main__':\n    main()\n```\n\n### Explanation:\n\n1. **Database Initialization:**\n   - The `init_db` function sets up the SQLite database and creates a `contacts` table if it doesn't exist.\n\n2. **Adding a Contact:**\n   - The `add_contact` function uses the `click` library to prompt for name, phone, and email, then inserts the data into the database.\n\n3. **Listing Contacts:**\n   - The `list_contacts` function retrieves all records from the `contacts` table and prints them.\n\n4. **Updating a Contact:**\n   - The `update_contact` function allows updating the name, phone, or email of a contact specified by ID.\n\n5. **Deleting a Contact:**\n   - The `delete_contact` function removes a contact specified by ID from the database.\n\n6. **Main Function:**\n   - Initializes the database and can be extended to include more commands or organize them into groups.\n\nTo run the script, save it to a file (e.g., `contacts.py`) and execute it using Python:\n\n```sh\npython contacts.py\n```\n\nYou can then use commands like:\n\n- `python contacts.py add-contact`\n- `python contacts.py list-contacts`\n- `python contacts.py update-contact <id> --name \"New Name\"`\n- `python contacts.py delete-contact <id>`\n\nNote: This is a basic implementation. For a more robust CLI tool, consider adding error handling, input validation, and possibly using a CLI framework that supports subcommands and options more extensively."
    }
]