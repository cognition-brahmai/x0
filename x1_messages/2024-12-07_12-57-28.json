[
    {
        "role": "user",
        "content": "Write a Python function that takes an array of integers as input and returns the maximum subarray sum using Kadane's algorithm."
    },
    {
        "role": "assistant",
        "content": "Sure! Kadane's algorithm is an efficient way to find the maximum sum of a contiguous subarray within a one-dimensional array of numbers. Here's how you can implement it in Python:\n\n```python\ndef max_subarray_sum(arr):\n    if not arr:\n        return 0\n\n    current_sum = max_sum = arr[0]\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\n# Example usage:\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(arr))  # Output: 6, as the subarray [4, -1, 2, 1] has the largest sum\n```\n\n### Explanation:\n1. **Initialization**:\n   - `current_sum` and `max_sum` are both set to the first element of the array.\n   \n2. **Iteration**:\n   - For each element in the array starting from the second element:\n     - `current_sum` is updated to be the maximum of the current element alone or the sum of `current_sum` and the current element.\n     - `max_sum` is updated to be the maximum of itself and `current_sum`.\n   \n3. **Return**:\n   - The function returns `max_sum`, which holds the maximum subarray sum found.\n\nThis algorithm runs in O(n) time, where n is the length of the array, making it very efficient for this problem."
    }
]