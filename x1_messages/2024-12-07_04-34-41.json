[
    {
        "role": "user",
        "content": "Write a Java program that simulates a simple ATM system. The program should have classes for Bank, Account, and Customer. It should support operations like deposit, withdrawal, and balance inquiry. Save the data in a MySQL database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Creating a Java program that simulates a simple ATM system involving classes for Bank, Account, and Customer, along with operations like deposit, withdrawal, and balance inquiry, and storing data in a MySQL database is a multi-step process. Below is a basic outline and sample code to get you started.\n\n### Step 1: Set Up the Database\n\nFirst, you need to set up a MySQL database to store information about banks, accounts, and customers.\n\n#### Create the Database and Tables\n\nYou can use the following SQL commands to create the necessary tables:\n\n```sql\nCREATE DATABASE atm_system;\n\nUSE atm_system;\n\nCREATE TABLE banks (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL\n);\n\nCREATE TABLE customers (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    name VARCHAR(100) NOT NULL,\n    bank_id INT,\n    FOREIGN KEY (bank_id) REFERENCES banks(id)\n);\n\nCREATE TABLE accounts (\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    account_number VARCHAR(20) UNIQUE NOT NULL,\n    balance DECIMAL(15, 2) NOT NULL,\n    customer_id INT,\n    FOREIGN KEY (customer_id) REFERENCES customers(id)\n);\n```\n\n### Step 2: Set Up the Java Project\n\nYou'll need to set up a Java project and include the MySQL JDBC driver in your classpath.\n\n#### Download MySQL JDBC Driver\n\nDownload the MySQL JDBC driver from the official MySQL website and add it to your project's build path.\n\n### Step 3: Create the Java Classes\n\n#### Bank Class\n\n```java\npublic class Bank {\n    private int id;\n    private String name;\n\n    // Constructors, getters, and setters\n}\n```\n\n#### Customer Class\n\n```java\npublic class Customer {\n    private int id;\n    private String name;\n    private int bankId;\n\n    // Constructors, getters, and setters\n}\n```\n\n#### Account Class\n\n```java\npublic class Account {\n    private int id;\n    private String accountNumber;\n    private double balance;\n    private int customerId;\n\n    // Constructors, getters, and setters\n}\n```\n\n### Step 4: Database Utility Class\n\nCreate a utility class to handle database connections.\n\n```java\nimport java.sql.*;\n\npublic class DBUtil {\n    private static final String URL = \"jdbc:mysql://localhost:3306/atm_system\";\n    private static final String USER = \"your_username\";\n    private static final String PASSWORD = \"your_password\";\n\n    public static Connection getConnection() throws SQLException {\n        return DriverManager.getConnection(URL, USER, PASSWORD);\n    }\n}\n```\n\n### Step 5: Implement ATM Operations\n\nCreate a class to handle ATM operations.\n\n```java\nimport java.sql.*;\nimport java.util.Scanner;\n\npublic class ATMSystem {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Welcome to the ATM System\");\n\n        while (true) {\n            System.out.println(\"\\n1. Deposit\");\n            System.out.println(\"2. Withdraw\");\n            System.out.println(\"3. Balance Inquiry\");\n            System.out.println(\"4. Exit\");\n            System.out.print(\"Choose an option: \");\n            int choice = scanner.nextInt();\n\n            switch (choice) {\n                case 1:\n                    deposit(scanner);\n                    break;\n                case 2:\n                    withdraw(scanner);\n                    break;\n                case 3:\n                    balanceInquiry(scanner);\n                    break;\n                case 4:\n                    System.exit(0);\n                default:\n                    System.out.println(\"Invalid option. Please try again.\");\n            }\n        }\n    }\n\n    private static void deposit(Scanner scanner) {\n        System.out.print(\"Enter account number: \");\n        String accountNumber = scanner.next();\n        System.out.print(\"Enter amount to deposit: \");\n        double amount = scanner.nextDouble();\n\n        try (Connection conn = DBUtil.getConnection()) {\n            String sql = \"UPDATE accounts SET balance = balance + ? WHERE account_number = ?\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setDouble(1, amount);\n            pstmt.setString(2, accountNumber);\n            int rowsAffected = pstmt.executeUpdate();\n\n            if (rowsAffected > 0) {\n                System.out.println(\"Deposit successful.\");\n            } else {\n                System.out.println(\"Account not found.\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void withdraw(Scanner scanner) {\n        System.out.print(\"Enter account number: \");\n        String accountNumber = scanner.next();\n        System.out.print(\"Enter amount to withdraw: \");\n        double amount = scanner.nextDouble();\n\n        try (Connection conn = DBUtil.getConnection()) {\n            String sql = \"UPDATE accounts SET balance = balance - ? WHERE account_number = ? AND balance >= ?\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setDouble(1, amount);\n            pstmt.setString(2, accountNumber);\n            pstmt.setDouble(3, amount);\n            int rowsAffected = pstmt.executeUpdate();\n\n            if (rowsAffected > 0) {\n                System.out.println(\"Withdrawal successful.\");\n            } else {\n                System.out.println(\"Insufficient balance or account not found.\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private static void balanceInquiry(Scanner scanner) {\n        System.out.print(\"Enter account number: \");\n        String accountNumber = scanner.next();\n\n        try (Connection conn = DBUtil.getConnection()) {\n            String sql = \"SELECT balance FROM accounts WHERE account_number = ?\";\n            PreparedStatement pstmt = conn.prepareStatement(sql);\n            pstmt.setString(1, accountNumber);\n            ResultSet rs = pstmt.executeQuery();\n\n            if (rs.next()) {\n                double balance = rs.getDouble(\"balance\");\n                System.out.println(\"Current balance: \" + balance);\n            } else {\n                System.out.println(\"Account not found.\");\n            }\n        } catch (SQLException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Step 6: Testing\n\nMake sure your MySQL server is running and the database is set up correctly. Run the `ATMSystem` class and test the deposit, withdrawal, and balance inquiry operations.\n\nThis is a basic implementation to get you started. In a real-world scenario, you would need to handle more edge cases, implement security measures, and possibly use a more robust architecture."
    }
]