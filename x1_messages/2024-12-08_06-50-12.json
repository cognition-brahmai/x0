[
    {
        "role": "user",
        "content": "Write a Python program that simulates a simple bank account system with basic functionalities such as depositing money, withdrawing money, and checking balance. The program should use object-oriented programming principles and handle errors gracefully."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Let's create a simple bank account system in Python using object-oriented programming (OOP). We'll define a class called `BankAccount` that will have methods for depositing money, withdrawing money, and checking the balance. We'll also make sure to handle errors gracefully, such as trying to withdraw more money than what's available in the account.\n\nFirst, let's understand what we need:\n\n1. **Class Definition**: We need a class `BankAccount` that will hold the balance and provide methods to interact with it.\n\n2. **Methods**:\n   - `deposit(amount)`: Adds the specified amount to the balance.\n   - `withdraw(amount)`: Subtracts the specified amount from the balance if sufficient funds are available.\n   - `check_balance()`: Returns the current balance.\n\n3. **Error Handling**: We should handle cases where someone tries to withdraw more money than what's available. We can do this by raising an exception or simply returning a message.\n\n4. **User Interaction**: We'll create a simple text-based interface to interact with the bank account.\n\nLet's start by defining the `BankAccount` class.\n\n## Final Solution\nTo create a simple bank account system in Python, we'll use object-oriented programming principles. This system will allow users to deposit money, withdraw money, and check their balance. Error handling will be implemented to manage invalid operations gracefully.\n\n### Approach\n1. **Class Definition**: Define a class `BankAccount` to represent a bank account.\n2. **Methods**:\n   - `deposit(amount)`: Add the specified amount to the balance.\n   - `withdraw(amount)`: Subtract the specified amount from the balance if sufficient funds are available.\n   - `check_balance()`: Return the current balance.\n3. **Error Handling**: Handle cases where a user tries to withdraw more money than what's available by raising an exception.\n4. **User Interaction**: Implement a simple text-based interface to interact with the bank account.\n\n### Solution Code\n\n```python\nclass BankAccount:\n    def __init__(self, initial_balance=0):\n        self.balance = initial_balance\n\n    def deposit(self, amount):\n        if amount < 0:\n            raise ValueError(\"Deposit amount cannot be negative.\")\n        self.balance += amount\n        return self.balance\n\n    def withdraw(self, amount):\n        if amount < 0:\n            raise ValueError(\"Withdrawal amount cannot be negative.\")\n        if amount > self.balance:\n            raise ValueError(\"Insufficient funds.\")\n        self.balance -= amount\n        return self.balance\n\n    def check_balance(self):\n        return self.balance\n\ndef main():\n    account = BankAccount(100)  # Create an account with initial balance of 100\n\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Check balance\")\n        print(\"2. Deposit money\")\n        print(\"3. Withdraw money\")\n        print(\"4. Exit\")\n        \n        try:\n            choice = int(input(\"Enter your choice: \"))\n        except ValueError:\n            print(\"Invalid input. Please enter a number.\")\n            continue\n        \n        if choice == 1:\n            print(f\"Your balance is: {account.check_balance()}\")\n        elif choice == 2:\n            try:\n                amount = float(input(\"Enter the amount to deposit: \"))\n                print(f\"New balance after deposit: {account.deposit(amount)}\")\n            except ValueError as e:\n                print(e)\n        elif choice == 3:\n            try:\n                amount = float(input(\"Enter the amount to withdraw: \"))\n                print(f\"New balance after withdrawal: {account.withdraw(amount)}\")\n            except ValueError as e:\n                print(e)\n        elif choice == 4:\n            print(\"Goodbye!\")\n            break\n        else:\n            print(\"Invalid choice. Please select a valid option.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n1. **BankAccount Class**:\n   - **Initialization**: The `__init__` method initializes the account with an optional initial balance.\n   - **Deposit**: The `deposit` method adds the specified amount to the balance, raising an error for negative amounts.\n   - **Withdraw**: The `withdraw` method subtracts the specified amount from the balance, raising errors for negative amounts or insufficient funds.\n   - **Check Balance**: The `check_balance` method returns the current balance.\n\n2. **Main Function**:\n   - A `BankAccount` object is created with an initial balance.\n   - A loop presents options to the user: check balance, deposit, withdraw, or exit.\n   - User inputs are validated, and corresponding methods are called.\n   - Errors are caught and displayed appropriately.\n\nThis program provides a simple and intuitive way to manage a bank account, ensuring that all operations are handled safely and efficiently."
    }
]