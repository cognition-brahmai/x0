[
    {
        "role": "user",
        "content": "Implement a simple REST API in Node.js using Express that supports CRUD operations on a collection of books. Each book should have a title, author, publication year, and ISBN. The API should support filtering by author and searching by title.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through creating a simple REST API in Node.js using Express that handles CRUD operations for a collection of books. Each book will have a title, author, publication year, and ISBN. Additionally, the API will support filtering by author and searching by title.\n\n### Step 1: Set Up Your Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nNext, install the necessary dependencies: Express for the server and body-parser for handling JSON data.\n\n```bash\nnpm install express body-parser\n```\n\n### Step 2: Create the Server\n\nCreate a new file called `server.js` and set up the basic Express server.\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\n\nconst app = express();\napp.use(bodyParser.json());\n\nconst PORT = process.env.PORT || 3000;\n\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n### Step 3: Define the Book Model\n\nFor simplicity, we'll use an in-memory array to store our books. In a real-world scenario, you'd use a database.\n\n```javascript\nlet books = [];\nlet idCounter = 1;\n\nfunction createBook(title, author, year, isbn) {\n  const book = {\n    id: idCounter++,\n    title,\n    author,\n    year,\n    isbn\n  };\n  books.push(book);\n  return book;\n}\n```\n\n### Step 4: Implement CRUD Operations\n\n#### Create a Book (POST /books)\n\n```javascript\napp.post('/books', (req, res) => {\n  const { title, author, year, isbn } = req.body;\n  if (!title || !author || !year || !isbn) {\n    return res.status(400).json({ error: 'All fields are required' });\n  }\n  const newBook = createBook(title, author, year, isbn);\n  res.status(201).json(newBook);\n});\n```\n\n#### Get All Books (GET /books)\n\nThis endpoint will also support filtering by author and searching by title.\n\n```javascript\napp.get('/books', (req, res) => {\n  let filteredBooks = books;\n\n  const { author, title } = req.query;\n\n  if (author) {\n    filteredBooks = filteredBooks.filter(book => book.author.toLowerCase() === author.toLowerCase());\n  }\n\n  if (title) {\n    filteredBooks = filteredBooks.filter(book => book.title.toLowerCase().includes(title.toLowerCase()));\n  }\n\n  res.json(filteredBooks);\n});\n```\n\n#### Get a Single Book (GET /books/:id)\n\n```javascript\napp.get('/books/:id', (req, res) => {\n  const bookId = parseInt(req.params.id);\n  const book = books.find(b => b.id === bookId);\n\n  if (!book) {\n    return res.status(404).json({ error: 'Book not found' });\n  }\n\n  res.json(book);\n});\n```\n\n#### Update a Book (PUT /books/:id)\n\n```javascript\napp.put('/books/:id', (req, res) => {\n  const bookId = parseInt(req.params.id);\n  const index = books.findIndex(b => b.id === bookId);\n\n  if (index === -1) {\n    return res.status(404).json({ error: 'Book not found' });\n  }\n\n  const updatedBook = { ...books[index], ...req.body };\n  books[index] = updatedBook;\n  res.json(updatedBook);\n});\n```\n\n#### Delete a Book (DELETE /books/:id)\n\n```javascript\napp.delete('/books/:id', (req, res) => {\n  const bookId = parseInt(req.params.id);\n  const index = books.findIndex(b => b.id === bookId);\n\n  if (index === -1) {\n    return res.status(404).json({ error: 'Book not found' });\n  }\n\n  const deletedBook = books.splice(index, 1)[0];\n  res.json(deletedBook);\n});\n```\n\n### Step 5: Testing the API\n\nYou can use tools like Postman or curl to test your API. Here are some examples using curl:\n\n#### Create a Book\n\n```bash\ncurl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"year\": 1925,\n  \"isbn\": \"9780743273565\"\n}'\n```\n\n#### Get All Books\n\n```bash\ncurl http://localhost:3000/books\n```\n\n#### Get a Single Book\n\n```bash\ncurl http://localhost:3000/books/1\n```\n\n#### Update a Book\n\n```bash\ncurl -X PUT http://localhost:3000/books/1 -H \"Content-Type: application/json\" -d '{\n  \"title\": \"Updated Title\"\n}'\n```\n\n#### Delete a Book\n\n```bash\ncurl -X DELETE http://localhost:3000/books/1\n```\n\n### Step 6: Filtering and Searching\n\n#### Filter by Author\n\n```bash\ncurl http://localhost:3000/books?author=F.%20Scott%20Fitzgerald\n```\n\n#### Search by Title\n\n```bash\ncurl http://localhost:3000/books?title=Gatsby\n```\n\n### Conclusion\n\nYou've successfully created a simple REST API in Node.js using Express that supports CRUD operations on a collection of books, with additional filtering and searching capabilities. This should serve as a good starting point for building more complex APIs."
    }
]