[
    {
        "role": "user",
        "content": "Develop a Node.js application that serves as a simple RESTful API for managing a collection of books. The API should support CRUD operations (Create, Read, Update, Delete) on book records stored in a JSON file. Each book record should include title, author, publication year, and ISBN number. Use Express framework for handling HTTP requests and responses.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through building a simple RESTful API for managing a collection of books using Node.js and the Express framework. This API will allow you to perform CRUD operations on book records, which will be stored in a JSON file.\n\n### Prerequisites\n\nBefore we start, make sure you have the following installed on your machine:\n\n1. **Node.js**: You can download it from [nodejs.org](https://nodejs.org/).\n2. **npm** (comes with Node.js): This is the package manager for Node.js.\n3. **Text Editor or IDE**: Like Visual Studio Code, Sublime Text, etc.\n\n### Project Structure\n\nYour project directory should look like this:\n\n```\nbook-api/\n\u251c\u2500\u2500 node_modules/\n\u251c\u2500\u2500 public/\n\u2502   \u2514\u2500\u2500 books.json\n\u251c\u2500\u2500 routes/\n\u2502   \u2514\u2500\u2500 books.js\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### Step 1: Initialize the Project\n\nFirst, create a new directory for your project and navigate into it:\n\n```bash\nmkdir book-api\ncd book-api\n```\n\nInitialize a new Node.js project:\n\n```bash\nnpm init -y\n```\n\nThis will create a `package.json` file with default settings.\n\n### Step 2: Install Dependencies\n\nInstall the required dependencies:\n\n```bash\nnpm install express body-parser fs\n```\n\n- **Express**: For setting up the server and handling HTTP requests.\n- **Body-parser**: For parsing request bodies.\n- **Fs**: For file system operations (reading and writing JSON files).\n\n### Step 3: Set Up the Server\n\nCreate an `app.js` file in your project root:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst booksRouter = require('./routes/books');\n\nconst app = express();\nconst port = process.env.PORT || 3000;\n\n// Middleware\napp.use(bodyParser.json());\napp.use('/api/books', booksRouter);\n\n// Start the server\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\n### Step 4: Create the Books Router\n\nCreate a `routes` directory and inside it, create a `books.js` file:\n\n```javascript\nconst express = require('express');\nconst router = express.Router();\nconst fs = require('fs');\nconst path = require('path');\n\n// Path to the JSON file\nconst booksPath = path.join(__dirname, '../public/books.json');\n\n// Read all books\nrouter.get('/', (req, res) => {\n  fs.readFile(booksPath, 'utf8', (err, data) => {\n    if (err) {\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    const books = JSON.parse(data);\n    res.json(books);\n  });\n});\n\n// Read a single book by ISBN\nrouter.get('/:isbn', (req, res) => {\n  const isbn = req.params.isbn;\n  fs.readFile(booksPath, 'utf8', (err, data) => {\n    if (err) {\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    const books = JSON.parse(data);\n    const book = books.find(b => b.ISBN === isbn);\n    if (!book) {\n      return res.status(404).json({ error: 'Book not found' });\n    }\n    res.json(book);\n  });\n});\n\n// Create a new book\nrouter.post('/', (req, res) => {\n  const newBook = req.body;\n  fs.readFile(booksPath, 'utf8', (err, data) => {\n    if (err) {\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    let books = JSON.parse(data);\n    books.push(newBook);\n    fs.writeFile(booksPath, JSON.stringify(books, null, 2), (err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n      res.status(201).json(newBook);\n    });\n  });\n});\n\n// Update a book by ISBN\nrouter.put('/:isbn', (req, res) => {\n  const isbn = req.params.isbn;\n  const updatedBook = req.body;\n  fs.readFile(booksPath, 'utf8', (err, data) => {\n    if (err) {\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    let books = JSON.parse(data);\n    const index = books.findIndex(b => b.ISBN === isbn);\n    if (index === -1) {\n      return res.status(404).json({ error: 'Book not found' });\n    }\n    books[index] = updatedBook;\n    fs.writeFile(booksPath, JSON.stringify(books, null, 2), (err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n      res.json(updatedBook);\n    });\n  });\n});\n\n// Delete a book by ISBN\nrouter.delete('/:isbn', (req, res) => {\n  const isbn = req.params.isbn;\n  fs.readFile(booksPath, 'utf8', (err, data) => {\n    if (err) {\n      return res.status(500).json({ error: 'Internal Server Error' });\n    }\n    let books = JSON.parse(data);\n    const index = books.findIndex(b => b.ISBN === isbn);\n    if (index === -1) {\n      return res.status(404).json({ error: 'Book not found' });\n    }\n    const deletedBook = books.splice(index, 1);\n    fs.writeFile(booksPath, JSON.stringify(books, null, 2), (err) => {\n      if (err) {\n        return res.status(500).json({ error: 'Internal Server Error' });\n      }\n      res.json(deletedBook[0]);\n    });\n  });\n});\n\nmodule.exports = router;\n```\n\n### Step 5: Create the Books JSON File\n\nCreate a `public` directory and inside it, create a `books.json` file:\n\n```json\n[\n  {\n    \"title\": \"1984\",\n    \"author\": \"George Orwell\",\n    \"publicationYear\": 1949,\n    \"ISBN\": \"9780451524935\"\n  },\n  {\n    \"title\": \"To Kill a Mockingbird\",\n    \"author\": \"Harper Lee\",\n    \"publicationYear\": 1960,\n    \"ISBN\": \"9780060935467\"\n  }\n]\n```\n\n### Step 6: Run the Server\n\nGo back to your terminal and start the server:\n\n```bash\nnode app.js\n```\n\nYour API should now be running on `http://localhost:3000/api/books`.\n\n### Testing the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n#### GET All Books\n\n```bash\ncurl http://localhost:3000/api/books\n```\n\n#### GET Single Book by ISBN\n\n```bash\ncurl http://localhost:3000/api/books/9780451524935\n```\n\n#### POST Create a New Book\n\n```bash\ncurl -X POST http://localhost:3000/api/books -H \"Content-Type: application/json\" -d '{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"publicationYear\": 1925,\n  \"ISBN\": \"9780743273565\"\n}'\n```\n\n#### PUT Update a Book\n\n```bash\ncurl -X PUT http://localhost:3000/api/books/9780743273565 -H \"Content-Type: application/json\" -d '{\n  \"title\": \"The Great Gatsby\",\n  \"author\": \"F. Scott Fitzgerald\",\n  \"publicationYear\": 1925,\n  \"ISBN\": \"9780743273565\"\n}'\n```\n\n#### DELETE a Book\n\n```bash\ncurl -X DELETE http://localhost:3000/api/books/9780743273565\n```\n\n### Conclusion\n\nYou've successfully created a simple RESTful API for managing a collection of books using Node.js and Express. This API allows you to perform CRUD operations on book records stored in a JSON file. You can expand this project by adding more features, such as validation, error handling, or even switching to a database for persistent storage.\n\n### Additional Resources\n\n- [Express Documentation](https://expressjs.com/)\n- [Node.js Documentation](https://nodejs.org/en/docs/)\n- [Postman](https://www.postman.com/) for API testing\n\n### Support\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]