[
    {
        "role": "user",
        "content": "Using SQL, write queries to perform various operations on a database containing tables for Employees, Departments and Salaries. Operations should include joining tables, grouping records, calculating aggregates, filtering and sorting results. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your SQL queries! I've got a database with tables for Employees, Departments, and Salaries, and I need to perform different operations like joining tables, grouping records, calculating aggregates, filtering, and sorting results. Let's dive into this.\n\nFirst, I need to understand the structure of these tables. Typically, an Employees table might have columns like EmployeeID, FirstName, LastName, DepartmentID, and HireDate. The Departments table could have DepartmentID and DepartmentName. The Salaries table might have EmployeeID, Salary, and EffectiveDate.\n\nFor the sake of these queries, I'll assume the following table structures:\n\n**Employees Table:**\n\n- EmployeeID (Primary Key)\n\n- FirstName\n\n- LastName\n\n- DepartmentID (Foreign Key to Departments)\n\n- HireDate\n\n**Departments Table:**\n\n- DepartmentID (Primary Key)\n\n- DepartmentName\n\n**Salaries Table:**\n\n- SalaryID (Primary Key)\n\n- EmployeeID (Foreign Key to Employees)\n\n- Salary\n\n- EffectiveDate\n\nOkay, now let's proceed to write some SQL queries based on the operations you've mentioned.\n\n### 1. Joining Tables\n\n**Query:** Retrieve the first name, last name, department name, and salary for each employee.\n\n**SQL:**\n\n```sql\nSELECT e.FirstName, e.LastName, d.DepartmentName, s.Salary\nFROM Employees e\nJOIN Departments d ON e.DepartmentID = d.DepartmentID\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID;\n```\n\n### 2. Grouping Records\n\n**Query:** Find the total salary paid in each department.\n\n**SQL:**\n\n```sql\nSELECT d.DepartmentName, SUM(s.Salary) AS TotalSalary\nFROM Departments d\nJOIN Employees e ON d.DepartmentID = e.DepartmentID\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nGROUP BY d.DepartmentName;\n```\n\n### 3. Calculating Aggregates\n\n**Query:** Calculate the average salary for the entire company.\n\n**SQL:**\n\n```sql\nSELECT AVG(s.Salary) AS AverageSalary\nFROM Salaries s;\n```\n\n### 4. Filtering Results\n\n**Query:** List employees who earn more than the average salary.\n\n**SQL:**\n\n```sql\nSELECT e.FirstName, e.LastName, s.Salary\nFROM Employees e\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nWHERE s.Salary > (SELECT AVG(Salary) FROM Salaries);\n```\n\n### 5. Sorting Results\n\n**Query:** Get a list of employees sorted by their salary in descending order.\n\n**SQL:**\n\n```sql\nSELECT e.FirstName, e.LastName, s.Salary\nFROM Employees e\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nORDER BY s.Salary DESC;\n```\n\n### 6. Combining Operations\n\n**Query:** For each department, find the highest salary and the employee who earns it.\n\n**SQL:**\n\n```sql\nSELECT d.DepartmentName, e.FirstName, e.LastName, s.Salary\nFROM Departments d\nJOIN Employees e ON d.DepartmentID = e.DepartmentID\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nWHERE s.Salary = (\n    SELECT MAX(s2.Salary)\n    FROM Salaries s2\n    JOIN Employees e2 ON s2.EmployeeID = e2.EmployeeID\n    WHERE e2.DepartmentID = d.DepartmentID\n);\n```\n\n### 7. Handling Dates\n\n**Query:** Find employees hired in the last year.\n\n**SQL:**\n\n```sql\nSELECT e.FirstName, e.LastName, e.HireDate\nFROM Employees e\nWHERE e.HireDate >= DATEADD(year, -1, GETDATE());\n```\n\nNote: The function `DATEADD` and `GETDATE()` are used here assuming a SQL Server environment. If using MySQL, you would use `NOW()` and `INTERVAL 1 YEAR`.\n\n### 8. Subqueries\n\n**Query:** List departments that have more than 5 employees.\n\n**SQL:**\n\n```sql\nSELECT d.DepartmentName\nFROM Departments d\nWHERE (\n    SELECT COUNT(*)\n    FROM Employees e\n    WHERE e.DepartmentID = d.DepartmentID\n) > 5;\n```\n\n### 9. Using GROUP BY with HAVING\n\n**Query:** Find departments where the average salary is above 5000.\n\n**SQL:**\n\n```sql\nSELECT d.DepartmentName, AVG(s.Salary) AS AvgSalary\nFROM Departments d\nJOIN Employees e ON d.DepartmentID = e.DepartmentID\nJOIN Salaries s ON e.EmployeeID = s.EmployeeID\nGROUP BY d.DepartmentName\nHAVING AVG(s.Salary) > 5000;\n```\n\n### 10. Order of Operations\n\nRemember, in SQL, the order of operations for a query is:\n\n1. FROM\n\n2. JOIN\n\n3. WHERE\n\n4. GROUP BY\n\n5. HAVING\n\n6. SELECT\n\n7. ORDER BY\n\nThis order helps in understanding how the data flows through different clauses in a query.\n\nI hope these queries cover the operations you needed! If you have any specific requirements or need further assistance, feel free to ask."
    }
]