[
    {
        "role": "user",
        "content": "Create a Java program that implements a stack data structure using an array, with push, pop, peek, and isEmpty methods.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Java program that implements a stack data structure using an array. We'll include the standard stack operations: push, pop, peek, and isEmpty. Let's break this down step by step.\n\nFirst, what's a stack? It's a linear data structure that follows the Last In, First Out (LIFO) principle, meaning the last element added is the first one to be removed.\n\nIn Java, we can implement a stack using an array. We'll need to keep track of the top of the stack and the size of the stack.\n\nLet's start by defining the class and its properties.\n\n## Final Solution\nTo create a stack data structure using an array in Java, we need to implement the standard stack operations: push, pop, peek, and isEmpty. Below is a simple implementation of such a stack.\n\n### Approach\n\n1. **Initialization**:\n   - We use an array to store the stack elements.\n   - We maintain a variable to keep track of the top of the stack.\n\n2. **Push Operation**:\n   - Adds an element to the top of the stack.\n   - We need to handle the case where the stack is full.\n\n3. **Pop Operation**:\n   - Removes and returns the top element of the stack.\n   - We need to handle the case where the stack is empty.\n\n4. **Peek Operation**:\n   - Returns the top element of the stack without removing it.\n   - We need to handle the case where the stack is empty.\n\n5. **isEmpty Operation**:\n   - Checks if the stack is empty.\n\n### Solution Code\n\n```java\npublic class ArrayStack {\n    private int maxSize; // Maximum size of the stack\n    private int top; // Top of the stack\n    private int[] stackArray; // Array to store the stack elements\n\n    // Constructor to initialize the stack with a given size\n    public ArrayStack(int size) {\n        maxSize = size;\n        stackArray = new int[maxSize];\n        top = -1; // Initialize top to -1 indicating the stack is empty\n    }\n\n    // Push an element onto the stack\n    public void push(int value) {\n        if (top < maxSize - 1) {\n            top++;\n            stackArray[top] = value;\n            System.out.println(\"Pushed \" + value + \" onto the stack.\");\n        } else {\n            System.out.println(\"Stack is full. Cannot push \" + value + \".\");\n        }\n    }\n\n    // Pop an element from the stack\n    public int pop() {\n        if (top >= 0) {\n            int poppedValue = stackArray[top];\n            top--;\n            System.out.println(\"Popped \" + poppedValue + \" from the stack.\");\n            return poppedValue;\n        } else {\n            System.out.println(\"Stack is empty. Cannot pop.\");\n            return -1; // Assuming -1 as error value\n        }\n    }\n\n    // Peek at the top element of the stack\n    public int peek() {\n        if (top >= 0) {\n            System.out.println(\"Top element is \" + stackArray[top] + \".\");\n            return stackArray[top];\n        } else {\n            System.out.println(\"Stack is empty. Cannot peek.\");\n            return -1; // Assuming -1 as error value\n        }\n    }\n\n    // Check if the stack is empty\n    public boolean isEmpty() {\n        return (top == -1);\n    }\n\n    // Main method to test the stack operations\n    public static void main(String[] args) {\n        ArrayStack stack = new ArrayStack(5);\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n        stack.push(4);\n        stack.push(5);\n        stack.push(6); // Should print that stack is full\n\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop();\n        stack.pop(); // Should print that stack is empty\n\n        stack.peek(); // Should print that stack is empty\n        stack.isEmpty(); // Should return true\n    }\n}\n```\n\n### Explanation\n\n1. **Initialization**:\n   - `maxSize` defines the maximum capacity of the stack.\n   - `top` is initialized to -1, indicating that the stack is empty.\n   - `stackArray` is the array used to store the stack elements.\n\n2. **Push Operation**:\n   - Checks if the stack is not full (`top < maxSize - 1`).\n   - If not full, increments `top` and adds the element at `stackArray[top]`.\n\n3. **Pop Operation**:\n   - Checks if the stack is not empty (`top >= 0`).\n   - If not empty, returns the element at `stackArray[top]` and decrements `top`.\n\n4. **Peek Operation**:\n   - Checks if the stack is not empty.\n   - If not empty, returns the element at `stackArray[top]`.\n\n5. **isEmpty Operation**:\n   - Returns `true` if `top` is -1, indicating the stack is empty.\n\nThis implementation provides a basic stack functionality using an array in Java."
    }
]