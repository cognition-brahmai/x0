[
    {
        "role": "user",
        "content": "Write a C++ program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and specified position, deleting elements by value, and displaying the contents of the list."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C++ program that implements a singly linked list with the specified methods:\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n};\n\nclass SinglyLinkedList {\npublic:\n    Node* head;\n\n    SinglyLinkedList() {\n        head = nullptr;\n    }\n\n    // Add element at the beginning\n    void addAtBeginning(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Add element at the end\n    void addAtEnd(int value) {\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        if (head == nullptr) {\n            head = newNode;\n            return;\n        }\n\n        Node* temp = head;\n        while (temp->next != nullptr) {\n            temp = temp->next;\n        }\n        temp->next = newNode;\n    }\n\n    // Add element at a specified position\n    void addAtPosition(int position, int value) {\n        if (position <= 0) {\n            cout << \"Invalid position\" << endl;\n            return;\n        }\n\n        if (position == 1) {\n            addAtBeginning(value);\n            return;\n        }\n\n        Node* newNode = new Node();\n        newNode->data = value;\n        newNode->next = nullptr;\n\n        Node* temp = head;\n        for (int i = 1; i < position - 1; i++) {\n            if (temp == nullptr) {\n                cout << \"Position out of range\" << endl;\n                delete newNode;\n                return;\n            }\n            temp = temp->next;\n        }\n\n        newNode->next = temp->next;\n        temp->next = newNode;\n    }\n\n    // Delete element by value\n    void deleteByValue(int value) {\n        if (head == nullptr) {\n            cout << \"List is empty\" << endl;\n            return;\n        }\n\n        if (head->data == value) {\n            Node* temp = head;\n            head = head->next;\n            delete temp;\n            return;\n        }\n\n        Node* temp = head;\n        while (temp->next != nullptr && temp->next->data != value) {\n            temp = temp->next;\n        }\n\n        if (temp->next == nullptr) {\n            cout << \"Value not found\" << endl;\n            return;\n        }\n\n        Node* toDelete = temp->next;\n        temp->next = temp->next->next;\n        delete toDelete;\n    }\n\n    // Display the list\n    void display() {\n        Node* temp = head;\n        while (temp != nullptr) {\n            cout << temp->data << \" -> \";\n            temp = temp->next;\n        }\n        cout << \"NULL\" << endl;\n    }\n};\n\nint main() {\n    SinglyLinkedList list;\n\n    list.addAtBeginning(3);\n    list.addAtEnd(5);\n    list.addAtPosition(2, 4);\n    list.display();  // Output: 3 -> 4 -> 5 -> NULL\n\n    list.deleteByValue(4);\n    list.display();  // Output: 3 -> 5 -> NULL\n\n    list.addAtPosition(1, 2);\n    list.display();  // Output: 2 -> 3 -> 5 -> NULL\n\n    list.deleteByValue(5);\n    list.display();  // Output: 2 -> 3 -> NULL\n\n    list.deleteByValue(1);\n    // Output: Value not found\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Node Class**: Represents each element in the linked list with `data` and `next` pointers.\n2. **SinglyLinkedList Class**: Manages the linked list operations.\n   - **addAtBeginning(int value)**: Adds a new node with the given value at the start of the list.\n   - **addAtEnd(int value)**: Adds a new node with the given value at the end of the list.\n   - **addAtPosition(int position, int value)**: Adds a new node with the given value at the specified position.\n   - **deleteByValue(int value)**: Deletes the first node containing the specified value.\n   - **display()**: Prints the current state of the list.\n3. **main() Function**: Demonstrates the usage of the singly linked list methods.\n\nThis program provides a basic implementation of a singly linked list with the required functionalities."
    }
]