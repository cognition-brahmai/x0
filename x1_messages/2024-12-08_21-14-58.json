[
    {
        "role": "user",
        "content": "Write a C++ program to implement a stack data structure using linked lists. The program should support push, pop, and peek operations."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple implementation of a stack data structure using linked lists in C++. This program includes the push, pop, and peek operations as requested.\n\n```cpp\n#include <iostream>\nusing namespace std;\n\nclass Node {\npublic:\n    int data;\n    Node* next;\n\n    Node(int value) {\n        data = value;\n        next = nullptr;\n    }\n};\n\nclass Stack {\nprivate:\n    Node* top;\n\npublic:\n    Stack() {\n        top = nullptr;\n    }\n\n    // Push operation\n    void push(int value) {\n        Node* newNode = new Node(value);\n        if (top == nullptr) {\n            top = newNode;\n        } else {\n            newNode->next = top;\n            top = newNode;\n        }\n        cout << \"Pushed \" << value << \" onto the stack.\" << endl;\n    }\n\n    // Pop operation\n    void pop() {\n        if (top == nullptr) {\n            cout << \"Stack is empty. Cannot pop.\" << endl;\n            return;\n        }\n        Node* temp = top;\n        cout << \"Popped \" << temp->data << \" from the stack.\" << endl;\n        top = top->next;\n        delete temp;\n    }\n\n    // Peek operation\n    void peek() {\n        if (top == nullptr) {\n            cout << \"Stack is empty. Nothing to peek.\" << endl;\n            return;\n        }\n        cout << \"Top element is: \" << top->data << endl;\n    }\n\n    // Display the stack\n    void display() {\n        if (top == nullptr) {\n            cout << \"Stack is empty.\" << endl;\n            return;\n        }\n        Node* temp = top;\n        cout << \"Stack elements: \";\n        while (temp != nullptr) {\n            cout << temp->data << \" \";\n            temp = temp->next;\n        }\n        cout << endl;\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n    stack.display();\n\n    stack.pop();\n    stack.display();\n\n    stack.peek();\n\n    stack.pop();\n    stack.pop();\n    stack.pop(); // Trying to pop from an empty stack\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Node Class**: Represents each element in the stack. Each node contains an integer value and a pointer to the next node.\n2. **Stack Class**: Manages the stack operations.\n   - **push(int value)**: Adds a new element to the top of the stack.\n   - **pop()**: Removes the top element from the stack and prints it.\n   - **peek()**: Displays the top element without removing it.\n   - **display()**: Prints all elements in the stack from top to bottom.\n3. **main()**: Demonstrates the usage of the Stack class by performing push, pop, peek, and display operations.\n\nThis program should give you a good starting point for implementing a stack using linked lists in C++."
    }
]