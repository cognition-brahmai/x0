[
    {
        "role": "user",
        "content": "Create a Java Spring Boot application that uses Elasticsearch to index and search documents containing information about movies (title, director, release year, etc.)."
    },
    {
        "role": "assistant",
        "content": "To create a Java Spring Boot application that uses Elasticsearch to index and search movie documents, you'll need to follow several steps. This guide will walk you through setting up your project, configuring Elasticsearch, creating movie entities, and implementing search functionality.\n\n### Prerequisites\n\n1. **Java Development Kit (JDK)**: Ensure you have JDK 8 or above installed.\n2. **Apache Maven**: For managing dependencies and building the project.\n3. **Elasticsearch**: Make sure Elasticsearch is installed and running on your machine. You can download it from [here](https://www.elastic.co/downloads/elasticsearch).\n4. **Spring Tool Suite (STS)** or any other IDE of your choice.\n\n### Step 1: Setting Up the Spring Boot Project\n\n1. **Create a new Spring Boot project**:\n   - You can use [Spring Initializr](https://start.spring.io/) to generate the project.\n   - Choose the following dependencies:\n     - Spring Web\n     - Spring Data Elasticsearch\n\n2. **Generate and import the project** into your IDE.\n\n### Step 2: Configure Elasticsearch\n\n1. **Update `application.properties`**:\n   - Configure the Elasticsearch connection properties.\n\n```properties\nspring.elasticsearch.rest.uris=http://localhost:9200\nspring.elasticsearch.rest.username=\nspring.elasticsearch.rest.password=\n```\n\n2. **Create an Elasticsearch configuration class** (optional but recommended for advanced configurations).\n\n```java\nimport org.springframework.context.annotation.Configuration;\nimport org.elasticsearch.client.RestHighLevelClient;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.data.elasticsearch.config.AbstractElasticsearchConfiguration;\n\n@Configuration\npublic class ElasticsearchConfig extends AbstractElasticsearchConfiguration {\n\n    @Value(\"${spring.elasticsearch.rest.uris}\")\n    private String elasticsearchUri;\n\n    @Override\n    @Bean\n    public RestHighLevelClient elasticsearchClient() {\n        final ClientConfiguration clientConfiguration = ClientConfiguration.builder()\n                .connectedTo(elasticsearchUri)\n                .build();\n\n        return RestClients.create(clientConfiguration).rest();\n    }\n}\n```\n\n### Step 3: Define the Movie Entity\n\n1. **Create a Movie class** annotated with Spring Data Elasticsearch annotations.\n\n```java\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.elasticsearch.annotations.Document;\nimport org.springframework.data.elasticsearch.annotations.Field;\nimport org.springframework.data.elasticsearch.annotations.FieldType;\n\n@Document(indexName = \"movies\")\npublic class Movie {\n\n    @Id\n    private String id;\n\n    @Field(type = FieldType.Text)\n    private String title;\n\n    @Field(type = FieldType.Text)\n    private String director;\n\n    @Field(type = FieldType.Integer)\n    private int releaseYear;\n\n    // Getters and Setters\n}\n```\n\n### Step 4: Create a Repository for Movie Operations\n\n1. **Create a Spring Data Elasticsearch repository** for Movie operations.\n\n```java\nimport org.springframework.data.elasticsearch.repository.ElasticsearchRepository;\n\npublic interface MovieRepository extends ElasticsearchRepository<Movie, String> {\n    Movie findByTitle(String title);\n    Movie findByDirector(String director);\n}\n```\n\n### Step 5: Implement the Service Layer\n\n1. **Create a service class** to handle business logic.\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Service;\n\nimport java.util.List;\n\n@Service\npublic class MovieService {\n\n    @Autowired\n    private MovieRepository movieRepository;\n\n    public Movie saveMovie(Movie movie) {\n        return movieRepository.save(movie);\n    }\n\n    public List<Movie> findAllMovies() {\n        return movieRepository.findAll();\n    }\n\n    public Movie findMovieById(String id) {\n        return movieRepository.findById(id).orElse(null);\n    }\n\n    public Movie findMovieByTitle(String title) {\n        return movieRepository.findByTitle(title);\n    }\n\n    public Movie findMovieByDirector(String director) {\n        return movieRepository.findByDirector(director);\n    }\n}\n```\n\n### Step 6: Create the Controller\n\n1. **Create a REST controller** to handle HTTP requests.\n\n```java\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/movies\")\npublic class MovieController {\n\n    @Autowired\n    private MovieService movieService;\n\n    @PostMapping\n    public Movie addMovie(@RequestBody Movie movie) {\n        return movieService.saveMovie(movie);\n    }\n\n    @GetMapping\n    public List<Movie> getAllMovies() {\n        return movieService.findAllMovies();\n    }\n\n    @GetMapping(\"/{id}\")\n    public Movie getMovieById(@PathVariable String id) {\n        return movieService.findMovieById(id);\n    }\n\n    @GetMapping(\"/title/{title}\")\n    public Movie getMovieByTitle(@PathVariable String title) {\n        return movieService.findMovieByTitle(title);\n    }\n\n    @GetMapping(\"/director/{director}\")\n    public Movie getMovieByDirector(@PathVariable String director) {\n        return movieService.findMovieByDirector(director);\n    }\n}\n```\n\n### Step 7: Run the Application\n\n1. **Start your Spring Boot application**.\n2. **Test the APIs** using tools like Postman or curl to ensure they are working as expected.\n\n### Example Usage\n\n- **Add a new movie**:\n  ```bash\n  curl -X POST http://localhost:8080/api/movies -H \"Content-Type: application/json\" -d '{\"title\":\"The Shawshank Redemption\",\"director\":\"Frank Darabont\",\"releaseYear\":1994}'\n  ```\n\n- **Get all movies**:\n  ```bash\n  curl http://localhost:8080/api/movies\n  ```\n\n- **Search by title**:\n  ```bash\n  curl http://localhost:8080/api/movies/title/The%20Shawshank%20Redemption\n  ```\n\n- **Search by director**:\n  ```bash\n  curl http://localhost:8080/api/movies/director/Frank%20Darabont\n  ```\n\nThis setup provides a basic CRUD application with Elasticsearch integration for movie data. You can expand this by adding more fields, implementing more complex queries, or integrating a frontend for better user interaction."
    }
]