[
    {
        "role": "user",
        "content": "Create a Java program that takes an integer as input and outputs its factorial. The program should handle edge cases, such as negative numbers or non-integer inputs, by displaying appropriate error messages."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java program that calculates the factorial of an integer provided by the user. It includes handling for edge cases such as negative numbers and non-integer inputs, ensuring appropriate error messages are displayed.\n\n```java\nimport java.util.Scanner;\n\npublic class FactorialCalculator {\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        System.out.println(\"Enter an integer to calculate its factorial:\");\n        \n        if (scanner.hasNextInt()) {\n            int number = scanner.nextInt();\n            if (number < 0) {\n                System.out.println(\"Error: Factorial is not defined for negative numbers.\");\n            } else {\n                try {\n                    long factorial = calculateFactorial(number);\n                    System.out.printf(\"The factorial of %d is %d.%n\", number, factorial);\n                } catch (ArithmeticException e) {\n                    System.out.println(\"Error: \" + e.getMessage());\n                }\n            }\n        } else {\n            System.out.println(\"Error: Invalid input. Please enter an integer.\");\n        }\n        \n        scanner.close();\n    }\n    \n    private static long calculateFactorial(int n) {\n        if (n > 20) { // Factorial of numbers greater than 20 cannot be stored in long\n            throw new ArithmeticException(\"Factorial overflows long for numbers greater than 20.\");\n        }\n        long result = 1;\n        for (int i = 1; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n}\n```\n\n### Explanation:\n\n1. **Input Handling**:\n   - The program uses `Scanner` to read input from the user.\n   - It checks if the input is an integer using `hasNextInt()`. If not, it displays an error message.\n\n2. **Edge Case Handling**:\n   - If the input is a negative integer, it informs the user that factorials are not defined for negative numbers.\n   - For integers greater than 20, it checks if the factorial would cause an overflow in a `long` data type and throws an `ArithmeticException` with an appropriate message.\n\n3. **Factorial Calculation**:\n   - The `calculateFactorial` method computes the factorial using a loop.\n   - It returns the factorial value, which is then printed.\n\nThis program ensures robust handling of various input scenarios and provides clear feedback to the user."
    }
]