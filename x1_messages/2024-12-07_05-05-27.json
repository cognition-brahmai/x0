[
    {
        "role": "user",
        "content": "Create a Golang web server that listens on a specified port and serves files from a given directory. Add support for basic authentication using a username and password provided via command line arguments.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Creating a Golang web server with basic authentication involves several steps. We'll use the `net/http` package for handling HTTP requests and responses, and we'll implement basic authentication by checking credentials for each request.\n\n### Step-by-Step Guide\n\n1. **Set up the project structure:**\n   Create a new directory for your project and initialize a new Go module.\n\n   ```sh\n   mkdir auth-server\n   cd auth-server\n   go mod init auth-server\n   ```\n\n2. **Write the server code:**\n   Create a file named `main.go` and add the following code:\n\n   ```go\n   package main\n\n   import (\n       \"flag\"\n       \"fmt\"\n       \"log\"\n       \"net/http\"\n       \"os\"\n\n       \"github.com/gorilla/handler\"\n   )\n\n   func main() {\n       // Define command line flags\n       port := flag.Int(\"port\", 8080, \"Port to listen on\")\n       dir := flag.String(\"dir\", \".\", \"Directory to serve\")\n       username := flag.String(\"username\", \"\", \"Username for basic auth\")\n       password := flag.String(\"password\", \"\", \"Password for basic auth\")\n\n       flag.Parse()\n\n       if *username == \"\" || *password == \"\" {\n           log.Fatal(\"Username and password are required.\")\n       }\n\n       // Create a file server\n       fs := http.FileServer(http.Dir(*dir))\n\n       // Wrap the file server with basic auth\n       auth := handler.BasicAuth(func(u, p string) bool {\n           return u == *username && p == *password\n       })\n\n       http.Handle(\"/\", auth(fs))\n\n       // Start the server\n       fmt.Printf(\"Starting server on port %d, serving %s\\n\", *port, *dir)\n       err := http.ListenAndServe(fmt.Sprintf(\":%d\", *port), nil)\n       if err != nil {\n           log.Fatal(err)\n       }\n   }\n   ```\n\n3. **Install dependencies:**\n   We're using the `gorilla/handler` package for basic authentication. Install it using:\n\n   ```sh\n   go get -u github.com/gorilla/handler\n   ```\n\n4. **Run the server:**\n   You can run the server with the required command line arguments. For example:\n\n   ```sh\n   go run main.go -port=8080 -dir=./public -username=admin -password=secret\n   ```\n\n   This will start a server on port 8080, serving files from the `public` directory, and requiring basic authentication with username `admin` and password `secret`.\n\n### Explanation\n\n- **Command Line Flags:** We use the `flag` package to parse command line arguments for port, directory, username, and password.\n- **File Server:** The `http.FileServer` function creates a handler that serves files from the specified directory.\n- **Basic Authentication:** The `gorilla/handler.BasicAuth` function wraps the file server handler to require basic authentication. It checks the provided username and password against the ones specified via command line arguments.\n- **Starting the Server:** The `http.ListenAndServe` function starts the HTTP server on the specified port, handling requests with the authenticated file server handler.\n\nThis setup ensures that only users who provide the correct username and password can access the files served by the web server."
    }
]