[
    {
        "role": "user",
        "content": "Implement a C++ program that calculates the factorial of a given non-negative integer using recursion.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple C++ program that calculates the factorial of a given non-negative integer using recursion. \n\n```cpp\n#include <iostream>\n\n// Function to calculate factorial using recursion\nunsigned long long factorial(unsigned int n) {\n    if (n == 0) {\n        return 1;\n    } else {\n        return n * factorial(n - 1);\n    }\n}\n\nint main() {\n    unsigned int number;\n    std::cout << \"Enter a non-negative integer: \";\n    std::cin >> number;\n\n    if (number < 0) {\n        std::cout << \"Invalid input! Please enter a non-negative integer.\" << std::endl;\n    } else {\n        unsigned long long result = factorial(number);\n        std::cout << \"Factorial of \" << number << \" is \" << result << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Function Definition:**\n   - `unsigned long long factorial(unsigned int n)`: This function calculates the factorial of `n` using recursion.\n   - **Base Case:** If `n` is 0, it returns 1 because 0! = 1.\n   - **Recursive Case:** Otherwise, it returns `n` multiplied by the factorial of `n - 1`.\n\n2. **Main Function:**\n   - Prompts the user to enter a non-negative integer.\n   - Reads the input and checks if it is non-negative.\n   - Calls the `factorial` function and prints the result.\n\nThis program uses recursion to compute the factorial, which is a direct translation of the mathematical definition of factorial. However, for very large numbers, this approach may lead to stack overflow due to deep recursion. For such cases, an iterative approach or using libraries that handle large numbers might be more appropriate."
    }
]