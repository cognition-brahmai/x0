[
    {
        "role": "user",
        "content": "Create a TypeScript class that models a bank account with methods for depositing, withdrawing, and checking balance.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a simple TypeScript class that models a bank account with methods for depositing, withdrawing, and checking the balance:\n\n```typescript\nclass BankAccount {\n    private balance: number;\n\n    constructor(initialBalance: number = 0) {\n        this.balance = initialBalance;\n    }\n\n    deposit(amount: number): void {\n        if (amount > 0) {\n            this.balance += amount;\n            console.log(`Deposited: $${amount}`);\n        } else {\n            console.log(\"Invalid deposit amount.\");\n        }\n    }\n\n    withdraw(amount: number): void {\n        if (amount > 0) {\n            if (this.balance >= amount) {\n                this.balance -= amount;\n                console.log(`Withdrew: $${amount}`);\n            } else {\n                console.log(\"Insufficient funds.\");\n            }\n        } else {\n            console.log(\"Invalid withdrawal amount.\");\n        }\n    }\n\n    checkBalance(): number {\n        return this.balance;\n    }\n}\n\n// Example usage:\nconst account = new BankAccount(100);\nconsole.log(`Initial balance: $${account.checkBalance()}`);\naccount.deposit(50);\naccount.withdraw(30);\nconsole.log(`Final balance: $${account.checkBalance()}`);\n```\n\nThis class defines a `BankAccount` with a private `balance` property. The constructor allows optionally setting an initial balance. The `deposit` method adds funds to the account, the `withdraw` method removes funds (if sufficient balance exists), and the `checkBalance` method returns the current balance.\n\nYou can adjust this class according to your specific requirements, such as adding more methods or properties."
    }
]