[
    {
        "role": "user",
        "content": "Implement a Python program that simulates the behavior of a doubly linked list, including methods for inserting elements at the beginning, end, and specified index, as well as deleting elements by value or index.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'd be happy to help you with that! Implementing a doubly linked list in Python involves creating a structure where each node has references to both the next and previous nodes. This allows for efficient insertion and deletion operations from both ends of the list.\n\nFirst, let's define the basic structure of a node in the doubly linked list. Each node will contain some data and two pointers: one pointing to the next node and another pointing to the previous node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n```\n\nNext, we'll create the DoublyLinkedList class that will manage these nodes. We need to handle operations like insertion at the beginning, end, and a specified index, as well as deletion by value or index.\n\n### Insertion Operations\n\n1. **Insert at Beginning:**\n   - Create a new node.\n   - Set its next to the current head.\n   - If the list is not empty, set the current head's prev to the new node.\n   - Update the head to the new node.\n\n2. **Insert at End:**\n   - Create a new node.\n   - If the list is empty, set the head to the new node.\n   - Otherwise, traverse to the end of the list and set the current end's next to the new node.\n   - Set the new node's prev to the current end.\n\n3. **Insert at Index:**\n   - Create a new node.\n   - If the index is 0, insert at the beginning.\n   - Else, traverse to the specified index.\n   - Adjust the next and prev pointers accordingly.\n\n### Deletion Operations\n\n1. **Delete by Value:**\n   - Traverse the list to find the node with the given value.\n   - Adjust the next and prev pointers to skip the node.\n   - Delete the node.\n\n2. **Delete by Index:**\n   - Traverse to the specified index.\n   - Adjust the next and prev pointers to skip the node.\n   - Delete the node.\n\nLet's put this into code.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n        self.prev = None\n\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            current = self.head\n            while current.next:\n                current = current.next\n            current.next = new_node\n            new_node.prev = current\n\n    def insert_at_index(self, index, data):\n        if index < 0:\n            raise ValueError(\"Index cannot be negative\")\n        if index == 0:\n            self.insert_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        current_index = 0\n        while current and current_index < index - 1:\n            current = current.next\n            current_index += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        new_node.next = current.next\n        if current.next:\n            current.next.prev = new_node\n        current.next = new_node\n        new_node.prev = current\n\n    def delete_by_value(self, value):\n        if not self.head:\n            raise Exception(\"List is empty\")\n        if self.head.data == value:\n            if self.head.next:\n                self.head = self.head.next\n                self.head.prev = None\n            else:\n                self.head = None\n            return\n        current = self.head\n        while current and current.data != value:\n            current = current.next\n        if not current:\n            raise ValueError(\"Value not found in list\")\n        if current.next:\n            current.next.prev = current.prev\n        if current.prev:\n            current.prev.next = current.next\n\n    def delete_by_index(self, index):\n        if index < 0:\n            raise ValueError(\"Index cannot be negative\")\n        if not self.head:\n            raise IndexError(\"List is empty\")\n        if index == 0:\n            if self.head.next:\n                self.head = self.head.next\n                self.head.prev = None\n            else:\n                self.head = None\n            return\n        current = self.head\n        current_index = 0\n        while current and current_index < index:\n            current = current.next\n            current_index += 1\n        if not current:\n            raise IndexError(\"Index out of range\")\n        if current.next:\n            current.next.prev = current.prev\n        if current.prev:\n            current.prev.next = current.next\n\n    def display(self):\n        current = self.head\n        while current:\n            print(current.data, end=\" <-> \")\n            current = current.next\n        print(\"None\")\n\n# Example usage:\ndll = DoublyLinkedList()\ndll.insert_at_beginning(10)\ndll.insert_at_end(20)\ndll.insert_at_end(30)\ndll.insert_at_beginning(5)\ndll.insert_at_index(2, 15)\ndll.display()  # Output: 5 <-> 10 <-> 15 <-> 20 <-> 30 <-> None\ndll.delete_by_value(15)\ndll.display()  # Output: 5 <-> 10 <-> 20 <-> 30 <-> None\ndll.delete_by_index(2)\ndll.display()  # Output: 5 <-> 10 <-> 30 <-> None\n```\n\n### Explanation\n\n1. **Node Class:**\n   - Represents each element in the list with `data`, `next`, and `prev` attributes.\n\n2. **DoublyLinkedList Class:**\n   - Manages the list with methods for insertion and deletion.\n   - `insert_at_beginning`: Adds a new node at the start.\n   - `insert_at_end`: Adds a new node at the end.\n   - `insert_at_index`: Inserts a new node at a specified index.\n   - `delete_by_value`: Removes the first node containing the specified value.\n   - `delete_by_index`: Removes the node at the specified index.\n   - `display`: Prints the list to visualize its current state.\n\nThis implementation ensures that all operations are performed efficiently, taking O(n) time in the worst case, where n is the number of nodes in the list."
    }
]