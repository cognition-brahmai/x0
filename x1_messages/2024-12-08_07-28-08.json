[
    {
        "role": "user",
        "content": "Develop a TypeScript application that fetches data from a REST API (e.g., https://jsonplaceholder.typicode.com/posts) and displays the results in a paginated table with sorting and filtering capabilities.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to guide you through building a TypeScript application that fetches data from a REST API and displays it in a paginated table with sorting and filtering capabilities. We'll be using the JSONPlaceholder API for this example.\n\n### Step 1: Set Up Your Project\n\nFirst, make sure you have Node.js installed on your machine. Then, create a new directory for your project and initialize it with npm.\n\n```bash\nmkdir typescript-api-app\ncd typescript-api-app\nnpm init -y\n```\n\nNext, install the necessary dependencies:\n\n```bash\nnpm install typescript ts-node @types/node axios\n```\n\nAlso, install `typescript-collections` for handling collections if needed:\n\n```bash\nnpm install typescript-collections\n```\n\nCreate a `tsconfig.json` file to configure TypeScript:\n\n```json\n{\n  \"compilerOptions\": {\n    \"target\": \"es6\",\n    \"module\": \"commonjs\",\n    \"outDir\": \"dist\",\n    \"strict\": true,\n    \"esModuleInterop\": true\n  },\n  \"include\": [\"src/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n```\n\n### Step 2: Fetch Data from the API\n\nCreate a `src` directory and a `fetchData.ts` file inside it:\n\n```typescript\nimport axios from 'axios';\n\nconst API_URL = 'https://jsonplaceholder.typicode.com/posts';\n\ninterface Post {\n  userId: number;\n  id: number;\n  title: string;\n  body: string;\n}\n\nasync function fetchData(): Promise<Post[]> {\n  try {\n    const response = await axios.get(API_URL);\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    throw error;\n  }\n}\n\nexport default fetchData;\n```\n\n### Step 3: Implement Pagination\n\nCreate a `paginateData.ts` file to handle pagination logic:\n\n```typescript\ninterface PaginatedData<T> {\n  data: T[];\n  pagination: {\n    currentPage: number;\n    pageSize: number;\n    totalItems: number;\n    totalPages: number;\n  };\n}\n\nfunction paginate<T>(data: T[], currentPage: number, pageSize: number): PaginatedData<T> {\n  const totalItems = data.length;\n  const totalPages = Math.ceil(totalItems / pageSize);\n  const startIndex = (currentPage - 1) * pageSize;\n  const endIndex = startIndex + pageSize;\n  const paginatedData = data.slice(startIndex, endIndex);\n\n  return {\n    data: paginatedData,\n    pagination: {\n      currentPage,\n      pageSize,\n      totalItems,\n      totalPages,\n    },\n  };\n}\n\nexport default paginate;\n```\n\n### Step 4: Implement Sorting\n\nCreate a `sortData.ts` file to handle sorting logic:\n\n```typescript\nfunction sortData<T>(data: T[], key: keyof T, order: 'asc' | 'desc' = 'asc'): T[] {\n  return data.sort((a, b) => {\n    if (a[key] < b[key]) {\n      return order === 'asc' ? -1 : 1;\n    }\n    if (a[key] > b[key]) {\n      return order === 'asc' ? 1 : -1;\n    }\n    return 0;\n  });\n}\n\nexport default sortData;\n```\n\n### Step 5: Implement Filtering\n\nCreate a `filterData.ts` file to handle filtering logic:\n\n```typescript\nfunction filterData<T>(data: T[], key: keyof T, value: any): T[] {\n  return data.filter(item => item[key] === value);\n}\n\nexport default filterData;\n```\n\n### Step 6: Combine All Features\n\nNow, let's combine all these features in a main application file. Create an `app.ts` file:\n\n```typescript\nimport fetchData from './fetchData';\nimport paginate from './paginateData';\nimport sortData from './sortData';\nimport filterData from './filterData';\n\nasync function main() {\n  try {\n    const data: any[] = await fetchData();\n\n    // Example: Sorting by title in ascending order\n    const sortedData = sortData(data, 'title', 'asc');\n\n    // Example: Filtering by userId = 1\n    const filteredData = filterData(sortedData, 'userId', 1);\n\n    // Example: Paginating the filtered and sorted data with page 1 and page size 10\n    const paginatedData = paginate(filteredData, 1, 10);\n\n    console.log('Paginated Data:', paginatedData.data);\n    console.log('Pagination Info:', paginatedData.pagination);\n  } catch (error) {\n    console.error('An error occurred:', error);\n  }\n}\n\nmain();\n```\n\n### Step 7: Run Your Application\n\nYou can run your application using `ts-node`:\n\n```bash\nnpx ts-node src/app.ts\n```\n\nThis will fetch data from the JSONPlaceholder API, sort it by title in ascending order, filter it by `userId = 1`, paginate it with a page size of 10, and display the results.\n\n### Conclusion\n\nYou've successfully created a TypeScript application that fetches data from a REST API and implements pagination, sorting, and filtering functionalities. This setup can be extended and customized based on your specific requirements."
    }
]