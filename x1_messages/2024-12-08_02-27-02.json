[
    {
        "role": "user",
        "content": "Implement a Python script that communicates with a Memcached server, storing key-value pairs from user input and retrieving values based on keys provided by the user.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To implement a Python script that communicates with a Memcached server, you'll need to have Memcached installed and running on your machine, as well as the `python-memcached` library installed in your Python environment. If you haven't installed these yet, you can do so using the following commands:\n\n- Install Memcached:\n\nOn Ubuntu/Debian:\n\n```bash\nsudo apt-get update\nsudo apt-get install memcached\n```\n\nOn CentOS/RHEL:\n\n```bash\nsudo yum install memcached\n```\n\n- Install the `python-memcached` library:\n\n```bash\npip install python-memcached\n```\n\nOnce you have Memcached and the library set up, you can proceed to write the Python script. Below is a simple implementation that allows users to store and retrieve key-value pairs from a Memcached server.\n\n## Final Solution\nTo create a Python script that communicates with a Memcached server, storing and retrieving key-value pairs based on user input, follow these steps:\n\n### Solution Code\n\n```python\nimport memcache\n\ndef main():\n    # Connect to Memcached server\n    mc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Store key-value pair\")\n        print(\"2. Retrieve value by key\")\n        print(\"3. Exit\")\n        \n        choice = input(\"Enter your choice (1/2/3): \")\n        \n        if choice == '1':\n            key = input(\"Enter key: \")\n            value = input(\"Enter value: \")\n            # Store the key-value pair in Memcached\n            mc.set(key, value)\n            print(f\"Stored: {key} -> {value}\")\n        \n        elif choice == '2':\n            key = input(\"Enter key to retrieve value: \")\n            # Retrieve the value from Memcached\n            value = mc.get(key)\n            if value is not None:\n                print(f\"Value: {value}\")\n            else:\n                print(\"Key not found.\")\n        \n        elif choice == '3':\n            print(\"Exiting...\")\n            break\n        \n        else:\n            print(\"Invalid choice. Please select 1, 2, or 3.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation\n\n1. **Connecting to Memcached:**\n   - The script uses the `memcache` module to connect to a Memcached server running on `127.0.0.1:11211`. Adjust the server address and port if necessary.\n\n2. **User Interaction:**\n   - The script presents a menu with three options: store a key-value pair, retrieve a value by key, or exit.\n   - Based on the user's choice, it either stores new data or retrieves existing data from the Memcached server.\n\n3. **Storing Data:**\n   - When the user chooses to store a key-value pair, they are prompted to enter the key and value.\n   - The script uses the `set` method of the Memcached client to store the data.\n\n4. **Retrieving Data:**\n   - When retrieving a value, the user is asked to provide the key.\n   - The script uses the `get` method to fetch the value associated with the key and displays it.\n   - If the key does not exist, it informs the user that the key was not found.\n\n5. **Exiting the Script:**\n   - The script provides an option to exit cleanly.\n\nThis script provides a basic interface for interacting with a Memcached server, suitable for simple key-value storage and retrieval operations."
    }
]