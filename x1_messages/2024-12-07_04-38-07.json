[
    {
        "role": "user",
        "content": "Develop a GoLang web server that serves a simple HTML form where users can enter their name and age. When submitted, the server should validate that the age is between 18 and 100 and return a greeting message with the user's name if valid, otherwise it should return an error message. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you set up a simple web server using GoLang that does what you've described. We'll create a web server that serves an HTML form for users to enter their name and age. Upon submission, the server will validate the age to ensure it's between 18 and 100. If the age is valid, it will return a greeting message with the user's name; otherwise, it will return an error message.\n\nFirst, make sure you have Go installed on your machine. You can download it from https://golang.org/dl/ if you don't have it already.\n\nLet's start by creating a new directory for our project:\n\n```bash\nmkdir go-web-server\ncd go-web-server\n```\n\nNow, create a new Go file, let's call it `main.go`:\n\n```bash\ntouch main.go\n```\n\nOpen `main.go` in your favorite text editor and let's start writing some code.\n\nFirst, we need to import the necessary packages. We'll be using `net/http` for the web server and `html/template` to handle our HTML form.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\t\"strings\"\n\n\t\"github.com/gorilla/mux\"\n\thtmltemplate \"html/template\"\n)\n```\n\nI'm also importing `strings` for any string manipulations we might need and `github.com/gorilla/mux` for better URL routing, which is optional but useful.\n\nNext, let's define our HTML form. For simplicity, we'll embed the HTML directly in our Go code using template literals.\n\n```go\nconst formHTML = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Form</title>\n</head>\n<body>\n    <h1>Please enter your name and age:</h1>\n    <form action=\"/submit\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n        <br>\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\" min=\"0\" required>\n        <br>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n`\n```\n\nThis is a basic HTML form with fields for name and age, both of which are required. The form submits to `/submit` using the POST method.\n\nNow, let's create a handler function for the root URL that serves this form.\n\n```go\nfunc formHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\ttmpl := htmltemplate.Must(htmltemplate.New(\"form\").Parse(formHTML))\n\ttmpl.Execute(w, nil)\n}\n```\n\nHere, we check if the request method is GET, and if so, we parse and execute the HTML template to render the form.\n\nNext, we need to handle the form submission at `/submit`. This handler will receive the form data, validate the age, and return either a greeting message or an error message.\n\n```go\nfunc submitHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\terr := r.ParseForm()\n\tif err != nil {\n\t\thttp.Error(w, \"Error parsing form\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tname := r.FormValue(\"name\")\n\tageStr := r.FormValue(\"age\")\n\tage, err := strconv.Atoi(ageStr)\n\tif err != nil {\n\t\thttp.Error(w, \"Invalid age format\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tif age < 18 || age > 100 {\n\t\thttp.Error(w, \"Age must be between 18 and 100\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tmessage := fmt.Sprintf(\"Hello, %s! Welcome to our site.\", name)\n\tw.Write([]byte(message))\n}\n```\n\nIn this handler, we first ensure that the request method is POST. Then, we parse the form data and extract the name and age fields. We convert the age string to an integer and check if it's within the valid range (18 to 100). If it is, we return a greeting message; otherwise, we return an error message.\n\nNow, let's set up the main function to start the server with these handlers.\n\n```go\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", formHandler)\n\tr.HandleFunc(\"/submit\", submitHandler)\n\n\tfmt.Println(\"Starting server at port 8080\")\n\tif err := http.ListenAndServe(\":8080\", r); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n```\n\nHere, we're using the `gorilla/mux` router to handle our routes, but you could also use the default `http.ServeMux` if you prefer.\n\nFinally, don't forget to install the `gorilla/mux` package if you haven't already:\n\n```bash\ngo get -u github.com/gorilla/mux\n```\n\nThat's it! Now, you can run your server with:\n\n```bash\ngo run main.go\n```\n\nAnd navigate to `http://localhost:8080` in your web browser to see the form. Submitting the form will validate the age and display either a greeting or an error message accordingly.\n\n## Final Solution\nTo create a simple web server in Go that serves an HTML form for users to enter their name and age, and validates the age between 18 and 100, follow these steps:\n\n1. **Set Up the Project:**\n   - Create a new directory for your project.\n   - Initialize a new Go file, e.g., `main.go`.\n\n2. **Import Required Packages:**\n   - Use `net/http` for the web server.\n   - Use `html/template` to handle the HTML form.\n   - Optionally, use `github.com/gorilla/mux` for better URL routing.\n\n3. **Define the HTML Form:**\n   - Embed the HTML form directly in the Go code using a template literal.\n\n4. **Create Handler Functions:**\n   - `formHandler`: Serves the HTML form for GET requests.\n   - `submitHandler`: Processes the form data for POST requests, validates the age, and returns appropriate messages.\n\n5. **Set Up the Router and Start the Server:**\n   - Use `gorilla/mux` to handle routes.\n   - Start the server on a specified port (e.g., 8080).\n\n### Solution Code\n\n```go\npackage main\n\nimport (\n\t\"html/template\"\n\t\"net/http\"\n\t\"strconv\"\n\t\"fmt\"\n\n\t\"github.com/gorilla/mux\"\n)\n\nconst formHTML = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>User Form</title>\n</head>\n<body>\n    <h1>Please enter your name and age:</h1>\n    <form action=\"/submit\" method=\"post\">\n        <label for=\"name\">Name:</label>\n        <input type=\"text\" id=\"name\" name=\"name\" required>\n        <br>\n        <label for=\"age\">Age:</label>\n        <input type=\"number\" id=\"age\" name=\"age\" min=\"0\" required>\n        <br>\n        <button type=\"submit\">Submit</button>\n    </form>\n</body>\n</html>\n`\n\nfunc formHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodGet {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\ttmpl := template.Must(template.New(\"form\").Parse(formHTML))\n\ttmpl.Execute(w, nil)\n}\n\nfunc submitHandler(w http.ResponseWriter, r *http.Request) {\n\tif r.Method != http.MethodPost {\n\t\thttp.Error(w, \"Method not allowed\", http.StatusMethodNotAllowed)\n\t\treturn\n\t}\n\n\terr := r.ParseForm()\n\tif err != nil {\n\t\thttp.Error(w, \"Error parsing form\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tname := r.FormValue(\"name\")\n\tageStr := r.FormValue(\"age\")\n\tage, err := strconv.Atoi(ageStr)\n\tif err != nil {\n\t\thttp.Error(w, \"Invalid age format\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tif age < 18 || age > 100 {\n\t\thttp.Error(w, \"Age must be between 18 and 100\", http.StatusBadRequest)\n\t\treturn\n\t}\n\n\tmessage := fmt.Sprintf(\"Hello, %s! Welcome to our site.\", name)\n\tw.Write([]byte(message))\n}\n\nfunc main() {\n\tr := mux.NewRouter()\n\tr.HandleFunc(\"/\", formHandler)\n\tr.HandleFunc(\"/submit\", submitHandler)\n\n\tfmt.Println(\"Starting server at port 8080\")\n\tif err := http.ListenAndServe(\":8080\", r); err != nil {\n\t\tfmt.Println(err)\n\t}\n}\n```\n\n### Explanation\n\n1. **HTML Form:**\n   - A simple HTML form that captures the user's name and age.\n   - The form submits to `/submit` using the POST method.\n\n2. **Handler Functions:**\n   - `formHandler`: Handles GET requests to the root URL and serves the HTML form.\n   - `submitHandler`: Handles POST requests to `/submit`, validates the age, and returns a greeting or error message.\n\n3. **Router and Server:**\n   - Uses `gorilla/mux` for routing.\n   - Starts the server on port 8080.\n\nThis setup ensures that users can enter their name and age, and receive appropriate feedback based on the age validation."
    }
]