[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with Cassandra database to perform CRUD operations on a table named 'students'. The table should have columns: id, name, age and grade. Include command line arguments for specifying the Cassandra cluster IP and port. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that interacts with a Cassandra database to perform CRUD (Create, Read, Update, Delete) operations on a table named 'students'. The table will have columns: id, name, age, and grade. Additionally, the script will accept command-line arguments for specifying the Cassandra cluster IP and port.\n\nFirst, make sure you have the necessary dependencies installed. You'll need the `cassandra-driver` package, which you can install using pip:\n\n```bash\npip install cassandra-driver\n```\n\nNext, you'll need to set up your Cassandra cluster connection using the provided command-line arguments. We'll use the `argparse` module to handle command-line arguments.\n\nHere's a step-by-step guide to creating the script:\n\n1. **Import necessary modules:**\n\n```python\nimport sys\nimport argparse\nfrom cassandra.cluster import Cluster\nfrom cassandra.query import SimpleStatement\n```\n\n2. **Set up command-line argument parsing:**\n\n```python\ndef get_args():\n    parser = argparse.ArgumentParser(description=\"Cassandra CRUD operations on students table\")\n    parser.add_argument('--ip', required=True, help='Cassandra cluster IP')\n    parser.add_argument('--port', type=int, default=9042, help='Cassandra cluster port (default: 9042)')\n    return parser.parse_args()\n```\n\n3. **Establish a connection to the Cassandra cluster:**\n\n```python\ndef connect_to_cassandra(ip, port):\n    try:\n        cluster = Cluster([ip], port=port)\n        session = cluster.connect()\n        print(\"Connected to Cassandra cluster\")\n        return session\n    except Exception as e:\n        print(f\"Unable to connect to Cassandra cluster: {e}\")\n        sys.exit(1)\n```\n\n4. **Create the keyspace and table if they don't exist:**\n\n```python\ndef create_keyspace_and_table(session):\n    session.execute(\"\"\"\n        CREATE KEYSPACE IF NOT EXISTS mykeyspace\n        WITH replication = { 'class': 'SimpleStrategy', 'replication_factor': '1' }\n    \"\"\")\n    session.set_keyspace('mykeyspace')\n    session.execute(\"\"\"\n        CREATE TABLE IF NOT EXISTS students (\n            id UUID PRIMARY KEY,\n            name TEXT,\n            age INT,\n            grade TEXT\n        )\n    \"\"\")\n    print(\"Keyspace and table created/verified\")\n```\n\n5. **Implement CRUD operations:**\n\n- **Create (Insert):**\n\n```python\ndef create_student(session, student_id, name, age, grade):\n    query = \"\"\"\n        INSERT INTO students (id, name, age, grade)\n        VALUES (%s, %s, %s, %s)\n    \"\"\"\n    session.execute(query, (student_id, name, age, grade))\n    print(f\"Student {name} inserted with id {student_id}\")\n```\n\n- **Read (Select):**\n\n```python\ndef read_student(session, student_id):\n    query = SimpleStatement(\"\"\"\n        SELECT * FROM students WHERE id = %s\n    \"\"\")\n    rows = session.execute(query, (student_id,))\n    for row in rows:\n        print(row)\n```\n\n- **Update:**\n\n```python\ndef update_student(session, student_id, name, age, grade):\n    query = \"\"\"\n        UPDATE students SET name = %s, age = %s, grade = %s WHERE id = %s\n    \"\"\"\n    session.execute(query, (name, age, grade, student_id))\n    print(f\"Student with id {student_id} updated\")\n```\n\n- **Delete:**\n\n```python\ndef delete_student(session, student_id):\n    query = \"\"\"\n        DELETE FROM students WHERE id = %s\n    \"\"\"\n    session.execute(query, (student_id,))\n    print(f\"Student with id {student_id} deleted\")\n```\n\n6. **Main function to orchestrate the operations:**\n\n```python\ndef main():\n    args = get_args()\n    session = connect_to_cassandra(args.ip, args.port)\n    create_keyspace_and_table(session)\n    \n    # Example operations\n    from uuid import uuid4\n    student_id = uuid4()\n    \n    # Create\n    create_student(session, student_id, 'John Doe', 20, 'A')\n    \n    # Read\n    read_student(session, student_id)\n    \n    # Update\n    update_student(session, student_id, 'John Doe Jr.', 21, 'B')\n    \n    # Read again to verify update\n    read_student(session, student_id)\n    \n    # Delete\n    delete_student(session, student_id)\n    \n    # Try to read after delete\n    read_student(session, student_id)\n    \n    session.shutdown()\n    print(\"Connection closed\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Argument Parsing:** We use `argparse` to handle command-line arguments for IP and port.\n2. **Cassandra Connection:** We connect to the Cassandra cluster using the provided IP and port.\n3. **Keyspace and Table Creation:** We create a keyspace and a table if they don't already exist.\n4. **CRUD Operations:**\n   - **Create:** Insert a new student record.\n   - **Read:** Retrieve a student record by ID.\n   - **Update:** Update an existing student record.\n   - **Delete:** Delete a student record by ID.\n5. **Main Function:** Demonstrates example operations for CRUD.\n\nYou can extend this script by adding more functionalities or handling different types of inputs as per your requirements."
    }
]