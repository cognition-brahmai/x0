[
    {
        "role": "user",
        "content": "Implement a C++ function that takes an integer array as input and returns the median value of the elements in the array.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To implement a function in C++ that calculates the median of an integer array, you need to follow these steps:\n\n1. **Sort the array**: The median is the middle value in a sorted list of numbers.\n2. **Find the median**:\n   - If the number of elements is odd, the median is the middle element.\n   - If the number of elements is even, the median is the average of the two middle elements.\n\nHere's how you can implement this:\n\n```cpp\n#include <algorithm> // For std::sort\n#include <vector>    // For using std::vector\n\ndouble findMedian(std::vector<int>& arr) {\n    size_t n = arr.size();\n    if (n == 0) {\n        throw std::invalid_argument(\"Array is empty\");\n    }\n    \n    std::sort(arr.begin(), arr.end());\n    \n    if (n % 2 != 0) {\n        // If odd, return the middle element\n        return arr[n / 2];\n    } else {\n        // If even, return the average of the two middle elements\n        size_t mid1 = n / 2 - 1;\n        size_t mid2 = n / 2;\n        return (arr[mid1] + arr[mid2]) / 2.0;\n    }\n}\n\nint main() {\n    std::vector<int> arr = {3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5};\n    try {\n        double median = findMedian(arr);\n        std::cout << \"The median is: \" << median << std::endl;\n    } catch (const std::invalid_argument& e) {\n        std::cerr << e.what() << std::endl;\n    }\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Sorting the Array**:\n   - We use `std::sort` from the `<algorithm>` header to sort the array in ascending order.\n\n2. **Calculating the Median**:\n   - **Odd Number of Elements**: The median is the element at the index `n/2` where `n` is the number of elements.\n   - **Even Number of Elements**: The median is the average of the elements at indices `(n/2)-1` and `n/2`.\n\n3. **Handling Edge Cases**:\n   - If the array is empty, we throw an `std::invalid_argument` exception.\n\nThis approach ensures that the function works correctly for both odd and even numbers of elements and handles empty arrays gracefully."
    }
]