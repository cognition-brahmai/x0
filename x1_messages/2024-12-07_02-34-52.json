[
    {
        "role": "user",
        "content": "Write a Golang program to implement a singly linked list data structure with methods for insertion, deletion, and traversal.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an example of a Golang program that implements a singly linked list with methods for insertion, deletion, and traversal.\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Node represents a single node in the linked list\ntype Node struct {\n\tdata int\n\tnext *Node\n}\n\n// SinglyLinkedList represents the linked list\ntype SinglyLinkedList struct {\n\thead *Node\n\tsize int\n}\n\n// NewSinglyLinkedList creates a new instance of SinglyLinkedList\nfunc NewSinglyLinkedList() *SinglyLinkedList {\n\treturn &SinglyLinkedList{nil, 0}\n}\n\n// Insert adds a new node with the given data at the end of the list\nfunc (s *SinglyLinkedList) Insert(data int) {\n\tnewNode := &Node{data, nil}\n\tif s.head == nil {\n\t\ts.head = newNode\n\t} else {\n\t\tcurrent := s.head\n\t\tfor current.next != nil {\n\t\t\tcurrent = current.next\n\t\t}\n\t\tcurrent.next = newNode\n\t}\n\ts.size++\n}\n\n// Delete removes the first occurrence of a node with the given data\nfunc (s *SinglyLinkedList) Delete(data int) {\n\tif s.head == nil {\n\t\treturn\n\t}\n\tif s.head.data == data {\n\t\ts.head = s.head.next\n\t\ts.size--\n\t\treturn\n\t}\n\tcurrent := s.head\n\tfor current.next != nil {\n\t\tif current.next.data == data {\n\t\t\tcurrent.next = current.next.next\n\t\t\ts.size--\n\t\t\treturn\n\t\t}\n\t\tcurrent = current.next\n\t}\n}\n\n// Traverse prints all the elements in the linked list\nfunc (s *SinglyLinkedList) Traverse() {\n\tcurrent := s.head\n\tfor current != nil {\n\t\tfmt.Printf(\"%d \", current.data)\n\t\tcurrent = current.next\n\t}\n\tfmt.Println()\n}\n\n// Size returns the number of elements in the linked list\nfunc (s *SinglyLinkedList) Size() int {\n\treturn s.size\n}\n\nfunc main() {\n\tlist := NewSinglyLinkedList()\n\tlist.Insert(1)\n\tlist.Insert(2)\n\tlist.Insert(3)\n\tlist.Traverse() // Output: 1 2 3\n\n\tlist.Delete(2)\n\tlist.Traverse() // Output: 1 3\n\n\tlist.Delete(1)\n\tlist.Traverse() // Output: 3\n\n\tlist.Delete(3)\n\tlist.Traverse() // Output: (empty)\n\n\tlist.Insert(4)\n\tlist.Traverse() // Output: 4\n}\n```\n\n### Explanation:\n\n1. **Node Structure**:\n   - Each node contains an integer `data` and a pointer to the next node in the list.\n\n2. **SinglyLinkedList Structure**:\n   - Contains a pointer to the head node and an integer to keep track of the list's size.\n\n3. **NewSinglyLinkedList Function**:\n   - Initializes a new linked list with `head` set to `nil` and `size` set to `0`.\n\n4. **Insert Method**:\n   - Adds a new node with the given data at the end of the list.\n   - If the list is empty, the new node becomes the head.\n   - Otherwise, traverses to the end of the list and appends the new node.\n\n5. **Delete Method**:\n   - Removes the first occurrence of a node with the specified data.\n   - If the head node contains the data, it updates the head to the next node.\n   - Otherwise, traverses the list to find the node preceding the one to be deleted and updates the pointers accordingly.\n\n6. **Traverse Method**:\n   - Prints all the elements in the linked list from head to tail.\n\n7. **Size Method**:\n   - Returns the number of elements in the linked list.\n\n8. **Main Function**:\n   - Demonstrates the usage of the linked list by inserting, deleting, and traversing elements."
    }
]