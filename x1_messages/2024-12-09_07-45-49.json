[
    {
        "role": "user",
        "content": "Develop a JavaScript function that takes an array of integers as input and returns an object containing the minimum, maximum, average, and median values of the array. Ensure proper error handling for non-integer inputs and empty arrays."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, you need a JavaScript function that takes an array of integers and returns an object with the minimum, maximum, average, and median values. Also, it should handle errors for non-integer inputs and empty arrays.\n\nFirst, let's think about how to structure this function. We'll need to:\n\n1. Check if the input is an array and if it's not empty.\n2. Verify that all elements in the array are integers.\n3. Calculate the minimum and maximum values.\n4. Calculate the average.\n5. Calculate the median.\n\nLet's tackle each step one by one.\n\n**Step 1: Check if the input is an array and not empty.**\n\nWe can use `Array.isArray()` to check if the input is an array. If it's not, we should throw an error. Also, if the array is empty, we should handle that case separately.\n\n**Step 2: Verify that all elements are integers.**\n\nWe'll need to iterate through the array and check if each element is an integer. We can use the `Number.isInteger()` method for this. If any element is not an integer, we should throw an error.\n\n**Step 3: Calculate the minimum and maximum values.**\n\nFor the minimum and maximum, we can use the `Math.min()` and `Math.max()` functions applied to the array. But since these functions don't accept arrays directly, we need to spread the array into these functions.\n\n**Step 4: Calculate the average.**\n\nTo find the average, we need to sum all the elements in the array and then divide by the number of elements. We can use the `reduce()` method to sum the elements.\n\n**Step 5: Calculate the median.**\n\nThe median is the middle value in an ordered list of numbers. If the array has an even number of elements, the median is the average of the two middle numbers.\n\nSo, we'll need to sort the array first and then find the middle value(s).\n\nNow, let's think about how to organize this in code. We'll probably want to write helper functions for some of these calculations to keep the code clean and manageable.\n\nAlso, for error handling, we'll use try-catch blocks to catch any errors and provide meaningful error messages.\n\nLet me start drafting some pseudocode to outline the function.\n\n```\nfunction calculateStats(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array.\");\n  }\n  if (arr.length === 0) {\n    throw new Error(\"Array is empty.\");\n  }\n  \n  if (!arr.every(Number.isInteger)) {\n    throw new Error(\"All elements must be integers.\");\n  }\n  \n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  \n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const average = sum / arr.length;\n  \n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sortedArr.length / 2);\n  let median;\n  if (sortedArr.length % 2 === 0) {\n    median = (sortedArr[mid - 1] + sortedArr[mid]) / 2;\n  } else {\n    median = sortedArr[mid];\n  }\n  \n  return {\n    min: min,\n    max: max,\n    average: average,\n    median: median\n  };\n}\n```\n\nThis looks like a good starting point. Now, I need to test this function with different inputs to ensure it works correctly and handles errors properly.\n\nLet's think about some test cases:\n\n1. Normal array with integers: [1, 2, 3, 4, 5]\n   - Expected output: { min: 1, max: 5, average: 3, median: 3 }\n\n2. Array with negative integers: [-3, -1, -2]\n   - Expected output: { min: -3, max: -1, average: -2, median: -2 }\n\n3. Array with one element: [42]\n   - Expected output: { min: 42, max: 42, average: 42, median: 42 }\n\n4. Empty array: []\n   - Expected output: Error(\"Array is empty.\")\n\n5. Non-array input: \"not an array\"\n   - Expected output: Error(\"Input must be an array.\")\n\n6. Array with non-integer elements: [1, 2, \"3\", 4]\n   - Expected output: Error(\"All elements must be integers.\")\n\nI should also consider edge cases, like very large arrays or arrays with maximum and minimum integer values.\n\nNow, let's implement the function in code and test it with these cases.\n\n## Final Solution\nTo solve this problem, we need to create a JavaScript function that takes an array of integers and returns an object containing the minimum, maximum, average, and median values of the array. We also need to handle errors for non-integer inputs and empty arrays.\n\n### Approach\n1. **Input Validation:**\n   - Check if the input is an array using `Array.isArray()`.\n   - Check if the array is not empty.\n   - Ensure all elements in the array are integers using `Number.isInteger()`.\n\n2. **Calculations:**\n   - **Minimum and Maximum:** Use `Math.min()` and `Math.max()` on the array.\n   - **Average:** Sum the elements using `reduce()` and divide by the number of elements.\n   - **Median:** Sort the array and find the middle value(s). For even-length arrays, average the two middle numbers.\n\n3. **Error Handling:**\n   - Throw errors with descriptive messages for invalid inputs or empty arrays.\n\n### Solution Code\n\n```javascript\nfunction calculateStats(arr) {\n  if (!Array.isArray(arr)) {\n    throw new Error(\"Input must be an array.\");\n  }\n  if (arr.length === 0) {\n    throw new Error(\"Array is empty.\");\n  }\n  \n  if (!arr.every(Number.isInteger)) {\n    throw new Error(\"All elements must be integers.\");\n  }\n  \n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  \n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const average = sum / arr.length;\n  \n  const sortedArr = arr.slice().sort((a, b) => a - b);\n  const mid = Math.floor(sortedArr.length / 2);\n  let median;\n  if (sortedArr.length % 2 === 0) {\n    median = (sortedArr[mid - 1] + sortedArr[mid]) / 2;\n  } else {\n    median = sortedArr[mid];\n  }\n  \n  return {\n    min: min,\n    max: max,\n    average: average,\n    median: median\n  };\n}\n\n// Example usage:\ntry {\n  const stats = calculateStats([1, 2, 3, 4, 5]);\n  console.log(stats);\n} catch (e) {\n  console.error(e.message);\n}\n```\n\n### Explanation\n1. **Input Validation:**\n   - We first check if the input is an array and throw an error if it is not.\n   - We then check if the array is empty and throw an error if it is.\n   - We ensure all elements are integers and throw an error if any element is not an integer.\n\n2. **Calculating Statistics:**\n   - **Minimum and Maximum:** We use the spread operator to pass the array elements to `Math.min()` and `Math.max()`.\n   - **Average:** We sum the array elements using `reduce()` and divide by the length of the array.\n   - **Median:** We sort the array in ascending order and find the middle value. If the array has an even number of elements, we take the average of the two middle numbers.\n\n3. **Error Handling:**\n   - We use `try...catch` blocks to handle and catch errors, providing clear error messages for invalid inputs.\n\nThis approach ensures that the function is robust, handling various edge cases and providing meaningful feedback in case of errors."
    }
]