[
    {
        "role": "user",
        "content": "Write a Python script that uses Elasticsearch to index and search documents containing information about movies (title, director, release year, genre).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'd be happy to help you with that! Elasticsearch is a powerful search and analytics engine that allows you to store, search, and analyze large volumes of data quickly. In this case, we'll use it to index and search documents containing information about movies.\n\nFirst, make sure you have Elasticsearch installed and running on your machine. You can download it from the official Elasticsearch website. Once installed, you can interact with Elasticsearch using the Elasticsearch Python client. To install the client, use pip:\n\n```bash\npip install elasticsearch\n```\n\nNow, let's write a Python script that connects to Elasticsearch, indexes movie documents, and performs searches based on different criteria.\n\nHere's a step-by-step guide:\n\n1. **Connect to Elasticsearch:**\n   We need to create an Elasticsearch client instance to connect to our local Elasticsearch instance.\n\n2. **Index Movie Documents:**\n   Define a list of movie documents, each containing fields like title, director, release year, and genre. Then, index these documents into Elasticsearch.\n\n3. **Search Movie Documents:**\n   Implement search functionality to allow users to search for movies based on different criteria such as title, director, release year, or genre.\n\nHere's a sample Python script that demonstrates these steps:\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Step 1: Connect to Elasticsearch\nes = Elasticsearch([{'host': 'localhost', 'port': 9200}])\n\n# Check if connected\nif not es.ping():\n    print(\"Elasticsearch is not running!\")\n    exit()\n\n# Step 2: Index Movie Documents\nmovies = [\n    {\n        \"title\": \"The Shawshank Redemption\",\n        \"director\": \"Frank Darabont\",\n        \"release_year\": 1994,\n        \"genre\": \"Drama\"\n    },\n    {\n        \"title\": \"The Godfather\",\n        \"director\": \"Francis Ford Coppola\",\n        \"release_year\": 1972,\n        \"genre\": \"Crime\"\n    },\n    {\n        \"title\": \"Pulp Fiction\",\n        \"director\": \"Quentin Tarantino\",\n        \"release_year\": 1994,\n        \"genre\": \"Crime\"\n    },\n    {\n        \"title\": \"The Matrix\",\n        \"director\": \"Lana Wachowski and Lilly Wachowski\",\n        \"release_year\": 1999,\n        \"genre\": \"Science Fiction\"\n    }\n]\n\n# Index movies\nindex_name = 'movies'\nif not es.indices.exists(index=index_name):\n    es.indices.create(index=index_name)\n\nfor idx, movie in enumerate(movies):\n    res = es.index(index=index_name, id=idx+1, body=movie)\n    print(f\"Indexed movie {movie['title']}: {res['result']}\")\n\n# Step 3: Search Movie Documents\ndef search_movies(query):\n    res = es.search(index=index_name, body=query)\n    return res['hits']['hits']\n\n# Example searches\nprint(\"\\nSearch by title containing 'Matrix':\")\nquery = {\n    \"query\": {\n        \"match\": {\n            \"title\": \"Matrix\"\n        }\n    }\n}\nprint(search_movies(query))\n\nprint(\"\\nSearch by director 'Quentin Tarantino':\")\nquery = {\n    \"query\": {\n        \"match\": {\n            \"director\": \"Quentin Tarantino\"\n        }\n    }\n}\nprint(search_movies(query))\n\nprint(\"\\nSearch by genre 'Crime':\")\nquery = {\n    \"query\": {\n        \"match\": {\n            \"genre\": \"Crime\"\n        }\n    }\n}\nprint(search_movies(query))\n\nprint(\"\\nSearch by release year 1994:\")\nquery = {\n    \"query\": {\n        \"match\": {\n            \"release_year\": 1994\n        }\n    }\n}\nprint(search_movies(query))\n```\n\n### Explanation:\n\n1. **Connecting to Elasticsearch:**\n   - We create an `Elasticsearch` client instance pointing to `localhost` on port `9200`.\n   - We check if the connection is successful using the `ping` method.\n\n2. **Indexing Movie Documents:**\n   - We define a list of movie dictionaries, each containing title, director, release year, and genre.\n   - We create an index named `'movies'` if it doesn't exist.\n   - We index each movie document into the `'movies'` index with a unique ID.\n\n3. **Searching Movie Documents:**\n   - We define a `search_movies` function that takes a search query and returns the search results.\n   - We perform example searches for movies containing \"Matrix\" in the title, directed by \"Quentin Tarantino\", of genre \"Crime\", and released in 1994.\n\nThis script provides a basic framework for indexing and searching movie documents using Elasticsearch in Python. You can expand upon this by adding more fields, implementing more complex queries, or integrating it into a larger application."
    }
]