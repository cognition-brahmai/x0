[
    {
        "role": "user",
        "content": "Write a Golang program that implements the bubble sort algorithm to sort an array of integers in ascending order.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple Golang program that implements the bubble sort algorithm to sort an array of integers in ascending order.\n\n```go\npackage main\n\nimport \"fmt\"\n\n// BubbleSort function to sort an array of integers in ascending order\nfunc BubbleSort(arr []int) {\n    n := len(arr)\n    for i := 0; i < n; i++ {\n        // Last i elements are already in place\n        for j := 0; j < n-i-1; j++ {\n            // Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1] {\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            }\n        }\n    }\n}\n\nfunc main() {\n    // Example array\n    arr := []int{64, 34, 25, 12, 22, 11, 90}\n    fmt.Println(\"Original array:\")\n    fmt.Println(arr)\n\n    // Sorting the array\n    BubbleSort(arr)\n    fmt.Println(\"Sorted array:\")\n    fmt.Println(arr)\n}\n```\n\n### Explanation:\n1. **BubbleSort Function**:\n   - It takes a slice of integers as input.\n   - It uses two nested loops to iterate through the slice.\n   - In each iteration, it compares adjacent elements and swaps them if they are in the wrong order.\n   - This process repeats until the entire slice is sorted.\n\n2. **Main Function**:\n   - An example array is defined and printed.\n   - The `BubbleSort` function is called to sort the array.\n   - The sorted array is then printed.\n\nTo run this program, save it to a file with a `.go` extension (e.g., `bubble_sort.go`) and execute it using the Go compiler:\n\n```sh\ngo run bubble_sort.go\n```\n\nThis will display the original and sorted arrays."
    }
]