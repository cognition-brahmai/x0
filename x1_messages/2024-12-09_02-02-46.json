[
    {
        "role": "user",
        "content": "Create a simple web server using Golang's net/http package that serves static files from a given directory and logs all incoming requests along with their HTTP method, path, and response status code."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a simple web server in Go that serves static files and logs incoming requests, we'll use the `net/http` package. Here's a step-by-step guide:\n\n1. **Set up your Go environment**: Make sure you have Go installed on your machine. You can download it from [https://golang.org/dl/](https://golang.org/dl/).\n\n2. **Create a new Go file**: Let's name it `main.go`.\n\n3. **Define the directory to serve static files**: Decide which directory contains the static files you want to serve. For this example, let's assume the directory is named `static`.\n\n4. **Implement the server**: We'll set up a file server to serve the static files and add a handler to log each request.\n\nHere's the complete code:\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"time\"\n)\n\nfunc main() {\n\t// Define the directory to serve static files\n\tstaticDir := http.FileServer(http.Dir(\"static\"))\n\n\t// Create a custom handler to log requests\n\thttp.Handle(\"/\", logRequests(staticDir))\n\n\t// Start the server on port 8080\n\tfmt.Println(\"Starting server at port 8080\")\n\tif err := http.ListenAndServe(\":8080\", nil); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n// logRequests is a middleware function that logs HTTP requests\nfunc logRequests(h http.Handler) http.Handler {\n\treturn http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\t// Start time\n\t\tstart := time.Now()\n\n\t\t// Create a response writer that logs the status code\n\t\tlrw := &logResponseWriter{w, http.StatusOK}\n\n\t\t// Serve the request\n\t\th.ServeHTTP(lrw, r)\n\n\t\t// Calculate duration\n\t\tduration := time.Since(start)\n\n\t\t// Log the request\n\t\tlog.Printf(\"%s %s %d %s\", r.Method, r.URL.Path, lrw.code, duration)\n\t})\n}\n\n// logResponseWriter is a custom response writer that captures the status code\ntype logResponseWriter struct {\n\thttp.ResponseWriter\n\tcode int\n}\n\nfunc (lrw *logResponseWriter) WriteHeader(code int) {\n\tlrw.code = code\n\tlrw.ResponseWriter.WriteHeader(code)\n}\n```\n\n### Explanation:\n\n1. **Static File Serving**:\n   - `http.FileServer(http.Dir(\"static\"))` creates a handler that serves files from the `static` directory.\n\n2. **Request Logging**:\n   - `logRequests` is a middleware function that wraps the static file handler.\n   - It records the start time of the request.\n   - It uses a custom response writer `logResponseWriter` to capture the HTTP status code.\n   - After handling the request, it calculates the duration and logs the method, path, status code, and duration.\n\n3. **Custom Response Writer**:\n   - `logResponseWriter` intercepts the `WriteHeader` method to capture the HTTP status code.\n\n4. **Starting the Server**:\n   - `http.ListenAndServe(\":8080\", nil)` starts the server on port 8080.\n\n### Running the Server:\n\n1. **Prepare the static files**: Create a directory named `static` and add some files to it (e.g., `index.html`).\n\n2. **Run the server**:\n   ```sh\n   go run main.go\n   ```\n\n3. **Access the server**: Open a web browser and go to `http://localhost:8080/` to see your static files. The server will log each request in the console.\n\nThis setup provides a basic web server with request logging, suitable for development and small-scale applications."
    }
]