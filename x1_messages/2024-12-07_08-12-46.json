[
    {
        "role": "user",
        "content": "Design a SQL query for a MySQL database that retrieves the top 10 most frequently ordered products from an e-commerce platform within the past month. Assume tables named \"orders\", \"order_items\", and \"products\". Include product name, total orders, and total revenue generated by each product in the result set."
    },
    {
        "role": "assistant",
        "content": "To design a SQL query that retrieves the top 10 most frequently ordered products from an e-commerce platform within the past month, we need to consider the relationships between the \"orders\", \"order_items\", and \"products\" tables. We'll assume the following structure for these tables:\n\n- **orders** table:\n  - order_id (Primary Key)\n  - order_date\n\n- **order_items** table:\n  - order_item_id (Primary Key)\n  - order_id (Foreign Key referencing orders.order_id)\n  - product_id (Foreign Key referencing products.product_id)\n  - quantity\n  - price\n\n- **products** table:\n  - product_id (Primary Key)\n  - product_name\n\nOur goal is to retrieve the product name, total orders, and total revenue generated by each product for the past month, and then rank them to get the top 10.\n\n### Approach\n\n1. **Filter Orders by Date**: Identify orders placed within the past month.\n2. **Join Tables**: Connect the \"orders\", \"order_items\", and \"products\" tables to access necessary fields.\n3. **Aggregate Data**: Calculate total orders and total revenue for each product.\n4. **Rank Products**: Select the top 10 products based on the frequency of orders.\n\n### Solution Query\n\n```sql\nSELECT\n    p.product_name,\n    COUNT(DISTINCT oi.order_item_id) AS total_orders,\n    SUM(oi.quantity * oi.price) AS total_revenue\nFROM\n    products p\nJOIN\n    order_items oi ON p.product_id = oi.product_id\nJOIN\n    orders o ON oi.order_id = o.order_id\nWHERE\n    o.order_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY\n    p.product_name\nORDER BY\n    total_orders DESC,\n    total_revenue DESC\nLIMIT 10;\n```\n\n### Explanation\n\n1. **Date Filtering**: The `WHERE` clause filters orders where `order_date` is within the past month using `DATE_SUB(CURDATE(), INTERVAL 1 MONTH)`.\n2. **Table Joins**:\n   - Join \"products\" and \"order_items\" on `product_id` to link products with their order items.\n   - Join \"order_items\" and \"orders\" on `order_id` to link order items with their respective orders.\n3. **Aggregation**:\n   - Use `COUNT(DISTINCT oi.order_item_id)` to count the number of unique order items (effectively the number of times a product was ordered).\n   - Use `SUM(oi.quantity * oi.price)` to calculate the total revenue generated by each product.\n4. **Grouping and Ordering**:\n   - Group results by `p.product_name`.\n   - Order the results first by `total_orders` in descending order, and then by `total_revenue` in descending order to break ties.\n   - Limit the output to the top 10 products.\n\nThis query efficiently retrieves and ranks the most frequently ordered products within the specified time frame, providing valuable insights into product popularity and revenue generation."
    }
]