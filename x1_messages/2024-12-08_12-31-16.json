[
    {
        "role": "user",
        "content": "Create a JavaScript function that takes an array of integers as input and returns an object containing the minimum, maximum, sum, and average of the elements in the array. Ensure proper error handling for non-integer inputs."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. Let's create a JavaScript function that takes an array of integers and returns an object with the minimum, maximum, sum, and average of those integers. We'll also include error handling to make sure all elements in the array are integers.\n\nFirst, we need to define the function. Let's call it `arrayStats`. It will take one parameter, which is the array of integers.\n\nNext, we need to check if the input is indeed an array and if all elements in the array are integers. If not, we should throw an error.\n\nAssuming the input is valid, we'll calculate the minimum, maximum, sum, and average of the array elements.\n\nFinally, we'll return an object containing these values.\n\nLet's break it down step by step.\n\n### Step 1: Validate the Input\n\nFirst, we need to ensure that the input is an array. We can use the `Array.isArray()` method for this.\n\nThen, we need to check that every element in the array is an integer. We can use the `Number.isInteger()` method for this.\n\nIf the input is not an array or contains non-integer elements, we'll throw a TypeError with an appropriate message.\n\n### Step 2: Calculate Statistics\n\nOnce the input is validated, we can proceed to calculate the required statistics:\n\n- **Minimum:** Use the `Math.min()` function with the spread operator on the array.\n\n- **Maximum:** Use the `Math.max()` function with the spread operator on the array.\n\n- **Sum:** Use the `reduce()` method to sum up the elements.\n\n- **Average:** Calculate the sum and divide it by the number of elements in the array.\n\n### Step 3: Return the Object\n\nCreate an object containing the minimum, maximum, sum, and average, and return it.\n\n### Solution Code\n\n```javascript\nfunction arrayStats(arr) {\n  // Step 1: Validate input\n  if (!Array.isArray(arr)) {\n    throw new TypeError(\"Input must be an array.\");\n  }\n\n  if (!arr.every(Number.isInteger)) {\n    throw new TypeError(\"All elements in the array must be integers.\");\n  }\n\n  // Step 2: Calculate statistics\n  const min = Math.min(...arr);\n  const max = Math.max(...arr);\n  const sum = arr.reduce((acc, val) => acc + val, 0);\n  const avg = sum / arr.length;\n\n  // Step 3: Return the object\n  return {\n    minimum: min,\n    maximum: max,\n    sum: sum,\n    average: avg\n  };\n}\n\n// Example usage:\ntry {\n  const stats = arrayStats([1, 2, 3, 4, 5]);\n  console.log(stats);\n} catch (e) {\n  console.error(e.message);\n}\n```\n\n### Explanation\n\n1. **Input Validation:**\n   - Check if the input is an array using `Array.isArray(arr)`.\n   - Ensure all elements are integers using `arr.every(Number.isInteger)`.\n\n2. **Calculating Statistics:**\n   - Use `Math.min()` and `Math.max()` with the spread operator to find the minimum and maximum values.\n   - Use `Array.prototype.reduce()` to calculate the sum of the array elements.\n   - Calculate the average by dividing the sum by the number of elements.\n\n3. **Returning the Object:**\n   - Create an object with properties `minimum`, `maximum`, `sum`, and `average`, and return it.\n\nThis function is robust and handles errors gracefully by throwing informative exceptions when the input is invalid."
    }
]