[
    {
        "role": "user",
        "content": "Implement a C++ class representing a simple calculator capable of performing addition, subtraction, multiplication, and division operations on two integers. Include appropriate error handling for invalid inputs and division by zero. Write a main function that demonstrates the use of this class by accepting user input for two numbers and an operation, then displaying the result."
    },
    {
        "role": "assistant",
        "content": "Implementing a simple calculator in C++ involves creating a class that can handle basic arithmetic operations such as addition, subtraction, multiplication, and division. It's important to include error handling to manage invalid inputs and prevent division by zero errors. Below is a step-by-step guide to creating such a class and a main function to demonstrate its usage.\n\n### Step 1: Define the Calculator Class\n\nFirst, define a class named `SimpleCalculator` that will have methods for each arithmetic operation.\n\n```cpp\nclass SimpleCalculator {\npublic:\n    // Method to add two integers\n    int add(int a, int b) {\n        return a + b;\n    }\n\n    // Method to subtract two integers\n    int subtract(int a, int b) {\n        return a - b;\n    }\n\n    // Method to multiply two integers\n    int multiply(int a, b) {\n        return a * b;\n    }\n\n    // Method to divide two integers\n    // Returns -1 if division by zero is attempted\n    int divide(int a, int b) {\n        if (b == 0) {\n            std::cout << \"Error: Division by zero is not allowed.\" << std::endl;\n            return -1;\n        }\n        return a / b;\n    }\n};\n```\n\n### Step 2: Implement the Main Function\n\nThe main function will handle user input, create an instance of the `SimpleCalculator` class, perform the requested operation, and display the result.\n\n```cpp\n#include <iostream>\n#include <limits>\n\nint main() {\n    SimpleCalculator calc;\n    int num1, num2, result;\n    char operation;\n\n    std::cout << \"Simple Calculator\" << std::endl;\n    std::cout << \"Enter two integers and an operation (+, -, *, /):\" << std::endl;\n\n    while (true) {\n        try {\n            // Read the first integer\n            while (true) {\n                std::cout << \"Enter first integer: \";\n                if (!(std::cin >> num1)) {\n                    std::cout << \"Invalid input. Please enter an integer.\" << std::endl;\n                    std::cin.clear();\n                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n                } else {\n                    break;\n                }\n            }\n\n            // Read the operation\n            while (true) {\n                std::cout << \"Enter operation (+, -, *, /): \";\n                std::cin >> operation;\n                if (operation != '+' && operation != '-' && operation != '*' && operation != '/') {\n                    std::cout << \"Invalid operation. Please enter +, -, *, or /.\" << std::endl;\n                } else {\n                    break;\n                }\n            }\n\n            // Read the second integer\n            while (true) {\n                std::cout << \"Enter second integer: \";\n                if (!(std::cin >> num2)) {\n                    std::cout << \"Invalid input. Please enter an integer.\" << std::endl;\n                    std::cin.clear();\n                    std::cin.ignore(std::numeric_limits<std::streamsize>::max(), '\\n');\n                } else {\n                    break;\n                }\n            }\n\n            // Perform the operation\n            switch(operation) {\n                case '+':\n                    result = calc.add(num1, num2);\n                    break;\n                case '-':\n                    result = calc.subtract(num1, num2);\n                    break;\n                case '*':\n                    result = calc.multiply(num1, num2);\n                    break;\n                case '/':\n                    result = calc.divide(num1, num2);\n                    if (result == -1) {\n                        continue; // Skip displaying result and prompt again\n                    }\n                    break;\n                default:\n                    std::cout << \"Invalid operation.\" << std::endl;\n                    continue;\n            }\n\n            // Display the result\n            std::cout << \"Result: \" << num1 << \" \" << operation << \" \" << num2 << \" = \" << result << std::endl;\n\n            // Ask if the user wants to perform another calculation\n            char choice;\n            std::cout << \"Do you want to perform another calculation? (y/n): \";\n            std::cin >> choice;\n            if (choice != 'y' && choice != 'Y') {\n                break;\n            }\n        } catch (const std::exception& e) {\n            std::cout << \"An error occurred: \" << e.what() << std::endl;\n        }\n    }\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Calculator Class**: Contains methods for addition, subtraction, multiplication, and division. The division method checks for division by zero and handles it gracefully.\n\n2. **Main Function**:\n   - Prompts the user to enter two integers and an operation.\n   - Validates user input to ensure integers are entered and the operation is one of the allowed symbols.\n   - Uses a loop to allow multiple calculations until the user decides to exit.\n   - Handles invalid inputs and provides appropriate error messages.\n\nThis implementation ensures that the calculator is user-friendly and robust against common input errors."
    }
]