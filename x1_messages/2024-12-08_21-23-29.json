[
    {
        "role": "user",
        "content": "In C++, write a class representing a 3D vector with methods for addition, subtraction, dot product, cross product, magnitude, and normalization. Also include overloaded operators where appropriate. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, here's a simple implementation of a 3D vector class in C++ with the requested functionality:\n\n```cpp\n#include <iostream>\n#include <cmath>\n\nclass Vector3D {\npublic:\n    // Constructors\n    Vector3D() : x(0), y(0), z(0) {}\n    Vector3D(double x, double y, double z) : x(x), y(y), z(z) {}\n\n    // Copy constructor\n    Vector3D(const Vector3D& other) : x(other.x), y(other.y), z(other.z) {}\n\n    // Destructor\n    ~Vector3D() {}\n\n    // Assignment operator\n    Vector3D& operator=(const Vector3D& other) {\n        if (this != &other) {\n            x = other.x;\n            y = other.y;\n            z = other.z;\n        }\n        return *this;\n    }\n\n    // Addition\n    Vector3D operator+(const Vector3D& other) const {\n        return Vector3D(x + other.x, y + other.y, z + other.z);\n    }\n\n    // Subtraction\n    Vector3D operator-(const Vector3D& other) const {\n        return Vector3D(x - other.x, y - other.y, z - other.z);\n    }\n\n    // Dot product\n    double dot(const Vector3D& other) const {\n        return x * other.x + y * other.y + z * other.z;\n    }\n\n    // Cross product\n    Vector3D cross(const Vector3D& other) const {\n        return Vector3D(\n            y * other.z - z * other.y,\n            z * other.x - x * other.z,\n            x * other.y - y * other.x\n        );\n    }\n\n    // Magnitude\n    double magnitude() const {\n        return std::sqrt(x * x + y * y + z * z);\n    }\n\n    // Normalization\n    Vector3D normalized() const {\n        double mag = magnitude();\n        if (mag > 0) {\n            return Vector3D(x / mag, y / mag, z / mag);\n        } else {\n            return Vector3D(0, 0, 0);\n        }\n    }\n\n    // Overloaded stream insertion operator for easy printing\n    friend std::ostream& operator<<(std::ostream& os, const Vector3D& vec) {\n        os << \"(\" << vec.x << \", \" << vec.y << \", \" << vec.z << \")\";\n        return os;\n    }\n\nprivate:\n    double x, y, z;\n};\n\nint main() {\n    Vector3D v1(1, 2, 3);\n    Vector3D v2(4, 5, 6);\n\n    Vector3D sum = v1 + v2;\n    Vector3D diff = v1 - v2;\n    double dotProduct = v1.dot(v2);\n    Vector3D crossProduct = v1.cross(v2);\n    double mag = v1.magnitude();\n    Vector3D normalized = v1.normalized();\n\n    std::cout << \"v1: \" << v1 << std::endl;\n    std::cout << \"v2: \" << v2 << std::endl;\n    std::cout << \"Sum: \" << sum << std::endl;\n    std::cout << \"Difference: \" << diff << std::endl;\n    std::cout << \"Dot product: \" << dotProduct << std::endl;\n    std::cout << \"Cross product: \" << crossProduct << std::endl;\n    std::cout << \"Magnitude of v1: \" << mag << std::endl;\n    std::cout << \"Normalized v1: \" << normalized << std::endl;\n\n    return 0;\n}\n```\n\nThis code defines a `Vector3D` class with the specified methods and overloaded operators. The `main` function demonstrates how to use this class."
    }
]