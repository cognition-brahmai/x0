[
    {
        "role": "user",
        "content": "Develop a Golang web server that listens on port 8080 and serves static files from a specified directory. The server should also support an endpoint to upload new files to the directory and another endpoint to delete files by their filename.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your request. Let's get started on developing a Golang web server that meets your specifications.\n\nFirst, we need to set up a basic web server in Go that listens on port 8080 and serves static files from a specified directory. Then, we'll add endpoints to upload and delete files from that directory.\n\n### Step 1: Set Up the Basic Server\n\nWe'll use the `net/http` package to create the web server and serve static files.\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"flag\"\n)\n\nfunc main() {\n    // Define the directory to serve static files from\n    dir := flag.String(\"dir\", \"./static\", \"directory to serve files from\")\n    port := flag.Int(\"port\", 8080, \"port to listen on\")\n\n    flag.Parse()\n\n    // Serve static files\n    http.Handle(\"/\", http.FileServer(http.Dir(*dir)))\n\n    // Start the server\n    fmt.Printf(\"Server is running on port %d, serving %s\\n\", *port, *dir)\n    err := http.ListenAndServe(fmt.Sprintf(\":%d\", *port), nil)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n```\n\nIn this code:\n\n- We use the `flag` package to allow specifying the directory and port via command-line flags.\n\n- `http.FileServer` is used to serve static files from the specified directory.\n\n- `http.ListenAndServe` starts the server on the specified port.\n\n### Step 2: Add File Upload Endpoint\n\nNext, we need to add an endpoint to upload new files to the specified directory.\n\n```go\nimport (\n    \"io\"\n    \"net/http\"\n    \"path/filepath\"\n    \"strings\"\n)\n\n// Handle file uploads\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"POST\" {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    r.ParseMultipartForm(10 << 20) // Set max upload size to 10MB\n\n    file, handler, err := r.FormFile(\"file\")\n    if err != nil {\n        http.Error(w, \"Error retrieving file from form-data\", http.StatusBadRequest)\n        return\n    }\n    defer file.Close()\n\n    // Save the uploaded file to the specified directory\n    filePath := filepath.Join(*dir, handler.Filename)\n    out, err := os.Create(filePath)\n    if err != nil {\n        http.Error(w, \"Error creating file\", http.StatusInternalServerError)\n        return\n    }\n    defer out.Close()\n\n    _, err = io.Copy(out, file)\n    if err != nil {\n        http.Error(w, \"Error saving file\", http.StatusInternalServerError)\n        return\n    }\n\n    fmt.Fprintf(w, \"File %s uploaded successfully\\n\", handler.Filename)\n}\n\nfunc main() {\n    // ... (previous code)\n\n    http.HandleFunc(\"/upload\", uploadFile)\n\n    // ... (rest of the code)\n}\n```\n\nIn this code:\n\n- We define a handler function `uploadFile` to handle POST requests to `/upload`.\n\n- We parse the multipart form to retrieve the uploaded file.\n\n- We save the uploaded file to the specified directory.\n\n### Step 3: Add File Deletion Endpoint\n\nNow, we'll add an endpoint to delete files by their filename.\n\n```go\nimport (\n    \"net/http\"\n    \"os\"\n    \"strings\"\n)\n\n// Handle file deletions\nfunc deleteFile(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"DELETE\" {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    filename := strings.TrimPrefix(r.URL.Path, \"/delete/\")\n\n    if filename == \"\" {\n        http.Error(w, \"Filename not specified\", http.StatusBadRequest)\n        return\n    }\n\n    filePath := filepath.Join(*dir, filename)\n\n    err := os.Remove(filePath)\n    if err != nil {\n        if os.IsNotExist(err) {\n            http.Error(w, \"File not found\", http.StatusNotFound)\n        } else {\n            http.Error(w, \"Error deleting file\", http.StatusInternalServerError)\n        }\n        return\n    }\n\n    fmt.Fprintf(w, \"File %s deleted successfully\\n\", filename)\n}\n\nfunc main() {\n    // ... (previous code)\n\n    http.HandleFunc(\"/delete/\", deleteFile)\n\n    // ... (rest of the code)\n}\n```\n\nIn this code:\n\n- We define a handler function `deleteFile` to handle DELETE requests to `/delete/<filename>`.\n\n- We extract the filename from the URL path.\n\n- We attempt to delete the file from the specified directory.\n\n### Final Code\n\nCombining all parts, the final code looks like this:\n\n```go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n    \"os\"\n    \"path/filepath\"\n    \"strings\"\n    \"flag\"\n    \"io\"\n)\n\nvar dir *string\nvar port *int\n\nfunc main() {\n    dir = flag.String(\"dir\", \"./static\", \"directory to serve files from\")\n    port = flag.Int(\"port\", 8080, \"port to listen on\")\n    flag.Parse()\n\n    http.Handle(\"/\", http.FileServer(http.Dir(*dir)))\n    http.HandleFunc(\"/upload\", uploadFile)\n    http.HandleFunc(\"/delete/\", deleteFile)\n\n    fmt.Printf(\"Server is running on port %d, serving %s\\n\", *port, *dir)\n    err := http.ListenAndServe(fmt.Sprintf(\":%d\", *port), nil)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\nfunc uploadFile(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"POST\" {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    r.ParseMultipartForm(10 << 20) // Set max upload size to 10MB\n\n    file, handler, err := r.FormFile(\"file\")\n    if err != nil {\n        http.Error(w, \"Error retrieving file from form-data\", http.StatusBadRequest)\n        return\n    }\n    defer file.Close()\n\n    filePath := filepath.Join(*dir, handler.Filename)\n    out, err := os.Create(filePath)\n    if err != nil {\n        http.Error(w, \"Error creating file\", http.StatusInternalServerError)\n        return\n    }\n    defer out.Close()\n\n    _, err = io.Copy(out, file)\n    if err != nil {\n        http.Error(w, \"Error saving file\", http.StatusInternalServerError)\n        return\n    }\n\n    fmt.Fprintf(w, \"File %s uploaded successfully\\n\", handler.Filename)\n}\n\nfunc deleteFile(w http.ResponseWriter, r *http.Request) {\n    if r.Method != \"DELETE\" {\n        http.Error(w, \"Invalid request method\", http.StatusMethodNotAllowed)\n        return\n    }\n\n    filename := strings.TrimPrefix(r.URL.Path, \"/delete/\")\n\n    if filename == \"\" {\n        http.Error(w, \"Filename not specified\", http.StatusBadRequest)\n        return\n    }\n\n    filePath := filepath.Join(*dir, filename)\n\n    err := os.Remove(filePath)\n    if err != nil {\n        if os.IsNotExist(err) {\n            http.Error(w, \"File not found\", http.StatusNotFound)\n        } else {\n            http.Error(w, \"Error deleting file\", http.StatusInternalServerError)\n        }\n        return\n    }\n\n    fmt.Fprintf(w, \"File %s deleted successfully\\n\", filename)\n}\n```\n\n### Explanation\n\n1. **Static File Serving:** The server serves static files from the specified directory using `http.FileServer`.\n\n2. **File Upload:** The `/upload` endpoint accepts POST requests with a file in form-data and saves it to the specified directory.\n\n3. **File Deletion:** The `/delete/<filename>` endpoint accepts DELETE requests and removes the specified file from the directory.\n\nMake sure to handle errors appropriately and consider adding more features like authentication, validation, and logging for a production-ready server.\n\nI hope this helps! Let me know if you have any questions or need further assistance."
    }
]