[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with the Kubernetes API to create, update, and delete deployments within a specified namespace. The script should accept command-line arguments for specifying the deployment name, image, replicas, and action (create, update, or delete).\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Creating a Python script to interact with the Kubernetes API for managing deployments involves several steps. We'll use the `kubernetes` Python client library to handle interactions with the Kubernetes API. Below is a step-by-step guide to develop this script.\n\n### Prerequisites\n\n1. **Kubernetes Cluster**: Ensure you have a Kubernetes cluster up and running.\n2. **kubectl**: Install `kubectl` and configure it to connect to your cluster.\n3. **Python**: Ensure Python is installed on your machine.\n4. **kubernetes Client Library**: Install the Kubernetes Python client library using pip:\n   ```bash\n   pip install kubernetes\n   ```\n\n### Script Development\n\nWe'll create a script named `manage_deployment.py` that accepts command-line arguments for specifying the deployment name, image, replicas, and action.\n\n#### Step 1: Import Necessary Modules\n\n```python\nimport argparse\nfrom kubernetes import client, config\n```\n\n#### Step 2: Load Kubernetes Configuration\n\nLoad the in-cluster configuration if running inside a Kubernetes pod, or use the local kubeconfig file.\n\n```python\ndef load_kubernetes_config():\n    try:\n        config.load_incluster_config()\n    except config.config_exception.ConfigException:\n        config.load_kube_config()\n```\n\n#### Step 3: Create Deployment\n\nDefine a function to create a deployment.\n\n```python\ndef create_deployment(api_instance, namespace, deployment_name, image, replicas):\n    deployment = client.V1Deployment(\n        api_version=\"apps/v1\",\n        kind=\"Deployment\",\n        metadata=client.V1ObjectMeta(name=deployment_name),\n        spec=client.V1DeploymentSpec(\n            replicas=replicas,\n            selector=client.V1LabelSelector(\n                match_labels={\"app\": deployment_name}\n            ),\n            template=client.V1PodTemplateSpec(\n                metadata=client.V1ObjectMeta(labels={\"app\": deployment_name}),\n                spec=client.V1PodSpec(containers=[\n                    client.V1Container(\n                        name=deployment_name,\n                        image=image,\n                        ports=[client.V1ContainerPort(container_port=80)]\n                    )]\n                )\n            )\n        )\n    )\n    api_response = api_instance.create_namespaced_deployment(\n        body=deployment,\n        namespace=namespace\n    )\n    print(\"Deployment created. status='%s'\" % str(api_response.status))\n```\n\n#### Step 4: Update Deployment\n\nDefine a function to update a deployment.\n\n```python\ndef update_deployment(api_instance, namespace, deployment_name, image, replicas):\n    # First, get the existing deployment\n    deployment = api_instance.read_namespaced_deployment(name=deployment_name, namespace=namespace)\n    \n    # Update the image and replicas\n    deployment.spec.template.spec.containers[0].image = image\n    deployment.spec.replicas = replicas\n    \n    # Update the deployment\n    api_response = api_instance.replace_namespaced_deployment(\n        name=deployment_name,\n        namespace=namespace,\n        body=deployment\n    )\n    print(\"Deployment updated. status='%s'\" % str(api_response.status))\n```\n\n#### Step 5: Delete Deployment\n\nDefine a function to delete a deployment.\n\n```python\ndef delete_deployment(api_instance, namespace, deployment_name):\n    delete_options = client.V1DeleteOptions()\n    api_response = api_instance.delete_namespaced_deployment(\n        name=deployment_name,\n        namespace=namespace,\n        body=delete_options\n    )\n    print(\"Deployment deleted. status='%s'\" % str(api_response.status))\n```\n\n#### Step 6: Main Function\n\nDefine the main function to parse command-line arguments and perform actions based on user input.\n\n```python\ndef main():\n    parser = argparse.ArgumentParser(description='Manage Kubernetes deployments.')\n    parser.add_argument('--action', required=True, choices=['create', 'update', 'delete'], help='Action to perform on the deployment.')\n    parser.add_argument('--namespace', required=True, help='Namespace where the deployment is located.')\n    parser.add_argument('--name', required=True, help='Name of the deployment.')\n    parser.add_argument('--image', help='Docker image for the deployment.')\n    parser.add_argument('--replicas', type=int, help='Number of replicas for the deployment.')\n    \n    args = parser.parse_args()\n    \n    load_kubernetes_config()\n    api_instance = client.AppsV1Api()\n    \n    if args.action == 'create':\n        if not args.image or not args.replicas:\n            parser.error(\"create action requires --image and --replicas.\")\n        create_deployment(api_instance, args.namespace, args.name, args.image, args.replicas)\n    elif args.action == 'update':\n        if not args.image or not args.replicas:\n            parser.error(\"update action requires --image and --replicas.\")\n        update_deployment(api_instance, args.namespace, args.name, args.image, args.replicas)\n    elif args.action == 'delete':\n        delete_deployment(api_instance, args.namespace, args.name)\n    else:\n        parser.error(\"Invalid action specified.\")\n```\n\n#### Step 7: Run the Script\n\nSave the script and run it from the command line with the appropriate arguments. For example:\n\n- To create a deployment:\n  ```bash\n  python manage_deployment.py --action create --namespace default --name my-deployment --image nginx:latest --replicas 3\n  ```\n\n- To update a deployment:\n  ```bash\n  python manage_deployment.py --action update --namespace default --name my-deployment --image nginx:latest --replicas 5\n  ```\n\n- To delete a deployment:\n  ```bash\n  python manage_deployment.py --action delete --namespace default --name my-deployment\n  ```\n\n### Conclusion\n\nThis script provides a basic framework for managing Kubernetes deployments using Python. It handles creation, update, and deletion of deployments based on command-line arguments. You can extend this script to include more features, such as handling different types of resources or adding error handling for various scenarios."
    }
]