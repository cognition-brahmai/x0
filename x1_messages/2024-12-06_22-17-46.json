[
    {
        "role": "user",
        "content": "Develop a Node.js REST API using Express framework that supports CRUD operations for managing a list of books. Each book should have a title, author, publication date, and ISBN number. Implement endpoints to create, read, update, and delete books, as well as search for books by title or author."
    },
    {
        "role": "assistant",
        "content": "To develop a Node.js REST API using the Express framework for managing a list of books with CRUD operations, follow these steps:\n\n1. **Set up the project:**\n   - Initialize a new Node.js project.\n   - Install necessary dependencies: Express, body-parser, and possibly others depending on your requirements.\n\n2. **Define the Book model:**\n   - Each book should have properties like title, author, publication date, and ISBN number.\n   - You can use an in-memory array to store books for simplicity, or set up a database connection if preferred.\n\n3. **Implement CRUD operations:**\n   - **Create:** Endpoint to add a new book.\n   - **Read:** Endpoints to get all books and get a specific book by ISBN.\n   - **Update:** Endpoint to update a book's information by ISBN.\n   - **Delete:** Endpoint to delete a book by ISBN.\n\n4. **Implement search functionality:**\n   - Endpoints to search for books by title or author.\n\n5. **Set up routing using Express:**\n   - Define routes for each of the above operations.\n\n6. **Test the API:**\n   - Use tools like Postman or curl to test each endpoint.\n\n### Step-by-Step Guide\n\n#### 1. Set up the project\n\nFirst, create a new directory for your project and initialize a new Node.js application:\n\n```bash\nmkdir book-api\ncd book-api\nnpm init -y\n```\n\nInstall the required dependencies:\n\n```bash\nnpm install express body-parser\n```\n\n#### 2. Define the Book model\n\nFor simplicity, we'll use an in-memory array to store books. In a real-world scenario, you'd use a database.\n\nCreate a file `book.model.js`:\n\n```javascript\nclass Book {\n  constructor(title, author, publicationDate, isbn) {\n    this.title = title;\n    this.author = author;\n    this.publicationDate = publicationDate;\n    this.isbn = isbn;\n  }\n}\n\nconst books = [];\n\nmodule.exports = { Book, books };\n```\n\n#### 3. Implement CRUD operations\n\nCreate a file `book.controller.js`:\n\n```javascript\nconst { Book, books } = require('./book.model');\n\n// Create a new book\nfunction createBook(req, res) {\n  const { title, author, publicationDate, isbn } = req.body;\n  const newBook = new Book(title, author, publicationDate, isbn);\n  books.push(newBook);\n  res.status(201).json(newBook);\n}\n\n// Get all books\nfunction getAllBooks(req, res) {\n  res.json(books);\n}\n\n// Get a book by ISBN\nfunction getBookByISBN(req, res) {\n  const isbn = req.params.isbn;\n  const book = books.find(b => b.isbn === isbn);\n  if (book) {\n    res.json(book);\n  } else {\n    res.status(404).json({ message: 'Book not found' });\n  }\n}\n\n// Update a book by ISBN\nfunction updateBook(req, res) {\n  const isbn = req.params.isbn;\n  const index = books.findIndex(b => b.isbn === isbn);\n  if (index !== -1) {\n    books[index] = { ...books[index], ...req.body };\n    res.json(books[index]);\n  } else {\n    res.status(404).json({ message: 'Book not found' });\n  }\n}\n\n// Delete a book by ISBN\nfunction deleteBook(req, res) {\n  const isbn = req.params.isbn;\n  const index = books.findIndex(b => b.isbn === isbn);\n  if (index !== -1) {\n    const deletedBook = books.splice(index, 1)[0];\n    res.json(deletedBook);\n  } else {\n    res.status(404).json({ message: 'Book not found' });\n  }\n}\n\nmodule.exports = {\n  createBook,\n  getAllBooks,\n  getBookByISBN,\n  updateBook,\n  deleteBook\n};\n```\n\n#### 4. Implement search functionality\n\nAdd search functions to `book.controller.js`:\n\n```javascript\n// Search books by title\nfunction searchBooksByTitle(req, res) {\n  const title = req.query.title;\n  const results = books.filter(b => b.title.toLowerCase().includes(title.toLowerCase()));\n  res.json(results);\n}\n\n// Search books by author\nfunction searchBooksByAuthor(req, res) {\n  const author = req.query.author;\n  const results = books.filter(b => b.author.toLowerCase().includes(author.toLowerCase()));\n  res.json(results);\n}\n\nmodule.exports = {\n  // existing exports\n  searchBooksByTitle,\n  searchBooksByAuthor\n};\n```\n\n#### 5. Set up routing using Express\n\nCreate a file `app.js`:\n\n```javascript\nconst express = require('express');\nconst bodyParser = require('body-parser');\nconst { createBook, getAllBooks, getBookByISBN, updateBook, deleteBook, searchBooksByTitle, searchBooksByAuthor } = require('./book.controller');\n\nconst app = express();\napp.use(bodyParser.json());\n\n// Routes\napp.post('/books', createBook);\napp.get('/books', getAllBooks);\napp.get('/books/:isbn', getBookByISBN);\napp.put('/books/:isbn', updateBook);\napp.delete('/books/:isbn', deleteBook);\napp.get('/search/title', searchBooksByTitle);\napp.get('/search/author', searchBooksByAuthor);\n\nconst PORT = process.env.PORT || 3000;\napp.listen(PORT, () => {\n  console.log(`Server is running on port ${PORT}`);\n});\n```\n\n#### 6. Test the API\n\nYou can use tools like Postman or curl to test the API endpoints.\n\n- **Create a book:**\n  ```bash\n  curl -X POST http://localhost:3000/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"publicationDate\":\"2023-01-01\",\"isbn\":\"1234567890\"}'\n  ```\n\n- **Get all books:**\n  ```bash\n  curl http://localhost:3000/books\n  ```\n\n- **Get a book by ISBN:**\n  ```bash\n  curl http://localhost:3000/books/1234567890\n  ```\n\n- **Update a book by ISBN:**\n  ```bash\n  curl -X PUT http://localhost:3000/books/1234567890 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Title\"}'\n  ```\n\n- **Delete a book by ISBN:**\n  ```bash\n  curl -X DELETE http://localhost:3000/books/1234567890\n  ```\n\n- **Search books by title:**\n  ```bash\n  curl \"http://localhost:3000/search/title?title=Sample\"\n  ```\n\n- **Search books by author:**\n  ```bash\n  curl \"http://localhost:3000/search/author?author=Doe\"\n  ```\n\nThis setup provides a basic REST API for managing books with CRUD operations and search functionality. For a production environment, consider using a database to persist data and adding more robust error handling and validation."
    }
]