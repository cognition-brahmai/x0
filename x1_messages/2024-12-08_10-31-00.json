[
    {
        "role": "user",
        "content": "Solve the recurrence relation T(n) = 2T(n/2) + n with initial condition T(1) = 1."
    },
    {
        "role": "assistant",
        "content": "So I have this recurrence relation to solve: T(n) = 2T(n/2) + n, and the initial condition is T(1) = 1. I need to find a closed-form solution for T(n). I've heard of something called the Master Theorem that might help here, but I'm not entirely sure how to apply it. Let me try to recall what the Master Theorem is about.\n\nThe Master Theorem is used to solve recurrence relations of the form T(n) = aT(n/b) + f(n), where a >=1, b > 1, and f(n) is asymptotically positive. In this case, a = 2, b = 2, and f(n) = n. So, a = 2, b = 2, and f(n) = n.\n\nAccording to the Master Theorem, there are three cases to consider:\n\n1. If f(n) = O(n^c) where c < log_b(a), then T(n) = \u0398(n^{log_b(a)}).\n\n2. If f(n) = \u0398(n^{log_b(a)} * log^k(n)) for some k >= 0, then T(n) = \u0398(n^{log_b(a)} * log^{k+1}(n)).\n\n3. If f(n) = \u03a9(n^c) where c > log_b(a), and if a*f(n/b) <= k*f(n) for some constant k < 1 and sufficiently large n, then T(n) = \u0398(f(n)).\n\nLet me calculate log_b(a). Here, a = 2, b = 2, so log_2(2) = 1. So, log_b(a) = 1.\n\nNow, f(n) = n, which is n^1. So, c = 1.\n\nIn the first case, c needs to be less than log_b(a), but c = 1 and log_b(a) = 1, so c is not less than log_b(a). So, case 1 does not apply.\n\nIn the second case, f(n) needs to be \u0398(n^{log_b(a)} * log^k(n)). Here, n^{log_b(a)} = n^1 = n. So, f(n) = n is \u0398(n log^0(n)), which means k = 0. Therefore, T(n) = \u0398(n^{log_b(a)} * log^{0+1}(n)) = \u0398(n log n).\n\nWait, but I need to confirm if this is indeed the case. Let me see if f(n) is \u0398(n^{log_b(a)}), which it is, since f(n) = n and n^{log_b(a)} = n^1 = n. So, k = 0, and T(n) = \u0398(n log n).\n\nAlternatively, I can try to expand the recurrence to see if this makes sense.\n\nLet's expand T(n):\n\nT(n) = 2T(n/2) + n\n\n= 2(2T(n/4) + n/2) + n\n\n= 4T(n/4) + n + n\n\n= 4T(n/4) + 2n\n\nAgain:\n\n= 4(2T(n/8) + n/4) + 2n\n\n= 8T(n/8) + n + 2n\n\n= 8T(n/8) + 3n\n\nI see a pattern here. It seems that after k levels, T(n) = 2^k T(n / 2^k) + k*n.\n\nI want to stop when n / 2^k = 1, which means 2^k = n, so k = log_2(n).\n\nTherefore, T(n) = n T(1) + log_2(n) * n\n\nGiven that T(1) = 1, this becomes T(n) = n * 1 + n log_2(n) = n + n log_2(n).\n\nSo, T(n) = n log_2(n) + n = n (log_2(n) + 1).\n\nIn big Theta notation, this is \u0398(n log n), since n log n dominates n.\n\nWait, but earlier I thought it was \u0398(n log n), but now I have T(n) = n log_2(n) + n.\n\nBut in big Theta notation, \u0398(n log n) includes both terms because n is lower order compared to n log n.\n\nHowever, to be precise, it's \u0398(n log n).\n\nBut I should note that in some texts, they might write it as \u0398(n log n), considering log n dominates log^k n for k > 0.\n\nAlternatively, maybe I can use substitution method to verify this.\n\nAssume T(n) = O(n log n).\n\nLet's say T(n) <= c n log_2(n) for some constant c > 0 and n >= n0.\n\nThen, T(n) = 2T(n/2) + n\n\n<= 2 * c (n/2) log_2(n/2) + n\n\n= 2 * c (n/2) (log_2(n) - 1) + n\n\n= c n (log_2(n) - 1) + n\n\n= c n log_2(n) - c n + n\n\n= c n log_2(n) + n (1 - c)\n\nIf I choose c >= 1, then 1 - c <= 0, so n (1 - c) <= 0.\n\nTherefore, T(n) <= c n log_2(n), which confirms that T(n) is O(n log n).\n\nSimilarly, to show T(n) is \u03a9(n log n), I can assume T(n) >= c n log_2(n) for some c > 0.\n\nThen, T(n) = 2T(n/2) + n\n\n>= 2 * c (n/2) log_2(n/2) + n\n\n= c n (log_2(n) - 1) + n\n\n= c n log_2(n) - c n + n\n\n= c n log_2(n) + n (1 - c)\n\nIf I choose c <= 1, then 1 - c >= 0, so n (1 - c) >= 0.\n\nTherefore, T(n) >= c n log_2(n), which shows T(n) is \u03a9(n log n).\n\nSince T(n) is O(n log n) and \u03a9(n log n), it is \u0398(n log n).\n\nAlternatively, I can solve the recurrence exactly.\n\nAssume n is a power of 2, n = 2^k.\n\nThen, T(2^k) = 2 T(2^{k-1}) + 2^k.\n\nLet me define S(k) = T(2^k), so S(k) = 2 S(k-1) + 2^k, with S(0) = T(1) = 1.\n\nThis is a linear nonhomogeneous recurrence relation.\n\nThe homogeneous solution is S_h(k) = a * 2^k.\n\nThe particular solution can be found by undetermined coefficients.\n\nAssume S_p(k) = b * 2^k.\n\nPlugging into the recurrence: b * 2^k = 2 * b * 2^{k-1} + 2^k\n\n= b * 2^k + 2^k\n\nSo, b * 2^k = b * 2^k + 2^k, which implies 0 = 2^k, which is not possible.\n\nTherefore, assume S_p(k) = b * k * 2^k.\n\nPlugging in: b k 2^k = 2 * b (k-1) 2^{k-1} + 2^k\n\n= b (k-1) 2^k + 2^k\n\nSo, b k 2^k = b (k-1) 2^k + 2^k\n\nDivide both sides by 2^k: b k = b (k-1) + 1\n\n= b k - b + 1\n\nSo, b k = b k - b + 1\n\nSubtract b k from both sides: 0 = -b + 1 => b = 1\n\nTherefore, S_p(k) = k * 2^k\n\nThe general solution is S(k) = S_h(k) + S_p(k) = a * 2^k + k * 2^k\n\nUsing the initial condition S(0) = 1:\n\n1 = a * 1 + 0 * 1 => a = 1\n\nTherefore, S(k) = (1 + k) * 2^k\n\nRecall that S(k) = T(2^k), and n = 2^k, so k = log_2(n)\n\nTherefore, T(n) = (1 + log_2(n)) * n = n + n log_2(n)\n\nSo, T(n) = n log_2(n) + n\n\nTherefore, the closed-form solution is T(n) = n log_2(n) + n.\n\nIn big Theta notation, this is \u0398(n log n).\n\nAlternatively, sometimes people write it as T(n) = \u0398(n log n).\n\nBut the exact solution is T(n) = n log_2(n) + n.\n\nWait, but I should check if this matches the original recurrence.\n\nLet's test for n = 1:\n\nT(1) = 1 log_2(1) + 1 = 0 + 1 = 1, which matches the initial condition.\n\nFor n = 2:\n\nT(2) = 2T(1) + 2 = 2*1 + 2 = 4\n\nUsing the formula: T(2) = 2 log_2(2) + 2 = 2*1 + 2 = 4, which matches.\n\nFor n = 4:\n\nT(4) = 2T(2) + 4 = 2*4 + 4 = 12\n\nUsing the formula: T(4) = 4 log_2(4) + 4 = 4*2 + 4 = 12, which matches.\n\nFor n = 8:\n\nT(8) = 2T(4) + 8 = 2*12 + 8 = 32\n\nUsing the formula: T(8) = 8 log_2(8) + 8 = 8*3 + 8 = 32, which matches.\n\nSo, the formula seems correct.\n\nTherefore, the solution to the recurrence relation T(n) = 2T(n/2) + n with T(1) = 1 is T(n) = n log_2(n) + n.\n\nIn some contexts, people might write log n assuming it's base 2, but to be precise, it's log_2(n).\n\nAlternatively, in big O notation, since log n in different bases differ by a constant factor, \u0398(n log n) is used regardless of the base.\n\nBut since the problem likely expects the exact solution, I'll go with T(n) = n log_2(n) + n.\n\n**Final Answer**\n\n\\[ \\boxed{T(n) = n \\log_2 n + n} \\]"
    }
]