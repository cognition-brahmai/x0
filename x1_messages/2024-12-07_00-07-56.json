[
    {
        "role": "user",
        "content": "Using Python, create a function that accepts an integer and returns its factorial."
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a function in Python that calculates the factorial of an integer, we can use a simple iterative approach. The factorial of a non-negative integer n is the product of all positive integers less than or equal to n. It's denoted by n!.\n\nFor example:\n- 5! = 5 \u00d7 4 \u00d7 3 \u00d7 2 \u00d7 1 = 120\n- 0! = 1 (by definition)\n\nHere's how you can implement this:\n\n```python\ndef factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        result = 1\n        for i in range(1, n + 1):\n            result *= i\n        return result\n```\n\n### Explanation:\n1. **Check for Negative Numbers:** Factorial is not defined for negative numbers, so we return an appropriate message.\n2. **Factorial of Zero:** By definition, 0! is 1.\n3. **Calculate Factorial Iteratively:** For positive integers, we use a loop to calculate the product of all integers from 1 to n.\n\nYou can test this function with different values to verify its correctness. For example:\n\n```python\nprint(factorial(5))  # Output: 120\nprint(factorial(0))  # Output: 1\nprint(factorial(-1)) # Output: Factorial is not defined for negative numbers\n```\n\nThis function is efficient for small to moderately large integers. For very large numbers, you might need to consider more efficient algorithms or handle large integer types appropriately."
    }
]