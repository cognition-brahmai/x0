[
    {
        "role": "user",
        "content": "Create a Python class for a stack data structure with methods for push, pop, peek, and checking if the stack is empty.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in Python with the requested methods:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n```\n\n### Explanation:\n1. **`__init__`**: Initializes an empty list to store the stack's items.\n2. **`push(item)`**: Adds an item to the top of the stack.\n3. **`pop()`**: Removes and returns the top item from the stack. Raises an `IndexError` if the stack is empty.\n4. **`peek()`**: Returns the top item without removing it. Raises an `IndexError` if the stack is empty.\n5. **`is_empty()`**: Returns `True` if the stack is empty, otherwise `False`.\n\nYou can use this class to create and manipulate stack objects in your Python programs."
    }
]