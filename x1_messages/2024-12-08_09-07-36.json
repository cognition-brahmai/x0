[
    {
        "role": "user",
        "content": "Create a Python program that implements a stack data structure with push, pop, and peek operations, along with an isEmpty method to check if the stack is empty."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a simple implementation of a stack data structure in Python, including the `push`, `pop`, `peek`, and `isEmpty` methods.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    print(stack.is_empty())  # Output: True\n\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n\n    print(stack.peek())     # Output: 3\n    print(stack.pop())      # Output: 3\n    print(stack.peek())     # Output: 2\n    print(stack.is_empty()) # Output: False\n```\n\n### Explanation:\n1. **Initialization (`__init__`)**: \n   - Creates an empty list to store the stack elements.\n\n2. **Push Operation (`push`)**:\n   - Adds an item to the top of the stack using the `append` method.\n\n3. **Pop Operation (`pop`)**:\n   - Removes and returns the top item from the stack using the `pop` method.\n   - Checks if the stack is empty before popping to avoid errors.\n\n4. **Peek Operation (`peek`)**:\n   - Returns the top item without removing it.\n   - Checks if the stack is empty before peeking to avoid errors.\n\n5. **IsEmpty Method (`is_empty`)**:\n   - Returns `True` if the stack is empty, otherwise `False`.\n\nThis implementation ensures that the stack operations are performed efficiently, with `push`, `pop`, and `peek` operations running in O(1) time complexity."
    }
]