[
    {
        "role": "user",
        "content": "Design a Python Flask API with two endpoints: one to accept JSON data containing information about books (title, author, publication year) and store it in a MariaDB database, and another endpoint to retrieve all book records sorted by publication year.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a Python Flask API with two endpoints as per your request. One endpoint will accept JSON data containing book information (title, author, publication year) and store it in a MariaDB database. The other endpoint will retrieve all book records sorted by publication year.\n\nFirst, I need to set up a Flask application. I'll start by installing Flask and the necessary database connector for MariaDB. Assuming I have Python and pip installed, I can install Flask and MariaDB connector using pip:\n\n```bash\npip install Flask flask_mysqldb\n```\n\nNow, I'll create a new Python file, let's say `app.py`, and start setting up the Flask app and the database connection.\n\nI need to configure the database connection in Flask. For that, I'll use the `MySQL` class from `FlaskMySQLdb`. I'll need to provide the database host, user, password, and database name.\n\nHere's a basic structure of the Flask app with database configuration:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_mysqldb import MySQL\n\napp = Flask(__name__)\n\n# Database configuration\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'your_username'\napp.config['MYSQL_PASSWORD'] = 'your_password'\napp.config['MYSQL_DB'] = 'books_db'\n\nmysql = MySQL(app)\n\n# Create the books table\n@app.before_first_request\ndef create_table():\n    cur = mysql.connection.cursor()\n    cur.execute('''\n        CREATE TABLE IF NOT EXISTS books (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            title VARCHAR(100),\n            author VARCHAR(100),\n            publication_year INT\n        )\n    ''')\n    mysql.connection.commit()\n    cur.close()\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nIn this code, I'm setting up the Flask app and configuring the MySQL database connection. I'm also creating a `books` table if it doesn't exist, with columns for id, title, author, and publication year.\n\nNext, I need to create the first endpoint to accept JSON data containing book information and store it in the database.\n\nLet's define a route, say `/add_book`, which accepts POST requests. It will expect a JSON payload with keys `title`, `author`, and `publication_year`. I'll extract these values and insert them into the `books` table.\n\nHere's how I can implement that:\n\n```python\n@app.route('/add_book', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    title = data.get('title')\n    author = data.get('author')\n    publication_year = data.get('publication_year')\n\n    if not title or not author or not publication_year:\n        return jsonify({'message': 'All fields are required'}), 400\n\n    cur = mysql.connection.cursor()\n    cur.execute(\"INSERT INTO books (title, author, publication_year) VALUES (%s, %s, %s)\", (title, author, publication_year))\n    mysql.connection.commit()\n    cur.close()\n\n    return jsonify({'message': 'Book added successfully'}), 201\n```\n\nIn this endpoint, I'm retrieving the JSON data from the request, extracting the title, author, and publication year, checking if all fields are provided, and then inserting the data into the database. If successful, I'm returning a JSON response with a success message and a 201 status code.\n\nNow, for the second endpoint, which retrieves all book records sorted by publication year. I'll create another route, say `/get_books`, which accepts GET requests. It will fetch all records from the `books` table, sort them by `publication_year`, and return them as a JSON list.\n\nHere's how I can implement that:\n\n```python\n@app.route('/get_books', methods=['GET'])\ndef get_books():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT id, title, author, publication_year FROM books ORDER BY publication_year\")\n    rows = cur.fetchall()\n    cur.close()\n\n    books = []\n    for row in rows:\n        book = {\n            'id': row[0],\n            'title': row[1],\n            'author': row[2],\n            'publication_year': row[3]\n        }\n        books.append(book)\n\n    return jsonify(books), 200\n```\n\nIn this endpoint, I'm executing a SELECT query to fetch all books sorted by publication year, converting the results into a list of dictionaries, and returning that list as a JSON response with a 200 OK status code.\n\nThat's the basic implementation. However, for a more robust application, I should consider adding error handling, validating the input data more thoroughly, and possibly handling different HTTP methods or adding more endpoints for updating or deleting books.\n\nAlso, in a production environment, I would avoid hardcoding the database credentials and instead use environment variables to store sensitive information.\n\nAdditionally, I should ensure that the MariaDB server is running and accessible, and that the specified database exists.\n\nTo run this application, I would execute the `app.py` script, and the Flask development server would start, listening on the default port 5000.\n\nI can then use tools like Postman or curl to test the endpoints.\n\nFor example, to add a book, I can send a POST request to `http://localhost:5000/add_book` with a JSON payload like:\n\n```json\n{\n    \"title\": \"Sample Book\",\n    \"author\": \"John Doe\",\n    \"publication_year\": 2020\n}\n```\n\nAnd to retrieve all books, I can send a GET request to `http://localhost:5000/get_books`.\n\nThis should give me a JSON list of all books sorted by publication year.\n\nI hope this meets your requirements. Let me know if you need any further modifications or additions to this API.\n\n**Final Solution**\n\nTo create a Python Flask API with two endpoints\u2014one for accepting JSON data about books and storing them in a MariaDB database, and another for retrieving all book records sorted by publication year\u2014follow these steps.\n\n### Prerequisites\n\n- Install Flask and MariaDB connector:\n\n  ```bash\n  pip install Flask flask_mysqldb\n  ```\n\n- Ensure MariaDB is installed and running.\n\n### Solution Code\n\n```python\nfrom flask import Flask, request, jsonify\nfrom flask_mysqldb import MySQL\n\napp = Flask(__name__)\n\n# Database configuration\napp.config['MYSQL_HOST'] = 'localhost'\napp.config['MYSQL_USER'] = 'your_username'\napp.config['MYSQL_PASSWORD'] = 'your_password'\napp.config['MYSQL_DB'] = 'books_db'\n\nmysql = MySQL(app)\n\n# Create the books table\n@app.before_first_request\ndef create_table():\n    cur = mysql.connection.cursor()\n    cur.execute('''\n        CREATE TABLE IF NOT EXISTS books (\n            id INT AUTO_INCREMENT PRIMARY KEY,\n            title VARCHAR(100),\n            author VARCHAR(100),\n            publication_year INT\n        )\n    ''')\n    mysql.connection.commit()\n    cur.close()\n\n@app.route('/add_book', methods=['POST'])\ndef add_book():\n    data = request.get_json()\n    title = data.get('title')\n    author = data.get('author')\n    publication_year = data.get('publication_year')\n\n    if not title or not author or not publication_year:\n        return jsonify({'message': 'All fields are required'}), 400\n\n    cur = mysql.connection.cursor()\n    cur.execute(\"INSERT INTO books (title, author, publication_year) VALUES (%s, %s, %s)\", (title, author, publication_year))\n    mysql.connection.commit()\n    cur.close()\n\n    return jsonify({'message': 'Book added successfully'}), 201\n\n@app.route('/get_books', methods=['GET'])\ndef get_books():\n    cur = mysql.connection.cursor()\n    cur.execute(\"SELECT id, title, author, publication_year FROM books ORDER BY publication_year\")\n    rows = cur.fetchall()\n    cur.close()\n\n    books = []\n    for row in rows:\n        book = {\n            'id': row[0],\n            'title': row[1],\n            'author': row[2],\n            'publication_year': row[3]\n        }\n        books.append(book)\n\n    return jsonify(books), 200\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation\n\n1. **Database Configuration**:\n   - Configure Flask to connect to the MariaDB database using credentials.\n\n2. **Table Creation**:\n   - Create a `books` table if it doesn't exist, with columns for id, title, author, and publication year.\n\n3. **Add Book Endpoint (`/add_book`)**:\n   - Accepts POST requests with JSON data containing book details.\n   - Inserts the book data into the database.\n\n4. **Get Books Endpoint (`/get_books`)**:\n   - Accepts GET requests.\n   - Retrieves all books from the database, sorted by publication year, and returns them as JSON.\n\nThis setup provides a basic API for managing a collection of books with the specified functionalities."
    }
]