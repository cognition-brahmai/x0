[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with an external REST API to fetch data about cryptocurrency prices, stores the data in a SQLite database, and generates a report with the highest and lowest prices over a specified time period."
    },
    {
        "role": "assistant",
        "content": "I'm excited to help you with this project! Let's break it down into manageable steps. First, we need to interact with a REST API to fetch cryptocurrency price data. Then, we'll store that data in a SQLite database. Finally, we'll generate a report that shows the highest and lowest prices over a specified time period.\n\n### Step 1: Choose a REST API for Cryptocurrency Prices\n\nThere are several APIs available that provide cryptocurrency price data, such as CoinMarketCap, CoinGecko, and others. For this example, I'll use the CoinGecko API because it's free and easy to use.\n\nFirst, you need to sign up for an API key if required, but CoinGecko allows a good amount of requests without an API key.\n\n### Step 2: Install Required Libraries\n\nWe'll need the `requests` library to make HTTP requests to the API and `sqlite3` to handle the database operations. The `sqlite3` library is part of Python's standard library, so you don't need to install it separately. However, you might need to install `requests` if you don't have it already.\n\nYou can install `requests` using pip:\n\n```bash\npip install requests\n```\n\n### Step 3: Fetch Data from the API\n\nWe'll write a function to fetch cryptocurrency data from the CoinGecko API. For this example, let's fetch the historical market data of Bitcoin over the last 30 days.\n\nHere's how you can do it:\n\n```python\nimport requests\n\ndef fetch_crypto_data(id=\"bitcoin\", vs_currency=\"usd\", days=\"30\"):\n    url = f\"https://api.coingecko.com/api/v3/coins/{id}/market_chart\"\n    params = {\n        \"vs_currency\": vs Currency,\n        \"days\": days\n    }\n    response = requests.get(url, params=params)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndata = fetch_crypto_data()\nprint(data)\n```\n\nThis function fetches the market chart data for Bitcoin in USD over the last 30 days.\n\n### Step 4: Store Data in SQLite Database\n\nNext, we need to store this data in a SQLite database. The data returned from the API is in JSON format, with timestamps and prices.\n\nLet's create a database and a table to store this data.\n\n```python\nimport sqlite3\n\ndef init_database():\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS prices (\n            timestamp INTEGER PRIMARY KEY,\n            price REAL NOT NULL\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\ndef store_data(data):\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    for entry in data['prices']:\n        timestamp = entry[0]\n        price = entry[1]\n        c.execute('INSERT OR IGNORE INTO prices (timestamp, price) VALUES (?, ?)', (timestamp, price))\n    conn.commit()\n    conn.close()\n\ninit_database()\nstore_data(data)\n```\n\nThis code initializes a database named `crypto_prices.db` and creates a table named `prices` if it doesn't exist. It then stores the fetched data into this table.\n\n### Step 5: Generate a Report\n\nFinally, we need to generate a report that shows the highest and lowest prices over a specified time period.\n\nWe'll write a function that queries the database for the specified time period and calculates the highest and lowest prices.\n\n```python\ndef generate_report(start_timestamp, end_timestamp):\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    c.execute('''\n        SELECT MAX(price), MIN(price)\n        FROM prices\n        WHERE timestamp >= ? AND timestamp <= ?\n    ''', (start_timestamp, end_timestamp))\n    result = c.fetchone()\n    conn.close()\n    return result\n\n# Example usage:\nimport time\n\n# Get the current time in milliseconds\ncurrent_time = int(time.time() * 1000)\n# Calculate the start time for the last 30 days\nstart_time = current_time - (30 * 24 * 60 * 60 * 1000)\n\nmax_price, min_price = generate_report(start_time, current_time)\nprint(f\"Highest price in the last 30 days: {max_price}\")\nprint(f\"Lowest price in the last 30 days: {min_price}\")\n```\n\nThis function takes a start and end timestamp in milliseconds and returns the maximum and minimum prices within that range.\n\n### Putting It All Together\n\nHere's the complete script:\n\n```python\nimport requests\nimport sqlite3\nimport time\n\ndef fetch_crypto_data(id=\"bitcoin\", vs_currency=\"usd\", days=\"30\"):\n    url = f\"https://api.coingecko.com/api/v3/coins/{id}/market_chart\"\n    params = {\n        \"vs_currency\": vs_currency,\n        \"days\": days\n    }\n    response = requests.get(url, params=params)\n    if response.status_code == 200:\n        return response.json()\n    else:\n        response.raise_for_status()\n\ndef init_database():\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    c.execute('''\n        CREATE TABLE IF NOT EXISTS prices (\n            timestamp INTEGER PRIMARY KEY,\n            price REAL NOT NULL\n        )\n    ''')\n    conn.commit()\n    conn.close()\n\ndef store_data(data):\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    for entry in data['prices']:\n        timestamp = entry[0]\n        price = entry[1]\n        c.execute('INSERT OR IGNORE INTO prices (timestamp, price) VALUES (?, ?)', (timestamp, price))\n    conn.commit()\n    conn.close()\n\ndef generate_report(start_timestamp, end_timestamp):\n    conn = sqlite3.connect('crypto_prices.db')\n    c = conn.cursor()\n    c.execute('''\n        SELECT MAX(price), MIN(price)\n        FROM prices\n        WHERE timestamp >= ? AND timestamp <= ?\n    ''', (start_timestamp, end_timestamp))\n    result = c.fetchone()\n    conn.close()\n    return result\n\nif __name__ == \"__main__\":\n    data = fetch_crypto_data()\n    init_database()\n    store_data(data)\n    \n    # Get the current time in milliseconds\n    current_time = int(time.time() * 1000)\n    # Calculate the start time for the last 30 days\n    start_time = current_time - (30 * 24 * 60 * 60 * 1000)\n    \n    max_price, min_price = generate_report(start_time, current_time)\n    print(f\"Highest price in the last 30 days: {max_price}\")\n    print(f\"Lowest price in the last 30 days: {min_price}\")\n```\n\nThis script fetches cryptocurrency price data from the CoinGecko API, stores it in a SQLite database, and generates a report showing the highest and lowest prices over the last 30 days.\n\n### Additional Considerations\n\n1. **Error Handling:** Implement more robust error handling for API requests and database operations.\n2. **Caching:** Consider caching the data to avoid redundant API calls.\n3. **User Input:** Allow users to specify the cryptocurrency, vs_currency, and time period.\n4. **Data Visualization:** Optionally, you can use libraries like Matplotlib to visualize the price data.\n\nI hope this helps you get started with your project! Let me know if you have any questions or need further assistance."
    }
]