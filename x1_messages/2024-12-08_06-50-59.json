[
    {
        "role": "user",
        "content": "Implement a simple stack data structure in C++ that supports push, pop, and peek operations. The stack should be dynamically resizable and handle integer values."
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a stack in C++ that is dynamically resizable and handles integer values is a great way to understand both data structures and dynamic memory management in C++. We'll create a class called `Stack` that will handle the push, pop, and peek operations efficiently.\n\n### Approach\n\n1. **Dynamic Resizing**: We'll use an array to store the elements of the stack. To handle dynamic resizing, we'll double the capacity of the array whenever it fills up and halve the capacity when it becomes too empty. This ensures that the operations remain efficient.\n\n2. **Push Operation**: Adds an element to the top of the stack. If the stack is full, we'll resize the array to make more space.\n\n3. **Pop Operation**: Removes the element from the top of the stack. If the stack becomes too empty after popping, we'll resize the array to save space.\n\n4. **Peek Operation**: Returns the element at the top of the stack without removing it.\n\n### Solution Code\n\n```cpp\n#include <iostream>\n\nclass Stack {\nprivate:\n    int* arr;\n    int capacity;\n    int top;\n    float threshold;\n\npublic:\n    Stack() {\n        capacity = 4; // Initial capacity\n        arr = new int[capacity];\n        top = -1;\n        threshold = 0.25; // Threshold for resizing\n    }\n\n    ~Stack() {\n        delete[] arr;\n    }\n\n    void push(int value) {\n        if (top + 1 == capacity) {\n            resize(capacity * 2);\n        }\n        arr[++top] = value;\n    }\n\n    int pop() {\n        if (top == -1) {\n            std::cerr << \"Stack is empty!\" << std::endl;\n            exit(1);\n        }\n        int value = arr[top--];\n        if (top + 1 < capacity * threshold && capacity > 4) {\n            resize(capacity / 2);\n        }\n        return value;\n    }\n\n    int peek() {\n        if (top == -1) {\n            std::cerr << \"Stack is empty!\" << std::endl;\n            exit(1);\n        }\n        return arr[top];\n    }\n\nprivate:\n    void resize(int new_capacity) {\n        int* new_arr = new int[new_capacity];\n        for (int i = 0; i <= top; i++) {\n            new_arr[i] = arr[i];\n        }\n        delete[] arr;\n        arr = new_arr;\n        capacity = new_capacity;\n    }\n};\n\nint main() {\n    Stack stack;\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    stack.push(4);\n    std::cout << \"Top element is: \" << stack.peek() << std::endl; // Output: 4\n    stack.pop();\n    std::cout << \"Top element is: \" << stack.peek() << std::endl; // Output: 3\n    stack.push(5);\n    std::cout << \"Top element is: \" << stack.peek() << std::endl; // Output: 5\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Initialization**: The stack starts with an initial capacity of 4. The `arr` pointer points to a dynamically allocated array of integers, and `top` is initialized to -1 indicating an empty stack.\n\n2. **Push Operation**: Before pushing a new element, we check if the stack is full (`top + 1 == capacity`). If it is, we double the capacity by calling `resize(capacity * 2)`.\n\n3. **Pop Operation**: We remove the element at the top of the stack and decrement the `top` index. If the stack becomes less than 25% full after popping and the capacity is greater than 4, we halve the capacity to free up memory.\n\n4. **Peek Operation**: We simply return the value at the top of the stack without modifying the stack.\n\n5. **Resizing**: The `resize` function creates a new array with the new capacity, copies the elements from the old array to the new one, deletes the old array, and updates the `arr` and `capacity` members.\n\nThis implementation ensures that the stack operations are efficient and that memory is used effectively by adjusting the array size dynamically based on the number of elements in the stack."
    }
]