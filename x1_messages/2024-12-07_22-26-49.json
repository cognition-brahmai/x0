[
    {
        "role": "user",
        "content": "Create a Python script that implements Dijkstra's shortest path algorithm for a given graph represented as an adjacency matrix. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a Python script that implements Dijkstra's shortest path algorithm for a graph represented as an adjacency matrix. This script finds the shortest path from a starting node to all other nodes in the graph.\n\n```python\nimport sys\n\ndef dijkstra(adj_matrix, start):\n    n = len(adj_matrix)\n    visited = [False] * n\n    distances = [sys.maxsize] * n\n    distances[start] = 0\n\n    for _ in range(n):\n        # Select the vertex with the minimum distance\n        min_distance = sys.maxsize\n        min_index = -1\n        for v in range(n):\n            if not visited[v] and distances[v] < min_distance:\n                min_distance = distances[v]\n                min_index = v\n\n        # Mark the selected vertex as visited\n        visited[min_index] = True\n\n        # Update distances of adjacent vertices\n        for v in range(n):\n            if adj_matrix[min_index][v] > 0 and not visited[v]:\n                new_distance = distances[min_index] + adj_matrix[min_index][v]\n                if new_distance < distances[v]:\n                    distances[v] = new_distance\n\n    return distances\n\n# Example usage:\nif __name__ == \"__main__\":\n    # Example adjacency matrix\n    adj_matrix = [\n        [0, 10, 20, 0, 0],\n        [10, 0, 5, 16, 1],\n        [20, 5, 0, 20, 2],\n        [0, 16, 20, 0, 5],\n        [0, 1, 2, 5, 0]\n    ]\n    start_node = 0\n    shortest_paths = dijkstra(adj_matrix, start_node)\n    print(\"Shortest distances from node\", start_node, \":\", shortest_paths)\n```\n\n### Explanation:\n1. **Initialization**:\n   - `visited`: Tracks visited nodes to avoid revisiting them.\n   - `distances`: Stores the shortest distances from the start node to each node, initialized to infinity except for the start node itself, which is set to 0.\n\n2. **Main Loop**:\n   - For each iteration, select the unvisited node with the smallest distance.\n   - Mark this node as visited.\n   - Update the distances of its adjacent unvisited nodes if a shorter path is found.\n\n3. **Example Usage**:\n   - An example adjacency matrix is provided, representing connections between nodes with their respective weights.\n   - The script calculates and prints the shortest distances from the start node (node 0) to all other nodes.\n\nThis implementation ensures that the shortest paths are found efficiently for graphs without negative weights."
    }
]