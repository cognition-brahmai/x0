[
    {
        "role": "user",
        "content": "Create a C++ class implementing a stack data structure using dynamic arrays, including methods for push, pop, top, and checking if the stack is empty."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an example of a C++ class that implements a stack data structure using dynamic arrays. This class includes methods for pushing elements onto the stack, popping elements off the stack, checking the top element of the stack, and checking if the stack is empty.\n\n```cpp\n#include <iostream>\n\nclass Stack {\nprivate:\n    int* arr; // Dynamic array to store stack elements\n    int capacity; // Maximum capacity of the stack\n    int topIndex; // Index of the top element\n\npublic:\n    // Constructor to initialize the stack with a given capacity\n    Stack(int cap) {\n        capacity = cap;\n        arr = new int[capacity];\n        topIndex = -1;\n    }\n\n    // Destructor to free allocated memory\n    ~Stack() {\n        delete[] arr;\n    }\n\n    // Method to add an element to the top of the stack\n    void push(int value) {\n        if (topIndex == capacity - 1) {\n            std::cout << \"Stack Overflow. Cannot push \" << value << \".\\n\";\n            return;\n        }\n        arr[++topIndex] = value;\n    }\n\n    // Method to remove the top element from the stack\n    void pop() {\n        if (topIndex == -1) {\n            std::cout << \"Stack Underflow. Cannot pop from an empty stack.\\n\";\n            return;\n        }\n        topIndex--;\n    }\n\n    // Method to get the top element of the stack\n    int top() {\n        if (topIndex == -1) {\n            std::cout << \"Stack is empty.\\n\";\n            return -1; // Assuming -1 as an error value\n        }\n        return arr[topIndex];\n    }\n\n    // Method to check if the stack is empty\n    bool isEmpty() {\n        return topIndex == -1;\n    }\n};\n\nint main() {\n    Stack stack(5); // Create a stack with capacity 5\n\n    stack.push(1);\n    stack.push(2);\n    stack.push(3);\n    stack.push(4);\n    stack.push(5);\n\n    stack.push(6); // Should cause stack overflow\n\n    std::cout << \"Top element is: \" << stack.top() << std::endl;\n\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop();\n    stack.pop(); // Should cause stack underflow\n\n    std::cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class Definition**:\n   - `Stack` class manages a dynamic array to store stack elements.\n   - `capacity` defines the maximum number of elements the stack can hold.\n   - `topIndex` keeps track of the top element's index in the array.\n\n2. **Constructor**:\n   - Initializes the stack with a given capacity.\n   - Allocates memory for the array.\n   - Sets `topIndex` to -1 indicating an empty stack.\n\n3. **Destructor**:\n   - Frees the allocated memory for the array.\n\n4. **push(int value)**:\n   - Adds an element to the top of the stack.\n   - Checks for stack overflow before pushing.\n\n5. **pop()**:\n   - Removes the top element from the stack.\n   - Checks for stack underflow before popping.\n\n6. **top()**:\n   - Returns the top element of the stack.\n   - Checks if the stack is empty before accessing the top element.\n\n7. **isEmpty()**:\n   - Returns true if the stack is empty, otherwise false.\n\n8. **main()**:\n   - Demonstrates the usage of the `Stack` class.\n   - Performs push and pop operations and checks the top element and stack emptiness.\n\nThis implementation ensures that the stack operations are performed efficiently with O(1) time complexity for push, pop, and top operations. The capacity is fixed upon creation, but you can extend this class to support dynamic resizing if needed."
    }
]