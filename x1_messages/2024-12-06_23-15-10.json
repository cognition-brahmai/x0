[
    {
        "role": "user",
        "content": "In Python, write a function that takes a number as a parameter and check the number is prime or not. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that. So, you need a Python function that checks whether a given number is prime or not. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself. For example, 2, 3, 5, 7, 11, and so on are prime numbers.\n\nTo create this function, we'll follow these steps:\n\n1. **Check if the number is less than 2**: If it is, then it's not prime.\n2. **Check for divisibility from 2 up to the square root of the number**: If the number is divisible by any number in this range, it's not prime.\n3. **If none of the above conditions are met**, the number is prime.\n\nWe'll also consider some optimizations to make the function efficient.\n\nLet's write the function step by step.\n\nFirst, we need to handle the case where the number is less than 2. Any number less than 2 is not prime.\n\nNext, for numbers greater than or equal to 2, we'll check if they have any divisors other than 1 and themselves. To do this efficiently, we'll iterate from 2 up to the square root of the number. If we find any divisor in this range, the number is not prime.\n\nWe'll use a loop to check for divisors. If no divisors are found, the number is prime.\n\nLet's consider an example to understand this better. Take the number 13.\n\n- 13 is greater than 2.\n- We check for divisors from 2 to the square root of 13 (which is approximately 3.605), so we check 2 and 3.\n- 13 is not divisible by 2 or 3, so it's prime.\n\nAnother example: 16.\n\n- 16 is greater than 2.\n- We check for divisors from 2 to the square root of 16 (which is 4).\n- 16 is divisible by 2, so it's not prime.\n\nNow, let's think about how to implement this in code.\n\nWe'll define a function, say, `is_prime`, that takes one parameter, `n`.\n\nInside the function:\n\n- If `n` is less than 2, return `False`.\n- Otherwise, loop from 2 to the square root of `n` (inclusive). We'll use the `math.sqrt` function to get the square root and `math.isqrt` for integer square root.\n- If `n` is divisible by any number in this range, return `False`.\n- If no divisors are found, return `True`.\n\nWe'll also handle the case where `n` is 2, which is the only even prime number.\n\nAdditionally, we can optimize the loop to check only odd numbers starting from 3 if `n` is odd, since even numbers (except 2) are not prime.\n\nBut to keep it simple, we'll check all numbers from 2 to the square root of `n`.\n\nLet's write the code accordingly.\n\n## Final Solution\nTo solve this problem, we need to determine whether a given number is a prime number. A prime number is a natural number greater than 1 that has no positive divisors other than 1 and itself.\n\n### Approach\n\n1. **Check if the number is less than 2**: If it is, then it's not prime.\n2. **Check for divisibility from 2 up to the square root of the number**: If the number is divisible by any number in this range, it's not prime.\n3. **If none of the above conditions are met**, the number is prime.\n\n### Solution Code\n\n```python\nimport math\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, math.isqrt(n) + 1):\n        if n % i == 0:\n            return False\n    return True\n```\n\n### Explanation\n\n1. **Handle numbers less than 2**: Directly return `False` since they are not prime.\n2. **Check divisibility up to the square root of `n`**:\n   - Use a for loop from 2 to `math.isqrt(n) + 1`.\n   - If `n` is divisible by any number in this range, return `False`.\n3. **If no divisors are found**: Return `True`, indicating the number is prime.\n\nThis approach ensures efficiency by only iterating up to the square root of `n`, which is optimal for checking primality."
    }
]