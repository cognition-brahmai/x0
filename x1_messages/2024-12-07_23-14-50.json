[
    {
        "role": "user",
        "content": "Write a Java program that reads a CSV file containing information about employees (name, age, department, and salary) and stores the data in an ArrayList of Employee objects. The Employee class should have appropriate constructors, getters, and setters. The program should then calculate the average salary for each department and display the results."
    },
    {
        "role": "assistant",
        "content": "**Employee.java**\n\n```java\npublic class Employee {\n    private String name;\n    private int age;\n    private String department;\n    private double salary;\n\n    public Employee(String name, int age, String department, double salary) {\n        this.name = name;\n        this.age = age;\n        this.department = department;\n        this.salary = salary;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getDepartment() {\n        return department;\n    }\n\n    public void setDepartment(String department) {\n        this.department = department;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n\n    public void setSalary(double salary) {\n        this.salary = salary;\n    }\n}\n```\n\n**DepartmentAverage.java**\n\n```java\nimport java.io.BufferedReader;\nimport java.io.FileReader;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class DepartmentAverage {\n    public static void main(String[] args) {\n        String csvFile = \"employees.csv\";\n        String line;\n        String cvsSplitBy = \",\";\n        ArrayList<Employee> employees = new ArrayList<Employee>();\n\n        try (BufferedReader br = new BufferedReader(new FileReader(csvFile))) {\n            while ((line = br.readLine()) != null) {\n                String[] employeeData = line.split(cvsSplitBy);\n                String name = employeeData[0];\n                int age = Integer.parseInt(employeeData[1]);\n                String department = employeeData[2];\n                double salary = Double.parseDouble(employeeData[3]);\n                employees.add(new Employee(name, age, department, salary));\n            }\n\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        Map<String, DepartmentStats> departmentStatsMap = new HashMap<>();\n\n        for (Employee employee : employees) {\n            String department = employee.getDepartment();\n            double salary = employee.getSalary();\n\n            if (departmentStatsMap.containsKey(department)) {\n                DepartmentStats stats = departmentStatsMap.get(department);\n                stats.setTotalSalary(stats.getTotalSalary() + salary);\n                stats.setEmployeeCount(stats.getEmployeeCount() + 1);\n            } else {\n                DepartmentStats stats = new DepartmentStats();\n                stats.setTotalSalary(salary);\n                stats.setEmployeeCount(1);\n                departmentStatsMap.put(department, stats);\n            }\n        }\n\n        for (Map.Entry<String, DepartmentStats> entry : departmentStatsMap.entrySet()) {\n            String department = entry.getKey();\n            DepartmentStats stats = entry.getValue();\n            double averageSalary = stats.getTotalSalary() / stats.getEmployeeCount();\n            System.out.println(\"Department: \" + department + \", Average Salary: \" + averageSalary);\n        }\n    }\n}\n\nclass DepartmentStats {\n    private double totalSalary;\n    private int employeeCount;\n\n    public double getTotalSalary() {\n        return totalSalary;\n    }\n\n    public void setTotalSalary(double totalSalary) {\n        this.totalSalary = totalSalary;\n    }\n\n    public int getEmployeeCount() {\n        return employeeCount;\n    }\n\n    public void setEmployeeCount(int employeeCount) {\n        this.employeeCount = employeeCount;\n    }\n}\n```\n\n**Explanation**\n\n1. **Employee Class**: This class represents an employee with attributes like name, age, department, and salary. It includes a constructor to initialize these fields and getter and setter methods for each attribute.\n\n2. **Reading CSV File**: The program reads data from a CSV file named \"employees.csv\". Each line in the file is split by commas to extract employee details, which are then used to create Employee objects and stored in an ArrayList.\n\n3. **Calculating Average Salary per Department**: \n   - A HashMap is used to keep track of total salaries and the number of employees in each department.\n   - For each employee, the program checks if the department already exists in the map. If it does, it updates the total salary and increments the employee count. If not, it creates a new entry in the map with the initial salary and count.\n   - Finally, it calculates the average salary for each department by dividing the total salary by the number of employees and prints the results.\n\nThis approach ensures that the data is efficiently processed and the average salaries are accurately computed and displayed for each department."
    }
]