[
    {
        "role": "user",
        "content": "Design a Java program that reads JSON data from a RESTful API and prints it in a human-readable format. Include error handling for cases when the API is unreachable or returns invalid data.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to design a Java program that reads JSON data from a RESTful API and prints it in a human-readable format. I'll also include error handling for cases when the API is unreachable or returns invalid data.\n\nFirst, I need to decide on the tools and libraries I'll use. For making HTTP requests in Java, I can use libraries like JDK's built-in `java.net.HttpURLConnection`, but it's a bit low-level. Alternatively, I can use higher-level libraries like Apache HttpClient or OkHttp, which are more user-friendly. For parsing JSON, I can use libraries like Jackson, Gson, or org.json.\n\nFor simplicity, I'll use the built-in `java.net.http.HttpClient` introduced in Java 11, which is part of the standard library, and `org.json` for parsing JSON, as it's straightforward.\n\nHere's a step-by-step plan:\n\n1. **Set up the project:** Ensure I'm using Java 11 or higher to use `java.net.http.HttpClient`.\n\n2. **Make an HTTP GET request:** Use `HttpClient` to send a GET request to the API endpoint.\n\n3. **Handle exceptions:** Catch exceptions that might occur during the request, such as `IOException` if the API is unreachable.\n\n4. **Parse the JSON response:** Use `org.json` to parse the JSON data.\n\n5. **Print the JSON in a readable format:** Use `org.json`'s formatting capabilities to print the JSON nicely.\n\n6. **Handle invalid JSON:** Catch exceptions if the JSON is invalid.\n\nLet me think about the code structure. I'll create a main class with a `main` method. Inside the `main` method, I'll write the logic to make the HTTP request and handle the response.\n\nI need to handle potential errors gracefully. For example, if the API is unreachable, I should inform the user that the API is not available. If the JSON is invalid, I should tell the user that the data is not in the expected format.\n\nAlso, I should consider that the API might return HTTP errors, like 404 or 500. I need to check the response status code and handle those cases appropriately.\n\nLet me outline the code:\n\n- Import necessary classes.\n\n- Define the URL of the API.\n\n- Create an `HttpClient` instance.\n\n- Send a GET request to the API using `HttpClient.send()`.\n\n- Check the response status code.\n\n- Read the response body as a string.\n\n- Parse the JSON string using `org.json.JSONObject` or `JSONArray`, depending on the expected format.\n\n- Print the JSON in a readable format using `toString(indentFactor)`.\n\n- Handle exceptions appropriately.\n\nI need to decide whether to expect a JSON object or an array. For generality, I'll assume it could be either and handle both cases.\n\nAlso, I should consider that the JSON might be nested, so using `org.json`'s formatting should handle that.\n\nNow, about dependencies. Since I'm using `java.net.http.HttpClient`, which is in the standard library from Java 11, and `org.json`, which can be included via Maven or downloaded as a JAR, I need to ensure that the project has access to `org.json`.\n\nIf I'm using Maven, I can add the dependency in the `pom.xml` file:\n\n```xml\n<dependency>\n    <groupId>org.json</groupId>\n    <artifactId>json</artifactId>\n    <version>20210307</version>\n</dependency>\n```\n\nAssuming I'm using Maven, I'll proceed with that.\n\nLet me think about error messages. I should provide meaningful messages to the user in case of failures. For example:\n\n- \"Failed to connect to the API: \" + exception message\n\n- \"Invalid JSON received: \" + exception message\n\nAlso, I should consider that the API might require headers, like an API key or content type. For simplicity, I'll assume the API doesn't require any headers.\n\nWait, in reality, many APIs require headers. Maybe I should make it optional.\n\nBut to keep it simple, I'll omit headers for now.\n\nLet me consider edge cases:\n\n- API is down or unreachable.\n\n- API returns a non-200 status code.\n\n- API returns JSON that is not in the expected format.\n\n- API returns empty body.\n\nI need to handle all these scenarios.\n\nAlso, I should consider that the response body might be large, so I need to handle it efficiently.\n\nBut for simplicity, assuming the response isn't too large.\n\nAlright, I think I have a plan. Let me start writing some pseudocode.\n\n## Final Solution\nTo create a Java program that reads JSON data from a RESTful API and prints it in a human-readable format, including error handling for unreachable APIs or invalid data, follow these steps:\n\n### Approach\n\n1. **Set up the project:** Ensure you are using Java 11 or higher to utilize the `java.net.http.HttpClient` class.\n2. **Make an HTTP GET request:** Use `HttpClient` to send a GET request to the API endpoint.\n3. **Handle exceptions:** Catch exceptions that may occur during the request, such as `IOException` if the API is unreachable.\n4. **Parse the JSON response:** Use the `org.json` library to parse the JSON data.\n5. **Print the JSON in a readable format:** Use `org.json`'s formatting capabilities to print the JSON nicely.\n6. **Handle invalid JSON:** Catch exceptions if the JSON is invalid.\n\n### Solution Code\n\n```java\nimport java.net.URI;\nimport java.net.http.HttpClient;\nimport java.net.http.HttpRequest;\nimport java.net.http.HttpResponse;\nimport org.json.JSONArray;\nimport org.json.JSONObject;\nimport org.json.JSONTokener;\n\npublic class ApiJsonReader {\n\n    public static void main(String[] args) {\n        String apiURL = \"https://api.example.com/data\"; // Replace with actual API URL\n\n        try {\n            // Create HttpClient\n            HttpClient client = HttpClient.newHttpClient();\n\n            // Create HttpRequest\n            HttpRequest request = HttpRequest.newBuilder()\n                    .uri(URI.create(apiURL))\n                    .build();\n\n            // Send request and get response\n            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());\n\n            // Check if the response is successful\n            if (response.statusCode() == 200) {\n                // Parse JSON\n                JSONTokener tokener = new JSONTokener(response.body());\n                Object jsonValue = tokener.nextValue();\n                if (jsonValue instanceof JSONObject) {\n                    JSONObject jsonObject = (JSONObject) jsonValue;\n                    System.out.println(\"JSON Object:\\n\" + jsonObject.toString(4));\n                } else if (jsonValue instanceof JSONArray) {\n                    JSONArray jsonArray = (JSONArray) jsonValue;\n                    System.out.println(\"JSON Array:\\n\" + jsonArray.toString(4));\n                } else {\n                    System.out.println(\"Unexpected JSON type\");\n                }\n            } else {\n                System.out.println(\"Failed to connect to API. Status code: \" + response.statusCode());\n            }\n        } catch (Exception e) {\n            System.out.println(\"An error occurred: \" + e.getMessage());\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **HTTP Client Setup:** Use `HttpClient` to send a GET request to the specified API URL.\n2. **Error Handling:** Catch any exceptions that occur during the HTTP request and handle them gracefully.\n3. **JSON Parsing:** Use `org.json`'s `JSONTokener` to parse the JSON data, which can handle both JSON objects and arrays.\n4. **Readable Output:** Print the JSON data with indentation for better readability.\n5. **Status Check:** Verify the HTTP response status code to ensure the request was successful before parsing the JSON.\n\nThis approach ensures that the program handles various error scenarios and provides meaningful feedback to the user."
    }
]