[
    {
        "role": "user",
        "content": "In Java, implement a simple HTTP server which listens on a port passed as a command-line argument. The server should respond with a JSON payload containing details about the system such as current time, total memory, free memory, number of processors, and system load average. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a simple HTTP server in Java that responds with system details in JSON format involves several steps. Below is a basic example to achieve this. This example uses the built-in `HttpServer` class available in Java's `com.sun.net.httpserver` package for creating the server and handles GET requests to provide the system information.\n\n### Solution Code\n\n```java\nimport com.sun.net.httpserver.HttpServer;\nimport com.sun.net.httpserver.HttpHandler;\nimport com.sun.net.httpserver.HttpExchange;\n\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.net.InetSocketAddress;\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class SystemInfoServer {\n\n    public static void main(String[] args) {\n        if (args.length != 1) {\n            System.out.println(\"Usage: java SystemInfoServer <port>\");\n            return;\n        }\n\n        int port = Integer.parseInt(args[0]);\n\n        try {\n            HttpServer server = HttpServer.create(new InetSocketAddress(port), 0);\n            server.createContext(\"/systeminfo\", new SystemInfoHandler());\n            server.setExecutor(null); // uses the default executor\n            server.start();\n            System.out.println(\"Server started on port \" + port);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    static class SystemInfoHandler implements HttpHandler {\n        @Override\n        public void handle(HttpExchange exchange) throws IOException {\n            if (\"GET\".equals(exchange.getRequestMethod())) {\n                Map<String, Object> systemInfo = getSystemInfo();\n                String json = convertToJson(systemInfo);\n\n                exchange.getResponseHeaders().set(\"Content-Type\", \"application/json\");\n                exchange.sendResponseHeaders(200, json.getBytes().length);\n\n                OutputStream os = exchange.getResponseBody();\n                os.write(json.getBytes());\n                os.close();\n            } else {\n                exchange.sendResponseHeaders(405, -1); // Method Not Allowed\n                exchange.getResponseBody().close();\n            }\n        }\n\n        private Map<String, Object> getSystemInfo() {\n            Map<String, Object> info = new HashMap<>();\n            info.put(\"current_time\", System.currentTimeMillis());\n            info.put(\"total_memory\", Runtime.getRuntime().totalMemory());\n            info.put(\"free_memory\", Runtime.getRuntime().freeMemory());\n            info.put(\"processors\", Runtime.getRuntime().availableProcessors());\n            info.put(\"system_load_average\", getSystemLoadAverage());\n            return info;\n        }\n\n        private double getSystemLoadAverage() {\n            // This is a placeholder as Java doesn't provide a standard way to get system load average.\n            // For a more accurate implementation, you might need to use platform-specific code or external libraries.\n            return 0.0;\n        }\n\n        private String convertToJson(Map<String, Object> data) {\n            // A simple JSON conversion without using any library for brevity.\n            // In a real-world scenario, consider using a library like Jackson or Gson.\n            StringBuilder json = new StringBuilder(\"{\");\n            for (Map.Entry<String, Object> entry : data.entrySet()) {\n                json.append('\"').append(entry.getKey()).append(\"\\\":\");\n                if (entry.getValue() instanceof Number || entry.getValue() instanceof Boolean) {\n                    json.append(entry.getValue());\n                } else {\n                    json.append('\"').append(entry.getValue()).append('\"');\n                }\n                json.append(\",\");\n            }\n            if (json.length() > 1) {\n                json.setLength(json.length() - 1); // Remove the last comma\n            }\n            json.append(\"}\");\n            return json.toString();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **HTTP Server Setup**:\n   - The `HttpServer` class is used to create an HTTP server that listens on the specified port.\n   - A context `/systeminfo` is created to handle requests for system information.\n\n2. **Handling Requests**:\n   - The `SystemInfoHandler` class implements the `HttpHandler` interface to handle HTTP requests.\n   - It checks if the request method is GET and responds with system information in JSON format.\n\n3. **System Information**:\n   - The `getSystemInfo` method collects various system metrics such as current time, memory usage, number of processors, and a placeholder for system load average.\n   - The `getSystemLoadAverage` method is a placeholder since Java does not provide a standard way to retrieve the system load average. For accurate load average, consider using platform-specific code or external libraries.\n\n4. **JSON Conversion**:\n   - A simple JSON string is constructed from the system information map.\n   - For production code, it's recommended to use a JSON library like Jackson or Gson for better handling and performance.\n\n### Running the Server\n\nTo run the server, compile the Java code and execute it with the desired port number as a command-line argument:\n\n```sh\njavac SystemInfoServer.java\njava SystemInfoServer 8080\n```\n\nThis will start the server on port 8080. You can then access `http://localhost:8080/systeminfo` in your web browser or using a tool like curl to see the system information in JSON format."
    }
]