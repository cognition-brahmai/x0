[
    {
        "role": "user",
        "content": "Write a Java program that simulates a simple chat server using sockets. The server should allow multiple clients to connect, send messages to each other, and disconnect gracefully."
    },
    {
        "role": "assistant",
        "content": "To create a simple chat server in Java using sockets that handles multiple clients, we can use threads to manage each client connection separately. This way, the server can handle multiple clients concurrently.\n\n**Server Code:**\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 12345;\n    private static List<ClientHandler> clients = new ArrayList<>();\n\n    public static void main(String[] args) throws IOException {\n        ServerSocket serverSocket = new ServerSocket(PORT);\n        System.out.println(\"Chat Server started on port \" + PORT);\n\n        while (true) {\n            Socket socket = serverSocket.accept();\n            ClientHandler newClient = new ClientHandler(socket);\n            clients.add(newClient);\n            new Thread(newClient).start();\n        }\n    }\n\n    public static void broadcastMessage(String message, ClientHandler sender) {\n        for (ClientHandler client : clients) {\n            if (client != sender) {\n                client.sendMessage(message);\n            }\n        }\n    }\n\n    static class ClientHandler implements Runnable {\n        private Socket socket;\n        private BufferedReader in;\n        private PrintWriter out;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                out = new PrintWriter(socket.getOutputStream(), true);\n\n                String message;\n                while ((message = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + message);\n                    broadcastMessage(message, this);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                try {\n                    socket.close();\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n                clients.remove(this);\n            }\n        }\n\n        public void sendMessage(String message) {\n            out.println(message);\n        }\n    }\n}\n```\n\n**Client Code:**\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.Scanner;\n\npublic class ChatClient {\n    private static final String SERVER_ADDRESS = \"localhost\";\n    private static final int PORT = 12345;\n\n    public static void main(String[] args) throws IOException {\n        Socket socket = new Socket(SERVER_ADDRESS, PORT);\n        System.out.println(\"Connected to server \" + SERVER_ADDRESS + \":\" + PORT);\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n        PrintWriter out = new PrintWriter(socket.getOutputStream(), true);\n\n        Thread readThread = new Thread(() -> {\n            try {\n                String message;\n                while ((message = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + message);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        });\n        readThread.start();\n\n        Scanner scanner = new Scanner(System.in);\n        while (scanner.hasNextLine()) {\n            String message = scanner.nextLine();\n            out.println(message);\n        }\n\n        socket.close();\n    }\n}\n```\n\n**Explanation:**\n\n1. **Server Code:**\n   - The server listens on a specified port (12345) for incoming client connections.\n   - For each client that connects, a new `ClientHandler` thread is created to handle communication with that client.\n   - The `ClientHandler` reads messages from its client and broadcasts them to all other connected clients.\n   - When a client disconnects, its handler is removed from the list of active clients.\n\n2. **Client Code:**\n   - The client connects to the server at the specified address and port.\n   - It starts a thread to read and display messages from the server.\n   - The main thread reads user input and sends it to the server.\n\nTo test this chat server:\n- Run the `ChatServer` class.\n- Open multiple instances of the `ChatClient` class in different terminals or command prompts.\n- Type messages in any client window; they should be broadcast to all other connected clients.\n\nThis is a basic implementation and does not include features like username identification, private messaging, or more sophisticated error handling, which you might want to add for a more complete chat system."
    }
]