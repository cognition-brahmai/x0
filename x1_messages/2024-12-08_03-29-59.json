[
    {
        "role": "user",
        "content": "Write a Java program that implements a simple chat server using sockets. The server should accept multiple client connections and broadcast messages received from one client to all other connected clients. Include error handling for disconnections and invalid input.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a multi-client chat server in Java using sockets involves several steps. We need to handle multiple clients simultaneously, receive messages from them, and broadcast those messages to all other connected clients. Additionally, we need to manage client disconnections gracefully and handle any potential errors that may occur during the process.\n\n### Approach\n\n1. **Server Setup**:\n   - Create a server socket that listens for incoming client connections.\n   - Accept connections from clients and handle each client in a separate thread to manage multiple clients simultaneously.\n\n2. **Client Handling**:\n   - Each client connection is handled by a dedicated thread.\n   - Read messages from the client and broadcast them to all other connected clients.\n   - Handle disconnections by removing the client from the active client list.\n\n3. **Broadcast Mechanism**:\n   - Maintain a list of all connected clients.\n   - When a message is received from one client, send it to all other clients in the list.\n\n4. **Error Handling**:\n   - Handle exceptions related to socket communications and input/output operations.\n   - Ensure that the server remains stable even if a client disconnects unexpectedly or sends invalid data.\n\n### Solution Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 12345;\n    private static List<ClientHandler> clients = new ArrayList<>();\n\n    public static void main(String[] args) {\n        ServerSocket serverSocket;\n        try {\n            serverSocket = new ServerSocket(PORT);\n            System.out.println(\"Chat Server started on port \" + PORT);\n\n            while (true) {\n                Socket clientSocket = serverSocket.accept();\n                ClientHandler clientHandler = new ClientHandler(clientSocket);\n                clients.add(clientHandler);\n                new Thread(clientHandler).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void broadcastMessage(String message, ClientHandler sender) {\n        for (ClientHandler client : clients) {\n            if (client != sender) {\n                client.sendMessage(message);\n            }\n        }\n    }\n\n    public static void removeClient(ClientHandler client) {\n        clients.remove(client);\n    }\n\n    static class ClientHandler implements Runnable {\n        private Socket socket;\n        private BufferedReader in;\n        private PrintWriter out;\n\n        public ClientHandler(Socket socket) {\n            this.socket = socket;\n        }\n\n        @Override\n        public void run() {\n            try {\n                in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n                out = new PrintWriter(socket.getOutputStream(), true);\n\n                String message;\n                while ((message = in.readLine()) != null) {\n                    System.out.println(\"Received: \" + message);\n                    broadcastMessage(message, this);\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                closeResources();\n                removeClient(this);\n            }\n        }\n\n        public void sendMessage(String message) {\n            out.println(message);\n        }\n\n        private void closeResources() {\n            try {\n                if (in != null) in.close();\n                if (out != null) out.close();\n                if (socket != null) socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server Setup**:\n   - The server listens on port `12345` for incoming client connections.\n   - For each client that connects, a new `ClientHandler` thread is created to handle communication with that client.\n\n2. **Client Handling**:\n   - Each `ClientHandler` reads messages from its client and broadcasts them to all other clients.\n   - If a client disconnects, its `ClientHandler` is removed from the list of active clients.\n\n3. **Broadcast Mechanism**:\n   - The `broadcastMessage` method sends a message to all clients except the sender.\n   - This ensures that messages are distributed appropriately among connected clients.\n\n4. **Error Handling**:\n   - Exceptions are caught and printed to ensure the server doesn't crash due to individual client issues.\n   - Resources are properly closed in the `finally` block to prevent resource leaks.\n\nThis implementation provides a basic but functional chat server that can handle multiple clients and broadcast messages among them."
    }
]