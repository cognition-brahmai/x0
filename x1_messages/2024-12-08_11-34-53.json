[
    {
        "role": "user",
        "content": "Write a Python script that utilizes the OpenCV library to read an image file, apply a Gaussian blur filter, and save the resulting image to disk. Allow the user to specify the input file path, output file path, and blur intensity via command-line arguments.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! To create a Python script that reads an image, applies a Gaussian blur, and saves the result using OpenCV, you'll need to have OpenCV installed. You can install it using pip if you haven't already:\n\n```bash\npip install opencv-python\n```\n\nHere's a step-by-step guide to create the script:\n\n1. **Import the necessary library:**\n   ```python\n   import cv2\n   import sys\n   import argparse\n   ```\n\n2. **Set up the command-line argument parser:**\n   We'll use the `argparse` module to handle command-line arguments for input file path, output file path, and blur intensity.\n\n   ```python\n   def create_parser():\n       parser = argparse.ArgumentParser(description=\"Apply Gaussian blur to an image.\")\n       parser.add_argument(\"input\", type=str, help=\"Path to the input image\")\n       parser.add_argument(\"output\", type=str, help=\"Path to save the output image\")\n       parser.add_argument(\"--blur\", type=int, default=5, help=\"Blur intensity (kernel size), must be odd\")\n       return parser\n   ```\n\n3. **Read the image:**\n   Use `cv2.imread` to read the image from the specified input path.\n\n   ```python\n   def read_image(path):\n       img = cv2.imread(path)\n       if img is None:\n           print(f\"Error: Could not read image from {path}\")\n           sys.exit(1)\n       return img\n   ```\n\n4. **Apply Gaussian blur:**\n   Use `cv2.GaussianBlur` to apply the blur. The kernel size must be positive and odd.\n\n   ```python\n   def apply_gaussian_blur(img, kernel_size):\n       if kernel_size % 2 == 0:\n           print(\"Kernel size must be odd. Adding 1 to the provided value.\")\n           kernel_size += 1\n       blurred_img = cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)\n       return blurred_img\n   ```\n\n5. **Save the resulting image:**\n   Use `cv2.imwrite` to save the blurred image to the specified output path.\n\n   ```python\n   def save_image(path, img):\n       if not cv2.imwrite(path, img):\n           print(f\"Error: Could not write image to {path}\")\n           sys.exit(1)\n   ```\n\n6. **Main function to orchestrate the steps:**\n   Parse the arguments, read the image, apply the blur, and save the result.\n\n   ```python\n   def main():\n       parser = create_parser()\n       args = parser.parse_args()\n\n       input_path = args.input\n       output_path = args.output\n       blur_intensity = args.blur\n\n       # Read the image\n       img = read_image(input_path)\n\n       # Apply Gaussian blur\n       blurred_img = apply_gaussian_blur(img, blur_intensity)\n\n       # Save the resulting image\n       save_image(output_path, blurred_img)\n\n       print(f\"Blurred image saved to {output_path}\")\n   ```\n\n7. **Check if the script is run directly and execute the main function:**\n\n   ```python\n   if __name__ == \"__main__\":\n       main()\n   ```\n\n### Complete Script\n\nPutting it all together, your script will look like this:\n\n```python\nimport cv2\nimport sys\nimport argparse\n\ndef create_parser():\n    parser = argparse.ArgumentParser(description=\"Apply Gaussian blur to an image.\")\n    parser.add_argument(\"input\", type=str, help=\"Path to the input image\")\n    parser.add_argument(\"output\", type=str, help=\"Path to save the output image\")\n    parser.add_argument(\"--blur\", type=int, default=5, help=\"Blur intensity (kernel size), must be odd\")\n    return parser\n\ndef read_image(path):\n    img = cv2.imread(path)\n    if img is None:\n        print(f\"Error: Could not read image from {path}\")\n        sys.exit(1)\n    return img\n\ndef apply_gaussian_blur(img, kernel_size):\n    if kernel_size % 2 == 0:\n        print(\"Kernel size must be odd. Adding 1 to the provided value.\")\n        kernel_size += 1\n    blurred_img = cv2.GaussianBlur(img, (kernel_size, kernel_size), 0)\n    return blurred_img\n\ndef save_image(path, img):\n    if not cv2.imwrite(path, img):\n        print(f\"Error: Could not write image to {path}\")\n        sys.exit(1)\n\ndef main():\n    parser = create_parser()\n    args = parser.parse_args()\n\n    input_path = args.input\n    output_path = args.output\n    blur_intensity = args.blur\n\n    # Read the image\n    img = read_image(input_path)\n\n    # Apply Gaussian blur\n    blurred_img = apply_gaussian_blur(img, blur_intensity)\n\n    # Save the resulting image\n    save_image(output_path, blurred_img)\n\n    print(f\"Blurred image saved to {output_path}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Usage\n\nTo use this script, run it from the command line with the input image path, output image path, and optional blur intensity:\n\n```bash\npython script.py input.jpg output.jpg --blur 5\n```\n\nThis will read `input.jpg`, apply a Gaussian blur with a kernel size of 5, and save the result as `output.jpg`. If the kernel size is even, it will be adjusted to the next odd number."
    }
]