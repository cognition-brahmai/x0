[
    {
        "role": "user",
        "content": "Write a Java program that creates a simple chat application using sockets. The application should support multiple clients connecting to a central server, and clients should be able to send messages to all other connected clients.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Creating a multi-client chat application using Java sockets involves setting up both a server and client components. The server will handle multiple clients by using threads, ensuring each client can communicate independently. Messages sent by any client should be broadcasted to all other connected clients.\n\n### Approach\n\n1. **Server Setup:**\n   - Create a server socket to listen for incoming client connections.\n   - Accept connections from clients and manage each connection in a separate thread.\n   - Maintain a list of all connected client sockets to broadcast messages.\n\n2. **Client Setup:**\n   - Create a socket to connect to the server.\n   - Use input and output streams to send and receive messages.\n   - Run in two threads: one for reading messages from the server and another for sending messages to the server.\n\n3. **Message Broadcasting:**\n   - When a message is received from a client, broadcast it to all other connected clients.\n\n### Solution Code\n\n#### Server Code\n\n```java\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class ChatServer {\n    private static final int PORT = 1234;\n    private List<ClientHandler> clients = new ArrayList<>();\n\n    public static void main(String[] args) {\n        new ChatServer().start();\n    }\n\n    public void start() {\n        try (ServerSocket serverSocket = new ServerSocket(PORT)) {\n            System.out.println(\"Server started on port \" + PORT);\n            while (true) {\n                Socket socket = serverSocket.accept();\n                ClientHandler client = new ClientHandler(socket, this);\n                clients.add(client);\n                new Thread(client).start();\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void broadcastMessage(String message, ClientHandler sender) {\n        for (ClientHandler client : clients) {\n            if (client != sender) {\n                client.sendMessage(message);\n            }\n        }\n    }\n\n    public void removeClient(ClientHandler client) {\n        clients.remove(client);\n    }\n}\n\nclass ClientHandler implements Runnable {\n    private Socket socket;\n    private ChatServer server;\n    private PrintWriter out;\n\n    public ClientHandler(Socket socket, ChatServer server) {\n        this.socket = socket;\n        this.server = server;\n    }\n\n    @Override\n    public void run() {\n        try {\n            BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            out = new PrintWriter(socket.getOutputStream(), true);\n\n            String message;\n            while ((message = in.readLine()) != null) {\n                System.out.println(\"Received: \" + message);\n                server.broadcastMessage(message, this);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                socket.close();\n            } catch (IOException e) {\n                e.printStackTrace();\n            }\n            server.removeClient(this);\n        }\n    }\n\n    public void sendMessage(String message) {\n        out.println(message);\n    }\n}\n```\n\n#### Client Code\n\n```java\nimport java.io.*;\nimport java.net.*;\n\npublic class ChatClient {\n    private static final String SERVER_ADDRESS = \"localhost\";\n    private static final int SERVER_PORT = 1234;\n\n    public static void main(String[] args) {\n        new ChatClient().start();\n    }\n\n    public void start() {\n        try {\n            Socket socket = new Socket(SERVER_ADDRESS, SERVER_PORT);\n            System.out.println(\"Connected to server\");\n\n            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));\n            PrintWriter output = new PrintWriter(socket.getOutputStream(), true);\n\n            Thread readThread = new Thread(() -> {\n                try {\n                    String message;\n                    while ((message = input.readLine()) != null) {\n                        System.out.println(\"Received: \" + message);\n                    }\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            });\n\n            readThread.start();\n\n            BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));\n            String line;\n            while (true) {\n                line = stdIn.readLine();\n                if (line.equalsIgnoreCase(\"exit\")) {\n                    break;\n                }\n                output.println(line);\n            }\n\n            socket.close();\n        } catch (UnknownHostException e) {\n            System.err.println(\"Don't know about host: \" + SERVER_ADDRESS);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server:**\n   - Listens on a specified port for incoming client connections.\n   - Manages each client connection in a separate thread using `ClientHandler`.\n   - Broadcasts messages received from one client to all other connected clients.\n\n2. **Client:**\n   - Connects to the server on the specified address and port.\n   - Reads messages from the server in one thread and sends messages to the server in another thread.\n   - Can send messages to the server, which then broadcasts them to other clients.\n\n3. **Communication:**\n   - Messages are sent as strings over the socket streams.\n   - Each message is read line by line, making it suitable for text-based chat.\n\nThis setup ensures that multiple clients can connect and communicate with each other through the central server."
    }
]