[
    {
        "role": "user",
        "content": "Write a Python program to implement a stack data structure using lists. The stack should support push, pop, peek, and is_empty operations."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. So, a stack is a fundamental data structure that follows the Last In, First Out (LIFO) principle. This means that the last element added to the stack will be the first one to be removed. Think of it like a stack of plates: you can only take the top plate off, and you have to put new plates on top.\n\nIn Python, we can implement a stack using a list, which is a built-in data structure that allows dynamic resizing. Lists provide append and pop methods that make it easy to add and remove elements from the end, which is perfect for a stack implementation.\n\nLet's go through each operation one by one:\n\n1. **Push**: This operation adds an element to the top of the stack.\n2. **Pop**: This removes the top element from the stack and returns it.\n3. **Peek**: This returns the top element without removing it.\n4. **Is Empty**: This checks if the stack is empty.\n\nI'll write a simple Python class to represent the stack, and then I'll explain each part.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            raise IndexError(\"pop from empty stack\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            raise IndexError(\"peek from empty stack\")\n\n    def is_empty(self):\n        return len(self.items) == 0\n```\n\n## Explanation\n\n### Stack Class\n\n- **Initialization (`__init__`)**:\n  - We initialize the stack with an empty list `self.items`.\n\n- **Push Operation (`push`)**:\n  - We use the `append` method of the list to add a new item to the top of the stack.\n\n- **Pop Operation (`pop`)**:\n  - We check if the stack is not empty.\n  - If it's not empty, we use the `pop` method of the list to remove and return the top element.\n  - If the stack is empty, we raise an `IndexError` with an appropriate message.\n\n- **Peek Operation (`peek`)**:\n  - We check if the stack is not empty.\n  - If it's not empty, we return the last element of the list (top of the stack) without removing it.\n  - If the stack is empty, we raise an `IndexError` with an appropriate message.\n\n- **Is Empty Operation (`is_empty`)**:\n  - We return `True` if the length of the list is zero, indicating the stack is empty.\n  - Otherwise, we return `False`.\n\nThis implementation is straightforward and efficient, as the list's append and pop operations are O(1) on average in Python.\n\n## Example Usage\n\nHere's how you can use this stack:\n\n```python\n# Create a stack instance\nstack = Stack()\n\n# Push elements onto the stack\nstack.push(1)\nstack.push(2)\nstack.push(3)\n\n# Peek at the top element\nprint(stack.peek())  # Output: 3\n\n# Pop elements from the stack\nprint(stack.pop())   # Output: 3\nprint(stack.pop())   # Output: 2\n\n# Check if the stack is empty\nprint(stack.is_empty())  # Output: False\n\n# Pop the last element\nprint(stack.pop())   # Output: 1\n\n# Check if the stack is empty again\nprint(stack.is_empty())  # Output: True\n```\n\nThis should give you a good starting point for implementing a stack in Python using lists. If you have any questions or need further clarification, feel free to ask!"
    }
]