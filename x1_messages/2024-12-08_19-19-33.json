[
    {
        "role": "user",
        "content": "Develop a Go program that connects to a MySQL database and performs CRUD operations on a \"books\" table with columns for title, author, publication date, and ISBN. The program should use prepared statements and properly handle errors during database operations."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Go program that connects to a MySQL database and performs CRUD operations on a \"books\" table. Let's get started!\n\nFirst, make sure you have the necessary dependencies installed. You'll need the Go MySQL driver and the database/sql package. You can install them using:\n\n```sh\ngo get -u github.com/go-sql-driver/mysql\n```\n\nNow, let's outline the steps we need to follow:\n\n1. **Connecting to the Database:** We need to establish a connection to the MySQL database.\n2. **Creating the Books Table:** Ensure that the \"books\" table exists with the required columns.\n3. **CRUD Operations:**\n   - **Create (Insert):** Add a new book to the table.\n   - **Read (Select):** Retrieve book details based on certain criteria.\n   - **Update:** Modify existing book details.\n   - **Delete:** Remove a book from the table.\n\nWe'll use prepared statements to prevent SQL injection and handle errors properly.\n\n### Step 1: Connecting to the Database\n\nFirst, import the necessary packages:\n\n```go\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n```\n\nDefine a function to connect to the MySQL database:\n\n```go\nfunc connectDB() *sql.DB {\n\tdb, err := sql.Open(\"mysql\", \"user:password@tcp(127.0.0.1:3306)/dbname\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\treturn db\n}\n```\n\nReplace `user`, `password`, and `dbname` with your actual database credentials.\n\n### Step 2: Creating the Books Table\n\nDefine a function to create the \"books\" table if it doesn't exist:\n\n```go\nfunc createBooksTable(db *sql.DB) {\n\tquery := `\n\tCREATE TABLE IF NOT EXISTS books (\n\t\tid INT AUTO_INCREMENT PRIMARY KEY,\n\t\ttitle VARCHAR(255) NOT NULL,\n\t\tauthor VARCHAR(100) NOT NULL,\n\t\tpublication_date DATE,\n\t\tisbn VARCHAR(13)\n\t)\n\t`\n\t_, err := db.Exec(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Step 3: CRUD Operations\n\n#### Create (Insert)\n\nDefine a function to insert a new book:\n\n```go\ntype Book struct {\n\tTitle            string\n\tAuthor           string\n\tPublicationDate  string // Assume YYYY-MM-DD format\n\tISBN             string\n}\n\nfunc insertBook(db *sql.DB, book Book) {\n\tquery := `INSERT INTO books (title, author, publication_date, isbn) VALUES (?, ?, ?, ?)`\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(book.Title, book.Author, book.PublicationDate, book.ISBN)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Book inserted successfully\")\n}\n```\n\n#### Read (Select)\n\nDefine a function to retrieve books based on a condition:\n\n```go\nfunc getBooks(db *sql.DB, title string) {\n\tquery := `SELECT id, title, author, publication_date, isbn FROM books WHERE title LIKE ?`\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stmt.Close()\n\n\trows, err := stmt.Query(\"%\" + title + \"%\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rows.Close()\n\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar title, author, publicationDate, isbn string\n\t\terr := rows.Scan(&id, &title, &author, &publicationDate, &isbn)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\tfmt.Printf(\"ID: %d, Title: %s, Author: %s, Publication Date: %s, ISBN: %s\\n\", id, title, author, publicationDate, isbn)\n\t}\n\terr = rows.Err()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n#### Update\n\nDefine a function to update a book's details:\n\n```go\nfunc updateBook(db *sql.DB, id int, book Book) {\n\tquery := `UPDATE books SET title=?, author=?, publication_date=?, isbn=? WHERE id=?`\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(book.Title, book.Author, book.PublicationDate, book.ISBN, id)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Book updated successfully\")\n}\n```\n\n#### Delete\n\nDefine a function to delete a book:\n\n```go\nfunc deleteBook(db *sql.DB, id int) {\n\tquery := `DELETE FROM books WHERE id=?`\n\tstmt, err := db.Prepare(query)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer stmt.Close()\n\n\t_, err = stmt.Exec(id)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"Book deleted successfully\")\n}\n```\n\n### Main Function\n\nNow, let's put it all together in the main function:\n\n```go\nfunc main() {\n\tdb := connectDB()\n\tdefer db.Close()\n\n\tcreateBooksTable(db)\n\n\t// Example usage\n\tnewBook := Book{\n\t\tTitle:           \"Sample Book\",\n\t\tAuthor:          \"John Doe\",\n\t\tPublicationDate: \"2023-01-01\",\n\t\tISBN:            \"1234567890123\",\n\t}\n\tinsertBook(db, newBook)\n\n\tgetBooks(db, \"Sample\")\n\n\tupdateBook(db, 1, Book{\n\t\tTitle:           \"Updated Book\",\n\t\tAuthor:          \"Jane Doe\",\n\t\tPublicationDate: \"2023-02-01\",\n\t\tISBN:            \"3210987654321\",\n\t})\n\n\tdeleteBook(db, 1)\n}\n```\n\n### Explanation\n\n1. **Connecting to the Database:** We use `sql.Open` to establish a connection.\n2. **Creating the Table:** We create the \"books\" table if it doesn't exist.\n3. **CRUD Operations:**\n   - **Insert:** Use a prepared statement to insert a new book.\n   - **Read:** Retrieve books based on a title pattern.\n   - **Update:** Update book details based on the book's ID.\n   - **Delete:** Delete a book based on its ID.\n\nThis should give you a solid starting point for your Go program interacting with a MySQL database using CRUD operations. If you have any specific requirements or need further customization, feel free to ask!"
    }
]