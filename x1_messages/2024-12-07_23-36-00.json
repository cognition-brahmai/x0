[
    {
        "role": "user",
        "content": "Create a Golang implementation of a singly linked list with methods for adding elements at the beginning, end, and a specified position, as well as removing elements by value or position.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Go implementation of a singly linked list with methods to add elements at the beginning, end, and a specified position, as well as remove elements by value or position.\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n)\n\n// Node represents a single node in the linked list\ntype Node struct {\n\tdata int\n\tnext *Node\n}\n\n// LinkedList represents the entire linked list\ntype LinkedList struct {\n\thead *Node\n\tsize int\n}\n\n// NewNode creates a new node with the given data\nfunc NewNode(data int) *Node {\n\treturn &Node{\n\t\tdata: data,\n\t\tnext: nil,\n\t}\n}\n\n// NewLinkedList creates a new empty linked list\nfunc NewLinkedList() *LinkedList {\n\treturn &LinkedList{\n\t\thead: nil,\n\t\tsize: 0,\n\t}\n}\n\n// AddAtBeginning adds a new node with the given data at the beginning of the list\nfunc (ll *LinkedList) AddAtBeginning(data int) {\n\tnewNode := NewNode(data)\n\tnewNode.next = ll.head\n\tll.head = newNode\n\tll.size++\n}\n\n// AddAtEnd adds a new node with the given data at the end of the list\nfunc (ll *LinkedList) AddAtEnd(data int) {\n\tnewNode := NewNode(data)\n\tif ll.head == nil {\n\t\tll.head = newNode\n\t} else {\n\t\tcurrent := ll.head\n\t\tfor current.next != nil {\n\t\t\tcurrent = current.next\n\t\t}\n\t\tcurrent.next = newNode\n\t}\n\tll.size++\n}\n\n// AddAtPosition adds a new node with the given data at the specified position\nfunc (ll *LinkedList) AddAtPosition(data int, position int) {\n\tif position < 0 || position > ll.size {\n\t\tfmt.Println(\"Invalid position\")\n\t\treturn\n\t}\n\tif position == 0 {\n\t\tll.AddAtBeginning(data)\n\t\treturn\n\t}\n\tif position == ll.size {\n\t\tll.AddAtEnd(data)\n\t\treturn\n\t}\n\tnewNode := NewNode(data)\n\tcurrent := ll.head\n\tfor i := 1; i < position; i++ {\n\t\tcurrent = current.next\n\t}\n\tnewNode.next = current.next\n\tcurrent.next = newNode\n\tll.size++\n}\n\n// RemoveByValue removes the first occurrence of a node with the given data\nfunc (ll *LinkedList) RemoveByValue(data int) {\n\tif ll.head == nil {\n\t\treturn\n\t}\n\tif ll.head.data == data {\n\t\tll.head = ll.head.next\n\t\tll.size--\n\t\treturn\n\t}\n\tcurrent := ll.head\n\tfor current.next != nil {\n\t\tif current.next.data == data {\n\t\t\tcurrent.next = current.next.next\n\t\t\tll.size--\n\t\t\treturn\n\t\t}\n\t\tcurrent = current.next\n\t}\n}\n\n// RemoveByPosition removes the node at the specified position\nfunc (ll *LinkedList) RemoveByPosition(position int) {\n\tif position < 0 || position >= ll.size {\n\t\tfmt.Println(\"Invalid position\")\n\t\treturn\n\t}\n\tif position == 0 {\n\t\tll.head = ll.head.next\n\t\tll.size--\n\t\treturn\n\t}\n\tcurrent := ll.head\n\tfor i := 1; i < position; i++ {\n\t\tcurrent = current.next\n\t}\n\tcurrent.next = current.next.next\n\tll.size--\n}\n\n// Display prints the elements of the linked list\nfunc (ll *LinkedList) Display() {\n\tcurrent := ll.head\n\tfor current != nil {\n\t\tfmt.Printf(\"%d -> \", current.data)\n\t\tcurrent = current.next\n\t}\n\tfmt.Println(\"nil\")\n}\n\nfunc main() {\n\tll := NewLinkedList()\n\tll.AddAtBeginning(3)\n\tll.AddAtEnd(5)\n\tll.AddAtPosition(4, 1)\n\tll.Display() // Output: 3 -> 4 -> 5 -> nil\n\tll.RemoveByValue(4)\n\tll.Display() // Output: 3 -> 5 -> nil\n\tll.AddAtPosition(6, 1)\n\tll.RemoveByPosition(1)\n\tll.Display() // Output: 3 -> 5 -> nil\n}\n```\n\n### Explanation\n\n1. **Node Structure**: Each node contains an integer `data` and a pointer to the next node.\n2. **LinkedList Structure**: Contains a pointer to the head node and the size of the list.\n3. **NewNode Function**: Creates a new node with the specified data.\n4. **NewLinkedList Function**: Initializes a new linked list with no elements.\n5. **AddAtBeginning Method**: Adds a new node at the beginning of the list.\n6. **AddAtEnd Method**: Adds a new node at the end of the list.\n7. **AddAtPosition Method**: Adds a new node at a specified position in the list.\n8. **RemoveByValue Method**: Removes the first occurrence of a node with the specified data.\n9. **RemoveByPosition Method**: Removes the node at the specified position.\n10. **Display Method**: Prints the elements of the list.\n\nThis implementation provides basic operations for managing a singly linked list in Go."
    }
]