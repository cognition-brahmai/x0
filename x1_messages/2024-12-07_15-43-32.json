[
    {
        "role": "user",
        "content": "Create a Node.js Express server with endpoints for creating, reading, updating, and deleting notes. Each note should have a title, content, and timestamp. Store the notes in-memory using JavaScript objects. Add validation checks to ensure that the title and content are not empty and that the title is unique."
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a simple Node.js Express server that handles CRUD operations for notes. Each note will have a title, content, and a timestamp. Since we're storing notes in memory using JavaScript objects, I don't need to set up a database. I'll also add validation to make sure that the title and content are not empty and that each title is unique.\n\nFirst, I need to set up a basic Express server. I'll install Express if I haven't already.\n\n```bash\nnpm install express\n```\n\nThen, I'll create a new file, maybe called `app.js`, and set up the server.\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nNext, I need to define the endpoints for CRUD operations. Let's start with creating a note.\n\n## Creating a Note\n\nFor creating a note, I'll need to POST to an endpoint, say `/notes`. The request body should contain `title` and `content`.\n\nI need to validate that both title and content are provided and that the title is unique.\n\nI'll store the notes in an array.\n\n```javascript\nlet notes = [];\n\napp.post('/notes', (req, res) => {\n  const { title, content } = req.body;\n\n  // Validation\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required' });\n  }\n\n  // Check for unique title\n  const existingNote = notes.find(note => note.title === title);\n  if (existingNote) {\n    return res.status(400).json({ error: 'Title must be unique' });\n  }\n\n  // Create new note\n  const newNote = {\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n  notes.push(newNote);\n  res.status(201).json(newNote);\n});\n```\n\n## Reading Notes\n\nFor reading notes, I'll have two endpoints: one to get all notes and one to get a single note by title.\n\n### Get All Notes\n\n```javascript\napp.get('/notes', (req, res) => {\n  res.json(notes);\n});\n```\n\n### Get a Single Note by Title\n\n```javascript\napp.get('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const note = notes.find(n => n.title === title);\n  if (!note) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n  res.json(note);\n});\n```\n\n## Updating a Note\n\nTo update a note, I'll use PUT method on `/notes/:title`.\n\n```javascript\napp.put('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const { content } = req.body;\n\n  // Find the note\n  const noteIndex = notes.findIndex(n => n.title === title);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n\n  // Update content and timestamp\n  notes[noteIndex].content = content;\n  notes[noteIndex].timestamp = new Date().toISOString();\n  res.json(notes[noteIndex]);\n});\n```\n\n## Deleting a Note\n\nTo delete a note, I'll use DELETE method on `/notes/:title`.\n\n```javascript\napp.delete('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const noteIndex = notes.findIndex(n => n.title === title);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n\n  const deletedNote = notes.splice(noteIndex, 1)[0];\n  res.json(deletedNote);\n});\n```\n\n## Putting It All Together\n\nHere's the complete `app.js`:\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.use(express.json());\n\nlet notes = [];\n\n// Create a note\napp.post('/notes', (req, res) => {\n  const { title, content } = req.body;\n\n  if (!title || !content) {\n    return res.status(400).json({ error: 'Title and content are required' });\n  }\n\n  const existingNote = notes.find(note => note.title === title);\n  if (existingNote) {\n    return res.status(400).json({ error: 'Title must be unique' });\n  }\n\n  const newNote = {\n    title,\n    content,\n    timestamp: new Date().toISOString()\n  };\n  notes.push(newNote);\n  res.status(201).json(newNote);\n});\n\n// Get all notes\napp.get('/notes', (req, res) => {\n  res.json(notes);\n});\n\n// Get a single note by title\napp.get('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const note = notes.find(n => n.title === title);\n  if (!note) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n  res.json(note);\n});\n\n// Update a note\napp.put('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const { content } = req.body;\n\n  const noteIndex = notes.findIndex(n => n.title === title);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n\n  notes[noteIndex].content = content;\n  notes[noteIndex].timestamp = new Date().toISOString();\n  res.json(notes[noteIndex]);\n});\n\n// Delete a note\napp.delete('/notes/:title', (req, res) => {\n  const { title } = req.params;\n  const noteIndex = notes.findIndex(n => n.title === title);\n  if (noteIndex === -1) {\n    return res.status(404).json({ error: 'Note not found' });\n  }\n\n  const deletedNote = notes.splice(noteIndex, 1)[0];\n  res.json(deletedNote);\n});\n\napp.listen(port, () => {\n  console.log(`Server is running on port ${port}`);\n});\n```\n\nThis should cover all the requirements: creating, reading, updating, and deleting notes with validation for title and content."
    }
]