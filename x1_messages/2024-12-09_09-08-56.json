[
    {
        "role": "user",
        "content": "Write a Java program that simulates a simple banking system with classes for Bank, Account, and Customer. The bank should be able to create new accounts, deposit/withdraw funds, and display account balances."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a simple banking system in Java, we'll need to define three main classes: Bank, Account, and Customer. Each of these classes will have specific attributes and methods to perform operations like creating new accounts, depositing and withdrawing funds, and displaying account balances.\n\nHere's a step-by-step guide to building this system:\n\n### 1. Define the Customer Class\n\nThe Customer class will hold information about the bank's customers.\n\n```java\npublic class Customer {\n    private String name;\n    private String address;\n    private String phoneNumber;\n\n    public Customer(String name, String address, String phoneNumber) {\n        this.name = name;\n        this.address = address;\n        this.phoneNumber = phoneNumber;\n    }\n\n    // Getters and setters\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public String getAddress() {\n        return address;\n    }\n\n    public void setAddress(String address) {\n        this.address = address;\n    }\n\n    public String getPhoneNumber() {\n        return phoneNumber;\n    }\n\n    public void setPhoneNumber(String phoneNumber) {\n        this.phoneNumber = phoneNumber;\n    }\n}\n```\n\n### 2. Define the Account Class\n\nThe Account class will represent a bank account, associated with a customer.\n\n```java\npublic class Account {\n    private int accountNumber;\n    private double balance;\n    private Customer customer;\n\n    public Account(int accountNumber, double initialBalance, Customer customer) {\n        this.accountNumber = accountNumber;\n        this.balance = initialBalance;\n        this.customer = customer;\n    }\n\n    // Method to deposit funds\n    public void deposit(double amount) {\n        if (amount > 0) {\n            balance += amount;\n            System.out.println(\"Deposited: \" + amount);\n        } else {\n            System.out.println(\"Invalid amount\");\n        }\n    }\n\n    // Method to withdraw funds\n    public void withdraw(double amount) {\n        if (amount > 0 && amount <= balance) {\n            balance -= amount;\n            System.out.println(\"Withdrew: \" + amount);\n        } else {\n            System.out.println(\"Invalid amount or insufficient funds\");\n        }\n    }\n\n    // Method to display account balance\n    public void displayBalance() {\n        System.out.println(\"Account Balance: \" + balance);\n    }\n\n    // Getter for customer\n    public Customer getCustomer() {\n        return customer;\n    }\n}\n```\n\n### 3. Define the Bank Class\n\nThe Bank class will manage multiple accounts.\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class Bank {\n    private String name;\n    private Map<Integer, Account> accounts;\n\n    public Bank(String name) {\n        this.name = name;\n        this.accounts = new HashMap<>();\n    }\n\n    // Method to create a new account\n    public void createAccount(int accountNumber, double initialBalance, Customer customer) {\n        if (!accounts.containsKey(accountNumber)) {\n            Account newAccount = new Account(accountNumber, initialBalance, customer);\n            accounts.put(accountNumber, newAccount);\n            System.out.println(\"Account created successfully.\");\n        } else {\n            System.out.println(\"Account number already exists.\");\n        }\n    }\n\n    // Method to get an account by account number\n    public Account getAccount(int accountNumber) {\n        return accounts.get(accountNumber);\n    }\n\n    // Method to display all accounts\n    public void displayAccounts() {\n        for (Account account : accounts.values()) {\n            System.out.println(\"Account Number: \" + account.getAccountNumber());\n            System.out.println(\"Customer: \" + account.getCustomer().getName());\n            account.displayBalance();\n            System.out.println(\"------------------------\");\n        }\n    }\n}\n```\n\n### 4. Main Class to Test the Banking System\n\nFinally, we'll create a main class to test our banking system.\n\n```java\npublic class BankingSystem {\n    public static void main(String[] args) {\n        // Create a bank\n        Bank bank = new Bank(\"MyBank\");\n\n        // Create customers\n        Customer customer1 = new Customer(\"John Doe\", \"123 Street, City\", \"1234567890\");\n        Customer customer2 = new Customer(\"Jane Smith\", \"456 Avenue, City\", \"0987654321\");\n\n        // Create accounts\n        bank.createAccount(1001, 1000.0, customer1);\n        bank.createAccount(1002, 500.0, customer2);\n\n        // Deposit and withdraw funds\n        Account account1 = bank.getAccount(1001);\n        if (account1 != null) {\n            account1.deposit(500.0);\n            account1.withdraw(200.0);\n            account1.displayBalance();\n        }\n\n        // Display all accounts\n        bank.displayAccounts();\n    }\n}\n```\n\n### Explanation\n\n1. **Customer Class**: Holds customer details like name, address, and phone number.\n2. **Account Class**: Represents a bank account with an account number, balance, and associated customer. It includes methods to deposit, withdraw, and display balance.\n3. **Bank Class**: Manages multiple accounts using a HashMap. It can create new accounts, retrieve accounts by number, and display all accounts.\n4. **BankingSystem Class**: A test class to demonstrate the functionality of the banking system.\n\nThis simple banking system allows you to create accounts, deposit and withdraw funds, and display account balances. You can expand this system by adding more features like different types of accounts (savings, checking), interest calculations, and transaction histories."
    }
]