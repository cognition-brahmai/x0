[
    {
        "role": "user",
        "content": "Write a Python script to implement a binary search tree data structure. The script should include methods for inserting nodes, searching for a node with a specific value, and traversing the tree in-order, pre-order, and post-order."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements a binary search tree (BST) with methods for inserting nodes, searching for a specific value, and traversing the tree in in-order, pre-order, and post-order manners.\n\n```python\nclass Node:\n    def __init__(self, key):\n        self.left = None\n        self.right = None\n        self.val = key\n\nclass BST:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, key):\n        if self.root is None:\n            self.root = Node(key)\n        else:\n            self._insert_recursive(self.root, key)\n\n    def _insert_recursive(self, current, key):\n        if key < current.val:\n            if current.left is None:\n                current.left = Node(key)\n            else:\n                self._insert_recursive(current.left, key)\n        else:\n            if current.right is None:\n                current.right = Node(key)\n            else:\n                self._insert_recursive(current.right, key)\n\n    def search(self, key):\n        return self._search_recursive(self.root, key)\n\n    def _search_recursive(self, current, key):\n        if current is None:\n            return False\n        if key == current.val:\n            return True\n        elif key < current.val:\n            return self._search_recursive(current.left, key)\n        else:\n            return self._search_recursive(current.right, key)\n\n    def inorder_traversal(self):\n        result = []\n        self._inorder_recursive(self.root, result)\n        return result\n\n    def _inorder_recursive(self, current, result):\n        if current:\n            self._inorder_recursive(current.left, result)\n            result.append(current.val)\n            self._inorder_recursive(current.right, result)\n\n    def preorder_traversal(self):\n        result = []\n        self._preorder_recursive(self.root, result)\n        return result\n\n    def _preorder_recursive(self, current, result):\n        if current:\n            result.append(current.val)\n            self._preorder_recursive(current.left, result)\n            self._preorder_recursive(current.right, result)\n\n    def postorder_traversal(self):\n        result = []\n        self._postorder_recursive(self.root, result)\n        return result\n\n    def _postorder_recursive(self, current, result):\n        if current:\n            self._postorder_recursive(current.left, result)\n            self._postorder_recursive(current.right, result)\n            result.append(current.val)\n\n# Example usage:\nif __name__ == \"__main__\":\n    bst = BST()\n    elements = [50, 30, 70, 20, 40, 60, 80]\n    for elem in elements:\n        bst.insert(elem)\n\n    print(\"In-order traversal:\", bst.inorder_traversal())\n    print(\"Pre-order traversal:\", bst.preorder_traversal())\n    print(\"Post-order traversal:\", bst.postorder_traversal())\n    print(\"Search 40:\", bst.search(40))\n    print(\"Search 100:\", bst.search(100))\n```\n\n### Explanation:\n\n1. **Node Class**:\n   - Represents each node in the BST.\n   - Each node has a value (`val`), and pointers to left and right child nodes.\n\n2. **BST Class**:\n   - Manages the BST operations.\n   - **insert(key)**: Inserts a new node with the given key into the BST.\n   - **search(key)**: Searches for a node with the given key in the BST.\n   - **inorder_traversal()**: Returns a list of nodes in in-order traversal.\n   - **preorder_traversal()**: Returns a list of nodes in pre-order traversal.\n   - **postorder_traversal()**: Returns a list of nodes in post-order traversal.\n\n3. **Example Usage**:\n   - Demonstrates inserting elements into the BST.\n   - Performs in-order, pre-order, and post-order traversals.\n   - Searches for specific keys in the BST.\n\nThis script provides a basic implementation of a BST with essential operations."
    }
]