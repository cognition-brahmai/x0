[
    {
        "role": "user",
        "content": "Create a Node.js application that serves as a RESTful API for managing a collection of books (title, author, genre, publication year). The API should support CRUD operations and store the data in a PostgreSQL database. Implement authentication using JWT tokens.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "I'm going to walk you through creating a Node.js application that serves as a RESTful API for managing a collection of books. This API will support CRUD operations and store data in a PostgreSQL database. Additionally, we'll implement authentication using JWT tokens.\n\n### Prerequisites\n\n1. **Node.js** installed on your machine.\n2. **PostgreSQL** installed and running.\n3. Basic understanding of Node.js, Express, and PostgreSQL.\n\n### Project Structure\n\n```\nbook-api/\n\u251c\u2500\u2500 models/\n\u2502   \u2514\u2500\u2500 book.js\n\u251c\u2500\u2500 controllers/\n\u2502   \u251c\u2500\u2500 booksController.js\n\u2502   \u2514\u2500\u2500 authController.js\n\u251c\u2500\u2500 middleware/\n\u2502   \u2514\u2500\u2500 auth.js\n\u251c\u2500\u2500 routes/\n\u2502   \u251c\u2500\u2500 books.js\n\u2502   \u2514\u2500\u2500 auth.js\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 db.js\n\u251c\u2500\u2500 .env\n\u251c\u2500\u2500 app.js\n\u2514\u2500\u2500 package.json\n```\n\n### Step 1: Set Up the Project\n\n1. **Initialize the project:**\n\n    ```bash\n    mkdir book-api\n    cd book-api\n    npm init -y\n    ```\n\n2. **Install dependencies:**\n\n    ```bash\n    npm install express pgjsonwebtoken bcryptjs dotenv cors\n    ```\n\n3. **Create `.env` file:**\n\n    ```\n    DB_HOST=localhost\n    DB_USER=your_db_user\n    DB_PASSWORD=your_db_password\n    DB_NAME=book_api\n    JWT_SECRET=your_jwt_secret\n    ```\n\n### Step 2: Database Setup\n\n1. **Create the database:**\n\n    ```sql\n    createdb book_api\n    ```\n\n2. **Create the books table:**\n\n    ```sql\n    psql -d book_api -f schema.sql\n    ```\n\n    `schema.sql`:\n\n    ```sql\n    CREATE TABLE books (\n        id SERIAL PRIMARY KEY,\n        title VARCHAR(255) NOT NULL,\n        author VARCHAR(255) NOT NULL,\n        genre VARCHAR(100),\n        publication_year INT\n    );\n    ```\n\n### Step 3: Configure Database Connection\n\n1. **Create `config/db.js`:**\n\n    ```javascript\n    const { Pool } = require('pg');\n    require('dotenv').config();\n\n    const pool = new Pool({\n        host: process.env.DB_HOST,\n        user: process.env.DB_USER,\n        password: process.env.DB_PASSWORD,\n        database: process.env.DB_NAME\n    });\n\n    module.exports = pool;\n    ```\n\n### Step 4: Create Models\n\n1. **Create `models/book.js`:**\n\n    ```javascript\n    const pool = require('../config/db');\n\n    class Book {\n        static async getAll() {\n            const res = await pool.query('SELECT * FROM books');\n            return res.rows;\n        }\n\n        static async getOne(id) {\n            const res = await pool.query('SELECT * FROM books WHERE id = $1', [id]);\n            return res.rows[0];\n        }\n\n        static async create(book) {\n            const res = await pool.query(\n                'INSERT INTO books(title, author, genre, publication_year) VALUES($1, $2, $3, $4) RETURNING *',\n                [book.title, book.author, book.genre, book.publication_year]\n            );\n            return res.rows[0];\n        }\n\n        static async update(id, book) {\n            const res = await pool.query(\n                'UPDATE books SET title = $1, author = $2, genre = $3, publication_year = $4 WHERE id = $5 RETURNING *',\n                [book.title, book.author, book.genre, book.publication_year, id]\n            );\n            return res.rows[0];\n        }\n\n        static async delete(id) {\n            const res = await pool.query('DELETE FROM books WHERE id = $1', [id]);\n            return res.rowCount;\n        }\n    }\n\n    module.exports = Book;\n    ```\n\n### Step 5: Create Controllers\n\n1. **Create `controllers/booksController.js`:**\n\n    ```javascript\n    const Book = require('../models/book');\n\n    exports.getAllBooks = async (req, res) => {\n        try {\n            const books = await Book.getAll();\n            res.json(books);\n        } catch (err) {\n            res.status(500).json({ error: err.message });\n        }\n    };\n\n    exports.getBookById = async (req, res) => {\n        try {\n            const book = await Book.getOne(req.params.id);\n            if (!book) return res.status(404).json({ message: 'Book not found' });\n            res.json(book);\n        } catch (err) {\n            res.status(500).json({ error: err.message });\n        }\n    };\n\n    exports.createBook = async (req, res) => {\n        try {\n            const book = await Book.create(req.body);\n            res.status(201).json(book);\n        } catch (err) {\n            res.status(400).json({ error: err.message });\n        }\n    };\n\n    exports.updateBook = async (req, res) => {\n        try {\n            const book = await Book.update(req.params.id, req.body);\n            if (!book) return res.status(404).json({ message: 'Book not found' });\n            res.json(book);\n        } catch (err) {\n            res.status(400).json({ error: err.message });\n        }\n    };\n\n    exports.deleteBook = async (req, res) => {\n        try {\n            const deleted = await Book.delete(req.params.id);\n            if (deleted === 0) return res.status(404).json({ message: 'Book not found' });\n            res.json({ message: 'Book deleted successfully' });\n        } catch (err) {\n            res.status(500).json({ error: err.message });\n        }\n    };\n    ```\n\n2. **Create `controllers/authController.js`:**\n\n    ```javascript\n    const jwt = require('jsonwebtoken');\n    const bcrypt = require('bcryptjs');\n    require('dotenv').config();\n\n    // Dummy user for authentication\n    const user = {\n        id: 1,\n        username: 'admin',\n        password: '$2a$10$examplehashedpassword' // Replace with actual hashed password\n    };\n\n    exports.login = async (req, res) => {\n        const { username, password } = req.body;\n\n        if (username !== user.username) {\n            return res.status(401).json({ message: 'Invalid credentials' });\n        }\n\n        try {\n            const isMatch = await bcrypt.compare(password, user.password);\n            if (!isMatch) {\n                return res.status(401).json({ message: 'Invalid credentials' });\n            }\n\n            const token = jwt.sign({ id: user.id, username: user.username }, process.env.JWT_SECRET, { expiresIn: '1h' });\n            res.json({ token });\n        } catch (err) {\n            res.status(500).json({ error: err.message });\n        }\n    };\n    ```\n\n### Step 6: Create Middleware\n\n1. **Create `middleware/auth.js`:**\n\n    ```javascript\n    const jwt = require('jsonwebtoken');\n    require('dotenv').config();\n\n    module.exports = (req, res, next) => {\n        const token = req.header('Authorization').replace('Bearer ', '');\n        if (!token) return res.status(401).json({ message: 'Access denied. No token provided.' });\n\n        try {\n            const decoded = jwt.verify(token, process.env.JWT_SECRET);\n            req.user = decoded;\n            next();\n        } catch (err) {\n            res.status(400).json({ error: 'Invalid token.' });\n        }\n    };\n    ```\n\n### Step 7: Create Routes\n\n1. **Create `routes/books.js`:**\n\n    ```javascript\n    const express = require('express');\n    const router = express.Router();\n    const booksController = require('../controllers/booksController');\n    const auth = require('../middleware/auth');\n\n    router.get('/', auth, booksController.getAllBooks);\n    router.get('/:id', auth, booksController.getBookById);\n    router.post('/', auth, booksController.createBook);\n    router.put('/:id', auth, booksController.updateBook);\n    router.delete('/:id', auth, booksController.deleteBook);\n\n    module.exports = router;\n    ```\n\n2. **Create `routes/auth.js`:**\n\n    ```javascript\n    const express = require('express');\n    const router = express.Router();\n    const authController = require('../controllers/authController');\n\n    router.post('/login', authController.login);\n\n    module.exports = router;\n    ```\n\n### Step 8: Set Up the Express App\n\n1. **Create `app.js`:**\n\n    ```javascript\n    const express = require('express');\n    const cors = require('cors');\n    const booksRouter = require('./routes/books');\n    const authRouter = require('./routes/auth');\n\n    const app = express();\n    app.use(cors());\n    app.use(express.json());\n\n    app.use('/api/books', booksRouter);\n    app.use('/api/auth', authRouter);\n\n    const PORT = process.env.PORT || 3000;\n    app.listen(PORT, () => {\n        console.log(`Server running on port ${PORT}`);\n    });\n    ```\n\n### Step 9: Run the Application\n\n1. **Start the server:**\n\n    ```bash\n    node app.js\n    ```\n\n2. **Test the API using tools like Postman or curl.**\n\n### Authentication Flow\n\n1. **Login:**\n\n    - Send a POST request to `/api/auth/login` with username and password.\n    - Receive a JWT token in the response.\n\n2. **Authorize Requests:**\n\n    - Include the JWT token in the Authorization header for protected routes.\n    - Example: `Authorization: Bearer <token>`\n\n### Notes\n\n- **Security:** This is a basic implementation. In a production environment, ensure to handle errors gracefully, validate inputs, and secure your database credentials.\n- **User Management:** For a real application, you'd need to manage multiple users and their roles.\n- **Environment Variables:** Use environment variables to store sensitive information like database credentials and JWT secrets.\n\nThis setup provides a solid foundation for a book management API with authentication using JWT tokens."
    }
]