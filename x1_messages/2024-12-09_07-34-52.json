[
    {
        "role": "user",
        "content": "Implement a simple HTTP server in Python that serves static files from a given directory and caches the file contents using Memcached. The server should allow users to specify the listening IP, port, and cache duration via command-line arguments.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Implementing a simple HTTP server in Python that serves static files from a specified directory and utilizes Memcached for caching file contents involves several steps. We'll use Python's built-in `http.server` module for the server and the `pymemcache` library to interact with Memcached.\n\n### Prerequisites\n\n1. **Python 3** installed on your system.\n2. **Memcached** server running.\n3. **pymemcache** library installed. You can install it using pip:\n   ```bash\n   pip install pymemcache\n   ```\n\n### Server Implementation\n\nWe'll create a command-line tool that accepts the listening IP, port, and cache duration as arguments. The server will serve files from the current directory by default, but you can modify it to accept a directory path as well.\n\n#### Code\n\n```python\nimport argparse\nimport http.server\nimport socketserver\nimport os\nfrom pymemcache.client.base import Client\n\nclass CachedHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):\n    def __init__(self, *args, cache_client, cache_duration, **kwargs):\n        self.cache_client = cache_client\n        self.cache_duration = cache_duration\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        path = self.path.strip('/')\n        if path == '':\n            path = 'index.html'\n        \n        # Check if file exists\n        file_path = os.path.join(self.directory, path)\n        if not os.path.exists(file_path):\n            self.send_error(404, \"File not found\")\n            return\n        \n        # Check cache\n        cached_content = self.cache_client.get(path)\n        if cached_content is not None:\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(cached_content)\n            return\n        \n        # Serve file and cache it\n        with open(file_path, 'rb') as file:\n            content = file.read()\n            self.cache_client.set(path, content, expire=self.cache_duration)\n            self.send_response(200)\n            self.end_headers()\n            self.wfile.write(content)\n\ndef run_server(ip, port, cache_duration, directory):\n    handler = CachedHTTPRequestHandler\n    handler.cache_client = Client(('localhost', 11211))  # Memcached client\n    handler.cache_duration = cache_duration\n    handler.directory = directory  # Set the directory to serve files from\n    \n    with socketserver.TCPServer((ip, port), handler) as httpd:\n        print(f\"Serving at {ip}:{port} with cache duration {cache_duration} seconds\")\n        httpd.serve_forever()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description=\"Simple HTTP server with Memcached caching\")\n    parser.add_argument(\"ip\", help=\"Listening IP address\")\n    parser.add_argument(\"port\", type=int, help=\"Listening port number\")\n    parser.add_argument(\"cache_duration\", type=int, help=\"Cache duration in seconds\")\n    parser.add_argument(\"--dir\", default=os.getcwd(), help=\"Directory to serve files from\")\n    \n    args = parser.parse_args()\n    \n    run_server(args.ip, args.port, args.cache_duration, args.dir)\n```\n\n### Explanation\n\n1. **Argument Parsing**: We use `argparse` to handle command-line arguments for IP, port, cache duration, and optional directory path.\n2. **Request Handler**: `CachedHTTPRequestHandler` inherits from `SimpleHTTPRequestHandler` and overrides the `do_GET` method to check Memcached for cached file contents before serving the file. If the file is not cached, it reads the file, caches its content, and then serves it.\n3. **Memcached Client**: We use `pymemcache` to interact with the Memcached server. The client is initialized with the Memcached server's address and port.\n4. **Server Setup**: We set up a `TCPServer` with the custom request handler and start the server to listen on the specified IP and port.\n\n### Usage\n\nTo run the server, execute the script with the required arguments:\n\n```bash\npython server.py 127.0.0.1 8000 3600 --dir=/path/to/static/files\n```\n\nThis command starts the server on `127.0.0.1` at port `8000`, with a cache duration of `3600` seconds, serving files from `/path/to/static/files`. If the directory is not specified, it defaults to the current working directory.\n\n### Notes\n\n- Ensure that Memcached is running on the specified host and port (default is `localhost:11211`).\n- This implementation caches file contents in bytes. Adjustments may be needed based on specific file types or encoding requirements.\n- For production use, consider more robust solutions and additional features like error handling, logging, and security measures."
    }
]