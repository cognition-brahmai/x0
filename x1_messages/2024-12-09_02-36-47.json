[
    {
        "role": "user",
        "content": "Write a C++ program that implements the binary search algorithm on a sorted array of integers. The program should return the index of the target element or -1 if not found.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C++ program that implements the binary search algorithm on a sorted array of integers. The program will take a sorted array and a target value as input, and it will return the index of the target element if found, otherwise it will return -1.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nint binarySearch(const std::vector<int>& arr, int target) {\n    int left = 0;\n    int right = arr.size() - 1;\n    \n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        \n        // Check if target is present at mid\n        if (arr[mid] == target) {\n            return mid;\n        }\n        \n        // If target is greater, ignore left half\n        if (arr[mid] < target) {\n            left = mid + 1;\n        }\n        // If target is smaller, ignore right half\n        else {\n            right = mid - 1;\n        }\n    }\n    \n    // Target is not present in array\n    return -1;\n}\n\nint main() {\n    std::vector<int> arr = {1, 3, 5, 7, 9, 11, 13, 15};\n    int target;\n    \n    std::cout << \"Enter the target value: \";\n    std::cin >> target;\n    \n    int result = binarySearch(arr, target);\n    \n    if (result != -1) {\n        std::cout << \"Element found at index: \" << result << std::endl;\n    } else {\n        std::cout << \"Element not found in the array.\" << std::endl;\n    }\n    \n    return 0;\n}\n```\n\n### Explanation:\n1. **binarySearch Function**:\n   - This function takes a constant reference to a sorted vector of integers and a target value.\n   - It initializes two pointers, `left` and `right`, to the start and end of the array, respectively.\n   - It enters a loop where it calculates the middle index `mid` and checks if the middle element is the target.\n   - If the target is greater than the middle element, it adjusts the `left` pointer to `mid + 1`.\n   - If the target is smaller, it adjusts the `right` pointer to `mid - 1`.\n   - If the target is found, it returns the index; otherwise, it returns -1 after the loop ends.\n\n2. **main Function**:\n   - It defines a sorted array (as a `std::vector<int>`).\n   - It prompts the user to enter the target value.\n   - It calls the `binarySearch` function with the array and target.\n   - It prints the result based on whether the target was found or not.\n\nThis program demonstrates the efficient binary search algorithm, which operates in O(log n) time complexity, making it suitable for large sorted datasets."
    }
]