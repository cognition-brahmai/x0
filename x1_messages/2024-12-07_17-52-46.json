[
    {
        "role": "user",
        "content": "Create a C# console application that interacts with Azure Storage. The application should be able to upload files to a specified blob container, list all blobs within a container, download a blob to local storage, and delete a blob from the container. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to walk you through creating a C# console application that interacts with Azure Storage. We'll be performing operations like uploading files to a blob container, listing all blobs in a container, downloading a blob to local storage, and deleting a blob from the container.\n\nFirst things first, you'll need to have the Azure Storage Blob client library for .NET. You can install this via NuGet in your project. If you're using Visual Studio, you can right-click on your project, select \"Manage NuGet Packages,\" and search for \"Azure.Storage.Blobs.\" Install the latest version available.\n\nOnce you have the package installed, you'll need to import the necessary namespaces at the top of your C# file:\n\n```csharp\nusing Azure.Storage.Blobs;\nusing Azure.Storage.Blobs.Models;\nusing System;\nusing System.IO;\nusing System.Threading.Tasks;\n```\n\nNext, you'll need your connection string to Azure Storage. You can find this in the Azure portal under your storage account settings. Make sure to keep this string secure as it grants access to your storage account.\n\nFor the sake of this example, I'll assume you have your connection string stored in an environment variable named \"AzureStorageConnectionString.\" Here's how you can retrieve it:\n\n```csharp\nstring connectionString = Environment.GetEnvironmentVariable(\"AzureStorageConnectionString\");\n```\n\nNow, let's create a class to handle all our blob operations. I'll name it `BlobManager`.\n\n```csharp\npublic class BlobManager\n{\n    private readonly BlobServiceClient _blobServiceClient;\n    private readonly string _containerName;\n\n    public BlobManager(string connectionString, string containerName)\n    {\n        _blobServiceClient = new BlobServiceClient(connectionString);\n        _containerName = containerName;\n    }\n\n    public async Task UploadFileAsync(string localPath, string blobName)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(blobName);\n\n        using var fileStream = File.OpenRead(localPath);\n        await blobClient.UploadAsync(fileStream, overwrite: true);\n        Console.WriteLine($\"Uploaded {localPath} to {blobName}\");\n    }\n\n    public async Task ListBlobsAsync()\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        await foreach (var blob in containerClient.GetBlobsAsync())\n        {\n            Console.WriteLine(blob.Name);\n        }\n    }\n\n    public async Task DownloadBlobAsync(string blobName, string localPath)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(blobName);\n\n        using var fileStream = File.OpenWrite(localPath);\n        await blobClient.DownloadToAsync(fileStream);\n        Console.WriteLine($\"Downloaded {blobName} to {localPath}\");\n    }\n\n    public async Task DeleteBlobAsync(string blobName)\n    {\n        var containerClient = _blobServiceClient.GetBlobContainerClient(_containerName);\n        var blobClient = containerClient.GetBlobClient(blobName);\n        await blobClient.DeleteAsync();\n        Console.WriteLine($\"Deleted {blobName}\");\n    }\n}\n```\n\nIn the `BlobManager` class, we initialize the `BlobServiceClient` with the connection string and specify the container name. Each method corresponds to one of the operations you requested:\n\n1. **UploadFileAsync**: Uploads a local file to a specified blob name in the container.\n2. **ListBlobsAsync**: Lists all blobs in the container.\n3. **DownloadBlobAsync**: Downloads a specified blob to a local path.\n4. **DeleteBlobAsync**: Deletes a specified blob from the container.\n\nNow, in your `Program.cs`, you can create an instance of `BlobManager` and call these methods based on user input or directly in the code for testing.\n\nHere's an example of how you might use this class:\n\n```csharp\nclass Program\n{\n    static async Task Main(string[] args)\n    {\n        string connectionString = Environment.GetEnvironmentVariable(\"AzureStorageConnectionString\");\n        string containerName = \"your-container-name\";\n\n        var blobManager = new BlobManager(connectionString, containerName);\n\n        // Upload a file\n        await blobManager.UploadFileAsync(\"path/to/local/file.txt\", \"file.txt\");\n\n        // List blobs\n        await blobManager.ListBlobsAsync();\n\n        // Download a blob\n        await blobManager.DownloadBlobAsync(\"file.txt\", \"path/to/downloaded/file.txt\");\n\n        // Delete a blob\n        await blobManager.DeleteBlobAsync(\"file.txt\");\n    }\n}\n```\n\nMake sure to replace `\"your-container-name\"`, `\"path/to/local/file.txt\"`, and other placeholders with actual values.\n\nThis should give you a good starting point for interacting with Azure Blob Storage using C#. Let me know if you have any questions or need further assistance!"
    }
]