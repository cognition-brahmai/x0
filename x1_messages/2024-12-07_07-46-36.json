[
    {
        "role": "user",
        "content": "Develop a Node.js script that connects to a Memcached server, stores key-value pairs, retrieves values by keys, and deletes entries based on user input."
    },
    {
        "role": "assistant",
        "content": "I'm here to help you with your Node.js and Memcached task. Let's get started!\n\nFirst, you'll need to set up a Node.js environment and install the necessary packages. You'll need the `memjs` package to interact with Memcached. If you haven't already installed Node.js, you can download it from [nodejs.org](https://nodejs.org/).\n\nOnce Node.js is installed, create a new directory for your project and initialize it with `npm init`. This will create a `package.json` file.\n\nNext, install the `memjs` package using npm:\n\n```bash\nnpm install memjs\n```\n\nNow, let's create a simple Node.js script that connects to a Memcached server, stores key-value pairs, retrieves values by keys, and deletes entries based on user input.\n\nHere's a basic outline of what the script will do:\n\n1. Connect to the Memcached server.\n2. Prompt the user for actions: store, retrieve, or delete.\n3. Based on the user's input, perform the corresponding operation.\n\nWe'll use the `readline` module to handle user input, which is a built-in Node.js module.\n\nLet's start by setting up the connection to the Memcached server.\n\nFirst, require the necessary modules:\n\n```javascript\nconst memjs = require('memjs');\nconst readline = require('readline');\n```\n\nYou'll need to know the Memcached server's host and port. For this example, let's assume the Memcached server is running locally on the default port (11211).\n\nCreate a connection to the Memcached server:\n\n```javascript\nconst client = memjs.Client.create('127.0.0.1:11211');\n```\n\nNow, let's set up the readline interface to interact with the user:\n\n```javascript\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n```\n\nWe'll create a function to prompt the user for actions:\n\n```javascript\nfunction promptUser() {\n  rl.question('Enter action (store, retrieve, delete, exit): ', (action) => {\n    switch (action) {\n      case 'store':\n        handleStore();\n        break;\n      case 'retrieve':\n        handleRetrieve();\n        break;\n      case 'delete':\n        handleDelete();\n        break;\n      case 'exit':\n        rl.close();\n        break;\n      default:\n        console.log('Invalid action. Please try again.');\n        promptUser();\n    }\n  });\n}\n```\n\nNow, let's define the functions for each action.\n\n**Store Action:**\n\nThis function will prompt the user for a key and a value, then store them in Memcached.\n\n```javascript\nfunction handleStore() {\n  rl.question('Enter key: ', (key) => {\n    rl.question('Enter value: ', (value) => {\n      client.set(key, value, { expires: 0 }, (error) => {\n        if (error) {\n          console.error('Error storing data:', error);\n        } else {\n          console.log('Data stored successfully.');\n        }\n        promptUser();\n      });\n    });\n  });\n}\n```\n\n**Retrieve Action:**\n\nThis function will prompt the user for a key and retrieve the corresponding value from Memcached.\n\n```javascript\nfunction handleRetrieve() {\n  rl.question('Enter key: ', (key) => {\n    client.get(key, (error, value) => {\n      if (error) {\n        console.error('Error retrieving data:', error);\n      } else if (value) {\n        console.log('Value:', value.toString());\n      } else {\n        console.log('Key not found.');\n      }\n      promptUser();\n    });\n  });\n}\n```\n\n**Delete Action:**\n\nThis function will prompt the user for a key and delete the corresponding entry from Memcached.\n\n```javascript\nfunction handleDelete() {\n  rl.question('Enter key: ', (key) => {\n    client.delete(key, (error) => {\n      if (error) {\n        console.error('Error deleting data:', error);\n      } else {\n        console.log('Data deleted successfully.');\n      }\n      promptUser();\n    });\n  });\n}\n```\n\nFinally, start the prompt:\n\n```javascript\npromptUser();\n```\n\nPutting it all together, here's the complete script:\n\n```javascript\nconst memjs = require('memjs');\nconst readline = require('readline');\n\nconst client = memjs.Client.create('127.0.0.1:11211');\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nfunction promptUser() {\n  rl.question('Enter action (store, retrieve, delete, exit): ', (action) => {\n    switch (action) {\n      case 'store':\n        handleStore();\n        break;\n      case 'retrieve':\n        handleRetrieve();\n        break;\n      case 'delete':\n        handleDelete();\n        break;\n      case 'exit':\n        rl.close();\n        break;\n      default:\n        console.log('Invalid action. Please try again.');\n        promptUser();\n    }\n  });\n}\n\nfunction handleStore() {\n  rl.question('Enter key: ', (key) => {\n    rl.question('Enter value: ', (value) => {\n      client.set(key, value, { expires: 0 }, (error) => {\n        if (error) {\n          console.error('Error storing data:', error);\n        } else {\n          console.log('Data stored successfully.');\n        }\n        promptUser();\n      });\n    });\n  });\n}\n\nfunction handleRetrieve() {\n  rl.question('Enter key: ', (key) => {\n    client.get(key, (error, value) => {\n      if (error) {\n        console.error('Error retrieving data:', error);\n      } else if (value) {\n        console.log('Value:', value.toString());\n      } else {\n        console.log('Key not found.');\n      }\n      promptUser();\n    });\n  });\n}\n\nfunction handleDelete() {\n  rl.question('Enter key: ', (key) => {\n    client.delete(key, (error) => {\n      if (error) {\n        console.error('Error deleting data:', error);\n      } else {\n        console.log('Data deleted successfully.');\n      }\n      promptUser();\n    });\n  });\n}\n\npromptUser();\n```\n\nThis script provides a simple command-line interface to interact with a Memcached server. You can store, retrieve, and delete key-value pairs based on user input.\n\nMake sure your Memcached server is running and accessible at the specified host and port before executing this script.\n\nIf you have any questions or need further assistance, feel free to ask!"
    }
]