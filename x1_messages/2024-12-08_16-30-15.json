[
    {
        "role": "user",
        "content": "Write a Golang program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and a specified position in the list.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a singly linked list in Go involves creating a structure for the nodes and defining methods to manipulate the list. Below is a step-by-step guide and a complete program that demonstrates how to create a singly linked list with methods to add elements at the beginning, end, and at a specified position.\n\n### Step-by-Step Explanation\n\n1. **Define the Node Structure:**\n   - Each node in the linked list will hold a value and a pointer to the next node.\n\n2. **Define the LinkedList Structure:**\n   - This will hold a pointer to the head of the list.\n\n3. **Implement Methods:**\n   - `addToBeginning(val int)`: Adds a new node with the given value to the start of the list.\n   - `addToEnd(val int)`: Adds a new node with the given value to the end of the list.\n   - `addAtPosition(val int, pos int)`: Adds a new node with the given value at the specified position in the list.\n\n4. **Helper Methods:**\n   - `length() int`: Returns the current length of the list.\n   - `display()`: Prints the elements of the list.\n\n### Complete Golang Program\n\n```go\npackage main\n\nimport \"fmt\"\n\n// Node represents a node in the singly linked list.\ntype Node struct {\n    Value int\n    Next  *Node\n}\n\n// LinkedList represents a singly linked list.\ntype LinkedList struct {\n    Head *Node\n}\n\n// addToBeginning inserts a new node with the given value at the beginning of the list.\nfunc (ll *LinkedList) addToBeginning(val int) {\n    newNode := &Node{Value: val, Next: ll.Head}\n    ll.Head = newNode\n}\n\n// addToEnd inserts a new node with the given value at the end of the list.\nfunc (ll *LinkedList) addToEnd(val int) {\n    newNode := &Node{Value: val, Next: nil}\n    if ll.Head == nil {\n        ll.Head = newNode\n        return\n    }\n    current := ll.Head\n    for current.Next != nil {\n        current = current.Next\n    }\n    current.Next = newNode\n}\n\n// addAtPosition inserts a new node with the given value at the specified position.\n// Position is 0-based index.\nfunc (ll *LinkedList) addAtPosition(val int, pos int) {\n    if pos == 0 {\n        ll.addToBeginning(val)\n        return\n    }\n    newNode := &Node{Value: val, Next: nil}\n    current := ll.Head\n    for i := 0; i < pos-1; i++ {\n        if current == nil {\n            fmt.Println(\"Position out of range\")\n            return\n        }\n        current = current.Next\n    }\n    if current == nil {\n        fmt.Println(\"Position out of range\")\n        return\n    }\n    newNode.Next = current.Next\n    current.Next = newNode\n}\n\n// length returns the number of nodes in the list.\nfunc (ll *LinkedList) length() int {\n    count := 0\n    current := ll.Head\n    for current != nil {\n        count++\n        current = current.Next\n    }\n    return count\n}\n\n// display prints the elements of the list.\nfunc (ll *LinkedList) display() {\n    current := ll.Head\n    for current != nil {\n        fmt.Printf(\"%d -> \", current.Value)\n        current = current.Next\n    }\n    fmt.Println(\"nil\")\n}\n\nfunc main() {\n    ll := &LinkedList{}\n    ll.addToEnd(1)\n    ll.addToEnd(2)\n    ll.addToEnd(3)\n    fmt.Println(\"Original list:\")\n    ll.display()\n\n    ll.addToBeginning(0)\n    fmt.Println(\"After adding 0 at the beginning:\")\n    ll.display()\n\n    ll.addAtPosition(4, 3)\n    fmt.Println(\"After adding 4 at position 3:\")\n    ll.display()\n\n    ll.addAtPosition(5, 5)\n    fmt.Println(\"After trying to add 5 at position 5 (out of range):\")\n    ll.display()\n\n    ll.addAtPosition(6, ll.length())\n    fmt.Println(\"After adding 6 at the end using addAtPosition:\")\n    ll.display()\n}\n```\n\n### Explanation of the Code\n\n1. **Node Structure:**\n   - `Value`: Holds the integer value of the node.\n   - `Next`: Pointer to the next node in the list.\n\n2. **LinkedList Structure:**\n   - `Head`: Pointer to the first node in the list.\n\n3. **Methods:**\n   - `addToBeginning(val int)`: Creates a new node and sets its next pointer to the current head, then updates the head.\n   - `addToEnd(val int)`: Traverses the list to the last node and appends a new node there.\n   - `addAtPosition(val int, pos int)`: Inserts a new node at the specified position. If the position is 0, it adds the node at the beginning.\n   - `length() int`: Counts the number of nodes in the list.\n   - `display()`: Prints the values of all nodes in the list.\n\n4. **Main Function:**\n   - Demonstrates adding elements at the beginning, end, and at specified positions, and handles out-of-range positions gracefully.\n\nThis program should give you a good starting point for working with singly linked lists in Go. Let me know if you have any questions or need further clarification!"
    }
]