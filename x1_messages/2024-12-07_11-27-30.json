[
    {
        "role": "user",
        "content": "Implement a C++ class for a basic stack data structure with push, pop, and peek methods.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple implementation of a stack data structure in C++. This class includes the basic operations such as push (to add an element), pop (to remove the top element), and peek (to view the top element without removing it).\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Stack {\nprivate:\n    std::vector<int> elements;\n\npublic:\n    // Push an element onto the stack\n    void push(int value) {\n        elements.push_back(value);\n    }\n\n    // Pop the top element from the stack\n    void pop() {\n        if (!elements.empty()) {\n            elements.pop_back();\n        } else {\n            std::cout << \"Stack is empty. Cannot pop.\" << std::endl;\n        }\n    }\n\n    // Peek at the top element of the stack without removing it\n    int peek() const {\n        if (!elements.empty()) {\n            return elements.back();\n        } else {\n            std::cout << \"Stack is empty. Cannot peek.\" << std::endl;\n            return -1; // Assuming -1 is not a valid value in the stack\n        }\n    }\n\n    // Check if the stack is empty\n    bool isEmpty() const {\n        return elements.empty();\n    }\n};\n\nint main() {\n    Stack stack;\n\n    stack.push(10);\n    stack.push(20);\n    stack.push(30);\n\n    std::cout << \"Top element is: \" << stack.peek() << std::endl; // Output: 30\n\n    stack.pop();\n\n    std::cout << \"Top element after pop is: \" << stack.peek() << std::endl; // Output: 20\n\n    std::cout << \"Is stack empty? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Output: No\n\n    stack.pop();\n    stack.pop();\n\n    std::cout << \"Is stack empty after popping all elements? \" << (stack.isEmpty() ? \"Yes\" : \"No\") << std::endl; // Output: Yes\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class Definition**:\n   - We use `std::vector<int>` to store the elements of the stack because vectors provide dynamic array functionality which is perfect for stack operations.\n\n2. **Push Operation**:\n   - The `push` method adds an element to the end of the vector, which represents the top of the stack.\n\n3. **Pop Operation**:\n   - The `pop` method removes the last element from the vector if the stack is not empty. If the stack is empty, it prints a message indicating that the stack is empty.\n\n4. **Peek Operation**:\n   - The `peek` method returns the last element of the vector without removing it, representing the top of the stack. If the stack is empty, it prints a message and returns -1 (assuming -1 is not a valid stack value).\n\n5. **IsEmpty Operation**:\n   - The `isEmpty` method checks if the vector is empty and returns a boolean value accordingly.\n\n6. **Main Function**:\n   - Demonstrates the usage of the stack class by pushing elements, peeking at the top element, popping elements, and checking if the stack is empty."
    }
]