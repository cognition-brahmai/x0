[
    {
        "role": "user",
        "content": "In Python, implement a function that sorts a list of numbers using bubble sort algorithm. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements and swaps them if they are in the wrong order. The pass through the list is repeated until the list is sorted.\n\nHere's how you can implement bubble sort in Python:\n\n```python\ndef bubble_sort(numbers):\n    n = len(numbers)\n    for i in range(n):\n        # Track if any swaps happen in this pass\n        swapped = False\n        for j in range(0, n - i - 1):\n            if numbers[j] > numbers[j + 1]:\n                # Swap the elements\n                numbers[j], numbers[j + 1] = numbers[j + 1], numbers[j]\n                swapped = True\n        # If no two elements were swapped in the inner loop, then break\n        if not swapped:\n            break\n    return numbers\n```\n\nLet me explain what's happening here:\n\n1. We start by getting the length of the list, `n`.\n\n2. We then iterate over the list `n` times. For each pass `i`, the largest `i` elements are already in their correct positions, so we don't need to check them again. That's why the inner loop runs from `0` to `n - i - 1`.\n\n3. In the inner loop, we compare each pair of adjacent elements. If the current element is greater than the next one, we swap them.\n\n4. We use a flag `swapped` to check if any swaps occurred in the inner loop. If no swaps happened, it means the list is already sorted, and we can terminate the algorithm early.\n\nYou can use this function by passing a list of numbers to it. For example:\n\n```python\nnumbers = [64, 34, 25, 12, 22, 11, 90]\nsorted_numbers = bubble_sort(numbers)\nprint(\"Sorted list is:\", sorted_numbers)\n```\n\nThis will output:\n\n```\nSorted list is: [11, 12, 22, 25, 34, 64, 90]\n```\n\nBubble sort is not the most efficient sorting algorithm for large lists, as its average and worst-case complexity are O(n\u00b2), where n is the number of items. However, it's simple to understand and implement, making it a good starting point for learning about sorting algorithms.\n\nIf you have any questions or need further clarification, feel free to ask!"
    }
]