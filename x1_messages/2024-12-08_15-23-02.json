[
    {
        "role": "user",
        "content": "Implement a C++ class called \"Matrix\" that represents a 2D matrix of integers. Include member functions for matrix addition, subtraction, multiplication, and transpose. Also, overload the appropriate operators to perform these operations on Matrix objects.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an implementation of a `Matrix` class in C++ that represents a 2D matrix of integers. It includes member functions for addition, subtraction, multiplication, and transpose, along with overloaded operators for these operations.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass Matrix {\nprivate:\n    std::vector<std::vector<int>> data;\n    size_t rows, cols;\n\npublic:\n    // Constructor to create a matrix of given rows and columns\n    Matrix(size_t r, size_t c) : rows(r), cols(c), data(r, std::vector<int>(c, 0)) {}\n\n    // Constructor to initialize with a 2D vector\n    Matrix(const std::vector<std::vector<int>>& m) : data(m), rows(m.size()), cols(m[0].size()) {}\n\n    // Get the number of rows\n    size_t getRows() const { return rows; }\n\n    // Get the number of columns\n    size_t getCols() const { return cols; }\n\n    // Access element at position (i,j)\n    int& at(size_t i, size_t j) {\n        return data[i][j];\n    }\n\n    // Const access element at position (i,j)\n    int at(size_t i, size_t j) const {\n        return data[i][j];\n    }\n\n    // Add two matrices\n    Matrix operator+(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions do not match for addition.\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] + other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Subtract two matrices\n    Matrix operator-(const Matrix& other) const {\n        if (rows != other.rows || cols != other.cols) {\n            throw std::invalid_argument(\"Matrices dimensions do not match for subtraction.\");\n        }\n        Matrix result(rows, cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[i][j] = data[i][j] - other.data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Multiply two matrices\n    Matrix operator*(const Matrix& other) const {\n        if (cols != other.rows) {\n            throw std::invalid_argument(\"Number of columns in first matrix must be equal to number of rows in second matrix for multiplication.\");\n        }\n        Matrix result(rows, other.cols);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < other.cols; ++j) {\n                for (size_t k = 0; k < cols; ++k) {\n                    result.data[i][j] += data[i][k] * other.data[k][j];\n                }\n            }\n        }\n        return result;\n    }\n\n    // Transpose of the matrix\n    Matrix transpose() const {\n        Matrix result(cols, rows);\n        for (size_t i = 0; i < rows; ++i) {\n            for (size_t j = 0; j < cols; ++j) {\n                result.data[j][i] = data[i][j];\n            }\n        }\n        return result;\n    }\n\n    // Overload output stream operator for easy printing\n    friend std::ostream& operator<<(std::ostream& os, const Matrix& m) {\n        for (const auto& row : m.data) {\n            for (int val : row) {\n                os << val << \" \";\n            }\n            os << std::endl;\n        }\n        return os;\n    }\n};\n\nint main() {\n    Matrix m1(2, 3);\n    m1.at(0, 0) = 1;\n    m1.at(0, 1) = 2;\n    m1.at(0, 2) = 3;\n    m1.at(1, 0) = 4;\n    m1.at(1, 1) = 5;\n    m1.at(1, 2) = 6;\n\n    Matrix m2(2, 3);\n    m2.at(0, 0) = 7;\n    m2.at(0, 1) = 8;\n    m2.at(0, 2) = 9;\n    m2.at(1, 0) = 10;\n    m2.at(1, 1) = 11;\n    m2.at(1, 2) = 12;\n\n    Matrix m3(3, 2);\n    m3.at(0, 0) = 13;\n    m3.at(0, 1) = 14;\n    m3.at(1, 0) = 15;\n    m3.at(1, 1) = 16;\n    m3.at(2, 0) = 17;\n    m3.at(2, 1) = 18;\n\n    std::cout << \"Matrix m1:\" << std::endl << m1 << std::endl;\n    std::cout << \"Matrix m2:\" << std::endl << m2 << std::endl;\n    std::cout << \"Matrix m3:\" << std::endl << m3 << std::endl;\n\n    Matrix sum = m1 + m2;\n    std::cout << \"Sum of m1 and m2:\" << std::endl << sum << std::endl;\n\n    Matrix diff = m1 - m2;\n    std::cout << \"Difference of m1 and m2:\" << std::endl << diff << std::endl;\n\n    Matrix product = m1 * m3;\n    std::cout << \"Product of m1 and m3:\" << std::endl << product << std::endl;\n\n    Matrix transpose_m1 = m1.transpose();\n    std::cout << \"Transpose of m1:\" << std::endl << transpose_m1 << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Constructor**: Two constructors are provided\u2014one to create a matrix of specified dimensions initialized to zero, and another to initialize the matrix with a given 2D vector.\n\n2. **Getters**: Methods to get the number of rows and columns.\n\n3. **Element Access**: `at` method to access and modify elements.\n\n4. **Operator Overloads**:\n   - `+` for matrix addition.\n   - `-` for matrix subtraction.\n   - `*` for matrix multiplication.\n\n5. **Transpose**: Method to compute the transpose of the matrix.\n\n6. **Output Stream Operator**: Overloaded `<<` operator to easily print matrices.\n\nThis implementation ensures that operations are performed correctly based on matrix algebra rules and includes checks for dimension compatibility."
    }
]