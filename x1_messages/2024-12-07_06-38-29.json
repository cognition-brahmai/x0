[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for adding elements at the beginning, end, and any given position, along with deleting elements by value or position."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python program that implements a singly linked list data structure. It includes methods for adding elements at the beginning, end, and any given position, as well as deleting elements by value or position.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def add_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def add_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def add_at_position(self, position, data):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if position == 0:\n            self.add_at_beginning(data)\n            return\n        new_node = Node(data)\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current:\n            print(\"Position out of range.\")\n            return\n        new_node.next = current.next\n        current.next = new_node\n\n    def delete_by_value(self, value):\n        if self.is_empty():\n            print(\"List is empty.\")\n            return\n        if self.head.data == value:\n            self.head = self.head.next\n            return\n        current = self.head\n        while current.next and current.next.data != value:\n            current = current.next\n        if not current.next:\n            print(\"Value not found in the list.\")\n            return\n        current.next = current.next.next\n\n    def delete_by_position(self, position):\n        if position < 0:\n            print(\"Position cannot be negative.\")\n            return\n        if self.is_empty():\n            print(\"List is empty.\")\n            return\n        if position == 0:\n            self.head = self.head.next\n            return\n        current = self.head\n        count = 0\n        while current and count < position - 1:\n            current = current.next\n            count += 1\n        if not current or not current.next:\n            print(\"Position out of range.\")\n            return\n        current.next = current.next.next\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n\n# Example usage:\nif __name__ == \"__main__\":\n    sll = SinglyLinkedList()\n    sll.add_at_beginning(3)\n    sll.add_at_end(5)\n    sll.add_at_position(1, 4)\n    sll.display()  # Output: 3 -> 4 -> 5\n    sll.delete_by_value(4)\n    sll.display()  # Output: 3 -> 5\n    sll.delete_by_position(1)\n    sll.display()  # Output: 3\n```\n\n### Explanation:\n\n1. **Node Class**: Represents a single node in the linked list with `data` and `next` attributes.\n2. **SinglyLinkedList Class**: Manages the linked list operations.\n   - **is_empty()**: Checks if the list is empty.\n   - **add_at_beginning(data)**: Adds a new node with the given data at the beginning of the list.\n   - **add_at_end(data)**: Adds a new node with the given data at the end of the list.\n   - **add_at_position(position, data)**: Adds a new node with the given data at the specified position.\n   - **delete_by_value(value)**: Deletes the first node containing the specified value.\n   - **delete_by_position(position)**: Deletes the node at the specified position.\n   - **display()**: Prints the current state of the linked list.\n\nThis implementation provides a basic structure for managing a singly linked list with the specified operations."
    }
]