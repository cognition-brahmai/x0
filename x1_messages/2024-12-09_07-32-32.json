[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with Redis to store key-value pairs, where keys are user IDs and values are their names. The script should support adding new users, updating existing users, and deleting users by ID.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To create a Python script that interacts with Redis for managing user IDs and names, you'll need to have Redis installed and running on your machine, along with the `redis` Python package. If you haven't installed the `redis` package yet, you can do so using pip:\n\n```bash\npip install redis\n```\n\nOnce you have Redis running and the package installed, you can proceed to write the script. Below is a simple example of how you can achieve this:\n\n```python\nimport redis\n\n# Connect to Redis\nr = redis.Redis(host='localhost', port=6379, db=0)\n\ndef add_user(user_id, name):\n    if r.exists(user_id):\n        print(\"User already exists.\")\n    else:\n        r.set(user_id, name)\n        print(\"User added successfully.\")\n\ndef update_user(user_id, new_name):\n    if r.exists(user_id):\n        r.set(user_id, new_name)\n        print(\"User updated successfully.\")\n    else:\n        print(\"User does not exist.\")\n\ndef delete_user(user_id):\n    if r.exists(user_id):\n        r.delete(user_id)\n        print(\"User deleted successfully.\")\n    else:\n        print(\"User does not exist.\")\n\ndef main():\n    while True:\n        print(\"\\nOptions:\")\n        print(\"1. Add user\")\n        print(\"2. Update user\")\n        print(\"3. Delete user\")\n        print(\"4. Exit\")\n        \n        choice = input(\"Enter your choice: \")\n        \n        if choice == '1':\n            user_id = input(\"Enter user ID: \")\n            name = input(\"Enter name: \")\n            add_user(user_id, name)\n        elif choice == '2':\n            user_id = input(\"Enter user ID to update: \")\n            new_name = input(\"Enter new name: \")\n            update_user(user_id, new_name)\n        elif choice == '3':\n            user_id = input(\"Enter user ID to delete: \")\n            delete_user(user_id)\n        elif choice == '4':\n            print(\"Exiting...\")\n            break\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **Connecting to Redis:**\n   - We use the `redis.Redis` class to connect to the Redis server running on `localhost` at port `6379` and using database `0`.\n\n2. **Adding a User:**\n   - The `add_user` function checks if the user ID already exists in Redis using `r.exists(user_id)`. If it doesn't exist, it adds the user using `r.set(user_id, name)`.\n\n3. **Updating a User:**\n   - The `update_user` function checks if the user ID exists. If it does, it updates the name using `r.set(user_id, new_name)`.\n\n4. **Deleting a User:**\n   - The `delete_user` function checks if the user ID exists. If it does, it deletes the user using `r.delete(user_id)`.\n\n5. **Main Function:**\n   - The `main` function provides a simple text-based menu for the user to add, update, or delete users. It loops until the user chooses to exit.\n\nThis script provides a basic interface to manage user data in Redis. You can extend it further by adding more features like listing all users, searching for users, or handling errors more gracefully."
    }
]