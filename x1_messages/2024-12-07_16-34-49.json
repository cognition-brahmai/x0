[
    {
        "role": "user",
        "content": "Write a Python program to implement a singly linked list data structure with methods for insertion, deletion, searching, and displaying elements. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! Implementing a singly linked list in Python involves creating a Node class to represent each element in the list and a LinkedList class to manage these nodes. Here's a step-by-step guide to creating such a data structure with methods for insertion, deletion, searching, and displaying elements.\n\n### Step 1: Define the Node Class\n\nEach node in the linked list will hold data and a reference to the next node.\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.next = None\n```\n\n### Step 2: Define the LinkedList Class\n\nThis class will manage the nodes. It will have methods to insert, delete, search, and display elements.\n\n```python\nclass LinkedList:\n    def __init__(self):\n        self.head = None\n\n    def is_empty(self):\n        return self.head is None\n\n    def insert_at_beginning(self, data):\n        new_node = Node(data)\n        new_node.next = self.head\n        self.head = new_node\n\n    def insert_at_end(self, data):\n        new_node = Node(data)\n        if self.is_empty():\n            self.head = new_node\n            return\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = new_node\n\n    def delete_at_beginning(self):\n        if self.is_empty():\n            print(\"List is empty. Cannot delete.\")\n            return\n        self.head = self.head.next\n\n    def delete_at_end(self):\n        if self.is_empty():\n            print(\"List is empty. Cannot delete.\")\n            return\n        if self.head.next is None:\n            self.head = None\n            return\n        current = self.head\n        while current.next.next:\n            current = current.next\n        current.next = None\n\n    def search(self, data):\n        current = self.head\n        index = 0\n        while current:\n            if current.data == data:\n                return index\n            current = current.next\n            index += 1\n        return -1\n\n    def display(self):\n        elements = []\n        current = self.head\n        while current:\n            elements.append(str(current.data))\n            current = current.next\n        print(\" -> \".join(elements))\n```\n\n### Explanation\n\n1. **Node Class**:\n   - Each node has a `data` attribute to store the value and a `next` attribute to point to the next node.\n\n2. **LinkedList Class**:\n   - **`__init__`**: Initializes the linked list with a `head` set to `None`.\n   - **`is_empty`**: Checks if the linked list is empty.\n   - **`insert_at_beginning`**: Inserts a new node at the beginning of the list.\n   - **`insert_at_end`**: Inserts a new node at the end of the list.\n   - **`delete_at_beginning`**: Deletes the first node of the list.\n   - **`delete_at_end`**: Deletes the last node of the list.\n   - **`search`**: Searches for a node with the given data and returns its index (0-based), or -1 if not found.\n   - **`display`**: Prints the elements of the list in order.\n\n### Usage Example\n\n```python\nif __name__ == \"__main__\":\n    ll = LinkedList()\n    ll.insert_at_end(10)\n    ll.insert_at_end(20)\n    ll.insert_at_end(30)\n    ll.display()  # Output: 10 -> 20 -> 30\n    print(ll.search(20))  # Output: 1\n    ll.delete_at_beginning()\n    ll.display()  # Output: 20 -> 30\n    ll.delete_at_end()\n    ll.display()  # Output: 20\n```\n\nThis example demonstrates how to use the LinkedList class to perform basic operations like insertion, deletion, searching, and displaying elements."
    }
]