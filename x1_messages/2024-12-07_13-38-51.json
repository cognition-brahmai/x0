[
    {
        "role": "user",
        "content": "Write a Python function to calculate the factorial of a given non-negative integer using recursion.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Here's a Python function that calculates the factorial of a given non-negative integer using recursion:\n\n```python\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n```\n\nYou can use this function by calling `factorial(n)`, where `n` is the non-negative integer for which you want to calculate the factorial. For example, `factorial(5)` will return 120.\n\n**Explanation:**\n\n- The factorial of a non-negative integer `n` is the product of all positive integers less than or equal to `n`. It's denoted by `n!`.\n\n- Factorial is defined as:\n\n  - 0! = 1\n\n  - n! = n * (n-1)! for n > 0\n\n- This function uses recursion to calculate the factorial:\n\n  - Base case: if `n` is 0, return 1.\n\n  - Recursive case: return `n` multiplied by the factorial of `n-1`.\n\n**Note:**\n\n- This function assumes that the input is a non-negative integer. If a negative integer or a non-integer is passed, it may lead to incorrect results or infinite recursion.\n\n- For large values of `n`, this recursive approach may cause a stack overflow error due to the depth of recursion. In such cases, consider using an iterative approach or increasing the recursion limit (not recommended without understanding the implications)."
    }
]