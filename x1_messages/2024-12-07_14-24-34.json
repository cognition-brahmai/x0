[
    {
        "role": "user",
        "content": "In Java, create a class named \"Vehicle\" with properties like brand, model, year, etc., and methods such as startEngine(), stopEngine(), accelerate(), brake(). Then, extend this class to create subclasses for different types of vehicles like Car, Bike, Truck, each having additional unique properties and methods. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Let's start by creating the base class \"Vehicle\" in Java. This class will have common properties and methods that are applicable to all types of vehicles.\n\n## Step 1: Create the Vehicle Class\n\nFirst, we'll define the `Vehicle` class with properties such as brand, model, and year. We'll also include methods like `startEngine()`, `stopEngine()`, `accelerate()`, and `brake()`.\n\n```java\npublic class Vehicle {\n    // Properties\n    private String brand;\n    private String model;\n    private int year;\n\n    // Constructor\n    public Vehicle(String brand, String model, int year) {\n        this.brand = brand;\n        this.model = model;\n        this.year = year;\n    }\n\n    // Methods\n    public void startEngine() {\n        System.out.println(\"Engine started.\");\n    }\n\n    public void stopEngine() {\n        System.out.println(\"Engine stopped.\");\n    }\n\n    public void accelerate() {\n        System.out.println(\"Accelerating.\");\n    }\n\n    public void brake() {\n        System.out.println(\"Braking.\");\n    }\n\n    // Getters and setters for properties\n    public String getBrand() {\n        return brand;\n    }\n\n    public void setBrand(String brand) {\n        this.brand = brand;\n    }\n\n    public String getModel() {\n        return model;\n    }\n\n    public void setModel(String model) {\n        this.model = model;\n    }\n\n    public int getYear() {\n        return year;\n    }\n\n    public void setYear(int year) {\n        this.year = year;\n    }\n}\n```\n\n## Step 2: Create Subclasses for Different Types of Vehicles\n\nNow, we'll extend the `Vehicle` class to create subclasses for specific types of vehicles: `Car`, `Bike`, and `Truck`. Each subclass will have additional unique properties and methods.\n\n### Car Class\n\n```java\npublic class Car extends Vehicle {\n    private int numberOfDoors;\n\n    public Car(String brand, String model, int year, int numberOfDoors) {\n        super(brand, model, year);\n        this.numberOfDoors = numberOfDoors;\n    }\n\n    public void openTrunk() {\n        System.out.println(\"Trunk opened.\");\n    }\n\n    public void closeTrunk() {\n        System.out.println(\"Trunk closed.\");\n    }\n\n    // Getter and setter for numberOfDoors\n    public int getNumberOfDoors() {\n        return numberOfDoors;\n    }\n\n    public void setNumberOfDoors(int numberOfDoors) {\n        this.numberOfDoors = numberOfDoors;\n    }\n}\n```\n\n### Bike Class\n\n```java\npublic class Bike extends Vehicle {\n    private boolean hasSideCar;\n\n    public Bike(String brand, String model, int year, boolean hasSideCar) {\n        super(brand, model, year);\n        this.hasSideCar = hasSideCar;\n    }\n\n    public void ringBell() {\n        System.out.println(\"Bell ringing.\");\n    }\n\n    // Getter and setter for hasSideCar\n    public boolean hasSideCar() {\n        return hasSideCar;\n    }\n\n    public void setHasSideCar(boolean hasSideCar) {\n        this.hasSideCar = hasSideCar;\n    }\n}\n```\n\n### Truck Class\n\n```java\npublic class Truck extends Vehicle {\n    private int cargoCapacity;\n\n    public Truck(String brand, String model, int year, int cargoCapacity) {\n        super(brand, model, year);\n        this.cargoCapacity = cargoCapacity;\n    }\n\n    public void loadCargo() {\n        System.out.println(\"Loading cargo.\");\n    }\n\n    public void unloadCargo() {\n        System.out.println(\"Unloading cargo.\");\n    }\n\n    // Getter and setter for cargoCapacity\n    public int getCargoCapacity() {\n        return cargoCapacity;\n    }\n\n    public void setCargoCapacity(int cargoCapacity) {\n        this.cargoCapacity = cargoCapacity;\n    }\n}\n```\n\n## Step 3: Testing the Classes\n\nTo verify that everything works as expected, let's create a simple test class.\n\n```java\npublic class VehicleTest {\n    public static void main(String[] args) {\n        // Create a Car object\n        Car car = new Car(\"Toyota\", \"Camry\", 2020, 4);\n        car.startEngine();\n        car.accelerate();\n        car.openTrunk();\n\n        // Create a Bike object\n        Bike bike = new Bike(\"Harley-Davidson\", \"Sportster\", 2021, false);\n        bike.startEngine();\n        bike.ringBell();\n        bike.brake();\n\n        // Create a Truck object\n        Truck truck = new Truck(\"Ford\", \"F-150\", 2019, 2000);\n        truck.startEngine();\n        truck.loadCargo();\n        truck.unloadCargo();\n        truck.stopEngine();\n    }\n}\n```\n\nThis setup demonstrates how to create a base class and extend it to create specialized subclasses in Java, each with their own unique properties and methods."
    }
]