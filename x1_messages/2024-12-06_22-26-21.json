[
    {
        "role": "user",
        "content": "Write a JavaScript function that checks whether a passed string is a valid IPv4 address or not. PLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure, I can help you with that! To create a JavaScript function that checks if a string is a valid IPv4 address, we need to ensure that the string meets the following criteria:\n\n1. It consists of four parts separated by dots.\n2. Each part is a number between 0 and 255.\n3. Leading zeros are allowed but only for the number zero itself. For example, \"0\" is allowed, but \"01\" is not.\n\nHere's a step-by-step approach to achieve this:\n\n### Approach\n\n1. **Split the string by dots**: This will give us an array of four parts.\n2. **Check if there are exactly four parts**: If not, it's invalid.\n3. **Validate each part**:\n   - Each part should be a number.\n   - Each part should be between 0 and 255.\n   - If a part starts with '0', it should be exactly '0' (to handle leading zeros).\n\n### Solution Code\n\n```javascript\nfunction isValidIPv4(ip) {\n    // Split the IP by dots\n    const parts = ip.split('.');\n    \n    // Check if we have exactly four parts\n    if (parts.length !== 4) {\n        return false;\n    }\n    \n    for (let part of parts) {\n        // Check if the part is a number and within the range 0-255\n        if (!isNumber(part) || parseInt(part) < 0 || parseInt(part) > 255) {\n            return false;\n        }\n        // Check for leading zeros\n        if (part !== '0' && part.startsWith('0')) {\n            return false;\n        }\n    }\n    \n    return true;\n}\n\nfunction isNumber(n) {\n    return !isNaN(Number(n));\n}\n```\n\n### Explanation\n\n1. **Splitting the IP address**: We use `split('.')` to divide the IP address into parts based on the dot separators.\n2. **Checking the number of parts**: An IPv4 address must have exactly four parts. If the split results in a different number of parts, it's invalid.\n3. **Validating each part**:\n   - We check if each part is a number using the `isNumber` helper function.\n   - We parse each part to an integer and check if it's within the 0 to 255 range.\n   - We also ensure that parts do not have leading zeros unless the part is exactly '0'.\n\nThis function should accurately determine whether a given string is a valid IPv4 address based on the specified rules."
    }
]