[
    {
        "role": "user",
        "content": "Write a Python program to implement a stack data structure with push, pop, and peek operations.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! I'd be happy to help you with that. Implementing a stack in Python is straightforward because stacks follow the Last In, First Out (LIFO) principle. We can use a list to create a stack, as lists in Python have append and pop methods that allow us to add and remove elements from the end efficiently.\n\nHere's a simple implementation of a stack with push, pop, and peek operations:\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if not self.is_empty():\n            return self.items.pop()\n        else:\n            return \"Stack is empty\"\n\n    def peek(self):\n        if not self.is_empty():\n            return self.items[-1]\n        else:\n            return \"Stack is empty\"\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def size(self):\n        return len(self.items)\n```\n\nLet me explain each part of this code:\n\n1. **Class Definition**: We define a class called `Stack`.\n\n2. **Constructor (`__init__`)**: Initializes an empty list called `items` which will be used to store the stack's elements.\n\n3. **Push Operation (`push`)**: Adds an item to the top of the stack by using the `append` method of the list.\n\n4. **Pop Operation (`pop`)**: Removes and returns the top item of the stack using the `pop` method of the list. If the stack is empty, it returns a message indicating that.\n\n5. **Peek Operation (`peek`)**: Returns the top item of the stack without removing it. It accesses the last element of the list using `items[-1]`. If the stack is empty, it returns a message indicating that.\n\n6. **Is Empty Check (`is_empty`)**: Returns `True` if the stack is empty (i.e., the list is empty), otherwise `False`.\n\n7. **Size Check (`size`)**: Returns the number of items in the stack by returning the length of the list.\n\nYou can use this `Stack` class to create stack objects and perform stack operations. Here's an example of how to use this stack:\n\n```python\n# Create a stack object\nstack = Stack()\n\n# Push elements onto the stack\nstack.push(1)\nstack.push(2)\nstack.push(3)\n\n# Peek at the top element\nprint(\"Top element is:\", stack.peek())\n\n# Pop elements from the stack\nprint(\"Popped element:\", stack.pop())\nprint(\"Popped element:\", stack.pop())\n\n# Check the size of the stack\nprint(\"Stack size:\", stack.size())\n\n# Peek again after popping elements\nprint(\"Top element is now:\", stack.peek())\n\n# Pop all elements\nprint(\"Popped element:\", stack.pop())\nprint(\"Popped element:\", stack.pop())  # This will show \"Stack is empty\"\n\n# Check if the stack is empty\nprint(\"Is stack empty?\", stack.is_empty())\n```\n\nThis should give you a good starting point for working with stacks in Python. Let me know if you have any questions or need further clarification!"
    }
]