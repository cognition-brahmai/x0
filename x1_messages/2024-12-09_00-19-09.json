[
    {
        "role": "user",
        "content": "Develop a Python script that interacts with Elasticsearch to create an index, insert documents into the index, and perform a basic text search query. The script should accept command line arguments for the Elasticsearch host and port.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to help you create a Python script that interacts with Elasticsearch. We'll cover setting up the connection, creating an index, inserting documents, and performing a basic text search. We'll also make sure the script accepts command line arguments for the Elasticsearch host and port.\n\nFirst, you'll need to have Elasticsearch installed and running on your machine or have access to an Elasticsearch instance. Also, ensure you have the `elasticsearch` Python client library installed. You can install it using pip if you haven't already:\n\n```bash\npip install elasticsearch\n```\n\nNow, let's outline the steps we need to accomplish:\n\n1. **Accept command line arguments for host and port.**\n2. **Connect to the Elasticsearch instance using the provided host and port.**\n3. **Create an index in Elasticsearch.**\n4. **Insert documents into the created index.**\n5. **Perform a basic text search query on the index.**\n\nLet's start by handling the command line arguments. We'll use the `argparse` module, which is a standard Python library for parsing command line arguments.\n\nHere's how you can set up argument parsing:\n\n```python\nimport argparse\n\nparser = argparse.ArgumentParser(description=\"Interact with Elasticsearch\")\nparser.add_argument(\"--host\", default=\"localhost\", help=\"Elasticsearch host\")\nparser.add_argument(\"--port\", type=int, default=9200, help=\"Elasticsearch port\")\nargs = parser.parse_args()\n\nhost = args.host\nport = args.port\n```\n\nNext, we need to connect to the Elasticsearch instance using the provided host and port. We'll use the `Elasticsearch` class from the `elasticsearch` module.\n\n```python\nfrom elasticsearch import Elasticsearch\n\n# Initialize the Elasticsearch client\nes = Elasticsearch([{'host': host, 'port': port}])\n\n# Check if the connection is successful\nif not es.ping():\n    print(\"Cannot connect to Elasticsearch\")\n    exit()\nelse:\n    print(\"Connected to Elasticsearch!\")\n```\n\nNow, let's create an index. For this example, let's name the index \"documents\".\n\n```python\nindex_name = \"documents\"\n\n# Check if the index already exists\nif not es.indices.exists(index=index_name):\n    # Create the index\n    es.indices.create(index=index_name)\n    print(f\"Index '{index_name}' created.\")\nelse:\n    print(f\"Index '{index_name}' already exists.\")\n```\n\nNext, we'll insert some sample documents into the index. Let's assume each document has a `title` and `content`.\n\n```python\ndocuments = [\n    {\"title\": \"First Document\", \"content\": \"This is the first document.\"},\n    {\"title\": \"Second Document\", \"content\": \"This is the second document.\"},\n    {\"title\": \"Third Document\", \"content\": \"This is the third document.\"}\n]\n\n# Insert documents into the index\nfor idx, doc in enumerate(documents):\n    res = es.index(index=index_name, id=idx+1, body=doc)\n    print(f\"Document {idx+1} inserted with result: {res['result']}\")\n```\n\nFinally, let's perform a basic text search query. We'll search for the term \"first\" in the `content` field.\n\n```python\nsearch_query = {\n    \"query\": {\n        \"match\": {\n            \"content\": \"first\"\n        }\n    }\n}\n\n# Execute the search\nres = es.search(index=index_name, body=search_query)\n\n# Print the results\nprint(\"Search results:\")\nfor hit in res['hits']['hits']:\n    print(f\"{hit['_source']['title']}: {hit['_source']['content']}\")\n```\n\nPutting it all together, here's the complete script:\n\n```python\nimport argparse\nfrom elasticsearch import Elasticsearch\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"Interact with Elasticsearch\")\n    parser.add_argument(\"--host\", default=\"localhost\", help=\"Elasticsearch host\")\n    parser.add_argument(\"--port\", type=int, default=9200, help=\"Elasticsearch port\")\n    args = parser.parse_args()\n\n    host = args.host\n    port = args.port\n\n    # Initialize the Elasticsearch client\n    es = Elasticsearch([{'host': host, 'port': port}])\n\n    # Check if the connection is successful\n    if not es.ping():\n        print(\"Cannot connect to Elasticsearch\")\n        exit()\n    else:\n        print(\"Connected to Elasticsearch!\")\n\n    index_name = \"documents\"\n\n    # Check if the index already exists\n    if not es.indices.exists(index=index_name):\n        # Create the index\n        es.indices.create(index=index_name)\n        print(f\"Index '{index_name}' created.\")\n    else:\n        print(f\"Index '{index_name}' already exists.\")\n\n    documents = [\n        {\"title\": \"First Document\", \"content\": \"This is the first document.\"},\n        {\"title\": \"Second Document\", \"content\": \"This is the second document.\"},\n        {\"title\": \"Third Document\", \"content\": \"This is the third document.\"}\n    ]\n\n    # Insert documents into the index\n    for idx, doc in enumerate(documents):\n        res = es.index(index=index_name, id=idx+1, body=doc)\n        print(f\"Document {idx+1} inserted with result: {res['result']}\")\n\n    search_query = {\n        \"query\": {\n            \"match\": {\n                \"content\": \"first\"\n            }\n        }\n    }\n\n    # Execute the search\n    res = es.search(index=index_name, body=search_query)\n\n    # Print the results\n    print(\"Search results:\")\n    for hit in res['hits']['hits']:\n        print(f\"{hit['_source']['title']}: {hit['_source']['content']}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo run this script, save it to a file, for example, `elasticsearch_script.py`, and execute it from the command line, providing the host and port if necessary:\n\n```bash\npython elasticsearch_script.py --host localhost --port 9200\n```\n\nThis script will connect to the Elasticsearch instance, create an index named \"documents\", insert three sample documents, and then perform a search for the term \"first\" in the `content` field, printing the results.\n\nFeel free to modify the script to suit your specific needs, such as handling different document structures or more complex search queries."
    }
]