[
    {
        "role": "user",
        "content": "Create a Python script that uses the memcached library to cache API responses from a public RESTful API of your choice. The script should handle cache misses and store the fetched data in memcached for future use.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to create a Python script that uses the memcached library to cache responses from a public RESTful API. I'll choose the JSONPlaceholder API because it's a simple fake REST API for testing and prototyping.\n\nFirst, I need to install the required libraries. I'll need `python-memcached` for memcached and `requests` for making HTTP requests.\n\nI can install them using pip:\n\n```bash\npip install python-memcached requests\n```\n\nNext, I'll import the necessary modules in my script:\n\n```python\nimport memcache\nimport requests\n```\n\nI need to connect to the memcached server. For this example, I'll assume that memcached is running on localhost at the default port 11211.\n\n```python\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n```\n\nNow, I'll define a function to get data from the API and cache it. This function will take a URL as input, check if the data is already in the cache, and if not, fetch it from the API and store it in the cache.\n\n```python\ndef get_data_from_api(url):\n    # Generate a cache key based on the URL\n    cache_key = url\n    \n    # Try to retrieve data from cache\n    data = mc.get(cache_key)\n    if data is not None:\n        print(\"Data retrieved from cache.\")\n        return data\n    else:\n        print(\"Data not found in cache. Fetching from API.\")\n        \n        # Fetch data from API\n        response = requests.get(url)\n        if response.status_code == 200:\n            data = response.json()\n            # Store data in cache with an expiration time of 600 seconds (10 minutes)\n            mc.set(cache_key, data, time=600)\n            return data\n        else:\n            print(f\"Failed to retrieve data from API. Status code: {response.status_code}\")\n            return None\n```\n\nI'll also write a simple main function to test this functionality. Let's say I want to fetch a list of posts from the JSONPlaceholder API.\n\n```python\ndef main():\n    url = \"https://jsonplaceholder.typicode.com/posts\"\n    data = get_data_from_api(url)\n    if data is not None:\n        print(data[:5])  # Print the first 5 items\n\nif __name__ == \"__main__\":\n    main()\n```\n\nThis script will first check if the data for the given URL is already cached. If it is, it will retrieve it from the cache; otherwise, it will fetch it from the API and store it in the cache for future use.\n\nI should also handle potential errors, such as network issues or the memcached server being down. For robustness, I can add try-except blocks to handle these scenarios.\n\nHere's the complete script:\n\n```python\nimport memcache\nimport requests\n\nmc = memcache.Client(['127.0.0.1:11211'], debug=0)\n\ndef get_data_from_api(url):\n    cache_key = url\n    try:\n        data = mc.get(cache_key)\n        if data is not None:\n            print(\"Data retrieved from cache.\")\n            return data\n        else:\n            print(\"Data not found in cache. Fetching from API.\")\n            response = requests.get(url)\n            if response.status_code == 200:\n                data = response.json()\n                mc.set(cache_key, data, time=600)\n                return data\n            else:\n                print(f\"Failed to retrieve data from API. Status code: {response.status_code}\")\n                return None\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\ndef main():\n    url = \"https://jsonplaceholder.typicode.com/posts\"\n    data = get_data_from_api(url)\n    if data is not None:\n        print(data[:5])  # Print the first 5 items\n\nif __name__ == \"__main__\":\n    main()\n```\n\nTo run this script, ensure that memcached is installed and running on your local machine. You can install memcached and its Python client using package managers like apt or brew, depending on your operating system.\n\nThis script demonstrates a basic caching mechanism using memcached to store API responses, reducing the load on the API and improving response times for frequently accessed data."
    }
]