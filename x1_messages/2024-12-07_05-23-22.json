[
    {
        "role": "user",
        "content": "Write a Python script to implement a stack data structure with push, pop, and peek operations, along with error handling for empty stacks.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python script that implements a stack data structure with push, pop, and peek operations, including error handling for empty stacks.\n\n```python\nclass Stack:\n    def __init__(self):\n        self.items = []\n\n    def is_empty(self):\n        return len(self.items) == 0\n\n    def push(self, item):\n        self.items.append(item)\n\n    def pop(self):\n        if self.is_empty():\n            raise IndexError(\"pop from empty stack\")\n        return self.items.pop()\n\n    def peek(self):\n        if self.is_empty():\n            raise IndexError(\"peek from empty stack\")\n        return self.items[-1]\n\n# Example usage:\nif __name__ == \"__main__\":\n    stack = Stack()\n    stack.push(1)\n    stack.push(2)\n    stack.push(3)\n    print(\"Top element is:\", stack.peek())\n    print(\"Popped element is:\", stack.pop())\n    print(\"Is the stack empty?\", stack.is_empty())\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - `Stack` class is defined to implement the stack data structure.\n\n2. **Initialization**:\n   - `__init__`: Initializes an empty list to store stack elements.\n\n3. **is_empty**:\n   - Checks if the stack is empty by returning `True` if the list is empty, otherwise `False`.\n\n4. **push**:\n   - Appends an item to the end of the list, simulating pushing onto the stack.\n\n5. **pop**:\n   - Removes and returns the top item from the stack.\n   - Raises an `IndexError` if the stack is empty.\n\n6. **peek**:\n   - Returns the top item without removing it.\n   - Raises an `IndexError` if the stack is empty.\n\n7. **Example Usage**:\n   - Demonstrates pushing elements onto the stack, peeking at the top element, popping an element, and checking if the stack is empty.\n\nThis implementation ensures that operations on an empty stack are handled gracefully by raising appropriate exceptions."
    }
]