[
    {
        "role": "user",
        "content": "Implement a C++ class representing a 2D point with x and y coordinates. The class should have methods for calculating the distance between two points, checking if two points are equal, and adding/subtracting coordinates of two points. Additionally, overload the stream insertion operator (<<) to print the point's coordinates in the format \"(x, y)\".\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is an implementation of a C++ class representing a 2D point with x and y coordinates. This class includes methods for calculating the distance between two points, checking if two points are equal, and adding/subtracting coordinates of two points. Additionally, the stream insertion operator (<<) is overloaded to print the point's coordinates in the format \"(x, y)\".\n\n```cpp\n#include <iostream>\n#include <cmath>\n\nclass Point2D {\nprivate:\n    double x;\n    double y;\n\npublic:\n    // Constructor\n    Point2D(double x = 0.0, double y = 0.0) : x(x), y(y) {}\n\n    // Getters\n    double getX() const { return x; }\n    double getY() const { return y; }\n\n    // Setters\n    void setX(double x) { this->x = x; }\n    void setY(double y) { this->y = y; }\n\n    // Method to calculate the distance between two points\n    double distanceTo(const Point2D& other) const {\n        double dx = x - other.x;\n        double dy = y - other.y;\n        return std::sqrt(dx * dx + dy * dy);\n    }\n\n    // Method to check if two points are equal\n    bool isEqualTo(const Point2D& other) const {\n        return (x == other.x && y == other.y);\n    }\n\n    // Method to add coordinates of two points\n    Point2D add(const Point2D& other) const {\n        return Point2D(x + other.x, y + other.y);\n    }\n\n    // Method to subtract coordinates of two points\n    Point2D subtract(const Point2D& other) const {\n        return Point2D(x - other.x, y - other.y);\n    }\n\n    // Overloading the stream insertion operator\n    friend std::ostream& operator<<(std::ostream& os, const Point2D& point) {\n        os << \"(\" << point.x << \", \" << point.y << \")\";\n        return os;\n    }\n};\n\n// Example usage\nint main() {\n    Point2D p1(3.0, 4.0);\n    Point2D p2(6.0, 8.0);\n\n    std::cout << \"Point 1: \" << p1 << std::endl;\n    std::cout << \"Point 2: \" << p2 << std::endl;\n\n    double dist = p1.distanceTo(p2);\n    std::cout << \"Distance between p1 and p2: \" << dist << std::endl;\n\n    Point2D sum = p1.add(p2);\n    std::cout << \"Sum of p1 and p2: \" << sum << std::endl;\n\n    Point2D diff = p1.subtract(p2);\n    std::cout << \"Difference of p1 and p2: \" << diff << std::endl;\n\n    bool areEqual = p1.isEqualTo(p2);\n    std::cout << \"Are p1 and p2 equal? \" << (areEqual ? \"Yes\" : \"No\") << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Class Definition**:\n   - `Point2D` class has private member variables `x` and `y` to store the coordinates.\n   - A constructor initializes these coordinates, with default values of 0.0.\n   - Getter and setter methods are provided for `x` and `y`.\n\n2. **Methods**:\n   - `distanceTo`: Calculates the Euclidean distance between two points using the distance formula.\n   - `isEqualTo`: Checks if two points have the same coordinates.\n   - `add`: Adds the coordinates of two points and returns a new `Point2D` object.\n   - `subtract`: Subtracts the coordinates of one point from another and returns a new `Point2D` object.\n\n3. **Overloaded Operator**:\n   - The `<<` operator is overloaded as a friend function to allow easy printing of `Point2D` objects in the format `(x, y)`.\n\n4. **Example Usage**:\n   - In the `main` function, two `Point2D` objects are created and various methods are demonstrated, including calculating distance, adding and subtracting points, checking equality, and printing points using the overloaded `<<` operator.\n"
    }
]