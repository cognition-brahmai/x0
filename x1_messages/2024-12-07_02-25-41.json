[
    {
        "role": "user",
        "content": "Implement a Java application that uses multithreading to download multiple files concurrently from a list of URLs provided as command-line arguments. The application should display the progress of each download.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Alright, I'm going to try to create a Java application that can download multiple files from URLs at the same time using something called multithreading. And not only that, but it should also show me how each download is going, like some kind of progress bar or something.\n\nFirst, I need to understand what multithreading is. From what I know, multithreading is a way to make a program do multiple things at the same time. So, if I have a list of URLs, instead of downloading them one by one, which would take a lot of time, especially if there are many files, I can download them all at once, or at least, make it seem like they are downloading at the same time.\n\nIn Java, threads are like small sub-programs that run concurrently within the same program. So, for each file I need to download, I can create a new thread that handles that download independently of the others.\n\nBut I need to be careful with threads because if not managed properly, they can cause problems like race conditions or consume too many system resources.\n\nOkay, so first things first, I need to set up a basic Java project. Since I'm comfortable with IntelliJ IDEA, I'll use that as my IDE.\n\nI'll create a new Java class, let's call it MultiDownloader.\n\nNow, I need to accept URLs from command-line arguments. So, in the main method, I can get the arguments like this:\n\npublic static void main(String[] args) {\n\nif (args.length == 0) {\n\nSystem.out.println(\"Please provide URLs as command-line arguments.\");\n\nreturn;\n\n}\n\n// Rest of the code\n\n}\n\nSo, if someone runs the program without providing any URLs, it will\u63d0\u793a\u4ed6\u4eec\u63d0\u4f9bURL\u3002\n\n\u63a5\u4e0b\u6765\uff0c\u6211\u9700\u8981\u4e3a\u6bcf\u4e2aURL\u521b\u5efa\u4e00\u4e2a\u5355\u72ec\u7684\u7ebf\u7a0b\u6765\u5904\u7406\u4e0b\u8f7d\u3002\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7ebf\u7a0b\u7c7b\uff0c\u7ee7\u627f\u81eaThread\u7c7b\uff0c\u6216\u8005\u5b9e\u73b0Runnable\u63a5\u53e3\u3002\u6211\u89c9\u5f97\u5b9e\u73b0Runnable\u63a5\u53e3\u66f4\u7075\u6d3b\uff0c\u56e0\u4e3a\u53ef\u4ee5\u907f\u514d\u5355\u7ee7\u627f\u7684\u9650\u5236\u3002\n\n\u6240\u4ee5\uff0c\u6211\u5c06\u521b\u5efa\u4e00\u4e2aDownloadThread\u7c7b\uff0c\u5b83\u5b9e\u73b0Runnable\u63a5\u53e3\uff0c\u5e76\u5728run\u65b9\u6cd5\u4e2d\u5b9e\u73b0\u4e0b\u8f7d\u903b\u8f91\u3002\n\npublic class DownloadThread implements Runnable {\n\nprivate String url;\n\npublic DownloadThread(String url) {\n\nthis.url = url;\n\n}\n\n@Override\n\npublic void run() {\n\n// Download logic here\n\n}\n\n}\n\n\u5728run\u65b9\u6cd5\u4e2d\uff0c\u6211\u9700\u8981\u5b9e\u73b0\u6587\u4ef6\u4e0b\u8f7d\u7684\u903b\u8f91\u3002\u6211\u9700\u8981\u4eceURL\u4e0b\u8f7d\u6587\u4ef6\uff0c\u5e76\u4e14\u663e\u793a\u4e0b\u8f7d\u8fdb\u5ea6\u3002\n\n\u9996\u5148\uff0c\u6211\u9700\u8981\u6253\u5f00\u4e0eURL\u7684\u8fde\u63a5\uff0c\u5e76\u83b7\u53d6\u8f93\u5165\u6d41\u3002\u7136\u540e\uff0c\u6211\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u8f93\u51fa\u6d41\u6765\u4fdd\u5b58\u4e0b\u8f7d\u7684\u6587\u4ef6\u3002\u540c\u65f6\uff0c\u6211\u9700\u8981\u8ba1\u7b97\u4e0b\u8f7d\u7684\u8fdb\u5ea6\u3002\n\n\u4e3a\u4e86\u663e\u793a\u8fdb\u5ea6\uff0c\u6211\u9700\u8981\u77e5\u9053\u6587\u4ef6\u7684\u603b\u5927\u5c0f\uff0c\u8fd9\u6837\u6211\u5c31\u53ef\u4ee5\u8ba1\u7b97\u5df2\u7ecf\u4e0b\u8f7d\u7684\u90e8\u5206\u5360\u603b\u5927\u5c0f\u7684\u767e\u5206\u6bd4\u3002\n\n\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528java.net.URL\u548cjava.net.HttpURLConnection\u7c7b\u6765\u5904\u7406URL\u8fde\u63a5\u3002\n\n\u6240\u4ee5\uff0c\u5728DownloadThread\u7684run\u65b9\u6cd5\u4e2d\uff0c\u6211\u5c06\u8fd9\u6837\u505a\uff1a\n\n@Override\n\npublic void run() {\n\ntry {\n\nURL url = new URL(this.url);\n\nHttpURLConnection connection = (HttpURLConnection) url.openConnection();\n\nconnection.setRequestMethod(\"GET\");\n\nint responseCode = connection.getResponseCode();\n\nif (responseCode == HttpURLConnection.HTTP_OK) {\n\n// Get the file size\n\nlong fileSize = connection.getContentLengthLong();\n\n// Get the input stream\n\nInputStream in = connection.getInputStream();\n\n// Create output file\n\nString fileName = url.getFile().substring(url.getFile().lastIndexOf('/') + 1);\n\nFileOutputStream out = new FileOutputStream(fileName);\n\nbyte[] buffer = new byte[4096];\n\nint bytesRead;\n\nlong totalBytesRead = 0;\n\nwhile ((bytesRead = in.read(buffer)) != -1) {\n\nout.write(buffer, 0, bytesRead);\n\ntotalBytesRead += bytesRead;\n\n// Calculate and display progress\n\ndouble progress = (totalBytesRead / (double) fileSize) * 100;\n\nSystem.out.println(\"Downloading \" + fileName + \": \" + String.format(\"%.2f\", progress) + \"%\");\n\n}\n\nout.close();\n\nin.close();\n\nSystem.out.println(\"Download completed: \" + fileName);\n\n} else {\n\nSystem.out.println(\"Failed to connect to \" + url + \". Response code: \" + responseCode);\n\n}\n\n} catch (IOException e) {\n\ne.printStackTrace();\n\n}\n\n}\n\n}\n\n\u8fd9\u91cc\uff0c\u6211\u6253\u5f00\u4e86\u4e0eURL\u7684\u8fde\u63a5\uff0c\u68c0\u67e5\u54cd\u5e94\u7801\u662f\u5426\u662f200 OK\u3002\u5982\u679c\u662f\uff0c\u6211\u83b7\u53d6\u6587\u4ef6\u7684\u603b\u5927\u5c0f\uff0c\u7136\u540e\u521b\u5efa\u4e00\u4e2a\u8f93\u5165\u6d41\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u540c\u65f6\u521b\u5efa\u4e00\u4e2a\u8f93\u51fa\u6d41\u6765\u5199\u5165\u6587\u4ef6\u3002\n\n\u6211\u4f7f\u7528\u4e00\u4e2a\u7f13\u51b2\u533a\u6765\u8bfb\u53d6\u6570\u636e\uff0c\u6bcf\u6b21\u8bfb\u53d6\u4e00\u90e8\u5206\uff0c\u7136\u540e\u5199\u5165\u6587\u4ef6\uff0c\u5e76\u66f4\u65b0\u5df2\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\u7136\u540e\uff0c\u6211\u8ba1\u7b97\u8fdb\u5ea6\u5e76\u6253\u5370\u51fa\u6765\u3002\n\n\u6700\u540e\uff0c\u5173\u95ed\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u5e76\u6253\u5370\u4e0b\u8f7d\u5b8c\u6210\u7684\u6d88\u606f\u3002\n\n\u73b0\u5728\uff0c\u56de\u5230MultiDownloader\u7c7b\uff0c\u5728main\u65b9\u6cd5\u4e2d\uff0c\u6211\u9700\u8981\u904d\u5386\u6240\u6709\u7684URL\u53c2\u6570\uff0c\u4e3a\u6bcf\u4e2aURL\u521b\u5efa\u4e00\u4e2aDownloadThread\u5b9e\u4f8b\uff0c\u5e76\u542f\u52a8\u7ebf\u7a0b\u3002\n\npublic class MultiDownloader {\n\npublic static void main(String[] args) {\n\nif (args.length == 0) {\n\nSystem.out.println(\"Please provide URLs as command-line arguments.\");\n\nreturn;\n\n}\n\nfor (String url : args) {\n\nDownloadThread downloadThread = new DownloadThread(url);\n\nThread thread = new Thread(downloadThread);\n\nthread.start();\n\n}\n\n}\n\n}\n\n\u8fd9\u6837\uff0c\u6bcf\u4e2a\u4e0b\u8f7d\u4efb\u52a1\u90fd\u5728\u81ea\u5df1\u7684\u7ebf\u7a0b\u4e2d\u8fd0\u884c\uff0c\u53ef\u4ee5\u540c\u65f6\u8fdb\u884c\u591a\u4e2a\u4e0b\u8f7d\u3002\n\n\u4f46\u662f\uff0c\u6211\u9700\u8981\u8003\u8651\u7ebf\u7a0b\u7684\u7ba1\u7406\u548c\u53ef\u80fd\u7684\u8d44\u6e90\u95ee\u9898\u3002\u5982\u679c\u63d0\u4f9b\u4e86\u5f88\u591aURL\uff0c\u521b\u5efa\u5f88\u591a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u6d88\u8017\u5927\u91cf\u7cfb\u7edf\u8d44\u6e90\uff0c\u5bfc\u81f4\u7a0b\u5e8f\u53d8\u6162\u6216\u8005\u5d29\u6e83\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u5e94\u8be5\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u8fd9\u6837\u53ef\u4ee5\u9650\u5236\u540c\u65f6\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\u3002\n\n\u5728Java\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528Executor\u6846\u67b6\u6765\u7ba1\u7406\u7ebf\u7a0b\u6c60\u3002\n\n\u6240\u4ee5\u6211\u53ef\u4ee5\u4fee\u6539MultiDownloader\u7c7b\uff0c\u4f7f\u7528ExecutorService\u6765\u7ba1\u7406\u7ebf\u7a0b\u3002\n\n\u9996\u5148\uff0c\u5bfc\u5165\u5fc5\u8981\u7684\u7c7b\uff1a\n\nimport java.util.concurrent.ExecutorService;\n\nimport java.util.concurrent.Executors;\n\n\u7136\u540e\uff0c\u5728main\u65b9\u6cd5\u4e2d\uff0c\u521b\u5efa\u4e00\u4e2a\u56fa\u5b9a\u5927\u5c0f\u7684\u7ebf\u7a0b\u6c60\uff0c\u6bd4\u5982\u6700\u591a\u5141\u8bb85\u4e2a\u7ebf\u7a0b\u540c\u65f6\u8fd0\u884c\u3002\n\nExecutorService executor = Executors.newFixedThreadPool(5);\n\n\u7136\u540e\uff0c\u4e3a\u6bcf\u4e2aURL\u63d0\u4ea4\u4e00\u4e2aDownloadThread\u4efb\u52a1\u3002\n\nfor (String url : args) {\n\nDownloadThread downloadThread = new DownloadThread(url);\n\nexecutor.execute(downloadThread);\n\n}\n\n\u6700\u540e\uff0c\u5173\u95ed\u6267\u884c\u5668\u3002\n\nexecutor.shutdown();\n\nwhile (!executor.isTerminated()) {\n\n}\n\nSystem.out.println(\"All downloads completed.\");\n\n\u8fd9\u6837\uff0c\u901a\u8fc7\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u6211\u53ef\u4ee5\u63a7\u5236\u540c\u65f6\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570\u91cf\uff0c\u907f\u514d\u521b\u5efa\u8fc7\u591a\u7ebf\u7a0b\u3002\n\n\u53e6\u5916\uff0c\u6211\u9700\u8981\u786e\u4fdd\u5728\u4e0b\u8f7d\u8fc7\u7a0b\u4e2d\uff0c\u5bf9\u63a7\u5236\u53f0\u7684\u8f93\u51fa\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c\u56e0\u4e3a\u591a\u4e2a\u7ebf\u7a0b\u53ef\u80fd\u4f1a\u540c\u65f6\u5c1d\u8bd5\u6253\u5370\u8fdb\u5ea6\u4fe1\u606f\uff0c\u5bfc\u81f4\u8f93\u51fa\u6df7\u4e71\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u53ef\u4ee5\u4f7f\u7528\u540c\u6b65\u673a\u5236\u6765\u4fdd\u8bc1\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u6253\u5370\u4fe1\u606f\u3002\n\n\u5728DownloadThread\u7684run\u65b9\u6cd5\u4e2d\uff0c\u4fee\u6539\u6253\u5370\u8fdb\u5ea6\u7684\u90e8\u5206\uff1a\n\nsynchronized (System.out) {\n\ndouble progress = (totalBytesRead / (double) fileSize) * 100;\n\nSystem.out.println(\"Downloading \" + fileName + \": \" + String.format(\"%.2f\", progress) + \"%\");\n\n}\n\n\u8fd9\u6837\uff0c\u6bcf\u6b21\u53ea\u6709\u4e00\u4e2a\u7ebf\u7a0b\u53ef\u4ee5\u8bbf\u95eeSystem.out\uff0c\u907f\u514d\u8f93\u51fa\u6df7\u4e71\u3002\n\n\u53e6\u5916\uff0c\u6211\u9700\u8981\u8003\u8651\u5982\u4f55\u5904\u7406\u4e0b\u8f7d\u8fc7\u7a0b\u4e2d\u53ef\u80fd\u53d1\u751f\u7684\u5f02\u5e38\uff0c\u6bd4\u5982\u7f51\u7edc\u95ee\u9898\u3001\u6743\u9650\u95ee\u9898\u7b49\u3002\n\n\u5728\u5f53\u524d\u7684\u5b9e\u73b0\u4e2d\uff0c\u6211\u5df2\u7ecf\u6355\u83b7\u4e86IOException\uff0c\u5e76\u6253\u5370\u4e86\u5806\u6808\u8ddf\u8e2a\u3002\u8fd9\u5df2\u7ecf\u53ef\u4ee5\u5904\u7406\u4e00\u4e9b\u5e38\u89c1\u7684I/O\u9519\u8bef\u3002\n\n\u4f46\u662f\uff0c\u6211\u53ef\u80fd\u8fd8\u9700\u8981\u66f4\u53cb\u597d\u7684\u9519\u8bef\u5904\u7406\uff0c\u6bd4\u5982\u91cd\u8bd5\u673a\u5236\u3001\u8bb0\u5f55\u9519\u8bef\u65e5\u5fd7\u7b49\u3002\n\n\u6b64\u5916\uff0c\u6211\u9700\u8981\u786e\u4fdd\u5728\u4e0b\u8f7d\u5b8c\u6210\u540e\uff0c\u6b63\u786e\u5173\u95ed\u8d44\u6e90\uff0c\u907f\u514d\u8d44\u6e90\u6cc4\u6f0f\u3002\n\n\u5728DownloadThread\u7684run\u65b9\u6cd5\u4e2d\uff0c\u6211\u5df2\u7ecf\u4f7f\u7528\u4e86try-with-resources\u8bed\u53e5\u6765\u81ea\u52a8\u5173\u95ed\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u8fd9\u6837\u53ef\u4ee5\u786e\u4fdd\u65e0\u8bba\u662f\u5426\u53d1\u751f\u5f02\u5e38\uff0c\u6d41\u90fd\u4f1a\u88ab\u5173\u95ed\u3002\n\n\u53e6\u5916\uff0c\u6211\u9700\u8981\u8003\u8651\u5982\u4f55\u547d\u540d\u4e0b\u8f7d\u7684\u6587\u4ef6\u3002\u5f53\u524d\uff0c\u6211\u662f\u6839\u636eURL\u4e2d\u7684\u6587\u4ef6\u540d\u6765\u547d\u540d\u672c\u5730\u6587\u4ef6\u7684\u3002\n\n\u4f46\u662f\uff0c\u5982\u679cURL\u4e2d\u6ca1\u6709\u6307\u5b9a\u6587\u4ef6\u540d\uff0c\u6216\u8005\u591a\u4e2aURL\u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u5c31\u4f1a\u6709\u95ee\u9898\u3002\n\n\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u6211\u53ef\u4ee5\u6539\u8fdb\u6587\u4ef6\u540d\u7684\u751f\u6210\u903b\u8f91\u3002\n\n\u6bd4\u5982\uff0c\u5982\u679cURL\u4e2d\u6ca1\u6709\u6587\u4ef6\u540d\uff0c\u6211\u53ef\u4ee5\u751f\u6210\u4e00\u4e2a\u552f\u4e00\u7684\u6587\u4ef6\u540d\u3002\n\n\u6216\u8005\uff0c\u5982\u679c\u591a\u4e2aURL\u6307\u5411\u540c\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u6211\u53ef\u4ee5\u6dfb\u52a0\u5e8f\u53f7\u6765\u533a\u5206\u3002\n\n\u8fd9\u9700\u8981\u66f4\u591a\u7684\u903b\u8f91\u6765\u5904\u7406\uff0c\u53ef\u80fd\u8d85\u51fa\u8fd9\u4e2a\u7b80\u5355\u7684\u5b9e\u73b0\u8303\u56f4\u3002\n\n\u53e6\u5916\uff0c\u6211\u53ef\u80fd\u9700\u8981\u63d0\u4f9b\u66f4\u591a\u7684\u914d\u7f6e\u9009\u9879\uff0c\u6bd4\u5982\u4e0b\u8f7d\u76ee\u5f55\u3001\u8d85\u65f6\u8bbe\u7f6e\u7b49\u3002\n\n\u4f46\u662f\uff0c\u5bf9\u4e8e\u8fd9\u4e2a\u57fa\u672c\u7684\u5b9e\u73b0\uff0c\u76ee\u524d\u7684\u5904\u7406\u5df2\u7ecf\u8db3\u591f\u3002\n\n\u6700\u540e\uff0c\u6211\u9700\u8981\u6d4b\u8bd5\u8fd9\u4e2a\u7a0b\u5e8f\uff0c\u786e\u4fdd\u5b83\u80fd\u591f\u6b63\u786e\u4e0b\u8f7d\u6587\u4ef6\uff0c\u5e76\u663e\u793a\u8fdb\u5ea6\u3002\n\n\u6211\u53ef\u4ee5\u51c6\u5907\u51e0\u4e2aURL\uff0c\u5305\u542b\u4e0d\u540c\u5927\u5c0f\u7684\u6587\u4ef6\uff0c\u7136\u540e\u8fd0\u884c\u7a0b\u5e8f\uff0c\u89c2\u5bdf\u4e0b\u8f7d\u8fc7\u7a0b\u3002\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6709\u4e9bURL\u53ef\u80fd\u4e0d\u652f\u6301\u8303\u56f4\u8bf7\u6c42\uff0c\u6216\u8005\u670d\u52a1\u5668\u53ef\u80fd\u4e0d\u8fd4\u56de\u5185\u5bb9\u957f\u5ea6\uff0c\u8fd9\u6837\u6211\u5c31\u65e0\u6cd5\u51c6\u786e\u8ba1\u7b97\u8fdb\u5ea6\u3002\n\n\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u6211\u53ef\u80fd\u9700\u8981\u5904\u7406fileSize\u4e3a-1\u7684\u60c5\u51b5\uff0c\u6216\u8005\u5bfb\u627e\u5176\u4ed6\u65b9\u5f0f\u4f30\u8ba1\u8fdb\u5ea6\u3002\n\n\u603b\u4e4b\uff0c\u8fd9\u4e2a\u57fa\u672c\u7684\u591a\u7ebf\u7a0b\u4e0b\u8f7d\u5668\u5df2\u7ecf\u53ef\u4ee5\u6ee1\u8db3\u9700\u6c42\uff0c\u540e\u7eed\u53ef\u4ee5\u6839\u636e\u9700\u8981\u8fdb\u884c\u6269\u5c55\u548c\u4f18\u5316\u3002\n\n## \u6700\u7ec8\u89e3\u51b3\u65b9\u6848\n\u4e3a\u4e86\u521b\u5efa\u4e00\u4e2a\u80fd\u591f\u5e76\u53d1\u4e0b\u8f7d\u591a\u4e2a\u6587\u4ef6\u5e76\u663e\u793a\u6bcf\u4e2a\u4e0b\u8f7d\u8fdb\u5ea6\u7684Java\u5e94\u7528\u7a0b\u5e8f\uff0c\u6211\u4eec\u53ef\u4ee5\u5229\u7528\u591a\u7ebf\u7a0b\u548c\u7ebf\u7a0b\u6c60\u6765\u9ad8\u6548\u7ba1\u7406\u4e0b\u8f7d\u4efb\u52a1\u3002\u4ee5\u4e0b\u662f\u4e00\u4e2a\u5b8c\u6574\u7684\u5b9e\u73b0\u65b9\u6848\u3002\n\n### \u63a5\u8fd1\n\n1. **\u591a\u7ebf\u7a0b\u4e0b\u8f7d**\uff1a\u4f7f\u7528\u591a\u7ebf\u7a0b\u540c\u65f6\u4e0b\u8f7d\u591a\u4e2a\u6587\u4ef6\uff0c\u63d0\u9ad8\u4e0b\u8f7d\u6548\u7387\u3002\n2. **\u8fdb\u5ea6\u663e\u793a**\uff1a\u5b9e\u65f6\u663e\u793a\u6bcf\u4e2a\u4e0b\u8f7d\u4efb\u52a1\u7684\u8fdb\u5ea6\u3002\n3. **\u7ebf\u7a0b\u6c60\u7ba1\u7406**\uff1a\u4f7f\u7528\u7ebf\u7a0b\u6c60\u63a7\u5236\u5e76\u53d1\u7ebf\u7a0b\u6570\uff0c\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u3002\n\n### \u89e3\u51b3\u65b9\u6848\u4ee3\u7801\n\n```java\nimport java.io.File;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\nclass DownloadThread implements Runnable {\n    private String url;\n\n    public DownloadThread(String url) {\n        this.url = url;\n    }\n\n    @Override\n    public void run() {\n        try {\n            URL urlObj = new URL(url);\n            HttpURLConnection connection = (HttpURLConnection) urlObj.openConnection();\n            connection.setRequestMethod(\"GET\");\n            int responseCode = connection.getResponseCode();\n            if (responseCode == HttpURLConnection.HTTP_OK) {\n                long fileSize = connection.getContentLengthLong();\n                try (InputStream in = connection.getInputStream();\n                     FileOutputStream out = new FileOutputStream(getFileName(urlObj))) {\n                    byte[] buffer = new byte[4096];\n                    int bytesRead;\n                    long totalBytesRead = 0;\n                    while ((bytesRead = in.read(buffer)) != -1) {\n                        out.write(buffer, 0, bytesRead);\n                        totalBytesRead += bytesRead;\n                        // Calculate and display progress\n                        double progress = (totalBytesRead / (double) fileSize) * 100;\n                        synchronized (System.out) {\n                            System.out.println(\"Downloading \" + getFileName(urlObj) + \": \" + String.format(\"%.2f\", progress) + \"%\");\n                        }\n                    }\n                }\n                synchronized (System.out) {\n                    System.out.println(\"Download completed: \" + getFileName(urlObj));\n                }\n            } else {\n                System.out.println(\"Failed to connect to \" + url + \". Response code: \" + responseCode);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String getFileName(URL url) {\n        String fileName = url.getFile().substring(url.getFile().lastIndexOf('/') + 1);\n        if (fileName.isEmpty()) {\n            fileName = \"downloaded_file_\" + System.currentTimeMillis();\n        }\n        return fileName;\n    }\n}\n\npublic class MultiDownloader {\n    public static void main(String[] args) {\n        if (args.length == 0) {\n            System.out.println(\"Please provide URLs as command-line arguments.\");\n            return;\n        }\n\n        ExecutorService executor = Executors.newFixedThreadPool(5);\n\n        for (String url : args) {\n            DownloadThread downloadThread = new DownloadThread(url);\n            executor.execute(downloadThread);\n        }\n\n        executor.shutdown();\n        while (!executor.isTerminated()) {\n            // Wait for all tasks to complete\n        }\n        System.out.println(\"All downloads completed.\");\n    }\n}\n```\n\n### \u8bf4\u660e\n\n1. **DownloadThread\u7c7b**\uff1a\n    - \u5b9e\u73b0Runnable\u63a5\u53e3\uff0c\u8d1f\u8d23\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6\u5e76\u663e\u793a\u8fdb\u5ea6\u3002\n    - \u901a\u8fc7HttpURLConnection\u8fde\u63a5\u5230URL\uff0c\u83b7\u53d6\u6587\u4ef6\u8f93\u5165\u6d41\u5e76\u4fdd\u5b58\u5230\u672c\u5730\u6587\u4ef6\u3002\n    - \u4f7f\u7528\u540c\u6b65\u5757\u786e\u4fdd\u63a7\u5236\u53f0\u8f93\u51fa\u4e0d\u4f1a\u4e71\u5e8f\u3002\n\n2. **MultiDownloader\u7c7b**\uff1a\n    - \u4e3b\u7c7b\uff0c\u89e3\u6790\u547d\u4ee4\u884c\u53c2\u6570\u5e76\u521b\u5efa\u7ebf\u7a0b\u6c60\u3002\n    - \u4f7f\u7528\u56fa\u5b9a\u5927\u5c0f\u7684\u7ebf\u7a0b\u6c60\uff08\u6700\u591a5\u4e2a\u7ebf\u7a0b\uff09\u6765\u7ba1\u7406\u4e0b\u8f7d\u4efb\u52a1\u3002\n    - \u7b49\u5f85\u6240\u6709\u4e0b\u8f7d\u4efb\u52a1\u5b8c\u6210\u540e\u518d\u9000\u51fa\u7a0b\u5e8f\u3002\n\n\u8fd9\u4e2a\u65b9\u6848\u786e\u4fdd\u4e86\u591a\u4e2a\u6587\u4ef6\u80fd\u591f\u5e76\u53d1\u4e0b\u8f7d\uff0c\u5e76\u4e14\u6bcf\u4e2a\u4e0b\u8f7d\u4efb\u52a1\u7684\u8fdb\u5ea6\u90fd\u88ab\u6e05\u6670\u5730\u663e\u793a\u5728\u63a7\u5236\u53f0\u4e0a\u3002\u901a\u8fc7\u4f7f\u7528\u7ebf\u7a0b\u6c60\uff0c\u6211\u4eec\u6709\u6548\u5730\u63a7\u5236\u4e86\u5e76\u53d1\u7ebf\u7a0b\u7684\u6570\u91cf\uff0c\u907f\u514d\u4e86\u8d44\u6e90\u8017\u5c3d\u7684\u95ee\u9898\u3002"
    }
]