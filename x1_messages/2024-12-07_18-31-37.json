[
    {
        "role": "user",
        "content": "Develop a Java program that implements a basic chat application using WebSockets. The application should allow multiple users to connect, send messages, and receive messages from other connected users in real-time.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Developing a basic chat application using WebSockets in Java involves several steps. WebSockets provide full-duplex communication channels over a single TCP connection, making them ideal for real-time applications like chat apps.\n\n### Approach\n\n1. **Set Up the Project:**\n   - Use Maven to manage dependencies.\n   - Include the Java WebSocket API.\n\n2. **Create the WebSocket Server:**\n   - Implement a server that can handle multiple client connections.\n   - Manage a list of connected clients.\n\n3. **Handle Client Connections:**\n   - On connection, add the client to the list of connected users.\n   - On disconnection, remove the client from the list.\n\n4. **Message Broadcasting:**\n   - When a message is received from a client, broadcast it to all connected clients.\n\n5. **Client Interface:**\n   - For simplicity, create a basic command-line client that can connect to the server, send messages, and receive messages in real-time.\n\n### Solution Code\n\n#### 1. Project Structure\n\n```\nchat-app/\n\u251c\u2500\u2500 pom.xml\n\u251c\u2500\u2500 src/\n\u2502   \u251c\u2500\u2500 main/\n\u2502   \u2502   \u251c\u2500\u2500 java/\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 server/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 ChatServer.java\n\u2502   \u2502   \u2502   \u251c\u2500\u2500 client/\n\u2502   \u2502   \u2502   \u2502   \u251c\u2500\u2500 ChatClient.java\n```\n\n#### 2. `pom.xml`\n\n```xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n    <groupId>com.example</groupId>\n    <artifactId>chat-app</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <dependencies>\n        <dependency>\n            <groupId>javax.websocket</groupId>\n            <artifactId>javax.websocket-api</artifactId>\n            <version>1.1</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.tyrus</groupId>\n            <artifactId>tyrus-server</artifactId>\n            <version>1.13</version>\n        </dependency>\n        <dependency>\n            <groupId>org.glassfish.tyrus</groupId>\n            <artifactId>tyrus-client</artifactId>\n            <version>1.13</version>\n        </dependency>\n    </dependencies>\n</project>\n```\n\n#### 3. `ChatServer.java`\n\n```java\npackage server;\n\nimport javax.websocket.OnClose;\nimport javax.websocket.OnError;\nimport javax.websocket.OnMessage;\nimport javax.websocket.OnOpen;\nimport javax.websocket.Session;\nimport javax.websocket.server.ServerEndpoint;\nimport java.io.IOException;\nimport java.util.Collections;\nimport java.util.HashSet;\nimport java.util.Set;\n\n@ServerEndpoint(\"/chat\")\npublic class ChatServer {\n\n    // Set to hold all connected sessions\n    private static Set<Session> sessions = Collections.synchronizedSet(new HashSet<>());\n\n    @OnOpen\n    public void onOpen(Session session) {\n        sessions.add(session);\n        System.out.println(\"New connection: \" + session.getId());\n    }\n\n    @OnMessage\n    public void onMessage(String message, Session session) {\n        System.out.println(\"Message from \" + session.getId() + \": \" + message);\n        broadcast(message, session);\n    }\n\n    @OnClose\n    public void onClose(Session session) {\n        sessions.remove(session);\n        System.out.println(\"Connection closed: \" + session.getId());\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        System.out.println(\"Error on session \" + session.getId());\n        throwable.printStackTrace();\n    }\n\n    private void broadcast(String message, Session sender) {\n        synchronized (sessions) {\n            for (Session session : sessions) {\n                if (!session.equals(sender)) {\n                    try {\n                        session.getBasicRemote().sendText(message);\n                    } catch (IOException e) {\n                        System.out.println(\"Error broadcasting message to session \" + session.getId());\n                        e.printStackTrace();\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### 4. `ChatClient.java`\n\n```java\npackage client;\n\nimport javax.websocket.*;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.net.URI;\nimport java.net.URISyntaxException;\n\n@ClientEndpoint\npublic class ChatClient {\n\n    private Session userSession = null;\n\n    public void start(String serverUri) {\n        WebSocketContainer container = ContainerProvider.getWebSocketContainer();\n        try {\n            userSession = container.connectToServer(this, new URI(serverUri));\n        } catch (DeploymentException | IOException | URISyntaxException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @OnOpen\n    public void onOpen(Session session) {\n        System.out.println(\"Connected to server: \" + session.getId());\n    }\n\n    @OnMessage\n    public void onMessage(String message) {\n        System.out.println(\"Received message: \" + message);\n    }\n\n    @OnClose\n    public void onClose(Session session, CloseReason closeReason) {\n        System.out.println(\"Connection closed: \" + session.getId() + \", reason: \" + closeReason);\n    }\n\n    @OnError\n    public void onError(Session session, Throwable throwable) {\n        System.out.println(\"Error on session \" + session.getId());\n        throwable.printStackTrace();\n    }\n\n    public void sendMessage(String message) {\n        if (userSession != null && userSession.isOpen()) {\n            try {\n                userSession.getBasicRemote().sendText(message);\n            } catch (IOException e) {\n                System.out.println(\"Error sending message\");\n                e.printStackTrace();\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        ChatClient client = new ChatClient();\n        client.start(\"ws://localhost:8080/chat\");\n\n        BufferedReader in = new BufferedReader(new InputStreamReader(System.in));\n        System.out.println(\"Enter messages to send (type 'exit' to quit):\");\n\n        try {\n            String input;\n            while ((input = in.readLine()) != null) {\n                if (\"exit\".equalsIgnoreCase(input)) {\n                    break;\n                }\n                client.sendMessage(input);\n            }\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Server Setup:**\n   - The `ChatServer` class is annotated with `@ServerEndpoint(\"/chat\")`, indicating it handles WebSocket connections at the `/chat` endpoint.\n   - It maintains a set of connected sessions to broadcast messages to all connected clients.\n\n2. **Client Setup:**\n   - The `ChatClient` class connects to the server using a WebSocket connection.\n   - It reads messages from the console and sends them to the server. It also receives and displays messages from the server.\n\n3. **Running the Application:**\n   - Start the server component, which listens for WebSocket connections.\n   - Run multiple instances of the client to simulate multiple users chatting in real-time.\n\nThis basic implementation provides the foundation for a real-time chat application using WebSockets in Java. For a production-level application, consider adding features like user authentication, message history, and improved error handling."
    }
]