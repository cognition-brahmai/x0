[
    {
        "role": "user",
        "content": "Write a TypeScript class representing a \"Product\" with properties such as name, price, and description. Include appropriate constructors, getters, and setters. Additionally, create a method to calculate the discounted price based on a percentage discount.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is an example of a TypeScript class representing a \"Product\" with properties like name, price, and description. It includes constructors, getters, setters, and a method to calculate the discounted price based on a percentage discount.\n\n```typescript\nclass Product {\n    private _name: string;\n    private _price: number;\n    private _description: string;\n\n    constructor(name: string, price: number, description: string) {\n        this._name = name;\n        this._price = price;\n        this._description = description;\n    }\n\n    // Getter for name\n    get name(): string {\n        return this._name;\n    }\n\n    // Setter for name\n    set name(name: string) {\n        if (name.trim() === \"\") {\n            throw new Error(\"Name cannot be empty\");\n        }\n        this._name = name;\n    }\n\n    // Getter for price\n    get price(): number {\n        return this._price;\n    }\n\n    // Setter for price\n    set price(price: number) {\n        if (price < 0) {\n            throw new Error(\"Price cannot be negative\");\n        }\n        this._price = price;\n    }\n\n    // Getter for description\n    get description(): string {\n        return this._description;\n    }\n\n    // Setter for description\n    set description(description: string) {\n        if (description.trim() === \"\") {\n            throw new Error(\"Description cannot be empty\");\n        }\n        this._description = description;\n    }\n\n    // Method to calculate discounted price\n    calculateDiscountedPrice(discountPercentage: number): number {\n        if (discountPercentage < 0 || discountPercentage > 100) {\n            throw new Error(\"Discount percentage must be between 0 and 100\");\n        }\n        const discountAmount = (this._price * discountPercentage) / 100;\n        return this._price - discountAmount;\n    }\n}\n\n// Example usage:\nconst product = new Product(\"Example Product\", 100, \"This is an example product.\");\nconsole.log(product.name); // Output: Example Product\nconsole.log(product.price); // Output: 100\nconsole.log(product.description); // Output: This is an example product.\nconsole.log(product.calculateDiscountedPrice(10)); // Output: 90\n```\n\n### Explanation:\n\n1. **Properties**:\n   - `_name`: Private string property for the product's name.\n   - `_price`: Private number property for the product's price.\n   - `_description`: Private string property for the product's description.\n\n2. **Constructor**:\n   - Initializes the `_name`, `_price`, and `_description` properties.\n\n3. **Getters and Setters**:\n   - **Name**:\n     - Getter returns the name.\n     - Setter sets the name, ensuring it's not empty.\n   - **Price**:\n     - Getter returns the price.\n     - Setter sets the price, ensuring it's not negative.\n   - **Description**:\n     - Getter returns the description.\n     - Setter sets the description, ensuring it's not empty.\n\n4. **Method**:\n   - `calculateDiscountedPrice(discountPercentage: number)`: Calculates and returns the price after applying the given percentage discount. It validates that the discount percentage is between 0 and 100.\n\nThis class provides a solid structure for managing product data with validation to ensure data integrity."
    }
]