[
    {
        "role": "user",
        "content": "Create a C++ implementation of the quicksort algorithm that sorts an array of integers in ascending order.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "Sure! Below is a simple C++ implementation of the quicksort algorithm that sorts an array of integers in ascending order.\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\n// Function to swap two elements\nvoid swap(int& a, int& b) {\n    int temp = a;\n    a = b;\n    b = temp;\n}\n\n// Partition function\nint partition(vector<int>& arr, int low, int high) {\n    int pivot = arr[high]; // choosing the last element as pivot\n    int i = low - 1;\n\n    for (int j = low; j <= high - 1; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            swap(arr[i], arr[j]);\n        }\n    }\n    swap(arr[i + 1], arr[high]);\n    return (i + 1);\n}\n\n// Quicksort function\nvoid quicksort(vector<int>& arr, int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n\n        // Recursively sort elements before and after partition\n        quicksort(arr, low, pi - 1);\n        quicksort(arr, pi + 1, high);\n    }\n}\n\n// Function to print an array\nvoid printArray(const vector<int>& arr) {\n    for (int num : arr) {\n        cout << num << \" \";\n    }\n    cout << endl;\n}\n\n// Main function\nint main() {\n    vector<int> arr = {10, 7, 8, 9, 1, 5};\n    int n = arr.size();\n    cout << \"Original array: \\n\";\n    printArray(arr);\n\n    quicksort(arr, 0, n - 1);\n\n    cout << \"Sorted array: \\n\";\n    printArray(arr);\n\n    return 0;\n}\n```\n\n### Explanation\n\n1. **Swap Function:** A helper function to swap two elements in the array.\n2. **Partition Function:** This function takes the last element as pivot, places the pivot element at its correct position in sorted array, and places all smaller (smaller than pivot) to left of pivot and all greater elements to right of pivot.\n3. **Quicksort Function:** This is a recursive function that calls partition and then recursively sorts the sub-arrays.\n4. **Print Array Function:** A utility function to print the array.\n5. **Main Function:** Demonstrates the use of quicksort by sorting an example array and printing the original and sorted arrays.\n\nThis implementation chooses the last element as the pivot for simplicity, but other strategies like choosing the first element or a random element can also be used."
    }
]