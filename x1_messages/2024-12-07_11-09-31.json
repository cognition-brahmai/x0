[
    {
        "role": "user",
        "content": "Write a Node.js program that connects to a PostgreSQL database and performs CRUD operations on a \"products\" table. The table should have columns for product name, description, price, and quantity. The program should use prepared statements to prevent SQL injection."
    },
    {
        "role": "assistant",
        "content": "Sure! I can help you with that. To create a Node.js program that connects to a PostgreSQL database and performs CRUD operations on a \"products\" table, you'll need to follow these steps:\n\n1. **Set up your project:**\n   - Initialize a new Node.js project.\n   - Install the necessary dependencies: `pg` for PostgreSQL client.\n\n2. **Create the database and table:**\n   - Set up a PostgreSQL database.\n   - Create a \"products\" table with the specified columns.\n\n3. **Implement CRUD operations:**\n   - Connect to the database using the `pg` module.\n   - Use prepared statements to perform Create, Read, Update, and Delete operations.\n\nLet's go through each step in detail.\n\n### Step 1: Set up your project\n\nFirst, create a new directory for your project and initialize a new Node.js project:\n\n```bash\nmkdir product-crud\ncd product-crud\nnpm init -y\n```\n\nNext, install the `pg` module, which is a PostgreSQL client for Node.js:\n\n```bash\nnpm install pg\n```\n\n### Step 2: Create the database and table\n\nAssuming you have PostgreSQL installed and running, you can create a new database and a \"products\" table using SQL commands.\n\n#### Create the database:\n\n```sql\nCREATE DATABASE productdb;\n```\n\n#### Create the products table:\n\n```sql\nCREATE TABLE products (\n    id SERIAL PRIMARY KEY,\n    name VARCHAR(255) NOT NULL,\n    description TEXT,\n    price DECIMAL(10, 2) NOT NULL,\n    quantity INTEGER NOT NULL\n);\n```\n\nYou can execute these commands using a PostgreSQL client like `psql`:\n\n```bash\npsql -U your_username -h localhost -c \"CREATE DATABASE productdb;\"\npsql -U your_username -h localhost -d productdb -f create_table.sql\n```\n\nMake sure to replace `your_username` with your actual PostgreSQL username.\n\n### Step 3: Implement CRUD operations\n\nNow, let's write the Node.js code to perform CRUD operations on the \"products\" table using prepared statements.\n\nFirst, create a file named `db.js` to handle the database connection:\n\n```javascript\nconst { Pool } = require('pg');\n\nconst pool = new Pool({\n  user: 'your_username',\n  host: 'localhost',\n  database: 'productdb',\n  password: 'your_password',\n  port: 5432,\n});\n\nmodule.exports = {\n  query: (text, params) => pool.query(text, params),\n};\n```\n\nReplace `'your_username'` and `'your_password'` with your actual PostgreSQL credentials.\n\nNext, create a file named `crud.js` to implement the CRUD operations:\n\n```javascript\nconst db = require('./db');\n\n// Create a new product\nasync function createProduct(name, description, price, quantity) {\n  const text = 'INSERT INTO products(name, description, price, quantity) VALUES($1, $2, $3, $4) RETURNING *';\n  const values = [name, description, price, quantity];\n  try {\n    const result = await db.query(text, values);\n    console.log('Product created:', result.rows[0]);\n    return result.rows[0];\n  } catch (err) {\n    console.error('Error creating product:', err.stack);\n  }\n}\n\n// Read all products\nasync function getProducts() {\n  const text = 'SELECT * FROM products';\n  try {\n    const result = await db.query(text);\n    console.log('Products:', result.rows);\n    return result.rows;\n  } catch (err) {\n    console.error('Error fetching products:', err.stack);\n  }\n}\n\n// Read a single product by ID\nasync function getProductById(id) {\n  const text = 'SELECT * FROM products WHERE id = $1';\n  const values = [id];\n  try {\n    const result = await db.query(text, values);\n    if (result.rows.length === 0) {\n      console.log('Product not found');\n      return null;\n    }\n    console.log('Product:', result.rows[0]);\n    return result.rows[0];\n  } catch (err) {\n    console.error('Error fetching product:', err.stack);\n  }\n}\n\n// Update a product by ID\nasync function updateProduct(id, name, description, price, quantity) {\n  const text = 'UPDATE products SET name = $1, description = $2, price = $3, quantity = $4 WHERE id = $5 RETURNING *';\n  const values = [name, description, price, quantity, id];\n  try {\n    const result = await db.query(text, values);\n    if (result.rows.length === 0) {\n      console.log('Product not found');\n      return null;\n    }\n    console.log('Product updated:', result.rows[0]);\n    return result.rows[0];\n  } catch (err) {\n    console.error('Error updating product:', err.stack);\n  }\n}\n\n// Delete a product by ID\nasync function deleteProduct(id) {\n  const text = 'DELETE FROM products WHERE id = $1 RETURNING *';\n  const values = [id];\n  try {\n    const result = await db.query(text, values);\n    if (result.rows.length === 0) {\n      console.log('Product not found');\n      return null;\n    }\n    console.log('Product deleted:', result.rows[0]);\n    return result.rows[0];\n  } catch (err) {\n    console.error('Error deleting product:', err.stack);\n  }\n}\n\nmodule.exports = {\n  createProduct,\n  getProducts,\n  getProductById,\n  updateProduct,\n  deleteProduct,\n};\n```\n\nFinally, create a file named `app.js` to test the CRUD operations:\n\n```javascript\nconst crud = require('./crud');\n\n// Create products\n(async () => {\n  await crud.createProduct('Laptop', 'High-performance laptop', 1200.00, 10);\n  await crud.createProduct('Mouse', 'Wireless mouse', 25.00, 50);\n})();\n\n// Get all products\n(async () => {\n  await crud.getProducts();\n})();\n\n// Get a product by ID\n(async () => {\n  await crud.getProductById(1);\n})();\n\n// Update a product\n(async () => {\n  await crud.updateProduct(1, 'Gaming Laptop', 'High-performance gaming laptop', 1500.00, 8);\n})();\n\n// Delete a product\n(async () => {\n  await crud.deleteProduct(2);\n})();\n```\n\nMake sure to adjust the database connection settings in `db.js` to match your PostgreSQL setup.\n\n### Running the program\n\nTo run the program, execute the following command in your project directory:\n\n```bash\nnode app.js\n```\n\nThis will perform the CRUD operations and log the results to the console.\n\n### Explanation\n\n- **Database Connection:** The `db.js` file sets up a connection pool to the PostgreSQL database using the `pg` module.\n- **CRUD Operations:** The `crud.js` file defines asynchronous functions for creating, reading, updating, and deleting products using prepared statements to prevent SQL injection.\n- **Testing:** The `app.js` file demonstrates how to use these functions to perform various operations on the \"products\" table.\n\nThis setup ensures that your application is secure and efficient in handling database operations."
    }
]