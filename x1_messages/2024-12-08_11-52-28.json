[
    {
        "role": "user",
        "content": "Develop a Node.js application that serves as a RESTful API for managing a collection of books, with endpoints for creating, reading, updating, and deleting book entries stored in a PostgreSQL database.\nPLAINFORMAT"
    },
    {
        "role": "assistant",
        "content": "To develop a Node.js application that serves as a RESTful API for managing a collection of books using a PostgreSQL database, you'll need to follow several steps. This guide will walk you through setting up your project, connecting to the database, and implementing the CRUD operations.\n\n### Prerequisites\n\n1. **Node.js** installed on your machine.\n2. **PostgreSQL** installed and running.\n3. Basic understanding of JavaScript/ES6, Node.js, Express, and SQL.\n\n### Project Setup\n\n1. **Initialize the project:**\n\n   ```bash\n   mkdir book-api\n   cd book-api\n   npm init -y\n   ```\n\n2. **Install necessary packages:**\n\n   - `express`: For setting up the server.\n   - `pg`: PostgreSQL client for Node.js.\n   - `cors`: To handle cross-origin resource sharing.\n   - `dotenv`: To manage environment variables.\n\n   ```bash\n   npm install express pg cors dotenv\n   ```\n\n3. **Create a `.env` file** to store environment variables:\n\n   ```\n   DB_HOST=localhost\n   DB_PORT=5432\n   DB_USER=your_username\n   DB_PASSWORD=your_password\n   DB_NAME=bookdb\n   PORT=3000\n   ```\n\n4. **Set up directory structure:**\n\n   ```\n   book-api/\n   \u251c\u2500\u2500 models/\n   \u2502   \u2514\u2500\u2500 book.js\n   \u251c\u2500\u2500 routes/\n   \u2502   \u2514\u2500\u2500 books.js\n   \u251c\u2500\u2500 .env\n   \u251c\u2500\u2500 app.js\n   \u2514\u2500\u2500 package.json\n   ```\n\n### Database Setup\n\n1. **Create the database:**\n\n   Open PostgreSQL terminal or use a GUI tool like pgAdmin.\n\n   ```sql\n   CREATE DATABASE bookdb;\n   ```\n\n2. **Create the books table:**\n\n   ```sql\n   CREATE TABLE books (\n       id SERIAL PRIMARY KEY,\n       title VARCHAR(255) NOT NULL,\n       author VARCHAR(100) NOT NULL,\n       published_year INT,\n       isbn VARCHAR(13) UNIQUE NOT NULL\n   );\n   ```\n\n### Application Code\n\n#### 1. **Configuration and Middleware**\n\n- **app.js:**\n\n  ```javascript\n  require('dotenv').config();\n  const express = require('express');\n  const cors = require('cors');\n  const booksRouter = require('./routes/books');\n\n  const app = express();\n  const port = process.env.PORT || 3000;\n\n  app.use(cors());\n  app.use(express.json());\n\n  app.use('/api/books', booksRouter);\n\n  app.listen(port, () => {\n      console.log(`Server is running on port ${port}`);\n  });\n  ```\n\n#### 2. **Database Connection**\n\n- **models/book.js:**\n\n  ```javascript\n  const { Pool } = require('pg');\n\n  const pool = new Pool({\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      user: process.env.DB_USER,\n      password: process.env.DB_PASSWORD,\n      database: process.env.DB_NAME\n  });\n\n  module.exports = pool;\n  ```\n\n#### 3. **Routes and Controllers**\n\n- **routes/books.js:**\n\n  ```javascript\n  const express = require('express');\n  const router = express.Router();\n  const pool = require('../models/book');\n\n  // Get all books\n  router.get('/', async (req, res) => {\n      try {\n          const result = await pool.query('SELECT * FROM books');\n          res.json(result.rows);\n      } catch (err) {\n          console.error(err);\n          res.status(500).send('Server error');\n      }\n  });\n\n  // Get a single book by ID\n  router.get('/:id', async (req, res) => {\n      const id = req.params.id;\n      try {\n          const result = await pool.query('SELECT * FROM books WHERE id = $1', [id]);\n          if (result.rows.length === 0) {\n              return res.status(404).send('Book not found');\n          }\n          res.json(result.rows[0]);\n      } catch (err) {\n          console.error(err);\n          res.status(500).send('Server error');\n      }\n  });\n\n  // Create a new book\n  router.post('/', async (req, res) => {\n      const { title, author, published_year, isbn } = req.body;\n      if (!title || !author || !isbn) {\n          return res.status(400).send('Title, author, and ISBN are required');\n      }\n      try {\n          const result = await pool.query(\n              'INSERT INTO books (title, author, published_year, isbn) VALUES ($1, $2, $3, $4) RETURNING *',\n              [title, author, published_year, isbn]\n          );\n          res.status(201).json(result.rows[0]);\n      } catch (err) {\n          console.error(err);\n          if (err.code === '23505') { // Unique constraint violation\n              res.status(400).send('ISBN already exists');\n          } else {\n              res.status(500).send('Server error');\n          }\n      }\n  });\n\n  // Update a book\n  router.put('/:id', async (req, res) => {\n      const id = req.params.id;\n      const { title, author, published_year, isbn } = req.body;\n      try {\n          const result = await pool.query(\n              'UPDATE books SET title = $1, author = $2, published_year = $3, isbn = $4 WHERE id = $5 RETURNING *',\n              [title, author, published_year, isbn, id]\n          );\n          if (result.rows.length === 0) {\n              return res.status(404).send('Book not found');\n          }\n          res.json(result.rows[0]);\n      } catch (err) {\n          console.error(err);\n          if (err.code === '23505') { // Unique constraint violation\n              res.status(400).send('ISBN already exists');\n          } else {\n              res.status(500).send('Server error');\n          }\n      }\n  });\n\n  // Delete a book\n  router.delete('/:id', async (req, res) => {\n      const id = req.params.id;\n      try {\n          const result = await pool.query('DELETE FROM books WHERE id = $1', [id]);\n          if (result.rowCount === 0) {\n              return res.status(404).send('Book not found');\n          }\n          res.status(204).send();\n      } catch (err) {\n          console.error(err);\n          res.status(500).send('Server error');\n      }\n  });\n\n  module.exports = router;\n  ```\n\n### Testing the API\n\nYou can test the API using tools like Postman or curl. Here are some example commands:\n\n1. **Get all books:**\n\n   ```bash\n   curl http://localhost:3000/api/books\n   ```\n\n2. **Get a single book by ID:**\n\n   ```bash\n   curl http://localhost:3000/api/books/1\n   ```\n\n3. **Create a new book:**\n\n   ```bash\n   curl -X POST http://localhost:3000/api/books -H \"Content-Type: application/json\" -d '{\"title\":\"Sample Book\",\"author\":\"John Doe\",\"published_year\":2021,\"isbn\":\"1234567890123\"}'\n   ```\n\n4. **Update a book:**\n\n   ```bash\n   curl -X PUT http://localhost:3000/api/books/1 -H \"Content-Type: application/json\" -d '{\"title\":\"Updated Book\",\"author\":\"Jane Doe\",\"published_year\":2022,\"isbn\":\"3210987654321\"}'\n   ```\n\n5. **Delete a book:**\n\n   ```bash\n   curl -X DELETE http://localhost:3000/api/books/1\n   ```\n\n### Conclusion\n\nYou've successfully created a simple RESTful API for managing books using Node.js, Express, and PostgreSQL. This API allows you to perform CRUD operations on book entries. You can expand this foundation by adding more features, such as validation, authentication, or more complex queries."
    }
]