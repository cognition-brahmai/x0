[
    {
        "role": "user",
        "content": "How can I extract the underlying decision rules or 'decision paths' from a trained decision tree in scikit-learn? I want to obtain these rules as a textual list, like as follows: if A>0.4 then if B<0.2 then if C>0.8 then class='X'."
    },
    {
        "role": "assistant",
        "content": "Extracting decision rules from a trained decision tree in scikit-learn can be done by traversing the tree and printing out the conditions. Here\u2019s how you can achieve this:\n\n1. **Train your decision tree:** First, ensure that you have a trained decision tree model. For example, using `DecisionTreeClassifier` or `DecisionTreeRegressor`.\n\n2. **Extract the tree structure:** Use the `export_text` function from `sklearn.tree` to get a textual representation of the decision paths. Here\u2019s a basic example:\n\n    ```python\n    from sklearn.tree import DecisionTreeClassifier\n    from sklearn import tree\n    from sklearn.datasets import load_iris\n\n    # Load dataset\n    iris = load_iris()\n    X, y = iris.data, iris.target\n\n    # Train the decision tree classifier\n    clf = DecisionTreeClassifier()\n    clf = clf.fit(X, y)\n\n    # Export decision tree rules as text\n    r = tree.export_text(clf, feature_names=iris['feature_names'])\n    print(r)\n    ```\n\n3. **Custom extraction of rules:** If you want more control over the output format, you can write a custom function to traverse the tree using the `tree_` attribute of the decision tree model. Here\u2019s a more detailed approach:\n\n    ```python\n    def print_decision_rules(tree, feature_names):\n        left = tree.tree_.children_left\n        right = tree.tree_.children_right\n        threshold = tree.tree_.threshold\n        features = [feature_names[i] for i in tree.tree_.feature]\n        value = tree.tree_.value\n\n        def recurse(node, depth):\n            indent = \"  \" * depth\n            if (threshold[node] != -2):\n                print(f\"{indent}if {features[node]} <= {threshold[node]:.2f}:\")\n                recurse(left[node], depth + 1)\n                print(f\"{indent}else:  # if {features[node]} > {threshold[node]:.2f}\")\n                recurse(right[node], depth + 1)\n            else:\n                print(f\"{indent}return {value[node]}\")\n\n        recurse(0, 0)\n\n    print_decision_rules(clf, iris['feature_names'])\n    ```\n\nThis function traverses the tree and prints the rules in a more readable format. You can further modify it to match the exact format you desire.\n\nBy using these methods, you can extract and display the decision rules from a scikit-learn decision tree model. Adjust the approach based on the complexity of your model and your specific needs."
    }
]