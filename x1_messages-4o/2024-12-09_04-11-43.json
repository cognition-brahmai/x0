[
    {
        "role": "user",
        "content": "I've observed that many modern libraries seem to favor the use of string parameters over enums. For example, in dateutil.rrule.FR, where enums were used to represent days like Friday, this has shifted towards using strings such as 'FRI'. Similarly, in numpy or pandas, functions like searchsorted use strings (e.g. side='left', or side='right') instead of a defined enum like the one below:\n\n```python\nclass SIDE:\n    RIGHT = 0\n    LEFT = 1\n```\n\nEnums have clear advantages: they can't be misspelled without raising an error, they provide proper support for IDEs, and so on. So, why is there a shift towards strings instead of sticking with enum types? Doesn't this increase the likelihood of user errors? It doesn't seem like enums create overhead - in fact, they should be slightly more efficient. When and why did this paradigm shift occur?"
    },
    {
        "role": "assistant",
        "content": "The shift from using enums to strings in many modern libraries, such as those you've mentioned, can be attributed to several factors, each weighing differently depending on the library's design goals and user audience. Here are some reasons why this shift might occur:\n\n1. **Simplicity and Readability**: Strings can often be more intuitive and self-explanatory, especially for users who are not deeply familiar with the library or programming in general. For example, using 'FRI' instead of `FRIDAY` might be more straightforward for a quick reference.\n\n2. **Flexibility**: Strings offer more flexibility for future changes and extensions. Libraries can introduce new string options without altering existing enums or requiring users to update their code. Strings can also be easier to handle when dealing with user inputs, configurations, or when interfacing with systems that don't support strong typing.\n\n3. **Interoperability**: Strings are a universal data type and can easily be used across different programming languages, systems, and APIs. This is important for libraries like NumPy or Pandas, which are often used in environments where they interact with a variety of other tools and languages.\n\n4. **Ease of Use**: For many users, especially in scripting or exploratory data analysis, using strings can be faster and require less boilerplate code than importing and using enums, which might be seen as an unnecessary complication for simple tasks.\n\n5. **Backward Compatibility**: When libraries evolve, maintaining backward compatibility can be crucial. String parameters can help in maintaining backward compatibility with earlier versions of the library or with other libraries that integrate with it.\n\n6. **Performance Considerations**: While enums are indeed efficient, for many applications, the difference in performance between using strings and enums is negligible. The convenience and flexibility of strings often outweigh the minor performance benefits of enums.\n\n7. **Convention and Trend**: Sometimes, changes in library practices follow trends and conventions set by other popular libraries or frameworks. As more libraries adopt strings for these purposes, it becomes a familiar pattern that users come to expect.\n\nIt's worth noting that while strings offer these advantages, they do come with the downside of being prone to typos and lacking the IDE support that enums provide. However, the trade-off seems to be acceptable for many library developers, especially when considering the broader user base and the typical use cases of these libraries."
    }
]