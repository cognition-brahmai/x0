[
    {
        "role": "user",
        "content": "How can I use Query Strings to filter Querysets in Django? I have built my API using the Django REST framework and I am now aiming to add a filtering functionality to it. Here's how my models.py looks like:\n\n```python\nclass Airline(models.Model):\n    name = models.TextField()\n\nclass Workspace(models.Model):\n    airline = models.ForeignKey(Airline)\n    name = models.CharField(max_length=100)\n\nclass Passenger(models.Model):\n    workspace = models.ForeignKey(Workspace)\n    title = models.CharField(max_length=200)\n```\n\nI want to have the capability to view \"all passengers in a particular workspace\" or \"all passengers in a particular airline\" in my JSON file. And here is how my serializers.py and views.py are set up:\n\nserializers.py:\n```python\nclass AirlineSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Airline\n\nclass WorkspaceSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Workspace\n\nclass PassengerSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Passenger\n```\n\nviews.py:\n```python\nclass AirlineList(generics.ListCreateAPIView):\n    model = Airline\n    serializer_class = AirlineSerializer\n\nclass AirlineDetail(generics.RetrieveUpdateDestroyAPIView):\n    model = Airline\n    serializer_class = AirlineSerializer\n\nclass WorkspaceList(generics.ListCreateAPIView):\n    model = Workspace\n    serializer_class = WorkspaceSerializer\n\nclass WorkspaceDetail(generics.RetrieveUpdateDestroyAPIView):\n    model = Workspace\n    serializer_class = WorkspaceSerializer\n\nclass PassengerList(generics.ListCreateAPIView):\n    model = Passenger\n    serializer_class = PassengerSerializer\n\nclass PassengerDetail(generics.RetrieveUpdateDestroyAPIView):\n    model = Passenger\n    serializer_class = PassengerSerializer\n```\n\nI am trying to implement Filtering against query parameters as described in the Django REST framework documentation, but I am having trouble understanding how to do it."
    },
    {
        "role": "assistant",
        "content": "To add filtering functionality to your Django REST framework API using query strings, you can leverage Django REST framework's built-in filtering mechanisms. Here's a step-by-step guide on how you can achieve this:\n\n### Step 1: Install Django Filter\n\nFirst, make sure you have `django-filter` installed, as it provides easy-to-use filtering functionalities for your API. You can install it using pip:\n\n```bash\npip install django-filter\n```\n\n### Step 2: Update Your Django Settings\n\nAdd `django_filters` to your `INSTALLED_APPS` in your `settings.py` file:\n\n```python\nINSTALLED_APPS = [\n    ...\n    'django_filters',\n]\n```\n\n### Step 3: Configure the Filter Backends\n\nIn your `settings.py`, configure the default filter backends to use `django_filters.rest_framework.DjangoFilterBackend`:\n\n```python\nREST_FRAMEWORK = {\n    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],\n}\n```\n\n### Step 4: Define Filters\n\nYou need to define specific filters for your `Passenger` model to filter by `workspace` and `airline`. You can define custom filter classes or use the `filterset_fields` attribute directly in your views.\n\n#### Option 1: Using `filterset_fields`\n\nModify your `PassengerList` view to use `filterset_fields`:\n\n```python\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass PassengerList(generics.ListCreateAPIView):\n    queryset = Passenger.objects.all()\n    serializer_class = PassengerSerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_fields = {\n        'workspace__id': ['exact'],\n        'workspace__airline__id': ['exact'],\n    }\n```\n\nHere, we are filtering on the `workspace` ID and the `airline` ID through the `workspace` relationship.\n\n#### Option 2: Using a Custom Filter Class\n\nAlternatively, you can define a custom filter class if you need more complex filtering logic:\n\n```python\nimport django_filters\n\nclass PassengerFilter(django_filters.FilterSet):\n    workspace = django_filters.NumberFilter(field_name='workspace__id')\n    airline = django_filters.NumberFilter(field_name='workspace__airline__id')\n\n    class Meta:\n        model = Passenger\n        fields = ['workspace', 'airline']\n\nclass PassengerList(generics.ListCreateAPIView):\n    queryset = Passenger.objects.all()\n    serializer_class = PassengerSerializer\n    filter_backends = [DjangoFilterBackend]\n    filterset_class = PassengerFilter\n```\n\n### Step 5: Test the API\n\nAfter setting up the filters, you can test your API by making requests with query parameters. For example:\n\n- To filter passengers by workspace ID:\n  ```\n  /api/passengers/?workspace__id=1\n  ```\n\n- To filter passengers by airline ID:\n  ```\n  /api/passengers/?workspace__airline__id=1\n  ```\n\nThis setup will allow you to filter passengers based on their associated workspace or airline using query parameters in your requests."
    }
]