[
    {
        "role": "user",
        "content": "How can I execute code line by line in Jupyter Notebook? I am currently learning Python Machine Learning through an .ipynb file, but it has become troublesome to analyze the code. Is there a way to execute the code line by line to check each variable value and understand what each library function does, without commenting out parts of the code each time? Also, is there a way to check each variable's value without using print() or display(), similar to how it is done in the python interactive shell in terminal?"
    },
    {
        "role": "assistant",
        "content": "Executing code line by line in a Jupyter Notebook can indeed help you understand how the code works and track the values of variables. Here's how you can do that, along with tips on checking variable values without using `print()` or `display()`:\n\n### Executing Code Line by Line\n\n1. **Cell Splitting**: Split your code into smaller cells. You can do this by selecting a part of the code and pressing `Ctrl + Shift + -`. This way, you can execute each line or small group of lines in separate cells.\n\n2. **Step-by-Step Execution with Debugging**: \n   - Jupyter Notebook supports the use of the `ipdb` library for interactive debugging. You can insert a breakpoint in your code using `import ipdb; ipdb.set_trace()`. This will pause the execution, and you can step through the code line by line using commands like `n` for next line.\n   \n3. **%debug Magic Command**: If an exception is raised, you can use `%debug` in a new cell to start an interactive debugger session right after the exception, allowing you to inspect the environment where the exception occurred.\n\n### Checking Variable Values\n\n1. **Using the Variable Inspector Extension**: \n   - You can install the `jupyterlab-variableinspector` extension, which provides a GUI to see all variables, their types, and their values in a sidebar. This is similar to what you may be familiar with in certain IDEs.\n\n2. **Interactive Widgets**: Using `ipywidgets`, you can create interactive elements that display variable values. This approach requires some setup but can be quite powerful.\n\n3. **Using `?` and `??` for Documentation**: Place a `?` or `??` after a variable or function name to display documentation and source code information. This can be useful for understanding what a particular function does.\n\n4. **%who and %whos Magic Commands**: Use `%who` or `%whos` to list variables in the current session. `%whos` provides more detailed information, including size and type.\n\n5. **Using `pdb` for Debugging**: Python's built-in `pdb` module can also be used in Jupyter Notebooks. By adding `import pdb; pdb.set_trace()`, you can enter the interactive debugging mode and inspect variables.\n\nWhile these methods won't precisely replicate the behavior of an interactive shell, they offer a robust set of tools for closely monitoring and understanding your code's execution within Jupyter Notebook."
    }
]