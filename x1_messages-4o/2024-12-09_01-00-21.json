[
    {
        "role": "user",
        "content": "How can I pass custom parameters to a RequestHandler in Python? The Python documentation provides an example of creating an HTTP server:\n\n```python\ndef run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n    server_address = ('', 8000)\n    httpd = server_class(server_address, handler_class)\n    httpd.serve_forever()\n```\nA RequestHandler class is supplied to the Server, which then automatically instantiates the handler. Now, I want to pass in custom parameters to the request handler at the point of its creation. Specifically, I want to pass in parameters from the command line, and accessing sys.argv within the request handler class appears unnecessarily clunky. I'm contemplating overriding parts of the Server class, but I think there might be a simpler solution that I'm missing. How can and should I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To pass custom parameters to a `RequestHandler` in Python when using `HTTPServer`, you can subclass the request handler and modify it to accept additional parameters. One common approach is to use a closure or a factory function to encapsulate the additional parameters, allowing you to pass them to the handler upon instantiation.\n\nHere's a step-by-step guide on how you can achieve this:\n\n1. **Subclass `BaseHTTPRequestHandler`:** Create a custom handler that subclasses `BaseHTTPRequestHandler`.\n\n2. **Create a Factory Function:** Use a factory function to create instances of your custom handler, passing the additional parameters you need.\n\n3. **Modify the Handler Initialization:** Adjust the handler to accept and store the additional parameters.\n\nHere's an example implementation:\n\n```python\nfrom http.server import HTTPServer, BaseHTTPRequestHandler\nimport sys\n\n# Step 1: Create a custom handler class\nclass CustomHandler(BaseHTTPRequestHandler):\n    def __init__(self, *args, custom_param=None, **kwargs):\n        self.custom_param = custom_param\n        super().__init__(*args, **kwargs)\n\n    def do_GET(self):\n        # Use the custom parameter in your handler logic\n        self.send_response(200)\n        self.send_header('Content-type', 'text/html')\n        self.end_headers()\n        message = f\"Custom parameter is: {self.custom_param}\"\n        self.wfile.write(message.encode('utf-8'))\n\n# Step 2: Create a factory function\ndef handler_factory(custom_param):\n    def handler(*args, **kwargs):\n        CustomHandler(*args, custom_param=custom_param, **kwargs)\n    return handler\n\ndef run(server_class=HTTPServer, handler_class=BaseHTTPRequestHandler):\n    # Step 3: Extract custom parameters from command line\n    custom_param = sys.argv[1] if len(sys.argv) > 1 else \"Default Value\"\n\n    # Use the factory function to create the handler class\n    handler_with_param = handler_factory(custom_param)\n\n    # Run the server with the custom handler\n    server_address = ('', 8000)\n    httpd = server_class(server_address, handler_with_param)\n    print(f\"Serving on port 8000 with custom parameter: {custom_param}\")\n    httpd.serve_forever()\n\nif __name__ == '__main__':\n    run()\n```\n\n### Explanation:\n\n- **CustomHandler Class:** This is a subclass of `BaseHTTPRequestHandler` where you can define how to handle requests. It's modified to accept a `custom_param` during initialization.\n\n- **Handler Factory Function:** The `handler_factory` function takes the `custom_param` and returns a new handler function that adds this parameter to the `CustomHandler`.\n\n- **Server Initialization:** In the `run` function, we extract the custom parameter from `sys.argv`, then create a handler using the factory function, and finally start the server with this handler.\n\nThis approach allows you to pass and use custom parameters in your request handler without needing to modify the server class or access `sys.argv` directly within the handler."
    }
]