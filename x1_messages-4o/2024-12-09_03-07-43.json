[
    {
        "role": "user",
        "content": "How can I filter out integers and keep only float numbers in a numpy array? I have an input numpy array as follows:\n\n```python\nimport numpy as np\n\ninput = np.array([0.0, 0.01, 1.0, 2.0, 2.001, 2.002])\n```\nI want to get a desired output, where all the integer values are discarded and only the float values are retained. Is there a built-in function in numpy to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To filter out integers and keep only float numbers in a NumPy array, you can use boolean indexing along with the `np.modf` function, which separates the fractional and integer parts of the numbers. Here's how you can achieve that:\n\n```python\nimport numpy as np\n\ninput_array = np.array([0.0, 0.01, 1.0, 2.0, 2.001, 2.002])\n\n# Use np.modf to separate fractional and integer parts\nfractional_parts, _ = np.modf(input_array)\n\n# Create a boolean mask where the fractional part is not zero\nmask = fractional_parts != 0\n\n# Apply the mask to the original array\noutput_array = input_array[mask]\n\nprint(output_array)\n```\n\nThis will give you the desired output by filtering out the integer values and keeping only the float numbers:\n\n```\n[0.01 2.001 2.002]\n```\n\nThe `np.modf` function helps in determining which numbers have non-zero fractional parts, and the boolean mask is used to filter those numbers from the original array."
    }
]