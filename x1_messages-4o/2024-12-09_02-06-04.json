[
    {
        "role": "user",
        "content": "I'm using PyLint in Wing IDE on Windows to run a python project that has a sub-directory (package). My project structure is like this:\n\n```\n__init__.py\nmyapp.py\none.py\nsubdir\\\n    __init__.py\n    two.py\n```\nInside `two.py`, I'm importing a module 'one' from the top-level directory with `import one`. This works perfectly at runtime because the top-level directory (from which `myapp.py` is run) is included in the Python path. However, when running PyLint on `two.py`, I encounter an error: `F0401: Unable to import 'one'`. How can I solve this PYTHONPATH issue in PyLint?"
    },
    {
        "role": "assistant",
        "content": "When you encounter the `F0401: Unable to import 'one'` error in PyLint, it typically means that PyLint is unable to resolve the import path correctly. This happens because PyLint doesn't automatically include the directory from which your script is run in its search path. To resolve this issue, you can make use of a few different methods:\n\n1. **Set PYTHONPATH in the Environment:**\n   - You can set the `PYTHONPATH` environment variable to include the top-level directory of your project. This allows PyLint to find the modules as Python does at runtime.\n\n   Here's how you can set it temporarily from the command line before running PyLint:\n\n   ```bash\n   set PYTHONPATH=path\\to\\your\\project\n   pylint path\\to\\your\\project\\subdir\\two.py\n   ```\n\n2. **Use a `.pylintrc` Configuration File:**\n   - You can create a `.pylintrc` file in the root of your project (or modify an existing one) and add the path to the `init-hook` option in the `[MASTER]` section.\n\n   Example `.pylintrc` file:\n   ```ini\n   [MASTER]\n   init-hook='import sys; sys.path.append(\"path/to/your/project\")'\n   ```\n\n   This will ensure that every time PyLint runs, it includes the specified path in its search path.\n\n3. **Modify the sys.path in the Script:**\n   - If you want a more script-specific solution, you can modify the `sys.path` at the beginning of your `two.py` file. This is generally not recommended as a permanent fix but can be useful for quick checks.\n\n   Add these lines at the top of `two.py`:\n\n   ```python\n   import sys\n   import os\n   sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '../')))\n   ```\n\n4. **Use the `--init-hook` Command Line Option:**\n   - You can directly pass the `--init-hook` option to PyLint when you run it from the command line.\n\n   ```bash\n   pylint --init-hook=\"import sys; sys.path.append('path/to/your/project')\" path\\to\\your\\project\\subdir\\two.py\n   ```\n\nBy setting the correct PYTHONPATH, PyLint should be able to resolve the import correctly and eliminate the `F0401` error. Choose the method that best fits your workflow and environment."
    }
]