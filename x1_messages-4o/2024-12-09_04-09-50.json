[
    {
        "role": "user",
        "content": "In Python, is there a way to check if an object is an instance of any given class, rather than a specific class? I am not interested in checking if an object is a class, a module, or a traceback. I am looking for a simple solution for this issue."
    },
    {
        "role": "assistant",
        "content": "Yes, in Python, you can check if an object is an instance of any class by using the `isinstance()` function. However, instead of checking against a specific class, you can check if the object is an instance of the base `object` class, since all classes in Python ultimately inherit from `object`. Here's a simple way to do it:\n\n```python\ndef is_instance_of_any_class(obj):\n    return isinstance(obj, object)\n\n# Example usage\nsome_object = \"Hello, world!\"\nresult = is_instance_of_any_class(some_object)\nprint(result)  # This will print True because strings are instances of a class.\n```\n\nThis approach works because every instance of a class in Python is an instance of the base class `object`. Thus, `isinstance(obj, object)` will return `True` for any object that is an instance of a class. However, it will not return `True` for objects that are not instances of classes, such as `None`, which is a singleton, or built-in functions."
    }
]