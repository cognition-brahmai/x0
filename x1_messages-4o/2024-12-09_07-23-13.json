[
    {
        "role": "user",
        "content": "How can I access the `call_count` for a mocked function in Python? I am working on a library that uses `requests.post()` to perform POST HTTP requests to an external server. In my unit test, I don't want to contact the real server but to mock the response instead. I have successfully done this, but now I'm trying to get the number of calls to my mocked function. I've tried accessing `mocked_post.call_count` but it doesn't exist. I've also looked for this property on several other objects, including `mylib.requests.post`, but haven't had any success. Here's the relevant section of my code:\n\n```python\ndef mocked_post(url, headers, data, **kwargs):\n    response = Mock()\n\n    # Some logic, irrelevant here.\n\n    return response\n\n@patch('mylib.requests.post', mocked_post)\nclass MyTest(TestCase):\n\n    def test_foo(self):\n        # Some test logic\n```\n\nHow can I get the call count for my mocked `requests.post` function?"
    },
    {
        "role": "assistant",
        "content": "To access the `call_count` for a mocked function in Python, especially when using the `unittest.mock` module, you need to ensure that you are using the mock object correctly. When you decorate a test class or a test method with `@patch`, it replaces the target with a mock object. However, in your case, you are replacing it with a function (`mocked_post`), which does not have mock capabilities like tracking call count.\n\nTo achieve your goal, you should let `@patch` handle the creation of the mock object for you, instead of using a custom function. Here\u2019s how you can modify your code to get the call count:\n\n```python\nfrom unittest import TestCase\nfrom unittest.mock import patch, Mock\n\nclass MyTest(TestCase):\n\n    @patch('mylib.requests.post')  # Patching 'requests.post' directly\n    def test_foo(self, mocked_post):\n        # Configure the mock to return a specific response if needed\n        mocked_post.return_value = Mock()\n\n        # Call the function which makes the POST request\n        # Example: my_function_that_calls_post()\n\n        # Access the call count\n        print(mocked_post.call_count)\n\n        # Your test assertions\n        # Example: self.assertEqual(mocked_post.call_count, expected_count)\n```\n\nIn this revised code:\n\n- The `@patch` decorator is used directly on the test method `test_foo`. This allows `unittest.mock` to automatically create a mock object for `requests.post`.\n- The mock object (`mocked_post`) is passed as an argument to `test_foo`.\n- You can now access `mocked_post.call_count` to get the number of times the mock was called.\n- You can also configure the mock to return a specific response using `mocked_post.return_value`.\n\nThis approach ensures that you have full access to all the mocking capabilities, such as `call_count`, `assert_called_with`, and more."
    }
]