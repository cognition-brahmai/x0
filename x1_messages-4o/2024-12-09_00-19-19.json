[
    {
        "role": "user",
        "content": "I am coming from a Java background and I am trying to understand the Python equivalent of \"toString\" which is \"__str__\". I created a class in Python and defined a \"__str__\" method to return a string representation of an object. However, when I append an object to a list and then try to print the list, I am not getting the expected output. Instead of getting the string representation of the object, I am getting the memory address of the object. Can you help me understand why this is happening and how to get the expected output?\n\nThis is my code:\n\n```python\nclass Node:\n\n    def __init__(self, id):\n        self.id = id\n        self.neighbours = []\n        self.distance = 0\n\n\n    def __str__(self):\n        return str(self.id)\n\nuno = Node(1)    \ndue = Node(2)    \ntri = Node(3)    \nqua = Node(4)\n\nprint(uno)  # prints 1\n\nuno.neighbours.append([[due, 4], [tri, 5]])\n\nprint(uno.neighbours)  # prints [[[<__main__.Node instance at 0x00000000023A6C48>, 4], [<__main__.Node instance at 0x00000000023A6D08>, 5]]]\n```\n\nI expected it to print `[[2, 4], [3, 5]]`. What am I missing?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering arises because the `print` function for lists in Python does not automatically call the `__str__` method of the objects within the list. Instead, it calls the `__repr__` method of each object. By default, if you don't define a `__repr__` method, it falls back to the default representation, which is the memory address of the object.\n\nTo achieve the output you expect, you can define the `__repr__` method in your `Node` class. The `__repr__` method should return a string that ideally is a valid Python expression that could recreate the object, but it can also serve a similar purpose to `__str__` for debugging.\n\nHere's how you can modify your class to include the `__repr__` method:\n\n```python\nclass Node:\n\n    def __init__(self, id):\n        self.id = id\n        self.neighbours = []\n        self.distance = 0\n\n    def __str__(self):\n        return str(self.id)\n\n    def __repr__(self):\n        return str(self.id)\n\nuno = Node(1)    \ndue = Node(2)    \ntri = Node(3)    \nqua = Node(4)\n\nprint(uno)  # prints 1\n\nuno.neighbours.append([[due, 4], [tri, 5]])\n\nprint(uno.neighbours)  # prints [[2, 4], [3, 5]]\n```\n\nWith this change, when you print `uno.neighbours`, Python will use the `__repr__` method of each `Node` object to get a string representation, resulting in the desired output `[[2, 4], [3, 5]]`."
    }
]