[
    {
        "role": "user",
        "content": "How can I change the default color that pyplot uses to fill data that exceed the specified range of the colorbar in Python's matplotlib? I am using contourf in pyplot to fill a grid with color. The default color for values exceeding the bounds of the colorbar is white, which can be quite glaring if the colormap does not have white as its end colors. I need to specify a static colorbar and thus, it is inevitable to have occasional extreme values that exceed its bounds. I believe there is a way to specify which color to use at each bound if they are exceeded by using rcParams, but I haven't been able to find information on this."
    },
    {
        "role": "assistant",
        "content": "To change the default color used by `contourf` in Matplotlib for values that exceed the bounds of the colorbar, you can customize the colormap by setting the `extend` attribute and using the `set_over` and `set_under` methods of a colormap. These methods allow you to specify colors for out-of-range values.\n\nHere's a step-by-step guide to achieve this:\n\n1. **Create a Colormap**: Start by choosing a colormap that you want to use.\n\n2. **Set Over and Under Colors**: Use the `set_over` and `set_under` methods of the colormap to specify colors for values that exceed the upper bound and are below the lower bound of the colorbar, respectively.\n\n3. **Specify the `extend` Parameter**: When you create the contour plot, specify the `extend` parameter to tell Matplotlib how to handle out-of-range values. The options are `'neither'`, `'both'`, `'min'`, and `'max'`.\n\nHere's an example code snippet that demonstrates how to do this:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport matplotlib.colors as mcolors\n\n# Create some example data\nx = np.linspace(-3.0, 3.0, 100)\ny = np.linspace(-3.0, 3.0, 100)\nX, Y = np.meshgrid(x, y)\nZ = np.sin(X**2 + Y**2)\n\n# Choose a colormap\ncmap = plt.get_cmap('viridis')\n\n# Set custom colors for out-of-range values\ncmap.set_over('red')    # Color for values above the colorbar range\ncmap.set_under('blue')  # Color for values below the colorbar range\n\n# Create a contour plot\n# Set extend='both' to allow for the custom over and under colors to be used\ncontour = plt.contourf(X, Y, Z, levels=np.linspace(-1, 1, 10), cmap=cmap, extend='both')\n\n# Add a colorbar\ncbar = plt.colorbar(contour)\n\n# Show the plot\nplt.show()\n```\n\nIn this example, values above the colorbar range will be colored in red, and values below the range will be colored in blue. Adjust the colors in `set_over` and `set_under` to fit your desired aesthetics. The `extend='both'` parameter ensures that both colors are used when values fall out of the specified range."
    }
]