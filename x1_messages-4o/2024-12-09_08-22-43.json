[
    {
        "role": "user",
        "content": "What is the definition of \"hashable\" in Python? I've seen terms like \"hashable\" or \"hashable objects\" being used in Python and I'm unable to understand their meaning."
    },
    {
        "role": "assistant",
        "content": "In Python, an object is considered \"hashable\" if it has a hash value that remains constant during its lifetime. This means that hashable objects can be used as keys in dictionaries or elements in sets, as these data structures use hash values to efficiently store and look up items.\n\nFor an object to be hashable, it needs to meet the following criteria:\n\n1. **Immutability**: Hashable objects are typically immutable, meaning their state cannot be modified after they are created. This immutability ensures that the hash value remains consistent. Common examples of immutable and hashable types in Python include `int`, `float`, `str`, and `tuple` (as long as the tuple only contains hashable elements).\n\n2. **`__hash__()` Method**: The object must implement a `__hash__()` method that returns an integer hash value. This hash value is used to quickly compare dictionary keys during a lookup.\n\n3. **`__eq__()` Method**: The object must also implement an `__eq__()` method to handle equality comparisons. Objects that compare as equal must have the same hash value.\n\nBy default, user-defined classes in Python are hashable, but if you override the `__eq__()` method without also overriding `__hash__()`, the object will not be hashable. You can make your custom objects hashable by defining both methods in your class.\n\nHere's a simple example of a hashable custom class:\n\n```python\nclass MyHashableObject:\n    def __init__(self, value):\n        self.value = value\n    \n    def __eq__(self, other):\n        if isinstance(other, MyHashableObject):\n            return self.value == other.value\n        return False\n    \n    def __hash__(self):\n        return hash(self.value)\n\n# Example usage\nobj1 = MyHashableObject(10)\nobj2 = MyHashableObject(10)\n\nprint(obj1 == obj2)  # True\nprint(hash(obj1) == hash(obj2))  # True\n\n# Using the objects in a set\nmy_set = {obj1, obj2}\nprint(len(my_set))  # 1, because obj1 and obj2 are equal and thus considered the same in a set\n```\n\nIn this example, `MyHashableObject` instances are hashable because they implement both `__hash__()` and `__eq__()`, allowing them to be used as keys in dictionaries or elements in sets."
    }
]