[
    {
        "role": "user",
        "content": "I am working on writing a setup doc for a python project for other developers at work and I am trying to understand what should be set in the PYTHONPATH environment variable. I am currently using IntelliJ IDE and I believe certain incorrect settings are causing issues with python library lookups. I have read the documentation and I am still unsure of what should be in the PYTHONPATH environment variable. My PYTHONHOME is pointed to C:\\Python27' and my PYTHONPATH is currently set to PYTHONHOME. Should I also include the directories from sys.path? Should I set PYTHONPATH only when there are non-standard libraries that need to be found by python by default?"
    },
    {
        "role": "assistant",
        "content": "Setting the `PYTHONPATH` environment variable can be a bit tricky, especially when dealing with multiple Python environments or complex project structures. Here's a breakdown to help you understand better what to include in `PYTHONPATH` and when to use it:\n\n1. **Understanding `PYTHONPATH`:**\n   - The `PYTHONPATH` environment variable is used by Python to determine where to look for modules and packages when importing them. It's essentially an additional list of directories that Python will search through, on top of the standard locations.\n   - If you have non-standard libraries or custom modules that aren't installed in the standard directories (like site-packages), you can add their paths to `PYTHONPATH`.\n\n2. **Relationship with `sys.path`:**\n   - The directories listed in `PYTHONPATH` are added to `sys.path` when Python starts. `sys.path` is the list of directories that Python searches for modules and packages.\n   - Normally, `sys.path` includes the directory containing the script that was used to invoke the Python interpreter, standard library directories, and entries in `PYTHONPATH`.\n\n3. **Setting `PYTHONPATH`:**\n   - You typically set `PYTHONPATH` when you need Python to find modules in non-standard locations, especially during development.\n   - If your project has a specific directory where custom modules are stored, you can add that directory to `PYTHONPATH`.\n   - Avoid setting `PYTHONPATH` to point to standard library locations or to duplicate entries in `sys.path`.\n\n4. **Best Practices:**\n   - Only include paths in `PYTHONPATH` that are necessary for Python to find your custom or third-party modules that aren't installed in standard directories.\n   - If possible, use a virtual environment to manage dependencies and isolate your project's environment. This reduces the need to set `PYTHONPATH` manually.\n   - Use tools like `pip` or `conda` to install dependencies into your virtual environment, which will automatically handle the `sys.path` configuration for you.\n\n5. **Troubleshooting in IntelliJ:**\n   - Make sure that IntelliJ is configured to use the correct Python interpreter and that your project structure is correctly set up.\n   - Check the \"Project Structure\" settings in IntelliJ to ensure that all necessary directories are marked as \"Sources\" if they contain Python packages you want to import.\n   - If you still encounter issues, it may be worth checking IntelliJ's Python plugin settings and ensuring that the interpreter paths are correctly configured.\n\nIn summary, set `PYTHONPATH` only when you have specific, non-standard directories that need to be included for module lookup. For standard libraries and modules, rely on Python's default behavior and your virtual environment setup."
    }
]