[
    {
        "role": "user",
        "content": "Is there a method to specify during runtime where Python should search for shared libraries? I have a `fontforge.so` file located in `fontforge_bin` and I have tried to include it using the following code:\n\n```python\nos.environ['LD_LIBRARY_PATH']='fontforge_bin'\nsys.path.append('fontforge_bin')\nimport fontforge\n```\n\nHowever, I receive an `ImportError: fontforge_bin/fontforge.so: cannot open shared object file: No such file or directory`. When I run `ldd` on `fontforge_bin/fontforge.so`, I receive the following output:\n\n```shell\nlinux-vdso.so.1 =>  (0x00007fff2050c000)\nlibpthread.so.0 => /lib/libpthread.so.0 (0x00007f10ffdef000)\nlibc.so.6 => /lib/libc.so.6 (0x00007f10ffa6c000)\n/lib64/ld-linux-x86-64.so.2 (0x00007f110022d000)\n```\n\nHow can I solve this issue?"
    },
    {
        "role": "assistant",
        "content": "To resolve the issue of Python not being able to find and load your `fontforge.so` shared library, you can try the following steps:\n\n1. **Ensure Correct Path**: Make sure the path to `fontforge.so` is correctly specified. The path should be relative to the current working directory or an absolute path. Double-check if `fontforge_bin` is indeed in the same directory as your script or provide the full path.\n\n2. **Set LD_LIBRARY_PATH Before Execution**: Setting `LD_LIBRARY_PATH` within the script might not affect the Python interpreter immediately. Instead, try setting it before running your script. You can do this in the shell where you run your Python script:\n\n   ```bash\n   export LD_LIBRARY_PATH=$(pwd)/fontforge_bin:$LD_LIBRARY_PATH\n   python your_script.py\n   ```\n\n   This ensures that the environment variable is set before your script starts executing.\n\n3. **Use `ctypes` or `cffi`**: If you need to load shared libraries directly, consider using the `ctypes` or `cffi` libraries in Python. These libraries allow more control over loading shared objects:\n\n   ```python\n   import ctypes\n   import os\n\n   # Set the full path to the shared library\n   lib_path = os.path.join(os.getcwd(), 'fontforge_bin', 'fontforge.so')\n\n   # Load the shared library\n   fontforge = ctypes.CDLL(lib_path)\n   ```\n\n4. **Check for Missing Dependencies**: Since `ldd` does not show any missing dependencies, this might not be the issue, but it's good to ensure all dependencies are met. Ensure that all shared libraries that `fontforge.so` depends on are present and accessible.\n\n5. **Verify Permissions**: Ensure that the `fontforge.so` file and the directory it resides in have appropriate read and execute permissions set.\n\n6. **Use `LD_PRELOAD`**: As a last resort, you could try using the `LD_PRELOAD` environment variable to force the dynamic linker to load the library before others:\n\n   ```bash\n   LD_PRELOAD=$(pwd)/fontforge_bin/fontforge.so python your_script.py\n   ```\n\nThese steps should help you resolve the issue and correctly load the `fontforge.so` shared library in your Python script."
    }
]