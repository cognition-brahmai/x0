[
    {
        "role": "user",
        "content": "How can I calculate the union of two dict objects in Python, such that a (key, value) pair is present in the result if the key exists in either dictionary? For instance, I want to merge {'a' : 0, 'b' : 1} and {'c' : 2} resulting in {'a' : 0, 'b' : 1, 'c' : 2}. Also, I would like to achieve this without modifying the original input dictionaries."
    },
    {
        "role": "assistant",
        "content": "To calculate the union of two dictionaries in Python without modifying the original dictionaries, you can use the `copy()` method to create a shallow copy of one dictionary and then update it with the contents of the other dictionary using the `update()` method. This approach ensures that the original dictionaries remain unchanged. Here's how you can do it:\n\n```python\n# Original dictionaries\ndict1 = {'a': 0, 'b': 1}\ndict2 = {'c': 2}\n\n# Create a copy of the first dictionary\nresult = dict1.copy()\n\n# Update the copy with the second dictionary\nresult.update(dict2)\n\n# The result now contains the union of the two dictionaries\nprint(result)\n```\n\nThis will output:\n\n```\n{'a': 0, 'b': 1, 'c': 2}\n```\n\nThe `copy()` method creates a shallow copy of `dict1`, and `update()` merges `dict2` into the copy. This way, neither `dict1` nor `dict2` are modified, and `result` contains the union of both dictionaries."
    }
]