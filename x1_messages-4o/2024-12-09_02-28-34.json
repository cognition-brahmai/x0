[
    {
        "role": "user",
        "content": "How can I create multiple instances of a class in Python using a loop? I want to create 10 instances of a class, each assigned to a unique variable such as obj_1, obj_2, etc., and then add these instances to another object. These instances should also be accessible outside the loop, as demonstrated by this code:\n\n```python\nobj_1 = MyClass()\nother_object.add(obj_1)\nobj_2 = MyClass()\nother_object.add(obj_2)\n.\n.\n.\nobj_10 = MyClass()\nother_object.add(obj_10)\n\nobj_1.do_sth()\n```\n\nHow can I achieve this with a loop to make my code more concise?"
    },
    {
        "role": "assistant",
        "content": "You can achieve the creation of multiple instances of a class in Python using a loop by storing these instances in a list or a dictionary. This way, you can dynamically create variable names and access each instance outside the loop. Here's how you can do it using a list:\n\n```python\nclass MyClass:\n    def do_sth(self):\n        print(\"Doing something\")\n\nclass OtherObject:\n    def __init__(self):\n        self.items = []\n\n    def add(self, obj):\n        self.items.append(obj)\n\n# Create an instance of OtherObject\nother_object = OtherObject()\n\n# Initialize a list to store the instances\ninstances = []\n\n# Loop to create instances and add them to another object\nfor i in range(10):\n    instance = MyClass()\n    instances.append(instance)\n    other_object.add(instance)\n\n# Accessing each instance\nfor idx, instance in enumerate(instances, start=1):\n    print(f\"obj_{idx} is: {instance}\")\n    instance.do_sth()\n```\n\nIf you specifically want to use variable names like `obj_1`, `obj_2`, etc., you can use a dictionary to simulate this behavior:\n\n```python\n# Initialize a dictionary to store the instances with unique keys\ninstances = {}\n\n# Loop to create instances and add them to another object\nfor i in range(1, 11):\n    var_name = f'obj_{i}'\n    instance = MyClass()\n    instances[var_name] = instance\n    other_object.add(instance)\n\n# Accessing each instance\nfor var_name, instance in instances.items():\n    print(f\"{var_name} is: {instance}\")\n    instance.do_sth()\n```\n\nIn this example, `instances` is a dictionary where each key is a string like `obj_1`, `obj_2`, and so on, and each value is an instance of `MyClass`. You can access these instances using their keys, mimicking the behavior of using uniquely named variables."
    }
]