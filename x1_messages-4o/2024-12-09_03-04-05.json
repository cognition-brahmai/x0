[
    {
        "role": "user",
        "content": "I am working on a project where I need to authenticate with Google accounts using OAuth2 and Flask, but not on App Engine. The goal is to have users grant access to Google Calendar, after which I'll retrieve and further process information from the calendar. I also need to store and refresh the OAuth2 tokens. I've looked at Google's oauth2client library and can start the process to retrieve the authorization code, but I'm unsure of the next steps. I understand that I need to request the refresh token and access token, but the provided examples in the library are for App Engine and Django only. I've also tried using Flask's OAuth module that contains references to OAuth2, but I'm not finding a way to exchange the authorization code there either. I could possibly hand code the requests, but would prefer to use or adapt an existing Python module that makes requests easy, properly handles possible responses, and maybe even assists in storage of tokens. Is there a solution or module available to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To implement Google OAuth2 authentication with Flask and manage access to Google Calendar, you can use the `google-auth` and `google-auth-oauthlib` libraries, which work well with Flask and do not require App Engine or Django.\n\nHere's a step-by-step guide on how to set this up:\n\n### Step 1: Set Up Google API Credentials\n\n1. **Create a Project in Google Cloud Console:**\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/).\n   - Create a new project.\n   - Enable the Google Calendar API for your project.\n\n2. **Create OAuth Credentials:**\n   - Go to the Credentials page.\n   - Click on \"Create Credentials\" and select \"OAuth Client ID\".\n   - Set the application type to \"Web application\".\n   - Add your redirect URI (e.g., `http://localhost:5000/callback`).\n\n3. **Download the Credentials JSON:**\n   - Save the `client_secret.json` file provided by Google.\n\n### Step 2: Set Up Your Flask Application\n\n1. **Install Required Libraries:**\n\n   ```bash\n   pip install Flask google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n   ```\n\n2. **Create the Flask App:**\n\n   Below is a sample Flask application implementing Google OAuth2:\n\n   ```python\n   import os\n   import json\n   import requests\n   from flask import Flask, redirect, url_for, session, request\n   from google.oauth2.credentials import Credentials\n   from google_auth_oauthlib.flow import Flow\n   from googleapiclient.discovery import build\n\n   app = Flask(__name__)\n   app.secret_key = 'YOUR_SECRET_KEY'  # Replace with a secure key\n   os.environ['OAUTHLIB_INSECURE_TRANSPORT'] = '1'  # Only for testing purposes\n\n   # Load client secrets from a file\n   CLIENT_SECRETS_FILE = \"client_secret.json\"\n   SCOPES = ['https://www.googleapis.com/auth/calendar.readonly']\n\n   @app.route('/')\n   def index():\n       return 'Welcome to Google OAuth2 with Flask! <a href=\"/authorize\">Authorize</a>'\n\n   @app.route('/authorize')\n   def authorize():\n       flow = Flow.from_client_secrets_file(\n           CLIENT_SECRETS_FILE,\n           scopes=SCOPES,\n           redirect_uri=url_for('callback', _external=True))\n       authorization_url, state = flow.authorization_url(\n           access_type='offline',\n           include_granted_scopes='true')\n\n       session['state'] = state\n       return redirect(authorization_url)\n\n   @app.route('/callback')\n   def callback():\n       state = session['state']\n       flow = Flow.from_client_secrets_file(\n           CLIENT_SECRETS_FILE,\n           scopes=SCOPES,\n           state=state,\n           redirect_uri=url_for('callback', _external=True))\n\n       flow.fetch_token(authorization_response=request.url)\n       credentials = flow.credentials\n\n       # Store credentials in the session or in a database\n       session['credentials'] = credentials_to_dict(credentials)\n\n       return redirect(url_for('calendar'))\n\n   @app.route('/calendar')\n   def calendar():\n       if 'credentials' not in session:\n           return redirect('authorize')\n\n       credentials = Credentials(**session['credentials'])\n\n       service = build('calendar', 'v3', credentials=credentials)\n       # Call the Calendar API\n       events_result = service.events().list(calendarId='primary', maxResults=10).execute()\n       events = events_result.get('items', [])\n\n       if not events:\n           return 'No upcoming events found.'\n\n       return 'Events: ' + ', '.join([event['summary'] for event in events])\n\n   def credentials_to_dict(credentials):\n       return {\n           'token': credentials.token,\n           'refresh_token': credentials.refresh_token,\n           'token_uri': credentials.token_uri,\n           'client_id': credentials.client_id,\n           'client_secret': credentials.client_secret,\n           'scopes': credentials.scopes\n       }\n\n   if __name__ == '__main__':\n       app.run(debug=True)\n   ```\n\n### Step 3: Run the Flask Application\n\nRun your Flask application with:\n\n```bash\npython your_flask_app.py\n```\n\nMake sure that your redirect URI in the Google Cloud Console matches the URI in your Flask application.\n\n### Step 4: Storing and Refreshing Tokens\n\nIn the example above, tokens are stored in the session. For production, you should store the `refresh_token` securely in a database for persistent access. When tokens expire, use the stored `refresh_token` to obtain a new `access_token` automatically when making API calls.\n\nThis setup uses the `google-auth-oauthlib` to handle OAuth2 flow and token management, which simplifies interactions with Google APIs significantly."
    }
]