[
    {
        "role": "user",
        "content": "How can I include `package_data` for `sdist` in Python without using a MANIFEST.in file? I am using Python 2.7.6 and setuptools version 3.6. My 'setup.py' file currently looks like this:\n\n```python\nimport setuptools\n\nsetuptools.setup(\n    name='foo',\n    version='2015.3',\n    license='commercial',\n    packages=setuptools.find_packages(),\n\n    package_data={'': ['foo/bar.txt']},\n)\n```\n\nHowever, I am unable to include 'foo/bar.txt'. I referred to a blog post that seemed to suggest that `package_data` are not included in source distributions \u2014 they are only included in binary (`setup.py bdist`) distributions and installs (`setup.py install`). Is this information still valid?"
    },
    {
        "role": "assistant",
        "content": "In Python 2.7.6 with setuptools 3.6, the `package_data` option in `setup.py` is indeed meant to specify data files to be included in the package. However, by default, `sdist` (source distribution) does not automatically include these files unless they are also specified in a `MANIFEST.in` file.\n\nTo ensure that your `package_data` files are included in the source distribution without using a `MANIFEST.in` file, you can use the `include_package_data=True` option in your `setup.py` file. However, this typically works more reliably with a `MANIFEST.in` file, which you are trying to avoid.\n\nGiven the constraints of your setup and the specific versions you are using, here's a workaround you can try:\n\n1. Use `include_package_data=True` in your `setup.py`:\n\n    ```python\n    import setuptools\n\n    setuptools.setup(\n        name='foo',\n        version='2015.3',\n        license='commercial',\n        packages=setuptools.find_packages(),\n        include_package_data=True,\n        package_data={'': ['foo/bar.txt']},\n    )\n    ```\n\n2. Ensure that your directory structure is correct and that `foo/bar.txt` resides within a package directory recognized by `setuptools.find_packages()`.\n\n3. If the above doesn't work, another approach is to use the `data_files` option. However, `data_files` is intended for files outside of your package directories and is not limited to package-relative paths.\n\nUnfortunately, without using a `MANIFEST.in` file, your options are quite limited in these older versions of Python and setuptools. It might be beneficial to reconsider using a `MANIFEST.in` file, as it provides a straightforward way to specify additional files to include in your source distribution.\n\nIf upgrading is an option, newer versions of setuptools have better support for including `package_data` in source distributions using `include_package_data=True` more reliably."
    }
]