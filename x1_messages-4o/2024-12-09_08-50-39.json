[
    {
        "role": "user",
        "content": "How can I write a JavaScript function that formats a given text with a maximum length for each line?"
    },
    {
        "role": "assistant",
        "content": "To format a given text such that each line does not exceed a specified maximum length, you can create a JavaScript function that splits the text into words and then constructs lines by adding words until the maximum length is reached. Here's a simple implementation:\n\n```javascript\nfunction formatText(text, maxLength) {\n    // Split the text into words using spaces as the delimiter\n    const words = text.split(' ');\n\n    // Initialize an array to hold the formatted lines\n    const formattedLines = [];\n\n    // Initialize a variable to hold the current line being constructed\n    let currentLine = '';\n\n    // Loop through each word in the words array\n    for (const word of words) {\n        // Check if adding the word to the current line exceeds maxLength\n        if ((currentLine + word).length <= maxLength) {\n            // If the current line is not empty, add a space before appending the word\n            currentLine += (currentLine ? ' ' : '') + word;\n        } else {\n            // If the current line is full, push it to the formatted lines array\n            formattedLines.push(currentLine);\n\n            // Start a new line with the current word\n            currentLine = word;\n        }\n    }\n\n    // Push the last line if it's not empty\n    if (currentLine) {\n        formattedLines.push(currentLine);\n    }\n\n    // Join the formatted lines with newline characters to get the final formatted text\n    return formattedLines.join('\\n');\n}\n\n// Example usage:\nconst text = \"This is an example text that we want to format so that each line has a maximum length.\";\nconst maxLength = 20;\nconst formattedText = formatText(text, maxLength);\nconsole.log(formattedText);\n```\n\n### Explanation:\n\n1. **Splitting the Text**: The text is split into individual words using `split(' ')`, assuming words are separated by spaces.\n\n2. **Iterating through Words**: We iterate through each word and check if adding the word to the current line would exceed the `maxLength`.\n\n3. **Constructing Lines**: If adding the word doesn't exceed the limit, it's appended to the current line. If it does exceed the limit, the current line is pushed to the array of formatted lines, and a new line is started with the current word.\n\n4. **Handling Remaining Text**: After the loop, if there's any remaining text in `currentLine`, it's added to the list of formatted lines.\n\n5. **Output**: The formatted lines are joined with newline characters to create the final formatted text.\n\nThis function should handle most simple cases of text formatting. You can adapt this logic for more complex formatting requirements, such as handling punctuation or hyphenation."
    }
]