[
    {
        "role": "user",
        "content": "In OpenCV Python, I am looking for a way to draw a rotated rectangle that is returned by cv2.minAreaRect() as ((x1,y1),(x2,y2),angle). The cv2.rectangle() function does not seem to support an angle. Furthermore, the tuple returned is not of the \"RotatedRect\" class, which seems not to be implemented in the Python bindings, hence there is no points() method like in the C++ tutorial \"Creating Bounding rotated boxes and ellipses for contours\". How can I draw a rotated rectangle from lines? Should I rotate about the center point or the first point given?"
    },
    {
        "role": "assistant",
        "content": "To draw a rotated rectangle using OpenCV in Python, you can utilize the `cv2.boxPoints()` function, which converts the rotated rectangle returned by `cv2.minAreaRect()` into a set of four points. These points can then be used to draw lines that form the rectangle using `cv2.polylines()`.\n\nHere's a step-by-step approach to achieve this:\n\n1. Use `cv2.minAreaRect()` to get the minimum area rectangle for your set of points or contour. This function returns a tuple `((center_x, center_y), (width, height), angle)`, where:\n   - `(center_x, center_y)` is the center of the rectangle.\n   - `(width, height)` are the dimensions of the rectangle.\n   - `angle` is the rotation angle of the rectangle.\n\n2. Convert the rectangle to four corner points using `cv2.boxPoints()`.\n\n3. Draw the rectangle using `cv2.polylines()`.\n\nHere's a sample code to demonstrate the process:\n\n```python\nimport cv2\nimport numpy as np\n\n# Example contour or set of points\npoints = np.array([[50, 50], [200, 50], [200, 200], [50, 200]])\n\n# Calculate the minimum area rectangle\nrect = cv2.minAreaRect(points)\n\n# Convert the rectangle to four corner points\nbox = cv2.boxPoints(rect)\nbox = np.int0(box)  # Convert to integer\n\n# Create an empty image to draw on\nimage = np.zeros((300, 300, 3), dtype=np.uint8)\n\n# Draw the rotated rectangle\ncv2.polylines(image, [box], isClosed=True, color=(0, 255, 0), thickness=2)\n\n# Display the image\ncv2.imshow('Rotated Rectangle', image)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\nIn this code:\n- `cv2.boxPoints()` is used to get the four vertices of the rectangle.\n- `cv2.polylines()` is used to draw the lines connecting these points, forming the rotated rectangle.\n\nThis method effectively handles the drawing of rotated rectangles and ensures that you can visualize the result from `cv2.minAreaRect()` accurately."
    }
]