[
    {
        "role": "user",
        "content": "How can I use type hints in namedtuple? Consider the following code:\n\n```python\nfrom collections import namedtuple\npoint = namedtuple(\"Point\", (\"x:int\", \"y:int\"))\n```\nThe code above is just a way to demonstrate what I am trying to achieve. I would like to make namedtuple with type hints. Is there any elegant way to achieve the desired result?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can use the `NamedTuple` class from the `typing` module to create named tuples with type hints. Here's how you can achieve this:\n\n```python\nfrom typing import NamedTuple\n\nclass Point(NamedTuple):\n    x: int\n    y: int\n```\n\nIn this example, the `Point` class is a named tuple with two fields, `x` and `y`, both of which are annotated with the type `int`. This approach provides a clean and elegant way to use type hints with named tuples.\n\nYou can create instances of the `Point` class and use them just like regular named tuples:\n\n```python\np = Point(3, 4)\nprint(p.x)  # Output: 3\nprint(p.y)  # Output: 4\n```\n\nThis method leverages Python's type hinting system, providing better readability and enabling static type checkers to verify the correctness of types in your code."
    }
]