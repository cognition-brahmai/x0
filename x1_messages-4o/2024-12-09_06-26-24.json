[
    {
        "role": "user",
        "content": "I'm having trouble finding a way to pass a set of kwargs from save to a custom post_save signal in Django. I have a custom form where I'm saving the user as follows:\n\n```python\ndef save(self, commit=True):\n    user = super(CustomFormThing, self).save(commit=False)\n    #set some other attrs on user here ...\n    if commit:\n        user.save()\n    return user\n```\n\nHowever, in my custom post_save hook, I don't seem to be receiving any kwargs. Here's how I've set it up:\n\n```python\n@receiver(post_save, sender=User)\ndef create_profile(sender, instance, created, **kwargs):\n    some_id = kwargs.get('some', None)\n    other_id = kwargs.get('other', None)\n\n    if created:\n        #do something with the kwargs above...\n```\n\nHow can I pass kwargs from the save method to the post_save event?"
    },
    {
        "role": "assistant",
        "content": "In Django, the `post_save` signal is automatically triggered by Django's ORM when a model's `save()` method is called. The signal handler receives the `instance`, `created`, and `kwargs` parameters, but these `kwargs` are not customizable from the `save()` method call. Instead, they are automatically populated by Django with information such as `raw`, `using`, and `update_fields`.\n\nTo pass custom data to a signal, you will have to use a workaround, such as using thread-local storage or attaching data directly to the model instance. Here's an example using a custom attribute on the instance:\n\n1. **Add Custom Attributes to the Instance:**\n\n   You can attach custom attributes to your `user` instance before saving it, which can then be accessed in the signal handler.\n\n   ```python\n   def save(self, commit=True):\n       user = super(CustomFormThing, self).save(commit=False)\n       # Set some other attrs on user here ...\n       user.some = 'some_value'\n       user.other = 'other_value'\n       if commit:\n           user.save()\n       return user\n   ```\n\n2. **Access Custom Attributes in the Signal:**\n\n   In the signal handler, you can then access these attributes directly from the `instance`.\n\n   ```python\n   @receiver(post_save, sender=User)\n   def create_profile(sender, instance, created, **kwargs):\n       if created:\n           some_id = getattr(instance, 'some', None)\n           other_id = getattr(instance, 'other', None)\n           # Do something with some_id and other_id\n   ```\n\n3. **Ensure Attributes are Temporary:**\n\n   Note that these attributes are not saved to the database and exist only in memory for the lifecycle of the instance. They should be used for temporary data that doesn't need to be persisted.\n\nThis method allows you to effectively pass custom data from your `save()` method to your `post_save` signal handler without altering Django's signal mechanism."
    }
]