[
    {
        "role": "user",
        "content": "In CUDA runtime, there is a convenience function `cudaGetErrorString(cudaError_t error)` that translates an error enum into a readable string. This function is used in the `CUDA_SAFE_CALL(someCudaFunction())` macro that many people use for CUDA error handling. I am now learning cuBLAS and I'd like to create a similar macro for error handling in cuBLAS. Is there an equivalent of `cudaGetErrorString()` in cuBLAS that I can use to make my macro's printouts useful? Or, has anyone who uses cuBLAS written a function like this?"
    },
    {
        "role": "assistant",
        "content": "In cuBLAS, error handling is slightly different from the CUDA runtime. While CUDA provides the `cudaGetErrorString()` function to convert error codes into human-readable strings, cuBLAS does not have a direct equivalent built into the library. However, you can create a utility function to handle this task.\n\nHere's a simple function that maps cuBLAS error codes to readable strings:\n\n```c\n#include <cublas_v2.h>\n\nconst char* cublasGetErrorString(cublasStatus_t error) {\n    switch (error) {\n        case CUBLAS_STATUS_SUCCESS:\n            return \"CUBLAS_STATUS_SUCCESS\";\n        case CUBLAS_STATUS_NOT_INITIALIZED:\n            return \"CUBLAS_STATUS_NOT_INITIALIZED\";\n        case CUBLAS_STATUS_ALLOC_FAILED:\n            return \"CUBLAS_STATUS_ALLOC_FAILED\";\n        case CUBLAS_STATUS_INVALID_VALUE:\n            return \"CUBLAS_STATUS_INVALID_VALUE\";\n        case CUBLAS_STATUS_ARCH_MISMATCH:\n            return \"CUBLAS_STATUS_ARCH_MISMATCH\";\n        case CUBLAS_STATUS_MAPPING_ERROR:\n            return \"CUBLAS_STATUS_MAPPING_ERROR\";\n        case CUBLAS_STATUS_EXECUTION_FAILED:\n            return \"CUBLAS_STATUS_EXECUTION_FAILED\";\n        case CUBLAS_STATUS_INTERNAL_ERROR:\n            return \"CUBLAS_STATUS_INTERNAL_ERROR\";\n        case CUBLAS_STATUS_NOT_SUPPORTED:\n            return \"CUBLAS_STATUS_NOT_SUPPORTED\";\n        case CUBLAS_STATUS_LICENSE_ERROR:\n            return \"CUBLAS_STATUS_LICENSE_ERROR\";\n        default:\n            return \"UNKNOWN CUBLAS ERROR\";\n    }\n}\n```\n\nUsing this function, you can create a macro similar to `CUDA_SAFE_CALL` for cuBLAS:\n\n```c\n#define CUBLAS_SAFE_CALL(err) do { \\\n    cublasStatus_t err_ = (err); \\\n    if (err_ != CUBLAS_STATUS_SUCCESS) { \\\n        fprintf(stderr, \"CUBLAS error: %s at %s:%d\\n\", cublasGetErrorString(err_), __FILE__, __LINE__); \\\n        exit(EXIT_FAILURE); \\\n    } \\\n} while(0)\n```\n\nYou can use `CUBLAS_SAFE_CALL` in your code to wrap around cuBLAS function calls:\n\n```c\ncublasStatus_t status;\nstatus = cublasCreate(&handle);\nCUBLAS_SAFE_CALL(status);\n\n// Your cuBLAS operations here\n\nstatus = cublasDestroy(handle);\nCUBLAS_SAFE_CALL(status);\n```\n\nThis approach will help you track down errors in your cuBLAS code by providing more readable output."
    }
]