[
    {
        "role": "user",
        "content": "How can I distribute a Cython extension module along with C source and shared libraries? I'm trying to expose some functions from a large C++ shared library (libbig.so) to Python via Cython using a small C++ file (small.cpp) that provides a thin wrapper around the functionality. I've been able to build and run this extension module on my own computer but I'm having difficulty determining the best practices for distributing it, especially in terms of its dependencies. The Cython documentation suggests including the generated .cpp files as well as the .pyx files, but it doesn't give explicit instructions on how to handle each situation or how to distribute the shared libraries on which the Cython module depends."
    },
    {
        "role": "assistant",
        "content": "Distributing a Cython extension module, especially one that depends on external shared libraries like `libbig.so`, requires careful consideration of both the build process and the packaging strategy. Here's a step-by-step guide to help you manage this:\n\n### 1. Organize Your Project Structure\n\nOrganize your project directory to separate source files, compiled files, and distribution files. A typical structure might look like:\n\n```\nyour_project/\n\u2502\n\u251c\u2500\u2500 your_extension/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 your_module.pyx\n\u2502   \u251c\u2500\u2500 small.cpp\n\u2502   \u251c\u2500\u2500 your_module.cpp  # Generated by Cython\n\u2502   \u2514\u2500\u2500 include/\n\u2502       \u2514\u2500\u2500 some_header.h\n\u2502\n\u251c\u2500\u2500 lib/\n\u2502   \u2514\u2500\u2500 libbig.so\n\u2502\n\u251c\u2500\u2500 setup.py\n\u2514\u2500\u2500 README.md\n```\n\n### 2. Write the Setup Script\n\nCreate a `setup.py` file to build your Cython extension. Use `setuptools` and `Cython.Build` to compile the `.pyx` files and link against the necessary shared libraries.\n\n```python\nfrom setuptools import setup, Extension\nfrom Cython.Build import cythonize\nimport os\n\n# Determine library paths\nlibbig_path = os.path.join(\"lib\", \"libbig.so\")\n\nextensions = [\n    Extension(\n        \"your_module\",\n        sources=[\"your_extension/your_module.pyx\", \"your_extension/small.cpp\"],\n        include_dirs=[\"your_extension/include\"],\n        library_dirs=[\"lib\"],\n        libraries=[\"big\"],  # If necessary, specify libraries to link against\n        extra_objects=[libbig_path],  # Include the path to the shared library\n        language=\"c++\",  # Specify C++ as the language\n    ),\n]\n\nsetup(\n    name=\"your_project\",\n    version=\"0.1\",\n    ext_modules=cythonize(extensions),\n    packages=[\"your_extension\"],\n)\n```\n\n### 3. Generate C++ Code with Cython\n\nRun the following command to generate the C++ code from the Cython .pyx file:\n\n```sh\ncythonize -i your_extension/your_module.pyx\n```\n\nThis generates the `your_module.cpp` file.\n\n### 4. Include Shared Libraries\n\nWhen distributing your package, ensure that the necessary shared libraries (`libbig.so`) are included in the package. You can use `package_data` in `setup.py` to include these files or specify them in a `MANIFEST.in` file.\n\n**MANIFEST.in**\n\n```\ninclude lib/libbig.so\n```\n\n### 5. Build and Distribute Your Package\n\nUse `setuptools` to build and distribute your package. Create source and binary distributions using:\n\n```sh\npython setup.py sdist bdist_wheel\n```\n\n### 6. Handle Dependencies\n\nConsider platform-specific dependencies. If `libbig.so` is platform-specific, you might need to provide platform-specific wheels or instructions for users to install the necessary dependencies on their system.\n\n### 7. Distribute via PyPI or Other Channels\n\nYou can upload your package to PyPI using `twine`:\n\n```sh\ntwine upload dist/*\n```\n\n### 8. Documentation\n\nEnsure that your documentation provides clear instructions on how to install and set up any external dependencies that your Cython module requires. This might include installing system packages or setting environment variables.\n\nBy following these steps, you should be able to distribute your Cython extension module along with its dependencies, making it easier for users to install and use your package on their own systems."
    }
]