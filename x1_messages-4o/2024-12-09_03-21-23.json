[
    {
        "role": "user",
        "content": "How can I check if a Python module exists and can be imported? I am using the debug toolbar with Django and want to add it to my project if two conditions are met: if 'settings.DEBUG' is set to 'True' and if the module itself exists. I found a solution that uses a try/except block to import the 'debug_toolbar' module, but since the import happens elsewhere in Django, I need if/else logic to check if the module exists so I can check it in the settings.py file. Is there a way to do this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can check if a Python module exists and can be imported by using a try/except block to handle the ImportError exception. Since you want to include this logic in your `settings.py` file for a Django project, you can encapsulate this logic into a function and use it to conditionally add the module to your `INSTALLED_APPS` when `DEBUG` is `True`. Here's an example of how you can achieve this:\n\n```python\n# settings.py\n\nimport os\n\n# Function to check if a module can be imported\ndef is_module_available(module_name):\n    try:\n        __import__(module_name)\n        return True\n    except ImportError:\n        return False\n\n# Your existing settings\nDEBUG = True  # or os.getenv('DJANGO_DEBUG', 'False') == 'True'\n\n# Conditionally adding 'debug_toolbar' to INSTALLED_APPS\nif DEBUG and is_module_available('debug_toolbar'):\n    INSTALLED_APPS = [\n        # Your other apps\n        'debug_toolbar',\n    ]\n\n    MIDDLEWARE = [\n        # Your other middleware\n        'debug_toolbar.middleware.DebugToolbarMiddleware',\n    ]\n\n    INTERNAL_IPS = [\n        # Add your internal IPs here\n        '127.0.0.1',\n    ]\n\n    # Any additional configuration specific to debug_toolbar\n```\n\nIn this setup:\n\n- We define a function `is_module_available` that attempts to import a module and returns `True` if successful or `False` if an `ImportError` is raised.\n- We check if `DEBUG` is `True` and if the `debug_toolbar` module is available.\n- If both conditions are met, we add `'debug_toolbar'` to the `INSTALLED_APPS` list and configure any additional settings required for `debug_toolbar`.\n\nThis approach ensures that you only attempt to use the `debug_toolbar` when both conditions are satisfied, preventing any errors related to missing modules during deployment or in production environments."
    }
]