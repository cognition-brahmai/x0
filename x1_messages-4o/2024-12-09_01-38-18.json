[
    {
        "role": "user",
        "content": "How can I plot a confusion matrix in sklearn for multiple labelled data? I have labels that look like this:\n\n```\nlabel1: 1, 0, 0, 0\nlabel2: 0, 1, 0, 0\nlabel3: 0, 0, 1, 0\nlabel4: 0, 0, 0, 1\n```\nI have been able to classify the data successfully using the following code:\n\n```python\nfor i in range(4):\n    y_train= y[:,i]\n    print('Train subject %d, class %s' % (subject, cols[i]))\n    lr.fit(X_train[::sample,:],y_train[::sample])\n    pred[:,i] = lr.predict_proba(X_test)[:,1]\n```\nHowever, I'm having trouble plotting the confusion matrix. I tried following code to print the confusion matrix, but it always returns a 2x2 matrix:\n\n```python\nprediction = lr.predict(X_train)\nprint(confusion_matrix(y_train, prediction))\n```"
    },
    {
        "role": "assistant",
        "content": "To plot a confusion matrix for multi-label data using `sklearn`, you'll need to ensure that you're handling the multi-label nature correctly. A confusion matrix for multi-label classification typically involves considering each label independently since each instance can belong to multiple classes simultaneously.\n\nHere's a step-by-step guide on how to plot a confusion matrix for each label in your multi-label classification:\n\n1. **Ensure each label is handled independently**: For multi-label data, you should compute a separate confusion matrix for each label.\n\n2. **Modify your prediction step**: Make predictions for each label and compute confusion matrices separately.\n\n3. **Plot confusion matrices**: Use `matplotlib` to visualize each confusion matrix.\n\nHere's how you can modify your code:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom sklearn.linear_model import LogisticRegression\nfrom sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay\n\n# Assume lr is already defined as a LogisticRegression instance\nsample = 1  # Adjust this as needed\npred = np.zeros(y.shape)  # Assuming y is the true label matrix\ncols = ['label1', 'label2', 'label3', 'label4']  # Update with your actual labels\n\n# Fit and predict for each class independently\nfor i in range(4):\n    y_train = y[:, i]\n    print('Train subject %d, class %s' % (subject, cols[i]))\n    lr.fit(X_train[::sample, :], y_train[::sample])\n    pred[:, i] = lr.predict(X_test)\n\n    # Compute confusion matrix for the current label\n    cm = confusion_matrix(y_test[:, i], pred[:, i])  # Assuming y_test is your test set labels\n\n    # Plot confusion matrix\n    disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=[0, 1])\n    disp.plot()\n    plt.title(f'Confusion Matrix for {cols[i]}')\n    plt.show()\n```\n\n### Key Points:\n- **Separate Predictions**: Make sure predictions are made individually for each label.\n- **Individual Confusion Matrices**: Compute and plot the confusion matrix for each label separately.\n- **Visualization**: Use `ConfusionMatrixDisplay` from `sklearn` for an easy and clear visualization.\n\nThis method will generate separate confusion matrices for each label, helping you analyze the performance of your multi-label classifier on a per-label basis."
    }
]