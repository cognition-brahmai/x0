[
    {
        "role": "user",
        "content": "Is there an easy method to determine the type of an object in Python? Specifically, I want to be able to identify if a given variable is a list, a dictionary, or another type of object."
    },
    {
        "role": "assistant",
        "content": "Yes, in Python, you can easily determine the type of an object using the built-in `type()` function. This function returns the type of the object passed to it. Here's how you can use it to check if a variable is a list, a dictionary, or another type:\n\n```python\n# Sample variables\na_list = [1, 2, 3]\na_dict = {'key': 'value'}\na_string = \"Hello, World!\"\n\n# Checking the type\nprint(type(a_list))   # Output: <class 'list'>\nprint(type(a_dict))   # Output: <class 'dict'>\nprint(type(a_string)) # Output: <class 'str'>\n```\n\nAlternatively, you can use `isinstance()` to check if an object is an instance of a particular class or data type. This is often preferred because it also works with subclasses:\n\n```python\n# Using isinstance to check types\nprint(isinstance(a_list, list))    # Output: True\nprint(isinstance(a_dict, dict))    # Output: True\nprint(isinstance(a_string, str))   # Output: True\n\n# Checking for multiple types\nprint(isinstance(a_list, (list, dict, str))) # Output: True\n```\n\nUsing `isinstance()` is generally more versatile, especially when working with inheritance, because it will return `True` for instances of subclasses as well."
    }
]