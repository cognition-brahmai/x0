[
    {
        "role": "user",
        "content": "How can I execute multi-line statements in a single-line command-line in Python? I'm using Python with the -c option to execute a one-liner loop. This works perfectly fine:\n\n```\npython -c \"for r in range(10): print 'rob'\"\n```\n\nHowever, when I try to import a module before the for loop, I encounter a syntax error:\n\n```\npython -c \"import sys; for r in range(10): print 'rob'\"\n\n  File \"<string>\", line 1\n    import sys; for r in range(10): print 'rob'\n              ^\nSyntaxError: invalid syntax\n```\n\nI would like to keep this as a one-liner, as I need to include it in a Makefile. How can I resolve this issue?"
    },
    {
        "role": "assistant",
        "content": "When using the `-c` option in Python to execute a one-liner, the issue you're encountering is due to the fact that the semicolon `;` cannot be used to separate control flow statements like `for` loops from other statements directly. However, you can work around this limitation by using a slight modification in your command.\n\nHere are a couple of ways to achieve this:\n\n1. **Using a function to encapsulate the logic**:\n   You can define a function within the `-c` command to encapsulate your loop and imports, which allows you to execute them in a single line.\n\n   ```bash\n   python -c \"import sys; exec('def main():\\n for r in range(10):\\n  print(\\\"rob\\\")\\n\\nmain()')\"\n   ```\n\n2. **Using the `__import__` function**:\n   Another approach is to use the `__import__` function for importing modules, as this allows you to keep everything in a single line without using semicolons for control flow statements.\n\n   ```bash\n   python -c \"__import__('sys'); [print('rob') for r in range(10)]\"\n   ```\n\n3. **Using a lambda with `exec`**:\n   You can also use a lambda function and `exec` to execute the multi-line code in a single line.\n\n   ```bash\n   python -c \"exec('import sys\\nfor r in range(10): print(\\\"rob\\\")')\"\n   ```\n\nThese approaches allow you to execute multi-line statements within a single-line command while maintaining the constraints of the command-line execution context."
    }
]