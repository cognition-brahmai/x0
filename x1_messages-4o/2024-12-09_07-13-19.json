[
    {
        "role": "user",
        "content": "I am working on Django 1.5 with python 2.6 and have a model that automatically creates a user under certain conditions using the get_or_create function like this:\n\n```\nUser.objects.get_or_create(username=new_user_name, is_staff=True) \nu = User.objects.get(username=new_user_name)\nu.set_password('temporary')\n```\n\nIn addition to setting the username, password, and is_staff status, I would like to set the user's permissions, something similar to `u.user_permissions('Can view poll')` or `u.set_permissions('Can change poll')`. Is there a way to accomplish this?"
    },
    {
        "role": "assistant",
        "content": "In Django 1.5, you can assign permissions to a user by working with the `Permission` model and the `user_permissions` attribute of the `User` model. To set permissions for a user, you'll need to:\n\n1. Retrieve the permission object you want to assign.\n2. Add this permission to the user's `user_permissions`.\n\nHere's how you can do it:\n\n```python\nfrom django.contrib.auth.models import User, Permission\nfrom django.contrib.contenttypes.models import ContentType\nfrom myapp.models import Poll  # Assuming 'Poll' is the model you want to manage permissions for\n\n# Create or get the user\nuser, created = User.objects.get_or_create(username=new_user_name, is_staff=True)\nuser.set_password('temporary')\nuser.save()\n\n# Retrieve the content type for the Poll model\ncontent_type = ContentType.objects.get_for_model(Poll)\n\n# Retrieve the specific permissions you want to assign\npermission_view = Permission.objects.get(codename='view_poll', content_type=content_type)\npermission_change = Permission.objects.get(codename='change_poll', content_type=content_type)\n\n# Assign permissions to the user\nuser.user_permissions.add(permission_view, permission_change)\n\n# Save the user to apply the changes\nuser.save()\n```\n\nIn this example, replace `'view_poll'` and `'change_poll'` with the actual codename of the permissions you want to assign. The codenames typically follow the pattern of `'<action>_<modelname>'`, where `<action>` is like `add`, `change`, `delete`, `view`, etc., and `<modelname>` is the lowercase name of your model.\n\nMake sure that the permissions you want to add exist in your database. You can check this in the Django admin under the \"Permissions\" section or by querying the `Permission` model directly."
    }
]