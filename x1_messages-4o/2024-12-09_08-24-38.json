[
    {
        "role": "user",
        "content": "I'm currently working on a Python program that implements sockets. The goal of the program is to enable each client to send a PDF file to a server, with the server receiving each file and renaming it to \"file_(number).pdf\" (for example: file_1.pdf). The issue I'm encountering is that only one client can successfully send a file - when a second client attempts to send a file, the program crashes. I need the server to allow for multiple clients (up to 20) to connect and transfer files. What modifications do I need to make to my code to resolve this issue? Below is the code I have for the server and the client:\n\nServer code:\n\n```python\nimport socket\nimport sys\ns = socket.socket()\ns.bind((\"localhost\",9999))\ns.listen(10) # Accepts up to 10 incoming connections..\nsc, address = s.accept()\n\nprint address\ni=1\nf = open('file_'+ str(i)+\".pdf\",'wb') # Open in binary\ni=i+1\nwhile (True):\n\n    # We receive and write to the file.\n    l = sc.recv(1024)\n    while (l):\n        f.write(l)\n        l = sc.recv(1024)\nf.close()\n\nsc.close()\ns.close()\n```\n\nClient code:\n\n```python\nimport socket\nimport sys\n\ns = socket.socket()\ns.connect((\"localhost\",9999))\nf = open (\"libroR.pdf\", \"rb\")\nl = f.read(1024)\nwhile (l):\n    s.send(l)\n    l = f.read(1024)\ns.close()\n```\n\nFor simplicity, I'm always using a book with the filename \"libroR.pdf\", but in the full code, the file is selected via a GUI."
    },
    {
        "role": "assistant",
        "content": "To handle multiple clients simultaneously, you need to make your server code capable of managing multiple connections. This can be achieved by using threading to handle each client connection in a separate thread. Here\u2019s how you can modify your server code to handle up to 20 clients concurrently:\n\n### Modified Server Code:\n\n```python\nimport socket\nimport threading\n\ndef handle_client(client_socket, client_address, file_index_lock, index):\n    print(f\"Connection from {client_address} has been established!\")\n    with file_index_lock:\n        filename = f'file_{index[0]}.pdf'\n        index[0] += 1  # Increment the file index\n    with open(filename, 'wb') as f:\n        while True:\n            data = client_socket.recv(1024)\n            if not data:\n                break\n            f.write(data)\n    print(f\"File {filename} received from {client_address}\")\n    client_socket.close()\n\ndef main():\n    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server.bind((\"localhost\", 9999))\n    server.listen(20)  # Allows up to 20 concurrent connections\n    print(\"Server listening on port 9999\")\n\n    file_index = [1]  # Use a list to allow mutation\n    file_index_lock = threading.Lock()\n\n    while True:\n        client_socket, client_address = server.accept()\n        client_handler = threading.Thread(\n            target=handle_client,\n            args=(client_socket, client_address, file_index_lock, file_index)\n        )\n        client_handler.start()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Key Modifications:\n\n1. **Threading**: The server now uses threads to handle each client connection. This allows multiple clients to connect and transfer files simultaneously.\n\n2. **File Index Management**: A lock (`file_index_lock`) is used to ensure thread-safe access to the file index. This prevents race conditions where multiple threads might try to write to the same file name.\n\n3. **Loop to Continuously Accept Connections**: The server continuously accepts new connections and spawns a new thread for each client.\n\n### Client Code:\n\nThe client code remains the same, as it already handles a single connection appropriately. You can run multiple instances of the client code to test the server's ability to handle multiple files.\n\n### Important Considerations:\n\n- Make sure the server has a proper mechanism to handle exceptions and close connections properly.\n- In a production environment, consider implementing more robust error handling and logging.\n- If this server is exposed over a network, consider implementing security measures such as SSL/TLS for secure data transfer."
    }
]