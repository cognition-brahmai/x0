[
    {
        "role": "user",
        "content": "I am trying to add text at the bottom of an image using PIL in Python. The text is added successfully, but the issue is that if the text is longer than the image width, it gets cut off from both sides. I would like to modify my code so that if the text is longer than the image width, it will be displayed in multiple lines. Here is my current code:\n\n```python\nFOREGROUND = (255, 255, 255)\nWIDTH = 375\nHEIGHT = 50\nTEXT = 'Chyba najwy\u017cszy czas zada\u0107 to pytanie na \u015bniadanie \\n Chyba najwy\u017cszy czas zada\u0107 to pytanie na \u015bniadanie'\nfont_path = '/Library/Fonts/Arial.ttf'\nfont = ImageFont.truetype(font_path, 14, encoding='unic')\ntext = TEXT.decode('utf-8')\n(width, height) = font.getsize(text)\n\nx = Image.open('media/converty/image.png')\ny = ImageOps.expand(x,border=2,fill='white')\ny = ImageOps.expand(y,border=30,fill='black')\n\nw, h = y.size\nbg = Image.new('RGBA', (w, 1000), \"#000000\")\n\nW, H = bg.size\nxo, yo = (W-w)/2, (H-h)/2\nbg.paste(y, (xo, 0, xo+w, h))\ndraw = ImageDraw.Draw(bg)\ndraw.text(((w - width)/2, w), text, font=font, fill=FOREGROUND)\n\nbg.show()\nbg.save('media/converty/test.png')\n```"
    },
    {
        "role": "assistant",
        "content": "To ensure that your text wraps to fit within the image width, you can use the `textwrap` module to split the text into multiple lines that fit within the image's width. Then, draw each line individually. Here's how you can modify your code to achieve this:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont, ImageOps\nimport textwrap\n\nFOREGROUND = (255, 255, 255)\nWIDTH = 375\nHEIGHT = 50\nTEXT = 'Chyba najwy\u017cszy czas zada\u0107 to pytanie na \u015bniadanie \\n Chyba najwy\u017cszy czas zada\u0107 to pytanie na \u015bniadanie'\nfont_path = '/Library/Fonts/Arial.ttf'\nfont = ImageFont.truetype(font_path, 14, encoding='unic')\n\nx = Image.open('media/converty/image.png')\ny = ImageOps.expand(x, border=2, fill='white')\ny = ImageOps.expand(y, border=30, fill='black')\n\nw, h = y.size\nbg = Image.new('RGBA', (w, 1000), \"#000000\")\n\nW, H = bg.size\nxo, yo = (W - w) / 2, (H - h) / 2\nbg.paste(y, (int(xo), 0, int(xo + w), h))\ndraw = ImageDraw.Draw(bg)\n\n# Wrap text\nmargin = 10  # margin from left and right edge\nmax_width = w - 2 * margin\n\n# Split the text into multiple lines\nlines = textwrap.wrap(TEXT, width=max_width, break_long_words=False)\n\n# Calculate start y-position to center the text vertically in the image\nline_height = font.getsize('A')[1]\ntotal_text_height = line_height * len(lines)\ny_text = h + 10  # start drawing text below the image, plus some padding\n\nfor line in lines:\n    # Calculate width and position for each line\n    width, _ = draw.textsize(line, font=font)\n    x_text = (w - width) / 2  # center the text\n    draw.text((x_text, y_text), line, font=font, fill=FOREGROUND)\n    y_text += line_height\n\nbg.show()\nbg.save('media/converty/test.png')\n```\n\n### Key Changes:\n- **Text Wrapping:** Use the `textwrap.wrap` function to break the text into lines that fit within the specified `max_width`.\n- **Text Placement:** Iterate through each line and draw it on the image, adjusting the y-coordinate for each subsequent line.\n- **Line Height Calculation:** Use `font.getsize('A')[1]` to determine the line height.\n- **Text Positioning:** Start drawing the text just below the image with some padding.\n\nThese changes will ensure that your text is wrapped to fit within the image and displayed correctly without being cut off."
    }
]