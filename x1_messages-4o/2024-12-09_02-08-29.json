[
    {
        "role": "user",
        "content": "I am trying to extract common phrases from a corpus using the Phrases model in Gensim. I have implemented the following code:\n\n```python\nfrom gensim.models import Phrases\ndocuments = [\"the mayor of new york was there\", \"machine learning can be useful sometimes\"]\n\nsentence_stream = [doc.split(\" \") for doc in documents]\nbigram = Phrases(sentence_stream)\nsent = [u'the', u'mayor', u'of', u'new', u'york', u'was', u'there']\nprint(bigram[sent])\n```\n\nThis is giving me the output as: `[u'the', u'mayor', u'of', u'new', u'york', u'was', u'there']`.\n\nBut, I am expecting the output to be: `[u'the', u'mayor', u'of', u'new_york', u'was', u'there']`.\n\nWhen I print the vocabulary of the training data, I can see the bigram, but it's not working with the test data. Where am I going wrong?\n\n```python\nprint bigram.vocab\n\ndefaultdict(<type 'int'>, {'useful': 1, 'was_there': 1, 'learning_can': 1, 'learning': 1, 'of_new': 1, 'can_be': 1, 'mayor': 1, 'there': 1, 'machine': 1, 'new': 1, 'was': 1, 'useful_sometimes': 1, 'be': 1, 'mayor_of': 1, 'york_was': 1, 'york': 1, 'machine_learning': 1, 'the_mayor': 1, 'new_york': 1, 'of': 1, 'sometimes': 1, 'can': 1, 'be_useful': 1, 'the': 1})\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is likely due to the default `min_count` and `threshold` parameters in the `Phrases` model. These parameters control the sensitivity of detecting a bigram. The `min_count` parameter specifies the minimum number of occurrences a bigram must have to be considered, and the `threshold` parameter is used to control the tendency of forming bigrams; higher values result in fewer phrases.\n\nTo address the issue and ensure that \"new_york\" is treated as a bigram, you can adjust these parameters when you initialize the `Phrases` model. Here's how you can modify your code:\n\n```python\nfrom gensim.models import Phrases\nfrom gensim.models.phrases import Phraser\n\ndocuments = [\"the mayor of new york was there\", \"machine learning can be useful sometimes\"]\n\nsentence_stream = [doc.split(\" \") for doc in documents]\n\n# Adjust min_count and threshold\nbigram = Phrases(sentence_stream, min_count=1, threshold=1)\nbigram_phraser = Phraser(bigram)\n\nsent = ['the', 'mayor', 'of', 'new', 'york', 'was', 'there']\nprint(bigram_phraser[sent])\n```\n\nBy setting `min_count=1` and `threshold=1`, you make the model more sensitive to detecting bigrams, even if they appear only once. The `Phraser` is used to optimize the application of the `Phrases` model to new sentences, making it faster and more memory-efficient.\n\nTry this modification, and it should give you the desired output: `['the', 'mayor', 'of', 'new_york', 'was', 'there']`. Adjust the parameters further if needed based on the characteristics of your corpus and the frequency of the phrases you're interested in."
    }
]