[
    {
        "role": "user",
        "content": "How can I reorder the columns of a multi-indexed DataFrame in Python, such that they match a user-specified order? I have a DataFrame that looks like:\n\n```\nExperiment           BASE           IWWGCW         IWWGDW\nLead Time                24     48      24     48      24     48\n2010-11-27 12:00:00   0.997  0.991   0.998  0.990   0.998  0.990\n2010-11-28 12:00:00   0.998  0.987   0.997  0.990   0.997  0.990\n2010-11-29 12:00:00   0.997  0.992   0.997  0.992   0.997  0.992\n2010-11-30 12:00:00   0.997  0.987   0.997  0.987   0.997  0.987\n2010-12-01 12:00:00   0.996  0.986   0.996  0.986   0.996  0.986\n```\n\nI want to reorder this DataFrame based on a list like `['IWWGCW', 'IWWGDW', 'BASE']`. However, the level 'Experiment' could be at any level and I don't always know where it would be. I attempted to use `df.reindex_axis(['IWWGCW', 'IWWGDW', 'BASE'], axis=1, level='Experiment')` but it didn't seem to work. The DataFrame that was returned had its column order unchanged. I am currently using a workaround function, but is there a more efficient way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To reorder the columns of a multi-indexed DataFrame based on a user-specified order, you can use the `pandas.DataFrame.reindex` method along with `pandas.MultiIndex` to align the columns as desired. Since `reindex_axis` is deprecated, you should use `reindex`. Here's how you can achieve this:\n\n```python\nimport pandas as pd\n\n# Sample DataFrame\ndata = {\n    ('BASE', 24): [0.997, 0.998, 0.997, 0.997, 0.996],\n    ('BASE', 48): [0.991, 0.987, 0.992, 0.987, 0.986],\n    ('IWWGCW', 24): [0.998, 0.997, 0.997, 0.997, 0.996],\n    ('IWWGCW', 48): [0.990, 0.990, 0.992, 0.987, 0.986],\n    ('IWWGDW', 24): [0.998, 0.997, 0.997, 0.997, 0.996],\n    ('IWWGDW', 48): [0.990, 0.990, 0.992, 0.987, 0.986],\n}\n\nindex = pd.date_range('2010-11-27', periods=5, freq='D')\ndf = pd.DataFrame(data, index=index)\n\n# Specify the desired order for the 'Experiment' level\ndesired_order = ['IWWGCW', 'IWWGDW', 'BASE']\n\n# Reorder the columns according to the desired order\ndef reorder_columns(df, desired_order, level_name='Experiment'):\n    # Get the current MultiIndex\n    current_index = df.columns\n    # Determine the level number for the given level name\n    level_num = current_index.names.index(level_name)\n    # Create a new MultiIndex with the desired order\n    new_index = pd.MultiIndex.from_tuples(\n        sorted(current_index, key=lambda x: desired_order.index(x[level_num])),\n        names=current_index.names\n    )\n    # Reindex the DataFrame with the new MultiIndex\n    return df.reindex(columns=new_index)\n\n# Reorder the DataFrame\nreordered_df = reorder_columns(df, desired_order)\n\nprint(reordered_df)\n```\n\n**Explanation:**\n1. **Determine Level:** Identify the level at which 'Experiment' resides using `current_index.names.index(level_name)`.\n2. **Sorting:** Use the `sorted` function with a custom `key` to sort the tuples of the current MultiIndex based on the desired order for the specified level.\n3. **Reindexing:** Use `reindex` with the newly created MultiIndex to reorder the columns.\n\nThis method is flexible and should work irrespective of where the 'Experiment' level is in the MultiIndex structure."
    }
]