[
    {
        "role": "user",
        "content": "How can I write a C# code to count the number of occurrences of a specific word in a string? For example, if I have the string \"The blue sky is beautiful and full of dreams\", how can I count the number of times the word \"blue\" appears in the string?\nHere's the initial code I have:\nstring inputString = \"The blue sky is beautiful and full of dreams\";\nstring searchWord = \"blue\";\n//TODO: Count the number of occurrences of \"blue\" in inputString\nHow can I modify this code to achieve my objective?"
    },
    {
        "role": "assistant",
        "content": "To count the number of occurrences of a specific word in a string in C#, you can use the `Split` method to break the string into an array of words and then use the `Count` method to find how many times the word appears in that array. Here's a modified version of your code to achieve this:\n\n```csharp\nusing System;\nusing System.Linq;\n\nclass Program\n{\n    static void Main()\n    {\n        string inputString = \"The blue sky is beautiful and full of dreams\";\n        string searchWord = \"blue\";\n\n        // Split the input string into words\n        string[] words = inputString.Split(new char[] { ' ', '.', ',', ';', '!', '?' }, StringSplitOptions.RemoveEmptyEntries);\n\n        // Count the occurrences of the search word\n        int count = words.Count(word => word.Equals(searchWord, StringComparison.OrdinalIgnoreCase));\n\n        // Output the result\n        Console.WriteLine($\"The word '{searchWord}' appears {count} times in the string.\");\n    }\n}\n```\n\n### Explanation:\n\n1. **Splitting the String**: The `Split` method is used to break the input string into an array of words. The method takes an array of delimiters, which in this case includes common punctuation marks and space. This ensures that words are correctly identified even if they are followed by punctuation.\n\n2. **Counting the Occurrences**: The `Count` method, along with a lambda expression, is used to count how many times `searchWord` appears in the `words` array. The `StringComparison.OrdinalIgnoreCase` argument ensures the comparison is case-insensitive.\n\n3. **Output**: Finally, the result is printed to the console.\n\nThis code will correctly count the occurrences of \"blue\" in the provided string, regardless of case (e.g., \"Blue\", \"BLUE\" will also be counted)."
    }
]