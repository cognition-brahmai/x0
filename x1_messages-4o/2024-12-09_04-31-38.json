[
    {
        "role": "user",
        "content": "How can I import CSV data into Django models? I have CSV data in the following format:\n\n1;\"02-01-101101\";\"Worm Gear HRF 50\";\"Ratio 1 : 10\";\"input shaft, output shaft, direction A, color dark green\";\n2;\"02-01-101102\";\"Worm Gear HRF 50\";\"Ratio 1 : 20\";\"input shaft, output shaft, direction A, color dark green\";\n3;\"02-01-101103\";\"Worm Gear HRF 50\";\"Ratio 1 : 30\";\"input shaft, output shaft, direction A, color dark green\";\n4;\"02-01-101104\";\"Worm Gear HRF 50\";\"Ratio 1 : 40\";\"input shaft, output shaft, direction A, color dark green\";\n5;\"02-01-101105\";\"Worm Gear HRF 50\";\"Ratio 1 : 50\";\"input shaft, output shaft, direction A, color dark green\";\n\nI want to import this data into my Django model named 'Product' which has fields such as 'name', 'description' and 'price'. The desired format for the data import is as follows:\n\nproduct=Product()\nproduct.name = \"Worm Gear HRF 70(02-01-101116)\"\nproduct.description = \"input shaft, output shaft, direction A, color dark green\"\nproduct.price = 100\n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To import CSV data into Django models, you'll need to parse the CSV file and create instances of your `Product` model. Here\u2019s a step-by-step guide to achieving this:\n\n1. **Prepare Your Django Model**: Ensure your `Product` model is correctly defined in your `models.py` file. Since you're dealing with fields `name`, `description`, and `price`, your model should look something like this:\n\n    ```python\n    from django.db import models\n\n    class Product(models.Model):\n        name = models.CharField(max_length=255)\n        description = models.TextField()\n        price = models.DecimalField(max_digits=10, decimal_places=2)\n    ```\n\n2. **Write a Script to Import CSV Data**: You can create a custom management command or a standalone script to import the data. Here\u2019s an example of how you might write a script to achieve this:\n\n    ```python\n    import csv\n    from django.core.management.base import BaseCommand\n    from your_app.models import Product\n\n    class Command(BaseCommand):\n        help = 'Import products from CSV file'\n\n        def handle(self, *args, **kwargs):\n            with open('path/to/your/file.csv', newline='') as csvfile:\n                reader = csv.reader(csvfile, delimiter=';', quotechar='\"')\n                for row in reader:\n                    product_id, code, name, ratio, description = row\n                    product_name = f\"{name.strip()}({code.strip()})\"\n                    product_description = description.strip()\n                    product_price = self.calculate_price(ratio.strip())\n\n                    product = Product(\n                        name=product_name,\n                        description=product_description,\n                        price=product_price\n                    )\n                    product.save()\n                    self.stdout.write(self.style.SUCCESS(f'Product \"{product_name}\" imported successfully'))\n\n        def calculate_price(self, ratio):\n            # Dummy price calculation based on ratio, customize as needed\n            ratio_value = int(ratio.split(':')[1].strip())\n            return 100 + (ratio_value * 10)  # Example calculation\n    ```\n\n    Replace `'path/to/your/file.csv'` with the path to your CSV file, and `your_app` with the name of your Django app.\n\n3. **Run the Script**: If you're using a custom management command, you can run it using:\n\n    ```bash\n    python manage.py import_products\n    ```\n\n    Make sure your Django environment is properly set up before running this command (e.g., activating your virtual environment and setting the `DJANGO_SETTINGS_MODULE`).\n\n4. **Adjust the Price Calculation**: The script uses a placeholder function `calculate_price()` to determine the price based on the \"Ratio\" field. You'll need to adjust this function to suit your actual pricing logic.\n\nThis script reads the CSV file, processes each row, creates a `Product` instance with the appropriate data, and saves it to the database. Ensure that your CSV file is correctly formatted and accessible from the script's location."
    }
]