[
    {
        "role": "user",
        "content": "Is there a Python library that can facilitate interactive graph visualization similar to d3.js? Ideally, I would prefer if the library also supports 3D visualization. I have explored NetworkX, but it only seems to support Matplotlib plots which are 2D and lack the interactive capabilities like node manipulation that d3.js offers. I have also tried graph-tool, but it only supports 2D plots and its interactive graphs are quite slow."
    },
    {
        "role": "assistant",
        "content": "Yes, there are several Python libraries that offer interactive graph visualization, with some even supporting 3D visualization. Here are a few options you might consider:\n\n1. **Plotly**: Plotly is a popular library for creating interactive plots and charts, including 3D visualizations. It provides support for network graphs and offers interactivity out-of-the-box. You can use Plotly with libraries like NetworkX to create interactive network visualizations.\n\n   Example:\n   ```python\n   import plotly.graph_objs as go\n   import networkx as nx\n   \n   G = nx.random_geometric_graph(200, 0.125)\n   edge_x = []\n   edge_y = []\n\n   for edge in G.edges():\n       x0, y0 = G.nodes[edge[0]]['pos']\n       x1, y1 = G.nodes[edge[1]]['pos']\n       edge_x.append(x0)\n       edge_x.append(x1)\n       edge_x.append(None)\n       edge_y.append(y0)\n       edge_y.append(y1)\n       edge_y.append(None)\n\n   edge_trace = go.Scatter(x=edge_x, y=edge_y, line=dict(width=0.5, color='#888'), hoverinfo='none', mode='lines')\n\n   node_x = []\n   node_y = []\n   for node in G.nodes():\n       x, y = G.nodes[node]['pos']\n       node_x.append(x)\n       node_y.append(y)\n\n   node_trace = go.Scatter(x=node_x, y=node_y, mode='markers', hoverinfo='text', marker=dict(showscale=True))\n\n   fig = go.Figure(data=[edge_trace, node_trace], layout=go.Layout(showlegend=False))\n   fig.show()\n   ```\n\n2. **Pyvis**: Pyvis is a Python library that provides a simple interface for creating interactive network visualizations. It is built on top of the vis.js library, which is similar to d3.js, allowing for interactive graph exploration.\n\n   Example:\n   ```python\n   from pyvis.network import Network\n   import networkx as nx\n\n   G = nx.random_geometric_graph(200, 0.125)\n   net = Network(notebook=True)\n   net.from_nx(G)\n   net.show(\"graph.html\")\n   ```\n\n3. **Bokeh**: Bokeh is another library that can create interactive plots and dashboards. While it primarily focuses on 2D visualizations, it offers a high level of interactivity and can be extended to work with network graphs.\n\n4. **Dash Cytoscape**: Dash Cytoscape is a component library built on top of Plotly Dash that provides a high-level interface for Cytoscape.js, a graph theory library for visualization and analysis. Dash Cytoscape can handle large, interactive graphs.\n\n   Example:\n   ```python\n   import dash\n   import dash_cytoscape as cyto\n\n   app = dash.Dash(__name__)\n\n   elements = [\n       {'data': {'id': 'one', 'label': 'Node 1'}, 'position': {'x': 50, 'y': 50}},\n       {'data': {'id': 'two', 'label': 'Node 2'}, 'position': {'x': 200, 'y': 200}},\n       {'data': {'source': 'one', 'target': 'two'}}\n   ]\n\n   app.layout = cyto.Cytoscape(\n       id='cytoscape',\n       elements=elements,\n       layout={'name': 'preset'},\n       style={'width': '100%', 'height': '400px'}\n   )\n\n   if __name__ == '__main__':\n       app.run_server(debug=True)\n   ```\n\nThese libraries should provide you with the interactivity and 3D capabilities you're looking for. You can choose one based on your specific needs and preferences."
    }
]