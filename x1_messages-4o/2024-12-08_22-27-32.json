[
    {
        "role": "user",
        "content": "How can I use Swift to fetch data from a JSON API using URLSession and display it in a UITableView? Please provide sample code."
    },
    {
        "role": "assistant",
        "content": "To fetch data from a JSON API using `URLSession` and display it in a `UITableView`, you need to follow these steps:\n\n1. **Create a Data Model**: Define a data model that matches the structure of the JSON response.\n2. **Fetch Data**: Use `URLSession` to perform a network request and fetch the JSON data.\n3. **Parse JSON**: Decode the JSON data into your data model.\n4. **Update UI**: Use the data to update your `UITableView`.\n\nHere's a step-by-step guide with sample code:\n\n### Step 1: Create a Data Model\n\nAssume you are fetching a list of items, each with an `id` and `name`.\n\n```swift\nimport Foundation\n\nstruct Item: Codable {\n    let id: Int\n    let name: String\n}\n```\n\n### Step 2: Fetch Data\n\nUse `URLSession` to fetch data from the API.\n\n```swift\nimport Foundation\n\nfunc fetchData(completion: @escaping ([Item]?) -> Void) {\n    guard let url = URL(string: \"https://example.com/api/items\") else {\n        completion(nil)\n        return\n    }\n    \n    let task = URLSession.shared.dataTask(with: url) { data, response, error in\n        guard let data = data, error == nil else {\n            print(\"Error fetching data: \\(error?.localizedDescription ?? \"Unknown error\")\")\n            completion(nil)\n            return\n        }\n        \n        do {\n            let items = try JSONDecoder().decode([Item].self, from: data)\n            completion(items)\n        } catch {\n            print(\"Error decoding JSON: \\(error.localizedDescription)\")\n            completion(nil)\n        }\n    }\n    \n    task.resume()\n}\n```\n\n### Step 3: Display Data in a UITableView\n\nCreate a `UITableViewController` to display the list of items.\n\n```swift\nimport UIKit\n\nclass ItemsTableViewController: UITableViewController {\n    \n    var items: [Item] = []\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        // Fetch data\n        fetchData { [weak self] fetchedItems in\n            DispatchQueue.main.async {\n                if let fetchedItems = fetchedItems {\n                    self?.items = fetchedItems\n                    self?.tableView.reloadData()\n                }\n            }\n        }\n    }\n    \n    // MARK: - Table view data source\n\n    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return items.count\n    }\n\n    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell = tableView.dequeueReusableCell(withIdentifier: \"ItemCell\", for: indexPath)\n        let item = items[indexPath.row]\n        cell.textLabel?.text = item.name\n        return cell\n    }\n}\n```\n\n### Step 4: Setup the Table View\n\nEnsure that your storyboard or XIB file is set up with a `UITableViewController` and a prototype cell with the identifier \"ItemCell\". Connect the `UITableViewController` to the `ItemsTableViewController` class.\n\nThis basic setup will help you fetch data from a JSON API and display it in a `UITableView`. You can further enhance this by adding error handling, loading indicators, and more advanced UI updates as needed."
    }
]