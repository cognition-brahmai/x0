[
    {
        "role": "user",
        "content": "How can I use Python to monitor my Gmail inbox, check every incoming email, and trigger a certain action when an email from a specific address with a specific subject is received?"
    },
    {
        "role": "assistant",
        "content": "To monitor your Gmail inbox and trigger an action based on specific email criteria using Python, you can use the Gmail API. Here\u2019s a step-by-step guide to achieve this:\n\n### Step 1: Set Up Google Cloud Project and Enable Gmail API\n\n1. **Create a Google Cloud Project:**\n   - Go to the [Google Cloud Console](https://console.cloud.google.com/).\n   - Create a new project.\n\n2. **Enable Gmail API:**\n   - Navigate to the \"Library\" in the Cloud Console.\n   - Search for \"Gmail API\" and enable it for your project.\n\n3. **Set Up OAuth 2.0 Credentials:**\n   - Go to \"APIs & Services\" > \"Credentials.\"\n   - Click \"Create credentials\" and select \"OAuth client ID.\"\n   - Configure the consent screen if prompted.\n   - Choose \"Desktop app\" as the application type (for local development).\n   - Download the JSON file containing your credentials.\n\n### Step 2: Install Required Libraries\n\nMake sure you have the `google-auth`, `google-auth-oauthlib`, `google-auth-httplib2`, and `google-api-python-client` libraries installed. You can install them using pip:\n\n```bash\npip install google-auth google-auth-oauthlib google-auth-httplib2 google-api-python-client\n```\n\n### Step 3: Write the Python Script\n\nBelow is a sample script to monitor your Gmail inbox:\n\n```python\nimport os.path\nimport base64\nfrom google.auth.transport.requests import Request\nfrom google.oauth2.credentials import Credentials\nfrom google_auth_oauthlib.flow import InstalledAppFlow\nfrom googleapiclient.discovery import build\nfrom googleapiclient.errors import HttpError\n\n# If modifying these SCOPES, delete the file token.json.\nSCOPES = ['https://www.googleapis.com/auth/gmail.readonly']\n\ndef main():\n    \"\"\"Shows basic usage of the Gmail API.\n    Lists the user's Gmail labels.\n    \"\"\"\n    creds = None\n    # The file token.json stores the user's access and refresh tokens, and is\n    # created automatically when the authorization flow completes for the first\n    # time.\n    if os.path.exists('token.json'):\n        creds = Credentials.from_authorized_user_file('token.json', SCOPES)\n    # If there are no (valid) credentials available, let the user log in.\n    if not creds or not creds.valid:\n        if creds and creds.expired and creds.refresh_token:\n            creds.refresh(Request())\n        else:\n            flow = InstalledAppFlow.from_client_secrets_file(\n                'credentials.json', SCOPES)\n            creds = flow.run_local_server(port=0)\n        # Save the credentials for the next run\n        with open('token.json', 'w') as token:\n            token.write(creds.to_json())\n\n    try:\n        # Call the Gmail API\n        service = build('gmail', 'v1', credentials=creds)\n        \n        # Monitoring the inbox\n        results = service.users().messages().list(userId='me', labelIds=['INBOX'], q='from:specific_email@example.com subject:\"Specific Subject\"').execute()\n        messages = results.get('messages', [])\n\n        if not messages:\n            print('No messages found.')\n        else:\n            print('Messages:')\n            for message in messages:\n                msg = service.users().messages().get(userId='me', id=message['id']).execute()\n                msg_snippet = base64.urlsafe_b64decode(msg['snippet'].encode('ASCII')).decode('utf-8')\n                print(f\"Message snippet: {msg_snippet}\")\n\n                # Here, you can add your action to trigger\n                trigger_action(msg)\n\n    except HttpError as error:\n        print(f'An error occurred: {error}')\n\ndef trigger_action(message):\n    # Define your action to be triggered here\n    print(\"Triggering action for message:\", message['id'])\n\nif __name__ == '__main__':\n    main()\n```\n\n### Step 4: Customize the Script\n\n- Replace `'from:specific_email@example.com subject:\"Specific Subject\"'` with your criteria to filter emails.\n- Implement the `trigger_action` function to define what action you want to take when an email matches your criteria.\n\n### Step 5: Run the Script\n\nExecute the script in your Python environment. The first time you run it, it will open a browser window to authorize access to your Gmail account. Once authorized, the script will monitor your inbox for emails that match the specified criteria and trigger the defined action.\n\nMake sure to keep your credentials secure and follow best practices when handling OAuth tokens and personal data."
    }
]