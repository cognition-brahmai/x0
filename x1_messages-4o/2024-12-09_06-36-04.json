[
    {
        "role": "user",
        "content": "I have two Pandas DataFrames stored in a list in Python. When I try to print both data frames while iterating over the list using a for loop, the output is not formatted in a visually pleasing tabular manner. However, when I directly print one dataframe from the list using its index, it prints in a well-structured tabular format. How can I achieve the same tabular print format when I loop through the list and print each DataFrame? Here is my current code and its output:\n\n```python\nsm = pd.DataFrame([[\"Forever\", 'BenHarper'],[\"Steel My Kisses\", 'Kack Johnson'],\\\n                  [\"Diamond On the Inside\",'Xavier Rudd'],[ \"Count On Me\", \"Bruno Mars\"]],\\\n                   columns=[\"Song\", \"Artist\"])\n\npm = pd.DataFrame([[\"I am yours\", 'Jack Johnson'],[\"Chasing Cars\", 'Snow Patrol'],\\\n                  [\"Kingdom Comes\",'Cold Play'],[ \"Time of your life\", \"GreenDay\"]],\\\n                   columns=[\"Song\", \"Artist\"])\n\ndf_list = [sm,pm]\n\nfor i in df_list:\n    print(i)\n```\n\nOutput:\n\n```python\n                  Song        Artist\n0                Forever     BenHarper\n1        Steel My Kisses  Kack Johnson\n2  Diamond On the Inside   Xavier Rudd\n3            Count On Me    Bruno Mars\n                Song        Artist\n0         I am yours  Jack Johnson\n1       Chasing Cars   Snow Patrol\n2      Kingdom Comes     Cold Play\n3  Time of your life      GreenDay\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're experiencing is because when you print a DataFrame directly while iterating over a list, the default `print` function doesn't add any additional formatting or separation between the outputs of consecutive DataFrames. To achieve a more visually appealing tabular format, you can add some spacing or separators between the printed DataFrames. You can also use the `display` function from the IPython library if you're working in a Jupyter notebook environment, which provides better formatting.\n\nHere's how you can improve the output:\n\n1. **Add separators between DataFrames:**\n\n```python\nimport pandas as pd\n\nsm = pd.DataFrame([[\"Forever\", 'BenHarper'],[\"Steel My Kisses\", 'Kack Johnson'],\n                  [\"Diamond On the Inside\",'Xavier Rudd'],[ \"Count On Me\", \"Bruno Mars\"]],\n                   columns=[\"Song\", \"Artist\"])\n\npm = pd.DataFrame([[\"I am yours\", 'Jack Johnson'],[\"Chasing Cars\", 'Snow Patrol'],\n                  [\"Kingdom Comes\",'Cold Play'],[ \"Time of your life\", \"GreenDay\"]],\n                   columns=[\"Song\", \"Artist\"])\n\ndf_list = [sm, pm]\n\n# Adding a separator between DataFrames\nfor i in df_list:\n    print(i)\n    print(\"-\" * 40)  # Add a line separator\n```\n\n2. **Use IPython's `display` function (if in Jupyter Notebook):**\n\n```python\nimport pandas as pd\nfrom IPython.display import display\n\nsm = pd.DataFrame([[\"Forever\", 'BenHarper'],[\"Steel My Kisses\", 'Kack Johnson'],\n                  [\"Diamond On the Inside\",'Xavier Rudd'],[ \"Count On Me\", \"Bruno Mars\"]],\n                   columns=[\"Song\", \"Artist\"])\n\npm = pd.DataFrame([[\"I am yours\", 'Jack Johnson'],[\"Chasing Cars\", 'Snow Patrol'],\n                  [\"Kingdom Comes\",'Cold Play'],[ \"Time of your life\", \"GreenDay\"]],\n                   columns=[\"Song\", \"Artist\"])\n\ndf_list = [sm, pm]\n\n# Using display for better formatting\nfor i in df_list:\n    display(i)\n    print(\"\\n\")  # Add some space between DataFrames\n```\n\nThese approaches should make your DataFrames look more organized when printed in a loop."
    }
]