[
    {
        "role": "user",
        "content": "In Python, I am trying to append a dictionary to a list. However, I'm noticing a behavior which seems to imply that I have appended a reference or a pointer to the dictionary rather than its value. This is causing changes made to the dictionary to be reflected in the list, which is not what I want. Here's the code I used:\n\n```python\na = []\nb = {1:'one'}\na.append(b)\nprint(a)  # Output: [{1: 'one'}]\n\nb[1] = 'ONE'\nprint(a)  # Output: [{1: 'ONE'}]\n```\n\nAs you can see, after appending the dictionary 'b' to the list 'a', when I change the value corresponding to the key '1' in dictionary 'b', this change gets reflected in the list 'a'. I want to prevent this from happening. How can I append a dictionary to a list such that changes to the dictionary do not get reflected in the list?"
    },
    {
        "role": "assistant",
        "content": "The behavior you're observing is due to Python's handling of mutable objects like dictionaries. When you append a dictionary to a list, you're appending a reference to the dictionary, not a copy of its contents. Therefore, any changes you make to the dictionary will be reflected in the list.\n\nTo prevent modifications to the original dictionary from affecting the list, you can append a copy of the dictionary instead of the dictionary itself. You can achieve this by using the `copy` method of the dictionary or using the `copy` module to create a shallow copy. Here's how you can do it:\n\n### Using the `copy` method:\n\n```python\na = []\nb = {1: 'one'}\na.append(b.copy())  # Append a shallow copy of the dictionary\nprint(a)  # Output: [{1: 'one'}]\n\nb[1] = 'ONE'\nprint(a)  # Output: [{1: 'one'}]\n```\n\n### Using the `copy` module:\n\n```python\nimport copy\n\na = []\nb = {1: 'one'}\na.append(copy.copy(b))  # Append a shallow copy of the dictionary\nprint(a)  # Output: [{1: 'one'}]\n\nb[1] = 'ONE'\nprint(a)  # Output: [{1: 'one'}]\n```\n\nBoth methods create a new dictionary that contains the same key-value pairs as the original, but it is a separate object. This way, any changes made to the original dictionary `b` will not affect the dictionary stored in the list `a`."
    }
]