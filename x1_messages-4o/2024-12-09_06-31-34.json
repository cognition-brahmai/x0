[
    {
        "role": "user",
        "content": "Is there an equivalent function in matplotlib that performs the same role as MATLAB's `datacursormode`? This function in MATLAB allows you to add an annotation to a graph when a user hovers over it. If there is no such function in matplotlib, do I need to write my own event using `matplotlib.text.Annotation`?"
    },
    {
        "role": "assistant",
        "content": "In Matplotlib, there isn't a direct equivalent to MATLAB's `datacursormode` that provides the same level of interactivity out of the box. However, you can achieve similar functionality using Matplotlib's event handling and annotation capabilities. Here\u2019s a basic example of how you can implement a simple data cursor using `matplotlib`:\n\n```python\nimport matplotlib.pyplot as plt\n\n# Sample data\nx = [1, 2, 3, 4, 5]\ny = [5, 7, 9, 4, 2]\n\nfig, ax = plt.subplots()\nline, = ax.plot(x, y, marker='o', linestyle='-')\n\n# Create annotation object\nannot = ax.annotate(\"\", xy=(0,0), xytext=(20,20),\n                    textcoords=\"offset points\",\n                    bbox=dict(boxstyle=\"round\", fc=\"w\"),\n                    arrowprops=dict(arrowstyle=\"->\"))\n\nannot.set_visible(False)\n\ndef update_annot(ind):\n    \"\"\"Update the position and text of the annotation.\"\"\"\n    x, y = line.get_data()\n    annot.xy = (x[ind[\"ind\"][0]], y[ind[\"ind\"][0]])\n    text = f\"x: {x[ind['ind'][0]]}, y: {y[ind['ind'][0]]}\"\n    annot.set_text(text)\n    annot.get_bbox_patch().set_facecolor('lightblue')\n    annot.get_bbox_patch().set_alpha(0.7)\n\ndef hover(event):\n    \"\"\"Event handler for mouse motion.\"\"\"\n    vis = annot.get_visible()\n    if event.inaxes == ax:\n        cont, ind = line.contains(event)\n        if cont:\n            update_annot(ind)\n            annot.set_visible(True)\n            fig.canvas.draw_idle()\n        else:\n            if vis:\n                annot.set_visible(False)\n                fig.canvas.draw_idle()\n\nfig.canvas.mpl_connect(\"motion_notify_event\", hover)\n\nplt.show()\n```\n\n### Explanation:\n- **Annotation**: An annotation object (`annot`) is created and set to be initially invisible.\n- **`update_annot` function**: This updates the annotation's position and text based on the index of the data point being hovered over.\n- **Event Handling**: The `hover` function checks if the mouse is over the line and updates the annotation accordingly. The `motion_notify_event` is connected to this function to be triggered whenever the mouse moves.\n\nThis code sets up a simple interactive plot where moving the mouse over the data points will display an annotation with the coordinates of the point. You can customize the appearance and behavior as needed for your specific application."
    }
]