[
    {
        "role": "user",
        "content": "I am currently working with the Python logging module and I've encountered an issue. In my code, I have a class \"Logger\" which handles my logging activities. My problem is that I'm getting multiple entries in the log file for each `logger.info` call. Is there a way I can fix this issue? Here's my code for reference:\n\n```python\nimport os\nimport time\nimport datetime\nimport logging\nclass Logger :\n   def myLogger(self):\n      logger = logging.getLogger('ProvisioningPython')\n      logger.setLevel(logging.DEBUG)\n      now = datetime.datetime.now()\n      handler=logging.FileHandler('/root/credentials/Logs/ProvisioningPython'+ now.strftime(\"%Y-%m-%d\") +'.log')\n      formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n      handler.setFormatter(formatter)\n      logger.addHandler(handler)\n      return logger\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering with multiple entries in your log file for each `logger.info` call is likely due to the fact that a new handler is being added every time you call the `myLogger` method. This results in multiple handlers being attached to the logger, which causes the log messages to be duplicated in the output file.\n\nTo fix this issue, you can check if the logger already has handlers before adding a new one. Here's how you can modify your code to achieve this:\n\n```python\nimport os\nimport time\nimport datetime\nimport logging\n\nclass Logger:\n    def myLogger(self):\n        logger = logging.getLogger('ProvisioningPython')\n        logger.setLevel(logging.DEBUG)\n        \n        # Check if the logger already has handlers to avoid adding multiple handlers\n        if not logger.handlers:\n            now = datetime.datetime.now()\n            handler = logging.FileHandler('/root/credentials/Logs/ProvisioningPython' + now.strftime(\"%Y-%m-%d\") + '.log')\n            formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n            handler.setFormatter(formatter)\n            logger.addHandler(handler)\n        \n        return logger\n```\n\nBy checking if `logger.handlers` is empty, you ensure that a new handler is only added if there are no existing handlers, thereby preventing multiple entries for each log message."
    }
]