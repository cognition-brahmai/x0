[
    {
        "role": "user",
        "content": "I'm having issues with importing sibling packages in Python. I have a certain folder structure for my project as follows:\n\n```\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 api\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 api.py\n\u2502   \u2514\u2500\u2500 api_key.py\n\u251c\u2500\u2500 examples\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 example_one.py\n\u2502   \u2514\u2500\u2500 example_two.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_one.py\n```\n\nI want to be able to import from the `api` module into scripts in the `examples` and `tests` directories, and then run them from the command line. How can I accomplish this without resorting to the `sys.path.insert` hack for every file?"
    },
    {
        "role": "assistant",
        "content": "To import sibling packages in Python without resorting to modifying `sys.path`, you can structure your project as a package and use relative imports, or configure your `PYTHONPATH` environment variable. Here's how you can achieve this:\n\n### Option 1: Use a Package Structure\n\n1. **Ensure Each Directory is a Package**: Make sure each directory contains an `__init__.py` file, which you already have. This makes Python treat these directories as packages.\n\n2. **Use Relative Imports**: Within your `examples` and `tests` scripts, you can use relative imports to access the `api` module. For example, in your `example_one.py`, you can import like this:\n\n   ```python\n   from ..api import api\n   from ..api import api_key\n   ```\n\n3. **Running the Scripts**: When running your scripts, you have to execute them as modules from the top-level directory of your project. For example:\n\n   ```bash\n   python -m examples.example_one\n   ```\n\n   This command tells Python to treat `examples/example_one.py` as a module, which makes relative imports work correctly.\n\n### Option 2: Set the `PYTHONPATH`\n\n1. **Set the Environment Variable**: You can set the `PYTHONPATH` environment variable to include the top-level directory of your project. This allows Python to find your packages when running scripts.\n\n   ```bash\n   export PYTHONPATH=$(pwd)\n   ```\n\n   Add this line to your shell's configuration file (like `.bashrc` or `.zshrc`) to set it permanently. Replace `$(pwd)` with the actual path to your project directory if you're not running the command from within it.\n\n2. **Import Normally**: Once the `PYTHONPATH` is set, you can import using the normal import syntax without worrying about relative imports:\n\n   ```python\n   from api import api\n   from api import api_key\n   ```\n\n3. **Run Your Scripts Normally**: Now you can run your scripts directly:\n\n   ```bash\n   python examples/example_one.py\n   ```\n\n### Option 3: Create a Setup Script\n\nFor more advanced projects, you can create a `setup.py` file to install your package in \"editable mode.\" This is especially useful for larger projects or when you're managing dependencies:\n\n1. **Create a `setup.py` file** in your project root:\n\n   ```python\n   from setuptools import setup, find_packages\n\n   setup(\n       name='your_project_name',\n       version='0.1',\n       packages=find_packages(),\n   )\n   ```\n\n2. **Install the Package in Editable Mode**:\n\n   ```bash\n   pip install -e .\n   ```\n\n3. **Import and Run Normally**: After this, you'll be able to import your modules and run your scripts normally, just as in Option 2.\n\nChoose the option that best suits your workflow and project needs. The first option (relative imports and module execution) is usually the most straightforward for small to medium-sized projects."
    }
]