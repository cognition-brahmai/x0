[
    {
        "role": "user",
        "content": "I am using pandas to analyze some election results. I have a DataFrame, Results, which has a row for each constituency and columns representing the votes for the various parties. Currently, I am able to find the winning party (i.e., the party which polled the highest number of votes) and the number of votes it polled with the following code:\n```python\nRawResults = Results.ix[:, 'Unnamed: 9': 'Zeb']\nResults['Party'] = RawResults.idxmax(axis=1)\nResults['Votes'] = RawResults.max(axis=1).astype(int)\n```\nHowever, I need to find out how many votes the second-place party got and ideally its index/name. Is there any way in pandas to return the second highest value/index in a set of columns for each row?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can find the second highest value and its corresponding index in each row of your DataFrame using `pandas`. Here\u2019s how you can achieve that:\n\n1. **Sort values in each row**: Use `numpy` to sort the values in descending order.\n2. **Extract the second highest value and index**: Retrieve the second element from the sorted array and its corresponding index.\n\nHere's a step-by-step approach using your existing DataFrame:\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# Assuming RawResults is already defined as in your code\nRawResults = Results.ix[:, 'Unnamed: 9': 'Zeb']\n\n# Function to get the second highest value and its index\ndef second_highest(row):\n    # Sort the row in descending order and get the indices\n    sorted_indices = row.argsort()[::-1]\n    # Get the second highest value index\n    second_idx = sorted_indices[1]\n    # Get the second highest value\n    second_highest_value = row.iloc[second_idx]\n    # Get the column name for the second highest value\n    second_highest_name = row.index[second_idx]\n    return pd.Series([second_highest_name, second_highest_value])\n\n# Apply the function on each row\nResults[['Second_Party', 'Second_Votes']] = RawResults.apply(second_highest, axis=1)\n\n# Convert Second_Votes to integer if needed\nResults['Second_Votes'] = Results['Second_Votes'].astype(int)\n\nprint(Results[['Second_Party', 'Second_Votes']])\n```\n\n### Explanation:\n- **`argsort()`**: This function is used to get the indices that would sort the row. By using `[::-1]`, we reverse the order to get descending indices.\n- **`iloc` and `index`**: These are used to access the second highest value and the corresponding column name from the sorted indices.\n\nThis code will add two new columns to your `Results` DataFrame: `Second_Party`, which contains the name of the party with the second highest votes, and `Second_Votes`, which contains the number of votes they received."
    }
]