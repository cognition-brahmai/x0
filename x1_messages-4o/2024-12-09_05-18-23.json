[
    {
        "role": "user",
        "content": "What is the best alternative for parsing HTML in Python, if BeautifulSoup or lxml can't be used? The current code uses SGMLlib but it's deprecated and seems a bit low-level. The parser should ideally handle a bit of malformed HTML, although most of the input will be clean."
    },
    {
        "role": "assistant",
        "content": "If you're looking for alternatives to BeautifulSoup and lxml for parsing HTML in Python, there are a few other libraries you can consider:\n\n1. **html5lib**:\n   - `html5lib` is a pure Python library that parses HTML the way web browsers do, which means it can handle malformed HTML effectively.\n   - It supports the complete HTML5 specification and is known for its robustness in dealing with imperfect HTML.\n\n2. **PyQuery**:\n   - `PyQuery` provides a jQuery-like API for querying and manipulating HTML documents. It is built on top of lxml, so make sure lxml is available in your environment if you choose this option.\n   - It's a good choice if you are familiar with jQuery and prefer using a similar syntax in Python.\n\n3. **Mechanize**:\n   - While primarily used for automating interaction with websites, Mechanize can also parse HTML. It is useful when you need to simulate a browser and navigate through web pages programmatically.\n   - It includes a parser for handling HTML forms and links.\n\n4. **html.parser (from the standard library)**:\n   - Python's built-in `html.parser` module is part of the standard library and can be used to parse HTML. It is not as forgiving as BeautifulSoup or html5lib when dealing with malformed HTML, but it is readily available without additional installations.\n\n5. **xml.etree.ElementTree (for well-formed XML/HTML)**:\n   - If your HTML is well-formed XML (XHTML), you might consider using `xml.etree.ElementTree`, which is also part of the Python standard library.\n   - It is not designed for handling malformed HTML, so it's best used when you are sure that the input is clean.\n\nEach of these libraries has its own strengths and use cases, so the best choice depends on your specific needs and the nature of the HTML you are dealing with. If handling malformed HTML is a priority, `html5lib` might be the most robust option."
    }
]