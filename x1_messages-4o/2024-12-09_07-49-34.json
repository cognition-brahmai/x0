[
    {
        "role": "user",
        "content": "How can I correctly use the \"NextToken\" field in AWS API calls? I am trying to describe my organization and collect all the accounts in our AWS organization using the list_accounts function in boto3. However, when I run the code, I get the following error: \"botocore.errorfactory.InvalidInputException: An error occurred (InvalidInputException) when calling the ListAccounts operation: You specified an invalid value for nextToken. You must get the value from the response to a previous call to the API\". I am unsure how to properly use the NextToken field. Here is the code that I am running:\n\n```python\nimport boto3\nimport uuid\nimport pprint\n\niam_client = boto3.client('iam')\nsts_client = boto3.client('sts')\norg_client = boto3.client('organizations')\n\nprint(\"Starting in account: %s\" % sts_client.get_caller_identity().get('Account'))\n\nassumedRoleObject = sts_client.assume_role(\n    RoleArn=\"arn:aws:iam::123456xxx:role/MsCrossAccountAccessRole\",\n    RoleSessionName=\"MasterPayer\"\n)\n\ncredentials = assumedRoleObject['Credentials']\n\norg_client = boto3.client(\n    'organizations',\n    aws_access_key_id = credentials['AccessKeyId'],\n    aws_secret_access_key = credentials['SecretAccessKey'],\n    aws_session_token = credentials['SessionToken'],\n)\n\ngetListAccounts = org_client.list_accounts(\n    NextToken='string'\n)\n```"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to incorrectly specifying the `NextToken` parameter. In AWS API calls, the `NextToken` is used for pagination, allowing you to retrieve large sets of results across multiple API calls. You should only specify the `NextToken` parameter if you received a `NextToken` in the response from a previous call. Here's how you can handle pagination correctly using `NextToken`:\n\n1. **Make the initial API call without specifying `NextToken`.**\n2. **Check if the response contains a `NextToken`.**\n3. **Use the `NextToken` in subsequent calls to retrieve further results.**\n4. **Repeat until no `NextToken` is returned.**\n\nBelow is an example of how you can modify your code to handle pagination correctly:\n\n```python\nimport boto3\nimport pprint\n\nsts_client = boto3.client('sts')\norg_client = boto3.client('organizations')\n\nprint(\"Starting in account: %s\" % sts_client.get_caller_identity().get('Account'))\n\nassumedRoleObject = sts_client.assume_role(\n    RoleArn=\"arn:aws:iam::123456xxx:role/MsCrossAccountAccessRole\",\n    RoleSessionName=\"MasterPayer\"\n)\n\ncredentials = assumedRoleObject['Credentials']\n\norg_client = boto3.client(\n    'organizations',\n    aws_access_key_id = credentials['AccessKeyId'],\n    aws_secret_access_key = credentials['SecretAccessKey'],\n    aws_session_token = credentials['SessionToken'],\n)\n\naccounts = []\nnext_token = None\n\nwhile True:\n    if next_token:\n        response = org_client.list_accounts(NextToken=next_token)\n    else:\n        response = org_client.list_accounts()\n\n    accounts.extend(response['Accounts'])\n\n    # Check if there's a next token\n    next_token = response.get('NextToken')\n    if not next_token:\n        break\n\npprint.pprint(accounts)\n```\n\n**Explanation:**\n\n- Start by calling `list_accounts()` without a `NextToken`.\n- Append the accounts from each response to your `accounts` list.\n- Check if the response includes a `NextToken`. If it does, use it for the next iteration.\n- Continue until no `NextToken` is returned, indicating you've retrieved all pages.\n\nThis approach ensures that you retrieve all accounts across potentially multiple API calls without running into the `InvalidInputException`."
    }
]