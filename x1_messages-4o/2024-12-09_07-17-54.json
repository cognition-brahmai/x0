[
    {
        "role": "user",
        "content": "How can I map incoming \"path\" requests when using HTTPServer in Python? I have a local web server that outputs \"Hello World\" and the current time. I want to create a path on the server program such that when I type in \"/time\" after 127.0.0.1 in the browser bar, it will display the current time and if I type \"/date\", it will give me the current date. Here is my current code:\n\n```python\nfrom BaseHTTPServer import BaseHTTPRequestHandler,HTTPServer\nimport datetime\n\nport = 80\n\nclass myHandler(BaseHTTPRequestHandler):\n\n    #Handler for the GET requests\n    def do_GET(self):\n\n    self.send_response(200)\n    self.send_header('Content-type','text/html')\n    self.end_headers()\n    # Send the html message\n    self.wfile.write(\"&lt;b&gt; Hello World !&lt;/b&gt;\"\n                     + \"&lt;br&gt;&lt;br&gt;Current time and date: \" + str(datetime.datetime.now()))\n\nserver = HTTPServer(('', port), myHandler)\nprint 'Started httpserver on port ', port\n\n#Wait forever for incoming http requests\nserver.serve_forever()\n```"
    },
    {
        "role": "assistant",
        "content": "To map incoming \"path\" requests to different responses in your HTTPServer, you need to inspect the `self.path` attribute in the `do_GET` method. This attribute contains the path of the request URL, which you can use to determine what response to send back to the client. \n\nHere's an updated version of your code that handles both `/time` and `/date` paths:\n\n```python\nfrom BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer\nimport datetime\n\nport = 80\n\nclass myHandler(BaseHTTPRequestHandler):\n\n    # Handler for the GET requests\n    def do_GET(self):\n        if self.path == \"/time\":\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            # Send the current time\n            current_time = datetime.datetime.now().strftime(\"%H:%M:%S\")\n            self.wfile.write(f\"<b>Current Time:</b> {current_time}\")\n        \n        elif self.path == \"/date\":\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            # Send the current date\n            current_date = datetime.datetime.now().strftime(\"%Y-%m-%d\")\n            self.wfile.write(f\"<b>Current Date:</b> {current_date}\")\n\n        else:\n            self.send_response(200)\n            self.send_header('Content-type', 'text/html')\n            self.end_headers()\n            # Default response\n            self.wfile.write(\"<b>Hello World!</b>\")\n\nserver = HTTPServer(('', port), myHandler)\nprint 'Started httpserver on port', port\n\n# Wait forever for incoming http requests\nserver.serve_forever()\n```\n\n### Explanation:\n\n1. **Path Checking**: The `do_GET` method checks the value of `self.path`. Depending on the path, it executes the corresponding block of code.\n\n2. **Current Time and Date**: Uses `datetime.datetime.now().strftime()` to format the current time and date as strings.\n\n3. **Response Handling**: For each path, it sends a 200 response, sets the content type to `text/html`, and writes the appropriate message to the response.\n\nWith this setup, accessing `http://127.0.0.1/time` will return the current time, and `http://127.0.0.1/date` will return the current date. If you access any other path, it will default to returning \"Hello World!\". \n\nAlso, note that the code uses `print` statements in a Python 2 style, so if you're using Python 3, make sure to use parentheses with `print`. If you are using Python 3, you should replace `from BaseHTTPServer import BaseHTTPRequestHandler, HTTPServer` with `from http.server import BaseHTTPRequestHandler, HTTPServer`."
    }
]