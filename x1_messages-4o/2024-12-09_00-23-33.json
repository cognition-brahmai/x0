[
    {
        "role": "user",
        "content": "How can I override the [] operator in Python? What method is used to override the subscript notation for a class in Python?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can override the `[]` operator, which is used for indexing and slicing, by implementing the `__getitem__`, `__setitem__`, and `__delitem__` methods in your class. These methods allow you to define custom behavior for accessing, assigning, and deleting items using the subscript notation.\n\nHere's a brief overview of each method:\n\n1. **`__getitem__(self, key)`**: This method is called to retrieve an item from the object using the subscript notation, like `obj[key]`. You define the behavior for returning the value associated with the given key.\n\n2. **`__setitem__(self, key, value)`**: This method is called to set an item in the object using the subscript notation, like `obj[key] = value`. You define how to store the value with the specified key.\n\n3. **`__delitem__(self, key)`**: This method is called to delete an item from the object using the subscript notation, like `del obj[key]`. You define how to remove the item associated with the given key.\n\nHere's an example of how you might implement these methods in a custom class:\n\n```python\nclass CustomDict:\n    def __init__(self):\n        self.data = {}\n\n    def __getitem__(self, key):\n        return self.data[key]\n\n    def __setitem__(self, key, value):\n        self.data[key] = value\n\n    def __delitem__(self, key):\n        del self.data[key]\n\n# Example usage:\nmy_dict = CustomDict()\nmy_dict['a'] = 10  # Calls __setitem__\nprint(my_dict['a'])  # Calls __getitem__, outputs: 10\ndel my_dict['a']  # Calls __delitem__\n```\n\nIn this example, `CustomDict` behaves similarly to a regular dictionary but with custom logic in place of the standard dictionary behavior. You can customize what happens when items are accessed, assigned, or deleted using the subscript notation."
    }
]