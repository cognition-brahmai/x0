[
    {
        "role": "user",
        "content": "How can I compute the column-wise average of a list of lists in Python? I have a list of lists, something like:\n\n```python\ndata = [[240, 240, 239],\n        [250, 249, 237], \n        [242, 239, 237],\n        [240, 234, 233]]\n```\n\nI want to compute the average for each column, so the output will look something like this: `[average_column_1, average_column_2, average_column_3]`. I have tried doing this in a naive way by iterating through the list, keeping the sum in a separate container and then dividing by the number of elements. However, I believe there might be a more pythonic way to achieve this. Can anyone suggest a more efficient approach?"
    },
    {
        "role": "assistant",
        "content": "Certainly! One pythonic way to compute the column-wise average of a list of lists is to use Python's built-in `zip` function combined with list comprehensions. The `zip` function can be used to transpose the rows to columns, making it easier to perform column-wise operations. Here's how you can do it:\n\n```python\ndata = [\n    [240, 240, 239],\n    [250, 249, 237],\n    [242, 239, 237],\n    [240, 234, 233]\n]\n\n# Use zip to transpose rows to columns\ntransposed_data = zip(*data)\n\n# Calculate average for each column\ncolumn_averages = [sum(column) / len(column) for column in transposed_data]\n\nprint(column_averages)\n```\n\n### Explanation:\n1. **Transpose the Data:** `zip(*data)` transposes the rows into columns. The `*` operator is used to unpack the lists within `data` so that `zip` can group them by columns.\n\n2. **Compute Averages:** Using a list comprehension, iterate over each column produced by `zip`, calculate the sum, and then divide by the number of elements in the column to get the average.\n\nThis approach is concise and leverages Python's strengths in handling such tasks efficiently and elegantly."
    }
]