[
    {
        "role": "user",
        "content": "How can I test dictionary equality with Python's doctest-package? I have a function that outputs a dictionary and I'm trying to write a doctest for it. My doctest currently looks like this:\n\n```python\n>>> my_function()\n{'this': 'is', 'a': 'dictionary'}\n```\n\nHowever, when I run it, it fails with the following output:\n\n```python\nExpected:\n    {'this': 'is', 'a': 'dictionary'}\nGot:\n    {'a': 'dictionary', 'this': 'is'}\n```\n\nMy assumption is that doctest isn't checking dictionary equality, but `__repr__` equality. I saw a post indicating that there's a way to make doctest check for dictionary equality. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "You're right that `doctest` by default checks for string representation equality, which can cause issues when the order of items in a dictionary differs. However, dictionaries in Python are inherently unordered before Python 3.7 (insertion ordered as of 3.7, but still considered unordered for equality). To address this, you can use a workaround by comparing the dictionaries using a function within your doctest. Here's one way to do it:\n\nInstead of directly comparing the dictionary outputs, create a helper function that checks for dictionary equality using the `==` operator, which properly checks if two dictionaries have the same keys and values, regardless of their order. Here's an example:\n\n```python\ndef my_function():\n    return {'this': 'is', 'a': 'dictionary'}\n\ndef check_dict_equality(d1, d2):\n    return d1 == d2\n\n# Now, write your doctest using this helper function\ndef test_my_function():\n    \"\"\"\n    >>> check_dict_equality(my_function(), {'this': 'is', 'a': 'dictionary'})\n    True\n    \"\"\"\n```\n\nIn this example, `check_dict_equality` will return `True` if the dictionaries are equal, and your doctest will succeed as long as the key-value pairs are the same, regardless of order.\n\nMake sure to include this helper function in your module so that `doctest` can access it when running tests. This approach allows `doctest` to check for dictionary equality correctly."
    }
]