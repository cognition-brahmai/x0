[
    {
        "role": "user",
        "content": "How can I scale a numpy array of shape (h, w) by a factor of n, resulting in an array of shape (h*n, w*n)? For example, if I have a 2x2 array like this:\n\n```python\narray([[1, 1],\n       [0, 1]])\n```\n\nI want to scale it to a 4x4 array like this:\n\n```python\narray([[1, 1, 1, 1],\n       [1, 1, 1, 1],\n       [0, 0, 1, 1],\n       [0, 0, 1, 1]])\n```\n\nHere, the value of each cell in the original array is copied into 4 corresponding cells in the resulting array. What's the most efficient way to do this for an arbitrary array size and scaling factor?"
    },
    {
        "role": "assistant",
        "content": "To scale a NumPy array by a factor of \\( n \\), where each element in the original array is replicated into an \\( n \\times n \\) block in the resulting array, you can use the NumPy `repeat` function. This function allows you to repeat elements along specified axes, which is perfect for this task.\n\nHere's how you can achieve this:\n\n```python\nimport numpy as np\n\ndef scale_array(input_array, scale_factor):\n    # Repeat along the first axis (rows)\n    expanded_rows = np.repeat(input_array, scale_factor, axis=0)\n    # Repeat along the second axis (columns)\n    expanded_array = np.repeat(expanded_rows, scale_factor, axis=1)\n    return expanded_array\n\n# Example usage\noriginal_array = np.array([[1, 1],\n                           [0, 1]])\n\nscaled_array = scale_array(original_array, 2)\nprint(scaled_array)\n```\n\nThis will output:\n\n```\n[[1 1 1 1]\n [1 1 1 1]\n [0 0 1 1]\n [0 0 1 1]]\n```\n\nExplanation:\n- The `np.repeat` function is first used to repeat the elements of the array along the rows (`axis=0`), effectively expanding each row by the scale factor.\n- The result from the first repeat is then again repeated along the columns (`axis=1`), expanding each column by the scale factor.\n\nThis method is efficient and concise for scaling arrays by any arbitrary factor."
    }
]