[
    {
        "role": "user",
        "content": "How can I add a config file to the dist directory when using the --onefile option in Pyinstaller on Windows?\n\nI'm currently using Pyinstaller on Windows to create an .exe file for my project. I want to use the --onefile option to create a single executable file that is easy to distribute. My program uses a config.ini file to store configuration options and this file can be customized by users. However, when I use the --onefile option, Pyinstaller puts all the declared \"data-file\" inside the single .exe file. I have come across a request that gives instructions on adding a bundle file inside the onefile, but I need to add the config.ini file outside the onefile, at the same level as the .exe file and in the same dist directory. I have tried using the shutil.copy command inside the .spec file to copy the config.ini file but I am not sure if this is the correct approach. Can anyone guide me on how to do this?"
    },
    {
        "role": "assistant",
        "content": "To include a `config.ini` file alongside your single executable when using PyInstaller with the `--onefile` option, you can modify the PyInstaller `.spec` file to copy the `config.ini` file to the output directory after the build process is complete. Here's a step-by-step guide on how to achieve this:\n\n1. **Generate a Spec File:**\n   First, generate a PyInstaller spec file if you don't have one already. You can do this by running PyInstaller with the `--onefile` option and specifying your script:\n   ```bash\n   pyinstaller --onefile your_script.py\n   ```\n   This will generate a `your_script.spec` file.\n\n2. **Modify the Spec File:**\n   Open the generated `.spec` file and locate the section where the EXE is built. You will typically find a section like this:\n   ```python\n   exe = EXE(\n       ...\n   )\n   ```\n\n3. **Add a Post-Build Hook:**\n   You can use the `shutil.copy` function to copy the `config.ini` file to the output directory after the executable is created. You'll need to import `shutil` and modify the `.spec` file as follows:\n   ```python\n   import shutil\n   import os\n\n   # After the EXE section\n   exe = EXE(\n       ...\n   )\n\n   # Define the path to the config file and the output directory\n   config_file = 'path/to/your/config.ini'\n   output_dir = os.path.dirname(exe.name)\n\n   # Hook to copy the config file to the output directory\n   def copy_config():\n       shutil.copy(config_file, output_dir)\n\n   # Add the hook to the analysis\n   copy_config()\n   ```\n\n4. **Build the Executable:**\n   Run PyInstaller with the modified spec file:\n   ```bash\n   pyinstaller your_script.spec\n   ```\n\n5. **Verify the Output:**\n   After the build process is complete, navigate to the `dist` directory and check if the `config.ini` file is present alongside your `.exe` file.\n\nBy using this approach, you ensure that the `config.ini` file is included alongside your executable in the `dist` directory, allowing users to modify the configuration as needed."
    }
]