[
    {
        "role": "user",
        "content": "How can I obtain an Abstract Syntax Tree (AST) in Python with preserved comments and whitespace? I have been able to get an AST without comments using the following code:\n\n```python\nimport ast\nmodule = ast.parse(open('/path/to/module.py').read())\n```\n\nBut I want to know how to preserve the comments and whitespace."
    },
    {
        "role": "assistant",
        "content": "In Python, the standard `ast` module does not preserve comments or whitespace because it is designed to represent the syntactic structure of the code, not its exact text formatting. However, you can use third-party libraries that extend the functionality of the `ast` module to include comments and whitespace.\n\nOne such library is `asttokens`, which provides utilities for pairing Python source code with its AST and token information. This library allows you to work with the original source code alongside the AST, which can be useful for preserving comments and whitespace.\n\nHere\u2019s how you can use `asttokens` to achieve your goal:\n\n1. Install the `asttokens` package if you haven't already:\n\n   ```bash\n   pip install asttokens\n   ```\n\n2. Use `asttokens` to parse your Python module:\n\n   ```python\n   import ast\n   from asttokens import ASTTokens\n\n   # Read the source code from the file\n   with open('/path/to/module.py', 'r') as file:\n       source_code = file.read()\n\n   # Create an ASTTokens object\n   ast_tokens = ASTTokens(source_code, parse=True)\n\n   # Access the root of the AST\n   module = ast_tokens.tree\n\n   # Example: Print all nodes with their associated tokens\n   for node in ast.walk(module):\n       # Get the tokens for the node\n       node_tokens = ast_tokens.get_tokens(node)\n       print(f\"Node: {type(node).__name__}\")\n       for token in node_tokens:\n           print(f\"- {token}\")\n   ```\n\nIn this setup, `ASTTokens` helps you associate the original source code with the AST nodes. You can iterate over nodes and access their respective tokens, including comments and whitespace, because `asttokens` keeps track of the original source.\n\nThis approach provides a more comprehensive view of the code as written, allowing you to preserve and manipulate comments and whitespace alongside the AST structure."
    }
]