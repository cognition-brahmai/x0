[
    {
        "role": "user",
        "content": "I am working on a Flask application with the following structure:\n\n```\nmyapp/\n    run.py\n    admin/\n        __init__.py\n        views.py\n        pages/\n            index.html\n    main/\n        __init__.py\n        views.py\n        pages/\n            index.html\n```\nThe `__init__.py` files are empty. The content of `admin/views.py` is:\n```\nfrom flask import Blueprint, render_template\nadmin = Blueprint('admin', __name__, template_folder='pages')\n\n@admin.route('/')\ndef index():\n    return render_template('index.html')\n```\n`main/views.py` is similar to `admin/views.py`:\n```\nfrom flask import Blueprint, render_template\nmain = Blueprint('main', __name__, template_folder='pages')\n\n@main.route('/')\ndef index():\n    return render_template('index.html')\n```\n`run.py` is:\n```\nfrom flask import Flask\nfrom admin.views import admin\nfrom main.views import main\n\napp = Flask(__name__)\napp.register_blueprint(admin, url_prefix='/admin')\napp.register_blueprint(main, url_prefix='/main')\n\nprint(app.url_map)\n\napp.run()\n```\nIf I access `http://127.0.0.1:5000/admin/`, it correctly displays `admin/index.html`. However, `http://127.0.0.1:5000/main/` shows `admin/index.html` instead of `main/index.html`. I checked `app.url_map` and it shows:\n```\n<Rule 'admin' (HEAD, OPTIONS, GET) -> admin.index,\n<Rule 'main' (HEAD, OPTIONS, GET) -> main.index,\n```\nI also verified that `index` function in `main/views.py` is called as expected. If I rename `main/index.html` to something different then it works. How can I make `http://127.0.0.1:5000/main/` show `main/index.html` without renaming the file?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is related to how Flask resolves templates when using `render_template`. By default, Flask looks for templates in the `templates` folder within the application directory, but in your case, you\u2019re using the `template_folder` parameter within each blueprint to specify a different location for templates.\n\nHere's why the issue is occurring:\n\n- Both blueprints have their `template_folder` set to the same subfolder named `pages`.\n- When Flask tries to render `index.html` from the `main` blueprint, it does find `index.html` in the `admin/pages` folder first due to how the file system search works.\n\nTo resolve this issue, you can specify unique template folder paths for `admin` and `main` blueprints to avoid the conflict:\n\n1. **Update the Blueprint Definitions:**\n\n   Modify the `Blueprint` instantiations in both `admin/views.py` and `main/views.py` to include their respective subdirectories in the `template_folder`:\n\n   ```python\n   # admin/views.py\n   admin = Blueprint('admin', __name__, template_folder='admin/pages')\n\n   # main/views.py\n   main = Blueprint('main', __name__, template_folder='main/pages')\n   ```\n\n2. **Update Project Structure:**\n\n   You don\u2019t need to change the directory structure if you set the `template_folder` paths correctly in the blueprint definitions.\n\nWith these changes, the Flask application will correctly distinguish between `admin/index.html` and `main/index.html` by looking into the specified template folders within each blueprint. This ensures the correct template is rendered for each blueprint route."
    }
]