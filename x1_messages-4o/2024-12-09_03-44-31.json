[
    {
        "role": "user",
        "content": "How can I display query parameter options in SwaggerUI using Django REST Framework? I want to provide a form input for each query parameter, similar to when providing a serializer for POST. I'm using a viewset that inherits from GenericViewSet and have tried providing a `filter_fields` attribute, setting the `filter_backends` attribute to `(filters.DjangoFilterBackend,)`, providing a filter_class defined inside my module, and overriding the `options` method to provide `[actions][GET]` information. However, I'm not using any models, so I'm not sure if DjangoFilterBackend will be useful. I'm using DjangoRESTFramework to interact with an external API, and I'm simply receiving a JSON result and passing it to the frontend layer. Here's a small snippet of my code:\n\n`views.py`:\n\n```python\nclass SomeViewSet(GenericViewSet):\n    # Note that I have all of these defined, but I have tried various combinations\n    filter_fields = ('query_option_1', 'query_option_2',)\n    filter_backeds = (filters.DjangoFilterBackend,)\n    filter_class = SomeFilter\n    query_metadata = some_dict\n\n    # This works when request is OPTIONS\n    def options(self, request, *args, **kwargs):\n        if self.metadata_class is None:\n            return self.http_method_not_allowed(request, *args, **kwargs)\n        data = self.metadata_class().determine_metadata(request, self)\n        data['actions']['GET'] = self.query_metadata\n        return Response(data, status=status.HTTP_200_OK)\n```\n\n`filters.py`:\n\n```python\nclass SomeFilter(FilterSet):\n    strict = True\n    query_option_1 = django_filters.NumberFilter(name='query_option_1')\n    query_option_2 = django_filters.NumberFilter(name='query_option_2')\n\n    class Meta:\n        fields = ['query_option_1', 'query_option_2']\n```"
    },
    {
        "role": "assistant",
        "content": "To display query parameter options in SwaggerUI using Django REST Framework (DRF), especially when you're working without models or using DRF with external APIs, you need to ensure that your API schema is correctly set up to include these parameters. Here\u2019s a systematic approach to achieve this:\n\n1. **Use Django REST Framework's Schema Generation**:\n   DRF's schema generation can be enhanced to include query parameters for list endpoints. You can use `drf_yasg` or `drf-spectacular` for generating Swagger documentation which can handle query parameters effectively.\n\n2. **Define Parameters in Viewset Using `swagger_auto_schema`**:\n   If you are using `drf_yasg`, you can explicitly define query parameters using the `swagger_auto_schema` decorator. Here's how you can do it:\n\n   ```python\n   from rest_framework import viewsets\n   from rest_framework.decorators import action\n   from drf_yasg.utils import swagger_auto_schema\n   from drf_yasg import openapi\n\n   class SomeViewSet(viewsets.GenericViewSet):\n       filter_backends = (filters.DjangoFilterBackend,)\n\n       @swagger_auto_schema(\n           manual_parameters=[\n               openapi.Parameter('query_option_1', openapi.IN_QUERY, description=\"Query option 1\", type=openapi.TYPE_INTEGER),\n               openapi.Parameter('query_option_2', openapi.IN_QUERY, description=\"Query option 2\", type=openapi.TYPE_INTEGER),\n           ]\n       )\n       def list(self, request, *args, **kwargs):\n           # Your logic to handle GET request\n           return Response(data)\n   ```\n\n3. **Install and Configure `drf_yasg` or `drf-spectacular`**:\n   If you haven't already, install `drf_yasg`:\n\n   ```bash\n   pip install drf_yasg\n   ```\n\n   Or, install `drf-spectacular`:\n\n   ```bash\n   pip install drf-spectacular\n   ```\n\n   Then, add it to your `INSTALLED_APPS` in `settings.py`:\n\n   ```python\n   INSTALLED_APPS = [\n       ...\n       'drf_yasg',\n   ]\n   ```\n\n   Or, for `drf-spectacular`:\n\n   ```python\n   INSTALLED_APPS = [\n       ...\n       'drf_spectacular',\n   ]\n   ```\n\n4. **Generate Swagger Documentation**:\n   Add a URL pattern for the Swagger UI in your `urls.py`:\n\n   ```python\n   from rest_framework import permissions\n   from drf_yasg.views import get_schema_view\n   from drf_yasg import openapi\n\n   schema_view = get_schema_view(\n       openapi.Info(\n           title=\"Your API\",\n           default_version='v1',\n           description=\"API description\",\n       ),\n       public=True,\n       permission_classes=(permissions.AllowAny,),\n   )\n\n   urlpatterns = [\n       ...\n       path('swagger/', schema_view.with_ui('swagger', cache_timeout=0), name='schema-swagger-ui'),\n   ]\n   ```\n\n   Or, for `drf-spectacular`:\n\n   ```python\n   from drf_spectacular.views import SpectacularAPIView, SpectacularSwaggerView\n\n   urlpatterns = [\n       ...\n       path('api/schema/', SpectacularAPIView.as_view(), name='schema'),\n       path('api/docs/', SpectacularSwaggerView.as_view(url_name='schema'), name='swagger-ui'),\n   ]\n   ```\n\nBy following these steps, you'll be able to display query parameters in SwaggerUI while using Django REST Framework without relying on models. This setup explicitly defines the available query parameters and integrates them into your API documentation."
    }
]