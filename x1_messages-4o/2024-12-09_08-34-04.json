[
    {
        "role": "user",
        "content": "I am looking for a reliable way for a Bash script to know its full path. I have found several methods, but they either return a relative path, contain relative bits even though the overall path is absolute, or rely on non-POSIX solutions. The solution should give me the absolute path, remove unnecessary bits even if the path is called in an unusual way, rely mostly on Bash or commonly available commands on most Unix systems, and avoid using external programs if possible. It does not need to resolve symlinks."
    },
    {
        "role": "assistant",
        "content": "To achieve this, you can use a combination of Bash built-in variables and commands to determine the absolute path of a script. Here\u2019s a reliable way to get the full path of a Bash script without resolving symlinks:\n\n```bash\n#!/bin/bash\n\n# Get the directory name of the script\nSCRIPT_DIR=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)\"\n\n# Get the script name\nSCRIPT_NAME=\"$(basename \"${BASH_SOURCE[0]}\")\"\n\n# Combine them to get the full path\nSCRIPT_FULL_PATH=\"${SCRIPT_DIR}/${SCRIPT_NAME}\"\n\necho \"The full path of the script is: ${SCRIPT_FULL_PATH}\"\n```\n\n### Explanation:\n\n1. **`${BASH_SOURCE[0]}`**: This variable contains the path used to invoke the script, which could be relative or absolute.\n\n2. **`dirname`**: This command extracts the directory part of the path.\n\n3. **`cd` and `pwd`**: The combination `cd \"$(dirname \"${BASH_SOURCE[0]}\")\"` changes the directory to where the script is located, and `pwd` then outputs the absolute path of that directory.\n\n4. **`basename`**: This command gets the script name from the path.\n\n5. **Combining the Directory and Script Name**: Concatenating these results gives you the full absolute path to the script.\n\nThis method is POSIX-compliant, uses commonly available commands, and doesn't rely on external programs. It should work reliably across most Unix-like systems."
    }
]