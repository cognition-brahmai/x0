[
    {
        "role": "user",
        "content": "Is there a more idiomatic way to add an extension using Python's Pathlib? I'm currently using the following code:\n\n```python\np = Path('/path/to/foo')\nfor ext in ['.txt', '.md', '.note']:\n    filename = Path(str(p) + ext)\n```\nI'm trying to loop through different extensions and add them to my path, but this approach feels a little awkward. Is there a better way I could be doing this?"
    },
    {
        "role": "assistant",
        "content": "Yes, there is a more idiomatic way to add an extension using Python's `pathlib` module without converting the `Path` object to a string. You can make use of the `/` operator, which `Path` objects overload to join paths or append suffixes. Here's how you can achieve it:\n\n```python\nfrom pathlib import Path\n\np = Path('/path/to/foo')\nfor ext in ['.txt', '.md', '.note']:\n    filename = p.with_suffix(ext)\n    print(filename)\n```\n\nIn this approach, `with_suffix()` is used to replace the file's suffix with the one provided, keeping the rest of the path intact. This avoids the need to explicitly convert the `Path` object to a string and is considered more idiomatic when working with `pathlib`."
    }
]