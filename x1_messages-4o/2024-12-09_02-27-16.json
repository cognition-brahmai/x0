[
    {
        "role": "user",
        "content": "I am attempting to predict weekly sales using ARIMA models in Python, but I'm struggling to find a function for tuning the order (p,d,q) in the `statsmodels` library. R has a function `forecast::auto.arima()` which automatically tunes these parameters. How can I select the appropriate order for my model in Python? Are there any Python libraries available for this purpose?"
    },
    {
        "role": "assistant",
        "content": "In Python, while the `statsmodels` library does not have a direct equivalent of R's `forecast::auto.arima()` function for automatically selecting the order (p, d, q) of the ARIMA model, you can use the `pmdarima` library, which provides similar functionality. The `pmdarima` library has a function called `auto_arima()` that can be used to automatically determine the best set of parameters for your ARIMA model.\n\nHere\u2019s a step-by-step guide on how to use `pmdarima` to find the optimal ARIMA order:\n\n1. **Install pmdarima**: If you haven't installed it yet, you can do so using pip:\n   ```bash\n   pip install pmdarima\n   ```\n\n2. **Use auto_arima**: You can then use the `auto_arima` function to fit your model. Here\u2019s a basic example:\n\n   ```python\n   import pmdarima as pm\n   import pandas as pd\n\n   # Assume 'data' is your pandas DataFrame and 'sales' is the column you want to predict\n   # Also assume 'date' is your datetime index\n   data = pd.DataFrame({\n       'date': pd.date_range(start='2020-01-01', periods=100, freq='W'),\n       'sales': [your_sales_data_here]\n   })\n   data.set_index('date', inplace=True)\n\n   # Fit auto_arima model\n   model = pm.auto_arima(data['sales'], \n                         seasonal=False,  # Change to True if you have seasonal data\n                         stepwise=True,\n                         suppress_warnings=True,\n                         error_action='ignore',  \n                         max_order=None)  # Consider setting a max_order to limit search space\n\n   # Print the best ARIMA order found\n   print(model.summary())\n\n   # If you want to make predictions\n   forecast = model.predict(n_periods=10)\n   print(forecast)\n   ```\n\n3. **Parameters**: The `auto_arima()` function comes with several parameters that you can tune:\n   - `seasonal`: Set to `True` if your data has a seasonal component.\n   - `stepwise`: When set to `True`, it performs a stepwise search to reduce computation time.\n   - `suppress_warnings`: Suppresses warnings during fitting.\n   - `error_action`: Determines what to do if some orders fail.\n   - `max_order`: Sets an upper limit on the sum of `p`, `d`, and `q`.\n\nBy using `pmdarima`, you can efficiently find the best ARIMA model for your time series data without manually testing every combination of (p, d, q)."
    }
]