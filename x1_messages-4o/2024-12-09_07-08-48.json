[
    {
        "role": "user",
        "content": "How can I pad a string with spaces from both right and left in Python? I need to pad a string with whitespaces up to a certain length in separate cases. For instance, I have the string \"TEST\" but I need to make the string variable like \"     TEST1\" so that the actual string variable is 10 characters in length (led by 5 spaces in this case). Similarly, I need to reverse it and pad whitespace from the other direction like \"TEST2     \". The total string length should be variable. Are there any Python functions to manage this or would I need to create a character array to manage it?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can easily pad strings with spaces using the `str.ljust()`, `str.rjust()`, and `str.center()` methods, which are specifically designed for this purpose. These methods allow you to pad a string to a specified total length with a specified fill character, which defaults to a space.\n\nHere's how you can use these methods for your requirements:\n\n1. **Padding with spaces on the left (right-aligning the text):**\n\n   You can use the `str.rjust()` method to pad the string with spaces on the left to a specified length.\n\n   ```python\n   original_string = \"TEST\"\n   total_length = 10\n   padded_string = original_string.rjust(total_length)\n   print(padded_string)  # Output: \"      TEST\"\n   ```\n\n2. **Padding with spaces on the right (left-aligning the text):**\n\n   You can use the `str.ljust()` method to pad the string with spaces on the right to a specified length.\n\n   ```python\n   original_string = \"TEST\"\n   total_length = 10\n   padded_string = original_string.ljust(total_length)\n   print(padded_string)  # Output: \"TEST      \"\n   ```\n\n3. **Centering the string with spaces on both sides:**\n\n   If you want to center the string with spaces on both sides, you can use the `str.center()` method.\n\n   ```python\n   original_string = \"TEST\"\n   total_length = 10\n   padded_string = original_string.center(total_length)\n   print(padded_string)  # Output: \"   TEST   \"\n   ```\n\nThese methods allow you to manage the padding of strings without creating a character array manually. You can adjust the `total_length` variable to suit your needs for different cases."
    }
]