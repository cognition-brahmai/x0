[
    {
        "role": "user",
        "content": "How can I define enum values that are functions in Python? I have a situation where I want to enforce and give the user the option of one of a number of select functions, to be passed in as an argument to another function. I want to achieve something like the following:\n\n```python\nfrom enum import Enum\n\n#Trivial Function 1\ndef functionA():\n    pass\n\n#Trivial Function 2\ndef functionB():\n    pass\n\n#This is not allowed (as far as i can tell the values should be integers)\n#But pseudocode for what I am after\nclass AvailableFunctions(Enum):\n    OptionA = functionA\n    OptionB = functionB\n```\nSo I can execute the following:\n\n```python\ndef myUserFunction(theFunction = AvailableFunctions.OptionA):\n   #Type Check\n   assert isinstance(theFunction,AvailableFunctions) \n\n   #Execute the actual function held as value in the enum or equivalent\n   return theFunction.value() \n```"
    },
    {
        "role": "assistant",
        "content": "In Python, you can indeed use functions as values in an `Enum`. You're correct in thinking that the values don't have to be integers; they can be any type of object, including functions. Here's how you can achieve what you're looking for:\n\n```python\nfrom enum import Enum\n\n# Trivial Function 1\ndef functionA():\n    print(\"Function A executed!\")\n\n# Trivial Function 2\ndef functionB():\n    print(\"Function B executed!\")\n\n# Enum class with functions as values\nclass AvailableFunctions(Enum):\n    OptionA = functionA\n    OptionB = functionB\n\n# Function that uses the Enum\ndef myUserFunction(theFunction=AvailableFunctions.OptionA):\n    # Type Check\n    assert isinstance(theFunction, AvailableFunctions)\n\n    # Execute the actual function held as value in the enum\n    return theFunction.value()\n\n# Example usage:\nmyUserFunction()  # This will execute functionA\nmyUserFunction(AvailableFunctions.OptionB)  # This will execute functionB\n```\n\n### Explanation:\n- **Enum Declaration**: You create an `Enum` called `AvailableFunctions` where each member has a function as its value.\n- **Type Checking**: In `myUserFunction`, you ensure that the provided argument is an instance of `AvailableFunctions`.\n- **Function Execution**: You access the function using `theFunction.value()` and call it.\n\nThis setup allows you to pass predefined functions as enum values and execute them flexibly."
    }
]