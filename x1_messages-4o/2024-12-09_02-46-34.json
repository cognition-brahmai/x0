[
    {
        "role": "user",
        "content": "Is there a standard method in numpy to round a list/array of numbers to 'n' significant figures? For example, I have an input array like [0.0, -1.2366e22, 1.2544444e-15, 0.001222] and I want to round all numbers to 2 significant figures. The output should look like [0.00, -1.24e22, 1.25e-15, 1.22e-3]. I have written a function to do this, but I'm interested to know if there's a built-in function for this in numpy."
    },
    {
        "role": "assistant",
        "content": "As of my knowledge cutoff in October 2023, NumPy does not have a built-in function specifically for rounding to a specified number of significant figures. However, you can achieve this by creating a custom function utilizing NumPy's capabilities. Here's an example of how you can implement this:\n\n```python\nimport numpy as np\n\ndef round_to_n_significant_figures(arr, n):\n    # Convert input to a numpy array if it's not already\n    arr = np.array(arr, dtype=np.float64)\n    # Use the logarithm to find the order of magnitude of each element\n    order_of_magnitude = np.floor(np.log10(np.abs(arr)))\n    # Calculate the scale factor for rounding\n    scale = np.power(10, order_of_magnitude - n + 1)\n    # Round the array using the scale factor\n    rounded = np.round(arr / scale) * scale\n    return rounded\n\n# Example usage\ninput_array = [0.0, -1.2366e22, 1.2544444e-15, 0.001222]\noutput_array = round_to_n_significant_figures(input_array, 2)\nprint(output_array)\n```\n\nThis function works by first calculating the order of magnitude for each element in the array. It then uses this to determine an appropriate scaling factor to apply before rounding, ensuring that the rounding is done to the desired number of significant figures. After rounding, it scales the numbers back to their original magnitude.\n\nUsing this approach will give you the desired result of rounding each number to the specified number of significant figures."
    }
]