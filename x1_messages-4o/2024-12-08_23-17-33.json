[
    {
        "role": "user",
        "content": "How can I use Swift code to search for files containing specific keywords within a directory and its subdirectories? Can you provide a sample code snippet?\nHere's a sample Swift code snippet that uses FileManager and recursion to search for files with a specific keyword:\nfunc searchFiles(keyword: String, directory: URL) {\n    let fileManager = FileManager.default\n    \n    guard let files = try? fileManager.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil) else { return }\n    \n    for file in files {\n        if file.pathExtension == keyword {\n            print(\"Found file: \\(file.lastPathComponent)\")\n        }\n        \n        var isDirectory: ObjCBool = false\n        if fileManager.fileExists(atPath: file.path, isDirectory: &isDirectory), isDirectory.boolValue {\n            searchFiles(keyword: keyword, directory: file)\n        }\n    }\n}\n// Example usage\nlet directory = URL(fileURLWithPath: \"/path/to/directory\")\nsearchFiles(keyword: \"txt\", directory: directory)"
    },
    {
        "role": "assistant",
        "content": "The provided Swift code snippet is a basic implementation to search for files with a specific extension (e.g., \"txt\") within a directory and its subdirectories using recursion. However, it seems like you want to find files containing specific keywords, not just based on their file extension. To achieve this, you'll need to read the contents of each file and check if it contains the keyword.\n\nHere's an updated version of the code to search for files containing a specific keyword in their content:\n\n```swift\nimport Foundation\n\nfunc searchFilesContainingKeyword(keyword: String, directory: URL) {\n    let fileManager = FileManager.default\n    \n    guard let files = try? fileManager.contentsOfDirectory(at: directory, includingPropertiesForKeys: nil, options: [.skipsHiddenFiles]) else { return }\n    \n    for file in files {\n        var isDirectory: ObjCBool = false\n        if fileManager.fileExists(atPath: file.path, isDirectory: &isDirectory) {\n            if isDirectory.boolValue {\n                // Recurse into subdirectory\n                searchFilesContainingKeyword(keyword: keyword, directory: file)\n            } else {\n                do {\n                    let fileContent = try String(contentsOf: file, encoding: .utf8)\n                    if fileContent.contains(keyword) {\n                        print(\"Found keyword in file: \\(file.lastPathComponent)\")\n                    }\n                } catch {\n                    print(\"Unable to read file: \\(file.lastPathComponent)\")\n                }\n            }\n        }\n    }\n}\n\n// Example usage\nlet directory = URL(fileURLWithPath: \"/path/to/directory\")\nsearchFilesContainingKeyword(keyword: \"your_keyword_here\", directory: directory)\n```\n\n### Explanation:\n- **FileManager**: Used to access the file system and list directory contents.\n- **contentsOfDirectory(at:includingPropertiesForKeys:options:)**: Fetches the contents of the specified directory, skipping hidden files.\n- **fileExists(atPath:isDirectory:)**: Checks if the file path points to a directory or a regular file.\n- **String(contentsOf:encoding:)**: Reads the contents of each file as a string, using UTF-8 encoding.\n- **contains(keyword)**: Checks if the file content contains the specified keyword.\n\nRemember to replace `\"/path/to/directory\"` with the path to the directory you want to search in, and `\"your_keyword_here\"` with the keyword you want to search for."
    }
]