[
    {
        "role": "user",
        "content": "Is there a method to make {% extends '...' %} conditional in Django? I am trying to share a template between AJAX and regular HTTP calls. The only difference is that one template needs to be served with the base.html html, the other one without. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can make the `{% extends '...' %}` tag conditional by using different templates for AJAX and regular HTTP calls. While Django's template language doesn't support conditional logic directly within the `{% extends %}` tag itself, you can achieve this by using a combination of view logic and template inheritance.\n\nHere's a general approach you can take:\n\n1. **Create Separate Templates:**\n   - Create two separate templates: one that extends `base.html` and one that does not.\n\n   For example:\n   - `template_with_base.html`:\n     ```html\n     {% extends 'base.html' %}\n     {% block content %}\n     <!-- Your content here -->\n     {% endblock %}\n     ```\n\n   - `template_without_base.html`:\n     ```html\n     <!-- Your content here -->\n     ```\n\n2. **Modify Your View Logic:**\n   - In your Django view, check if the request is an AJAX request or a regular HTTP request. You can do this using `request.is_ajax()` method in Django (for versions prior to 3.1), or by inspecting the `HTTP_X_REQUESTED_WITH` header (for Django 3.1 onwards).\n\n   ```python\n   from django.shortcuts import render\n\n   def my_view(request):\n       if request.headers.get('x-requested-with') == 'XMLHttpRequest':\n           # It's an AJAX request\n           template_name = 'template_without_base.html'\n       else:\n           # It's a regular HTTP request\n           template_name = 'template_with_base.html'\n\n       # Add any context you need to pass to the template\n       context = {\n           # Your context data\n       }\n\n       return render(request, template_name, context)\n   ```\n\n3. **Use the Appropriate Template:**\n   - By setting `template_name` based on the type of request, you can render the appropriate template.\n\nThis way, you can serve an AJAX request without the base HTML wrapper and a regular HTTP request with it, by leveraging Django's view logic to choose the correct template to render."
    }
]