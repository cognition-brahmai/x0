[
    {
        "role": "user",
        "content": "What is the code to find all the prime numbers up to a given number?"
    },
    {
        "role": "assistant",
        "content": "To find all prime numbers up to a given number, you can use the Sieve of Eratosthenes algorithm, which is an efficient way to identify all prime numbers up to a specified integer. Below is a simple implementation in Python:\n\n```python\ndef sieve_of_eratosthenes(n):\n    primes = []\n    # Initialize a boolean array with True values\n    is_prime = [True] * (n + 1)\n    # 0 and 1 are not primes\n    is_prime[0] = is_prime[1] = False\n    \n    for number in range(2, n + 1):\n        if is_prime[number]:\n            primes.append(number)\n            # Mark all multiples of the number as not prime\n            for multiple in range(number * number, n + 1, number):\n                is_prime[multiple] = False\n    \n    return primes\n\n# Example usage:\nn = 50\nprime_numbers = sieve_of_eratosthenes(n)\nprint(f\"Prime numbers up to {n}: {prime_numbers}\")\n```\n\nThis code defines a function `sieve_of_eratosthenes` that takes an integer `n` and returns a list of all prime numbers up to `n`. It uses a boolean list `is_prime` to keep track of prime numbers, marking non-prime numbers as `False`. It iterates from 2 to `n`, and for each prime number found, it marks all its multiples as non-prime."
    }
]