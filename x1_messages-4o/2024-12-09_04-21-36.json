[
    {
        "role": "user",
        "content": "I have a Python script which uses a counter in a for loop to draw a menu and highlight a selected index. I've initialized the counter with \"counter = 0\" and increment it within the loop. Is there any other efficient Pythonic way to get access to a loop counter? I'm currently using Python 2.5, but I'd be interested in solutions for Python 2.6 or higher as well. Here is my current implementation:\n\n```python\n# Draw all the options, but highlight the selected index\ndef draw_menu(options, selected_index):\n    counter = 0\n    for option in options:\n        if counter == selected_index:\n            print \" [*] %s\" % option\n        else:\n            print \" [ ] %s\" % option\n        counter += 1\n\noptions = ['Option 0', 'Option 1', 'Option 2', 'Option 3']\ndraw_menu(option, 2) # Draw menu with \"Option2\" selected\n```\n\nWhen run, it outputs:\n\n```python\n [ ] Option 0\n [ ] Option 1\n [*] Option 2\n [ ] Option 3\n```"
    },
    {
        "role": "assistant",
        "content": "In Python, you can use the `enumerate` function to iterate over a list while also keeping track of the index, which makes your code cleaner and more Pythonic. This function is available in Python 2.6 and above, so it would be suitable for your future use if you upgrade.\n\nHere's how you can modify your `draw_menu` function using `enumerate`:\n\n```python\n# Draw all the options, but highlight the selected index\ndef draw_menu(options, selected_index):\n    for counter, option in enumerate(options):\n        if counter == selected_index:\n            print \" [*] %s\" % option\n        else:\n            print \" [ ] %s\" % option\n\noptions = ['Option 0', 'Option 1', 'Option 2', 'Option 3']\ndraw_menu(options, 2)  # Draw menu with \"Option 2\" selected\n```\n\nWith this change, the `enumerate` function automatically provides the index (`counter`) and the element (`option`) for each iteration of the loop, eliminating the need to manually initialize and increment a counter. This makes the code cleaner and more efficient."
    }
]