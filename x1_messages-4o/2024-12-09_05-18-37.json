[
    {
        "role": "user",
        "content": "How can I automatically generate labels on curves in Matplotlib? Currently, I have to manually specify the coordinates for labels and reposition them whenever I re-format the plot. As an additional requirement, is it possible to orient the text at an angle corresponding to the angle of the curve?\n\nFor context, here are my current implementations:\n\nFor legends:\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef example_legend():\n    plt.clf()\n    x = np.linspace(0, 1, 101)\n    y1 = np.sin(x * np.pi / 2)\n    y2 = np.cos(x * np.pi / 2)\n    plt.plot(x, y1, label='sin')\n    plt.plot(x, y2, label='cos')\n    plt.legend()\n```\nFor inline labels:\n```python\ndef example_inline():\n    plt.clf()\n    x = np.linspace(0, 1, 101)\n    y1 = np.sin(x * np.pi / 2)\n    y2 = np.cos(x * np.pi / 2)\n    plt.plot(x, y1, label='sin')\n    plt.plot(x, y2, label='cos')\n    plt.text(0.08, 0.2, 'sin')\n    plt.text(0.9, 0.2, 'cos')\n```"
    },
    {
        "role": "assistant",
        "content": "To automatically generate labels on curves in Matplotlib and align them with the curve's angle, you can use a library like `mplcursors` for interactive labeling, or `matplotlib`'s own annotation capabilities with some custom logic to determine label placement and orientation.\n\nHere's an example of how you can use annotations to place labels along the curve with an orientation that matches the curve's angle at that point:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef example_auto_labels():\n    plt.clf()\n    x = np.linspace(0, 1, 101)\n    y1 = np.sin(x * np.pi / 2)\n    y2 = np.cos(x * np.pi / 2)\n\n    # Plot the curves\n    line1, = plt.plot(x, y1, label='sin')\n    line2, = plt.plot(x, y2, label='cos')\n\n    # Function to automatically label and orient the text\n    def label_line(line, x_pos, label=None, align=True):\n        x_data = line.get_xdata()\n        y_data = line.get_ydata()\n\n        if x_pos < x_data[0] or x_pos > x_data[-1]:\n            raise ValueError(\"x_pos is out of the line's x-data range\")\n\n        # Find the index closest to x_pos\n        index = np.searchsorted(x_data, x_pos)\n        x = x_data[index]\n        y = y_data[index]\n\n        if label is None:\n            label = line.get_label()\n\n        if align:\n            # Calculate the angle of the line at the point\n            dx = x_data[index + 1] - x_data[index - 1]\n            dy = y_data[index + 1] - y_data[index - 1]\n            angle = np.degrees(np.arctan2(dy, dx))\n        else:\n            angle = 0\n\n        # Annotate the plot\n        plt.annotate(label, xy=(x, y), xytext=(-10, 10), textcoords='offset points',\n                     arrowprops=dict(arrowstyle=\"->\"), fontsize=10,\n                     rotation=angle, rotation_mode='anchor')\n\n    # Label the lines\n    label_line(line1, 0.25)\n    label_line(line2, 0.75)\n\n    # Display the plot\n    plt.show()\n\nexample_auto_labels()\n```\n\n### Key Points:\n- **x_pos**: Choose `x_pos` such that it is within the range of your x-data to place the label.\n- **Index Calculation**: `np.searchsorted` is used to find the index closest to `x_pos` to effectively determine where to place the label.\n- **Angle Calculation**: The angle is calculated based on the slope between two points on the line near `x_pos`.\n- **Annotation**: The `plt.annotate` function is used to place and orient the label on the plot.\n\nThis code provides a basic implementation. You might need to adjust the positioning and orientation logic depending on the specifics of your plot and how the curves behave."
    }
]