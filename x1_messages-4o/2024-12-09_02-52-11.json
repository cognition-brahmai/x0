[
    {
        "role": "user",
        "content": "How can I select rows from a pandas DataFrame based on multiple column values?\n\nI have a pandas DataFrame, df, which is defined and looks like this when printed:\n\n```python\nimport pandas as pd\n\ndata = {\"Name\": [\"AAAA\", \"BBBB\"],\n        \"C1\": [25, 12],\n        \"C2\": [2, 1],\n        \"C3\": [1, 10]}\n\ndf = pd.DataFrame(data)\ndf.set_index(\"Name\")\n\n      C1  C2  C3\nName            \nAAAA  25   2   1\nBBBB  12   1  10\n```\n\nI would like to select rows where the values of columns \"C1\", \"C2\", and \"C3\" are between 0 and 20. Could you suggest an elegant method to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can achieve this by using boolean indexing in pandas. You can create a boolean mask for each condition and then combine them using the `&` (and) operator. Here's how you can select rows where the values of columns \"C1\", \"C2\", and \"C3\" are between 0 and 20:\n\n```python\nimport pandas as pd\n\ndata = {\"Name\": [\"AAAA\", \"BBBB\"],\n        \"C1\": [25, 12],\n        \"C2\": [2, 1],\n        \"C3\": [1, 10]}\n\ndf = pd.DataFrame(data)\ndf.set_index(\"Name\", inplace=True)\n\n# Create a boolean mask for each column condition\nmask = (df['C1'] > 0) & (df['C1'] < 20) & \\\n       (df['C2'] > 0) & (df['C2'] < 20) & \\\n       (df['C3'] > 0) & (df['C3'] < 20)\n\n# Select rows based on the combined mask\nfiltered_df = df[mask]\n\nprint(filtered_df)\n```\n\nIn this example, the mask is created by checking if each column's values are within the specified range. The combined mask is then used to filter the DataFrame `df`, resulting in `filtered_df` that contains only the rows where all conditions are met."
    }
]