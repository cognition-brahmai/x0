[
    {
        "role": "user",
        "content": "How can I return custom JSON in Django REST Framework using the get_queryset method? I want to return a specific JSON content when the request method is \"GET\". However, when I try to do this, I always get a 404 error in response. Here is my code: \n\n```python\nclass TestViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Test.objects.all()\n    serializer_class = TestSerializer\n\n    def get_queryset(self):\n        if self.request.method == \"GET\":\n            content = {'user_count': '2'}\n            return HttpResponse(json.dumps(content), content_type='application/json')\n```\n\nWhen I delete everything starting from `def`, I get the correct response with standard JSON data. What might be my mistake?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is due to a misunderstanding of how the `get_queryset` method is supposed to function within Django REST Framework (DRF). The `get_queryset` method is intended to return a queryset, not a response object. If you want to return a custom JSON response for a GET request, you need to override the `list` method instead, which is responsible for handling GET requests on a ViewSet.\n\nHere's how you can modify your code to return a custom JSON response:\n\n```python\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom rest_framework import viewsets\nfrom .models import Test\nfrom .serializers import TestSerializer\n\nclass TestViewSet(viewsets.ModelViewSet):\n    \"\"\"\n    API endpoint that allows groups to be viewed or edited.\n    \"\"\"\n    queryset = Test.objects.all()\n    serializer_class = TestSerializer\n\n    def list(self, request, *args, **kwargs):\n        # Check if the request method is GET\n        if request.method == \"GET\":\n            # Return the custom JSON response\n            content = {'user_count': '2'}\n            return Response(content, status=status.HTTP_200_OK)\n        \n        # Call the parent class's list method for default behavior\n        return super().list(request, *args, **kwargs)\n```\n\n### Key Points:\n\n1. **Override `list` Method**: The `list` method is specifically for handling GET requests for listing objects, making it the appropriate place to customize the response.\n\n2. **Use `Response`**: Use `Response` from `rest_framework.response` to return JSON data, which is the standard way in DRF. This automatically handles content-type and serialization.\n\n3. **Preserve Default Behavior**: If you still want the default behavior for other GET requests (e.g., with different parameters), ensure to call `super().list(request, *args, **kwargs)` when your custom condition isn't met.\n\nBy following these steps, you should be able to return your custom JSON response without encountering a 404 error."
    }
]