[
    {
        "role": "user",
        "content": "How can I use Python to recursively search through a directory, including its subdirectories, for text files and replace every occurrence of {$replace} within the files with the contents of a multi line string? So far, I have a recursive code using os.walk to get a list of files that need to be changed. Here is what I have so far:\n\n```python\nimport os\nimport sys\nfileList = []\nrootdir = \"C:\\\\test\"\nfor root, subFolders, files in os.walk(rootdir):\n  if subFolders != \".svn\":\n    for file in files:\n      fileParts = file.split('.')\n      if len(fileParts) > 1:\n        if fileParts[1] == \"php\":\n          fileList.append(os.path.join(root,file))\nprint fileList\n```"
    },
    {
        "role": "assistant",
        "content": "To extend your script to search for text files and replace occurrences of `{$replace}` with a multi-line string, you can use Python's built-in file handling and string manipulation functions. Below is a modified version of your script that accomplishes this:\n\n```python\nimport os\n\ndef replace_text_in_file(file_path, target, replacement):\n    # Read the file content\n    with open(file_path, 'r', encoding='utf-8') as file:\n        content = file.read()\n\n    # Replace target string with replacement string\n    new_content = content.replace(target, replacement)\n\n    # Write the modified content back to the file\n    with open(file_path, 'w', encoding='utf-8') as file:\n        file.write(new_content)\n\ndef find_and_replace_in_files(rootdir, target, replacement):\n    for root, subFolders, files in os.walk(rootdir):\n        if \".svn\" not in subFolders:\n            for file in files:\n                fileParts = file.split('.')\n                if len(fileParts) > 1 and fileParts[1] == \"txt\":  # Consider only text files\n                    file_path = os.path.join(root, file)\n                    replace_text_in_file(file_path, target, replacement)\n\n# Specify the directory to search\nrootdir = \"C:\\\\test\"\n\n# Define the target string and the replacement content\ntarget_string = \"{$replace}\"\nreplacement_content = \"\"\"This is a\nmulti-line string\nthat will replace\nthe target string.\"\"\"\n\n# Perform the find and replace operation\nfind_and_replace_in_files(rootdir, target_string, replacement_content)\n```\n\n### Explanation:\n\n1. **Function `replace_text_in_file`:** This function opens a file, reads its content, replaces occurrences of the target string with the replacement string, and writes the modified content back to the file.\n\n2. **Function `find_and_replace_in_files`:** This function iterates over the directory tree using `os.walk`, checks for text files (you can adjust the file extension as needed), and calls `replace_text_in_file` for each file.\n\n3. **File Extension Check:** The script checks if the file has a `.txt` extension. You can change this to other extensions as needed or include multiple extensions.\n\n4. **Encoding:** The script assumes UTF-8 encoding for reading and writing files. Adjust the encoding if your files use a different encoding.\n\n5. **Replacement Content:** The replacement is defined as a multi-line string and replaces every occurrence of `{$replace}` in the text files.\n\nMake sure to create backups of your files before running such scripts, as this operation will overwrite the original files."
    }
]