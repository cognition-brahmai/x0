[
    {
        "role": "user",
        "content": "How can I modify my Python program which uses argparse to only allow positive integers? Currently, my program doesn't blow up on non-positive integers but I want the user to be informed that a non-positive integer is invalid. Here is my current code:\n\n```python\nimport argparse\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-g\", \"--games\", type=int, default=162,\n                    help=\"The number of games to simulate\")\nargs = parser.parse_args()\n```\nI want to trap the error at the argparse level and print an error message similar to below if a non-positive integer is entered:\n\n```python\npython simulate_many.py -g -2\nusage: simulate_many.py [-h] [-g GAMES] [-d] [-l LEAGUE]\nsimulate_many.py: error: argument -g/--games: invalid positive int value: '-2'\n```\nFor the time being, I'm using this solution, but I'm not entirely satisfied with it:\n\n```python\nif args.games <= 0:\n    parser.print_help()\n    print \"-g/--games: must be positive.\"\n    sys.exit(1)\n```"
    },
    {
        "role": "assistant",
        "content": "To enforce the requirement that the `--games` argument must be a positive integer directly in the `argparse` level, you can define a custom type function within the `argparse` setup. This type function will validate the input and raise an exception if the input is not a positive integer. Here's how you can modify your script:\n\n```python\nimport argparse\n\ndef positive_int(value):\n    try:\n        ivalue = int(value)\n    except ValueError:\n        raise argparse.ArgumentTypeError(f\"invalid int value: '{value}'\")\n    if ivalue <= 0:\n        raise argparse.ArgumentTypeError(f\"invalid positive int value: '{value}'\")\n    return ivalue\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-g\", \"--games\", type=positive_int, default=162,\n                    help=\"The number of games to simulate\")\nargs = parser.parse_args()\n```\n\n### Explanation:\n\n1. **Custom Type Function (`positive_int`)**:\n   - This function attempts to convert the input `value` into an integer.\n   - It raises an `ArgumentTypeError` with a descriptive message if the conversion fails (invalid integer) or if the integer is not positive.\n\n2. **Integration with `argparse`**:\n   - The `positive_int` function is used as the `type` for the `--games` argument.\n   - This ensures that any invalid input will be caught at the argument parsing stage, providing a clear error message and preventing the program from proceeding with invalid input.\n\nBy using this approach, you maintain clean and efficient error handling directly within `argparse`, improving the user experience by providing immediate and specific feedback on input errors."
    }
]