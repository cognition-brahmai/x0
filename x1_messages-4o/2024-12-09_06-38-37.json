[
    {
        "role": "user",
        "content": "In Python, how can I obtain a datetime object representative of '3 years ago today'? I am not particularly concerned about extreme accuracy; for instance, if today is February 29th, I would be satisfied with either February 28th or March 1st as the resultant date. What I value more in this case is brevity over configurability."
    },
    {
        "role": "assistant",
        "content": "To obtain a datetime object representing '3 years ago today' in Python, you can use the `datetime` module along with the `relativedelta` function from the `dateutil` library, which makes it easy to manipulate dates.\n\nHere's a simple way to achieve this:\n\n```python\nfrom datetime import datetime\nfrom dateutil.relativedelta import relativedelta\n\n# Get today's date\ntoday = datetime.today()\n\n# Subtract 3 years using relativedelta\nthree_years_ago = today - relativedelta(years=3)\n\nprint(\"Today's date:\", today)\nprint(\"Date three years ago:\", three_years_ago)\n```\n\nThis code snippet will output the current date and the date three years prior, taking into account typical date adjustments such as leap years. If you don't have the `dateutil` library installed, you can install it using pip:\n\n```bash\npip install python-dateutil\n```\n\nThis approach provides brevity and handles most of the common edge cases in date calculations."
    }
]