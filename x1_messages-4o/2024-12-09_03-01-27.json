[
    {
        "role": "user",
        "content": "How can I modify the output name of a dynamically loaded library in CMake? I am trying to write CMake rules to build a dynamically loaded library for Python using boost.python on Linux. I would like to use 'foo' as the Python module name, so the library must be called 'foo.so'. However, by default, CMake uses standard rules for library naming, so when I write 'add_library(foo foo.cpp)', I get 'libfoo.so' as the output. Even when using 'set_target_properties(foo PROPERTIES OUTPUT_NAME \"foobar\")', it creates 'libfoobar.so'. How can I change this behavior?"
    },
    {
        "role": "assistant",
        "content": "In CMake, the default behavior for naming shared libraries is to prepend 'lib' to the library name, which is standard on many UNIX-like systems. To override this behavior and control the exact output name of your dynamically loaded library (e.g., for a Python module), you will need to modify the `OUTPUT_NAME` property and also handle the prefix and suffix explicitly.\n\nHere's how you can achieve this:\n\n1. **Set the `OUTPUT_NAME` property**: You're already doing this, but it only changes the name part, not the prefix or suffix.\n\n2. **Set `PREFIX` and `SUFFIX` properties**: You need to explicitly set these properties to empty strings to remove the default 'lib' prefix and '.so' suffix.\n\nHere's an example of how you can modify your CMakeLists.txt:\n\n```cmake\ncmake_minimum_required(VERSION 3.0)\nproject(MyPythonModule)\n\n# Find the Boost Python component\nfind_package(Boost REQUIRED COMPONENTS python)\n\n# Add your library\nadd_library(foo MODULE foo.cpp)\n\n# Specify include directories\ntarget_include_directories(foo PRIVATE ${Boost_INCLUDE_DIRS})\n\n# Link against Boost.Python\ntarget_link_libraries(foo PRIVATE ${Boost_LIBRARIES})\n\n# Set properties to remove 'lib' prefix and '.so' suffix\nset_target_properties(foo PROPERTIES\n    PREFIX \"\"\n    SUFFIX \".so\"\n    OUTPUT_NAME \"foo\"\n)\n```\n\n### Explanation:\n\n- **`add_library(foo MODULE foo.cpp)`**: The `MODULE` keyword is used here to create a library specifically intended for runtime loading, similar to a plugin or a Python module.\n\n- **`PREFIX \"\"` and `SUFFIX \".so\"`**: By setting the `PREFIX` to an empty string and specifying the `SUFFIX` as \".so\", you ensure that the output file is named exactly as specified in `OUTPUT_NAME`, with no default prefix or suffix added.\n\n- **Output Name**: This setup will generate an output file named `foo.so`, which matches the naming convention used for Python modules.\n\nThis configuration should result in the desired output file name `foo.so`, suitable for use as a Python module without the default library naming conventions interfering."
    }
]