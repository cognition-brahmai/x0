[
    {
        "role": "user",
        "content": "In a Python project, I am trying to use the built-in debugger in Visual Studio Code to step into the code of functions from other libraries during execution. I am aware that it is possible to do this for functions implemented in standard libraries by adding \"debugOptions\": [\"DebugStdLib\"] to my configuration in launch.json, as mentioned in the VSCode Python debugging documentation. However, I am unable to force the debugger to step into the code of non-standard modules, such as the ones I have written myself and imported into the current file. How can I accomplish this?"
    },
    {
        "role": "assistant",
        "content": "To step into the code of non-standard modules, such as custom modules you've written and imported, while using the built-in debugger in Visual Studio Code, you can follow these steps:\n\n1. **Ensure Source Code Availability**: Make sure the source code of the module you want to step into is available and accessible. If it's a custom module you wrote, this should already be the case.\n\n2. **Set Breakpoints**: Set breakpoints in your custom module where you want the debugger to pause. This can be done by opening the module file and clicking in the gutter (the space to the left of the line numbers) where you want the breakpoint.\n\n3. **Configure launch.json**: Ensure your `launch.json` is set up correctly. Typically, you won't need specific configurations beyond what you've already done for standard libraries. However, make sure the path to your module is included in the `PYTHONPATH` if necessary. Here is a basic configuration:\n\n   ```json\n   {\n     \"version\": \"0.2.0\",\n     \"configurations\": [\n       {\n         \"name\": \"Python: Current File\",\n         \"type\": \"python\",\n         \"request\": \"launch\",\n         \"program\": \"${file}\",\n         \"console\": \"integratedTerminal\",\n         \"justMyCode\": false\n       }\n     ]\n   }\n   ```\n\n   The key here is setting `\"justMyCode\": false`, which tells the debugger to not skip over non-user code.\n\n4. **Use the 'Step Into' Feature**: When debugging, use the \"Step Into\" feature (often represented by a downward arrow icon) to enter function calls. This should allow you to step into functions in your custom modules.\n\n5. **Check for Optimization**: If the debugger skips over code unexpectedly, ensure that there is no bytecode optimization happening (which sometimes occurs with `.pyo` or `.pyc` files). You might want to clean up these files to ensure the debugger uses the source `.py` files.\n\n6. **Debugging Environment**: Make sure the environment you're using for debugging is the same where the code is running. Sometimes differences in environments can lead to unexpected behavior.\n\nBy following these steps, you should be able to step into the code of your custom modules using the Visual Studio Code debugger. If you encounter issues, ensure there are no syntax errors or other problems in your custom modules that could interfere with debugging."
    }
]