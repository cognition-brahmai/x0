[
    {
        "role": "user",
        "content": "How can I extract the HTTP Error code from a requests.exceptions.HTTPError in Python? I am currently catching exceptions in the following way:\n\n```python\ndef get_url_fp(image_url, request_kwargs=None):\n    response = requests.get(some_url, **request_kwargs)\n    response.raise_for_status()\n    return response.raw\n\ntry:\n   a = \"http://example.com\"\n   fp = get_url_fp(a)\n\nexcept HTTPError as e:\n    # Need to check its an 404, 503, 500, 403 etc.\n```\n\nHowever, I am unsure on how to extract the HTTP Error code from these exceptions."
    },
    {
        "role": "assistant",
        "content": "To extract the HTTP error code from a `requests.exceptions.HTTPError`, you can access the `response` attribute of the exception object. This attribute contains the HTTP response that triggered the exception, and from it, you can get the status code. Here's how you can modify your code to extract the error code:\n\n```python\nimport requests\nfrom requests.exceptions import HTTPError\n\ndef get_url_fp(image_url, request_kwargs=None):\n    response = requests.get(image_url, **(request_kwargs or {}))\n    response.raise_for_status()\n    return response.raw\n\ntry:\n    a = \"http://example.com\"\n    fp = get_url_fp(a)\n\nexcept HTTPError as e:\n    # Extract the HTTP error code\n    error_code = e.response.status_code\n    print(f\"HTTP Error Code: {error_code}\")\n    # Handle specific error codes if needed\n    if error_code == 404:\n        print(\"Resource not found.\")\n    elif error_code == 503:\n        print(\"Service unavailable.\")\n    elif error_code == 500:\n        print(\"Internal server error.\")\n    elif error_code == 403:\n        print(\"Forbidden access.\")\n    # Add more error handling as needed\n```\n\nIn this code snippet, when an `HTTPError` is caught, `e.response.status_code` is used to extract the HTTP status code. You can then use this code to implement specific logic based on the error code."
    }
]