[
    {
        "role": "user",
        "content": "I am trying to build a Python package using `conda-build`. Currently, my structure looks like this:\n```\n- my_recipe/\n    - meta.yaml\n    - build.sh\n```\nAnd my `meta.yaml` looks like:\n```\npackage:\n  name: my_pkg\nversion: \"0.2.0\"\n\nsource:\n  path: ../my_pkg\n\nrequirements:\n  build:\n    - python\n    - setuptools\n  run:\n    - python\n    - pandas\n    - numpy\n    - plotly\n    - matplotlib\n    - pyqtgraph\n    - pyopengl\n    - gdal\n    - scipy\n    - scikit-image\n```\nWhen I run `conda-build my_recipe/`, the package builds correctly and it also installs successfully when I execute `conda install -n my_env --use-local ~/miniconda3/envs/my_env/conda-bld/linux-64/my_pkg-0.2.0-py36_0.tar.bz2`. However, none of the dependencies listed under `run` seem to be installed along with the package. For instance, when I import the package in Python, it says that `pandas` could not be found. I am wondering if my dependencies are listed in the correct location and also if I need to list the dependencies in `setup.py` too. The documentation is not very clear on where this information should be. Can someone clarify this?"
    },
    {
        "role": "assistant",
        "content": "When building a package with `conda-build`, it's important to ensure that the dependencies are correctly specified in the `meta.yaml` file. The `run` section is indeed the right place to list the runtime dependencies. If these dependencies are not being installed, there are a few things you can check and try:\n\n1. **Check YAML Indentation**: YAML files are sensitive to indentation, so ensure that the indentation is correct in your `meta.yaml` file. The `requirements` section should look like this:\n\n   ```yaml\n   requirements:\n     build:\n       - python\n       - setuptools\n     run:\n       - python\n       - pandas\n       - numpy\n       - plotly\n       - matplotlib\n       - pyqtgraph\n       - pyopengl\n       - gdal\n       - scipy\n       - scikit-image\n   ```\n\n2. **Verify Package Installation**: Make sure that when you run `conda install`, it's actually pulling the package from your local build and not from another channel. You can force it to use your local package with the `--use-local` flag, which you've done. However, double-check that there are no typos in the path or the package name.\n\n3. **Check Conda Environment**: Ensure that you're activating the correct conda environment (`my_env`) where you expect the dependencies to be installed. You can activate it using:\n   ```bash\n   conda activate my_env\n   ```\n\n4. **Use `conda list`**: After installation, use `conda list` to see if the dependencies are listed in the environment. This command will show all installed packages in the current environment.\n\n5. **Inspect Build Logs**: Examine the build logs that `conda-build` generates to ensure that there are no errors or warnings related to dependencies.\n\n6. **Check Output**: After installing the package, check the output to see if there are any messages indicating why dependencies might not have been installed.\n\n7. **Setup.py Dependencies**: While `conda-build` primarily uses the `meta.yaml` for dependency management, if your package is also intended to be installed with `pip`, you should list runtime dependencies in `setup.py` under `install_requires`. This is not necessary for `conda-build`, but it's good practice if you want to distribute your package via PyPI as well.\n\n   ```python\n   from setuptools import setup\n\n   setup(\n       name='my_pkg',\n       version='0.2.0',\n       install_requires=[\n           'pandas',\n           'numpy',\n           'plotly',\n           'matplotlib',\n           'pyqtgraph',\n           'pyopengl',\n           'gdal',\n           'scipy',\n           'scikit-image',\n       ],\n   )\n   ```\n\n8. **Check for Dependency Conflicts**: Sometimes, dependency conflicts can cause certain packages not to be installed. Ensure there are no version conflicts with existing packages in your environment.\n\nIf after these checks the issue persists, you might want to try creating a new conda environment and installing your package there to see if it makes any difference."
    }
]