[
    {
        "role": "user",
        "content": "How can I change the default port that `manage.py runserver` listens on in Django? I want to specify this in a `config.ini` file. Is there a simpler solution than parsing `sys.argv` inside `manage.py` and inserting the configured port? My aim is to run `./manage.py runserver` without having to specify the address and port each time, instead having it take the arguments from the `config.ini`."
    },
    {
        "role": "assistant",
        "content": "To achieve this, you can modify the `manage.py` file to read the port configuration from a `config.ini` file. This way, you won't have to specify the port each time you run the `runserver` command. Here\u2019s a step-by-step guide to implementing this solution:\n\n1. **Create a `config.ini` file**: Place this file in your Django project root directory, and define the port configuration. For example:\n\n   ```ini\n   [server]\n   port = 8001\n   ```\n\n2. **Modify `manage.py` to read from `config.ini`**:\n\n   You can use Python\u2019s `configparser` module to read the configuration file. Update your `manage.py` like this:\n\n   ```python\n   # manage.py\n   import os\n   import sys\n   import configparser\n\n   def main():\n       \"\"\"Run administrative tasks.\"\"\"\n       os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n\n       # Read port from config.ini\n       config = configparser.ConfigParser()\n       config.read('config.ini')\n       port = config.get('server', 'port', fallback='8000')  # Defaulting to 8000 if not set\n\n       try:\n           from django.core.management import execute_from_command_line\n           sys.argv.append(port)\n           execute_from_command_line(sys.argv)\n       except ImportError as exc:\n           raise ImportError(\n               \"Couldn't import Django. Are you sure it's installed and \"\n               \"available on your PYTHONPATH environment variable? Did you \"\n               \"forget to activate a virtual environment?\"\n           ) from exc\n\n   if __name__ == '__main__':\n       main()\n   ```\n\n3. **Run your server**:\n\n   After making these changes, you can start your server using:\n\n   ```bash\n   ./manage.py runserver\n   ```\n\n   With this setup, `manage.py` will automatically read the port from `config.ini` and pass it to the `runserver` command.\n\nThis approach cleanly separates configuration from code, allowing you to change the port without modifying your Python scripts directly. Additionally, using the `fallback` parameter in `config.get()` ensures that if the `config.ini` file is missing or the port is not set, Django will still default to port 8000."
    }
]