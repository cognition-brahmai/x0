[
    {
        "role": "user",
        "content": "How can I use the values stored in variables as case patterns in the new structural pattern matching syntax in Python 3.10? I've been trying to refactor my code to move values to module-level variables, but that results in a SyntaxError. Here's the code and the error I'm getting:\n\n```python\nSUCCESS = 200\nNOT_FOUND = 404\n\ndef handle(retcode):\n    match retcode:\n        case SUCCESS:\n            print('success')\n        case NOT_FOUND:\n            print('not found')\n        case _:\n            print('unknown')\n\nhandle(404)\n#  File \"<ipython-input-2-fa4ae710e263>\", line 6\n#    case SUCCESS:\n#         ^\n# SyntaxError: name capture 'SUCCESS' makes remaining patterns unreachable\n```\n\nSo, is there any way to use the match statement to match values that are stored within variables?"
    },
    {
        "role": "assistant",
        "content": "In Python 3.10, the new structural pattern matching syntax indeed introduces a new way of handling control flow. However, when using pattern matching with the `match` statement, the values used in `case` patterns must be constants or literals, not variables, unless you use a workaround like using a guard.\n\nWhen you directly use a variable in a `case` pattern, Python interprets it as a variable capture pattern, which means it will always match and bind the variable to the matched value, making subsequent patterns unreachable.\n\nTo match against values stored in variables, you can use a guard with an `if` condition within the `case` clause. Here's how you can modify your code to use the values stored in variables:\n\n```python\nSUCCESS = 200\nNOT_FOUND = 404\n\ndef handle(retcode):\n    match retcode:\n        case _ if retcode == SUCCESS:\n            print('success')\n        case _ if retcode == NOT_FOUND:\n            print('not found')\n        case _:\n            print('unknown')\n\nhandle(404)\n```\n\nIn this modified version, each `case` utilizes a guard (`if` condition) to compare the `retcode` against the constants `SUCCESS` and `NOT_FOUND`. This allows you to achieve the desired behavior while avoiding the `SyntaxError`."
    }
]