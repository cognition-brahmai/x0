[
    {
        "role": "user",
        "content": "How can I limit the size of a dictionary in Python to a specific number of key/value pairs (X)? If the dictionary is already storing X key/value pairs and I execute an insertion, I would like one of the existing pairs to be eliminated. Ideally, the least recently inserted or accessed key should be removed, but this is not an absolute requirement. Is there a solution for this in the standard library?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can achieve the behavior of limiting a dictionary to a specific size while removing the least recently used (LRU) item using the `collections.OrderedDict` class, which maintains the order of insertion. However, if you specifically want to remove the least recently accessed item, you can use the `collections.OrderedDict` in combination with a custom method to track access. \n\nFor the most efficient solution, the `functools.lru_cache` decorator provides LRU caching for function calls, but it doesn't directly help with limiting a dictionary size. Instead, you can use the `collections.deque` combined with an `OrderedDict`, or for a more straightforward solution, use the `cachetools` library which provides a `LRUCache` class.\n\nHere\u2019s a custom example using `OrderedDict` to achieve your goal:\n\n```python\nfrom collections import OrderedDict\n\nclass LimitedSizeDict(OrderedDict):\n    def __init__(self, max_size, *args, **kwargs):\n        self.max_size = max_size\n        super().__init__(*args, **kwargs)\n\n    def __setitem__(self, key, value):\n        if key in self:\n            self.move_to_end(key)  # Move to end to show as most recently used\n        super().__setitem__(key, value)\n        if len(self) > self.max_size:\n            oldest = next(iter(self))\n            del self[oldest]\n\n# Example usage\nlimited_dict = LimitedSizeDict(max_size=3)\nlimited_dict['a'] = 1\nlimited_dict['b'] = 2\nlimited_dict['c'] = 3\n\n# At this point, the dictionary is {'a': 1, 'b': 2, 'c': 3}\n\nlimited_dict['d'] = 4  # This will remove 'a' since it was the oldest item\n\n# Now the dictionary is {'b': 2, 'c': 3, 'd': 4}\n```\n\nThis `LimitedSizeDict` class maintains a fixed size and removes the oldest item when a new item is added beyond the specified limit. You can adjust the logic in `__setitem__` if you prefer to remove the least recently accessed item instead of the least recently inserted one. For instance, you could track access by overriding the `__getitem__` method to move accessed items to the end:\n\n```python\n    def __getitem__(self, key):\n        value = super().__getitem__(key)\n        self.move_to_end(key)\n        return value\n```\n\nThis setup ensures that the dictionary behaves like a least-recently-used cache, removing the oldest item when the size limit is exceeded."
    }
]