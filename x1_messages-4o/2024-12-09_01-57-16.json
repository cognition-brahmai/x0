[
    {
        "role": "user",
        "content": "How can I retrieve the top 2 words for each document from a tf-idf matrix created using scikit-learn? I have created a tf-idf matrix using a corpus of documents. The documents are identified by unique ids ('doc1', 'doc2', etc.). I want to pass a document id and get the top 2 words for that document. Currently, I can access the matrix by providing the row number but I want to be able to access it by document id. How can I do this?\n\nHere is my current code:\n\n```python\nfrom sklearn.feature_extraction.text import TfidfVectorizer\n\nd = {'doc1':\"this is the first document\",'doc2':\"it is a sunny day\"} ### corpus\n\ntest_v = TfidfVectorizer(min_df=1)    ### applied the model\nt = test_v.fit_transform(d.values())\nfeature_names = test_v.get_feature_names() ### list of words/terms\n\nprint(feature_names)\n# ['day', 'document', 'first', 'is', 'it', 'sunny', 'the', 'this']\n\nprint(t.toarray())\n# array([[ 0.        ,  0.47107781,  0.47107781,  0.33517574,  0.        ,\n#          0.        ,  0.47107781,  0.47107781],\n#        [ 0.53404633,  0.        ,  0.        ,  0.37997836,  0.53404633,\n#          0.53404633,  0.        ,  0.        ]])\n\nprint(t[0,1])\n# 0.47107781233161794\n```"
    },
    {
        "role": "assistant",
        "content": "To retrieve the top 2 words for each document from a TF-IDF matrix using document IDs, you can follow these steps:\n\n1. Create a mapping of document IDs to their corresponding row indices.\n2. For a given document ID, retrieve the corresponding TF-IDF vector.\n3. Find the top 2 words by their TF-IDF scores.\n\nBelow is the modified code to achieve this:\n\n```python\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nimport numpy as np\n\n# Define the corpus with document IDs\ncorpus = {'doc1': \"this is the first document\", 'doc2': \"it is a sunny day\"}\n\n# Create a TF-IDF vectorizer and fit-transform the corpus\nvectorizer = TfidfVectorizer(min_df=1)\ntfidf_matrix = vectorizer.fit_transform(corpus.values())\n\n# Get feature names (vocabulary words)\nfeature_names = vectorizer.get_feature_names_out()\n\n# Create a document ID to index mapping\ndoc_id_to_index = {doc_id: idx for idx, doc_id in enumerate(corpus.keys())}\n\ndef get_top_n_words(doc_id, n=2):\n    # Get the index of the document\n    doc_index = doc_id_to_index.get(doc_id, None)\n    if doc_index is None:\n        return f\"Document ID '{doc_id}' not found in the corpus.\"\n    \n    # Get the TF-IDF vector for the specified document\n    tfidf_vector = tfidf_matrix[doc_index].toarray().flatten()\n    \n    # Get the indices of the top n words\n    top_n_indices = np.argsort(tfidf_vector)[-n:][::-1]\n    \n    # Get the top n words and their scores\n    top_n_words = [(feature_names[i], tfidf_vector[i]) for i in top_n_indices]\n    \n    return top_n_words\n\n# Example usage\nprint(get_top_n_words('doc1'))\nprint(get_top_n_words('doc2'))\n```\n\n### Explanation:\n- **Mapping Document IDs**: We map each document ID to its row index in the TF-IDF matrix using a dictionary `doc_id_to_index`.\n- **Retrieving Top Words**: For a given document ID, we retrieve the corresponding TF-IDF vector, sort its indices by TF-IDF scores, and pick the top `n` indices. We then map these indices to words using `feature_names`.\n\nThis code will output the top 2 words for each document based on their TF-IDF scores. Adjust `n` in the `get_top_n_words` function to retrieve a different number of top words."
    }
]