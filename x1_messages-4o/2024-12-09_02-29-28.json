[
    {
        "role": "user",
        "content": "In Python, how can I check if a string is a valid regular expression? In Java, I can use the following function:\n\n```java\nboolean isRegex;\ntry {\n  Pattern.compile(input);\n  isRegex = true;\n} catch (PatternSyntaxException e) {\n  isRegex = false;\n}\n```\n\nIs there an equivalent in Python for `Pattern.compile()` and `PatternSyntaxException`?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve similar functionality in Python using the `re` module, which is the regular expression library in Python. To check if a string is a valid regular expression, you can attempt to compile it using `re.compile()`. If the string is not a valid regular expression, it will raise a `re.error` exception. Here's how you can do it:\n\n```python\nimport re\n\ndef is_valid_regex(pattern):\n    try:\n        re.compile(pattern)\n        return True\n    except re.error:\n        return False\n\n# Example usage:\ninput_string = \"your_regex_here\"\nis_regex = is_valid_regex(input_string)\nprint(is_regex)\n```\n\nIn this code, `re.compile(pattern)` attempts to compile the given pattern. If the pattern is invalid, it raises a `re.error` exception, which is caught in the `except` block, and the function returns `False`. If no exception is raised, the function returns `True`, indicating that the pattern is a valid regular expression."
    }
]