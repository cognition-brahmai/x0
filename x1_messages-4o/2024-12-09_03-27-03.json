[
    {
        "role": "user",
        "content": "How can I automatically generate the type of a field in a docstring in PyCharm? When I create a function with parameters, PyCharm gives me the option to create a docstring with a `:param param_name:` field, which works well. However, I also need to include the `:type param_name:` field. For example, when I have a function like this:\n\n```python\ndef foo(bar, xyz):\n    return bar + xyz\n```\nBy using the generate docstring option, I only get (even when the 'Insert 'type' and 'rtype' to the documentation stub' is enabled):\n\n```python\ndef foo(bar, xyz):\n    \"\"\"\n    :param bar:\n    :param xyz:\n    \"\"\"\n    return bar + xyz\n```\nBut what I want is:\n\n```python\ndef foo(bar, xyz):\n    \"\"\"\n    :param bar:\n    :type bar:\n    :param xyz:\n    :type xyz:\n    \"\"\"\n    return bar + xyz\n```"
    },
    {
        "role": "assistant",
        "content": "To automatically generate the `:type` fields in a docstring in PyCharm, you can utilize type hints in your function definition. PyCharm can then infer the types and include them in the generated docstring. Here's how you can achieve this:\n\n1. **Add Type Hints to Your Function Parameters**: Specify the expected data types for the function parameters using type hints in the function signature.\n\n2. **Use the Docstring Generation Feature**: Once you've added type hints, use PyCharm's docstring generation feature to automatically generate the docstring, including the `:type` fields.\n\nHere's an example of how you can modify your function with type hints:\n\n```python\ndef foo(bar: int, xyz: int) -> int:\n    return bar + xyz\n```\n\nNow, when you use the \"Generate Docstring\" feature in PyCharm (typically by placing your cursor inside the function and pressing `Ctrl + Alt + /` on Windows/Linux or `Cmd + Alt + /` on macOS), you'll get a docstring that includes the `:type` fields:\n\n```python\ndef foo(bar: int, xyz: int) -> int:\n    \"\"\"\n    :param bar: \n    :type bar: int\n    :param xyz: \n    :type xyz: int\n    :return: \n    :rtype: int\n    \"\"\"\n    return bar + xyz\n```\n\nThis approach leverages Python's type hinting capabilities to help PyCharm automatically gather type information and include it in the docstring. Remember to adjust the type hints according to the actual types you expect for your parameters and return values."
    }
]