[
    {
        "role": "user",
        "content": "I have a simple pandas pyinstaller exe that is over 40MB in size, which seems excessive. Here is an example of my exe:\n\n```python\nimport collections\nimport csv\nimport selenium\nimport pandas\n\nprint('hi')\n```\n\nI tried reducing the size by excluding certain modules like so:\n\n```shell\npyinstaller --onefile --exclude matplotlib --exclude scipy --exclude pandas --exclude numpy.py\n```\n\nBut this approach is not practical considering the large number of exclusions. How can I specify a folder for pyinstaller to get modules from and exclude everything else, so as to reduce the size of my application? My spec file is as follows:\n\n```python\na = Analysis(['123.py'],\n             pathex=['C:\\\\Users\\\\AA\\\\ZZ'],\n             binaries=[],\n             datas=[],\n             hiddenimports=[],\n             hookspath=[],\n             runtime_hooks=[],\n             excludes=[],\n             win_no_prefer_redirects=False,\n             win_private_assemblies=False,\n             cipher=block_cipher)\npyz = PYZ(a.pure, a.zipped_data,\n             cipher=block_cipher)\nexe = EXE(pyz,\n          a.scripts,\n          a.binaries,\n          a.zipfiles,\n          a.datas,\n          name='123',\n          debug=False,\n          strip=False,\n          upx=True,\n          runtime_tmpdir=None,\n          console=True )\n```\n\nIt's worth mentioning that by default, Pyinstaller does not detect pandas. I had to add the following line:\n\n```python\nhiddenimports = ['pandas._libs.tslibs.timedeltas']\n```\n\nto `C:\\Users\\<NAME>\\AppData\\Local\\Programs\\Python\\Python36\\Lib\\site-packages\\PyInstaller\\hooks`. Could there be a solution when using multiple executables, such as linking each executable to a separate folder or executable with all imports?"
    },
    {
        "role": "assistant",
        "content": "Reducing the size of your PyInstaller-generated executable can be challenging, especially when dealing with large libraries like pandas, selenium, and others. Here are some strategies you can employ to minimize the size:\n\n1. **Minimize Dependencies**: Ensure that your script is importing only the necessary parts of each library. For example, if you only need specific functionalities from pandas or selenium, import only those specific modules.\n\n2. **Use PyInstaller Options**:\n   - You can use the `--exclude-module` option to exclude specific modules that are not necessary for your script.\n   - However, manually excluding too many modules can be cumbersome. Instead, focus on excluding large modules that you are certain are not used.\n\n3. **Upx Compression**:\n   - Ensure that UPX compression is enabled (`upx=True` in your spec file). UPX can significantly reduce the size of executables.\n\n4. **Custom Hooks**:\n   - If you have created custom hooks (like for pandas), ensure they are optimized to include only the necessary submodules.\n\n5. **Use a Virtual Environment**:\n   - Create a virtual environment and install only the necessary packages required for your script. This helps in avoiding unnecessary packages and dependencies.\n\n6. **Separate Shared Libraries**:\n   - If you have multiple executables that share common libraries, consider separating these shared libraries into a common folder and link your executables to this folder. However, note that PyInstaller's `--onefile` option bundles everything into a single executable, so you might need to switch to a `--onedir` approach for this.\n\n7. **Optimize Pandas**:\n   - Sometimes, pandas can be large due to unnecessary features. Consider using a lighter version or drop unnecessary dependencies if possible.\n\nHere\u2019s an example on how to use a virtual environment and separate shared libraries:\n\n1. **Create a Virtual Environment**:\n   ```shell\n   python -m venv myenv\n   source myenv/bin/activate  # On Windows, use `myenv\\Scripts\\activate`\n   pip install pandas selenium\n   ```\n\n2. **Use PyInstaller with the Virtual Environment**:\n   ```shell\n   pyinstaller --onefile --clean --paths=myenv/Lib/site-packages 123.py\n   ```\n\n3. **Consider `--onedir` for Shared Libraries**:\n   - If using `--onedir`, it creates a directory with the executable and all dependencies.\n   - You can manually move shared libraries to a common folder and adjust the `PATH` environment variable or use symlinks to point to these libraries.\n\n4. **Strip Unused Code**:\n   - Use tools like `pyminifier` to strip unused code from your Python scripts and dependencies before packaging.\n\nBy optimizing your imports, leveraging virtual environments, and using PyInstaller options effectively, you can significantly reduce the size of your final executable."
    }
]