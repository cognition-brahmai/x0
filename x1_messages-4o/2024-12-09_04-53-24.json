[
    {
        "role": "user",
        "content": "I have a list of tuples and I am looking for a way to sort them based on two elements. For example, I have the following list:\n\n```python\nunsorted = [('a', 4, 2), ('a', 4, 3), ('a', 7, 2), ('a', 7, 3), ('b', 4, 2), ('b', 4, 3), ('b', 7, 2), ('b', 7, 3)]\n```\n\nI want to sort them into this order:\n\n```python\nsorted = [('a', 4, 2), ('b', 4, 2), ('a', 4, 3), ('b', 4, 3), ('a', 7, 2), ('b', 7, 2), ('a', 7, 3), ('b', 7, 3)]\n```\n\nI know how to sort them based on the second element using the following code:\n\n```python\nsorted(unsorted, key = lambda element : element[1])\n```\n\nBut, how can I sort these tuples based on two keys?"
    },
    {
        "role": "assistant",
        "content": "To sort the list of tuples based on two keys, you can use a tuple as the key in the sorting function. In your case, you want to sort primarily by the second element and then by the first element. You can achieve this using the `sorted` function with a lambda function as the key:\n\n```python\nunsorted = [('a', 4, 2), ('a', 4, 3), ('a', 7, 2), ('a', 7, 3), ('b', 4, 2), ('b', 4, 3), ('b', 7, 2), ('b', 7, 3)]\n\nsorted_list = sorted(unsorted, key=lambda element: (element[1], element[0]))\n\nprint(sorted_list)\n```\n\nThis will sort the tuples first by the second element (i.e., `element[1]`) and then by the first element (i.e., `element[0]`) if the second elements are the same. The output will be:\n\n```python\n[('a', 4, 2), ('b', 4, 2), ('a', 4, 3), ('b', 4, 3), ('a', 7, 2), ('b', 7, 2), ('a', 7, 3), ('b', 7, 3)]\n```\n\nThis approach ensures the tuples are sorted in the order you specified."
    }
]