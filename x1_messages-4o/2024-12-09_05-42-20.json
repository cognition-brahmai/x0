[
    {
        "role": "user",
        "content": "How can I customize the error message in a Python AssertionError? I am currently comparing two multiline blocks of Unicode text and the default explanation from the AssertionError is not providing enough detail. I need to be able to modify the printed error message in the AssertionError that I am catching. Here is the code I am working with:\n\n```python\ndef assert_long_strings_equal(one, other):\n    lines_one = one.splitlines()\n    lines_other = other.splitlines()\n    for line1, line2 in zip(lines_one, lines_other):\n        try:\n            my_assert_equal(line1, line2)\n        except AssertionError, error:\n            # Add some information to the printed result of error??!\n            raise\n```\n\nThe default AssertionError I am getting is `AssertionError: u'something' != 'something else'`, which only shows the first line of the output. I am using `nose` to run the test. How can I change the assertion message to print out a customized message?"
    },
    {
        "role": "assistant",
        "content": "To customize the error message in a Python `AssertionError`, you can modify the `my_assert_equal` function to include a more detailed or customized error message. Since you want to compare multiline blocks of Unicode text and provide more context in the error message, you can use Python's `assert` statement with a custom message. Here's how you can do it:\n\n```python\ndef my_assert_equal(line1, line2):\n    if line1 != line2:\n        raise AssertionError(f\"Lines do not match:\\nExpected: {repr(line1)}\\nActual: {repr(line2)}\")\n\ndef assert_long_strings_equal(one, other):\n    lines_one = one.splitlines()\n    lines_other = other.splitlines()\n    for line_number, (line1, line2) in enumerate(zip(lines_one, lines_other), start=1):\n        try:\n            my_assert_equal(line1, line2)\n        except AssertionError as error:\n            # Add line number information to the error message\n            raise AssertionError(f\"Line {line_number} - {error}\")\n\n# Example usage\ntry:\n    assert_long_strings_equal(\"Hello\\nWorld\", \"Hello\\nworld\")\nexcept AssertionError as e:\n    print(e)\n```\n\nIn this code, the `my_assert_equal` function raises an `AssertionError` with a detailed message whenever two lines do not match. The `assert_long_strings_equal` function further enhances this by including the line number in the error message, making it easier to locate the discrepancy in large texts.\n\nThis approach gives you more control over the error message and makes it easier to debug issues when comparing multiline Unicode text. Additionally, using `repr()` ensures that special characters and differences in whitespace are clearly represented in the error message."
    }
]