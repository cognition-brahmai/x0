[
    {
        "role": "user",
        "content": "As a school counselor, you want to create a time management plan for students that includes the following:\n- Breaking down tasks into smaller, manageable steps\n- Prioritizing tasks based on importance and deadline\n- Setting achievable goals and deadlines for completion\n- Using a planner or calendar to keep track of tasks and deadlines\n- Minimizing distractions and staying focused during study time\nCan you provide a sample Python code that implements these strategies and allows students to track their progress and completion of tasks?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a sample Python code that implements a simple console-based task management system incorporating the strategies you've outlined. The code allows students to add tasks, break them down into smaller steps, prioritize them, set goals and deadlines, and track their progress.\n\n```python\nfrom datetime import datetime\n\nclass Task:\n    def __init__(self, title, priority, deadline):\n        self.title = title\n        self.priority = priority\n        self.deadline = datetime.strptime(deadline, '%Y-%m-%d')\n        self.steps = []\n        self.completed = False\n\n    def add_step(self, step):\n        self.steps.append({'step': step, 'completed': False})\n\n    def mark_step_completed(self, step_index):\n        if 0 <= step_index < len(self.steps):\n            self.steps[step_index]['completed'] = True\n\n    def is_completed(self):\n        return all(step['completed'] for step in self.steps)\n\nclass TaskManager:\n    def __init__(self):\n        self.tasks = []\n\n    def add_task(self, title, priority, deadline):\n        task = Task(title, priority, deadline)\n        self.tasks.append(task)\n\n    def display_tasks(self):\n        self.tasks.sort(key=lambda x: (x.deadline, -x.priority))\n        for idx, task in enumerate(self.tasks):\n            status = 'Completed' if task.is_completed() else 'Pending'\n            print(f\"{idx + 1}. {task.title} [Priority: {task.priority}, Deadline: {task.deadline.date()}, Status: {status}]\")\n            for step_idx, step in enumerate(task.steps):\n                step_status = 'Completed' if step['completed'] else 'Pending'\n                print(f\"   Step {step_idx + 1}: {step['step']} [{step_status}]\")\n\n    def mark_task_step_completed(self, task_index, step_index):\n        if 0 <= task_index < len(self.tasks):\n            self.tasks[task_index].mark_step_completed(step_index)\n            if self.tasks[task_index].is_completed():\n                self.tasks[task_index].completed = True\n\ndef main():\n    task_manager = TaskManager()\n\n    while True:\n        print(\"\\nTask Management System\")\n        print(\"1. Add Task\")\n        print(\"2. View Tasks\")\n        print(\"3. Mark Task Step as Completed\")\n        print(\"4. Exit\")\n\n        choice = input(\"Enter your choice: \")\n\n        if choice == '1':\n            title = input(\"Enter task title: \")\n            priority = int(input(\"Enter task priority (1-5, 5 being highest): \"))\n            deadline = input(\"Enter task deadline (YYYY-MM-DD): \")\n            task_manager.add_task(title, priority, deadline)\n\n            while True:\n                add_step = input(\"Do you want to add a step to this task? (y/n): \").lower()\n                if add_step == 'y':\n                    step = input(\"Enter the step: \")\n                    task_manager.tasks[-1].add_step(step)\n                else:\n                    break\n\n        elif choice == '2':\n            task_manager.display_tasks()\n\n        elif choice == '3':\n            task_manager.display_tasks()\n            task_index = int(input(\"Enter task number to update: \")) - 1\n            step_index = int(input(\"Enter step number to mark as completed: \")) - 1\n            task_manager.mark_task_step_completed(task_index, step_index)\n\n        elif choice == '4':\n            break\n\n        else:\n            print(\"Invalid choice. Please try again.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Features of the Code:\n1. **Add Task**: You can add a task with a title, priority (1-5), and a deadline. You can also break the task down into smaller steps.\n2. **View Tasks**: Displays all tasks sorted by deadline and priority, along with each step's completion status.\n3. **Mark Step as Completed**: Allows you to mark a specific step of a task as completed to track progress.\n4. **Exit**: Ends the program.\n\nThis is a basic implementation intended for learning purposes. It can be expanded with additional features, such as saving tasks to a file or implementing a GUI for better usability."
    }
]