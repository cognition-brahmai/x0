[
    {
        "role": "user",
        "content": "I am currently using FastAPI and I need to obtain the real IP address of the client when they request my page. However, when I try to use starlette Request, it returns the IP address of my server instead of the client's remote IP. Below is my code:\n\n```python\n@app.post('/my-endpoint')\nasync def my_endpoint(stats: Stats, request: Request):\n    ip = request.client.host\n    print(ip)\n    return {'status': 1, 'message': 'ok'}\n```\nI am wondering what I'm doing wrong, and how I can get the real IP similar to how Flask's `request.remote_addr` works."
    },
    {
        "role": "assistant",
        "content": "When you're deploying your FastAPI application behind a proxy or a load balancer (such as Nginx or AWS ELB), the `request.client.host` often captures the IP address of the proxy server because the proxy forwards requests to your application. To obtain the client's real IP address, you need to inspect the `X-Forwarded-For` header, which proxies and load balancers typically use to pass along the client's original IP address.\n\nHere's how you can modify your FastAPI endpoint to extract the real IP address from the `X-Forwarded-For` header:\n\n```python\nfrom fastapi import FastAPI, Request\n\napp = FastAPI()\n\n@app.post('/my-endpoint')\nasync def my_endpoint(request: Request):\n    # Check if the 'X-Forwarded-For' header is present\n    x_forwarded_for = request.headers.get('X-Forwarded-For')\n    if x_forwarded_for:\n        # Extract the first IP address in the list\n        ip = x_forwarded_for.split(',')[0]\n    else:\n        # Fallback to the direct client IP\n        ip = request.client.host\n\n    print(ip)\n    return {'status': 1, 'message': 'ok'}\n```\n\n### Important Considerations:\n\n1. **Trust Headers**: Only trust the `X-Forwarded-For` header if you control the proxy or load balancer, and you know it sets this header. Otherwise, users could spoof the IP address by setting this header themselves.\n\n2. **Proxy Server Configuration**: Make sure your proxy server is configured to pass the `X-Forwarded-For` header to your FastAPI application. For example, in Nginx, you would use the `proxy_set_header` directive.\n\n3. **Multiple Proxies**: If your architecture involves multiple proxies, the `X-Forwarded-For` header will contain a comma-separated list of IPs. The first IP in this list is usually the client's real IP.\n\nBy using this method, you should be able to reliably obtain the client's real IP address in a FastAPI application running behind a proxy."
    }
]