[
    {
        "role": "user",
        "content": "How can I limit the Python traceback to only specific files or directories? I frequently write Python code that uses external libraries and when an error occurs, the traceback in the Python console is too detailed, making it difficult to locate the error in my own code. Is there a method to \"black-box\" the package code or only display traceback lines from my code?"
    },
    {
        "role": "assistant",
        "content": "To limit the Python traceback to only specific files or directories, you can customize the traceback display by filtering out the frames that belong to external libraries. This can be done by using a custom exception hook and filtering the stack trace manually. Here's a method to achieve this:\n\n1. **Define a Custom Exception Hook:**\n\n   Create a custom function that filters the traceback before printing it, based on the file path.\n\n2. **Filter Traceback:**\n\n   Use the `traceback` module to extract the full traceback and filter out the frames you don't want to see.\n\n3. **Set the Custom Exception Hook:**\n\n   Replace the default exception hook with your custom one.\n\nHere's an example implementation:\n\n```python\nimport sys\nimport os\nimport traceback\n\ndef custom_exception_hook(exc_type, exc_value, exc_traceback):\n    # Convert the traceback to a list of traceback objects\n    tb_list = traceback.extract_tb(exc_traceback)\n\n    # Define the directory or file patterns you want to include in the traceback\n    include_patterns = ['your_project_directory', 'another_directory']\n\n    # Filter the traceback list to include only the frames from the specified directories\n    filtered_tb_list = [\n        frame for frame in tb_list\n        if any(os.path.abspath(pattern) in os.path.abspath(frame.filename) for pattern in include_patterns)\n    ]\n\n    # Format and print the filtered traceback\n    formatted_tb = ''.join(traceback.format_list(filtered_tb_list))\n    print(f\"Traceback (most recent call last):\\n{formatted_tb}\")\n    print(f\"{exc_type.__name__}: {exc_value}\")\n\n# Set the custom exception hook\nsys.excepthook = custom_exception_hook\n\n# Example function to raise an exception\ndef my_function():\n    # This should raise an exception for demonstration\n    1 / 0\n\n# Call the function to see the filtered traceback\nmy_function()\n```\n\n### Explanation:\n\n- **`include_patterns`:** This list contains the names or paths of directories or files you want to include in the traceback. Adjust this list to match your project's structure.\n\n- **`filtered_tb_list`:** This list comprehension filters the traceback frames to include only those that match the patterns in `include_patterns`.\n\n- **`custom_exception_hook`:** This function replaces the default exception hook and is responsible for filtering and printing the traceback.\n\nBy using this approach, you can focus on the parts of the traceback that are relevant to your code, making it easier to debug issues. Adjust the `include_patterns` to suit your project's directory structure."
    }
]