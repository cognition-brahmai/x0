[
    {
        "role": "user",
        "content": "I am seeking a simple, \"dump\" object in Python that behaves like a JavaScript object, where its members can be accessed either with .member or ['member']. I usually define a class called DumbObject at the top of my Python files, but I know there is at least one bug with this implementation. I wonder if there's something similar available in the standard Python library?\n\nAdditionally, I have tried instantiating object, but it doesn't work as expected. For instance, when I run:\n\n```python\nobj = object()\nobj.airspeed = 42\n```\n\nI receive the following error:\n\n```python\nTraceback (most recent call last):\n  File \"\", line 1, in \nAttributeError: 'object' object has no attribute 'airspeed'\n```\nSo, how can I achieve this in Python?"
    },
    {
        "role": "assistant",
        "content": "To create a \"dumb\" object in Python that behaves similarly to a JavaScript object, you can use the `types.SimpleNamespace` or define a custom class using the `__dict__` attribute. Here\u2019s how you can achieve both approaches:\n\n### Using `types.SimpleNamespace`\n\nPython's `types` module provides a `SimpleNamespace` class that allows you to create an object where attributes can be set dynamically. Here\u2019s an example:\n\n```python\nfrom types import SimpleNamespace\n\nobj = SimpleNamespace()\nobj.airspeed = 42\nprint(obj.airspeed)  # Output: 42\n```\n\nHowever, `SimpleNamespace` does not support accessing attributes using the dictionary-style syntax (e.g., `obj['member']`). If you need both syntaxes, you can create a custom class.\n\n### Custom Class Using `__dict__`\n\nTo create an object that supports both dot notation and dictionary-style access, you can define a custom class and utilize the `__dict__` attribute for dynamic attribute access. Here\u2019s an example:\n\n```python\nclass DumbObject:\n    def __init__(self):\n        self.__dict__ = {}\n\n    def __getitem__(self, key):\n        return self.__dict__[key]\n\n    def __setitem__(self, key, value):\n        self.__dict__[key] = value\n\n# Usage\nobj = DumbObject()\nobj.airspeed = 42\nprint(obj.airspeed)  # Output: 42\n\nobj['altitude'] = 100\nprint(obj.altitude)  # Output: 100\n\nprint(obj['airspeed'])  # Output: 42\n```\n\nIn this custom class, we override `__getitem__` and `__setitem__` to allow dictionary-style access, while the `__dict__` attribute naturally allows for dot notation access. This should solve the problem you're facing and provide the functionality you need."
    }
]