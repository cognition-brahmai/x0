[
    {
        "role": "user",
        "content": "In Python, is there a way to access match groups without explicitly creating a match object? I am trying to convert the following Perl code into Python, but the translated Python code seems awkward due to the if-else-cascade and match object creation. How can I beautify this code?\n\nPerl code:\n```perl\nif    ($statement =~ /I love (\\w+)/) {\n  print \"He loves $1\\n\";\n}\nelsif ($statement =~ /Ich liebe (\\w+)/) {\n  print \"Er liebt $1\\n\";\n}\nelsif ($statement =~ /Je t'aime (\\w+)/) {\n  print \"Il aime $1\\n\";\n}\n```\nPython code:\n```python\nm = re.search(\"I love (\\w+)\", statement)\nif m:\n  print \"He loves\",m.group(1)\nelse:\n  m = re.search(\"Ich liebe (\\w+)\", statement)\n  if m:\n    print \"Er liebt\",m.group(1)\n  else:\n    m = re.search(\"Je t'aime (\\w+)\", statement)\n    if m:\n      print \"Il aime\",m.group(1)\n```"
    },
    {
        "role": "assistant",
        "content": "To make your Python code more elegant and less awkward, you can use a loop to iterate over the patterns and their corresponding print statements. This way, you avoid the cascade of `if-else` statements and make your code more readable and maintainable. Here's how you can do it:\n\n```python\nimport re\n\nstatement = \"Your input statement here\"\n\npatterns = [\n    (r\"I love (\\w+)\", \"He loves {}\"),\n    (r\"Ich liebe (\\w+)\", \"Er liebt {}\"),\n    (r\"Je t'aime (\\w+)\", \"Il aime {}\")\n]\n\nfor pattern, response in patterns:\n    match = re.search(pattern, statement)\n    if match:\n        print(response.format(match.group(1)))\n        break\n```\n\nIn this version of the code:\n- We define a list of tuples called `patterns`, where each tuple contains a regex pattern and a corresponding response string with a placeholder for the matched group.\n- We iterate over this list, attempting to match each pattern against the `statement`.\n- If a match is found, the response is formatted with the matched word and printed, and the loop is exited with `break`."
    }
]