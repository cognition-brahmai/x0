[
    {
        "role": "user",
        "content": "In Python, I have a variable 'x' and I want to know if it is pointing to a function or not. I tried using the following code:\n```python\n>>> isinstance(x, function)\n```\nHowever, this returns an error:\n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in ?\nNameError: name 'function' is not defined\n```\nThe reason for my approach is because when I use type(x), it returns '<type 'function'>'. How can I detect whether a Python variable is a function or not?"
    },
    {
        "role": "assistant",
        "content": "To check if a variable in Python is pointing to a function, you can use the `types` module, which provides a `FunctionType` that can be used for this purpose. Here's how you can do it:\n\n```python\nimport types\n\ndef example_function():\n    pass\n\nx = example_function\n\n# Check if x is a function\nis_function = isinstance(x, types.FunctionType)\nprint(is_function)  # This will print True if x is a function, otherwise False\n```\n\nAlternatively, you can use the built-in `callable()` function, which checks if an object appears to be callable (i.e., it can be called like a function):\n\n```python\ndef example_function():\n    pass\n\nx = example_function\n\n# Check if x is callable\nis_callable = callable(x)\nprint(is_callable)  # This will print True if x is a function or any other callable object, otherwise False\n```\n\nUsing `types.FunctionType` is more specific to functions, whereas `callable()` can also return `True` for objects like classes or instances with a `__call__()` method. Choose the approach that best suits your needs."
    }
]