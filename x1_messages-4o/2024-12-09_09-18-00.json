[
    {
        "role": "user",
        "content": "Can you provide an AI solution that implements the bubble sort algorithm on an array?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Bubble sort is a simple sorting algorithm that repeatedly steps through the list, compares adjacent elements, and swaps them if they are in the wrong order. Here\u2019s a Python implementation of the bubble sort algorithm:\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    # Traverse through all array elements\n    for i in range(n):\n        # Last i elements are already in place\n        for j in range(0, n-i-1):\n            # Traverse the array from 0 to n-i-1\n            # Swap if the element found is greater\n            # than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n\n# Example usage\narray = [64, 34, 25, 12, 22, 11, 90]\nprint(\"Original array:\", array)\n\nbubble_sort(array)\nprint(\"Sorted array:\", array)\n```\n\n### How it Works:\n1. The algorithm runs through the list multiple times.\n2. For each pair of adjacent elements, it checks if they are in the correct order.\n3. If they are not, it swaps them.\n4. This process repeats until the list is sorted.\n\n### Time Complexity:\n- **Worst and Average Case:** \\( O(n^2) \\) - This happens when the array is in reverse order.\n- **Best Case:** \\( O(n) \\) - This is when the array is already sorted.\n\nBubble sort is not the most efficient sorting algorithm for large datasets, but it's a great educational tool for understanding the concept of sorting algorithms."
    }
]