[
    {
        "role": "user",
        "content": "In Python, how do I convert a list like [3, 7, 19] into an iterable list of tuples such as [(0,3), (1,7), (2,19)]? I remember there was a function or method for this but I can't recall its name. I want to use this function to iterate over a list with indices rather than using the conventional method:\n\n```python\nfor i in range(len(name_of_list)):\n    name_of_list[i] = something\n```"
    },
    {
        "role": "assistant",
        "content": "The function you're thinking of is `enumerate()`. This built-in Python function allows you to iterate over a list (or any iterable) and get both the index and the value at each iteration, which is exactly what you want to achieve.\n\nHere's how you can use `enumerate()` to convert your list `[3, 7, 19]` into a list of tuples `[(0, 3), (1, 7), (2, 19)]`:\n\n```python\noriginal_list = [3, 7, 19]\nenumerated_list = list(enumerate(original_list))\n\nprint(enumerated_list)\n```\n\nThis will output:\n\n```\n[(0, 3), (1, 7), (2, 19)]\n```\n\nBy using `enumerate()`, you can easily iterate over the list with access to both the index and the corresponding value, making your code cleaner and more readable than using a `for` loop with `range(len(...))`."
    }
]