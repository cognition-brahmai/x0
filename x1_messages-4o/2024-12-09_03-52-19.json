[
    {
        "role": "user",
        "content": "How can I include a type hint in my function signature to indicate that it only returns specific values? I have a function that only returns 'a', 'b', or 'c', all of which are of type 'T'. I currently use 'def fun(...) -> \"a or b or c\":' and 'def fun(...) -> T:' but I want the signature to express that the function only returns those specific values."
    },
    {
        "role": "assistant",
        "content": "To express that a function only returns specific values, you can use the `Literal` type from the `typing` module, which was introduced in Python 3.8. The `Literal` type allows you to specify that a function will return one of a set of specific values.\n\nHere's how you can define the function signature using `Literal`:\n\n```python\nfrom typing import Literal\n\ndef fun(...) -> Literal['a', 'b', 'c']:\n    # function implementation\n    ...\n```\n\nBy using `Literal['a', 'b', 'c']`, you indicate that the function will return one of the specified literal values: 'a', 'b', or 'c'. This is more precise than just specifying a general type, and it communicates your function's behavior more clearly in terms of its return value."
    }
]