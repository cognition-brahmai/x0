[
    {
        "role": "user",
        "content": "I'm working with a pandas dataframe where all entries are strings. For instance:\n\n```\n   A     B      C\n1 apple  banana pear\n2 pear   pear   apple\n3 banana pear   pear\n4 apple  apple  pear\n```\nI'm looking for a method to select all the rows that contain a certain string, for example, 'banana'. The string could appear in any column and I'm not sure which one. I know I could write a for loop and iterate over all rows to do this, but I'm wondering if there's an easier or faster way to accomplish this task?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this efficiently without using a for loop by utilizing pandas' built-in capabilities. You can use the `DataFrame.apply()` method in combination with a lambda function to check if 'banana' is present in any of the columns for each row. Here's how you can do it:\n\n```python\nimport pandas as pd\n\n# Sample DataFrame\ndata = {\n    'A': ['apple', 'pear', 'banana', 'apple'],\n    'B': ['banana', 'pear', 'pear', 'apple'],\n    'C': ['pear', 'apple', 'pear', 'pear']\n}\ndf = pd.DataFrame(data)\n\n# Select rows that contain 'banana' in any column\ncontains_banana = df.apply(lambda row: row.str.contains('banana').any(), axis=1)\n\n# Filter the DataFrame\nresult_df = df[contains_banana]\n\nprint(result_df)\n```\n\nExplanation:\n- `df.apply(lambda row: row.str.contains('banana').any(), axis=1)` checks each row to see if any of the columns contain 'banana'. `row.str.contains('banana')` returns a boolean Series for each row, and `.any()` checks if any of those values are `True`.\n- This results in a boolean Series where `True` indicates that the row contains 'banana'.\n- `df[contains_banana]` filters the DataFrame to only include rows where the condition is `True`.\n\nThis method is efficient and leverages vectorized operations in pandas, making it faster than iterating over rows with a for loop."
    }
]