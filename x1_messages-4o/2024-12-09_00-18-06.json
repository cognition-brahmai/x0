[
    {
        "role": "user",
        "content": "In Django, I'm currently performing a couple of actions when saving models, particularly from the admin side. These actions include capitalizing a few fields, ensuring that either one field or the other is filled, and creating a field slug. At the moment, these tasks are divided between overriding the clean() and save() functions. Could you provide some guidance on when to use each function? I have looked through the documentation, but I couldn't find specific rules on when to use clean() versus save()."
    },
    {
        "role": "assistant",
        "content": "In Django, both the `clean()` and `save()` methods are used for different purposes, and understanding when to use each can help you maintain clean and efficient code.\n\n### `clean()` Method:\n\n- **Purpose**: The `clean()` method is intended for validation purposes. It is called before saving an object to ensure that all the data is consistent and valid.\n\n- **When to Use**:\n  - Use `clean()` to enforce validation rules that need to be checked before the data is saved to the database.\n  - For example, if you need to ensure that either one field or another is filled, this logic should be placed in `clean()`.\n  - You can also use `clean()` to normalize data, for example, stripping whitespace or converting fields to lowercase, although be cautious with any changes that might affect data integrity.\n\n- **How it Works**: \n  - The `clean()` method is called during form validation, which happens before saving the data. It's executed when you call `full_clean()` on a model instance or when a model form is validated.\n  - It raises a `ValidationError` if any validation rules are violated.\n\n### `save()` Method:\n\n- **Purpose**: The `save()` method is used to control the process of saving an object to the database. This can include modifying fields or performing actions that should occur every time an object is saved.\n\n- **When to Use**:\n  - Use `save()` for operations that need to happen every time the object is saved, such as automatically generating a slug or modifying fields like capitalizing text.\n  - If you need to ensure that certain fields are always updated with each save, this logic belongs in `save()`.\n  - For operations that alter the data but are not strictly validation, place them in `save()`.\n\n- **How it Works**:\n  - The `save()` method is called when you explicitly call `save()` on a model instance.\n  - It can be overridden to customize the saving process, such as altering field values or triggering additional actions.\n\n### Recommendations:\n\n- **Field Capitalization**: This is more of a data manipulation task, so it should be done in the `save()` method.\n\n- **Field Validation**: Ensure either one field or another is filled in the `clean()` method, as this is a validation concern.\n\n- **Slug Creation**: Slug creation is generally part of the data manipulation process, so it belongs in `save()`. However, if the slug is based on data that needs validation, ensure any dependencies are validated in `clean()` first.\n\nBy separating concerns between validation (`clean()`) and data manipulation or preparation (`save()`), you maintain a clear and organized codebase. This separation also ensures that your validation logic can be reused across different contexts, such as form submissions or API endpoints, without duplicating the logic in multiple places."
    }
]