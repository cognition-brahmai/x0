[
    {
        "role": "user",
        "content": "How can I retrieve the id of a row that I have just inserted into a SQLite database using Python? I'm working on a website solution where two people may be inserting data at the same time. My table structure is as follows:\n\n```python\nid INT AUTOINCREMENT PRIMARY KEY,\nusername VARCHAR(50),\npassword VARCHAR(50)\n```\n\nI\u2019m inserting a new row with example data `username=\"test\"` and `password=\"test\"`. I understand I can get the last read row, but I am unsure if this is transaction safe. Can anyone advise me on how to retrieve the generated id in a transaction safe way?"
    },
    {
        "role": "assistant",
        "content": "To retrieve the ID of a row that you have just inserted into a SQLite database in a thread-safe way, you can use the SQLite function `last_insert_rowid()`. This function returns the row ID of the last row insert from the database connection. It's important to ensure that the database connection is not shared between multiple threads or processes, as `last_insert_rowid()` is specific to the connection.\n\nHere is an example of how you can use it in Python using the `sqlite3` module:\n\n```python\nimport sqlite3\n\ndef insert_user(username, password):\n    # Connect to your SQLite database\n    conn = sqlite3.connect('your_database.db')\n    cursor = conn.cursor()\n\n    try:\n        # Insert the new row into the table\n        cursor.execute(\"INSERT INTO your_table (username, password) VALUES (?, ?)\", (username, password))\n        \n        # Retrieve the id of the newly inserted row\n        new_id = cursor.lastrowid\n        \n        # Commit the transaction\n        conn.commit()\n\n        return new_id\n    except sqlite3.Error as e:\n        # Rollback the transaction if there is an error\n        conn.rollback()\n        print(f\"An error occurred: {e}\")\n        return None\n    finally:\n        # Close the connection\n        conn.close()\n\n# Example usage\nnew_user_id = insert_user(\"test\", \"test\")\nprint(f\"The new user ID is: {new_user_id}\")\n```\n\n### Key Points:\n- **Use `lastrowid`**: The `cursor.lastrowid` attribute gives you the ID of the last inserted row, which is perfect for getting the ID immediately after an insert.\n- **Connection-specific**: Ensure that each thread or process has its own database connection. This makes `lastrowid` safe and reliable to use because it is associated with the specific connection instance.\n- **Error Handling**: Always handle exceptions and rollback transactions in case of an error to maintain data integrity.\n- **Commit Transactions**: Remember to commit your transaction after the insert operation to save changes to the database.\n\nThis approach ensures that the retrieval of the last inserted row ID is safe and accurate, even in a multi-threaded environment."
    }
]