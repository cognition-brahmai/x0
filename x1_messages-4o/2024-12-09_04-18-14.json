[
    {
        "role": "user",
        "content": "I am currently using Scilab and I am trying to convert an array of booleans into an array of integers. Here is the code I am using:\n\n```python\nx = np.array([4, 3, 2, 1])\ny = 2 >= x\ny\n# Output: array([False, False,  True,  True], dtype=bool)\n```\n\nIn Scilab, I am able to use the following commands to achieve this:\n\n```python\nbool2s(y)\n# Output: 0.    0.    1.    1.  \n```\n\n```python\n1*y\n# Output: 0.    0.    1.    1.  \n```\n\nIs there a similar simple command or method I can use in Python to convert an array of booleans into an array of integers, or will I have to use a loop?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can easily convert an array of booleans to an array of integers without using a loop by utilizing NumPy's capabilities. Here's how you can do it:\n\n```python\nimport numpy as np\n\nx = np.array([4, 3, 2, 1])\ny = 2 >= x\n\n# Convert boolean array to integer array\ninteger_array = y.astype(int)\n\nprint(integer_array)\n# Output: [0 0 1 1]\n```\n\nThe `astype(int)` method converts the boolean array `y` into an integer array, where `False` is converted to `0` and `True` is converted to `1`. This approach is efficient and utilizes NumPy's vectorized operations, which are generally faster than using a loop."
    }
]