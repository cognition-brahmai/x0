[
    {
        "role": "user",
        "content": "In Python, how can I check if a given file or directory is a symbolic link (symlink)? For instance, in the following example files, I need my wrapper function to return `True`.\n```\n# ls -l\ntotal 0\nlrwxrwxrwx 1 root root 8 2012-06-16 18:58 dir -> ../temp/\nlrwxrwxrwx 1 root root 6 2012-06-16 18:55 link -> ../log\n```"
    },
    {
        "role": "assistant",
        "content": "In Python, you can use the `os.path` module to check if a given file or directory is a symbolic link. Specifically, the `os.path.islink()` function returns `True` if the path refers to a symbolic link. Here is how you can create a wrapper function to check this:\n\n```python\nimport os\n\ndef is_symlink(path):\n    return os.path.islink(path)\n\n# Example usage:\nprint(is_symlink('dir'))  # Replace 'dir' with the actual path\nprint(is_symlink('link')) # Replace 'link' with the actual path\n```\n\nIn this example, `is_symlink()` will return `True` if the given path is a symbolic link, and `False` otherwise. Just pass the path of the file or directory you want to check to this function."
    }
]