[
    {
        "role": "user",
        "content": "I am trying to create test classes that aren't unittest based in PyCharm on a Windows 7 environment. I've got a method under a class like this:\n\n```python\nclass ClassUnderTestTests:\n    def test_something(self):\n```\nWhen I run py.test from the command line or in PyCharm, it can't detect or run this method. However, the same method outside the class can be detected and run. I am trying to group my tests under classes and I believe I am following the py.test spec correctly. Why can't py.test find my tests under a class?"
    },
    {
        "role": "assistant",
        "content": "It looks like you're trying to use `pytest` for your tests, which is a great choice for its simplicity and functionality. However, there's a specific naming convention that `pytest` uses to automatically discover test classes and methods. Here are a few things you should check to ensure your tests are discovered properly:\n\n1. **Class Naming Convention**: The class name should start with `Test`. This is crucial because `pytest` looks for classes that follow this pattern when discovering tests. Rename your class to `TestClassUnderTestTests`.\n\n   ```python\n   class TestClassUnderTestTests:\n       def test_something(self):\n           # Your test code here\n   ```\n\n2. **Method Naming Convention**: It seems you are already using the correct naming convention for the method by prefixing it with `test_`. Ensure all test methods follow this pattern.\n\n3. **File Naming Convention**: Ensure that your test file name also follows the pattern that `pytest` expects, usually starting with `test_` or ending with `_test.py`. For example, `test_your_module.py`.\n\n4. **Import Statements**: Ensure all necessary modules and classes are imported correctly within your test file.\n\n5. **Running Tests in PyCharm**: If you're using PyCharm, make sure that you are running tests using the `pytest` runner. You can configure this in the PyCharm settings under `Preferences` > `Tools` > `Python Integrated Tools` and set the default test runner to `pytest`.\n\n6. **Command Line Execution**: When running tests from the command line, make sure you are in the correct directory where your test files are located, and execute the command `pytest` or `python -m pytest`.\n\nBy following these conventions, `pytest` should be able to discover and execute your tests. If you have followed these steps and are still experiencing issues, double-check for any syntax errors or misconfigurations in your environment."
    }
]