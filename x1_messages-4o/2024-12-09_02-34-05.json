[
    {
        "role": "user",
        "content": "I am working on a Python script that needs to send emails. However, I want to send these emails not through SMTP but via sendmail. I am running this script on various Unix hosts, some of which are not listening on localhost:25. Some of these hosts are part of embedded systems and can't be set up to accept SMTP. I am looking for a Python library that can encapsulate this process. Ideally, I would like a library that abstracts the choice between 'sendmail -versus- smtp'. Also, it's important for me that the library takes care of header injection vulnerabilities, so just dumping a string to popen('/usr/bin/sendmail', 'w') is not what I am looking for. Is there a library available that fits these requirements or should I write my own?"
    },
    {
        "role": "assistant",
        "content": "To send emails using the `sendmail` command in Python while ensuring safety from header injection vulnerabilities, you can use the `envelopes` library. This library provides a simple interface to send emails and can be configured to use `sendmail` as the transport mechanism, which abstracts away the complexity of directly interfacing with the command. Here\u2019s how you can use it:\n\n1. **Install the `envelopes` library**:\n   You can install the library using pip:\n   ```bash\n   pip install envelopes\n   ```\n\n2. **Using the `envelopes` library**:\n   Here's a basic example of how to send an email using `sendmail`:\n\n   ```python\n   from envelopes import Envelope, GnuPG\n\n   # Create an envelope\n   envelope = Envelope(\n       from_addr='sender@example.com',\n       to_addr='receiver@example.com',\n       subject='Subject here',\n       text_body='This is the body of the email.'\n   )\n\n   # Send the envelope via sendmail\n   envelope.send_via_sendmail()\n   ```\n\n3. **Handling Header Injection**:\n   The `envelopes` library takes care of header injection by properly escaping and validating the headers. You should still ensure that any user input is sanitized and validated before passing it to the email creation process.\n\n4. **Abstracting Between SMTP and Sendmail**:\n   If you want to abstract the choice between using SMTP and sendmail, you can create a function that uses configuration or environment variables to decide the transport method. Here\u2019s an example:\n\n   ```python\n   import os\n   from envelopes import Envelope\n\n   def send_email(from_addr, to_addr, subject, body, use_smtp=False):\n       envelope = Envelope(\n           from_addr=from_addr,\n           to_addr=to_addr,\n           subject=subject,\n           text_body=body\n       )\n\n       if use_smtp:\n           # Use SMTP settings\n           envelope.send('smtp.example.com', login='user', password='password', tls=True)\n       else:\n           # Use sendmail\n           envelope.send_via_sendmail()\n\n   # Example usage:\n   send_email('sender@example.com', 'receiver@example.com', 'Subject here', 'Email body here')\n   ```\n\nThis setup allows you to switch between sendmail and SMTP based on your needs without having to change the core logic of your email sending functionality. Make sure to test the email sending functionality on your various Unix hosts to ensure compatibility and correct configuration."
    }
]