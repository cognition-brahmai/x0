[
    {
        "role": "user",
        "content": "How can I create a C++ program to calculate the average rating for a movie across various genres, similar to an Excel table? I have the following data:\n| Genre      | Rating |\n|------------|--------|\n| Drama      | 4      |\n| Action     | 3      |\n| Adventure  | 5      |\n| Fantasy    | 4      |\n| Thriller   | 3      |\n| Animation  | 4      |\n| Documentary| 4      |\nAlso, how can I modify the program to find the highest and lowest rated genres for the movie and display them in the table as well?"
    },
    {
        "role": "assistant",
        "content": "To create a C++ program that calculates the average rating for a movie across various genres and identifies the highest and lowest rated genres, you can follow these steps. First, you'll need to store the data in an appropriate data structure, calculate the average, and then find the highest and lowest ratings. Here's a simple implementation:\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <string>\n\n// Structure to hold genre and corresponding rating\nstruct GenreRating {\n    std::string genre;\n    int rating;\n};\n\n// Function to calculate average rating\ndouble calculateAverageRating(const std::vector<GenreRating>& ratings) {\n    int totalRating = 0;\n    for (const auto& gr : ratings) {\n        totalRating += gr.rating;\n    }\n    return static_cast<double>(totalRating) / ratings.size();\n}\n\n// Function to find the highest and lowest rated genres\nvoid findHighestAndLowestRatings(const std::vector<GenreRating>& ratings, \n                                 std::string& highestGenre, int& highestRating, \n                                 std::string& lowestGenre, int& lowestRating) {\n    highestRating = ratings.front().rating;\n    lowestRating = ratings.front().rating;\n    highestGenre = ratings.front().genre;\n    lowestGenre = ratings.front().genre;\n\n    for (const auto& gr : ratings) {\n        if (gr.rating > highestRating) {\n            highestRating = gr.rating;\n            highestGenre = gr.genre;\n        }\n        if (gr.rating < lowestRating) {\n            lowestRating = gr.rating;\n            lowestGenre = gr.genre;\n        }\n    }\n}\n\nint main() {\n    // Initialize the vector with data\n    std::vector<GenreRating> ratings = {\n        {\"Drama\", 4},\n        {\"Action\", 3},\n        {\"Adventure\", 5},\n        {\"Fantasy\", 4},\n        {\"Thriller\", 3},\n        {\"Animation\", 4},\n        {\"Documentary\", 4}\n    };\n\n    // Calculate the average rating\n    double averageRating = calculateAverageRating(ratings);\n    std::cout << \"Average Rating: \" << averageRating << std::endl;\n\n    // Find the highest and lowest rated genres\n    std::string highestGenre, lowestGenre;\n    int highestRating, lowestRating;\n    findHighestAndLowestRatings(ratings, highestGenre, highestRating, lowestGenre, lowestRating);\n\n    std::cout << \"Highest Rated Genre: \" << highestGenre << \" with Rating \" << highestRating << std::endl;\n    std::cout << \"Lowest Rated Genre: \" << lowestGenre << \" with Rating \" << lowestRating << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Data Structure**: We use a `struct` named `GenreRating` to hold the genre and its corresponding rating. We then store these pairs in a `std::vector`.\n\n2. **Average Calculation**: The function `calculateAverageRating` takes the vector of `GenreRating` structures and calculates the average by summing all ratings and dividing by the number of genres.\n\n3. **Finding Extremes**: The function `findHighestAndLowestRatings` iterates through the vector to find the highest and lowest ratings, updating the corresponding genre names.\n\n4. **Output**: The program outputs the average rating alongside the highest and lowest rated genres.\n\nThis program can be easily modified for additional functionalities or different data."
    }
]