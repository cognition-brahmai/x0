[
    {
        "role": "user",
        "content": "I am trying to run a Django allauth example on OS X 10.9.1 and it is failing when it tries to send an email. The error message that I receive is as follows:\n\n```\nFile \"/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/socket.py\", line 571, in create_connection\nraise err\nerror: [Errno 61] Connection refused\n```\n\nWhat could be causing this issue and how can I resolve it?"
    },
    {
        "role": "assistant",
        "content": "The error message you're encountering indicates that your application is trying to connect to an email server, but the connection is being refused. This usually happens because either the server is not running, the connection details are incorrect, or network issues are preventing the connection.\n\nHere are some steps you can take to troubleshoot and resolve the issue:\n\n1. **Check SMTP Server Configuration**: \n   - Ensure that the SMTP server details (host, port, username, password) in your Django settings are correct. The settings should be configured in your `settings.py` file under the `EMAIL_BACKEND` and related settings like `EMAIL_HOST`, `EMAIL_PORT`, `EMAIL_HOST_USER`, and `EMAIL_HOST_PASSWORD`.\n\n2. **Local SMTP Server**:\n   - If you are using a local SMTP server for development, ensure that it is running. You can use tools like MailHog or a local SMTP server like Postfix on OS X for testing purposes.\n\n3. **Network Issues**:\n   - Check if there are any network issues or firewall settings that might be blocking outgoing connections on the specified port.\n\n4. **Use a Different Port**:\n   - If you're using port 25, try using port 587 or 465, which are commonly used for secure SMTP connections.\n\n5. **Check for SSL/TLS Settings**:\n   - If your email service provider requires a secure connection, you may need to enable TLS or SSL. Make sure `EMAIL_USE_TLS` or `EMAIL_USE_SSL` is set to `True` if required.\n\n6. **Test Connection Independently**:\n   - Try connecting to the SMTP server using a command-line tool like `telnet` or `openssl` to ensure that the server is reachable.\n\n7. **Use a Different Email Backend for Testing**:\n   - During development, you might want to use Django's console email backend to print emails to the console instead of sending them:\n     ```python\n     EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'\n     ```\n\n8. **Check for Application-Specific Passwords**:\n   - If you're using a service like Gmail, ensure that you've set up an application-specific password if two-factor authentication is enabled on your account.\n\nBy following these steps, you should be able to identify and resolve the issue preventing your Django application from sending emails."
    }
]