[
    {
        "role": "user",
        "content": "I am working on finding the Full Width at Half Maximum (FWHM) of a peak in my data. I have been able to calculate the FWHM of individual peaks (green and magenta) that constitute the main peak (blue) using the formula `fwhm = 2*np.sqrt(2*(math.log(2)))*sd`, where `sd` is the standard deviation. I have the standard deviation because I created these peaks using the function:\n\n```python\ndef make_norm_dist(self, x, mean, sd):\n    import numpy as np\n\n    norm = []\n    for i in range(x.size):\n        norm += [1.0/(sd*np.sqrt(2*np.pi))*np.exp(-(x[i] - mean)**2/(2*sd**2))]\n    return np.array(norm) \n```\n\nHowever, if I only had the blue peak in my data and didn't know it was made up of two peaks, how would I find the FWHM? I have written a code snippet to find the peak top:\n\n```python\npeak_top = 0.0e-1000\nfor i in x_axis:\n    if i > peak_top:\n        peak_top = i\n```\n\nI could potentially divide `peak_top` by 2 to find the half height and then try to find y-values corresponding to the half height. However, I would encounter issues if there are no x-values exactly matching the half height. Is there a more efficient solution to this problem?"
    },
    {
        "role": "assistant",
        "content": "To find the Full Width at Half Maximum (FWHM) of a peak when you only have the combined peak (blue) and no knowledge of the individual components, you can use interpolation to determine the x-values at which the peak reaches half its maximum height. Here's a step-by-step approach to achieve this:\n\n1. **Identify the Peak Maximum**: First, find the maximum value of the peak. This can be done efficiently using `numpy`:\n\n   ```python\n   import numpy as np\n\n   peak_top = np.max(y_values)  # Assuming y_values is your data array for the y-axis\n   ```\n\n2. **Calculate Half Maximum**: Compute the half maximum value:\n\n   ```python\n   half_max = peak_top / 2\n   ```\n\n3. **Find Indices Around the Half Maximum**: Determine the x-values where the y-values are closest to the half maximum. You can use `numpy` to find these indices:\n\n   ```python\n   # Indices where the data crosses the half maximum value\n   indices = np.where(y_values >= half_max)[0]\n   ```\n\n4. **Interpolate to Find Exact X-Values**: Use linear interpolation to find the precise x-values where the data hits the half maximum. This is necessary because the data points might not exactly align with the half maximum:\n\n   ```python\n   x1 = x_axis[indices[0]]\n   x2 = x_axis[indices[-1]]\n\n   # Linear interpolation for more accurate half maximum positions\n   if indices[0] > 0:\n       x1 = x_axis[indices[0]-1] + (half_max - y_values[indices[0]-1]) * (x_axis[indices[0]] - x_axis[indices[0]-1]) / (y_values[indices[0]] - y_values[indices[0]-1])\n\n   if indices[-1] < len(x_axis) - 1:\n       x2 = x_axis[indices[-1]] + (half_max - y_values[indices[-1]]) * (x_axis[indices[-1]+1] - x_axis[indices[-1]]) / (y_values[indices[-1]+1] - y_values[indices[-1]])\n   ```\n\n5. **Calculate FWHM**: The difference between these x-values gives the FWHM:\n\n   ```python\n   fwhm = x2 - x1\n   ```\n\nThis method allows you to find the FWHM efficiently by leveraging interpolation to handle cases where data points do not exactly match the half maximum. This approach works well for smooth, continuous data where the peak shape is relatively well-defined."
    }
]