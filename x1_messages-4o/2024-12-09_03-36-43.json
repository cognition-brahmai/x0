[
    {
        "role": "user",
        "content": "I have a pandas dataframe (df) with three rows in a column named \"some_col_name\". The rows contain the strings: \"apple is delicious\", \"banana is delicious\", \"apple and banana both are delicious\". I can use the function `df.col_name.str.contains(\"apple|banana\")` to select all rows that contain either \"apple\" or \"banana\". However, I'd like to modify this function to select only the rows that contain both \"apple\" and \"banana\". Additionally, I'd like to be able to extend this to select rows that contain between 10-20 different specified words. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To select rows in a pandas DataFrame that contain multiple specified words, you can use the `str.contains()` method with a regular expression pattern. If you want to match rows that contain both \"apple\" and \"banana\", you can use the following approach:\n\n```python\nimport pandas as pd\n\n# Sample data\ndata = {\n    'some_col_name': [\n        \"apple is delicious\",\n        \"banana is delicious\",\n        \"apple and banana both are delicious\"\n    ]\n}\n\n# Create a DataFrame\ndf = pd.DataFrame(data)\n\n# Define the words you want to match\nwords_to_match = [\"apple\", \"banana\"]\n\n# Create a regular expression pattern to match all words\npattern = r\"(?=.*\\b\" + r\"\\b)(?=.*\\b\".join(words_to_match) + r\"\\b)\"\n\n# Use str.contains with the pattern and regex=True to match all words\nselected_rows = df[df['some_col_name'].str.contains(pattern, regex=True)]\n\n# Display the selected rows\nprint(selected_rows)\n```\n\n### Explanation:\n- `\\b` is a word boundary that ensures you are matching whole words.\n- `(?=.*\\bword\\b)` is a lookahead assertion that ensures the presence of the specific word anywhere in the string.\n- By joining multiple such lookahead assertions, we ensure that all specified words are present in the row for it to be selected.\n\n### Extending to More Words:\nTo extend this to more words, simply add the words to the `words_to_match` list.\n\nFor example, if you want to match rows containing \"apple\", \"banana\", and \"delicious\", you would set `words_to_match` to `[\"apple\", \"banana\", \"delicious\"]`.\n\nThis approach is flexible and can be extended to any number of words, allowing you to select rows that contain all of the specified words in your list."
    }
]