[
    {
        "role": "user",
        "content": "How can I add a custom field to my Python log format string? I want to add a new field called `app_name` which will have a different value in each script that contains this formatter. My current format string is `formatter = logging.Formatter('%(asctime)s : %(message)s')`. I am trying to pass the `app_name` value to the logger to interpolate into the format string. I have tried `logging.info('Log message', app_name='myapp')`, `logging.info('Log message', {'app_name', 'myapp'})` and `logging.info('Log message', 'myapp')` but none of these are working. How can I successfully add this to my log format?"
    },
    {
        "role": "assistant",
        "content": "To add a custom field like `app_name` to your Python log format string, you can use a custom logging filter or incorporate additional information into the logging records. Here\u2019s how you can achieve this:\n\n### Method 1: Using a Custom Logging Filter\n\n1. **Create a Custom Filter:**\n\n   You can create a custom filter that adds the `app_name` to each logging record.\n\n   ```python\n   import logging\n\n   class AppNameFilter(logging.Filter):\n       def __init__(self, app_name):\n           super().__init__()\n           self.app_name = app_name\n\n       def filter(self, record):\n           record.app_name = self.app_name\n           return True\n   ```\n\n2. **Set up the Logger:**\n\n   Add the custom filter to your logger.\n\n   ```python\n   def setup_logger(app_name):\n       logger = logging.getLogger()\n       logger.setLevel(logging.DEBUG)\n\n       # Create console handler and set level to debug\n       ch = logging.StreamHandler()\n       ch.setLevel(logging.DEBUG)\n\n       # Create formatter\n       formatter = logging.Formatter('%(asctime)s : %(app_name)s : %(message)s')\n\n       # Add formatter to ch\n       ch.setFormatter(formatter)\n\n       # Add ch to logger\n       logger.addHandler(ch)\n\n       # Add custom filter\n       logger.addFilter(AppNameFilter(app_name))\n\n       return logger\n\n   # Example usage\n   logger = setup_logger('myapp')\n   logger.info('Log message')\n   ```\n\n### Method 2: Using `LoggerAdapter`\n\nAlternatively, you can use `LoggerAdapter` to inject contextual information into your logs.\n\n1. **Setup LoggerAdapter:**\n\n   ```python\n   import logging\n\n   class CustomAdapter(logging.LoggerAdapter):\n       def process(self, msg, kwargs):\n           return '[%s] %s' % (self.extra['app_name'], msg), kwargs\n\n   # Example usage\n   logger = logging.getLogger(__name__)\n   logger.setLevel(logging.DEBUG)\n\n   # Create console handler and set level to debug\n   ch = logging.StreamHandler()\n   ch.setLevel(logging.DEBUG)\n\n   # Create formatter\n   formatter = logging.Formatter('%(asctime)s : %(message)s')\n\n   # Add formatter to ch\n   ch.setFormatter(formatter)\n\n   # Add ch to logger\n   logger.addHandler(ch)\n\n   # Wrap logger in CustomAdapter\n   adapter = CustomAdapter(logger, {'app_name': 'myapp'})\n\n   adapter.info('Log message')\n   ```\n\nBoth methods will allow you to include the `app_name` field in your log messages. You can choose the method that best fits your needs depending on how you want to manage and extend the logger's behavior."
    }
]