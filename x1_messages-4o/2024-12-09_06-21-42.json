[
    {
        "role": "user",
        "content": "In Python, how do I properly define a global variable that has class scope? Coming from a C/C++/Java background, I assume that the following code is correct:\n\n```python\nclass Shape:\n    lolwut = None\n\n    def __init__(self, default=0):\n        self.lolwut = default;\n    def a(self):\n        print self.lolwut\n    def b(self):\n        self.a()\n```\n\nIs this the proper way to declare and use a global variable in a class in Python?"
    },
    {
        "role": "assistant",
        "content": "In Python, variables defined at the class level are class variables. They are shared among all instances of the class. However, if you assign a value to the same variable name using `self` in an instance method (like in the `__init__` method), you are creating an instance variable that will mask the class variable for that instance. This is different from a \"global\" variable in the sense of the entire program, which would be defined outside of any class or function.\n\nIn your code, `lolwut` is initially defined as a class variable, but in the `__init__` method, you are setting `self.lolwut`, which creates an instance variable. Here\u2019s a breakdown of your code:\n\n```python\nclass Shape:\n    lolwut = None  # This is a class variable\n\n    def __init__(self, default=0):\n        self.lolwut = default  # This is an instance variable\n\n    def a(self):\n        print(self.lolwut)  # This accesses the instance variable\n\n    def b(self):\n        self.a()\n```\n\nThis approach is correct if your intention is to have a class variable that can be overridden by an instance variable. If you want `lolwut` to be a truly shared class-level variable, you should avoid setting it via `self` in the `__init__` method. Instead, you can access it directly through the class name. Here's how you might adjust it:\n\n```python\nclass Shape:\n    lolwut = None  # Class variable\n\n    def __init__(self, default=0):\n        # If you want to set a class-level default, you might do so conditionally\n        if Shape.lolwut is None:\n            Shape.lolwut = default\n\n    def a(self):\n        print(Shape.lolwut)  # Access the class variable\n\n    def b(self):\n        self.a()\n```\n\nIn this version, `lolwut` remains a class variable, and setting it in the `__init__` method only affects the class variable if it hasn't been set yet. Keep in mind that this is just an illustrative example; the actual behavior you want depends on your specific use case.\n\nIf you want a truly global variable, you would declare it outside the class:\n\n```python\nglobal_var = None\n\nclass Shape:\n    def __init__(self, default=0):\n        global global_var\n        if global_var is None:\n            global_var = default\n\n    def a(self):\n        global global_var\n        print(global_var)\n\n    def b(self):\n        self.a()\n```\n\nThis version uses a global variable, which is shared across the entire module, not just the class."
    }
]