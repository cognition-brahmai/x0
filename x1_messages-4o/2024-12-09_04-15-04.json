[
    {
        "role": "user",
        "content": "How can I query MultiIndex index columns values in pandas? For example, if I have a DataFrame with the following structure:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom numpy.random import randint\n\nA = np.array([1.1, 1.1, 3.3, 3.3, 5.5, 6.6])\nB = np.array([111, 222, 222, 333, 333, 777])\nC = randint(10, 99, 6)\n\ndf = pd.DataFrame(zip(A, B, C), columns=['A', 'B', 'C'])\ndf.set_index(['A', 'B'], inplace=True)\n\nprint(df)\n```\n\nOutput:\n\n```python\n          C\nA   B      \n1.1 111  20\n    222  31\n3.3 222  24\n    333  65\n5.5 333  22\n6.6 777  74 \n```\n\nI want to retrieve A and B values within a certain range including repetitions. For example, \n\nQ1: A values in range [3.3, 6.6] - expected return value: [3.3, 5.5, 6.6] or [3.3, 3.3, 5.5, 6.6] in case last inclusive, and [3.3, 5.5] or [3.3, 3.3, 5.5] if not.\n\nQ2: A values in range [2.0, 4.0] - expected return value: [3.3] or [3.3, 3.3] \n\nQ3: B values in range [111, 500] with repetitions, as number of data rows in range - expected return value: [111, 222, 222, 333, 333]  \n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To query MultiIndex columns in a Pandas DataFrame, you can use the `get_level_values` method in combination with boolean indexing to filter values within a specified range. Here's how you can achieve the desired results for each of your queries:\n\n### Preparation\n\nFirst, let's recreate your DataFrame for reference:\n\n```python\nimport numpy as np\nimport pandas as pd\nfrom numpy.random import randint\n\nA = np.array([1.1, 1.1, 3.3, 3.3, 5.5, 6.6])\nB = np.array([111, 222, 222, 333, 333, 777])\nC = randint(10, 99, 6)\n\ndf = pd.DataFrame(zip(A, B, C), columns=['A', 'B', 'C'])\ndf.set_index(['A', 'B'], inplace=True)\n\nprint(df)\n```\n\n### Queries\n\n#### Q1: Retrieve A values in range [3.3, 6.6]\n\nTo get the unique `A` values within the range `[3.3, 6.6]`:\n\n```python\na_values = df.index.get_level_values('A')\nfiltered_a = a_values[(a_values >= 3.3) & (a_values <= 6.6)].unique()\nprint(filtered_a)\n```\n\nTo get `A` values with repetitions:\n\n```python\nfiltered_a_repeated = a_values[(a_values >= 3.3) & (a_values <= 6.6)]\nprint(filtered_a_repeated)\n```\n\n#### Q2: Retrieve A values in range [2.0, 4.0]\n\nTo get the unique `A` values within the range `[2.0, 4.0]`:\n\n```python\nfiltered_a_2 = a_values[(a_values >= 2.0) & (a_values <= 4.0)].unique()\nprint(filtered_a_2)\n```\n\nTo get `A` values with repetitions:\n\n```python\nfiltered_a_2_repeated = a_values[(a_values >= 2.0) & (a_values <= 4.0)]\nprint(filtered_a_2_repeated)\n```\n\n#### Q3: Retrieve B values in range [111, 500] with repetitions\n\nTo get `B` values with repetitions within the range `[111, 500]`:\n\n```python\nb_values = df.index.get_level_values('B')\nfiltered_b = b_values[(b_values >= 111) & (b_values <= 500)]\nprint(filtered_b)\n```\n\nThese snippets will help you filter `A` and `B` values based on the specified conditions, accommodating both unique and repeated values as per your requirements."
    }
]