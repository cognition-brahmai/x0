[
    {
        "role": "user",
        "content": "I am trying to add information to an exception in Python, but am encountering some issues. The goal is to achieve a traceback that shows `IOError('Stuff Happens at arg1')`, but instead, I am getting `IOError('Stuff')`. The code I am using to try and accomplish this is as follows:\n\n```python\ndef foo():\n   try:\n       raise IOError('Stuff ')\n   except:\n       raise\n\ndef bar(arg1):\n    try:\n       foo()\n    except Exception as e:\n       e.message = e.message + 'happens at %s' % arg1\n       raise\n\nbar('arg1')\n```\n\nCan anyone provide some guidance on how to achieve this, in both Python 2 and Python 3?"
    },
    {
        "role": "assistant",
        "content": "In both Python 2 and Python 3, you can modify the exception message by creating a new exception with the modified message and raising it. Here is how you can achieve that in both versions:\n\n### Python 2:\n\nIn Python 2, exceptions have a `message` attribute, but it's generally better to work with the string representation of the exception. Here's how you can do it:\n\n```python\ndef foo():\n    try:\n        raise IOError('Stuff ')\n    except:\n        raise\n\ndef bar(arg1):\n    try:\n        foo()\n    except IOError as e:\n        raise IOError(e.args[0] + 'happens at %s' % arg1)\n\nbar('arg1')\n```\n\n### Python 3:\n\nIn Python 3, `message` is not a standard attribute of exceptions. Instead, you can access the message via the `args` attribute or simply use the `str()` function on the exception. Here's how you can do it:\n\n```python\ndef foo():\n    try:\n        raise IOError('Stuff ')\n    except:\n        raise\n\ndef bar(arg1):\n    try:\n        foo()\n    except IOError as e:\n        # Create a new IOError with the modified message\n        new_message = str(e) + 'happens at %s' % arg1\n        raise IOError(new_message) from e\n\nbar('arg1')\n```\n\n### Explanation:\n\n- In both versions, when you catch the exception, you retrieve its message using `str(e)` or `e.args[0]`.\n- You then create a new exception with the modified message.\n- In Python 3, using `raise <exception> from e` helps maintain the original traceback, providing a clearer stack trace.\n\nBy following these examples, you should be able to modify and display the exception message as intended in both Python 2 and Python 3."
    }
]