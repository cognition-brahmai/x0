[
    {
        "role": "user",
        "content": "Is there a way in SQLAlchemy to add custom methods to the query object? Specifically, I would like to create a method like 'all_active()', which is essentially equivalent to '.filter(User.is_active == True)', and would allow me to further filter results like so: 'User.query.all_active().filter(User.age == 30)'."
    },
    {
        "role": "assistant",
        "content": "Yes, you can extend SQLAlchemy's query capabilities by creating a custom query class and defining your custom methods there. You can then associate this custom query class with your model by setting the `query_class` attribute. Here's how you can achieve this:\n\n1. **Define a Custom Query Class**: Create a subclass of `BaseQuery` (or `Query` depending on your version of SQLAlchemy) and add your custom methods.\n\n2. **Use the Custom Query Class in Your Model**: Set the `query_class` attribute of your model to use the custom query class.\n\nHere's a step-by-step implementation:\n\n```python\nfrom sqlalchemy.orm import Query\nfrom flask_sqlalchemy import SQLAlchemy\n\n# If you're using Flask-SQLAlchemy\ndb = SQLAlchemy()\n\nclass CustomQuery(Query):\n    def all_active(self):\n        return self.filter(User.is_active == True)\n\n# Example User model\nclass User(db.Model):\n    __tablename__ = 'users'\n    id = db.Column(db.Integer, primary_key=True)\n    is_active = db.Column(db.Boolean, default=True)\n    age = db.Column(db.Integer)\n\n    # Use the custom query class\n    query_class = CustomQuery\n\n# Usage\nactive_users = User.query.all_active().filter(User.age == 30).all()\n```\n\n### Explanation:\n\n- **CustomQuery Class**: This class inherits from `Query` and defines a new method `all_active`, which applies the filter for active users.\n\n- **User Model**: In the `User` model, we set `query_class` to `CustomQuery`, so that any query operations performed on `User` objects will use this custom query class.\n\n- **Usage**: You can now use `all_active` as part of your query chain, just like any other query method.\n\nThis approach allows you to encapsulate common query logic and make your code more readable and maintainable."
    }
]