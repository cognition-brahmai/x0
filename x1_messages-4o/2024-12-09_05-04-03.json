[
    {
        "role": "user",
        "content": "I am working on a Jupyter Notebook and I am able to display two plots side by side. However, I am struggling to display a dataframe next to a plot. Currently, whenever I print out the dataframe, it appears below my plot. Here is the code I am currently using:\n\n```python\n# line plots\ndf_plot[['DGO %chg','DLM %chg']].plot(figsize=(15,5),grid=True)\nplt.ylim((-ylim,ylim))\n\ndf_plot[['Diff']].plot(kind='area',color='lightgrey',figsize=(15,1))\nplt.xticks([])\nplt.xlabel('')\nplt.ylim((0,ylim_diff))\nplt.show()\n\n# scatter plots\nplt.scatter(x=df_scat[:-7]['DGO'],y=df_scat[:-7]['DLM'])\nplt.scatter(x=df_scat[-7:]['DGO'],y=df_scat[-7:]['DLM'],color='red')\nplt.title('%s Cluster Last 7 Days'%asset)\nplt.show()\n\n# display dataframe\n# display(df_scat[['DGO','DLM']][:10]) <-- prints underneath, not working\n```\n\nI'd like the dataframe to appear in the red box area in my output. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To display a DataFrame next to a plot in a Jupyter Notebook, you can use the `matplotlib` library's `subplot` functionality along with the `pandas` DataFrame's `plot` method. You can also use the `plotly` library for more interactive plots, but below I'll show you how to achieve this using `matplotlib`.\n\nHere's how you can modify your code to display the DataFrame alongside your plots:\n\n```python\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n# Assuming df_plot and df_scat are your dataframes\n# line plots\nfig, ax = plt.subplots(2, 2, figsize=(15, 10))\n\n# Plot the first line plot\ndf_plot[['DGO %chg', 'DLM %chg']].plot(ax=ax[0, 0], grid=True)\nax[0, 0].set_ylim((-ylim, ylim))\nax[0, 0].set_title('Line Plot')\n\n# Plot the area plot\ndf_plot[['Diff']].plot(kind='area', color='lightgrey', ax=ax[1, 0])\nax[1, 0].set_xticks([])\nax[1, 0].set_xlabel('')\nax[1, 0].set_ylim((0, ylim_diff))\nax[1, 0].set_title('Area Plot')\n\n# Plot the scatter plot\nax[0, 1].scatter(x=df_scat[:-7]['DGO'], y=df_scat[:-7]['DLM'])\nax[0, 1].scatter(x=df_scat[-7:]['DGO'], y=df_scat[-7:]['DLM'], color='red')\nax[0, 1].set_title('%s Cluster Last 7 Days' % asset)\n\n# Hide the last subplot (bottom right)\nax[1, 1].axis('off')\n\n# Adjust layout\nplt.tight_layout()\n\n# Display the dataframe as a table in the bottom right plot\nax[1, 1].axis('off')  # Turn off the axis\ntable = ax[1, 1].table(cellText=df_scat[['DGO', 'DLM']][:10].values,\n                       colLabels=['DGO', 'DLM'],\n                       cellLoc='center',\n                       loc='center')\ntable.auto_set_font_size(False)\ntable.set_fontsize(10)\ntable.scale(1.2, 1.2)\n\nplt.show()\n```\n\n### Explanation:\n- `fig, ax = plt.subplots(2, 2, figsize=(15, 10))`: This creates a 2x2 grid of plots.\n- Each plot is assigned to a specific location in the grid using `ax[row, col]`.\n- The DataFrame is displayed as a table in the bottom right subplot using `ax[1, 1].table(...)`.\n- `ax[1, 1].axis('off')` turns off the axis for the subplot where the table is displayed.\n- The `plt.tight_layout()` function is used to adjust the spacing between subplots to prevent overlap.\n\nThis approach will display your DataFrame next to your plots in a structured manner. Adjust the layout and figure size as needed to fit your data and preferences."
    }
]