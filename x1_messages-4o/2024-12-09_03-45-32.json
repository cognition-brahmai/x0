[
    {
        "role": "user",
        "content": "How can I dynamically insert a table name into a SQL query in sqlite3? I am trying to use a placeholder \"?\" but it's giving me an \"sqlite3.OperationalError: near \"?\": syntax error\". Here's my code:\n\n```python\ngroup_food = (group, food)\ngroup_food_new = (group, food, 1)\n\nwith con:\n\n    cur = con.cursor() \n    tmp = cur.execute(\"SELECT COUNT(Name) FROM (?) WHERE Name=?\", group_food)\n\n    if tmp == 0:\n        cur.execute(\"INSERT INTO ? VALUES(?, ?)\", group_food_new)\n    else: \n        times_before = cur.execute(\"SELECT Times FROM ? WHERE Name=?\", group_food)\n        group_food_update = (group, (times_before +1), food)\n\n        cur.execute(\"UPDATE ? SET Times=? WHERE Name=?\", group_food_update)\n```\n\nI've also tried using \"%s\" as a placeholder but it hasn't worked. Any suggestions on how to resolve this error?"
    },
    {
        "role": "assistant",
        "content": "In SQLite (and SQL in general), placeholders like `?` or `%s` can only be used for values, not for identifiers such as table or column names. You'll need to construct the SQL query dynamically if you want to include table names. However, constructing SQL queries dynamically can expose you to SQL injection risks, so be sure to validate or sanitize any user inputs that will be used in constructing SQL queries.\n\nHere's a revised version of your code, where the table name is inserted directly into the SQL string:\n\n```python\ngroup_food = (food,)\ngroup_food_new = (food, 1)\n\nwith con:\n    cur = con.cursor()\n    # Dynamically construct the SQL query with the table name\n    query = f\"SELECT COUNT(Name) FROM {group} WHERE Name=?\"\n    cur.execute(query, group_food)\n    tmp = cur.fetchone()[0]\n\n    if tmp == 0:\n        # Dynamically construct the SQL query with the table name\n        insert_query = f\"INSERT INTO {group} (Name, Times) VALUES(?, ?)\"\n        cur.execute(insert_query, group_food_new)\n    else:\n        # Dynamically construct the SQL query with the table name\n        select_times_query = f\"SELECT Times FROM {group} WHERE Name=?\"\n        cur.execute(select_times_query, group_food)\n        times_before = cur.fetchone()[0]\n\n        group_food_update = (times_before + 1, food)\n        # Dynamically construct the SQL query with the table name\n        update_query = f\"UPDATE {group} SET Times=? WHERE Name=?\"\n        cur.execute(update_query, group_food_update)\n```\n\nIn this version, I'm using f-strings (or you could use string concatenation) to dynamically include the table name in the queries. Note that I've adjusted the tuple parameters to match the required values for the queries.\n\nAlways ensure that the `group` variable is validated or sanitized to avoid SQL injection, especially if it's coming from user input or an untrusted source."
    }
]