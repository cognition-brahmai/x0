[
    {
        "role": "user",
        "content": "I am trying to create square subplots of equal height and width in matplotlib using the following code:\n\n```python\nfrom pylab import *\n\nfigure()\nax1 = subplot(121)\nplot([1, 2, 3], [1, 2, 3])\nsubplot(122, sharex=ax1, sharey=ax1)\nplot([1, 2, 3], [1, 2, 3])\ndraw()\nshow()\n```\n\nBut I get two subplots which are \"squished\" in the X-dimension. I want these subplots such that the height of the Y-axis equals the width of the X-axis, for both subplots. How can I achieve this?\n\nI am using matplotlib v.0.99.1.2 on Ubuntu 10.04. Also, I have tried disabling auto-scaling and setting the aspect ratio to 'equal', but I am still unable to get the desired output. The code either results in auto-scaling or, in some cases, the data or the subplot itself disappears. How can I solve this issue?"
    },
    {
        "role": "assistant",
        "content": "To create square subplots of equal height and width in matplotlib, you need to adjust the aspect ratio of the axes and ensure that the layout of the figure allows for enough space to maintain this ratio. You can achieve this by specifying the `aspect` parameter of the `Axes` object, using `GridSpec` for more control over subplot placement, and possibly adjusting the figure size. Here's how you can modify your code to achieve the desired output:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Create a figure with a specific size\nfig = plt.figure(figsize=(8, 4))\n\n# Use GridSpec to set up the layout\ngs = fig.add_gridspec(1, 2, width_ratios=[1, 1])\n\n# First subplot\nax1 = fig.add_subplot(gs[0, 0])\nax1.plot([1, 2, 3], [1, 2, 3])\nax1.set_aspect('equal', adjustable='box')  # Set aspect ratio to 'equal'\n\n# Second subplot\nax2 = fig.add_subplot(gs[0, 1], sharex=ax1, sharey=ax1)\nax2.plot([1, 2, 3], [1, 2, 3])\nax2.set_aspect('equal', adjustable='box')  # Set aspect ratio to 'equal'\n\n# Adjust layout to prevent overlapping\nplt.tight_layout()\n\n# Show the plot\nplt.show()\n```\n\nHere's a brief explanation of the changes:\n- **GridSpec**: It provides more precise control over the subplot layout, ensuring that both subplots have equal width.\n- **Aspect Ratio**: The `set_aspect('equal', adjustable='box')` ensures that the data aspect ratio is 1:1, making the plot area square. The `adjustable='box'` ensures that the axes adjust to maintain this aspect ratio.\n- **Figure Size**: The `figsize` parameter in `plt.figure()` specifies the overall size of the figure, which helps in maintaining the square shape of the subplots.\n- **Tight Layout**: `plt.tight_layout()` automatically adjusts subplot parameters to give specified padding, preventing overlap.\n\nThese changes should help you achieve the desired square plots. Adjust the `figsize` as needed to ensure that the plots fit well on your display."
    }
]