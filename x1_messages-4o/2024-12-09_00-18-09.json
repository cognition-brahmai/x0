[
    {
        "role": "user",
        "content": "How can I pre-populate a FormView in Django with dynamic data that is not from any model? I have a FormView view, with some additional GET context supplied using get_context_data() function. The code looks like this:\n\n```python\nclass SignUpView(FormView):\n    template_name = 'pages_fixed/accounts/signup.html'\n    form_class = SignUpForm\n\n    def get_context_data(self, **kwargs):\n        context = super(SignUpView, self).get_context_data(**kwargs)\n        context = {\n            'plans':    common.plans,\n            'pricing':  common.pricing,\n        }\n        return context\n```\n\nThis works well, but I also have some values in session that I want to pre-populate into the form. These values vary depending on the user's actions on previous pages. I know from a previous post that I can pass the form into the context using `initial=`, but I am not sure if it is possible in a FormView situation like this. Is there a way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can pre-populate a form with dynamic data in a `FormView` by utilizing the `get_initial()` method. This method allows you to provide initial data for your form fields. You can override this method to fetch data from the session or any other source and set it as the initial data for your form. Here\u2019s how you can achieve this:\n\n```python\nclass SignUpView(FormView):\n    template_name = 'pages_fixed/accounts/signup.html'\n    form_class = SignUpForm\n\n    def get_context_data(self, **kwargs):\n        context = super(SignUpView, self).get_context_data(**kwargs)\n        context.update({\n            'plans':    common.plans,\n            'pricing':  common.pricing,\n        })\n        return context\n\n    def get_initial(self):\n        # Get initial data from the session\n        initial_data = super(SignUpView, self).get_initial()\n\n        # Assuming you have stored some data in the session like this:\n        # self.request.session['some_data_key'] = 'some_value'\n\n        # Fetching data from session to pre-populate the form\n        initial_data.update({\n            'field_name_1': self.request.session.get('some_data_key_1', ''),\n            'field_name_2': self.request.session.get('some_data_key_2', ''),\n            # Add more fields as necessary\n        })\n\n        return initial_data\n```\n\n### Key Points:\n\n1. **`get_initial()` Method**: This method is used to provide initial values for form fields. It returns a dictionary where the keys correspond to form field names, and the values are the data you want to populate.\n\n2. **Session Data**: You can access your session data using `self.request.session`. Use `get()` to safely retrieve values with a fallback default value (e.g., an empty string) if the key does not exist.\n\n3. **Updating Context**: In `get_context_data()`, make sure to use `context.update()` to avoid overwriting the entire context dictionary.\n\nBy following this approach, you can dynamically pre-populate your form based on session data or other sources without relying on a model."
    }
]