[
    {
        "role": "user",
        "content": "How can I add a row with the means of each column to a pandas DataFrame in a more efficient way? My DataFrame consists of sensor readings taken over time. I have written code to add another row with the means of each column, but I'm sure there could be a more efficient way. I tried using append with the means saved as a pandas Series but ended up with an undesired output. How can I achieve my desired result?"
    },
    {
        "role": "assistant",
        "content": "To efficiently add a row with the means of each column to a pandas DataFrame, you can use the `DataFrame.loc` method to directly assign the means to a new row. This method is generally more efficient and cleaner than using `append`. Here's how you can do it:\n\n```python\nimport pandas as pd\n\n# Sample DataFrame\ndata = {\n    'Sensor1': [1, 2, 3, 4],\n    'Sensor2': [5, 6, 7, 8],\n    'Sensor3': [9, 10, 11, 12]\n}\ndf = pd.DataFrame(data)\n\n# Calculate the means of each column and assign to a new row\ndf.loc['mean'] = df.mean()\n\n# Display the DataFrame with the new row\nprint(df)\n```\n\n### Explanation:\n- `df.mean()` calculates the mean of each column.\n- `df.loc['mean'] = ...` directly assigns these calculated means to a new row labeled 'mean' in the DataFrame.\n\nThis approach is efficient because it avoids the overhead of creating a new DataFrame or Series and appending it to the original DataFrame. Instead, it directly modifies the DataFrame in place."
    }
]