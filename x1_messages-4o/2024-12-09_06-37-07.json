[
    {
        "role": "user",
        "content": "How can I store 2D and 3D coordinates, in the form of numpy arrays of shape (2,10) and (3,10) respectively, in tfrecord format? I am attempting to do this using TensorFlow and my current code is returning a TypeError. Here is the code I'm using:\n\n```python\ndef _floats_feature(value):\n    return tf.train.Feature(float_list=tf.train.FloatList(value=value))\n\ntrain_filename = 'train.tfrecords'  # address to save the TFRecords file\nwriter = tf.python_io.TFRecordWriter(train_filename)\n\nfor c in range(0,1000):\n\n    #get 2d and 3d coordinates and save in c2d and c3d\n\n    feature = {'train/coord2d': _floats_feature(c2d),\n                   'train/coord3d': _floats_feature(c3d)}\n    sample = tf.train.Example(features=tf.train.Features(feature=feature))\n    writer.write(sample.SerializeToString())\n\nwriter.close()\n```\n\nWhen I run this code, I get the following error:\n```python\n  feature = {'train/coord2d': _floats_feature(c2d),\n  File \"genData.py\", line 19, in _floats_feature\nreturn tf.train.Feature(float_list=tf.train.FloatList(value=value))\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\google\\protobuf\\internal\\python_message.py\", line 510, in init\ncopy.extend(field_value)\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\google\\protobuf\\internal\\containers.py\", line 275, in extend\nnew_values = [self._type_checker.CheckValue(elem) for elem in elem_seq_iter]\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\google\\protobuf\\internal\\containers.py\", line 275, in &lt;listcomp&gt;\nnew_values = [self._type_checker.CheckValue(elem) for elem in elem_seq_iter]\n  File \"C:\\Users\\User\\AppData\\Local\\Programs\\Python\\Python36\\lib\\site-packages\\google\\protobuf\\internal\\type_checkers.py\", line 109, in CheckValue\nraise TypeError(message)\nTypeError: array([-163.685,  240.818, -114.05 , -518.554,  107.968,  427.184,\n    157.418, -161.798,   87.102,  406.318]) has type &lt;class 'numpy.ndarray'&gt;, but expected one of: ((&lt;class 'numbers.Real'&gt;,),)\n```\n\nShould I store the features as int64 or bytes? Any help with this issue would be greatly appreciated."
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to trying to pass a NumPy array directly to the `_floats_feature` function. The function expects a list of floats, not a NumPy array. You can convert the NumPy array to a list using the `.flatten()` method, which will convert the multi-dimensional array to a flat list.\n\nHere's the corrected code:\n\n```python\nimport tensorflow as tf\nimport numpy as np\n\ndef _floats_feature(value):\n    return tf.train.Feature(float_list=tf.train.FloatList(value=value))\n\ntrain_filename = 'train.tfrecords'  # address to save the TFRecords file\nwriter = tf.io.TFRecordWriter(train_filename)\n\nfor c in range(0, 1000):\n    # Example: Replace with your actual method of obtaining c2d and c3d\n    c2d = np.random.rand(2, 10)\n    c3d = np.random.rand(3, 10)\n\n    # Convert the numpy arrays to flat lists\n    c2d_flat = c2d.flatten().tolist()\n    c3d_flat = c3d.flatten().tolist()\n\n    feature = {\n        'train/coord2d': _floats_feature(c2d_flat),\n        'train/coord3d': _floats_feature(c3d_flat)\n    }\n    sample = tf.train.Example(features=tf.train.Features(feature=feature))\n    writer.write(sample.SerializeToString())\n\nwriter.close()\n```\n\n### Key Changes:\n1. **Flattening the Arrays**: Use `flatten()` to convert the 2D and 3D arrays into a 1D list. This is necessary because `tf.train.FloatList` expects a list of floats, not a NumPy array.\n\n2. **Conversion to List**: Call `.tolist()` on the flattened array to ensure it's a list of Python floats.\n\n3. **Use of `tf.io.TFRecordWriter`**: It's recommended to use `tf.io.TFRecordWriter` instead of `tf.python_io.TFRecordWriter` as it is more up-to-date with TensorFlow 2.x.\n\nThis should resolve the `TypeError` and allow you to store your 2D and 3D coordinate data into TFRecords properly."
    }
]