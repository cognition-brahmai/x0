[
    {
        "role": "user",
        "content": "I'm trying to adhere to the 80 character width guideline that PEP8 recommends for my Python code. However, I'm facing a challenge when it comes to wrapping my doctest which has results longer than 80 characters. I have a function `long_string()` that returns a string which is wider than the recommended PEP8 linewidth. Here's an example of the function:\n\n```python\ndef long_string():\n    \"\"\"\n    Returns a string which is wider than the recommended PEP8 linewidth\n\n    >>> print long_string()\n    0123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789\n\n    \"\"\"\n    return '0123456789' * 10\n```\n\nDespite trying combinations like using `# doctest: +NORMALIZE_WHITESPACE` and trying to simply wrap the line with a newline, I'm not able to figure out a solution. How can I wrap my doctest results that are longer than 80 characters?"
    },
    {
        "role": "assistant",
        "content": "When dealing with doctest outputs that exceed 80 characters, PEP8's line length guideline can indeed pose a challenge. However, you can employ a few strategies to handle this situation effectively.\n\n1. **Utilize Ellipsis (`...`) for Output Matching**: If it\u2019s acceptable for your test to match only part of the output, you can use ellipsis in the expected output. This allows you to specify only the beginning and end of the output, letting doctest fill in the gaps.\n\n    ```python\n    def long_string():\n        \"\"\"\n        Returns a string which is wider than the recommended PEP8 linewidth\n\n        >>> print(long_string())  # doctest: +ELLIPSIS\n        012345678901234567890123456789012345678901234567890123456789...\n        \"\"\"\n        return '0123456789' * 10\n    ```\n\n2. **Split the Expected Output**: If you need to check the entire output, you can split the expected output across multiple lines using string concatenation. This approach makes the doctest more readable and still adheres to the 80-character guideline.\n\n    ```python\n    def long_string():\n        \"\"\"\n        Returns a string which is wider than the recommended PEP8 linewidth\n\n        >>> print(long_string())\n        012345678901234567890123456789012345678901234567890123456789\\\n        012345678901234567890123456789\n        \"\"\"\n        return '0123456789' * 10\n    ```\n\n3. **Use `# doctest: +NORMALIZE_WHITESPACE`**: This directive is useful when your output contains varying amounts of whitespace that you want to ignore, but it doesn't help with long strings that need to be split across lines.\n\nChoose the approach that best fits your testing requirements while maintaining code readability and adherence to PEP8 guidelines."
    }
]