[
    {
        "role": "user",
        "content": "How can I configure a custom PYTHONPATH with a Virtual Machine (VM) and PyCharm? I am currently using IntelliJ with the Python plugin and the Remote Interpreter feature to communicate with my Vagrant VM. It successfully sets up the remote interpreter to use my VM's interpreter. However, I use a custom PYTHONPATH in my VM and need IntelliJ to recognize that path and include the modules from that path when developing. How can I configure the remote interpreter of IntelliJ/PyCharm to use a custom PYTHONPATH on the VM?"
    },
    {
        "role": "assistant",
        "content": "To configure a custom `PYTHONPATH` with a virtual machine (VM) and PyCharm while using the remote interpreter feature, follow these steps to ensure your custom path is recognized:\n\n1. **Access the Remote Interpreter Settings:**\n   - Open your project in PyCharm (or IntelliJ with the Python plugin).\n   - Go to `File` > `Settings` (or `PyCharm` > `Preferences` on macOS).\n   - Navigate to `Project: <your_project_name>` > `Python Interpreter`.\n   - Ensure that you have selected the remote interpreter that you set up with your VM.\n\n2. **Modify the Remote Interpreter Path Mappings:**\n   - Click on the settings (gear) icon next to the interpreter dropdown list.\n   - Choose `Show All...`.\n   - In the new window, select your remote interpreter and then click on `Edit...`.\n   - Go to the `Mappings` tab. Here, you can configure the path mappings between your local project directories and those on the VM to ensure PyCharm knows where to find your code.\n\n3. **Set Environment Variables Including PYTHONPATH:**\n   - In the same interpreter configuration window, look for an option to set environment variables (often a button labeled `Environment Variables...`).\n   - Add a new environment variable with the name `PYTHONPATH` and set its value to your custom path(s) on the VM. Use colons (:) to separate multiple paths, similar to how you would on the command line.\n\n4. **Use a Remote Python Configuration:**\n   - If you haven't already, set up a run/debug configuration that uses the remote interpreter.\n   - Go to `Run` > `Edit Configurations...`.\n   - Click on the `+` icon and select `Python` from the list.\n   - Set the target script and choose the remote interpreter in the configuration.\n   - You can also set environment variables here, ensuring `PYTHONPATH` is included.\n\n5. **Synchronize Directories:**\n   - If your custom PYTHONPATH includes directories that are not synchronized with your local project, ensure they are accessible on the VM.\n   - Consider using a tool like rsync or shared folders with your Vagrant setup to keep files synchronized, if necessary.\n\n6. **Restart PyCharm:**\n   - After making changes, it's a good idea to restart PyCharm to ensure all configurations are loaded correctly.\n\nBy following these steps, you should be able to configure your remote interpreter to recognize and use the custom `PYTHONPATH` configured on your VM, allowing you to develop with IntelliJ/PyCharm using your VM's environment effectively."
    }
]