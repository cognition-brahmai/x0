[
    {
        "role": "user",
        "content": "I'm attempting to generate a report in Python using Pandas DataFrames. My current approach involves using the `DataFrame.to_string()` method, but this writes the content to the file as a string. Is there a way to write the DataFrame to a Word document while keeping its table structure? Here is the code I'm currently using:\n\n```python\nSEMorgkeys = client.domain_organic(url, database = \"us\", display_limit = 10, export_columns=[\"Ph,Pp,Pd,Nq,Cp,Ur,Tr\"])\norg_df = pd.DataFrame(SEMorgkeys)\n\nf = open(name, 'w')\nf.write(\"\\nOrganic:\\n\")\nf.write(org_df.to_string(index=False,justify=\"left\"))\nf.close()\n```\n\nThe output currently looks like this:\n\n```text\nCPC    Keyword                        Position Difference Previous Position Search Volume Traffic (%) Url                                               \n75.92       small business factoring   0                   1                 210          11.69       https://www..com/small-business-f...\n80.19              factoring company   0                   8                1600           5.72       https://www..com/factoring-vs-ban...\n```"
    },
    {
        "role": "assistant",
        "content": "To write a Pandas DataFrame to a Word document while preserving its table structure, you can use the `python-docx` library. This library allows you to create and modify Microsoft Word documents, including adding tables that retain the structure of your DataFrame.\n\nFirst, you'll need to install the `python-docx` library if you haven't already:\n\n```bash\npip install python-docx\n```\n\nNow, you can use the following code to write your DataFrame to a Word document:\n\n```python\nfrom docx import Document\nimport pandas as pd\n\n# Assuming SEMorgkeys and org_df are already defined\nSEMorgkeys = client.domain_organic(url, database=\"us\", display_limit=10, export_columns=[\"Ph,Pp,Pd,Nq,Cp,Ur,Tr\"])\norg_df = pd.DataFrame(SEMorgkeys)\n\n# Create a new Document\ndoc = Document()\n\n# Add a title or heading\ndoc.add_heading('Organic Data', level=1)\n\n# Add a table\ntable = doc.add_table(rows=1, cols=len(org_df.columns))\n\n# Add column headers\nhdr_cells = table.rows[0].cells\nfor i, column_name in enumerate(org_df.columns):\n    hdr_cells[i].text = column_name\n\n# Add the data rows\nfor index, row in org_df.iterrows():\n    row_cells = table.add_row().cells\n    for i, item in enumerate(row):\n        row_cells[i].text = str(item)\n\n# Save the document\ndoc.save('output.docx')\n```\n\n### Explanation:\n\n- **Create a Document**: We start by creating a new Word document with `Document()`.\n- **Add a Heading**: Optionally, add a heading or title to the document with `add_heading()`.\n- **Create a Table**: We create a table in the Word document with the same number of columns as your DataFrame using `add_table()`.\n- **Add Headers**: We populate the first row with the column headers from the DataFrame.\n- **Add Data Rows**: We iterate over the DataFrame rows and add them to the table.\n- **Save the Document**: Finally, we save the document using `doc.save()`.\n\nThis code will generate a Word document with a table that reflects the structure of your DataFrame. Adjust the code as needed for your specific use case, such as modifying the file path or document styling."
    }
]