[
    {
        "role": "user",
        "content": "How can I flatten a nested dictionary in Python such that I compress keys? For example, if I have a dictionary like:\n\n```python\n{'a': 1,\n 'c': {'a': 2,\n       'b': {'x': 5,\n             'y' : 10}},\n 'd': [1, 2, 3]}\n```\n\nHow can I transform this into:\n\n```python\n{'a': 1,\n 'c_a': 2,\n 'c_b_x': 5,\n 'c_b_y': 10,\n 'd': [1, 2, 3]}\n```"
    },
    {
        "role": "assistant",
        "content": "To flatten a nested dictionary in Python, you can write a recursive function that traverses the dictionary, appending keys to form the compressed key structure. Here is one way to achieve this using a recursive approach:\n\n```python\ndef flatten_dict(d, parent_key='', sep='_'):\n    items = {}\n    for k, v in d.items():\n        new_key = f\"{parent_key}{sep}{k}\" if parent_key else k\n        if isinstance(v, dict):\n            items.update(flatten_dict(v, new_key, sep=sep))\n        else:\n            items[new_key] = v\n    return items\n\n# Example usage:\nnested_dict = {\n    'a': 1,\n    'c': {\n        'a': 2,\n        'b': {\n            'x': 5,\n            'y': 10\n        }\n    },\n    'd': [1, 2, 3]\n}\n\nflattened_dict = flatten_dict(nested_dict)\nprint(flattened_dict)\n```\n\nThis will output:\n\n```python\n{'a': 1, 'c_a': 2, 'c_b_x': 5, 'c_b_y': 10, 'd': [1, 2, 3]}\n```\n\n### Explanation:\n\n- **Function `flatten_dict`**: This is a recursive function that takes a dictionary `d`, a `parent_key` to build the flattened keys, and a separator `sep` (default is '_').\n  \n- **Iteration**: The function iterates over each key-value pair in the dictionary. \n\n- **Key Construction**: For each key, it constructs a new key by concatenating the `parent_key` and the current key, separated by `sep`. If there is no `parent_key`, it simply uses the current key.\n\n- **Recursive Case**: If the value is a dictionary, it recursively calls `flatten_dict` on the value with the new key as the `parent_key`.\n\n- **Base Case**: If the value is not a dictionary, it adds the key-value pair to the `items` dictionary.\n\n- **Result**: The function returns the flattened dictionary."
    }
]