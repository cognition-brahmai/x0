[
    {
        "role": "user",
        "content": "I'm working with a Python program that writes to a log file, which is being rotated by Linux's logrotate command. How can I signal my program to stop writing to the old log file and start writing to the new one once rotation occurs? Currently, I am opening the file with the following code: \n\n```python\nlogging.basicConfig(format='%(asctime)s:%(filename)s:%(levelname)s:%(message)s',filename=log_file, level=logging.INFO)\n```\n\nAnd writing to it using this: \n\n```python\nlogging.log(level,\"%s\" % (msg))\n```\n\nThe logging modules seem quite complex, so I'd appreciate some guidance on this."
    },
    {
        "role": "assistant",
        "content": "When you're using log rotation with Linux's `logrotate`, you need to ensure that your Python logging configuration can handle the rotation smoothly. The standard approach is to use a `RotatingFileHandler` or `TimedRotatingFileHandler` from the `logging` module, which can manage log rotation internally without relying on external tools like `logrotate`. However, if you still want to use `logrotate`, you need to handle the reopening of the log file after rotation.\n\nHere's how you can achieve this:\n\n### Using `RotatingFileHandler` or `TimedRotatingFileHandler`\nIf you have the flexibility to modify your logging setup, you can switch to using these handlers which will handle log file rotation for you:\n\n```python\nimport logging\nfrom logging.handlers import RotatingFileHandler\n\nlog_file = 'your_log_file.log'\n\n# Configure logging\nhandler = RotatingFileHandler(log_file, maxBytes=10*1024*1024, backupCount=5)  # 10MB per file, keep 5 backups\nformatter = logging.Formatter('%(asctime)s:%(filename)s:%(levelname)s:%(message)s')\nhandler.setFormatter(formatter)\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nlogger.addHandler(handler)\n\n# Use logger instead of logging directly\nlogger.info(\"This is a log message\")\n```\n\n### Handling Log Rotation with `logrotate`\nIf you want to continue using `logrotate`, you need to send a signal to your process to tell it to reopen its log files. The typical approach is to use the `SIGHUP` signal. Here's how you can do it:\n\n1. **Update Your `logrotate` Configuration:**\n   Make sure your `logrotate` configuration sends a `SIGHUP` to your Python process after rotating the logs. Here\u2019s an example snippet for `logrotate`:\n\n   ```plaintext\n   /path/to/your/log/file.log {\n       daily\n       rotate 7\n       compress\n       delaycompress\n       missingok\n       notifempty\n       create 644 root root\n       postrotate\n           kill -HUP `cat /path/to/your/python_process.pid`\n       endscript\n   }\n   ```\n\n2. **Modify Your Python Program to Handle `SIGHUP`:**\n\n   In your Python program, you need to catch the `SIGHUP` signal and reopen the log file. Here\u2019s an example of how you can do this:\n\n   ```python\n   import logging\n   import signal\n   import os\n   import sys\n\n   log_file = 'your_log_file.log'\n\n   # Configure logging\n   logging.basicConfig(format='%(asctime)s:%(filename)s:%(levelname)s:%(message)s',\n                       filename=log_file, level=logging.INFO)\n\n   def reopen_log_file(signum, frame):\n       logging.shutdown()\n       logging.basicConfig(format='%(asctime)s:%(filename)s:%(levelname)s:%(message)s',\n                           filename=log_file, level=logging.INFO)\n\n   # Handle SIGHUP\n   signal.signal(signal.SIGHUP, reopen_log_file)\n\n   # Save the PID to a file so logrotate can send SIGHUP\n   with open('/path/to/your/python_process.pid', 'w') as f:\n       f.write(str(os.getpid()))\n\n   # Example logging\n   logging.info(\"This is a log message\")\n\n   # Keep the program running\n   try:\n       while True:\n           pass\n   except KeyboardInterrupt:\n       sys.exit(0)\n   ```\n\nThis setup ensures that whenever `logrotate` rotates the log file, your Python program will receive a `SIGHUP` signal, triggering the `reopen_log_file` function to close and reopen the log file, thus starting to write to the new file."
    }
]