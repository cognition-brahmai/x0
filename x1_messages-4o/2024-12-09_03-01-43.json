[
    {
        "role": "user",
        "content": "How can I retrieve a Hydra configuration object without using the @hydra.main() decorator? I have the following setup, copied and shortened from the Hydra docs:\n\nConfiguration file: config.yaml\n\n```\ndb:\n  driver: mysql\n  user: omry\n  pass: secret\n```\n\nPython file: my_app.py\n\n```\nimport hydra\n@hydra.main(config_path=\"config.yaml\")\ndef my_app(cfg):\n    print(cfg.pretty())\nif __name__ == \"__main__\":\n    my_app()\n```\n\nThis works well when I can use a decorator on the function my_app. But for small scripts and testing purposes, I want to get the cfg object outside of any function, just in a plain python script. I tried this:\n\n```\nimport hydra\ncfg = hydra.main(config_path=\"config.yaml\")(lambda x: x)()\nprint(cfg.pretty())\n```\n\nBut then cfg is just None and not the desired configuration object. It seems that the decorator does not pass on the returned values. Is there another way to get to the cfg object?"
    },
    {
        "role": "assistant",
        "content": "To retrieve a Hydra configuration object without using the `@hydra.main()` decorator, you can use the `hydra.compose()` function. This allows you to access the configuration directly in a script without the need for decorators. Here's how you can achieve that:\n\n1. Ensure that you have your `config.yaml` file in the correct directory.\n2. Use the `hydra.compose()` function to load and access the configuration.\n\nHere's an example of how you can modify your `my_app.py` script to get the configuration object directly:\n\n```python\nimport hydra\nfrom omegaconf import OmegaConf\n\n# Initialize the Hydra configuration\nhydra.initialize(config_path=\".\")\n\n# Compose the configuration object\ncfg = hydra.compose(config_name=\"config\")\n\n# Print the configuration object\nprint(OmegaConf.to_yaml(cfg))\n```\n\nIn this script:\n\n- `hydra.initialize(config_path=\".\")` initializes Hydra with the current directory as the config path.\n- `hydra.compose(config_name=\"config\")` loads the configuration file named `config.yaml`.\n- `OmegaConf.to_yaml(cfg)` is used to pretty-print the configuration object.\n\nMake sure that the path specified in `hydra.initialize()` points to the directory containing your `config.yaml` file. This approach allows you to access and manipulate the configuration object directly in a script without using the `@hydra.main()` decorator."
    }
]