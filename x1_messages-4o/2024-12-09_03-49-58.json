[
    {
        "role": "user",
        "content": "How can I create a Debian package from a Python package using python-support? The Python package is pure Python without C extensions and for testing purposes, it is a directory with an empty __init__.py file and a single Python module, package_test.py. I need to ensure that the packaging script uses python-support to provide the correct bytecode for potential multiple installations of Python on a target platform such as v2.5 and v2.6 on Ubuntu 9.04 (Jaunty Jackalope). I am finding most solutions to be hacky and don't use python-support or python-central. Can anyone guide me on how to create a Debian package from a Python package in a non-hacky way using python-support?"
    },
    {
        "role": "assistant",
        "content": "Creating a Debian package from a Python package using `python-support` can be done by following a structured process. Here's a step-by-step guide to help you package your pure Python project:\n\n### Step 1: Prepare Your Python Package\n\nAssuming your Python package directory structure looks like this:\n\n```\nmy-python-package/\n\u2502\n\u251c\u2500\u2500 package_test/\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 package_test.py\n\u2514\u2500\u2500 setup.py\n```\n\nYour `setup.py` might look something like this:\n\n```python\nfrom setuptools import setup\n\nsetup(\n    name='package_test',\n    version='0.1',\n    packages=['package_test'],\n)\n```\n\n### Step 2: Install Necessary Tools\n\nMake sure you have the necessary tools installed:\n\n```bash\nsudo apt-get update\nsudo apt-get install devscripts debhelper dh-make python-support\n```\n\n### Step 3: Create the Debian Package Structure\n\nNavigate to the directory containing your Python package and run:\n\n```bash\ncd my-python-package\ndh_make --createorig -p package-test_0.1 --single\n```\n\nThis will create a `debian/` directory with template files for packaging.\n\n### Step 4: Configure Debian Control Files\n\nEdit the `debian/control` file to specify package information:\n\n```plaintext\nSource: package-test\nSection: python\nPriority: optional\nMaintainer: Your Name <your.email@example.com>\nBuild-Depends: debhelper (>= 9), python-support\nStandards-Version: 3.9.2\nXS-Python-Version: >= 2.5\n\nPackage: package-test\nArchitecture: all\nDepends: ${python:Depends}, ${misc:Depends}\nDescription: A test package for demonstrating Debian packaging\n This is a test package for demonstrating how to create a Debian\n package from a Python package using python-support.\n```\n\n### Step 5: Configure `debian/rules`\n\nEdit the `debian/rules` file to use `python-support`. It should look like:\n\n```makefile\n#!/usr/bin/make -f\n\n%:\n\tdh $@ --with python-support\n\noverride_dh_auto_install:\n\tpython setup.py install --root=$(CURDIR)/debian/package-test --install-layout=deb\n```\n\n### Step 6: Configure `debian/compat`\n\nSet the compatibility level for debhelper. Create or edit the `debian/compat` file to contain:\n\n```plaintext\n9\n```\n\n### Step 7: Build the Package\n\nBuild your package using `debuild`. Navigate back to your package directory and run:\n\n```bash\ndebuild -us -uc\n```\n\nThis will create a `.deb` file in the parent directory.\n\n### Step 8: Verify and Test the Package\n\nAfter building the package, you can test it by installing it locally:\n\n```bash\nsudo dpkg -i ../package-test_0.1_all.deb\n```\n\nEnsure that it installs correctly and the modules are accessible under multiple Python versions, as supported by `python-support`.\n\n### Step 9: Clean Up\n\nIf needed, you can clean up the build environment using:\n\n```bash\ndebuild clean\n```\n\nThis guide provides a straightforward way to package a pure Python project into a Debian package using `python-support`, ensuring compatibility with multiple Python installations."
    }
]