[
    {
        "role": "user",
        "content": "How can I delete a specific key-value pair from an OrderedDict in Python? I've attempted to use the `dictionary.popitem(key)` method, but it seems to only remove the last item in the dictionary, even though I've provided a different key. Is it possible to remove a key-value pair located in the middle of the OrderedDict?"
    },
    {
        "role": "assistant",
        "content": "In Python, if you want to delete a specific key-value pair from an `OrderedDict`, you should use the `pop()` method instead of `popitem()`. The `pop()` method allows you to specify the key of the item you want to remove, whereas `popitem()` removes the last item in the dictionary.\n\nHere's how you can use the `pop()` method to remove a specific key-value pair from an `OrderedDict`:\n\n```python\nfrom collections import OrderedDict\n\n# Create an OrderedDict\nordered_dict = OrderedDict([\n    ('key1', 'value1'),\n    ('key2', 'value2'),\n    ('key3', 'value3'),\n    ('key4', 'value4'),\n])\n\n# Remove a specific key-value pair\nkey_to_remove = 'key2'\nif key_to_remove in ordered_dict:\n    removed_value = ordered_dict.pop(key_to_remove)\n    print(f\"Removed: ({key_to_remove}, {removed_value})\")\nelse:\n    print(f\"Key '{key_to_remove}' not found in OrderedDict.\")\n\n# Display the updated OrderedDict\nprint(\"Updated OrderedDict:\", ordered_dict)\n```\n\nThis code first checks if the key exists in the `OrderedDict` and then uses the `pop()` method to remove the specified key-value pair. The `OrderedDict` will maintain the order of the remaining elements."
    }
]