[
    {
        "role": "user",
        "content": "I have a pandas DataFrame that looks like this:\n\n```python\ndf = pd.DataFrame({\n    \"date\" : [\"2018-01-01\", \"2018-01-02\", \"2018-01-03\", \"2018-01-04\"],\n    \"column1\" : [555,525,532,585],\n    \"column2\" : [50,48,49,51]\n})\n```\n\nI am able to plot `column1` using seaborn's tsplot function like this: `sns.tsplot(data=df.column1, color=\"g\")`. However, I am struggling with plotting both time series (i.e., `column1` and `column2`) on the same graph with two y-axes using seaborn. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "Seaborn's `tsplot` has been deprecated, and while Seaborn itself doesn't directly support dual y-axes, you can achieve this using Matplotlib, which is the underlying library Seaborn is built upon. Here's how you can plot both `column1` and `column2` on the same graph with two y-axes using Matplotlib:\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n# Sample DataFrame\ndf = pd.DataFrame({\n    \"date\": [\"2018-01-01\", \"2018-01-02\", \"2018-01-03\", \"2018-01-04\"],\n    \"column1\": [555, 525, 532, 585],\n    \"column2\": [50, 48, 49, 51]\n})\n\n# Ensure the 'date' column is in datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Create the figure and first axis\nfig, ax1 = plt.subplots()\n\n# Plot the first time series\nax1.plot(df['date'], df['column1'], 'g-', label='Column 1')\nax1.set_xlabel('Date')\nax1.set_ylabel('Column 1', color='g')\nax1.tick_params('y', colors='g')\n\n# Create a second y-axis and plot the second time series\nax2 = ax1.twinx()\nax2.plot(df['date'], df['column2'], 'b-', label='Column 2')\nax2.set_ylabel('Column 2', color='b')\nax2.tick_params('y', colors='b')\n\n# Add titles and legends\nfig.suptitle('Time Series Plot with Two Y-axes')\nax1.legend(loc='upper left')\nax2.legend(loc='upper right')\n\n# Show the plot\nplt.show()\n```\n\nIn this script, we use Matplotlib to create a plot with two y-axes by utilizing the `twinx()` method. The `twinx()` method creates a second y-axis sharing the same x-axis. We then plot each column on its respective axis, customizing the colors to differentiate the data series."
    }
]