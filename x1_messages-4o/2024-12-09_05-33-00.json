[
    {
        "role": "user",
        "content": "Does PostgreSQL support nested or autonomous transactions? I have a situation where I need to commit a part of my code as its own transaction. I've created a table `subtransaction_tbl` and a function in plpython3u language. However, when I run the function inside a transaction and roll it back, I find that the inserts made by the function are also rolled back. I was expecting the function's inserts to be committed independently of the parent transaction. Is there a way to achieve this in PostgreSQL or do I need to modify my plpython3u function?"
    },
    {
        "role": "assistant",
        "content": "PostgreSQL does not natively support autonomous transactions or nested transactions in the way you might be expecting. In PostgreSQL, transactions are typically atomic, meaning that if the outer transaction is rolled back, all changes, including those made by any inner operations, are also rolled back. This behavior is consistent with the ACID properties of transactions.\n\nHowever, there are a few strategies you can consider to achieve a similar effect:\n\n1. **dblink or Foreign Data Wrapper (FDW):**\n   - You can use `dblink` or an FDW to connect to the same database and execute operations in a separate transaction. This effectively allows you to perform operations that are independent of the current transaction. Keep in mind that this approach involves setting up and managing a separate connection.\n\n2. **LISTEN / NOTIFY with an External Process:**\n   - You can use PostgreSQL's `LISTEN` and `NOTIFY` to signal an external process to perform the autonomous transaction. The external process can then connect to the database independently and perform the necessary operations.\n\n3. **Using Procedural Languages:**\n   - Some procedural languages like PL/pgSQL provide limited support for subtransactions using `EXCEPTION` blocks, but these are not full autonomous transactions. They're primarily used for error handling and not for committing changes independently of the main transaction.\n\n4. **Redesign the Application Logic:**\n   - If possible, redesign your application logic to avoid the need for autonomous transactions. This might involve restructuring transactions so that independent operations are handled separately.\n\nIn your case, since you're using a function written in `plpython3u`, one potential workaround is to use `dblink` within the function to perform the inserts into `subtransaction_tbl`. This way, the inserts could be committed independently of the main transaction. However, you'll need to ensure that the database connection details and permissions are correctly configured for `dblink` to work."
    }
]