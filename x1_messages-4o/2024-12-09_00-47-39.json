[
    {
        "role": "user",
        "content": "How can I create a Python timestamp with millisecond granularity? I am looking for a method to get a single timestamp of milliseconds (ms) since epoch using the datetime module or something similar. I need this to achieve sub 1/10th second timing for an event that happens every 750 ms, for instance, checking to see if a light is on or off. I need my log to record each check and its result with a millisecond timestamp, as full second granularity is not accurate enough for my needs. Can you provide a solution for this?"
    },
    {
        "role": "assistant",
        "content": "To create a Python timestamp with millisecond granularity, you can use the `datetime` module from the standard library, along with the `time` module. The `datetime` module allows you to work with dates and times, and you can get the current time with millisecond precision using `datetime.now()` combined with the `microsecond` attribute. Here's how you can achieve this:\n\n```python\nfrom datetime import datetime\nimport time\n\ndef get_timestamp_milliseconds():\n    # Get the current time\n    now = datetime.now()\n    # Calculate the number of milliseconds since epoch\n    milliseconds_since_epoch = int(time.mktime(now.timetuple()) * 1000 + now.microsecond / 1000)\n    return milliseconds_since_epoch\n\n# Example usage\ntimestamp_ms = get_timestamp_milliseconds()\nprint(f\"Timestamp in milliseconds: {timestamp_ms}\")\n```\n\nIn this code:\n\n1. `datetime.now()` gives you the current local date and time.\n2. `time.mktime(now.timetuple())` converts the current time to seconds since the epoch (January 1, 1970).\n3. We multiply by 1000 to convert seconds to milliseconds.\n4. `now.microsecond / 1000` converts microseconds to milliseconds, which are then added to the total milliseconds.\n\nThis will give you a timestamp with millisecond precision, which you can use to log events with the desired granularity."
    }
]