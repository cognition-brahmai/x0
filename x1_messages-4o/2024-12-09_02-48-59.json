[
    {
        "role": "user",
        "content": "What is the correct order for actual and expected in pytest? I have seen the order `assertEqual(expected, actual)` being used for the unittest package, and Pycharm with pytest prints out \"Expected:...\" and \"Actual...\" based on the order `actual==expected`. This is causing confusion for me as the source code and online documentation do not specify the correct ordering for pytest. Is there a standard convention for this in pytest like there is in JUnit and TestNG?"
    },
    {
        "role": "assistant",
        "content": "In pytest, the order for `assert` statements is typically `assert actual == expected`. This is the conventional order used in pytest, and it aligns with the natural reading of the assertion statement, which means \"assert that the actual value equals the expected value.\"\n\nThe confusion often arises because different testing frameworks and tools have different conventions. For example:\n\n- In `unittest`, the method `assertEqual(expected, actual)` is used, where the first argument is the expected value, and the second is the actual value.\n- In PyCharm and some other tools, when they output error messages for failed assertions, they might label the values as \"Expected\" and \"Actual\" based on the `actual == expected` order.\n\nHowever, in pytest, since assertions are done using Python's native `assert` statement, there is no explicit `assertEqual` method, and you simply use the equality operator `==`. As such, the order of `assert actual == expected` is both idiomatic and widely accepted. This order is usually preferred because it makes the assertion more readable and aligns with common practice in Python.\n\nWhen writing tests in pytest, it's best to follow this convention to maintain consistency and readability in your test code."
    }
]