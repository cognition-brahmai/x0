[
    {
        "role": "user",
        "content": "I am working on a Django project that is not using GAE for a company that uses Google Apps for login. I would like my users to log in to my Django project using their Google Accounts login. I am considering OpenID or maybe even OAuth. I've come across several libraries such as django-authopenid, django-openid, django-openidauth, and django-oauth. I intend to have users login with their Google accounts, instead of the native Django system, but still keep Django's permissions model for things like the admin system. This probably means automatically creating a new user record in Django the first time a new account logs in. Can anyone advise me on which library would work best or which are most active or functional?"
    },
    {
        "role": "assistant",
        "content": "To integrate Google login into your Django project, it's generally recommended to use OAuth 2.0, as OpenID has been deprecated in favor of OpenID Connect, which is built on top of OAuth 2.0. For Django, the most popular and actively maintained library to accomplish this is `social-auth-app-django`. This library provides a clean and efficient way to authenticate users using third-party services like Google.\n\nHere's a high-level overview of how you can set up Google login using `social-auth-app-django`:\n\n1. **Install the Library**:\n   You can install it via pip:\n   ```bash\n   pip install social-auth-app-django\n   ```\n\n2. **Add to Installed Apps**:\n   Add the following to your `INSTALLED_APPS` in `settings.py`:\n   ```python\n   INSTALLED_APPS = [\n       ...\n       'social_django',\n       ...\n   ]\n   ```\n\n3. **Configure Authentication Backends**:\n   Add the authentication backend in your `settings.py`:\n   ```python\n   AUTHENTICATION_BACKENDS = (\n       'social_core.backends.google.GoogleOAuth2',\n       'django.contrib.auth.backends.ModelBackend',\n   )\n   ```\n\n4. **Google OAuth Credentials**:\n   You need to create credentials in the Google Developer Console:\n   - Go to the [Google Developer Console](https://console.developers.google.com/).\n   - Create a new project.\n   - Navigate to the \"Credentials\" page.\n   - Click \"Create credentials\" and choose \"OAuth client ID\".\n   - Configure the consent screen and set the application type to \"Web application\".\n   - Add your authorized redirect URIs (e.g., `http://localhost:8000/complete/google/`).\n\n5. **Add Keys to Django Settings**:\n   Add the Google client ID and secret to your `settings.py`:\n   ```python\n   SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = 'your-client-id'\n   SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = 'your-client-secret'\n   ```\n\n6. **Set Up URL Patterns**:\n   Add the necessary URL patterns in your `urls.py`:\n   ```python\n   from django.urls import path, include\n\n   urlpatterns = [\n       ...\n       path('auth/', include('social_django.urls', namespace='social')),\n       ...\n   ]\n   ```\n\n7. **Template and Views**:\n   Implement the login functionality in your templates and views. You can use the following template snippet to initiate the Google login:\n   ```html\n   <a href=\"{% url 'social:begin' 'google-oauth2' %}\">Login with Google</a>\n   ```\n\n8. **User Model Integration**:\n   `social-auth-app-django` automatically handles user creation the first time someone logs in with Google. You can customize this behavior by defining a pipeline in `settings.py`.\n\nBy using `social-auth-app-django`, you leverage an actively maintained library that integrates well with Django's user model and permissions system, allowing you to use Google accounts for authentication while retaining Django's admin and user management capabilities."
    }
]