[
    {
        "role": "user",
        "content": "How can I find a sub-matrix in the following matrix using C++ code that has an equal number of rows and columns, whose elements add up to a target number of 23, and where each number in the matrix can only be used once?\nMatrix:\n| 4 | 5 | 1 | 9 |\n| 3 | 6 | 8 | 2 |\n| 7 | 2 | 4 | 5 |\n| 1 | 9 | 6 | 3 |\nPlease provide the C++ code for this task."
    },
    {
        "role": "assistant",
        "content": "To solve this problem, we need to find a sub-matrix within the provided matrix where the sum of the elements equals 23, and the sub-matrix must have an equal number of rows and columns. We'll iterate over possible sub-matrix sizes, and for each size, we'll iterate over possible positions within the original matrix. Here's a C++ code to find such a sub-matrix:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool findSubMatrix(const vector<vector<int>>& matrix, int target, int size) {\n    int n = matrix.size();\n\n    // Iterate over all possible top-left corners of the sub-matrix\n    for (int r = 0; r <= n - size; ++r) {\n        for (int c = 0; c <= n - size; ++c) {\n            int sum = 0;\n\n            // Calculate the sum of the sub-matrix of the given size\n            for (int i = 0; i < size; ++i) {\n                for (int j = 0; j < size; ++j) {\n                    sum += matrix[r + i][c + j];\n                }\n            }\n\n            // If the sum matches the target, print the sub-matrix\n            if (sum == target) {\n                cout << \"Sub-matrix found at (\" << r << \", \" << c << \") with size \" << size << \":\\n\";\n                for (int i = 0; i < size; ++i) {\n                    for (int j = 0; j < size; ++j) {\n                        cout << matrix[r + i][c + j] << \" \";\n                    }\n                    cout << endl;\n                }\n                return true;\n            }\n        }\n    }\n\n    return false;\n}\n\nint main() {\n    vector<vector<int>> matrix = {\n        {4, 5, 1, 9},\n        {3, 6, 8, 2},\n        {7, 2, 4, 5},\n        {1, 9, 6, 3}\n    };\n\n    int target = 23;\n\n    // Try different sizes of sub-matrix starting from 1 to 4\n    for (int size = 1; size <= matrix.size(); ++size) {\n        if (findSubMatrix(matrix, target, size)) {\n            break;\n        }\n    }\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Matrix Initialization**: We initialize the matrix using a 2D vector.\n2. **Sub-matrix Search**: We try different sizes of sub-matrices starting from 1x1 up to 4x4 (since the original matrix is 4x4).\n3. **Sum Calculation**: For each top-left corner of a possible sub-matrix, calculate the sum of that sub-matrix.\n4. **Output**: If the sum matches the target, print the sub-matrix; otherwise, continue searching.\n\nThis code stops once it finds the first valid sub-matrix that meets the conditions. Adjust it if you need all possible sub-matrices."
    }
]