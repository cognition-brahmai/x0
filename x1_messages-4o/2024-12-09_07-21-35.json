[
    {
        "role": "user",
        "content": "I'm currently using 64-bit Python 2.7.3 on Win7 64-bit and I'm experiencing crashes every time I press Control-C during the sleep period after importing scipy.stats. The interpreter does not raise a KeyboardInterrupt, it crashes and prints an error related to \"forrtl\". This issue disables me from interrupting long-running scipy calculations. Even adding my own handler after importing scipy, following a suggestion, didn't work. The error still persists. Is there any workaround for this issue?\n\nHere is the code I've been using:\n```python\nfrom scipy import stats\nimport time\ntime.sleep(3)\n```\nAnd the error message I receive:\n```python\nforrtl: error (200): program aborting due to control-C event\nImage              PC                Routine            Line        Source\n\nlibifcoremd.dll    00000000045031F8  Unknown               Unknown  Unknown\nlibifcoremd.dll    00000000044FC789  Unknown               Unknown  Unknown\nlibifcoremd.dll    00000000044E8583  Unknown               Unknown  Unknown\nlibifcoremd.dll    000000000445725D  Unknown               Unknown  Unknown\nlibifcoremd.dll    00000000044672A6  Unknown               Unknown  Unknown\nkernel32.dll       0000000077B74AF3  Unknown               Unknown  Unknown\nkernel32.dll       0000000077B3F56D  Unknown               Unknown  Unknown\nntdll.dll          0000000077C73281  Unknown               Unknown  Unknown\n```\nAnd here is the code for adding my own handler:\n```python\nfrom scipy import stats\nimport win32api\ndef doSaneThing(sig, func=None):\n    print \"Here I am\"\n    raise KeyboardInterrupt\nwin32api.SetConsoleCtrlHandler(doSaneThing, 1)\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is related to how certain libraries, particularly those involving Fortran code, interact with the Windows console and handle interrupts. The error message you're seeing is associated with Fortran runtime libraries that SciPy might be using internally.\n\nHere are a few potential workarounds and solutions you can try:\n\n1. **Upgrade Python and SciPy**: Python 2.7 is quite old and no longer supported. Consider upgrading to a more recent version of Python (at least Python 3.6 or later) and the corresponding versions of SciPy. This might resolve the issue as newer versions may have improved interrupt handling.\n\n2. **Use a Different Console**: If you're running your script in a standard Windows command prompt, try using a different console application such as Git Bash, Cygwin, or Windows Subsystem for Linux (WSL). These alternatives might handle Ctrl+C interrupts differently.\n\n3. **Run Python in a Different Environment**: Consider using a virtual environment or a tool like Anaconda to manage your Python installation. This could help with dependencies and potentially offer a more stable setup.\n\n4. **Explore Alternative Libraries**: If your use of `scipy.stats` is limited, consider using alternative Python libraries that provide similar functionality without relying on Fortran, such as NumPy or statsmodels.\n\n5. **Catch Exceptions in a Loop**: You could try wrapping your computation code in a loop that catches exceptions and handles them gracefully:\n   ```python\n   import time\n   from scipy import stats\n\n   while True:\n       try:\n           # Your code here\n           time.sleep(3)\n           break  # Exit loop if no interruption occurs\n       except KeyboardInterrupt:\n           print(\"Interrupted\")\n           break  # Handle cleanup here if necessary\n   ```\n\n6. **Custom Signal Handling**: Apart from using `win32api.SetConsoleCtrlHandler`, you can try using Python's `signal` module to handle interrupts, although this might have limitations on Windows:\n   ```python\n   import signal\n   import time\n   from scipy import stats\n\n   def signal_handler(signum, frame):\n       print('Signal handler called with signal', signum)\n       raise KeyboardInterrupt\n\n   signal.signal(signal.SIGINT, signal_handler)\n\n   try:\n       time.sleep(3)\n   except KeyboardInterrupt:\n       print(\"Interrupted\")\n   ```\n\n7. **Check for DLL Conflicts**: Ensure that there are no conflicting DLLs in your system path that might interfere with Fortran runtime libraries used by SciPy.\n\nBy trying these suggestions, you may find a solution that allows you to handle interrupts without crashing your Python interpreter."
    }
]