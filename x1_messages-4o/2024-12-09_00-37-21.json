[
    {
        "role": "user",
        "content": "Is there a built-in way in pandas to apply two different aggregating functions, let's say f1 and f2, to the same column df[\"returns\"], without having to call agg() multiple times? Let's say I have a DataFrame like this:\n```\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\n\npd.np.random.seed(0)\ndf = pd.DataFrame({\n    \"date\"    :  [dt.date(2012, x, 1) for x in range(1, 11)], \n    \"returns\" :  0.05 * np.random.randn(10), \n    \"dummy\"   :  np.repeat(1, 10)\n})\n```\nI want to do something like this:\n```\n# Assume `f1` and `f2` are defined for aggregating.\ndf.groupby(\"dummy\").agg({\"returns\": f1, \"returns\": f2})\n```\nHowever, Python doesn't allow duplicate keys. Is there any other way to input to agg()? Maybe a list of tuples [(column, function)] would work better, to apply multiple functions to the same column? But it seems agg() only accepts a dictionary. Is there a workaround for this besides defining an auxiliary function that applies both of the functions inside of it? How would this work with aggregation anyway?"
    },
    {
        "role": "assistant",
        "content": "In pandas, you can use the `agg()` method with a list of functions to apply multiple aggregating functions to the same column. This allows you to apply both `f1` and `f2` to the `returns` column without having to call `agg()` multiple times. You can achieve this by passing a dictionary where the key is the column name and the value is a list of functions. Here's how you can do it:\n\n```python\nimport pandas as pd\nimport datetime as dt\nimport numpy as np\n\nnp.random.seed(0)\ndf = pd.DataFrame({\n    \"date\": [dt.date(2012, x, 1) for x in range(1, 11)], \n    \"returns\": 0.05 * np.random.randn(10), \n    \"dummy\": np.repeat(1, 10)\n})\n\n# Define your aggregation functions\ndef f1(x):\n    return np.mean(x)\n\ndef f2(x):\n    return np.sum(x)\n\n# Apply multiple aggregating functions to the same column\nresult = df.groupby(\"dummy\").agg({\"returns\": [f1, f2]})\n\nprint(result)\n```\n\nIn this example, `f1` and `f2` are applied to the `returns` column. The result will be a DataFrame where each function's result is displayed in a separate column under the `returns` column level.\n\nThe output will look something like this:\n\n```\n       returns          \n           f1        f2\ndummy                  \n1      0.009279  0.09279\n```\n\nIn this output, `f1` and `f2` are applied to the `returns` column and the results are shown under the multi-level column headers. You can replace `f1` and `f2` with any other aggregation functions you wish to use."
    }
]