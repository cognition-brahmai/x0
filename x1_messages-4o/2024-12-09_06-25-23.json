[
    {
        "role": "user",
        "content": "How do I redirect my python script's stdout to both a file and the console? I want to set this up within the script itself, not using the command \"echo \"hello world\" | tee test.txt\" every time. I tried redirecting stdout to a file using \"sys.stdout = open('log.txt','w')\", however, the output does not show on the screen. I've also tried using the logging module but couldn't get it to work. How can I accomplish this?"
    },
    {
        "role": "assistant",
        "content": "To redirect your Python script's standard output (stdout) to both a file and the console, you can create a custom class that writes to both a file and the standard output. Here's a way to accomplish this:\n\n```python\nimport sys\n\nclass Tee:\n    def __init__(self, filename, mode='w'):\n        self.file = open(filename, mode)\n        self.stdout = sys.stdout\n\n    def write(self, message):\n        self.stdout.write(message)\n        self.file.write(message)\n\n    def flush(self):\n        self.stdout.flush()\n        self.file.flush()\n\n    def close(self):\n        self.file.close()\n\n# Usage\nsys.stdout = Tee('log.txt')\n\nprint(\"Hello, World!\")  # This will print to both the console and 'log.txt'\n\n# Remember to close the file when you're done\nsys.stdout.close()\n```\n\n### Explanation:\n1. **Custom Class `Tee`**: This class takes a filename and opens it in the specified mode. It also keeps a reference to the original `sys.stdout`.\n2. **`write` Method**: This method writes the message to both the original `sys.stdout` and the file.\n3. **`flush` Method**: Helps to ensure that all data is written out properly by flushing both the console and the file buffer.\n4. **`close` Method**: Closes the file when you're done with it to ensure that the data is saved properly and resources are released.\n\nBy redirecting `sys.stdout` to an instance of your `Tee` class, you can ensure that all print statements are logged to both the console and the file simultaneously. Just remember to call the `close` method on the `sys.stdout` to close the file when you're finished with your script.\n\nThis method gives you the flexibility to set up the redirection within the script itself without relying on external commands or tools."
    }
]