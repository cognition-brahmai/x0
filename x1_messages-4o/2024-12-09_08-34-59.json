[
    {
        "role": "user",
        "content": "In Python, is it possible to reuse @click.option decorators for multiple commands? I currently have two CLI tools that share a set of common click options. However, the common options are duplicated as shown in the code below:\n\n```python\n@click.command()\n@click.option('--foo', is_flag=True)\n@click.option('--bar', is_flag=True)\n@click.option('--unique-flag-1', is_flag=True)\ndef command_one():\n    pass\n\n@click.command()\n@click.option('--foo', is_flag=True)\n@click.option('--bar', is_flag=True)\n@click.option('--unique-flag-2', is_flag=True)\ndef command_two():\n    pass\n```\n\nI am interested in knowing if there is a way to extract the common options into a single decorator that can be applied to each function."
    },
    {
        "role": "assistant",
        "content": "Yes, you can definitely reuse `@click.option` decorators by defining a separate decorator function for the common options and then applying it to each command. This can help you eliminate redundancy and keep your code DRY (Don't Repeat Yourself). Here's how you can do it:\n\n1. Define a decorator function for the common options.\n2. Apply this decorator to each command function.\n\nHere's a modified version of your code that demonstrates this approach:\n\n```python\nimport click\n\n# Define a decorator function for the common options\ndef common_options(func):\n    func = click.option('--foo', is_flag=True, help='Description for foo')(func)\n    func = click.option('--bar', is_flag=True, help='Description for bar')(func)\n    return func\n\n@click.command()\n@common_options\n@click.option('--unique-flag-1', is_flag=True, help='Description for unique-flag-1')\ndef command_one(foo, bar, unique_flag_1):\n    click.echo(f'Command One: foo={foo}, bar={bar}, unique_flag_1={unique_flag_1}')\n\n@click.command()\n@common_options\n@click.option('--unique-flag-2', is_flag=True, help='Description for unique-flag-2')\ndef command_two(foo, bar, unique_flag_2):\n    click.echo(f'Command Two: foo={foo}, bar={bar}, unique_flag_2={unique_flag_2}')\n\nif __name__ == '__main__':\n    # Example usage: run command_one or command_two using Click's command line interface\n    command_one()\n    # You can also test command_two by calling it similarly\n    # command_two()\n```\n\nIn this example, the `common_options` function is applied as a decorator to both `command_one` and `command_two`, which adds the common `--foo` and `--bar` options to each. The unique options are added individually to each command as needed. This approach helps maintain cleaner and more maintainable code.\n"
    }
]