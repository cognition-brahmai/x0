[
    {
        "role": "user",
        "content": "What sets up the sys.path with Python, and when does it do it? When I run the code 'import sys; print sys.path' on my Mac (Mac OS X 10.6.5, Python 2.6.1), I get a list of directories. They are grouped into 5 categories: '/Library/Python/2.6/site-packages/*.egg', '/Library/Python/2.6/site-packages', 'Frameworks/Python.framework/Versions/2.6/lib/python2.6', 'Frameworks/Python.framework/Versions/2.6/Extras/lib/python', and the PATH from the PYTHONPATH environment variable. I can add more paths using the code 'sys.path.insert(0, MORE_PATH)'. My questions are: What routines set up these paths, and when does this happen? Are some of the paths are built into python source code? Is it possible that the paths inserted with 'sys.path.insert' are ignored? I'm curious about this, as with mod_wsgi, I found the paths are not found with 'sys.path.insert'."
    },
    {
        "role": "assistant",
        "content": "The `sys.path` in Python is initialized in several steps when the Python interpreter starts. Here's a detailed breakdown of how these directories are determined and set up:\n\n1. **Built-in Paths**: Some paths are compiled into the Python interpreter itself. These typically include the standard library paths, such as `Frameworks/Python.framework/Versions/2.6/lib/python2.6`, which are determined by the Python installation configuration.\n\n2. **Environment Variables**: The `PYTHONPATH` environment variable can be used to specify additional directories where Python should look for modules. These directories are added to `sys.path` at the start of the program.\n\n3. **Site Packages**: Python includes a mechanism to automatically include additional directories via the `site` module. This module is responsible for adding directories like `/Library/Python/2.6/site-packages` and any `.egg` files or directories found within it. This happens during the initialization phase of the interpreter.\n\n4. **Current Directory**: The current working directory (the directory from which the script is run) is also included in `sys.path`. This allows for the importing of modules from the script's own directory.\n\n5. **User Customization**: If a file named `sitecustomize.py` or `usercustomize.py` exists in any of the directories on `sys.path`, they will be executed, allowing further customization of the path.\n\nRegarding the use of `sys.path.insert(0, MORE_PATH)`, this method should work correctly to add directories at runtime. However, if you're experiencing issues with `mod_wsgi` or other environments, there could be several reasons:\n\n- **mod_wsgi Configuration**: When using mod_wsgi with Apache, the environment might be different from running Python in a shell. Ensure that your `mod_wsgi` configuration doesn't override or reset the `sys.path`.\n\n- **Permissions**: Make sure that the directory you're adding with `sys.path.insert` is accessible and readable by the user running the Python process.\n\n- **Order of Execution**: Ensure that `sys.path.insert` is called before any modules that rely on the additional path are imported.\n\n- **Virtual Environments**: If you're using a virtual environment, ensure that paths are correctly set up in the context of that environment.\n\nIn general, the paths inserted with `sys.path.insert` shouldn't be ignored unless there are specific constraints or overrides in the environment or configuration. If issues persist, verifying the environment's setup and any custom configurations being applied can often help resolve the problem."
    }
]