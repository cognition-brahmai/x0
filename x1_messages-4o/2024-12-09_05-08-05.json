[
    {
        "role": "user",
        "content": "How can I retrieve class labels from a Keras functional model? I trained a functional model (Resnet50 from repo examples) using `ImageDataGenerator` and `flow_from_directory` and saved the model to a `.h5` file. When I invoke `model.predict`, I receive an array of class probabilities. However, I want to associate these probabilities with class labels (in my case - folder names). I know methods like `model.predict_classes` and `model.predict_proba` exist but they are not available in the Functional model, only in Sequential. How can I go about this?"
    },
    {
        "role": "assistant",
        "content": "To retrieve class labels from a Keras Functional model, especially when you've used `ImageDataGenerator` with `flow_from_directory`, you can follow these steps to map the predicted probabilities to their corresponding class labels:\n\n1. **Access Class Indices**: When you use `flow_from_directory`, the generator assigns an index to each class based on alphabetical order of the directory names. You can retrieve this mapping from your `ImageDataGenerator` instance.\n\n2. **Save the Class Indices**: It's a good practice to save this class-to-index mapping when you prepare your data, so you can use it later when you need to interpret predictions.\n\n3. **Load the Model and Make Predictions**: After loading your model, use the `model.predict` method to get the prediction probabilities.\n\n4. **Map Predictions to Class Labels**: Use the class indices to map the predicted probabilities to class labels.\n\nHere's a step-by-step code example:\n\n```python\nimport numpy as np\nfrom tensorflow.keras.models import load_model\nfrom tensorflow.keras.preprocessing.image import ImageDataGenerator\n\n# Load your model\nmodel = load_model('path_to_your_model.h5')\n\n# Prepare the data - make sure to use the same parameters as during training\ndatagen = ImageDataGenerator(rescale=1./255)\n\n# Use the same directory structure as used in training\ngenerator = datagen.flow_from_directory(\n    'path_to_your_validation_or_test_data',\n    target_size=(224, 224),  # Use the size your model expects\n    batch_size=32,\n    class_mode='categorical',  # or 'binary' for binary classification\n    shuffle=False  # Important to keep data order for mapping predictions\n)\n\n# Get the class indices mapping\nclass_indices = generator.class_indices\n\n# Reverse the class_indices to map indices to class labels\nclass_labels = {v: k for k, v in class_indices.items()}\n\n# Make predictions\npredictions = model.predict(generator)\n\n# Get the predicted class indices\npredicted_class_indices = np.argmax(predictions, axis=1)\n\n# Map the predicted indices to class labels\npredicted_labels = [class_labels[idx] for idx in predicted_class_indices]\n\n# Output the predicted labels\nprint(predicted_labels)\n```\n\n### Key Points:\n\n- **Ensure Consistency**: The target size and preprocessing steps (like rescaling) should match those used during training.\n- **Shuffle**: Set `shuffle=False` in the generator when predicting to ensure the order of predictions matches the order of filenames.\n- **Batch Size**: Adjust the batch size depending on your system's memory.\n\nBy following these steps, you can effectively map the predicted probabilities to the class labels corresponding to the folder names."
    }
]