[
    {
        "role": "user",
        "content": "How can I run multiple functions in parallel in Python? I have a set of functions that I want to execute simultaneously. The functions do not interact with each other or on the same object. The code I have currently forces me to wait for the first function to finish before the second can start. I have a function called `func1` and another called `func2` and I want to run them at the same time. Here's my current code:\n```python\nfiles.py\n\nimport common #common is a util class that handles all the IO stuff\n\ndir1 = 'C:\\folder1'\ndir2 = 'C:\\folder2'\nfilename = 'test.txt'\naddFiles = [25, 5, 15, 35, 45, 25, 5, 15, 35, 45]\n\ndef func1():\n   c = common.Common()\n   for i in range(len(addFiles)):\n       c.createFiles(addFiles[i], filename, dir1)\n       c.getFiles(dir1)\n       time.sleep(10)\n       c.removeFiles(addFiles[i], dir1)\n       c.getFiles(dir1)\n\ndef func2():\n   c = common.Common()\n   for i in range(len(addFiles)):\n       c.createFiles(addFiles[i], filename, dir2)\n       c.getFiles(dir2)\n       time.sleep(10)\n       c.removeFiles(addFiles[i], dir2)\n       c.getFiles(dir2)\n```\nAnd I am trying to call them like this:\n```python\nprocess.py\n\nfrom files import func1, func2\n\nrunBothFunc(func1(), func2())\n```\nBut I want them to be able to create both directories pretty close to the same time because every minute I am counting how many files are being created. If the directory isn't there it will throw off my timing."
    },
    {
        "role": "assistant",
        "content": "To run multiple functions in parallel in Python, you can use the `concurrent.futures` module, which provides a high-level interface for asynchronously executing callables. Specifically, you can use `ThreadPoolExecutor` or `ProcessPoolExecutor` depending on whether your functions are I/O-bound or CPU-bound.\n\nIn your case, since the operations seem to involve I/O tasks (such as file creation and deletion), `ThreadPoolExecutor` is appropriate. Here's how you can modify your code to run `func1` and `func2` in parallel:\n\nFirst, ensure you have the necessary imports and modify your `process.py` file to use `ThreadPoolExecutor`:\n\n```python\n# process.py\n\nfrom concurrent.futures import ThreadPoolExecutor\nfrom files import func1, func2\n\ndef runBothFunc(func1, func2):\n    with ThreadPoolExecutor(max_workers=2) as executor:\n        future1 = executor.submit(func1)\n        future2 = executor.submit(func2)\n        \n        # Optionally, wait for both futures to complete\n        future1.result()\n        future2.result()\n\n# Call the function to run both in parallel\nrunBothFunc(func1, func2)\n```\n\nIn this setup:\n\n1. `ThreadPoolExecutor(max_workers=2)` creates a thread pool with two worker threads, allowing you to run both functions in parallel.\n2. `executor.submit(func1)` and `executor.submit(func2)` schedule `func1` and `func2` to be run on separate threads.\n3. `future1.result()` and `future2.result()` are called to wait for the completion of both functions, ensuring that the main program waits for both threads to finish their execution before proceeding.\n\nThis approach should allow `func1` and `func2` to execute concurrently, thus minimizing any delays in your file processing tasks."
    }
]