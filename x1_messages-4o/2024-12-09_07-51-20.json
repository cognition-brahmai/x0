[
    {
        "role": "user",
        "content": "How can I convert three separate columns ('MONTH', 'DAY', 'YEAR') of integers in my pandas dataframe into one datetime column?\n\nFor example, I have the following dataframe:\n\n```\nM    D    Y    Apples   Oranges\n5    6  1990      12        3\n5    7  1990      14        4\n5    8  1990      15       34\n5    9  1990      23       21\n```\n\nAnd I would like to convert it into:\n\n```\nDatetimes    Apples   Oranges\n1990-6-5        12        3\n1990-7-5        14        4\n1990-8-5        15       34\n1990-9-5        23       21\n```\n\nIs there a Pythonic way to achieve this while the data is still in the dataframe?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this using the `pandas` library in Python. You can utilize the `pd.to_datetime()` function to combine your 'MONTH', 'DAY', and 'YEAR' columns into a single datetime column. Here's how you can do it:\n\n```python\nimport pandas as pd\n\n# Sample DataFrame\ndata = {\n    'M': [5, 5, 5, 5],\n    'D': [6, 7, 8, 9],\n    'Y': [1990, 1990, 1990, 1990],\n    'Apples': [12, 14, 15, 23],\n    'Oranges': [3, 4, 34, 21]\n}\n\ndf = pd.DataFrame(data)\n\n# Combine 'YEAR', 'MONTH', and 'DAY' into a single datetime column\ndf['Datetimes'] = pd.to_datetime(df[['Y', 'M', 'D']].rename(columns={'Y': 'year', 'M': 'month', 'D': 'day'}))\n\n# Drop the original 'YEAR', 'MONTH', and 'DAY' columns\ndf.drop(['M', 'D', 'Y'], axis=1, inplace=True)\n\n# Reorder the columns if necessary\ndf = df[['Datetimes', 'Apples', 'Oranges']]\n\nprint(df)\n```\n\nThis will output:\n\n```\n   Datetimes  Apples  Oranges\n0 1990-05-06      12        3\n1 1990-05-07      14        4\n2 1990-05-08      15       34\n3 1990-05-09      23       21\n```\n\nThis approach efficiently combines the separate columns into a single datetime column while keeping the data in the DataFrame."
    }
]