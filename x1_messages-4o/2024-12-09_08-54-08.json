[
    {
        "role": "user",
        "content": "How can I write a program in Java to sort an array using Insertion Sort?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Insertion Sort is a simple sorting algorithm that builds the final sorted array one element at a time. It's much less efficient on large lists than more advanced algorithms such as quicksort, heapsort, or merge sort. However, it has the advantage of being straightforward to implement and is quite efficient for small data sets.\n\nHere's a Java program to sort an array using Insertion Sort:\n\n```java\npublic class InsertionSort {\n\n    // Method to perform insertion sort on an array\n    public static void insertionSort(int[] array) {\n        int n = array.length;\n        for (int i = 1; i < n; ++i) {\n            int key = array[i];\n            int j = i - 1;\n\n            // Move elements of array[0..i-1], that are greater than key,\n            // to one position ahead of their current position\n            while (j >= 0 && array[j] > key) {\n                array[j + 1] = array[j];\n                j = j - 1;\n            }\n            array[j + 1] = key;\n        }\n    }\n\n    // Utility method to print the array\n    public static void printArray(int[] array) {\n        for (int i = 0; i < array.length; i++) {\n            System.out.print(array[i] + \" \");\n        }\n        System.out.println();\n    }\n\n    // Main method to test the insertion sort algorithm\n    public static void main(String[] args) {\n        int[] array = {12, 11, 13, 5, 6};\n\n        System.out.println(\"Original array:\");\n        printArray(array);\n\n        insertionSort(array);\n\n        System.out.println(\"Sorted array:\");\n        printArray(array);\n    }\n}\n```\n\n### How it Works:\n1. **Outer Loop**: Iterates over elements from the second position (index 1) to the last position.\n2. **Inner Loop**: Compares the current element (`key`) with the previous elements and shifts them one position to the right until it finds the correct position for the `key`.\n3. **Insertion**: Places the `key` in its correct position within the sorted portion of the array.\n4. **Print Method**: A utility to print the array before and after sorting.\n\nYou can compile and run this program in any Java environment to see how insertion sort works. This code will output the original array and the sorted array, allowing you to observe the sorting process."
    }
]