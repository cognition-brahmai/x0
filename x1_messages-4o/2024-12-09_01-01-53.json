[
    {
        "role": "user",
        "content": "How can I create a dictionary in Python where multiple keys map to a single value? I want to construct my dictionary in such a way that when I access it using any of the keys, it returns the same value. For instance, I would like to accomplish something like this:\n\n```python\ndictionary = {('a', 'b'): 1, ('c', 'd'): 2}\nassert dictionary['a'] == 1\nassert dictionary['b'] == 1\n```\nWhat approach should I use to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To create a dictionary in Python where multiple keys map to a single value, you can't directly use a standard dictionary with tuples as keys to achieve the desired behavior. Instead, you can use a different approach, such as using a dictionary comprehension or a loop to map each key individually to the desired value. Here\u2019s one way to do it:\n\n```python\n# Define the mapping where multiple keys should map to the same value\nkey_groups = {\n    ('a', 'b'): 1,\n    ('c', 'd'): 2\n}\n\n# Initialize an empty dictionary\ndictionary = {}\n\n# Loop through each group of keys and corresponding value\nfor keys, value in key_groups.items():\n    # Assign each key in the group to the value\n    for key in keys:\n        dictionary[key] = value\n\n# Test the dictionary\nassert dictionary['a'] == 1\nassert dictionary['b'] == 1\nassert dictionary['c'] == 2\nassert dictionary['d'] == 2\n\nprint(dictionary)  # Output: {'a': 1, 'b': 1, 'c': 2, 'd': 2}\n```\n\nIn this approach, we define a dictionary `key_groups` where each tuple contains the keys that should map to the same value. We then iterate over this dictionary and assign each key in the tuple to the corresponding value in a new dictionary. This way, you can access the value using any of the keys individually."
    }
]