[
    {
        "role": "user",
        "content": "Why can't I open the 'ODBC Driver 13 for SQL Server' when trying to connect to a SQL Server database with pyodbc on my Mac? I receive the following error: \n```\nError: ('01000', \"[01000] [unixODBC][Driver Manager]Can't open lib 'ODBC Driver 13 for SQL Server' : file not found (0) (SQLDriverConnect)\")\n```\nWhen I replace the driver's reference with the actual path like so:\n```\ndriver='/usr/local/lib/libmsodbcsql.13.dylib'\n```\nIt starts to work. In my `odbcinst.ini` file, I have the following configuration:\n```\n[ODBC Driver 13 for SQL Server]\nDescription=Microsoft ODBC Driver 13 for SQL Server\nDriver=/usr/local/lib/libmsodbcsql.13.dylib\nUsageCount=1\n```\nHow can I get my reference to `driver='{ODBC Driver 13 for SQL Server}'` to start working again? I followed this guide to install the driver and I'm using Anaconda on Mac Sierra."
    },
    {
        "role": "assistant",
        "content": "When you encounter issues with the `ODBC Driver 13 for SQL Server` on your Mac, it often relates to configuration problems in the `odbcinst.ini` or `odbc.ini` files, or the system's ability to locate the driver files. Here are some steps you can take to resolve the issue:\n\n1. **Verify `odbcinst.ini` Configuration**: Ensure that your `odbcinst.ini` file is correctly configured. It looks like you have already done that, but double-check the file's location. Typically, it should be in `/usr/local/etc/odbcinst.ini` or `/etc/odbcinst.ini`.\n\n2. **Check File Permissions**: Ensure that the permissions for `/usr/local/lib/libmsodbcsql.13.dylib` are set correctly so that the driver can be accessed by the user running the application. You can adjust the permissions using the `chmod` command.\n\n3. **Environment Variables**: Make sure that your environment variables are properly set up to find the ODBC driver manager and the driver itself. Specifically, check `ODBCINSTINI` and `ODBCINI` to point to the correct configuration files:\n   ```bash\n   export ODBCINI=/usr/local/etc/odbc.ini\n   export ODBCINSTINI=/usr/local/etc/odbcinst.ini\n   ```\n\n4. **Use Correct Driver Name**: Double-check that the name used in your connection string exactly matches the name specified in the `odbcinst.ini` file. It should match `[ODBC Driver 13 for SQL Server]` exactly, including case sensitivity.\n\n5. **Test with `isql`**: Use the `isql` command-line tool to test if the driver works independently of your Python script. This can help isolate whether the problem is with the configuration or your code:\n   ```bash\n   isql -v DSN_name username password\n   ```\n\n6. **Driver Symlink**: Sometimes, creating a symbolic link for the driver library can help if the system is having trouble locating it:\n   ```bash\n   ln -s /usr/local/lib/libmsodbcsql.13.dylib /usr/lib/libmsodbcsql.13.dylib\n   ```\n\n7. **Reinstall the Driver**: If none of the above solutions work, re-installing the ODBC driver may resolve any underlying issues:\n   - Remove the current ODBC driver.\n   - Follow the installation instructions meticulously, ensuring that all dependencies and configurations are correctly set up.\n\nBy following these steps, you should be able to resolve the issue and use the driver name in your connection string properly."
    }
]