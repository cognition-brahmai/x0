[
    {
        "role": "user",
        "content": "How can I set a custom default string value in Python's collections.defaultdict? I am using Python 3.2.3 and I have the following code:\n\n```python\nfrom collections import defaultdict\nd = defaultdict(str)\nd[\"NonExistent\"]\n```\n\nCurrently, this code returns an empty string `''` when a key is not found in the defaultdict. However, I want to change the default value so that it returns the string \"unknown\" instead of an empty string when a key is not found. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To set a custom default string value in Python's `collections.defaultdict`, you can provide a function that returns your desired default value. In your case, if you want to return the string \"unknown\" when a key is not found, you can use a lambda function or a simple function that returns \"unknown\". Here's how you can modify your code:\n\n```python\nfrom collections import defaultdict\n\n# Use a lambda function to return \"unknown\" as the default value\nd = defaultdict(lambda: \"unknown\")\n\n# Now, accessing a non-existent key will return \"unknown\"\nprint(d[\"NonExistent\"])  # Output: unknown\n```\n\nIn this example, `defaultdict` is initialized with a lambda function that returns \"unknown\". Whenever you access a key that doesn't exist in the dictionary, the lambda function is called, and it returns \"unknown\" as the default value."
    }
]