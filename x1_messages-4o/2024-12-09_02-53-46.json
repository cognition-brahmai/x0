[
    {
        "role": "user",
        "content": "I'm trying to use Python's `xlrd`, `xlutils.copy`, and `xlwt` modules to open a template file, copy it, fill it with new values, and save it. However, I'm having difficulty preserving the formatting of the cells. The formatting always gets reset to blank. Is there a simple way to retain the cell formatting? Here is the sample script that I'm using:\n\n```python\nfrom xlrd import open_workbook\nfrom xlutils.copy import copy\nrb = open_workbook('output_template.xls',formatting_info=True)\nrs = rb.sheet_by_index(0)\nwb = copy(rb)\nws = wb.get_sheet(0)\nfor i,cell in enumerate(rs.col(8)):\n    if not i:\n        continue\n    ws.write(i,2,22,plain)\nwb.save('output.xls')\n```\n\nI'm using the following versions:\n- `xlrd`: 0.7.1\n- `xlwt`: 0.7.2"
    },
    {
        "role": "assistant",
        "content": "When working with `xlrd`, `xlutils.copy`, and `xlwt`, it's a common issue that cell formatting isn't preserved as expected. The `xlutils.copy` module only provides a basic copy of the data and not the detailed formatting. However, there are a few ways you can try to handle this.\n\nHere's a general approach to retain the formatting while updating the cell values:\n\n### Approach:\n\n1. **Read the Existing Styles**: You need to capture the existing style of each cell that you want to modify and then apply it back after writing new data.\n\n2. **Write Using Styles**: When writing data to the new workbook, use the captured styles.\n\nHere's a sample code snippet demonstrating this approach:\n\n```python\nimport xlrd\nfrom xlutils.copy import copy\nimport xlwt\n\n# Open the workbook and sheet you're copying from\nrb = xlrd.open_workbook('output_template.xls', formatting_info=True)\nrs = rb.sheet_by_index(0)\n\n# Copy the workbook\nwb = copy(rb)\nws = wb.get_sheet(0)\n\n# Iterate over the rows you want to modify\nfor i, cell in enumerate(rs.col(8)):\n    if not i:\n        continue\n    \n    # Capture the style of the cell\n    xf_index = rs.cell_xf_index(i, 8)\n    xf = rb.xf_list[xf_index]\n    style = xlwt.XFStyle()\n    \n    # Copy number format\n    style.num_format_str = rb.format_map[xf.format_key].format_str\n    \n    # Copy font\n    font = xlwt.Font()\n    font.name = rs.book.font_list[xf.font_index].name\n    font.bold = rs.book.font_list[xf.font_index].bold\n    font.italic = rs.book.font_list[xf.font_index].italic\n    # Add other font attributes if needed\n    style.font = font\n    \n    # Write new data with the captured style\n    ws.write(i, 2, 22, style)\n\n# Save the modified workbook\nwb.save('output.xls')\n```\n\n### Notes:\n\n- **Limitations**: This approach doesn't handle all Excel features, such as conditional formatting or certain complex styles, but it should cover basic formatting like fonts, number formats, etc.\n  \n- **Dependencies**: Ensure you have the correct versions of the modules. If you encounter any issues, consider updating to the latest versions if possible.\n\n- **Alternatives**: For more robust handling of Excel files, consider using libraries like `openpyxl` or `pandas` with `xlsxwriter`, though these may involve a learning curve and might not be compatible with `.xls` files directly.\n\nThis solution aims to help you retain as much formatting as possible while updating the cell values."
    }
]