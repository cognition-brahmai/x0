[
    {
        "role": "user",
        "content": "How can I terminate a script prematurely, similar to the `die()` function in PHP?"
    },
    {
        "role": "assistant",
        "content": "In many programming languages, you can terminate a script prematurely using specific functions or statements. Here are a few examples in different languages:\n\n1. **Python**: You can use `sys.exit()` to terminate a script.\n   ```python\n   import sys\n   \n   # Some code\n   print(\"This will be printed\")\n   \n   sys.exit(\"Terminating the script\")\n   \n   # This won't be printed\n   print(\"This won't be printed\")\n   ```\n\n2. **JavaScript** (Node.js): You can use `process.exit()`.\n   ```javascript\n   // Some code\n   console.log(\"This will be printed\");\n   \n   process.exit(1); // Non-zero exit code indicates an error\n   \n   // This won't be printed\n   console.log(\"This won't be printed\");\n   ```\n\n3. **C**: You can use the `exit()` function.\n   ```c\n   #include <stdio.h>\n   #include <stdlib.h>\n   \n   int main() {\n       printf(\"This will be printed\\n\");\n       \n       exit(EXIT_FAILURE);\n       \n       printf(\"This won't be printed\\n\");\n       return 0;\n   }\n   ```\n\n4. **Ruby**: You can use `exit`.\n   ```ruby\n   puts \"This will be printed\"\n   \n   exit\n   \n   puts \"This won't be printed\"\n   ```\n\n5. **Bash**: You can use `exit`.\n   ```bash\n   #!/bin/bash\n   \n   echo \"This will be printed\"\n   \n   exit 1\n   \n   echo \"This won't be printed\"\n   ```\n\nEach of these functions will terminate the script immediately and can optionally return a status code. A non-zero status code typically indicates an error."
    }
]