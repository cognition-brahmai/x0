[
    {
        "role": "user",
        "content": "How can I import helper functions in Python test files without creating packages in the `test` directory? I am currently doing this via importing a module inside my project's `test` directory, but I'd like to use some other mechanism if possible. I want my `test` directory to contain only tests and not packages. I want to run the tests on an installed version of the package as recommended in the py.test documentation on good practices. For instance, I have a scenario where I want to create a common helper function that I can import in several tests. Here's what I am trying to achieve:\n\n```python\n# In common_file.py\ndef assert_a_general_property_between(x, y):\n    # test a specific relationship between x and y\n    assert ...\n\n# In test/my_test.py\ndef test_something_with(x):\n    some_value = some_function_of_(x)\n    assert_a_general_property_between(x, some_value)\n```\nI am using Python 3.5 with py.test 2.8.2."
    },
    {
        "role": "assistant",
        "content": "To achieve the desired structure without turning your `test` directory into a package, you can organize your helper functions in a way that still allows for easy importing in your test files. Here are a few strategies you can consider:\n\n### Strategy 1: Use a `conftest.py` File\nThe `conftest.py` file is a special configuration file for pytest, which can be used to define fixtures, hooks, and helper functions. You can place your helper functions in `conftest.py` and they will be available for import in your test files. Here\u2019s how you can do it:\n\n1. Create a `conftest.py` file in your `test` directory.\n\n```python\n# test/conftest.py\ndef assert_a_general_property_between(x, y):\n    # test a specific relationship between x and y\n    assert ...\n```\n\n2. Import the helper function in your test file:\n\n```python\n# test/my_test.py\nfrom .conftest import assert_a_general_property_between\n\ndef test_something_with(x):\n    some_value = some_function_of_(x)\n    assert_a_general_property_between(x, some_value)\n```\n\n### Strategy 2: Use a Separate Helpers Directory\nYou can create a separate directory for helper functions outside of the `test` directory, and add this directory to your `PYTHONPATH`. This keeps your `test` directory clean and allows you to use the helper functions in both your tests and potentially other parts of your code.\n\n1. Create a `helpers` directory at the root level of your project (parallel to `test`).\n\n```\nyour_project/\n\u2502\n\u251c\u2500\u2500 helpers/\n\u2502   \u2514\u2500\u2500 common_file.py\n\u2502\n\u2514\u2500\u2500 test/\n    \u2514\u2500\u2500 my_test.py\n```\n\n2. Add `helpers` to your `PYTHONPATH` or use it directly in your test files:\n\n```python\n# test/my_test.py\nimport sys\nfrom pathlib import Path\n\n# Add the helpers directory to the sys.path\nhelpers_path = Path(__file__).resolve().parent.parent / \"helpers\"\nsys.path.append(str(helpers_path))\n\nfrom common_file import assert_a_general_property_between\n\ndef test_something_with(x):\n    some_value = some_function_of_(x)\n    assert_a_general_property_between(x, some_value)\n```\n\n### Strategy 3: Use Environment Variables or a Test Runner Script\nAnother approach is to set up your environment or test runner script to include the path to your helper functions:\n\n1. Create a script that sets the `PYTHONPATH` and runs your tests:\n\n```bash\n# run_tests.sh\nexport PYTHONPATH=$PYTHONPATH:./helpers\npytest test/\n```\n\n2. Use the helper functions in your test files as usual:\n\n```python\n# test/my_test.py\nfrom common_file import assert_a_general_property_between\n\ndef test_something_with(x):\n    some_value = some_function_of_(x)\n    assert_a_general_property_between(x, some_value)\n```\n\nBy using one of these strategies, you can maintain the recommended structure of your `test` directory while still accessing your helper functions efficiently."
    }
]