[
    {
        "role": "user",
        "content": "Why am I encountering a \"referenced before assignment\" error in Python when trying to assign a value to a global variable within a function? I declared the variable 'total' as global at the start of the file and assigned it a value of 0 before the function that uses it. But when I try to run the program, I get the following error: \n<pre><code>UnboundLocalError: local variable 'total' referenced before assignment\n</code></pre>\nI've attempted to assign the value 0 to the variable in different locations, such as at the top of the file after declaring it, but I'm still encountering the error. Can anyone identify what I'm doing wrong?"
    },
    {
        "role": "assistant",
        "content": "The error message you're encountering, `UnboundLocalError: local variable 'total' referenced before assignment`, typically arises when Python determines that a variable is being referenced before it has been assigned a value within a function's local scope. This can happen even if you have declared the variable as global elsewhere in your code.\n\nHere are some steps to resolve this issue:\n\n1. **Declare the Variable as Global Inside the Function:**\n   If you want to modify a global variable inside a function, you need to explicitly declare it as global within that function using the `global` keyword. Here's how you can do it:\n\n   ```python\n   total = 0  # Declare and initialize the global variable\n\n   def some_function():\n       global total  # Declare 'total' as global within the function\n       total += 10   # Modify the global variable\n\n   some_function()\n   print(total)  # This should print 10\n   ```\n\n2. **Ensure Consistent Use of the Global Keyword:**\n   You should use the `global` keyword in every function where you intend to modify the global variable. Just declaring it once at the top of your file is not sufficient for functions in Python.\n\n3. **Avoid Unintentional Local Variables:**\n   If you accidentally assign a value to a variable with the same name inside a function (without using `global`), Python treats it as a local variable. This can lead to the error you're seeing if you're trying to read its value before assignment within that function.\n\n4. **Check for Typos:**\n   Make sure there are no typos in your variable name, as Python is case-sensitive, and a small typo can lead to a new local variable being created.\n\nBy ensuring that you declare the variable as `global` inside each function where you intend to modify it, you should be able to resolve the error. If you follow the steps above and are still encountering issues, please provide a code snippet, and I can help further diagnose the problem."
    }
]