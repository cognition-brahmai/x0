[
    {
        "role": "user",
        "content": "You are developing an iOS app that requires calculating the distance between two locations using the Haversine formula. The function should be written in Swift programming language and must take in two tuples containing latitude and longitude values of the two locations. The returned value should be the distance in miles. Additionally, ensure to represent the Haversine formula using Latex in your function comments. Can you also provide an optimized version of the function that can handle multiple locations at once, returning a matrix of pairwise distances?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Swift function that calculates the distance between two locations using the Haversine formula. The function takes two tuples containing the latitude and longitude values of the two locations and returns the distance in miles. The Haversine formula is represented using LaTeX in the function comments. Following that, I will provide an optimized version that can handle multiple locations at once, returning a matrix of pairwise distances.\n\n### Basic Haversine Formula in Swift\n\n```swift\nimport Foundation\n\n/// Calculates the Haversine distance between two geographical points.\n/// - Parameters:\n///   - location1: A tuple containing the latitude and longitude of the first location.\n///   - location2: A tuple containing the latitude and longitude of the second location.\n/// - Returns: The distance between the two locations in miles.\n///\n/// The Haversine formula is given by:\n/// \\[\n/// \\begin{align*}\n/// a &= \\sin^2\\left(\\frac{\\Delta\\phi}{2}\\right) + \\cos(\\phi_1) \\cdot \\cos(\\phi_2) \\cdot \\sin^2\\left(\\frac{\\Delta\\lambda}{2}\\right) \\\\\\\n/// c &= 2 \\cdot \\text{atan2}\\left(\\sqrt{a}, \\sqrt{1-a}\\right) \\\\\\\\\n/// d &= R \\cdot c\n/// \\end{align*}\n/// \\]\n/// where:\n/// - \\(\\phi\\) is latitude in radians,\n/// - \\(\\lambda\\) is longitude in radians,\n/// - \\(R\\) is the Earth's radius (mean radius = 3,959 miles).\n\nfunc haversineDistance(location1: (latitude: Double, longitude: Double),\n                       location2: (latitude: Double, longitude: Double)) -> Double {\n    let R = 3959.0 // Earth's radius in miles\n    \n    let \u03c61 = location1.latitude * .pi / 180\n    let \u03c62 = location2.latitude * .pi / 180\n    let \u0394\u03c6 = (location2.latitude - location1.latitude) * .pi / 180\n    let \u0394\u03bb = (location2.longitude - location1.longitude) * .pi / 180\n    \n    let a = sin(\u0394\u03c6 / 2) * sin(\u0394\u03c6 / 2) +\n            cos(\u03c61) * cos(\u03c62) *\n            sin(\u0394\u03bb / 2) * sin(\u0394\u03bb / 2)\n    let c = 2 * atan2(sqrt(a), sqrt(1 - a))\n    \n    let d = R * c\n    return d\n}\n```\n\n### Optimized Version for Multiple Locations\n\nBelow is an optimized version that takes an array of locations and returns a matrix of pairwise distances:\n\n```swift\nimport Foundation\n\n/// Calculates the pairwise Haversine distances between multiple geographical points.\n/// - Parameter locations: An array of tuples, each containing the latitude and longitude of a location.\n/// - Returns: A 2D array (matrix) of distances in miles.\nfunc pairwiseHaversineDistances(locations: [(latitude: Double, longitude: Double)]) -> [[Double]] {\n    let numLocations = locations.count\n    var distanceMatrix = Array(repeating: Array(repeating: 0.0, count: numLocations), count: numLocations)\n    \n    let R = 3959.0 // Earth's radius in miles\n    \n    for i in 0..<numLocations {\n        for j in 0..<numLocations {\n            if i != j {\n                let location1 = locations[i]\n                let location2 = locations[j]\n                \n                let \u03c61 = location1.latitude * .pi / 180\n                let \u03c62 = location2.latitude * .pi / 180\n                let \u0394\u03c6 = (location2.latitude - location1.latitude) * .pi / 180\n                let \u0394\u03bb = (location2.longitude - location1.longitude) * .pi / 180\n                \n                let a = sin(\u0394\u03c6 / 2) * sin(\u0394\u03c6 / 2) +\n                        cos(\u03c61) * cos(\u03c62) *\n                        sin(\u0394\u03bb / 2) * sin(\u0394\u03bb / 2)\n                let c = 2 * atan2(sqrt(a), sqrt(1 - a))\n                \n                let d = R * c\n                distanceMatrix[i][j] = d\n            }\n        }\n    }\n    \n    return distanceMatrix\n}\n```\n\n### Usage Example\n\n```swift\nlet locations = [\n    (latitude: 40.7128, longitude: -74.0060), // New York City\n    (latitude: 34.0522, longitude: -118.2437), // Los Angeles\n    (latitude: 41.8781, longitude: -87.6298) // Chicago\n]\n\nlet distances = pairwiseHaversineDistances(locations: locations)\nfor row in distances {\n    print(row)\n}\n```\n\nThis optimized function iterates through each pair of locations and calculates the Haversine distance, storing the results in a matrix. The matrix is then returned, representing the pairwise distances between all locations provided."
    }
]