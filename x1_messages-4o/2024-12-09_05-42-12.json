[
    {
        "role": "user",
        "content": "I am looking for a way to monitor a directory for changes using Python. I wasn't able to find anything in Python core that could help me in this regard. Could anyone recommend a library or a method to achieve this? It would be ideal if the solution is portable but I'm okay with Unix-specific solutions as that is the operating system my server runs on."
    },
    {
        "role": "assistant",
        "content": "To monitor a directory for changes in Python, you can use the `watchdog` library, which is a popular choice for this purpose. It provides a cross-platform API and is capable of monitoring file system events in real time.\n\nFirst, you'll need to install the `watchdog` library. You can do this using pip:\n\n```bash\npip install watchdog\n```\n\nOnce installed, you can use it to monitor a directory. Here's a basic example demonstrating how to use `watchdog` to watch for changes in a directory:\n\n```python\nimport time\nfrom watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass MyHandler(FileSystemEventHandler):\n    def on_modified(self, event):\n        print(f'Event type: {event.event_type}  Path: {event.src_path}')\n\n    def on_created(self, event):\n        print(f'Event type: {event.event_type}  Path: {event.src_path}')\n\n    def on_deleted(self, event):\n        print(f'Event type: {event.event_type}  Path: {event.src_path}')\n\n    def on_moved(self, event):\n        print(f'Event type: {event.event_type}  From: {event.src_path} To: {event.dest_path}')\n\nif __name__ == \"__main__\":\n    path = \"/path/to/your/directory\"  # Replace with the directory you want to monitor\n    event_handler = MyHandler()\n    observer = Observer()\n    observer.schedule(event_handler, path, recursive=True)\n    observer.start()\n\n    try:\n        while True:\n            time.sleep(1)\n    except KeyboardInterrupt:\n        observer.stop()\n    observer.join()\n```\n\nThis script sets up a handler that listens for file system events like file creation, modification, deletion, and movement within the specified directory. The `Observer` is then used to schedule the handler for the directory you want to monitor.\n\nThis solution is portable and should work on Unix-based systems as well as Windows. If you are looking for Unix-specific solutions, you might consider using inotify directly on Linux, but `watchdog` abstracts these details and provides a more straightforward interface."
    }
]