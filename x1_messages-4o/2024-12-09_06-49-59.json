[
    {
        "role": "user",
        "content": "How can I disable certain methods in a ViewSet using the Django REST framework? I have attempted to do this by returning a 405 Method Not Allowed response for the methods I want to disable, but the OPTIONS method still shows these as allowed. Here is the code I've been working with:\n\n```python\nclass SampleViewSet(viewsets.ModelViewSet):\n    queryset = api_models.Sample.objects.all()\n    serializer_class = api_serializers.SampleSerializer\n\n    def list(self, request):\n        return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n\n    def create(self, request):\n        return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n```"
    },
    {
        "role": "assistant",
        "content": "In Django REST Framework (DRF), if you want to disable certain methods in a `ViewSet` and ensure they don't appear in the `OPTIONS` response, you should override the `http_method_names` attribute of the `ViewSet` class. This attribute defines which HTTP methods are allowed for the view. By default, it includes `['get', 'post', 'put', 'patch', 'delete']`.\n\nHere's how you can modify your `SampleViewSet` to disable the `list` (GET) and `create` (POST) methods:\n\n```python\nfrom rest_framework import viewsets\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom your_app import api_models, api_serializers\n\nclass SampleViewSet(viewsets.ModelViewSet):\n    queryset = api_models.Sample.objects.all()\n    serializer_class = api_serializers.SampleSerializer\n    \n    # Specify only the allowed methods\n    http_method_names = ['retrieve', 'update', 'partial_update', 'destroy']  # list and create are removed\n\n    # Optionally, you can still explicitly define the methods if needed\n    def list(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n\n    def create(self, request, *args, **kwargs):\n        return Response(status=status.HTTP_405_METHOD_NOT_ALLOWED)\n```\n\nBy modifying the `http_method_names`, you effectively remove the unwanted HTTP methods from being processed, and they will not appear in the `OPTIONS` method response. This approach is cleaner and aligns with the expected behavior of the DRF."
    }
]