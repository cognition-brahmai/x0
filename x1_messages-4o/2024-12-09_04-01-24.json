[
    {
        "role": "user",
        "content": "How can I add custom fields to users in Django using the create_user() function? I have tried following the instructions given at http://docs.djangoproject.com/en/dev/topics/auth/#storing-additional-information-about-users but it does not seem to work. Furthermore, once I have added these custom fields, how can I add, edit, and delete data from them?"
    },
    {
        "role": "assistant",
        "content": "To add custom fields to the user model in Django, you need to extend the default `AbstractUser` class provided by Django's authentication framework. Here's a step-by-step guide on how to achieve this:\n\n### Step 1: Extend the User Model\n\n1. **Create a Custom User Model:**\n\n   First, you need to create a new model that extends `AbstractUser`. You can add any additional fields you need in this model.\n\n   ```python\n   from django.contrib.auth.models import AbstractUser\n   from django.db import models\n\n   class CustomUser(AbstractUser):\n       bio = models.TextField(blank=True, null=True)\n       birth_date = models.DateField(blank=True, null=True)\n       # Add more custom fields as needed\n   ```\n\n2. **Update `settings.py`:**\n\n   Tell Django to use your custom user model by setting the `AUTH_USER_MODEL` setting.\n\n   ```python\n   AUTH_USER_MODEL = 'your_app_name.CustomUser'\n   ```\n\n### Step 2: Create a Custom User Manager\n\nTo handle user creation with the new fields, you should create a custom user manager.\n\n1. **Define a Custom Manager:**\n\n   ```python\n   from django.contrib.auth.models import BaseUserManager\n\n   class CustomUserManager(BaseUserManager):\n       def create_user(self, username, email, password=None, **extra_fields):\n           if not email:\n               raise ValueError('The Email field must be set')\n           email = self.normalize_email(email)\n           user = self.model(username=username, email=email, **extra_fields)\n           user.set_password(password)\n           user.save(using=self._db)\n           return user\n\n       def create_superuser(self, username, email, password=None, **extra_fields):\n           extra_fields.setdefault('is_staff', True)\n           extra_fields.setdefault('is_superuser', True)\n\n           return self.create_user(username, email, password, **extra_fields)\n   ```\n\n2. **Use the Custom Manager in Your User Model:**\n\n   Update your `CustomUser` model to use the custom manager.\n\n   ```python\n   class CustomUser(AbstractUser):\n       bio = models.TextField(blank=True, null=True)\n       birth_date = models.DateField(blank=True, null=True)\n\n       objects = CustomUserManager()\n   ```\n\n### Step 3: Apply Migrations\n\n1. **Create and Apply Migrations:**\n\n   Run the following commands to create and apply the migrations for your new user model.\n\n   ```bash\n   python manage.py makemigrations\n   python manage.py migrate\n   ```\n\n### Step 4: Add, Edit, and Delete Data\n\n- **Add Data:**\n\n  You can create a new user with custom fields using the `create_user` method.\n\n  ```python\n  from your_app_name.models import CustomUser\n\n  user = CustomUser.objects.create_user(\n      username='john_doe',\n      email='john_doe@example.com',\n      password='securepassword123',\n      bio='Software Developer',\n      birth_date='1990-01-01'\n  )\n  ```\n\n- **Edit Data:**\n\n  To edit a user's information, first retrieve the user, update the fields, and then save.\n\n  ```python\n  user = CustomUser.objects.get(username='john_doe')\n  user.bio = 'Senior Software Developer'\n  user.save()\n  ```\n\n- **Delete Data:**\n\n  To delete a user, you can simply call the `delete` method on the user instance.\n\n  ```python\n  user = CustomUser.objects.get(username='john_doe')\n  user.delete()\n  ```\n\n### Important Considerations\n\n- Make sure to update any references to the user model throughout your application to use your custom user model.\n- If you are starting a new project, it's best to define your custom user model from the beginning before creating any migrations.\n- If your project is already using the default user model and you want to switch to a custom one, consider the implications and potential data migrations needed.\n\nBy following these steps, you should be able to add custom fields to your user model in Django and manage them effectively."
    }
]