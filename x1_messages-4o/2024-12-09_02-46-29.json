[
    {
        "role": "user",
        "content": "How can I convert a deeply nested defaultdict in Python into an ordinary dict? Here is the code I used to create a defaultdict of defaultdicts:\n\n```python\nfrom collections import defaultdict\n\nfactory = lambda: defaultdict(factory)\ndefdict = factory()\ndefdict['one']['two']['three']['four'] = 5\n\n# defaultdict(<function <lambda> at 0x10886f0c8>, {\n#             'one': defaultdict(<function <lambda> at 0x10886f0c8>, {\n#                 'two': defaultdict(<function <lambda> at 0x10886f0c8>, {\n#                     'three': defaultdict(<function <lambda> at 0x10886f0c8>, {\n#                         'four': 5})})})})\n```\nI attempted to solve this problem using the `json` module to load and dump the defaultdict, but it didn't seem to be the right solution:\n\n```python\nimport json\n\nregdict = json.loads(json.dumps(defdict))\n\n# {u'one': {u'two': {u'three': {u'four': 5}}}}\n```\n\nI am looking for a solution that properly recurses on the nested dict(s), as a previously provided answer did not meet this requirement."
    },
    {
        "role": "assistant",
        "content": "To convert a deeply nested `defaultdict` into a regular dictionary, you can write a recursive function that traverses through each level of the `defaultdict` and converts it to a regular `dict`. Here's how you can achieve this:\n\n```python\nfrom collections import defaultdict\n\n# Function to recursively convert defaultdict to dict\ndef convert_to_regular_dict(d):\n    if isinstance(d, defaultdict):\n        # Recursively apply the conversion function to each value in the defaultdict\n        return {k: convert_to_regular_dict(v) for k, v in d.items()}\n    else:\n        # If it's not a defaultdict, return the value as is\n        return d\n\n# Create a defaultdict of defaultdicts\nfactory = lambda: defaultdict(factory)\ndefdict = factory()\ndefdict['one']['two']['three']['four'] = 5\n\n# Convert the nested defaultdict to a regular dict\nregdict = convert_to_regular_dict(defdict)\n\n# Print the result\nprint(regdict)\n```\n\nThis code defines a function `convert_to_regular_dict` that checks if an object is a `defaultdict`. If it is, it recursively converts its contents using a dictionary comprehension, effectively turning each `defaultdict` at every level into a `dict`. If the object is not a `defaultdict`, it simply returns it, which means the recursion stops when it encounters a non-dict value."
    }
]