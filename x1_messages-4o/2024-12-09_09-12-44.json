[
    {
        "role": "user",
        "content": "How can I develop a C++ program that adds two given fractions and displays the result fraction?"
    },
    {
        "role": "assistant",
        "content": "To develop a C++ program that adds two given fractions and displays the result, you'll need to implement a method to handle the arithmetic of fractions, which involves ensuring that they have a common denominator. Here's a simple program to achieve that:\n\n```cpp\n#include <iostream>\n#include <numeric>  // For std::gcd in C++17, or use <algorithm> for older versions\n\nclass Fraction {\npublic:\n    int numerator;\n    int denominator;\n\n    Fraction(int num, int den) : numerator(num), denominator(den) {\n        if (denominator == 0) {\n            throw std::invalid_argument(\"Denominator cannot be zero.\");\n        }\n        simplify();\n    }\n\n    // Function to add two fractions\n    Fraction add(const Fraction& other) const {\n        int lcmDenominator = std::lcm(denominator, other.denominator);\n        int newNumerator = (numerator * (lcmDenominator / denominator)) +\n                           (other.numerator * (lcmDenominator / other.denominator));\n        return Fraction(newNumerator, lcmDenominator);\n    }\n\n    // Function to simplify the fraction\n    void simplify() {\n        int gcdValue = std::gcd(numerator, denominator);\n        numerator /= gcdValue;\n        denominator /= gcdValue;\n        if (denominator < 0) {  // Keep negative sign on the numerator\n            denominator = -denominator;\n            numerator = -numerator;\n        }\n    }\n\n    void display() const {\n        std::cout << numerator << \"/\" << denominator << std::endl;\n    }\n};\n\nint main() {\n    try {\n        int num1, den1, num2, den2;\n        std::cout << \"Enter numerator and denominator of first fraction: \";\n        std::cin >> num1 >> den1;\n        std::cout << \"Enter numerator and denominator of second fraction: \";\n        std::cin >> num2 >> den2;\n\n        Fraction fraction1(num1, den1);\n        Fraction fraction2(num2, den2);\n\n        Fraction result = fraction1.add(fraction2);\n\n        std::cout << \"The result of addition is: \";\n        result.display();\n    } catch (const std::invalid_argument& e) {\n        std::cerr << \"Error: \" << e.what() << std::endl;\n    }\n\n    return 0;\n}\n```\n\n### Key Points:\n- **Error Handling:** The program checks if the denominator is zero and throws an exception if it is, as a fraction cannot have a zero denominator.\n- **Simplification:** The `simplify` function reduces the fraction to its simplest form using the greatest common divisor (GCD).\n- **Addition:** The `add` function calculates the least common multiple (LCM) of the denominators to find a common denominator for addition.\n- **Display:** The result is displayed in its simplest form.\n\n### Compilation:\nTo compile this program, make sure you have a C++17 compatible compiler (or adjust the code accordingly for older versions by implementing your own LCM/GCD functions if necessary). Use a command like:\n\n```bash\ng++ -std=c++17 -o fraction_addition fraction_addition.cpp\n```\n\nRun the program with:\n\n```bash\n./fraction_addition\n```\n\nThis program should handle the arithmetic correctly and display the sum of the two fractions in its simplest form."
    }
]