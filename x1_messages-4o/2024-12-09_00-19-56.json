[
    {
        "role": "user",
        "content": "In Python, I understand that it is standard convention to use `if foo is None` rather than `if foo == None` to test if a value is specifically `None`. I want to know if there's a similar convention when checking if a value is `True`. Is there any reason to use `if foo == True` rather than `if foo is True`? Does the answer to this question differ between Python versions or implementations such as CPython (2.x and 3.x), Jython, PyPy, etc.? For example, consider this code where `True` is used as a singleton value that you want to differentiate from the value `'bar'`, or any other true-like value:\n\n```\nif foo is True: # vs foo == True\n    ...\nelif foo == 'bar':\n    ...\n```\nWould there be a case where using `if foo is True` would yield different results from `if foo == True`? I am aware of the discussion on whether `if foo`, `if foo == True`, or `if foo is True` should generally be used to determine whether `foo` has a true-like value, but this question is specifically about the difference between `if foo == True` and `if foo is True`. I also noted that PEP 285 specifies that the values `False` and `True` will be singletons, like `None`."
    },
    {
        "role": "assistant",
        "content": "In Python, the `is` operator is used to check for object identity, meaning it checks if two references point to the same object in memory. The `==` operator, on the other hand, checks for equality, meaning it checks if the values of the objects are equivalent.\n\nWhen it comes to checking if a value is specifically `True`, using `if foo is True` and `if foo == True` can yield different results depending on the context, especially when dealing with custom objects or subclasses of `bool`. Here's why:\n\n1. **`if foo is True`**:\n   - This expression checks whether `foo` is exactly the `True` singleton object. It will only evaluate to `True` if `foo` is literally the `True` object. This is the strictest check and won't consider any other truthy value (like `1`, `\"foo\"`, or any object that returns `True` when its `__bool__` or `__len__` method is called).\n\n2. **`if foo == True`**:\n   - This expression checks whether `foo` is equal to `True` in value. It will evaluate to `True` for any object that is considered truthy. For example, `foo` could be `1`, `True`, or any object with a `__eq__` method that returns `True` when compared with `True`.\n\nBecause `True` and `False` are singletons in Python (as specified in PEP 285), using `is` for identity checks is fast and reliable when you want to ensure that the variable is exactly `True` and not just any truthy value.\n\nRegarding different Python versions and implementations (such as CPython, Jython, PyPy, etc.), the behavior of `is` and `==` in this context remains consistent because `True` and `False` being singletons is a fundamental part of Python's design.\n\nTo summarize, if you specifically want to check for the `True` object, use `if foo is True`. This is similar to how you would check for `None` using `if foo is None`. If you want to check for truthiness in general, you can use `if foo`, or if you specifically want to compare values, use `if foo == True`."
    }
]