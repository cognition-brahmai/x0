[
    {
        "role": "user",
        "content": "How can I print the bit representation of numbers in Python to the console? I want to visualize all operations that are being done on bits."
    },
    {
        "role": "assistant",
        "content": "To print the bit representation of numbers in Python, you can use the built-in `bin()` function, which converts an integer to its binary string representation. Here\u2019s a simple example of how you can use it:\n\n```python\ndef print_bit_representation(number):\n    # Get the binary representation of the number\n    binary_representation = bin(number)\n    \n    # Remove the '0b' prefix that Python adds\n    binary_representation = binary_representation[2:]\n    \n    # Print the binary representation\n    print(f\"Number: {number}, Binary: {binary_representation}\")\n\n# Example usage\nprint_bit_representation(5)   # Output: Number: 5, Binary: 101\nprint_bit_representation(10)  # Output: Number: 10, Binary: 1010\n```\n\nIf you want to visualize operations on bits, you can create functions that perform the operations and print the result in both decimal and binary form. Here's an example that demonstrates bitwise AND, OR, and XOR operations:\n\n```python\ndef bitwise_operations(a, b):\n    print(f\"Operand A: {a} ({bin(a)[2:]})\")\n    print(f\"Operand B: {b} ({bin(b)[2:]})\")\n    \n    # Bitwise AND\n    and_result = a & b\n    print(f\"A & B: {and_result} ({bin(and_result)[2:]})\")\n    \n    # Bitwise OR\n    or_result = a | b\n    print(f\"A | B: {or_result} ({bin(or_result)[2:]})\")\n    \n    # Bitwise XOR\n    xor_result = a ^ b\n    print(f\"A ^ B: {xor_result} ({bin(xor_result)[2:]})\")\n\n# Example usage\nbitwise_operations(5, 3)\n```\n\nThis function will output the bit representation of each operand and the result of the operation, allowing you to visualize how the bits are manipulated. Adjust the output formatting as needed to suit your visualization requirements."
    }
]