[
    {
        "role": "user",
        "content": "How can I add custom form fields, that are not part of the model, to the add/update pages of a model registered on the Django admin site? I want to build a long string expression from these custom fields and save it in the relevant model field when the user clicks save. The user will be choosing symbols (the custom fields), and I will create a string expression representation from the list of symbols and store it in the database. I do not want these symbols to be part of the model and database, only the final expression."
    },
    {
        "role": "assistant",
        "content": "To achieve this in Django's admin site, you can customize the admin form by using `ModelAdmin` and overriding the `get_form` method to include custom form fields that are not part of the model. Here's a step-by-step approach on how you can implement this:\n\n1. **Create a Custom Form:**\n\n   Start by creating a form that includes the custom fields. These fields will be used to collect user input and will not be stored in the database.\n\n   ```python\n   from django import forms\n   from .models import YourModel\n\n   class YourModelAdminForm(forms.ModelForm):\n       # Add your custom fields here\n       custom_field_1 = forms.CharField(required=False)\n       custom_field_2 = forms.CharField(required=False)\n       \n       class Meta:\n           model = YourModel\n           fields = '__all__'\n   ```\n\n2. **Customize the Admin:**\n\n   Use the custom form in your `ModelAdmin` and override the `save_model` method to process the custom fields and construct the string expression.\n\n   ```python\n   from django.contrib import admin\n   from .models import YourModel\n   from .forms import YourModelAdminForm\n\n   class YourModelAdmin(admin.ModelAdmin):\n       form = YourModelAdminForm\n   \n       def save_model(self, request, obj, form, change):\n           # Access the custom fields\n           custom_field_1 = form.cleaned_data.get('custom_field_1')\n           custom_field_2 = form.cleaned_data.get('custom_field_2')\n           \n           # Construct your string expression\n           expression = f\"{custom_field_1} - {custom_field_2}\"  # Modify this as needed\n           \n           # Assign the expression to the model field\n           obj.your_model_field = expression\n           \n           # Save the object\n           super().save_model(request, obj, form, change)\n\n   admin.site.register(YourModel, YourModelAdmin)\n   ```\n\n3. **Register the Admin:**\n\n   Make sure to register your model with the customized `ModelAdmin`.\n\nBy following these steps, you will have custom fields in the admin add/update pages that are not part of your model. The string expression generated from these fields will be stored in the designated model field when the user clicks save. The custom fields themselves will not be stored in the database."
    }
]