[
    {
        "role": "user",
        "content": "How can I use xml.etree.ElementTree in Python to write out XML files in a nicely formatted way? Currently, my XML files are being generated in a single line and I'd like them to be more readable. For instance, this is the format I'm getting:\n\n```\n<Language><En><Port>Port</Port><UserName>UserName</UserName></En><Ch><Port>IP\u5730\u5740</Port><UserName>\u7528\u6237\u540d\u79f0</UserName></Ch></Language>\n```\n\nAnd this is the format I'd like to achieve:\n\n```\n<Language>\n    <En>\n        <Port>Port</Port>\n        <UserName>UserName</UserName>\n    </En>\n    <Ch>\n        <Port>IP\u5730\u5740</Port>\n        <UserName>\u7528\u6237\u540d\u79f0</UserName>\n    </Ch>\n</Language>\n```"
    },
    {
        "role": "assistant",
        "content": "To generate nicely formatted XML using `xml.etree.ElementTree` in Python, you can use the `ElementTree`'s `write` method with a custom function to pretty-print the XML. The `xml.etree.ElementTree` module does not have built-in functionality for pretty-printing XML directly, but you can achieve this by using a recursive function to add indentation to the XML structure before writing it out.\n\nHere's a step-by-step guide and example on how to accomplish this:\n\n1. Create a recursive function to add indentation to the XML elements.\n2. Use this function before writing the XML to a file or string.\n\nHere's the code to achieve the desired output:\n\n```python\nimport xml.etree.ElementTree as ET\n\ndef indent(elem, level=0):\n    \"\"\"Helper function to add indentation for pretty-printing the XML.\"\"\"\n    i = \"\\n\" + level * \"    \"\n    if len(elem):\n        if not elem.text or not elem.text.strip():\n            elem.text = i + \"    \"\n        for child in elem:\n            indent(child, level + 1)\n        if not child.tail or not child.tail.strip():\n            child.tail = i\n    if level and (not elem.tail or not elem.tail.strip()):\n        elem.tail = i\n    return elem\n\n# Sample XML structure\nroot = ET.Element(\"Language\")\n\nen = ET.SubElement(root, \"En\")\nport_en = ET.SubElement(en, \"Port\")\nport_en.text = \"Port\"\nusername_en = ET.SubElement(en, \"UserName\")\nusername_en.text = \"UserName\"\n\nch = ET.SubElement(root, \"Ch\")\nport_ch = ET.SubElement(ch, \"Port\")\nport_ch.text = \"IP\u5730\u5740\"\nusername_ch = ET.SubElement(ch, \"UserName\")\nusername_ch.text = \"\u7528\u6237\u540d\u79f0\"\n\n# Indent and pretty-print the XML structure\nindent(root)\n\n# Write out the pretty-printed XML to a file or string\ntree = ET.ElementTree(root)\ntree.write(\"output.xml\", encoding=\"utf-8\", xml_declaration=True)\n\n# Alternatively, to get the string representation\nimport xml.dom.minidom as minidom\n\nxml_str = ET.tostring(root, encoding='utf-8')\nparsed_str = minidom.parseString(xml_str)\npretty_xml = parsed_str.toprettyxml(indent=\"    \")\n\nprint(pretty_xml)\n```\n\n### Explanation:\n- `indent(elem, level=0)`: A helper function to add indentation to each element based on its level in the hierarchy. This function recursively goes through each element and adds the appropriate whitespace.\n- `ET.ElementTree(root).write(...)`: Writes the indented XML to a file.\n- `xml.dom.minidom`: Used to convert the raw XML string to a pretty-printed format if you prefer to handle it as a string.\n\nBy using this approach, your XML will be formatted in a more human-readable way."
    }
]