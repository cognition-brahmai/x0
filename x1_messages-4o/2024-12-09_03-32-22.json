[
    {
        "role": "user",
        "content": "I am trying to create a function in Python that returns a list of directories with a specified path and a fixed depth. I have been using os.walk, but the code is becoming messy when I begin counting the depth. What is the most efficient or clean way to implement this?"
    },
    {
        "role": "assistant",
        "content": "To create a function that returns a list of directories with a specified path and a fixed depth, you can use the `os.path` and `os.listdir` modules to maintain a cleaner code structure. Here's a neat approach using these modules:\n\n```python\nimport os\n\ndef get_directories_at_depth(root_path, target_depth):\n    result = []\n\n    def recursive_search(current_path, current_depth):\n        if current_depth == target_depth:\n            if os.path.isdir(current_path):\n                result.append(current_path)\n            return\n        \n        try:\n            for entry in os.listdir(current_path):\n                entry_path = os.path.join(current_path, entry)\n                if os.path.isdir(entry_path):\n                    recursive_search(entry_path, current_depth + 1)\n        except PermissionError:\n            # Handle directories that cannot be accessed\n            pass\n\n    # Start the recursive search from the root path with initial depth 0\n    recursive_search(root_path, 0)\n\n    return result\n\n# Example usage:\nroot_directory = \"/your/root/path\"\ndepth = 2\ndirectories = get_directories_at_depth(root_directory, depth)\nprint(directories)\n```\n### Explanation:\n1. **Function Definition**: The `get_directories_at_depth` function takes in a `root_path` and a `target_depth`.\n2. **Recursive Search**: A helper function `recursive_search` is defined within the main function to perform a depth-first search through the directories.\n3. **Base Case**: When the `current_depth` equals the `target_depth`, the current path is added to the result list if it is a directory.\n4. **Recursive Case**: If the current depth is less than the target depth, the function iterates over each entry in the directory and recursively searches deeper.\n5. **Handling Permission Errors**: The `try-except` block is used to handle directories that cannot be accessed due to permission issues.\n6. **Initial Call**: The recursive search is initiated from the `root_path` with an initial `current_depth` of 0.\n\nThis approach is clean and avoids the complications that can arise from managing depth with `os.walk`."
    }
]