[
    {
        "role": "user",
        "content": "How can I design a template system using Python to generate emails?"
    },
    {
        "role": "assistant",
        "content": "Designing a template system to generate emails in Python can be a streamlined process by leveraging libraries such as Jinja2 for templating and smtplib or a service like SendGrid for sending emails. Here's a step-by-step guide to creating a basic email template system:\n\n### Step 1: Set Up Your Environment\nMake sure you have Python installed on your system. You'll also need to install Jinja2 for templating:\n\n```bash\npip install Jinja2\n```\n\n### Step 2: Create Email Templates\nCreate a folder named `templates` in your project directory. Inside this folder, create an HTML file for your email template. For example, `email_template.html`:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>{{ subject }}</title>\n</head>\n<body>\n    <h1>{{ title }}</h1>\n    <p>{{ body }}</p>\n    <p>Best regards,<br>{{ sender_name }}</p>\n</body>\n</html>\n```\n\n### Step 3: Load and Render Your Template\nUse Jinja2 to load and render your template with dynamic content.\n\n```python\nfrom jinja2 import Environment, FileSystemLoader\n\ndef render_template(template_name, context):\n    env = Environment(loader=FileSystemLoader('templates'))\n    template = env.get_template(template_name)\n    return template.render(context)\n\n# Define your context\ncontext = {\n    'subject': 'Welcome!',\n    'title': 'Welcome to Our Service',\n    'body': 'Thank you for signing up for our service. We hope you enjoy your experience.',\n    'sender_name': 'The Team'\n}\n\n# Render the template with context\nemail_content = render_template('email_template.html', context)\n```\n\n### Step 4: Send the Email\nUse Python's built-in `smtplib` to send the email. Note that you may need to adjust the SMTP server settings and credentials according to your email provider.\n\n```python\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\ndef send_email(to_email, subject, email_content):\n    from_email = 'your_email@example.com'\n    password = 'your_email_password'\n\n    # Create the email message\n    msg = MIMEMultipart()\n    msg['From'] = from_email\n    msg['To'] = to_email\n    msg['Subject'] = subject\n\n    # Attach the HTML content\n    msg.attach(MIMEText(email_content, 'html'))\n\n    # Connect to the SMTP server and send the email\n    try:\n        server = smtplib.SMTP('smtp.example.com', 587)\n        server.starttls()\n        server.login(from_email, password)\n        server.send_message(msg)\n        server.quit()\n        print(\"Email sent successfully!\")\n    except Exception as e:\n        print(f\"Failed to send email: {e}\")\n\n# Send the email\nsend_email('recipient@example.com', context['subject'], email_content)\n```\n\n### Step 5: Customize and Extend\n- **Templates:** Add more templates for different email types.\n- **Context:** Expand the context dictionary with more dynamic data.\n- **Error Handling:** Improve error handling and logging.\n- **Security:** Store email credentials securely, perhaps using environment variables or a secure vault.\n\nThis basic system can be extended and customized based on your needs, such as using different templating engines, integrating with email APIs like SendGrid or Mailgun, and adding more complex logic for generating dynamic content."
    }
]