[
    {
        "role": "user",
        "content": "How can I reverse or invert a dictionary mapping in Python? For example, if I have a dictionary like 'my_map = {'a': 1, 'b': 2}', how can I invert this map to get 'inv_map = {1: 'a', 2: 'b'}'?"
    },
    {
        "role": "assistant",
        "content": "To reverse or invert a dictionary mapping in Python, you can use a dictionary comprehension to swap the keys and values. Here\u2019s how you can do it:\n\n```python\nmy_map = {'a': 1, 'b': 2}\n\n# Inverting the dictionary\ninv_map = {v: k for k, v in my_map.items()}\n\nprint(inv_map)\n```\n\nThis will output:\n\n```\n{1: 'a', 2: 'b'}\n```\n\nThis method works well when all the values in the original dictionary are unique, as each key in a dictionary must be unique. If the values in the original dictionary are not unique, only one of the original keys will be kept in the inverted dictionary, and the others will be overwritten. If you need to handle non-unique values, you might consider using a dictionary of lists to store all keys that share the same value:\n\n```python\nmy_map = {'a': 1, 'b': 2, 'c': 1}\n\n# Inverting the dictionary, handling non-unique values\ninv_map = {}\nfor k, v in my_map.items():\n    if v not in inv_map:\n        inv_map[v] = [k]\n    else:\n        inv_map[v].append(k)\n\nprint(inv_map)\n```\n\nThis will output:\n\n```\n{1: ['a', 'c'], 2: ['b']}\n```\n\nIn this case, the inverted dictionary stores lists of keys for each value, allowing you to handle cases where multiple keys map to the same value in the original dictionary."
    }
]