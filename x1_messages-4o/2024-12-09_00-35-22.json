[
    {
        "role": "user",
        "content": "How can I input multiple exogenous variables into a SARIMAX or ARIMA model in statsmodels? Specifically, I want to predict yield at time t using AR of lag 3 for the yield time series and AR of lag 4 with weather temperature time series and another variable of market price with AR of lag 3. However, it doesn't seem like this is possible. Are there any examples or explanations of how this can be done?"
    },
    {
        "role": "assistant",
        "content": "To incorporate multiple exogenous variables into a SARIMAX model using the `statsmodels` library in Python, you can use the SARIMAX class, which supports exogenous variables. The exogenous variables can have their own autoregressive terms, but the SARIMAX model will not automatically apply AR terms to the exogenous variables. Instead, you need to create lagged versions of your exogenous variables manually and include them as part of the exogenous dataset.\n\nHere's how you can achieve this:\n\n1. **Prepare Your Data**: Create lagged versions of your exogenous variables. For the temperature series with an AR of lag 4 and the market price series with an AR of lag 3, you can create additional columns in your dataset with these lagged values.\n\n2. **Fit the SARIMAX Model**: Use the `SARIMAX` class to fit the model with your endogenous variable (yield) and the prepared exogenous variables.\n\nHere's a step-by-step implementation:\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom statsmodels.tsa.statespace.sarimax import SARIMAX\n\n# Assuming you have a DataFrame `df` with columns: 'yield', 'temperature', 'market_price'\n# Create lagged exogenous variables\n\ndf['temp_lag1'] = df['temperature'].shift(1)\ndf['temp_lag2'] = df['temperature'].shift(2)\ndf['temp_lag3'] = df['temperature'].shift(3)\ndf['temp_lag4'] = df['temperature'].shift(4)\n\ndf['price_lag1'] = df['market_price'].shift(1)\ndf['price_lag2'] = df['market_price'].shift(2)\ndf['price_lag3'] = df['market_price'].shift(3)\n\n# Drop rows with NaN values created by shifting\ndf.dropna(inplace=True)\n\n# Define the endogenous and exogenous variables\nendog = df['yield']\nexog = df[['temp_lag1', 'temp_lag2', 'temp_lag3', 'temp_lag4', 'price_lag1', 'price_lag2', 'price_lag3']]\n\n# Fit the SARIMAX model\nmodel = SARIMAX(endog, order=(3, 0, 0), exog=exog)\nresults = model.fit()\n\n# Print the summary of the model\nprint(results.summary())\n\n# Forecasting\nforecast = results.get_forecast(steps=10, exog=exog[-10:])\nprint(forecast.summary_frame())\n```\n\n### Explanation:\n- **Lagged Variables**: We create lagged versions of the exogenous variables by shifting the temperature and market price time series. This allows the model to incorporate these variables with the specified lags.\n- **Model Specification**: The `order=(3, 0, 0)` specifies an ARIMA model with an AR of lag 3 for the yield time series.\n- **Exogenous Variables**: The `exog` parameter includes the lagged versions of the temperature and market price series.\n- **Forecasting**: To forecast future values, ensure that the exogenous dataset for the forecast period is available.\n\nThis approach allows you to manually incorporate specific lag structures for your exogenous variables within the SARIMAX framework. Adjust the lag values and model parameters as necessary to better fit your specific data and problem domain."
    }
]