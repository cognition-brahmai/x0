[
    {
        "role": "user",
        "content": "How can I create a function in Python that checks if all elements of a list are of the same type, specifically integers, without individually checking every element? For instance, if we have a list like x = [1, 2.5, 'a'], the function should return false because not all elements are integers."
    },
    {
        "role": "assistant",
        "content": "To create a function that checks if all elements of a list are integers without individually checking every element, you can leverage Python's `all()` function along with a generator expression. Here's a concise way to achieve this:\n\n```python\ndef all_integers(lst):\n    return all(isinstance(item, int) for item in lst)\n\n# Example usage:\nx = [1, 2.5, 'a']\nresult = all_integers(x)\nprint(result)  # Output: False\n\ny = [1, 2, 3]\nresult = all_integers(y)\nprint(result)  # Output: True\n```\n\nIn this function, `isinstance(item, int)` checks if each element in the list is an integer. The `all()` function returns `True` only if all elements in the generator expression are `True`, meaning every item in the list is an integer. If any element is not an integer, `all()` will return `False`."
    }
]