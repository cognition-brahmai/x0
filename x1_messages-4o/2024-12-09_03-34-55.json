[
    {
        "role": "user",
        "content": "I am attempting to port code from Python 2 to Python 3 and I am encountering a problem when reading UTF-8 text from the standard input. In Python 2, I used the following code and it worked fine:\n\n```python\nfor line in sys.stdin:\n    ...\n```\n\nHowever, in Python 3, it seems to expect ASCII from `sys.stdin`, and if there are non-ASCII characters in the input, I receive the following error:\n\n```python\nUnicodeDecodeError: 'ascii' codec can't decode byte .. in position ..: ordinal not in range(128)\n```\n\nFor a regular file, I typically specify the encoding when opening the file like so:\n\n```python\nwith open('filename', 'r', encoding='utf-8') as file:\n    for line in file:\n        ...\n```\n\nBut I'm unsure of how to specify the encoding for standard input. I've seen other posts suggesting the use of:\n\n```python\ninput_stream = codecs.getreader('utf-8')(sys.stdin)\nfor line in input_stream:\n    ...\n```\n\nHowever, this does not seem to work in Python 3 as I still get the same error message. I'm currently using Ubuntu 12.04.2 and my locale is set to en_US.UTF-8. How can I resolve this issue?"
    },
    {
        "role": "assistant",
        "content": "When transitioning from Python 2 to Python 3, handling input and output encoding is a common issue due to Python 3's strict distinction between bytes and strings. Fortunately, Python 3 provides a straightforward way to handle UTF-8 input from `sys.stdin`.\n\nIn Python 3, `sys.stdin` is already a text stream, and it uses the default system encoding, which should be UTF-8 if your locale is set to `en_US.UTF-8`. However, you can explicitly set the encoding of `sys.stdin` to ensure it reads UTF-8 correctly. Here's how you can achieve that:\n\n```python\nimport sys\nimport io\n\n# Set sys.stdin to use UTF-8 encoding\nsys.stdin = io.TextIOWrapper(sys.stdin.buffer, encoding='utf-8')\n\nfor line in sys.stdin:\n    # Process each line\n    print(line, end='')\n```\n\n### Explanation:\n- `io.TextIOWrapper` is used to wrap the buffer of `sys.stdin` with the desired encoding.\n- `sys.stdin.buffer` gives you access to the raw binary stream (bytes), which you can then wrap with the `TextIOWrapper` specifying `encoding='utf-8'`.\n- This ensures that any text read from `sys.stdin` is properly decoded as UTF-8.\n\nThis setup should resolve the `UnicodeDecodeError` you encountered, as it clearly defines how to handle the input encoding explicitly. Make sure your terminal or input source also uses UTF-8 encoding to avoid any mismatches."
    }
]