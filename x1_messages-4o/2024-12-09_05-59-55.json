[
    {
        "role": "user",
        "content": "I am working with a pandas dataframe in Python which looks like this:\n\n```python\n    Name    Missed    Credit    Grade\n    A       1         3         10\n    A       1         1         12      \n    B       2         3         10\n    B       1         2         20\n```\n\nI want to get the sum of columns 'Credit' and 'Missed' and to calculate the average on 'Grade', all grouped by 'Name'. My desired output is:\n\n```python\n    Name    Sum1   Sum2    Average\n    A       2      4      11\n    B       3      5      15   \n```\n\nI am currently doing two groupby operations on 'Name' to get the sum and average, and then merging the two output dataframes. However, this doesn't seem to be the most efficient way. I've found a way to do this for one column:\n\n```python\ndf.groupby('Name')['Credit'].agg(['sum','average'])\n```\n\nBut how can I apply this to both 'Credit' and 'Missed' columns in a single line of code?"
    },
    {
        "role": "assistant",
        "content": "You can achieve this by using the `agg` method in combination with a dictionary that specifies the aggregation operations for each column. Here's how you can do it in a single line:\n\n```python\nimport pandas as pd\n\n# Sample data\ndata = {'Name': ['A', 'A', 'B', 'B'],\n        'Missed': [1, 1, 2, 1],\n        'Credit': [3, 1, 3, 2],\n        'Grade': [10, 12, 10, 20]}\ndf = pd.DataFrame(data)\n\n# Group by 'Name' and aggregate\nresult = df.groupby('Name').agg(Sum2=('Missed', 'sum'),\n                                Sum1=('Credit', 'sum'),\n                                Average=('Grade', 'mean')).reset_index()\n\nprint(result)\n```\n\nThis code will produce the desired output:\n\n```plaintext\n  Name  Sum2  Sum1  Average\n0    A     2     4     11.0\n1    B     3     5     15.0\n```\n\nIn this approach, you use the `agg` method with a dictionary where keys are the new column names you want in the result and values are tuples containing the column to aggregate and the aggregation function to apply. This allows you to apply different aggregation functions to different columns in a single operation."
    }
]