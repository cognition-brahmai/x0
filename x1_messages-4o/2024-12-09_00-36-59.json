[
    {
        "role": "user",
        "content": "How can I pass a default list argument to dataclasses in Python? I have tried to pass a default argument in my class but it is causing an error. Here is the code I have:\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass Pizza():\n    ingredients: List = field(default_factory=['dow', 'tomatoes'])\n    meat: str = field(default='chicken')\n\n    def __repr__(self):\n        return 'preparing_following_pizza {} {}'.format(self.ingredients, self.meat)\n```\n\nWhen I try to instantiate `Pizza`, I get a `TypeError: 'list' object is not callable`:\n\n```python\n>>> my_order = Pizza()\nTraceback (most recent call last):\n  File \"pizza.py\", line 13, in <module>\n    Pizza()\n  File \"<string>\", line 2, in __init__\nTypeError: 'list' object is not callable\n```\n\nWhat am I doing wrong here?"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to the way the `default_factory` is being used in your `dataclass`. The `default_factory` parameter of `field()` expects a callable (a function) that returns the default value. However, in your code, you're providing a list directly, which is not callable, hence the error.\n\nTo fix this, you should pass a callable that returns the list. Typically, you can use a lambda function or the `list` constructor for this purpose. Here's how you can modify your code:\n\n```python\nfrom dataclasses import dataclass, field\nfrom typing import List\n\n@dataclass\nclass Pizza:\n    ingredients: List = field(default_factory=lambda: ['dow', 'tomatoes'])\n    meat: str = field(default='chicken')\n\n    def __repr__(self):\n        return 'preparing_following_pizza {} {}'.format(self.ingredients, self.meat)\n\n# Example usage\nmy_order = Pizza()\nprint(my_order)\n```\n\nIn this corrected version, `default_factory=lambda: ['dow', 'tomatoes']` provides a lambda function that returns the list `['dow', 'tomatoes']` when called, which satisfies the requirement for `default_factory`. This way, every time you create a new instance of `Pizza` without specifying the `ingredients`, a new list is created, avoiding issues with mutable default arguments."
    }
]