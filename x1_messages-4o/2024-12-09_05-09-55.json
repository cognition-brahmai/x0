[
    {
        "role": "user",
        "content": "What is the correct shebang to use for Python scripts run under a Pyenv virtual environment? For instance, the default Python on my system (OSX) does not have 'pandas' installed but my Pyenv virtual environment 'venv_name' does. I tried getting the path of the Python executable from the virtual environment and used it in my 'script.py' file. However, when I tried running the script, I received the error messages - 'import: command not found' and 'print: command not found'. Running that path on the command line works fine though. So, what is the proper shebang for this? Ideally, I want a generic shebang that will point at the Python of whatever my current virtual environment is."
    },
    {
        "role": "assistant",
        "content": "When using a virtual environment, especially with Pyenv, it's common to want a shebang line that dynamically points to the Python interpreter of the currently active virtual environment. Here\u2019s how you can achieve that:\n\n### Generic Shebang for Python Scripts in a Virtual Environment:\n\nThe most flexible approach is to use the `env` command in your shebang:\n\n```bash\n#!/usr/bin/env python\n```\n\n### Why This Works:\n\n- `#!/usr/bin/env python` uses the `env` command to locate the Python interpreter in your `PATH`. This means it will automatically point to the Python interpreter of the currently active virtual environment, as long as the environment is activated.\n\n### Important Considerations:\n\n1. **Activate the Virtual Environment:**\n   Ensure that your virtual environment is activated before running the script. You can activate it with:\n\n   ```bash\n   pyenv activate venv_name\n   ```\n\n   or if you are using virtualenv:\n\n   ```bash\n   source venv_name/bin/activate\n   ```\n\n2. **Check Python Version:**\n   If you need a specific Python version (like Python 3), you can specify:\n\n   ```bash\n   #!/usr/bin/env python3\n   ```\n\n3. **Ensure Pyenv is Properly Configured:**\n   Make sure that Pyenv is correctly set up to manage your Python versions, and the virtual environment is properly created and activated.\n\n4. **Shell Environment:**\n   If you are running the script from a shell, make sure the shell environment recognizes the active virtual environment. This may involve setting up your shell configuration files (like `.bashrc`, `.zshrc`, etc.) to initialize Pyenv and handle virtual environments correctly.\n\nBy using `#!/usr/bin/env python`, your script will be flexible and portable across different environments and systems, as long as the appropriate virtual environment is activated beforehand."
    }
]