[
    {
        "role": "user",
        "content": "How can I calculate all 24 rotations of a 3D numpy array? I have a 3D numpy array that describes a polycube (a 3D tetris piece). I am aware of the rot90 method in numpy's array manipulation routines which provides 4 of the 24 rotations, but I am unsure how to calculate the remaining 20. My current approach is to convert the 3D array to a 2D matrix of coordinates, multiply by a rotation matrix, and convert it back. However, I would prefer to work directly with the 3D array. Here are my example arrays:\n\nExample 2x2x2 array:\n```\nfrom numpy import array\npolycube\narray([[[1, 0],\n        [1, 0]],\n\n       [[1, 1],\n        [0, 0]]])\n```\nExample 3x3x3 array:\n```\narray([[[1, 1, 0],\n        [1, 1, 0],\n        [0, 0, 0]],\n\n       [[0, 0, 0],\n        [1, 0, 0],\n        [1, 0, 0]],\n\n       [[0, 0, 0],\n        [0, 0, 0],\n        [0, 0, 0]]])\n```\nI only need the 24 orientation-preserving isometries, not all 48 rotations and reflections. This is part of a solver I am writing for a Soma cube-style puzzle."
    },
    {
        "role": "assistant",
        "content": "To obtain all 24 rotations of a 3D numpy array, you can employ a combination of axis-aligned rotations. The 24 rotational symmetries of a cube can be achieved by rotating around the principal axes in specific sequences. Here's a structured approach to achieve this directly with a 3D numpy array:\n\n### Step-by-Step Approach:\n\n1. **Define Rotation Functions**: Create functions for rotating the array around each of the three axes.\n\n2. **Generate All Rotations**: Use combinations of these rotations to generate all 24 unique orientations.\n\nHere's how you can implement this in Python:\n\n```python\nimport numpy as np\n\ndef rotate_x(array):\n    \"\"\" Rotate the 3D array 90 degrees around the x-axis \"\"\"\n    return np.rot90(array, axes=(1, 2))\n\ndef rotate_y(array):\n    \"\"\" Rotate the 3D array 90 degrees around the y-axis \"\"\"\n    return np.rot90(array, axes=(0, 2))\n\ndef rotate_z(array):\n    \"\"\" Rotate the 3D array 90 degrees around the z-axis \"\"\"\n    return np.rot90(array, axes=(0, 1))\n\ndef generate_rotations(array):\n    \"\"\" Generate all 24 unique rotations of a 3D array \"\"\"\n    rotations = []\n    for i in range(4):\n        for j in range(4):\n            for k in range(4):\n                rotated = np.rot90(array, i, (0, 1))\n                rotated = np.rot90(rotated, j, (1, 2))\n                rotated = np.rot90(rotated, k, (0, 2))\n                if not any(np.array_equal(rotated, r) for r in rotations):\n                    rotations.append(rotated)\n    return rotations\n\n# Example usage with a 2x2x2 polycube\npolycube = np.array([[[1, 0],\n                      [1, 0]],\n\n                     [[1, 1],\n                      [0, 0]]])\n\nrotations = generate_rotations(polycube)\nfor idx, rot in enumerate(rotations):\n    print(f\"Rotation {idx+1}:\\n{rot}\\n\")\n\n# Example usage with a 3x3x3 array\narray_3x3x3 = np.array([[[1, 1, 0],\n                         [1, 1, 0],\n                         [0, 0, 0]],\n\n                        [[0, 0, 0],\n                         [1, 0, 0],\n                         [1, 0, 0]],\n\n                        [[0, 0, 0],\n                         [0, 0, 0],\n                         [0, 0, 0]]])\n\nrotations_3x3x3 = generate_rotations(array_3x3x3)\nfor idx, rot in enumerate(rotations_3x3x3):\n    print(f\"Rotation {idx+1}:\\n{rot}\\n\")\n```\n\n### Explanation:\n\n- **`rotate_x`, `rotate_y`, and `rotate_z`**: These functions rotate the array 90 degrees around the x, y, and z axes, respectively.\n- **`generate_rotations`**: This function iterates over all possible combinations of 90-degree rotations around each axis. It checks if the resulting rotation has already been encountered to ensure uniqueness.\n- **Avoiding Duplicates**: By checking against already stored rotations, we ensure only unique orientations are captured.\n\nThis code should give you all 24 unique rotations that preserve the orientation of the polycube, suitable for solving puzzles like the Soma cube."
    }
]