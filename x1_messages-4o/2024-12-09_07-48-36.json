[
    {
        "role": "user",
        "content": "How can I use a custom comparison function in Python 3? I am trying to sort a list of words ['kar','htar','har','ar'] where the order of consonants is different from the English language. In Python 2.x, I could pass a custom function to sorted and .sort functions like so:\n\n```python\nx=['kar','htar','har','ar']\nsorted(x)\n['ar', 'har', 'htar', 'kar']\nsorted(x,cmp=customsort)\n['kar', 'htar', 'har', 'ar']\n```\n\nThe order of consonants in my language is as follows: \"k\",\"kh\",....,\"ht\",...\"h\",...,\"a\". However, in Python 3.x, I can't seem to pass the cmp keyword to the sorted function. I get the following error:\n\n```python\nsorted(x,cmp=customsort)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'cmp' is an invalid keyword argument for this function\n```\nIs there any alternative or do I need to write my own sorted function? Note: I have simplified by using \"k\", \"kh\", etc. The actual characters are Unicode and even more complicated. Sometimes vowels come before and after consonants. I've already written a custom comparison function, but I am not able to pass this function to sorted or .sort."
    },
    {
        "role": "assistant",
        "content": "In Python 3, the `cmp` parameter has been removed from the `sorted()` function and the `.sort()` method. Instead, you need to use the `key` parameter, which requires you to transform the input data into a form that supports natural ordering (like numbers or tuples). You can achieve custom sorting by creating a key function that converts each element to a sortable form.\n\nHere's how you can adapt your custom comparison function to work with Python 3:\n\n1. **Create a mapping of your custom order**: Assign a unique index to each character based on your custom order.\n\n2. **Define a key function**: Use this mapping to convert each word into a list of indices or a tuple that reflects your custom order.\n\n3. **Use the key function in `sorted()`**: Pass this key function to the `sorted()` function.\n\nHere's a step-by-step implementation:\n\n```python\n# Define the custom order of consonants and vowels.\ncustom_order = [\"k\", \"kh\", \"ht\", \"h\", \"a\"]\n\n# Create a dictionary to map each character to its index in the custom order.\norder_map = {char: index for index, char in enumerate(custom_order)}\n\ndef custom_key(word):\n    # Convert each character in the word to its corresponding index.\n    # If the character is not found in the order_map, you might want to handle it.\n    return [order_map.get(char, -1) for char in word]\n\n# List of words to sort.\nwords = ['kar', 'htar', 'har', 'ar']\n\n# Sort using the custom key function.\nsorted_words = sorted(words, key=custom_key)\n\nprint(sorted_words)\n```\n\n### Explanation:\n- **Mapping**: `order_map` assigns a unique index to each character in your custom order. This index will determine the sort order.\n- **Key Function**: `custom_key(word)` converts each word into a list of indices based on `order_map`. This list is used for comparison during sorting.\n- **Sorting**: `sorted(words, key=custom_key)` sorts the list using the order defined by the indices.\n\nThis method allows you to handle complex custom ordering, including dealing with Unicode characters. If your custom order is more complex (e.g., involving multi-character sequences), you might need to adjust the key function to handle those cases appropriately."
    }
]