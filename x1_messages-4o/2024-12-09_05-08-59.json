[
    {
        "role": "user",
        "content": "What is the easiest way to test for the existence of a CUDA-capable GPU from CMake? Our nightly build machines have the CUDA libraries installed but do not have a CUDA-capable GPU installed. These machines can build CUDA-enabled programs but cannot run them. In our automated nightly build process, our CMake scripts use the CMake command \"find_package(CUDA)\" to determine whether the CUDA software is installed. This sets the CMake variable \"CUDA_FOUND\" on platforms that have CUDA software installed. However, CUDA-using test programs fail on non-GPU CUDA machines, causing our nightly dashboards to look \"dirty\". I want CMake to avoid running those tests on such machines, but still build the CUDA software. After getting a positive \"CUDA_FOUND\" result, I would like to test for the presence of an actual GPU, then set a variable, say \"CUDA_GPU_FOUND\", to reflect this. How can I get CMake to test for the presence of a CUDA-capable GPU? This needs to work on three platforms: Windows with MSVC, Mac, and Linux. Also, how can I get CMake to compile and run a program to test for the presence of a GPU at configuration time, possibly using the \"TRY_RUN\" command?"
    },
    {
        "role": "assistant",
        "content": "To detect the presence of a CUDA-capable GPU using CMake, you can create a small CUDA program that performs a simple device query and then use the `try_run` command to execute it. Here's a step-by-step guide on how you can achieve this:\n\n1. **Write a Simple CUDA Program**: Create a small CUDA program that checks for the presence of a CUDA-capable GPU. This program should try to query the GPU device and return a success or failure code based on whether a GPU is found.\n\n   ```cpp\n   // gpu_check.cu\n   #include <iostream>\n   #include <cuda_runtime.h>\n\n   int main() {\n       int device_count = 0;\n       cudaError_t error_id = cudaGetDeviceCount(&device_count);\n       if (error_id != cudaSuccess || device_count == 0) {\n           std::cout << \"No CUDA-capable GPU found\" << std::endl;\n           return 1;\n       }\n       std::cout << \"CUDA-capable GPU found\" << std::endl;\n       return 0;\n   }\n   ```\n\n2. **Integrate with CMake**: In your CMakeLists.txt, compile and run this program using `try_run`. This will determine the presence of a GPU at configuration time.\n\n   ```cmake\n   cmake_minimum_required(VERSION 3.10)\n   project(CheckCUDA)\n\n   find_package(CUDA REQUIRED)\n\n   set(CUDA_CHECK_PROGRAM ${CMAKE_BINARY_DIR}/gpu_check)\n\n   # Add the CUDA program to be compiled\n   add_executable(gpu_check gpu_check.cu)\n   target_link_libraries(gpu_check ${CUDA_LIBRARIES})\n\n   # Try to run the program\n   include(CTest)\n   enable_testing()\n\n   try_run(RUN_RESULT COMPILE_RESULT\n           ${CUDA_CHECK_PROGRAM}\n           ${CMAKE_BINARY_DIR}\n           gpu_check\n           )\n\n   # Set a variable based on the try_run result\n   if(RUN_RESULT EQUAL 0)\n       set(CUDA_GPU_FOUND TRUE)\n       message(STATUS \"CUDA-capable GPU found.\")\n   else()\n       set(CUDA_GPU_FOUND FALSE)\n       message(STATUS \"No CUDA-capable GPU found.\")\n   endif()\n\n   # Use CUDA_GPU_FOUND to conditionally enable tests or other logic\n   if(CUDA_GPU_FOUND)\n       # Add your CUDA tests here\n   else()\n       message(WARNING \"CUDA tests will be skipped due to lack of GPU.\")\n   endif()\n   ```\n\n3. **Handle Platform Differences**: Ensure that your CMake setup can handle different platforms (Windows, Mac, Linux). The above example should generally work across these platforms, assuming CUDA is installed correctly and CMake is appropriately configured to find it.\n\nBy following these steps, you can build CUDA-enabled software on machines without a GPU and conditionally run tests based on the presence of a CUDA-capable GPU, keeping your nightly build dashboards clean."
    }
]