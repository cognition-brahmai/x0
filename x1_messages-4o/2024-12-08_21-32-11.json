[
    {
        "role": "user",
        "content": "Create a REST API which adds two numbers provided by the user and returns the result only if the user is authenticated with a valid username and password."
    },
    {
        "role": "assistant",
        "content": "Creating a REST API that adds two numbers and requires user authentication involves several steps. Below is a basic example using Python with the Flask framework. This example uses HTTP Basic Authentication for simplicity, but in a production environment, you might want to consider more secure methods like OAuth2 or JWT.\n\nFirst, ensure you have Flask installed. You can install it using pip:\n\n```bash\npip install Flask\n```\n\nNow, you can create a Flask application:\n\n```python\nfrom flask import Flask, request, jsonify\nfrom functools import wraps\n\napp = Flask(__name__)\n\n# Dummy user data\nusers = {\n    \"user1\": \"password1\",\n    \"user2\": \"password2\"\n}\n\n# Authentication decorator\ndef authenticate(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        auth = request.authorization\n        if not auth or not check_auth(auth.username, auth.password):\n            return jsonify({\"message\": \"Authentication required\"}), 401\n        return f(*args, **kwargs)\n    return decorated_function\n\ndef check_auth(username, password):\n    return username in users and users[username] == password\n\n@app.route('/add', methods=['POST'])\n@authenticate\ndef add_numbers():\n    data = request.get_json()\n    if 'number1' not in data or 'number2' not in data:\n        return jsonify({\"message\": \"Invalid input\"}), 400\n    \n    number1 = data['number1']\n    number2 = data['number2']\n    \n    if not isinstance(number1, (int, float)) or not isinstance(number2, (int, float)):\n        return jsonify({\"message\": \"Inputs must be numbers\"}), 400\n    \n    result = number1 + number2\n    return jsonify({\"result\": result})\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation:\n\n1. **Flask Setup**: We set up a basic Flask application.\n2. **User Data**: A dictionary `users` holds the username-password pairs. In a real application, you'd typically store user credentials securely in a database.\n3. **Authentication Decorator**: The `authenticate` decorator checks if the request contains valid credentials. If not, it returns a 401 error.\n4. **Check Authentication**: The `check_auth` function verifies the username and password against the stored credentials.\n5. **Add Numbers Route**: The `/add` route checks for the presence of `number1` and `number2` in the JSON request body, validates them, adds them, and returns the result.\n6. **Running the Application**: The application runs on the default port 5000 when executed.\n\n### Usage:\n\nTo test the API, you can use a tool like Postman or cURL. For example, using cURL:\n\n```bash\ncurl -X POST -H \"Content-Type: application/json\" -d '{\"number1\": 5, \"number2\": 10}' http://user1:password1@localhost:5000/add\n```\n\nThis command sends a POST request to the `/add` endpoint with basic authentication and a JSON payload containing the numbers to be added. If the credentials are correct, it returns the sum of the numbers.\n\nIn a real-world application, you should use HTTPS to encrypt the credentials and data being sent."
    }
]