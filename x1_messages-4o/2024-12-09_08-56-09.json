[
    {
        "role": "user",
        "content": "Can you provide an optimized solution for finding the length of the longest subarray with distinct elements for a given input?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To find the length of the longest subarray with distinct elements, we can use the sliding window technique with a hash map to achieve an optimized O(n) solution. Here's a Python implementation of the algorithm:\n\n```python\ndef length_of_longest_subarray_with_distinct_elements(arr):\n    # Dictionary to store the last occurrence index of each element\n    last_occurrence = {}\n    max_length = 0\n    start = 0  # Start index of the current window\n\n    for end in range(len(arr)):\n        if arr[end] in last_occurrence:\n            # If the element is already in the dictionary,\n            # move the start to the right of the last occurrence\n            start = max(start, last_occurrence[arr[end]] + 1)\n\n        # Update the last occurrence of the current element\n        last_occurrence[arr[end]] = end\n\n        # Update the maximum length found so far\n        max_length = max(max_length, end - start + 1)\n\n    return max_length\n\n# Example usage\narr = [1, 2, 3, 4, 2, 5, 3, 1, 2]\nprint(length_of_longest_subarray_with_distinct_elements(arr))  # Output: 5\n```\n\n### Explanation:\n- We use a dictionary `last_occurrence` to track the last index where each element was seen.\n- We maintain a sliding window using two pointers: `start` and `end`. Initially, both are at the start of the array.\n- As we iterate through the array with the `end` pointer, we check if the current element has been seen before and is within the current window. If it has, we move the `start` pointer to `last_occurrence[element] + 1` to ensure all elements in the window are distinct.\n- We update the `last_occurrence` of the current element to the current index `end`.\n- We calculate the current window length (`end - start + 1`) and update `max_length` if this window is longer than the previously recorded maximum length.\n\nThis algorithm efficiently computes the length of the longest subarray with distinct elements in linear time."
    }
]