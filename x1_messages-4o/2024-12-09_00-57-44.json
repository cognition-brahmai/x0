[
    {
        "role": "user",
        "content": "How can I create a global variable inside a module in Python? I attempted to set it up as shown below but the Python interpreter said the variable __DBNAME__ did not exist. Also, I'm trying to set up a singleton by using a module, as per a recommendation I found. The code and traceback are as follows:\n\n```python\n...\n__DBNAME__ = None\n\ndef initDB(name):\n    if not __DBNAME__:\n        __DBNAME__ = name\n    else:\n        raise RuntimeError(\"Database name has already been set.\")\n...\n```\n\nAfter importing the module in a different file:\n\n```python\n...\nimport mymodule\nmymodule.initDB('mydb.sqlite')\n...\n```\n\nThe traceback was:\n\n```python\n...\nUnboundLocalError: local variable 'DBNAME' referenced before assignment\n...\n```"
    },
    {
        "role": "assistant",
        "content": "The `UnboundLocalError` occurs because Python treats variables as local by default unless explicitly stated otherwise. When you attempt to assign a value to `__DBNAME__` inside the `initDB` function, Python assumes it's a new local variable rather than the global one you've defined outside the function. To modify a global variable within a function, you need to declare it as `global` within that function.\n\nHere's how you can modify your code to fix the issue:\n\n```python\n# mymodule.py\n\n__DBNAME__ = None\n\ndef initDB(name):\n    global __DBNAME__  # Declare that you're using the global __DBNAME__\n    if __DBNAME__ is None:  # Check if __DBNAME__ is not set\n        __DBNAME__ = name\n    else:\n        raise RuntimeError(\"Database name has already been set.\")\n```\n\nWith this change, when you call `initDB` from another file, it will correctly update the `__DBNAME__` variable in the module's global scope. Here's how you can use it:\n\n```python\n# another_file.py\n\nimport mymodule\n\nmymodule.initDB('mydb.sqlite')\n\n# Optionally, you can check if the database name was set correctly\nprint(mymodule.__DBNAME__)  # Output: mydb.sqlite\n```\n\nThis should resolve the `UnboundLocalError` and correctly implement the singleton pattern for your database name using a module-level global variable."
    }
]