[
    {
        "role": "user",
        "content": "How can I manage session expiration due to inactivity in Django? My application has the following requirements:\n1. Sessions should expire when the user closes the browser.\n2. Sessions should expire after a period of inactivity.\n3. The application should detect when a session expires due to inactivity and display an appropriate message to the user.\n4. Users should be warned of impending session expiry a few minutes before the end of the inactivity period and given an option to extend their session.\n5. If a user is working on a long business activity within the app that doesn't involve requests being sent to the server, the session must not timeout.\n\nI have come up with an implementation approach but it seems very elaborate. I was wondering if there might be a simpler method, especially for the second requirement, as using SESSION_COOKIE_AGE always expires the session at the end of the period even if the user is actively using the application."
    },
    {
        "role": "assistant",
        "content": "Managing session expiration in Django with your specific requirements involves a combination of server-side and client-side strategies. Here's a simplified approach to meet all of your criteria:\n\n### Server-Side Configuration\n\n1. **Expire on Browser Close**: Django does this by default if you don't set `SESSION_EXPIRE_AT_BROWSER_CLOSE` to `True` in your settings.py. However, this setting works differently depending on the browser, so it's not always reliable.\n\n2. **Inactivity Timeout**: To handle session expiration due to inactivity dynamically, you can set a shorter `SESSION_COOKIE_AGE` (e.g., 5-10 minutes) and use a custom middleware to update the session's last activity timestamp on each request.\n\n   ```python\n   # settings.py\n   SESSION_COOKIE_AGE = 600  # 10 minutes\n\n   # middleware.py\n   from django.utils.deprecation import MiddlewareMixin\n   import time\n\n   class UpdateSessionMiddleware(MiddlewareMixin):\n       def process_request(self, request):\n           if request.user.is_authenticated:\n               request.session['last_activity'] = int(time.time())\n\n   # Add `UpdateSessionMiddleware` to your MIDDLEWARE list in settings.py\n   ```\n\n### Client-Side Configuration\n\n3. **Detect Session Expiry and Notify User**: Use JavaScript to periodically check for session validity and notify the user if the session is about to expire.\n\n   ```html\n   <script>\n       let warningTime = 600000; // 10 minutes\n       let checkInterval = 60000; // 1 minute\n\n       function checkSession() {\n           fetch('/check-session/')\n               .then(response => response.json())\n               .then(data => {\n                   if (data.session_expired) {\n                       alert('Your session has expired due to inactivity.');\n                       window.location.reload();\n                   }\n               })\n               .catch(err => console.error('Error checking session:', err));\n       }\n\n       function warnUser() {\n           alert('Your session will expire soon. Please extend your session.');\n           // Logic to extend session, e.g., make an AJAX request\n       }\n\n       setInterval(() => {\n           fetch('/get-last-activity/')\n               .then(response => response.json())\n               .then(data => {\n                   let currentTime = new Date().getTime();\n                   if (currentTime - data.last_activity > warningTime) {\n                       warnUser();\n                   }\n               });\n       }, checkInterval);\n   </script>\n   ```\n\n4. **Extend Session on Activity**: You can extend the session by making a periodic AJAX call to the server or by capturing user events such as mouse movements or key presses.\n\n   ```javascript\n   function extendSession() {\n       fetch('/extend-session/', { method: 'POST' });\n   }\n\n   document.addEventListener('mousemove', extendSession);\n   document.addEventListener('keypress', extendSession);\n   ```\n\n### Backend Logic\n\n5. **Prevent Timeout During Long Activities**: Implement logic on the server to handle long activities, possibly by adding a heartbeat mechanism that periodically updates the session from the client-side if a user is working on something that doesn't involve server requests.\n\n   ```python\n   # views.py\n   from django.http import JsonResponse\n\n   def get_last_activity(request):\n       last_activity = request.session.get('last_activity', 0)\n       return JsonResponse({'last_activity': last_activity})\n\n   def extend_session(request):\n       if request.user.is_authenticated:\n           request.session.modified = True\n       return JsonResponse({'status': 'success'})\n   ```\n\nIn this approach, you leverage Django's session framework along with some client-side scripting to manage and detect session expirations effectively. This method balances the server's ability to manage session data with the client's capability to notify and interact with the user."
    }
]