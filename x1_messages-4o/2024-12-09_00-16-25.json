[
    {
        "role": "user",
        "content": "I'm trying to find a comprehensive list of all double-underscore variables commonly used in Python. In Python, these variables typically store metadata or are built into the system. For example, `__author__` and `__license__` are well known. What other double-underscore metadata variables are there? Can I create my own or are there standard ones that I should use? Also, `__init__`, `__name__`, and `__doc__` are built into Python. Are these the only reserved double-underscore variables? Are there any more? Is there a place where I can find a complete list of these?"
    },
    {
        "role": "assistant",
        "content": "Double-underscore variables in Python, often referred to as \"dunder\" variables, are typically used as special variables or methods that have specific meanings and behaviors. They fall into two categories: those you can define yourself (often for metadata) and those reserved by Python for special purposes. Let's break these down:\n\n### Commonly Used Metadata Dunder Variables\nYou can create your own metadata dunder variables. Here are some that are commonly used in Python projects:\n\n- `__author__`: The author of the code or module.\n- `__credits__`: A string listing individuals who contributed to the code.\n- `__license__`: The license of the code.\n- `__version__`: The version of the module or application.\n- `__status__`: The development status (e.g., \"Prototype\", \"Development\", \"Production\").\n- `__date__`: The date of creation or release.\n- `__maintainer__`: The current maintainer of the code.\n\n### Built-in Dunder Variables and Methods\nPython reserves several dunder variables and methods for special purposes. Here are some of the most common ones:\n\n- `__init__`: The constructor method for classes.\n- `__del__`: The destructor method for classes.\n- `__str__`: Defines human-readable string representation of an object.\n- `__repr__`: Defines developer-friendly string representation of an object.\n- `__name__`: The name of the module. It is `__main__` when the module is run as the main program.\n- `__doc__`: The docstring of a module, class, method, or function.\n- `__file__`: The pathname of a Python file from which a module was loaded.\n- `__path__`: The search path for a package's modules.\n- `__dict__`: The dictionary containing an object's writable attributes.\n- `__class__`: The class to which an instance belongs.\n- `__bases__`: A tuple containing the base classes of a class.\n- `__mro__`: The method resolution order for a class.\n- `__call__`: Allows an instance of a class to be called as a function.\n- `__getitem__`, `__setitem__`, `__delitem__`: Methods for indexing operations.\n- `__len__`: Returns the length of an object.\n- `__enter__`, `__exit__`: Methods for context managers (`with` statement).\n- `__add__`, `__sub__`, `__mul__`, etc.: Methods for arithmetic operations.\n- `__eq__`, `__lt__`, `__gt__`, etc.: Methods for comparison operations.\n\n### Comprehensive List\nPython's official documentation and PEPs (Python Enhancement Proposals) are good resources for detailed and up-to-date information on these variables and methods. The Python language reference and the data model section in the documentation are particularly useful:\n\n- [The Python Language Reference](https://docs.python.org/3/reference/)\n- [Data Model](https://docs.python.org/3/reference/datamodel.html)\n- [Built-in Functions and Methods](https://docs.python.org/3/library/functions.html)\n\n### Creating Your Own\nYou can define your own double-underscore variables for metadata purposes, but you should avoid using dunder names for other purposes unless you fully understand their implications, as they might conflict with future Python features or conventions.\n\nOverall, while you can create your own dunder variables, it's crucial to be aware of the ones reserved by Python to avoid any unintended behavior or conflicts."
    }
]