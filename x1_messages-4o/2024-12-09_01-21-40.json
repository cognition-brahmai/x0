[
    {
        "role": "user",
        "content": "How can I indicate to PyCharm the expected type of a parameter in my Python code? For instance, if I have a method that expects a parameter to be a certain type (like pygame.Surface), how can I make PyCharm recognize this so it can provide accurate code completion and warnings?\n\n<pre><code>\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n\npeasant = Person(\"Dennis\", 37)\n# PyCharm knows that the \"peasant\" variable is of type Person\npeasant.dig_filth()   # shows warning -- Person doesn't have a dig_filth method\n\nclass King:\n    def repress(self, peasant):\n        # PyCharm has no idea what type the \"peasant\" parameter should be\n        peasant.knock_over()   # no warning even though knock_over doesn't exist\n\nKing().repress(peasant)\n# Even if I call the method once with a Person instance, PyCharm doesn't\n# consider that to mean that the \"peasant\" parameter should always be a Person\n</code></pre>"
    },
    {
        "role": "assistant",
        "content": "To indicate the expected type of a parameter in your Python code in PyCharm and make use of type hints, you can use type annotations. This will help PyCharm (and other tools) understand the expected types, providing better code analysis, completion, and warnings.\n\nHere's how you can specify the type of a parameter using type annotations:\n\n```python\nclass Person:\n    def __init__(self, name: str, age: int):\n        self.name = name\n        self.age = age\n\n    def knock_over(self):\n        print(f\"{self.name} is knocking over something.\")\n\nclass King:\n    def repress(self, peasant: Person):\n        peasant.knock_over()  # Now, PyCharm knows peasant is a Person\n\n# Example usage\npeasant = Person(\"Dennis\", 37)\nKing().repress(peasant)\n```\n\nIn this code:\n\n- The `Person` class has its `__init__` method parameters annotated with `str` and `int`.\n- The `repress` method in the `King` class has its `peasant` parameter annotated with `Person`, indicating that it expects an instance of `Person`.\n\nBy using type annotations, PyCharm can provide you with better code completion and will warn you if you try to use methods or properties that don't exist on the given type.\n\nIf you are using older versions of Python that do not support type annotations (Python 3.5+ is needed), you can use type comments:\n\n```python\nclass King:\n    def repress(self, peasant):\n        # type: (Person) -> None\n        peasant.knock_over()\n```\n\nThis approach is less readable than using type hints directly but serves a similar purpose. However, it's recommended to use type annotations if your Python version supports them."
    }
]