[
    {
        "role": "user",
        "content": "How can I convert daily stock data to weekly data using pandas in Python? \n\nI have a DataFrame storing daily-based data as follows:\n\n```\nDate              Open        High         Low       Close   Volume\n2010-01-04   38.660000   39.299999   38.509998   39.279999  1293400   \n2010-01-05   39.389999   39.520000   39.029999   39.430000  1261400   \n2010-01-06   39.549999   40.700001   39.020000   40.250000  1879800   \n2010-01-07   40.090000   40.349998   39.910000   40.090000   836400   \n2010-01-08   40.139999   40.310001   39.720001   40.290001   654600   \n2010-01-11   40.209999   40.520000   40.040001   40.290001   963600   \n2010-01-12   40.160000   40.340000   39.279999   39.980000  1012800   \n2010-01-13   39.930000   40.669998   39.709999   40.560001  1773400   \n2010-01-14   40.490002   40.970001   40.189999   40.520000  1240600   \n2010-01-15   40.570000   40.939999   40.099998   40.450001  1244200   \n```\n\nI want to convert it into weekly-based data following these rules:\n1. The \"Date\" should be every Monday (considering holidays, when Monday is not a trading day, the first trading day of the current week should be applied as the Date).\n2. \"Open\" should be Monday's (or the first trading day of the current week) Open.\n3. \"Close\" should be Friday's (or the last trading day of the current week) Close.\n4. \"High\" should be the highest High of trading days in the current week.\n5. \"Low\" should be the lowest Low of trading days in the current week.\n6. \"Volume\" should be the sum of all Volumes of trading days in the current week.\n\nThe target output should look like this:\n\n```\nDate              Open        High         Low       Close   Volume\n2010-01-04   38.660000   40.700001   38.509998   40.290001  5925600   \n2010-01-11   40.209999   40.970001   39.279999   40.450001  6234600   \n```\n\nMy current code snippet is as follows:\n\n```python\nimport pandas_datareader.data as web\n\nstart = datetime.datetime(2010, 1, 1)\nend = datetime.datetime(2016, 12, 31)\nf = web.DataReader(\"MNST\", \"yahoo\", start, end, session=session)\nprint f\n```\n\nWhich function should I use to map my daily-based data to the expected weekly-based data?"
    },
    {
        "role": "assistant",
        "content": "To convert daily stock data to weekly data using pandas, you can use the `resample` function. This function allows you to aggregate your data based on a specified time frequency. In your case, you want to resample the data weekly and apply custom aggregation rules for each column as specified.\n\nHere's how you can achieve this:\n\n```python\nimport pandas as pd\n\n# Assume 'df' is your DataFrame containing the daily stock data\n# Make sure the 'Date' column is a DateTimeIndex\ndf['Date'] = pd.to_datetime(df['Date'])\ndf.set_index('Date', inplace=True)\n\n# Resample the data to weekly frequency, starting from Monday\nweekly_df = df.resample('W-MON').agg({\n    'Open': 'first',  # First trading day's open of the week\n    'High': 'max',    # Maximum high of the week\n    'Low': 'min',     # Minimum low of the week\n    'Close': 'last',  # Last trading day's close of the week\n    'Volume': 'sum'   # Sum of the volumes of the week\n}).dropna()  # Drop any weeks with NaN values (e.g., incomplete weeks)\n\n# Reset the index if you want to have the 'Date' as a column\nweekly_df.reset_index(inplace=True)\n\nprint(weekly_df)\n```\n\nExplanation:\n\n1. **Convert Date to DateTime**: Ensure the 'Date' column is of type `datetime` and set it as the index of the DataFrame.\n\n2. **Resample**: Use `resample('W-MON')` to aggregate the data weekly with the week's label corresponding to Monday. You can adjust the frequency string as needed if your week should start on a different day.\n\n3. **Aggregate**: Use the `agg` function to define the aggregation rules for each column:\n   - 'Open': Take the first value of the week.\n   - 'High': Take the maximum value within the week.\n   - 'Low': Take the minimum value within the week.\n   - 'Close': Take the last value of the week.\n   - 'Volume': Sum all volumes for the week.\n\n4. **Drop NaNs**: Use `dropna()` to remove any weeks that might have NaN values, which can happen if there are incomplete weeks at the beginning of your dataset.\n\n5. **Reset Index**: Optionally, reset the index if you prefer 'Date' to be a regular column instead of an index.\n\nThis code will give you the desired weekly data with the first trading day of the week as the date."
    }
]