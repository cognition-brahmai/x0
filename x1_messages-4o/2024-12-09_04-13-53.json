[
    {
        "role": "user",
        "content": "I am trying to use Python's logging module to write logs. However, I am facing a peculiar issue where only the logs with `error` level are being logged while `info` level logs are not getting logged despite setting the level to different values. Here is the code I am using:\n\n```python\nimport logging\nimport logging.handlers\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    fh = logging.handlers.RotatingFileHandler('./logtest.log', maxBytes=10240, backupCount=5)\n    fh.setLevel(logging.DEBUG) #no matter what level I set here\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n    logger.addHandler(fh)\n    logger.info('INFO')\n    logger.error('ERROR')\n```\n\nAnd the output I am getting is:\n\n```python\n2014-01-14 11:47:38,990 - root - ERROR - ERROR\n```\n\nAs per the Python documentation on logging levels, the `INFO` level logs should also be logged. What am I missing here?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering with the logging module is related to the logger's level setting. By default, the root logger's level is set to `WARNING`, which means it will only log messages with a level of `WARNING` or higher unless otherwise configured. In your code, you've set the level for the file handler `fh` but not for the logger itself.\n\nTo ensure that all logs, including those with `INFO` level, are captured, you need to set the level for the logger as well. Here's how you can modify your code to achieve this:\n\n```python\nimport logging\nimport logging.handlers\n\nif __name__ == \"__main__\":\n    logger = logging.getLogger()\n    logger.setLevel(logging.DEBUG)  # Set the logger's level to DEBUG\n\n    fh = logging.handlers.RotatingFileHandler('./logtest.log', maxBytes=10240, backupCount=5)\n    fh.setLevel(logging.DEBUG)  # Set the handler's level to DEBUG\n\n    formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\n    fh.setFormatter(formatter)\n\n    logger.addHandler(fh)\n\n    logger.info('INFO')\n    logger.error('ERROR')\n```\n\nBy setting `logger.setLevel(logging.DEBUG)`, you ensure that the logger captures all messages at the `DEBUG` level and above, which includes `INFO`, `WARNING`, `ERROR`, and `CRITICAL` levels. This should resolve the issue and allow `INFO` level messages to be logged to your file."
    }
]