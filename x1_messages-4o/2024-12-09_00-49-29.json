[
    {
        "role": "user",
        "content": "In Python 3.3, I've been informed that range() is a generator and generators can be used as iterators. However, when I try to use the next() function on a range() object as shown in the following code:\n\n```python\nmyrange = range(10)\nprint(next(myrange))\n```\nI receive a TypeError saying that 'range' object is not an iterator. Why am I not able to call next() on a range()? I was expecting this to print 0 and then advance to the next value in `myrange`. What am I missing here?"
    },
    {
        "role": "assistant",
        "content": "In Python, the `range()` function does not return a generator but rather a \"range object\". While this range object is iterable, meaning you can loop over it with a `for` loop or convert it to a list, it is not an iterator itself. This is why you encounter a `TypeError` when you try to use the `next()` function on it directly.\n\nTo use `next()` with a range, you need to explicitly create an iterator from the range object using the `iter()` function. Here's how you can do this:\n\n```python\nmyrange = range(10)\nrange_iterator = iter(myrange)\nprint(next(range_iterator))  # This will print 0\nprint(next(range_iterator))  # This will print 1\n```\n\nIn this code, `iter(myrange)` creates an iterator from `myrange`, and then you can use `next()` to iterate through it. Each call to `next(range_iterator)` will return the next number in the range sequence."
    }
]