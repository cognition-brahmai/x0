[
    {
        "role": "user",
        "content": "How can I implement a function or method to check if a given number is a perfect square? The efficiency of the solution is not a primary concern at the moment, I am more interested in a solution that works accurately."
    },
    {
        "role": "assistant",
        "content": "To determine if a given number is a perfect square, you can implement a simple function that checks if the square root of the number is an integer. Here's a straightforward implementation in Python:\n\n```python\nimport math\n\ndef is_perfect_square(num):\n    if num < 0:\n        return False  # Negative numbers cannot be perfect squares\n    sqrt_num = math.sqrt(num)\n    return sqrt_num.is_integer()\n\n# Example Usage\nnumber = 16\nif is_perfect_square(number):\n    print(f\"{number} is a perfect square.\")\nelse:\n    print(f\"{number} is not a perfect square.\")\n```\n\n### Explanation:\n\n1. **Check for Negative Numbers**: A negative number cannot be a perfect square, so it's an immediate return of `False` if the input is negative.\n\n2. **Calculate the Square Root**: Use the `math.sqrt()` function to compute the square root of the given number.\n\n3. **Check if the Square Root is an Integer**: The `is_integer()` method checks if the obtained square root is an integer. If it is, then the number is a perfect square.\n\nThis implementation is simple and effective for checking if a number is a perfect square."
    }
]