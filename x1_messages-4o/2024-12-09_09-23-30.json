[
    {
        "role": "user",
        "content": "What is the code to find all the divisors of a given number?"
    },
    {
        "role": "assistant",
        "content": "To find all the divisors of a given number, you can use a simple algorithm that iterates through all numbers from 1 to the square root of the given number. Here's a Python code snippet that demonstrates how to achieve this:\n\n```python\ndef find_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    divisors.sort()\n    return divisors\n\n# Example usage:\nnumber = 36\ndivisors = find_divisors(number)\nprint(f\"The divisors of {number} are: {divisors}\")\n```\n\nIn this code:\n\n1. We iterate over all numbers `i` from 1 to the square root of `n`.\n2. If `i` is a divisor (i.e., `n % i == 0`), we add `i` to the list of divisors.\n3. We also add `n // i` to the list of divisors if it is different from `i` to ensure that both divisors are accounted for.\n4. Finally, we sort the list of divisors and return it.\n\nThis approach is efficient because it reduces the number of iterations by checking up to the square root of `n` rather than `n` itself."
    }
]