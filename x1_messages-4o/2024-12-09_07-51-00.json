[
    {
        "role": "user",
        "content": "I am currently setting up a CentOS server and noticed that the default version of Python on CentOS is set to 2.6.6, however, I want to use Python 2.7. I do not want to tamper with the existing Python version as it is being used by system tools such as YUM. On my Mac terminal, I have Python versions 2.6.8, 2.7.5, and 3.3.3 installed. How can I look up all the versions of Python installed on CentOS to prevent accidentally installing the same version twice?"
    },
    {
        "role": "assistant",
        "content": "On a CentOS server, you can check the installed versions of Python by using the following command in the terminal:\n\n```bash\nls /usr/bin/python*\n```\n\nThis command will list all the Python executables available in the `/usr/bin/` directory, which is the default location for system binaries. The output will show you the Python versions that are installed.\n\nAnother way to check the available Python versions is to use the `alternatives` command, which manages symbolic links for default commands:\n\n```bash\nalternatives --display python\n```\n\nThis will show you the various Python versions that are managed by the alternatives system, if applicable.\n\nIf you want to install Python 2.7 alongside the existing Python version without interfering with system tools, you can use the Software Collections (SCL) repository or compile Python from source. Here\u2019s how you can do it using SCL:\n\n1. Enable the SCL repository:\n\n   ```bash\n   sudo yum install centos-release-scl\n   ```\n\n2. Install Python 2.7:\n\n   ```bash\n   sudo yum install python27\n   ```\n\n3. Once installed, you can enable Python 2.7 for your session with:\n\n   ```bash\n   scl enable python27 bash\n   ```\n\n4. Verify the Python version:\n\n   ```bash\n   python --version\n   ```\n\nBy using SCL, Python 2.7 will be available in a separate environment, ensuring that the system Python remains untouched."
    }
]