[
    {
        "role": "user",
        "content": "How can I generate and manipulate a dynamic Excel table in Java code which updates based on user input? The table must have columns for limb movement data, and an artificial limb movement data header, timestamp, limb ID, movement direction, and movement magnitude. Additionally, how can I create a form control for user input, with direction and magnitude as its values? The Java code should be efficient and utilize Apache POI libraries. Can you provide a sample code for this?"
    },
    {
        "role": "assistant",
        "content": "To generate and manipulate a dynamic Excel table in Java using the Apache POI library, you'll need to perform several steps. Apache POI is a powerful library for handling Microsoft Office Excel documents. Below, I'll provide a sample code that demonstrates how to create a dynamic Excel table with user input form controls, specifically for handling limb movement data.\n\n### Setup Apache POI\n\nFirst, make sure you have the Apache POI library added to your project. You can include it using Maven by adding the following dependencies to your `pom.xml`:\n\n```xml\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi</artifactId>\n    <version>5.2.3</version>\n</dependency>\n<dependency>\n    <groupId>org.apache.poi</groupId>\n    <artifactId>poi-ooxml</artifactId>\n    <version>5.2.3</version>\n</dependency>\n```\n\n### Sample Code\n\nHere's a sample code to create and manipulate the Excel table:\n\n```java\nimport org.apache.poi.ss.usermodel.*;\nimport org.apache.poi.xssf.usermodel.XSSFWorkbook;\nimport org.apache.poi.ss.util.CellRangeAddressList;\nimport org.apache.poi.xssf.usermodel.XSSFDataValidation;\nimport org.apache.poi.xssf.usermodel.XSSFDataValidationHelper;\nimport org.apache.poi.xssf.usermodel.XSSFSheet;\nimport org.apache.poi.xssf.usermodel.XSSFTable;\nimport org.apache.poi.xssf.usermodel.XSSFTableStyleInfo;\n\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.util.Date;\n\npublic class ExcelTableExample {\n\n    public static void main(String[] args) {\n        Workbook workbook = new XSSFWorkbook();\n        XSSFSheet sheet = (XSSFSheet) workbook.createSheet(\"Limb Movement Data\");\n\n        // Create header row\n        Row headerRow = sheet.createRow(0);\n        headerRow.createCell(0).setCellValue(\"Timestamp\");\n        headerRow.createCell(1).setCellValue(\"Limb ID\");\n        headerRow.createCell(2).setCellValue(\"Movement Direction\");\n        headerRow.createCell(3).setCellValue(\"Movement Magnitude\");\n\n        // Create a table\n        XSSFTable table = sheet.createTable();\n        table.setDisplayName(\"LimbMovementData\");\n        table.setRef(\"A1:D1\");\n        XSSFTableStyleInfo style = (XSSFTableStyleInfo) table.getStyle();\n        style.setName(\"TableStyleMedium9\");\n        style.setShowColumnStripes(true);\n        style.setShowRowStripes(true);\n\n        // Create data validation for Movement Direction\n        String[] directions = {\"Up\", \"Down\", \"Left\", \"Right\"};\n        CellRangeAddressList addressList = new CellRangeAddressList(1, 100, 2, 2);\n        DataValidationHelper validationHelper = new XSSFDataValidationHelper(sheet);\n        DataValidationConstraint constraint = validationHelper.createExplicitListConstraint(directions);\n        DataValidation dataValidation = validationHelper.createValidation(constraint, addressList);\n        dataValidation.setSuppressDropDownArrow(true);\n        sheet.addValidationData(dataValidation);\n\n        // Create form controls for Movement Magnitude\n        for (int i = 1; i <= 100; i++) {\n            Row row = sheet.createRow(i);\n            row.createCell(0).setCellValue(new Date().toString());\n            row.createCell(1).setCellValue(\"Limb\" + i);\n            row.createCell(2).setCellValue(\"\");\n            row.createCell(3).setCellValue(0);\n        }\n\n        // Adjust column width\n        for (int i = 0; i < 4; i++) {\n            sheet.autoSizeColumn(i);\n        }\n\n        try (FileOutputStream fileOut = new FileOutputStream(\"LimbMovementData.xlsx\")) {\n            workbook.write(fileOut);\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n\n        // Clean up\n        try {\n            workbook.close();\n        } catch (IOException e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n### Explanation\n\n1. **Workbook and Sheet**: We create a workbook and a sheet to hold the data.\n2. **Header Row**: The first row is set as the header with columns: Timestamp, Limb ID, Movement Direction, Movement Magnitude.\n3. **Table Creation**: A table is created from the header row to the first row of data.\n4. **Data Validation**: A dropdown list is added for the \"Movement Direction\" column to limit the user input to specific values.\n5. **Form Control for Input**: The code sets default values and creates rows that can be filled with user data.\n6. **File Output**: The workbook is written to an Excel file named \"LimbMovementData.xlsx\".\n\nThis code provides a basic setup for creating and managing an Excel table for limb movement data with form controls for user input in Java using Apache POI. Adjust the range and details according to your needs."
    }
]