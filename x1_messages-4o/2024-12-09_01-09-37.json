[
    {
        "role": "user",
        "content": "I have just installed Python3 from python.org and I am having an issue while installing packages with pip. There is a man-in-the-middle packet inspection appliance on the network that inspects all packets, including SSL, by resigning all SSL connections with its own certificate. This custom root certificate is pushed into the Windows Keystore as part of the GPO. With Java, when I need to access external https sites, I manually update the cacerts in the JVM to trust the Self-Signed CA certificate. How can I do this for Python? At present, when I attempt to install packages using pip, I receive \"[SSL: CERTIFICATE_VERIFY_FAILED]\" errors. I understand that I can ignore them using the \"--trusted-host\" parameter, but I don't want to use it for every package installation. Is there a way to update the CA Certificate store that Python uses?"
    },
    {
        "role": "assistant",
        "content": "To resolve the SSL certificate verification issue with Python's `pip`, you can configure Python to use the custom root certificate that your network's packet inspection appliance uses. Here\u2019s how you can add your custom root certificate to Python's certificate store:\n\n1. **Locate the Custom Root Certificate:**\n   - Make sure you have a copy of the custom root certificate used by your network\u2019s inspection appliance. This is usually in `.crt` or `.pem` format.\n\n2. **Locate Python\u2019s Certificate Store:**\n   - Python typically uses its own bundled certificate store, which might be located in a file named `cacert.pem`. To find this file, locate the `certifi` package which is used by `pip` to handle SSL certificates:\n     - Run this command to find where `certifi` is installed:\n       ```bash\n       python -m certifi\n       ```\n     - This command will print the path to `cacert.pem`.\n\n3. **Append the Custom Certificate:**\n   - Open the `cacert.pem` file in a text editor.\n   - Append the contents of your custom root certificate file to `cacert.pem`. \n\n4. **Verify the Changes:**\n   - You can verify that Python recognizes the new certificate by attempting to install a package with `pip`:\n     ```bash\n     pip install <package-name>\n     ```\n   - Ensure that the SSL certificate verification error no longer occurs.\n\n5. **Alternative Approach (Environment Variable):**\n   - If you prefer not to modify `cacert.pem`, you can set the `REQUESTS_CA_BUNDLE` environment variable to point to a certificate file that includes both the default certificates and your custom certificate:\n     ```bash\n     export REQUESTS_CA_BUNDLE=/path/to/combined-cacert.pem\n     ```\n   - For Windows Command Prompt:\n     ```cmd\n     set REQUESTS_CA_BUNDLE=C:\\path\\to\\combined-cacert.pem\n     ```\n   - For Windows PowerShell:\n     ```powershell\n     $env:REQUESTS_CA_BUNDLE=\"C:\\path\\to\\combined-cacert.pem\"\n     ```\n\nBy following these steps, you should be able to resolve the SSL certificate verification errors without needing to use the `--trusted-host` parameter for every package installation."
    }
]