[
    {
        "role": "user",
        "content": "How can I compare two Python Pandas dataframes to highlight the differences between them? My goal is to output an HTML table that identifies rows that have changed, this could be int, float, boolean or string. I want to output rows with same, OLD and NEW values, so the user can clearly see what changed between two dataframes. For example, \n\nFor \"StudentRoster Jan-1\":\n\n| id | Name | score | isEnrolled | Comment |\n|---|---|---|---|---|\n| 111 | Jack | 2.17 | True | He was late to class |\n| 112 | Nick | 1.11 | False | Graduated |\n| 113 | Zoe | 4.12 | True | |\n\nFor \"StudentRoster Jan-2\":\n\n| id | Name | score | isEnrolled | Comment |\n|---|---|---|---|---|\n| 111 | Jack | 2.17 | True | He was late to class |\n| 112 | Nick | 1.21 | False | Graduated |\n| 113 | Zoe | 4.12 | False | On vacation |\n\nI want to output a table like:\n\n\"StudentRoster Difference Jan-1 - Jan-2\":\n\n| id | Name | score | isEnrolled | Comment |\n|---|---|---|---|---|\n| 112 | Nick | was 1.11| now 1.21 | False | Graduated |\n| 113 | Zoe | 4.12 | was True | now False | was \"\" | now \"On vacation\" |\n\nI think I could do a row by row and column by column comparison, but is there an easier way?"
    },
    {
        "role": "assistant",
        "content": "To compare two Pandas DataFrames and highlight differences as you described, you can use various approaches. Here's a Python function that uses Pandas to achieve this. The function will create a new DataFrame showing the differences between two DataFrames and format it for output as an HTML table.\n\n```python\nimport pandas as pd\n\ndef compare_dataframes(df1, df2):\n    diff_df = pd.DataFrame(columns=df1.columns)\n    \n    # Iterate over the rows of the DataFrames\n    for i in range(len(df1)):\n        row1, row2 = df1.iloc[i], df2.iloc[i]\n        diff_row = {}\n        has_diff = False\n        \n        # Check each column for differences\n        for col in df1.columns:\n            val1, val2 = row1[col], row2[col]\n            \n            if val1 != val2:\n                has_diff = True\n                diff_row[col] = f'was {val1} | now {val2}'\n            else:\n                diff_row[col] = val1\n        \n        if has_diff:\n            diff_df = diff_df.append(diff_row, ignore_index=True)\n    \n    return diff_df\n\n# Example usage with your data\nroster_jan1 = pd.DataFrame({\n    'id': [111, 112, 113],\n    'Name': ['Jack', 'Nick', 'Zoe'],\n    'score': [2.17, 1.11, 4.12],\n    'isEnrolled': [True, False, True],\n    'Comment': ['He was late to class', 'Graduated', '']\n})\n\nroster_jan2 = pd.DataFrame({\n    'id': [111, 112, 113],\n    'Name': ['Jack', 'Nick', 'Zoe'],\n    'score': [2.17, 1.21, 4.12],\n    'isEnrolled': [True, False, False],\n    'Comment': ['He was late to class', 'Graduated', 'On vacation']\n})\n\ndiff_df = compare_dataframes(roster_jan1, roster_jan2)\n\n# Convert to HTML\nhtml_table = diff_df.to_html(index=False)\nprint(html_table)\n```\n\n### Explanation:\n- The function `compare_dataframes` takes two DataFrames as input.\n- It iterates over each row and compares corresponding cells in the two DataFrames.\n- If there's a difference in values, it records the \"was\" and \"now\" values in the `diff_df`.\n- If all values in a row are the same, it does not include that row in the `diff_df`.\n- Finally, it converts the resulting DataFrame to an HTML table for easy viewing.\n\nThis approach can be expanded or customized depending on the complexity and requirements of your data comparison."
    }
]