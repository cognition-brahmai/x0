[
    {
        "role": "user",
        "content": "Can you provide a code snippet that finds the longest substring in a given string?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Python code snippet that finds the longest substring without repeating characters in a given string, using the sliding window technique:\n\n```python\ndef longest_unique_substring(s):\n    char_index_map = {}\n    start = 0\n    max_length = 0\n    longest_substr = \"\"\n\n    for end, char in enumerate(s):\n        if char in char_index_map and char_index_map[char] >= start:\n            start = char_index_map[char] + 1\n\n        char_index_map[char] = end\n        current_length = end - start + 1\n\n        if current_length > max_length:\n            max_length = current_length\n            longest_substr = s[start:end + 1]\n\n    return longest_substr\n\n# Example usage:\ninput_string = \"abcabcbb\"\nresult = longest_unique_substring(input_string)\nprint(\"Longest substring without repeating characters:\", result)\n```\n\nThis function iterates over each character in the string, maintaining a mapping of characters to their latest indices. The `start` index moves forward to ensure the substring remains unique, while `end` iterates through the string. The longest unique substring is updated whenever a longer one is found."
    }
]