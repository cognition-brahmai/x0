[
    {
        "role": "user",
        "content": "How can I use bcrypt to hash passwords and later verify if a supplied password is correct? I can easily hash passwords using bcrypt as shown below, but I'm unsure of how to compare a plain text password to the stored hash.\n\n```python\nimport bcrypt\n\npassword = u'foobar'\npassword_hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n\n# then store password_hashed in a database\n```"
    },
    {
        "role": "assistant",
        "content": "To use `bcrypt` for password hashing and later verifying a supplied password against the stored hash, you can follow these steps:\n\n1. **Hashing the Password:**\n\n   When a user sets or changes their password, you hash it using `bcrypt.hashpw()` like you've done. Store the resulting hash in your database.\n\n   ```python\n   import bcrypt\n\n   password = u'foobar'.encode('utf-8')  # Encode the password to bytes\n   password_hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n\n   # Store password_hashed in a database\n   ```\n\n   Note: Ensure the password is encoded to bytes before hashing, as `bcrypt` works with byte strings.\n\n2. **Verifying the Password:**\n\n   When a user attempts to log in, you'll need to verify the supplied password against the stored hash. Use `bcrypt.checkpw()` for this purpose.\n\n   ```python\n   import bcrypt\n\n   # Fetch the stored hash from the database\n   stored_hash = password_hashed  # For example purposes, using the previously hashed password\n\n   # The login password provided by the user\n   login_password = u'foobar'.encode('utf-8')  # Encode to bytes\n\n   # Verify the password\n   if bcrypt.checkpw(login_password, stored_hash):\n       print(\"Password is correct!\")\n   else:\n       print(\"Password is incorrect.\")\n   ```\n\n**Key Points:**\n\n- Always encode the password to bytes before hashing or verifying, as `bcrypt` requires byte strings.\n- Use `bcrypt.gensalt()` to generate a salt for hashing. This makes each hash unique, even for identical passwords.\n- Store the hash (and not the plaintext password) securely in your database.\n- During verification, retrieve the stored hash from the database and use `bcrypt.checkpw()` to compare it with the provided password.\n\nThis approach ensures that passwords are securely hashed and can be verified without storing or transmitting the plaintext password."
    }
]