[
    {
        "role": "user",
        "content": "In Python, what is the standard way to check the type of an object? How can I verify if an object is of a specific type or if it inherits from a particular type? For instance, how can I check if the object 'o' is of type 'str'?\n\nNote: This question is not about expecting a string to be a number in Python 3.x or expecting a string like '1' to also be an integer. For such inquiries, please refer to these discussions: \"How do I check if a string represents a number (float or int)?\", \"How can I read inputs as numbers?\" and/or \"Asking the user for input until they give a valid response\"."
    },
    {
        "role": "assistant",
        "content": "In Python, you can check the type of an object using the `type()` function. To verify if an object is of a specific type or if it inherits from a particular type, you can use the `isinstance()` function. Here's how you can perform these checks:\n\n1. **Using `type()`**: This function returns the type of an object. You can directly compare it to a specific type to check if an object is exactly of that type.\n\n   ```python\n   o = \"Hello, World!\"\n   if type(o) is str:\n       print(\"o is of type 'str'\")\n   else:\n       print(\"o is not of type 'str'\")\n   ```\n\n2. **Using `isinstance()`**: This function checks if an object is an instance of a specific class or a subclass thereof. It is generally preferred over `type()` when you want to consider inheritance.\n\n   ```python\n   o = \"Hello, World!\"\n   if isinstance(o, str):\n       print(\"o is an instance of 'str' or its subclass\")\n   else:\n       print(\"o is not an instance of 'str'\")\n   ```\n\nUsing `isinstance()` is more flexible and recommended when dealing with class hierarchies because it accounts for inheritance, whereas `type()` only checks for the exact, immediate type of the object."
    }
]