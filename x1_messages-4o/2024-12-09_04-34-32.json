[
    {
        "role": "user",
        "content": "Is there a way to retrieve values of keys with arbitrary depth from a nested dictionary object without having to subclass 'dict'? I am currently using Python 2.7 but I am also interested in Python 3.x solutions. Here is the code I am using presently:\n\n```python\nclass MyDict(dict):\n    def recursive_get(self, *args, **kwargs):\n        default = kwargs.get('default')\n        cursor = self\n        for a in args:\n            if cursor is default: break\n            cursor = cursor.get(a, default)\n        return cursor\n\nd = MyDict(foo={'bar': 'baz'})\nd\n{'foo': {'bar': 'baz'}}\nd.get('foo')\n{'bar': 'baz'}\nd.recursive_get('foo')\n{'bar': 'baz'}\nd.recursive_get('foo', 'bar')\n'baz'\nd.recursive_get('bogus key', default='nonexistent key')\n'nonexistent key'\n```\n\nIs there a built-in method or a module that provides this behavior?"
    },
    {
        "role": "assistant",
        "content": "In both Python 2.7 and Python 3.x, there isn't a built-in method that directly provides recursive key access to nested dictionaries as you've implemented with your `MyDict` class. However, you can achieve the same functionality without subclassing `dict` by defining a standalone function. This function will allow you to access keys at arbitrary depths in a nested dictionary. Here's how you can implement such a function:\n\n### Python 2.7 and 3.x Solution\n\n```python\ndef recursive_get(d, *keys, **kwargs):\n    default = kwargs.get('default')\n    cursor = d\n    for key in keys:\n        try:\n            cursor = cursor[key]\n        except (KeyError, TypeError):\n            return default\n    return cursor\n\n# Example usage\nd = {'foo': {'bar': 'baz'}}\nprint(recursive_get(d, 'foo'))  # Output: {'bar': 'baz'}\nprint(recursive_get(d, 'foo', 'bar'))  # Output: 'baz'\nprint(recursive_get(d, 'bogus key', default='nonexistent key'))  # Output: 'nonexistent key'\n```\n\n### Explanation\n\n1. **Function Definition**: `recursive_get` takes a dictionary `d`, a variable number of keys, and an optional `default` keyword argument.\n   \n2. **Traversal**: It initializes `cursor` to the input dictionary `d` and iterates over the provided keys.\n\n3. **Key Access**: For each key, it attempts to retrieve the corresponding value from `cursor`. If a `KeyError` (key does not exist) or `TypeError` (attempt to access a key on a non-dictionary type) occurs, it returns the specified `default` value.\n\n4. **Return Value**: If all keys are found, it returns the final value; otherwise, it returns the default value if an error occurs.\n\nThis function works in both Python 2.7 and Python 3.x, providing a flexible way to retrieve values from nested dictionaries without subclassing."
    }
]