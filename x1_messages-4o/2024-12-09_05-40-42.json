[
    {
        "role": "user",
        "content": "How can I use a conditional statement inside a one-line lambda function in Python? I am currently working with a scenario where I need to use an if-else statement inside a lambda function. The code I have right now seems like this:\n\n```python\nT = 250\n\nif (T > 200):\n    rate = 200*exp(-T)\nelse:\n    rate = 400*exp(-T)\n\nreturn (rate)\n```\n\nBut, I want to write it as a one-line lambda function, something similar to this:\n\n```python\nrate = lambda(T) : if (T>200): return(200*exp(-T)); else: return(400*exp(-T))\n```\n\nThe lambda functions are stored in an array and accessed when needed. Each array element corresponds to a particular \"rate\", so having two separate rows for the same \"rate\" would mess things up. Is it possible to do this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can use a conditional expression inside a one-line lambda function in Python. The syntax for a conditional expression is `a if condition else b`, where `a` is the result if the condition is true, and `b` is the result if the condition is false. \n\nHere's how you can rewrite your code using a lambda function with a conditional expression:\n\n```python\nfrom math import exp\n\nrate = lambda T: 200 * exp(-T) if T > 200 else 400 * exp(-T)\n```\n\nIn this lambda function, `T` is the argument, and the expression evaluates to `200 * exp(-T)` if `T > 200`, otherwise it evaluates to `400 * exp(-T)`. This single line efficiently replaces the multi-line if-else statement you had before."
    }
]