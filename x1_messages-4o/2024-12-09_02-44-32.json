[
    {
        "role": "user",
        "content": "Can I set conditional dependencies in setuptools for Python 2 and 3? I am trying to release a Python egg that supports both Python 2 and 3, and need to specify dependencies that change depending on the version in use. For instance, if I use `dnspython` for Python 2, there is a Python 3 version called `dnspython3`. How can I write the `setuptools.setup()` function so that my egg is usable for both versions? I have already run `2to3` to ensure that the rest of my library is compatible with both versions. I have looked through several documents, including \"Porting Python 2 Code to Python 3\", \"setuptools' Declaring Dependencies\", \"Travis CI Python documentation\", and \"pip Requirements Files\", but I haven't found an answer to this."
    },
    {
        "role": "assistant",
        "content": "To set conditional dependencies for different Python versions in `setuptools`, you can use environment markers. Environment markers allow you to specify conditions under which a dependency is installed. This is particularly useful when you want to support both Python 2 and Python 3 with different dependencies for each version.\n\nHere's an example of how you can specify conditional dependencies in your `setup.py` file:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='your-package-name',\n    version='0.1.0',\n    packages=find_packages(),\n    install_requires=[\n        'some-package>=1.0.0',  # common dependency\n        'dnspython; python_version<\"3.0\"',  # Python 2 specific dependency\n        'dnspython3; python_version>=\"3.0\"',  # Python 3 specific dependency\n    ],\n    # Other setup arguments\n)\n```\n\nIn this example:\n\n- `some-package` is a dependency for both Python 2 and 3.\n- `dnspython` is specified for Python versions less than 3.\n- `dnspython3` is specified for Python versions greater than or equal to 3.\n\nThese environment markers are evaluated at installation time, allowing `setuptools` to install the correct packages based on the Python version being used. This approach ensures that your package will work correctly in both Python 2 and Python 3 environments.\n\nMake sure your `setuptools` version is up-to-date as environment markers are a relatively recent feature. You can update `setuptools` using:\n\n```bash\npip install --upgrade setuptools\n```\n\nThis setup should allow you to release a Python egg that supports both Python 2 and Python 3 with the appropriate dependencies for each version."
    }
]