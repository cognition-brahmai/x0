[
    {
        "role": "user",
        "content": "How can I check if an object is a list or tuple but not a string in Python? Currently, I am using `assert isinstance(lst, (list, tuple))` to ensure that the input is a list or tuple and not a string. This is because I often encounter issues where a function mistakenly passes a string object and the target function executes `for x in lst` presuming that `lst` is a list or tuple. Is there a more efficient method to accomplish this?"
    },
    {
        "role": "assistant",
        "content": "To ensure that an object is either a list or a tuple but not a string, you can use the `isinstance` function combined with a check to exclude strings explicitly. While your current usage of `assert isinstance(lst, (list, tuple))` is a good start, it doesn't exclude strings because strings are iterable and this check would pass for them as well.\n\nHere's a more precise way to do this:\n\n```python\ndef is_list_or_tuple(obj):\n    return isinstance(obj, (list, tuple)) and not isinstance(obj, str)\n\n# Example usage:\nobj = [1, 2, 3]\nif is_list_or_tuple(obj):\n    print(\"The object is a list or tuple.\")\nelse:\n    print(\"The object is not a list or tuple.\")\n```\n\nThis function will return `True` only if the object is a list or tuple and not a string. It first checks if the object is an instance of either `list` or `tuple`, and then ensures that it's not an instance of `str`, effectively excluding string objects. This approach is both efficient and clear, ensuring your function behaves as expected without mistakenly processing strings."
    }
]