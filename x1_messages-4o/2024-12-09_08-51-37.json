[
    {
        "role": "user",
        "content": "I want to write a Ruby script that takes a string argument and replaces each letter with the next letter in the alphabet. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To write a Ruby script that takes a string argument and replaces each letter with the next letter in the alphabet, you can follow these steps. The script will iterate over each character in the string, check if it is a letter, and then replace it with the next letter in the alphabet. If the character is 'z' or 'Z', it should wrap around to 'a' or 'A', respectively. Here's a simple implementation:\n\n```ruby\ndef next_letter(string)\n  result = string.chars.map do |char|\n    if char =~ /[a-yA-Y]/  # Matches letters from 'a' to 'y' and 'A' to 'Y'\n      char.next\n    elsif char == 'z'      # Wrap 'z' to 'a'\n      'a'\n    elsif char == 'Z'      # Wrap 'Z' to 'A'\n      'A'\n    else\n      char  # Non-letter characters remain unchanged\n    end\n  end\n  result.join\nend\n\n# Example usage\ninput_string = \"Hello, World! zZ\"\noutput_string = next_letter(input_string)\nputs output_string\n```\n\n### Explanation:\n- The `chars` method is used to split the string into an array of characters.\n- The `map` method iterates over each character. \n- Regular expressions like `/[a-yA-Y]/` are used to identify characters that are within the range of 'a' to 'y' and 'A' to 'Y'. For these characters, the `next` method is applied to get the next character.\n- Special conditions handle the wrap-around for 'z' to 'a' and 'Z' to 'A'.\n- Non-letter characters are left unchanged.\n- Finally, `join` is used to combine the array of characters back into a single string.\n\nYou can test this script with different input strings to see how it works."
    }
]