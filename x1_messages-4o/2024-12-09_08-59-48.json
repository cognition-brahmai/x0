[
    {
        "role": "user",
        "content": "Can you provide a C++ program that can merge two sorted arrays?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Here's a C++ program that merges two sorted arrays into a single sorted array:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nstd::vector<int> mergeSortedArrays(const std::vector<int>& arr1, const std::vector<int>& arr2) {\n    std::vector<int> mergedArray;\n    int i = 0, j = 0;\n\n    // Traverse both arrays and insert smaller element from arr1 or arr2 into mergedArray\n    while (i < arr1.size() && j < arr2.size()) {\n        if (arr1[i] <= arr2[j]) {\n            mergedArray.push_back(arr1[i]);\n            i++;\n        } else {\n            mergedArray.push_back(arr2[j]);\n            j++;\n        }\n    }\n\n    // Store remaining elements of arr1\n    while (i < arr1.size()) {\n        mergedArray.push_back(arr1[i]);\n        i++;\n    }\n\n    // Store remaining elements of arr2\n    while (j < arr2.size()) {\n        mergedArray.push_back(arr2[j]);\n        j++;\n    }\n\n    return mergedArray;\n}\n\nint main() {\n    std::vector<int> arr1 = {1, 3, 5, 7};\n    std::vector<int> arr2 = {2, 4, 6, 8};\n\n    std::vector<int> mergedArray = mergeSortedArrays(arr1, arr2);\n\n    std::cout << \"Merged Array: \";\n    for (int num : mergedArray) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n- The `mergeSortedArrays` function takes two sorted arrays as input and returns a merged sorted array.\n- It uses two pointers `i` and `j` to traverse the two input arrays.\n- It compares elements from both arrays and inserts the smaller element into the `mergedArray`.\n- After one of the arrays is exhausted, it adds the remaining elements from the other array to the `mergedArray`.\n- Finally, the program prints the merged array."
    }
]