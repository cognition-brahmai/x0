[
    {
        "role": "user",
        "content": "How can I change the keys of a complex, multi-level dictionary in Python? For instance, if I have the following dictionary:\n\n```python\n{'fruit':'orange','colors':{'dark':4,'light':5}}\n```\n\nI want to scan every key in this dictionary and append \"abc\" to the end of each key which would result in:\n\n```python\n{'fruitabc':'orange','colorsabc':{'darkabc':4,'lightabc':5}}\n```\n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To modify the keys of a complex, multi-level dictionary by appending a string (such as \"abc\") to each key, you can use a recursive function. This function will iterate through each key-value pair in the dictionary, and if the value is another dictionary, it will recursively apply the same transformation. Here's how you can do it:\n\n```python\ndef append_to_keys(d, append_str):\n    # Create a new dictionary to store the modified key-value pairs\n    new_dict = {}\n    for key, value in d.items():\n        # Append the string to the key\n        new_key = key + append_str\n        # If the value is a dictionary, recursively apply the function\n        if isinstance(value, dict):\n            new_dict[new_key] = append_to_keys(value, append_str)\n        else:\n            new_dict[new_key] = value\n    return new_dict\n\n# Example usage\noriginal_dict = {'fruit':'orange', 'colors':{'dark':4, 'light':5}}\nmodified_dict = append_to_keys(original_dict, 'abc')\nprint(modified_dict)\n```\n\nThis code defines a function `append_to_keys` that takes a dictionary and a string to append. It returns a new dictionary with all keys modified and handles nested dictionaries by calling itself recursively. When you run the example, `modified_dict` will contain the updated keys as desired:\n\n```python\n{'fruitabc': 'orange', 'colorsabc': {'darkabc': 4, 'lightabc': 5}}\n```\n\nThis approach ensures that all keys, regardless of their level in the nested dictionary, get the specified string appended."
    }
]