[
    {
        "role": "user",
        "content": "Is it possible to sort a set of related items in a Django template? I have a collection of events and for each event, I have a list of attendees. I would like to sort the attendees based on their last names. Here is my current code:\n\n```python\n{% for event in eventsCollection %}\n   {{ event.location }}\n   {% for attendee in event.attendee_set.all %}\n     {{ attendee.first_name }} {{ attendee.last_name }}\n   {% endfor %}\n {% endfor %}\n```\n\nI tried the following syntax to sort the attendees by their last name, but it doesn't work and returns an empty list:\n\n```python\n{% for event in events %}\n   {{ event.location }}\n   {% for attendee in event.attendee_set.order_by__last_name %}\n     {{ attendee.first_name }} {{ attendee.last_name }}\n   {% endfor %}\n {% endfor %}\n```\n\nI could create a sorted array of attendee lists in my view, but I find this solution to be ugly and fragile. Is there any other way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! In Django templates, you can't directly use Django QuerySet methods like `order_by` within the template logic itself. However, you can handle the sorting within your view and pass the sorted data to the template. This approach keeps your code clean and efficient.\n\nHere's how you can achieve this:\n\n1. **Sort the attendees in the view:** You can modify your view to sort the attendees for each event before passing the data to the template.\n\n```python\n# views.py\n\nfrom django.shortcuts import render\nfrom .models import Event\n\ndef events_view(request):\n    events = Event.objects.all()\n    for event in events:\n        event.attendee_set = event.attendee_set.all().order_by('last_name')\n    return render(request, 'your_template.html', {'eventsCollection': events})\n```\n\n2. **Use the sorted attendees in the template:** You can continue using your Django template as you've written, knowing that the attendees are already sorted.\n\n```html\n{% for event in eventsCollection %}\n   {{ event.location }}\n   {% for attendee in event.attendee_set %}\n     {{ attendee.first_name }} {{ attendee.last_name }}\n   {% endfor %}\n{% endfor %}\n```\n\nBy sorting the attendees in the view, you ensure that the logic remains out of the template, which is a good practice in Django. This keeps your template simple and your view logic clean and more maintainable."
    }
]