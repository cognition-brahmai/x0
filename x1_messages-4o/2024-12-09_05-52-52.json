[
    {
        "role": "user",
        "content": "In Django, I'm looking for an efficient way to check if all database migrations have been completed. I've come across `manage.py migrate --list`, however, the output is not very readable for a machine. I need this because I have a script that can only run after the database has been migrated. Due to certain constraints, it is challenging to signal this from the process running the migrations. Therefore, I want my script to regularly check the database to confirm if all migrations have been executed. Is there a way to do this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can programmatically check if all Django database migrations have been applied by accessing the Django database where migration records are stored. Django keeps track of applied migrations in a database table called `django_migrations`. Here's a way to do it:\n\n1. **Check Migration Status Programmatically:**\n\n   You can write a Python script that uses Django's ORM to query the `django_migrations` table and compare it against the list of migrations available in your Django project.\n\n2. **Example Script:**\n\n   Here's a sample script that checks if all migrations have been applied:\n\n   ```python\n   import os\n   import django\n   from django.db import connections\n   from django.db.migrations.loader import MigrationLoader\n   from django.db.migrations.recorder import MigrationRecorder\n\n   # Setup Django environment\n   os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'your_project_name.settings')\n   django.setup()\n\n   # Get the database connection\n   connection = connections['default']\n\n   # Load migration state\n   loader = MigrationLoader(connection)\n   graph = loader.graph\n\n   # Get all applied migrations from the database\n   recorder = MigrationRecorder(connection)\n   applied_migrations = recorder.applied_migrations()\n\n   # Get all migrations from the project\n   all_migrations = {key: node for key, node in graph.nodes.items()}\n\n   # Determine if all migrations are applied\n   all_applied = all(\n       (app_label, name) in applied_migrations\n       for app_label, name in all_migrations.keys()\n   )\n\n   if all_applied:\n       print(\"All migrations are applied.\")\n   else:\n       print(\"There are pending migrations.\")\n\n   ```\n\n   Replace `'your_project_name.settings'` with your actual project's settings module.\n\n3. **Explanation:**\n\n   - **MigrationLoader:** This loads all the migration files and constructs a graph of migrations.\n   - **MigrationRecorder:** This records the applied migrations in the `django_migrations` table.\n   - **Comparison:** The script compares the set of applied migrations against the set of all migrations defined in migration files.\n\n4. **Usage:**\n\n   - Run this script after setting up your environment.\n   - If `all_applied` is `True`, all migrations have been successfully applied.\n\n5. **Automation:**\n\n   - You can set this script to run at regular intervals or integrate it into your deployment pipeline to ensure migrations are complete before proceeding with dependent tasks.\n\nThis approach provides a machine-readable way to verify the migration status directly from the database, ensuring your script only runs when the database is fully migrated."
    }
]