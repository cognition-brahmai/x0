[
    {
        "role": "user",
        "content": "Can you provide an example of unit testing, integration testing, and acceptance testing in [Java code]?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below are examples of unit testing, integration testing, and acceptance testing in Java. These examples use JUnit for unit and integration tests, and a simple acceptance test scenario.\n\n### Unit Testing\n\nUnit tests focus on testing individual components or methods in isolation. Here\u2019s an example of a unit test for a simple calculator class:\n\n```java\n// Calculator.java\npublic class Calculator {\n    public int add(int a, int b) {\n        return a + b;\n    }\n\n    public int subtract(int a, int b) {\n        return a - b;\n    }\n}\n\n// CalculatorTest.java\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class CalculatorTest {\n\n    @Test\n    public void testAdd() {\n        Calculator calculator = new Calculator();\n        assertEquals(5, calculator.add(2, 3));\n    }\n\n    @Test\n    public void testSubtract() {\n        Calculator calculator = new Calculator();\n        assertEquals(1, calculator.subtract(3, 2));\n    }\n}\n```\n\n### Integration Testing\n\nIntegration tests check how different modules or services work together. Here\u2019s a simple example involving two classes:\n\n```java\n// UserService.java\npublic class UserService {\n    private UserRepository userRepository;\n\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n    }\n\n    public String getUserFullName(int userId) {\n        User user = userRepository.findById(userId);\n        return user.getFirstName() + \" \" + user.getLastName();\n    }\n}\n\n// UserRepository.java\npublic class UserRepository {\n    public User findById(int userId) {\n        // Mocking a database call\n        return new User(\"John\", \"Doe\");\n    }\n}\n\n// User.java\npublic class User {\n    private String firstName;\n    private String lastName;\n\n    public User(String firstName, String lastName) {\n        this.firstName = firstName;\n        this.lastName = lastName;\n    }\n\n    public String getFirstName() {\n        return firstName;\n    }\n\n    public String getLastName() {\n        return lastName;\n    }\n}\n\n// UserServiceTest.java\nimport static org.junit.jupiter.api.Assertions.*;\nimport org.junit.jupiter.api.Test;\n\npublic class UserServiceTest {\n\n    @Test\n    public void testGetUserFullName() {\n        UserRepository userRepository = new UserRepository();\n        UserService userService = new UserService(userRepository);\n        assertEquals(\"John Doe\", userService.getUserFullName(1));\n    }\n}\n```\n\n### Acceptance Testing\n\nAcceptance tests validate the end-to-end functionality of an application and ensure it meets business requirements. These are often scenario-based. Here\u2019s a simple example using a plain Java class to illustrate the concept:\n\n```java\n// AcceptanceTest.java\npublic class AcceptanceTest {\n\n    public static void main(String[] args) {\n        // Given\n        Calculator calculator = new Calculator();\n\n        // When\n        int sum = calculator.add(2, 3);\n        int difference = calculator.subtract(5, 3);\n\n        // Then\n        if (sum == 5 && difference == 2) {\n            System.out.println(\"Acceptance Test Passed!\");\n        } else {\n            System.out.println(\"Acceptance Test Failed!\");\n        }\n    }\n}\n```\n\n### Notes:\n\n- **Unit Testing**: Focus on individual methods or classes. Uses mocking to isolate the unit of work.\n- **Integration Testing**: Tests the interaction between different modules or external services.\n- **Acceptance Testing**: Validates the system as a whole, ensuring it meets business requirements. Often involves end-user scenarios.\n\nIn practice, acceptance testing is often automated using tools like Selenium for web applications, or Cucumber for behavior-driven development (BDD)."
    }
]