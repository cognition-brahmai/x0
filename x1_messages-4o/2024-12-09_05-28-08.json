[
    {
        "role": "user",
        "content": "How can I transfer the contents of one stream to another in Python? The basic solution I've tried is `output.write(input.read())`, but this fails if the input file is larger than the available memory or is infinitely large. It also doesn't work well when only a partial copy is required. Is there an equivalent function in Python like `org.apache.commons.IOUtils.copy` from Java?"
    },
    {
        "role": "assistant",
        "content": "To efficiently transfer the contents of one stream to another in Python, especially when dealing with large files or when only a partial copy is required, you can use a loop to read and write in chunks. This approach prevents excessive memory usage by processing the data in smaller, manageable pieces. Here's an example of how you can do this:\n\n```python\ndef copy_stream(input_stream, output_stream, buffer_size=1024*1024):\n    \"\"\"Copy contents from input_stream to output_stream with a specified buffer size.\"\"\"\n    while True:\n        # Read a chunk of data from the input stream\n        data = input_stream.read(buffer_size)\n        if not data:\n            # If no more data, break out of the loop\n            break\n        # Write the chunk of data to the output stream\n        output_stream.write(data)\n\n# Usage example\nwith open('input_file.txt', 'rb') as input_file, open('output_file.txt', 'wb') as output_file:\n    copy_stream(input_file, output_file)\n```\n\n### Explanation:\n- **`buffer_size`**: This parameter controls the size of each chunk of data read from the input stream. You can adjust this size based on the available memory and performance considerations. A common choice is 1MB (1024*1024 bytes).\n\n- **Loop**: The `while True` loop continues until `input_stream.read(buffer_size)` returns an empty string, indicating the end of the file.\n\n- **Reading and Writing**: By reading and writing in chunks, you minimize memory usage and handle large files efficiently.\n\nThis approach is similar to Java's `IOUtils.copy` method and is suitable for handling large or infinite streams in Python."
    }
]