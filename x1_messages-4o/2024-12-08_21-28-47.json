[
    {
        "role": "user",
        "content": "Write a Python script to parse a large tabular datafile containing information about sales transactions, where each row represents a unique customer and includes their name, email address, purchase date, purchase amount, and product category. The script should be able to handle missing values and outliers, and output the results in a formatted table that includes the total revenue generated by each product category, as well as the top 10 customers by purchase amount. Additionally, the script should be able to accept user input to filter the data based on specific date ranges or product categories. Finally, the script should be able to generate a visual representation of the data using Matplotlib or a similar library, including bar charts and scatterplots to help identify any trends or patterns in the data."
    },
    {
        "role": "assistant",
        "content": "To create a Python script that processes a large tabular data file containing sales transactions, we can use libraries like `pandas` for data manipulation and `matplotlib` for visualization. Below is a script that accomplishes the tasks you described:\n\n```python\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef load_data(file_path):\n    \"\"\"Load data from a CSV file.\"\"\"\n    return pd.read_csv(file_path)\n\ndef handle_missing_values(df):\n    \"\"\"Handle missing values by filling them with appropriate values.\"\"\"\n    df['name'].fillna('Unknown', inplace=True)\n    df['email'].fillna('Unknown', inplace=True)\n    df['purchase_date'].fillna(method='ffill', inplace=True)\n    df['purchase_amount'].fillna(df['purchase_amount'].mean(), inplace=True)\n    df['product_category'].fillna('Miscellaneous', inplace=True)\n    return df\n\ndef handle_outliers(df):\n    \"\"\"Handle outliers in purchase_amount.\"\"\"\n    Q1 = df['purchase_amount'].quantile(0.25)\n    Q3 = df['purchase_amount'].quantile(0.75)\n    IQR = Q3 - Q1\n    lower_bound = Q1 - 1.5 * IQR\n    upper_bound = Q3 + 1.5 * IQR\n    df['purchase_amount'] = np.where(df['purchase_amount'] < lower_bound, lower_bound, df['purchase_amount'])\n    df['purchase_amount'] = np.where(df['purchase_amount'] > upper_bound, upper_bound, df['purchase_amount'])\n    return df\n\ndef calculate_revenue_by_category(df):\n    \"\"\"Calculate total revenue generated by each product category.\"\"\"\n    return df.groupby('product_category')['purchase_amount'].sum().reset_index()\n\ndef get_top_customers(df, top_n=10):\n    \"\"\"Get the top N customers by purchase amount.\"\"\"\n    return df.groupby('name')['purchase_amount'].sum().nlargest(top_n).reset_index()\n\ndef filter_data(df, start_date=None, end_date=None, category=None):\n    \"\"\"Filter data based on date range and product category.\"\"\"\n    if start_date:\n        df = df[df['purchase_date'] >= start_date]\n    if end_date:\n        df = df[df['purchase_date'] <= end_date]\n    if category:\n        df = df[df['product_category'] == category]\n    return df\n\ndef visualize_data(df):\n    \"\"\"Generate visual representations of the data.\"\"\"\n    plt.figure(figsize=(12, 6))\n\n    # Bar chart for revenue by category\n    revenue_by_category = calculate_revenue_by_category(df)\n    plt.subplot(1, 2, 1)\n    plt.bar(revenue_by_category['product_category'], revenue_by_category['purchase_amount'])\n    plt.title('Revenue by Product Category')\n    plt.xlabel('Product Category')\n    plt.ylabel('Revenue')\n    plt.xticks(rotation=45)\n\n    # Scatter plot for purchase trends\n    plt.subplot(1, 2, 2)\n    plt.scatter(df['purchase_date'], df['purchase_amount'])\n    plt.title('Purchase Trends Over Time')\n    plt.xlabel('Purchase Date')\n    plt.ylabel('Purchase Amount')\n    plt.xticks(rotation=45)\n\n    plt.tight_layout()\n    plt.show()\n\ndef main():\n    # Load and preprocess data\n    file_path = 'sales_data.csv'  # Update with your data file path\n    df = load_data(file_path)\n    df = handle_missing_values(df)\n    df = handle_outliers(df)\n\n    # Get user input for filtering\n    start_date = input(\"Enter start date (YYYY-MM-DD) or leave blank: \") or None\n    end_date = input(\"Enter end date (YYYY-MM-DD) or leave blank: \") or None\n    category = input(\"Enter product category to filter or leave blank: \") or None\n\n    # Filter data\n    filtered_df = filter_data(df, start_date, end_date, category)\n\n    # Output results\n    revenue_by_category = calculate_revenue_by_category(filtered_df)\n    top_customers = get_top_customers(filtered_df)\n\n    print(\"Total Revenue by Product Category:\")\n    print(revenue_by_category.to_string(index=False))\n    print(\"\\nTop 10 Customers by Purchase Amount:\")\n    print(top_customers.to_string(index=False))\n\n    # Visualize data\n    visualize_data(filtered_df)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Key Features of the Script:\n- **Data Loading:** Loads data from a CSV file.\n- **Missing Values Handling:** Fills missing values with appropriate defaults or using statistical methods.\n- **Outlier Handling:** Replaces outliers in the `purchase_amount` column with the calculated bounds.\n- **Revenue Calculation:** Calculates total revenue for each product category.\n- **Top Customers Identification:** Identifies the top 10 customers based on purchase amount.\n- **Data Filtering:** Allows filtering of data by date range and product category based on user input.\n- **Data Visualization:** Generates bar charts and scatter plots to visualize trends and patterns in the data.\n\n### Requirements:\n- Ensure you have `pandas` and `matplotlib` installed in your environment. You can install them using pip:\n  ```bash\n  pip install pandas matplotlib\n  ```\n\n### Note:\n- The provided file path `'sales_data.csv'` should be updated to the actual path of your data file.\n- The script assumes the data file has columns: `name`, `email`, `purchase_date`, `purchase_amount`, and `product_category`. Adjust column names as necessary to match your data file.\n"
    }
]