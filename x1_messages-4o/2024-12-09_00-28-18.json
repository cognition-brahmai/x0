[
    {
        "role": "user",
        "content": "Is it possible for a line of Python code to identify its indentation nesting level? I'm trying to implement this structure:\n\n```python\nprint(get_indentation_level())\n\n    print(get_indentation_level())\n\n        print(get_indentation_level())\n```\n\nThe output I expect is:\n\n```python\n1\n2\n3\n```\n\nThe aim is for the output from more nested parts of the code to also be more nested, similar to how the code readability is improved with indentation. While I understand that I could manually implement this using `.format()`, I am looking for a way to implement a custom print function such as `print(i*' ' + string)` where `i` is the indentation level. This would allow me to quickly generate readable output on my terminal. Is there a better way to achieve this without resorting to manual formatting?"
    },
    {
        "role": "assistant",
        "content": "In Python, there's no built-in way for a line of code to directly determine its indentation level at runtime, since indentation is a syntactic feature rather than a runtime feature. However, you can achieve this effect by using the traceback module to inspect the call stack and deduce the indentation level based on the position of your function call within the source code. Here's how you can create a function to determine the current indentation level:\n\n```python\nimport inspect\n\ndef get_indentation_level():\n    # Get the current frame\n    frame = inspect.currentframe()\n    # Get the outer frame's code context\n    outer_frame = inspect.getouterframes(frame)[1]\n    # Get the code context of the outer frame\n    code_context = outer_frame.code_context[0]\n    # Calculate the indentation level by counting leading spaces\n    indentation_level = len(code_context) - len(code_context.lstrip(' '))\n    # Return the indentation level divided by the typical number of spaces per indentation level (usually 4)\n    return indentation_level // 4\n\ndef custom_print(string):\n    indentation_level = get_indentation_level()\n    print(' ' * indentation_level + string)\n\n# Example usage\ncustom_print(\"Hello\")  # Output: Hello\n\n    custom_print(\"Hello\")  # Output:     Hello\n\n        custom_print(\"Hello\")  # Output:         Hello\n```\n\nThis code defines a `get_indentation_level` function that uses the `inspect` module to analyze the current line of code and determine its indentation level. The `custom_print` function uses this indentation level to prepend the appropriate number of spaces to the string before printing it.\n\nNote: This implementation assumes that you use spaces for indentation and that the typical number of spaces per indentation level is 4. Adjust the division in `get_indentation_level` as necessary to match your actual indentation style."
    }
]