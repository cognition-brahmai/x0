[
    {
        "role": "user",
        "content": "In Python, how can I specify the type hint of a variable as a function type? I couldn't find a typing.Function and I didn't find anything relevant in PEP 483."
    },
    {
        "role": "assistant",
        "content": "In Python, you can specify the type hint of a variable as a function type using the `Callable` type from the `typing` module. The `Callable` type allows you to specify the argument types and the return type of the function.\n\nHere's how you can use `Callable` to specify a function type:\n\n```python\nfrom typing import Callable\n\n# Define a function type hint with no arguments and returning an int\nmy_function: Callable[[], int]\n\n# Define a function type hint with two arguments (int and str) and returning a bool\nanother_function: Callable[[int, str], bool]\n```\n\nIn the example above:\n\n- `Callable[[], int]` indicates a function that takes no arguments and returns an `int`.\n- `Callable[[int, str], bool]` indicates a function that takes an `int` and a `str` as arguments and returns a `bool`.\n\nYou can define your own function and use these type hints like this:\n\n```python\ndef example_function() -> int:\n    return 42\n\nmy_function = example_function\n\ndef another_example_function(x: int, y: str) -> bool:\n    return x > 0 and bool(y)\n\nanother_function = another_example_function\n```\n\nThis way, you can have type-checked function assignments and calls, which can help catch potential errors during development."
    }
]