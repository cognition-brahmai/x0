[
    {
        "role": "user",
        "content": "How can I modify my Swift code to delete inactive users who haven't logged in for the past 3 months from my SQL database and archive their data before deletion? The archive should include their username, email address, and the last time they logged in. \nHere's my current code:\nlet threeMonthsAgo = Calendar.current.date(byAdding: .month, value: -3, to: Date())!\nlet query = \"DELETE FROM users WHERE last_login < ?\"\nlet values = [threeMonthsAgo]\ndo {\n    try db.execute(query, values: values)\n} catch {\n    print(\"Error deleting inactive users: \\(error)\")\n}\nHow can I modify this to also archive the user data and ensure it is easily retrievable if needed? Please include specific Swift code and SQL queries."
    },
    {
        "role": "assistant",
        "content": "To modify your Swift code to not only delete inactive users but also archive their data, you need to follow these steps:\n\n1. Create an archive table in your SQL database to store the archived user data.\n2. Modify your Swift code to first insert the user data into the archive table before deleting them from the original table.\n\nHere's how you can achieve this:\n\n### Step 1: Create an Archive Table\n\nFirst, ensure that you have an archive table in your database. You can create it using the following SQL command:\n\n```sql\nCREATE TABLE IF NOT EXISTS archive_users (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    username TEXT,\n    email TEXT,\n    last_login DATE\n);\n```\n\n### Step 2: Modify Your Swift Code\n\nUpdate your Swift code to first insert the user data into the archive table and then delete them from the `users` table. Here's the modified code:\n\n```swift\nimport Foundation\nimport SQLite3 // Assuming you're using SQLite\n\n// Get the date for three months ago\nlet threeMonthsAgo = Calendar.current.date(byAdding: .month, value: -3, to: Date())!\n\n// Query to select inactive users\nlet selectQuery = \"SELECT username, email, last_login FROM users WHERE last_login < ?\"\n\n// Query to insert user data into the archive table\nlet insertQuery = \"INSERT INTO archive_users (username, email, last_login) VALUES (?, ?, ?)\"\n\n// Query to delete inactive users\nlet deleteQuery = \"DELETE FROM users WHERE last_login < ?\"\n\ndo {\n    // Prepare and execute the select query\n    let resultSet = try db.executeQuery(selectQuery, values: [threeMonthsAgo])\n    \n    // Iterate over each user to archive their data\n    while resultSet.next() {\n        if let username = resultSet.string(forColumn: \"username\"),\n           let email = resultSet.string(forColumn: \"email\"),\n           let lastLogin = resultSet.date(forColumn: \"last_login\") {\n            \n            // Insert user data into archive table\n            try db.executeUpdate(insertQuery, values: [username, email, lastLogin])\n        }\n    }\n    \n    // After archiving, delete the inactive users\n    try db.executeUpdate(deleteQuery, values: [threeMonthsAgo])\n    \n} catch {\n    print(\"Error processing users: \\(error)\")\n}\n```\n\n### Explanation:\n\n1. **Select Inactive Users**: First, you select users who haven't logged in for the past three months.\n2. **Archive User Data**: For each user fetched, you insert their details into the `archive_users` table.\n3. **Delete Inactive Users**: After successfully archiving the data, you proceed to delete these users from the `users` table.\n\nThis approach ensures that you have a backup of user data before deletion, allowing you to retrieve it if needed in the future. Make sure to handle potential errors and edge cases, such as database connection issues or constraints violations, according to your specific requirements."
    }
]