[
    {
        "role": "user",
        "content": "I am working with two classes, 'Foo' and 'Bar', in the same module. In 'Bar', I have a string representation of 'Foo'. Is there a way to access the class object 'Foo' using this string? I am familiar with accessing a class in a different module using the 'getattr' function, like so:\n\n```python\nfrom project import foo_module\nfoo_class = getattr(foo_module, \"Foo\")\n```\n\nBut, I am unsure of how to do this in the same module. I have received suggestions to use a mapping dictionary to map string class names to the classes, but I am seeking an easier method if available."
    },
    {
        "role": "assistant",
        "content": "When working within the same module and you have a string representation of a class name, you can use the `globals()` function to dynamically access the class object. The `globals()` function returns a dictionary representing the current global symbol table, which contains all the variables and functions available at the global scope of the module, including class definitions.\n\nHere's how you can do it:\n\n```python\nclass Foo:\n    def __init__(self):\n        print(\"Foo instance created\")\n\nclass Bar:\n    def __init__(self, foo_class_name):\n        # Access the class object using the string name\n        foo_class = globals().get(foo_class_name)\n        if foo_class:\n            # Create an instance of Foo\n            foo_instance = foo_class()\n        else:\n            print(f\"Class {foo_class_name} not found\")\n\n# Example usage\nbar_instance = Bar(\"Foo\")\n```\n\nIn this example, `Bar` takes a string `foo_class_name` as an argument, which represents the name of the class you want to access. Using `globals().get(foo_class_name)`, you retrieve the class object from the global scope and can then use it as needed, like creating an instance of it.\n\nThis approach is straightforward and avoids the need for a mapping dictionary. Just ensure that the string name matches the class name exactly as defined in your module."
    }
]