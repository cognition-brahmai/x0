[
    {
        "role": "user",
        "content": "I am trying to extract elevation data from a Google Maps API along a path specified by latitude and longitude coordinates. I am using the following code:\n\n```python\nfrom urllib2 import Request, urlopen\nimport json\n\npath1 = '42.974049,-81.205203|42.974298,-81.195755'\nrequest=Request('http://maps.googleapis.com/maps/api/elevation/json?locations='+path1+'&amp;sensor=false')\nresponse = urlopen(request)\nelevations = response.read()\n```\n\nThe sample data I get after this operation looks like this:\n\n```python\nelevations.splitlines()\n\n['{',\n '   \"results\" : [',\n '      {',\n '         \"elevation\" : 243.3462677001953,',\n '         \"location\" : {',\n '            \"lat\" : 42.974049,',\n '            \"lng\" : -81.205203',\n '         },',\n '         \"resolution\" : 19.08790397644043',\n '      },',\n '      {',\n '         \"elevation\" : 244.1318664550781,',\n '         \"location\" : {',\n '            \"lat\" : 42.974298,',\n '            \"lng\" : -81.19575500000001',\n '         },',\n '         \"resolution\" : 19.08790397644043',\n '      }',\n '   ],',\n '   \"status\" : \"OK\"',\n '}']\n```\n\nHowever, when I try to put this data into a pandas DataFrame using `pd.read_json(elevations)`, I get an unexpected result. What I want is a pandas DataFrame that combines the elevation, latitude, and longitude data together. Is there a way to achieve this?\n\nI have tried the following method, but it seems too cumbersome:\n\n```python\ndata = json.loads(elevations)\nlat,lng,el = [],[],[]\nfor result in data['results']:\n    lat.append(result[u'location'][u'lat'])\n    lng.append(result[u'location'][u'lng'])\n    el.append(result[u'elevation'])\ndf = pd.DataFrame([lat,lng,el]).T\n```\n\nThis ends up providing a DataFrame with columns latitude, longitude, and elevation."
    },
    {
        "role": "assistant",
        "content": "To create a pandas DataFrame directly from the JSON response in a more straightforward way, you can use the `json_normalize` function from the `pandas` library. This function is particularly useful for flattening semi-structured JSON data into a flat table. Here's how you can achieve this:\n\n```python\nimport pandas as pd\nimport json\nfrom urllib2 import Request, urlopen\n\npath1 = '42.974049,-81.205203|42.974298,-81.195755'\nrequest = Request('http://maps.googleapis.com/maps/api/elevation/json?locations='+path1+'&sensor=false')\nresponse = urlopen(request)\nelevations = response.read()\n\n# Load the JSON data\ndata = json.loads(elevations)\n\n# Use json_normalize to flatten the JSON data\ndf = pd.json_normalize(data['results'])\n\n# Rename the columns for better readability\ndf.rename(columns={'location.lat': 'latitude', 'location.lng': 'longitude'}, inplace=True)\n\nprint(df)\n```\n\nThis code will give you a DataFrame with columns `elevation`, `latitude`, and `longitude`, making it easier to work with the data directly. The `json_normalize` function helps by directly converting nested JSON structures into a flat table, which simplifies the process significantly."
    }
]