[
    {
        "role": "user",
        "content": "How can I perform max/mean pooling on a 2D array using numpy? Given a 2D matrix of size M x N and a 2D Kernel of size K x L, how can I return a matrix resulting from max or mean pooling using the given kernel over the image? Note that M, N, K, L can be both even or odd and they need not be perfectly divisible by each other, for example, a 7x5 matrix and a 2x2 kernel. Here's an example of max pooling:\n\n```python\nmatrix:\narray([[  20,  200,   -5,   23],\n       [ -13,  134,  119,  100],\n       [ 120,   32,   49,   25],\n       [-120,   12,   09,   23]])\nkernel: 2 x 2\nsoln:\narray([[  200,  119],\n       [  120,   49]])\n```"
    },
    {
        "role": "assistant",
        "content": "To perform max or mean pooling on a 2D array using NumPy, you will need to iterate over the matrix with the given kernel size and apply the pooling operation to each sub-region of the matrix defined by the kernel. Here is how you can do this in Python using NumPy:\n\n```python\nimport numpy as np\n\ndef max_pooling(matrix, kernel_size):\n    M, N = matrix.shape\n    K, L = kernel_size\n    pooled_matrix = np.zeros(((M - K) // K + 1, (N - L) // L + 1))\n    \n    for i in range(0, M - K + 1, K):\n        for j in range(0, N - L + 1, L):\n            pooled_matrix[i // K, j // L] = np.max(matrix[i:i + K, j:j + L])\n    \n    return pooled_matrix\n\ndef mean_pooling(matrix, kernel_size):\n    M, N = matrix.shape\n    K, L = kernel_size\n    pooled_matrix = np.zeros(((M - K) // K + 1, (N - L) // L + 1))\n    \n    for i in range(0, M - K + 1, K):\n        for j in range(0, N - L + 1, L):\n            pooled_matrix[i // K, j // L] = np.mean(matrix[i:i + K, j:j + L])\n    \n    return pooled_matrix\n\n# Example usage:\nmatrix = np.array([[  20,  200,   -5,   23],\n                   [ -13,  134,  119,  100],\n                   [ 120,   32,   49,   25],\n                   [-120,   12,   9,    23]])\n\nkernel_size = (2, 2)\n\nmax_pooled = max_pooling(matrix, kernel_size)\nmean_pooled = mean_pooling(matrix, kernel_size)\n\nprint(\"Max Pooled Matrix:\")\nprint(max_pooled)\n\nprint(\"Mean Pooled Matrix:\")\nprint(mean_pooled)\n```\n\n### Explanation:\n1. **Matrix Dimensions**: The matrix is iterated over such that the pooling operation is applied to every sub-matrix of size `K x L`.\n2. **Kernel Movement**: The kernel moves across the matrix with steps of size equal to the kernel dimensions, i.e., `K` and `L`. This ensures non-overlapping pooling regions.\n3. **Pooling**: For max pooling, the maximum value is taken from each sub-matrix, while for mean pooling, the average is calculated.\n4. **Output Matrix**: The dimensions of the output matrix are determined by how many times the kernel can fit into the input matrix without exceeding its boundaries.\n\nThis approach may result in some parts of the matrix being ignored if the matrix dimensions are not perfectly divisible by the kernel size. You can adjust the strides or handle the edge cases separately if you need partial pooling on the edges."
    }
]