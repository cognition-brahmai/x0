[
    {
        "role": "user",
        "content": "I came across a variable in Python that's written as `a = 1_000_000`. When I print this variable using `print(a)`, it returns `1000000`. I'm unsure about the presence of underscores in this number. Can someone explain why the number is written with underscores and why `print(a)` doesn't return `1_000_000`?"
    },
    {
        "role": "assistant",
        "content": "In Python, underscores (`_`) can be used as visual separators in numeric literals to improve readability, especially for large numbers. This feature was introduced in Python 3.6. The underscores have no effect on the actual value of the number; they are simply ignored by the Python interpreter. \n\nWhen you write a number like `1_000_000`, it is equivalent to writing `1000000`. The underscores are there purely for your convenience to make it easier to see the magnitude of the number at a glance, similar to how commas are used in numbers in written English (e.g., 1,000,000).\n\nWhen you use `print(a)`, Python outputs the number without any underscores because the underscores are not part of the actual value of the number. They are just a formatting aid in the source code, so the output is the plain integer value: `1000000`."
    }
]