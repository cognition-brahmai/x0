[
    {
        "role": "user",
        "content": "How can you enhance the Ruby code that utilizes hash data structure to perform a multi-step process of transforming only specific numeric values into their corresponding word forms while preserving the others in a given text? Develop a function that takes both the text and the desired numeric values to convert as input, performs the selective transformation, and returns the updated text in a more structured form."
    },
    {
        "role": "assistant",
        "content": "To achieve this task, we can create a Ruby function that takes a string of text and an array of specific numeric values to convert into their word forms. We'll utilize a hash to map numbers to their word equivalents. The function will search for these numbers in the text and replace them with their corresponding word forms.\n\nHere's a step-by-step implementation of such a function:\n\n```ruby\ndef number_to_words(text, numbers_to_convert)\n  # Define a hash that maps numbers to their word forms\n  number_words = {\n    0 => 'zero', 1 => 'one', 2 => 'two', 3 => 'three', 4 => 'four',\n    5 => 'five', 6 => 'six', 7 => 'seven', 8 => 'eight', 9 => 'nine',\n    10 => 'ten', 11 => 'eleven', 12 => 'twelve', 13 => 'thirteen',\n    14 => 'fourteen', 15 => 'fifteen', 16 => 'sixteen', 17 => 'seventeen',\n    18 => 'eighteen', 19 => 'nineteen', 20 => 'twenty', 30 => 'thirty',\n    40 => 'forty', 50 => 'fifty', 60 => 'sixty', 70 => 'seventy',\n    80 => 'eighty', 90 => 'ninety'\n  }\n\n  # Extend the hash for numbers 21 to 99\n  (21..99).each do |num|\n    if num % 10 != 0\n      number_words[num] = \"#{number_words[num - num % 10]}-#{number_words[num % 10]}\"\n    end\n  end\n\n  # Convert the text into an array of words\n  words = text.split(' ')\n\n  # Iterate over the words and replace specified numeric values with their word forms\n  transformed_words = words.map do |word|\n    # Remove any punctuation for comparison, then re-attach it later\n    stripped_word = word.gsub(/[^0-9]/, '')\n    number = stripped_word.to_i\n\n    # Check if the word is a number in the specified list and replace it\n    if numbers_to_convert.include?(number) && number_words.key?(number)\n      word.gsub(stripped_word, number_words[number])\n    else\n      word\n    end\n  end\n\n  # Join the transformed words back into a single string\n  transformed_text = transformed_words.join(' ')\n\n  transformed_text\nend\n\n# Example Usage\ntext = \"I have 5 apples and 11 oranges, but 20 bananas.\"\nnumbers_to_convert = [5, 11, 20]\ntransformed_text = number_to_words(text, numbers_to_convert)\nputs transformed_text\n```\n\n### Explanation:\n\n1. **Hash Mapping**: We first create a hash `number_words` that maps numeric values to their respective word forms. This includes numbers from 0 to 20 and multiples of ten up to 90.\n\n2. **Extend for 21-99**: We extend this mapping for numbers between 21 and 99 by constructing their word forms using the tens and units place.\n\n3. **Split and Transform**: We split the input text into words, iterate through each word, and check if it matches any of the specified numbers to convert using a regex to handle potential punctuation.\n\n4. **Conditional Replacement**: If a word represents a number that should be converted and is present in our hash, we replace it with its word form.\n\n5. **Reassemble**: The modified words are joined back into a single string to form the transformed text.\n\nThis function allows for a targeted transformation of specific numeric values within a given text while preserving the rest of the content."
    }
]