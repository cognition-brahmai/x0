[
    {
        "role": "user",
        "content": "In Python, I am trying to store and read information from files, specifically type information from text files. I am familiar with type casting from string to int or float, but I'm having trouble with type casting from a string to a type. I initially attempted to use the `type` function, like so: `var_type = type('int')`. This, however, is not serving the purpose as it is returning `str`. I also tried with `eval` function: `var_type = eval('int')`, but I am looking for a solution that avoids functions like `eval` or `exec`. Is there a more specific and pythonic way to cast a string to a type?"
    },
    {
        "role": "assistant",
        "content": "To convert a string representation of a type into an actual type in Python without using `eval` or `exec`, you can use a mapping of string names to the actual types. This approach is safer and more controlled. Here's a simple way to achieve this:\n\n```python\n# Create a mapping of string type names to actual types\ntype_map = {\n    'int': int,\n    'float': float,\n    'str': str,\n    'bool': bool,\n    # Add any other types you need\n}\n\n# Function to get the type from the string\ndef get_type(type_name):\n    return type_map.get(type_name)\n\n# Example usage\ntype_name = 'int'  # This could come from a file or some other source\nvar_type = get_type(type_name)\n\nif var_type:\n    # Now you can use var_type to cast values\n    value = '123'\n    converted_value = var_type(value)\n    print(converted_value)  # Outputs: 123\nelse:\n    print(\"Type not found.\")\n```\n\nThis method uses a dictionary to map string keys to the actual type objects. You can extend the `type_map` dictionary with additional types as needed. By using this approach, you ensure that only known and expected types are used, which adds a layer of safety to your code."
    }
]