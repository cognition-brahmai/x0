[
    {
        "role": "user",
        "content": "How can I determine if a list contains other lists in Python? I have a list and I want to check if it contains any other nested lists. For example, I want to distinguish between a list with this structure: [] and this structure: [[]]. To illustrate, compare [1,2,3,4] to [1,[2,3],4]. The challenge arises when I have a list of strings. I am trying to flatten the list if it contains nested lists by using the following code: \n\n```python\nuniqueCrossTabs = list(itertools.chain.from_iterable(uniqueCrossTabs))\n```\n\nHowever, if this is done on an already flattened list, it results in a list of each character of each string that was in the original list, which is not the desired outcome. So, I want to check if the list needs to be flattened before actually flattening it. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To determine if a list contains other lists, you can iterate through the elements of the list and check if any element is a list itself. This can be achieved using Python's built-in `isinstance` function. Once you've determined that the list contains nested lists, you can safely flatten it. Here's how you can do it:\n\n```python\nimport itertools\n\ndef contains_nested_list(lst):\n    # Check if any element in the list is a list itself\n    return any(isinstance(i, list) for i in lst)\n\ndef flatten_if_needed(lst):\n    if contains_nested_list(lst):\n        # Flatten the list only if it contains nested lists\n        return list(itertools.chain.from_iterable(lst))\n    else:\n        # Return the list as is if no nested lists are present\n        return lst\n\n# Example usage\nuniqueCrossTabs = [1, [2, 3], 4]\n\n# Check if the list contains nested lists and flatten if needed\nflattened_list = flatten_if_needed(uniqueCrossTabs)\n\nprint(flattened_list)  # Output: [1, 2, 3, 4]\n```\n\nThis code defines two functions: `contains_nested_list` to check for nested lists and `flatten_if_needed` to flatten the list only if necessary. The `contains_nested_list` function uses a generator expression with `any()` to determine if there are any list instances within the main list. If the list contains nested lists, the `flatten_if_needed` function will flatten it; otherwise, it will return the list unchanged."
    }
]