[
    {
        "role": "user",
        "content": "How can I use Go language to write an SQL query that retrieves all records from a table where the column 'age' is greater than 18, taking into account additional criteria such as the gender or nationality of the individuals, and sorting the results in descending order of their age? Also, I want to include a subquery that calculates the average age of the individuals meeting the aforementioned criteria and include this information in the query output. Can you provide a sample Go code for this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To accomplish this task using Go, you would typically use a database/sql package along with a driver that supports your database (e.g., pq for PostgreSQL, mysql for MySQL, etc.). Below is an example of how you can write Go code to execute an SQL query that meets your requirements:\n\n```go\npackage main\n\nimport (\n\t\"database/sql\"\n\t\"fmt\"\n\t\"log\"\n\n\t_ \"github.com/lib/pq\" // Import the PostgreSQL driver\n)\n\nfunc main() {\n\t// Database connection parameters\n\tconnStr := \"user=username dbname=mydb sslmode=disable\"\n\tdb, err := sql.Open(\"postgres\", connStr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer db.Close()\n\n\t// Define the SQL query with a subquery to calculate the average age\n\tquery := `\n\t\tSELECT id, name, age, gender, nationality, \n\t\t       (SELECT AVG(age) FROM individuals WHERE age > 18 AND gender = $1 AND nationality = $2) AS average_age\n\t\tFROM individuals\n\t\tWHERE age > 18 AND gender = $1 AND nationality = $2\n\t\tORDER BY age DESC;\n\t`\n\n\t// Define the parameters for the query\n\tgender := \"male\"\n\tnationality := \"Indian\"\n\n\t// Execute the query\n\trows, err := db.Query(query, gender, nationality)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer rows.Close()\n\n\t// Iterate through the results\n\tfor rows.Next() {\n\t\tvar id int\n\t\tvar name, gender, nationality string\n\t\tvar age int\n\t\tvar averageAge float64\n\n\t\terr := rows.Scan(&id, &name, &age, &gender, &nationality, &averageAge)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\n\t\tfmt.Printf(\"ID: %d, Name: %s, Age: %d, Gender: %s, Nationality: %s, Average Age: %.2f\\n\",\n\t\t\tid, name, age, gender, nationality, averageAge)\n\t}\n\n\t// Check for errors from iterating over rows\n\tif err = rows.Err(); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n### Explanation:\n1. **Database Connection**: The `sql.Open` function is used to establish a connection to the database. The connection string should be replaced with your actual database credentials.\n\n2. **SQL Query**: The query selects all individuals who are older than 18, match the specified gender and nationality, and sorts them by age in descending order. The subquery calculates the average age of individuals who meet the same criteria.\n\n3. **Parameters**: The query uses placeholders (`$1`, `$2`) for gender and nationality, which are provided as arguments (`gender` and `nationality` variables).\n\n4. **Query Execution**: `db.Query` is used to execute the query. The results are iterated over with `rows.Next()`, and each row is scanned into variables.\n\n5. **Error Handling**: Proper error handling is implemented to ensure the program exits gracefully in the event of an error.\n\nMake sure to replace the connection string and possibly the driver import with the ones that suit your database."
    }
]