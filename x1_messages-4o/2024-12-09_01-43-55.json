[
    {
        "role": "user",
        "content": "How can I get an uploaded file from a WTForms field in Flask? I'm currently using a WTForms FileField instead of writing the input HTML myself. In the Flask docs, the file upload example uses `<input type=\"file\" name=\"file\">` and then `request.files['file']` to retrieve the file. What would be the equivalent for WTForms?"
    },
    {
        "role": "assistant",
        "content": "When using WTForms with Flask to handle file uploads, you can still access the uploaded file using the `request.files` dictionary, but you'll tie it to your WTForms form for validation and ease of use. Here's how you can achieve this:\n\n1. **Define the Form**: Use `FileField` in your WTForms form class to handle file uploads.\n\n    ```python\n    from flask_wtf import FlaskForm\n    from wtforms import FileField, SubmitField\n    from wtforms.validators import DataRequired\n\n    class UploadForm(FlaskForm):\n        file = FileField('File', validators=[DataRequired()])\n        submit = SubmitField('Upload')\n    ```\n\n2. **Handle the Form in Your Flask View**: In your view function, validate the form and process the file.\n\n    ```python\n    from flask import Flask, request, redirect, url_for, render_template, flash\n    from werkzeug.utils import secure_filename\n\n    app = Flask(__name__)\n    app.config['SECRET_KEY'] = 'your_secret_key_here'\n    app.config['UPLOAD_FOLDER'] = '/path/to/upload/folder'\n\n    @app.route('/upload', methods=['GET', 'POST'])\n    def upload():\n        form = UploadForm()\n        if form.validate_on_submit():\n            # Access the file from request.files using the name attribute of your FileField\n            uploaded_file = request.files[form.file.name]\n\n            # Secure the filename\n            filename = secure_filename(uploaded_file.filename)\n\n            # Save the file to the desired location\n            uploaded_file.save(os.path.join(app.config['UPLOAD_FOLDER'], filename))\n\n            flash('File successfully uploaded')\n            return redirect(url_for('upload'))\n\n        return render_template('upload.html', form=form)\n    ```\n\n3. **Create the Template**: Create a template file named `upload.html` to render the form.\n\n    ```html\n    <!doctype html>\n    <title>Upload File</title>\n    {% with messages = get_flashed_messages() %}\n      {% if messages %}\n        <ul>\n        {% for message in messages %}\n          <li>{{ message }}</li>\n        {% endfor %}\n        </ul>\n      {% endif %}\n    {% endwith %}\n    <h1>Upload File</h1>\n    <form method=\"POST\" enctype=\"multipart/form-data\">\n        {{ form.hidden_tag() }}\n        <p>\n            {{ form.file.label }}<br>\n            {{ form.file(size=32) }}<br>\n            {% for error in form.file.errors %}\n              <span style=\"color: red;\">[{{ error }}]</span>\n            {% endfor %}\n        </p>\n        <p>{{ form.submit() }}</p>\n    </form>\n    ```\n\n**Key Points**:\n- Use the `enctype=\"multipart/form-data\"` attribute in your form HTML to ensure files are sent correctly.\n- Access the uploaded file using `request.files[form.file.name]`.\n- Use `secure_filename` from `werkzeug.utils` to ensure the file name is safe to use on any file system.\n- Remember to configure the `UPLOAD_FOLDER` in your Flask app configuration to specify where uploaded files should be stored.\n\nThis setup allows you to handle file uploads seamlessly with WTForms while also benefiting from the validation and structure it provides."
    }
]