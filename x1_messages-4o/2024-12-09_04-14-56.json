[
    {
        "role": "user",
        "content": "How can I dynamically create HTML files in Python? I am writing a script for a gallery that iterates over directories and collects file metadata. I then plan to use this data to automatically generate a picture gallery based on HTML. I need a simple solution, such as creating a table of pictures. Manually writing to a file doesn't seem like the most efficient method, and the code might get too long. Is there a more HTML-specific way to do this?"
    },
    {
        "role": "assistant",
        "content": "To dynamically create HTML files in Python for your picture gallery, you can use templating engines like Jinja2. Jinja2 allows you to create HTML templates with placeholders that can be filled with your data, making it a more efficient and organized solution compared to manually writing HTML code. Here's a simple guide to get you started:\n\n1. **Install Jinja2**: First, you need to install the Jinja2 package if you haven't already. You can do this using pip:\n\n   ```bash\n   pip install Jinja2\n   ```\n\n2. **Create an HTML Template**: Create an HTML template file (e.g., `gallery_template.html`) with placeholders for your image data. Here's a basic example:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>Picture Gallery</title>\n       <style>\n           table { width: 100%; }\n           td { padding: 10px; text-align: center; }\n           img { width: 100px; height: auto; }\n       </style>\n   </head>\n   <body>\n       <h1>Picture Gallery</h1>\n       <table>\n           <tr>\n           {% for image in images %}\n               <td>\n                   <img src=\"{{ image.url }}\" alt=\"{{ image.alt }}\">\n                   <p>{{ image.title }}</p>\n               </td>\n               {% if loop.index % 3 == 0 %}\n           </tr><tr>\n               {% endif %}\n           {% endfor %}\n           </tr>\n       </table>\n   </body>\n   </html>\n   ```\n\n3. **Create a Python Script**: Use Jinja2 in your Python script to render the template with your image data. Here's an example script that iterates over directories, collects image metadata, and generates an HTML file:\n\n   ```python\n   import os\n   from jinja2 import Environment, FileSystemLoader\n\n   # Set the directory containing your images\n   image_directory = 'path/to/your/images'\n\n   # Collect image data\n   images = []\n   for filename in os.listdir(image_directory):\n       if filename.endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):\n           file_path = os.path.join(image_directory, filename)\n           images.append({\n               'url': file_path,\n               'alt': filename,\n               'title': os.path.splitext(filename)[0]\n           })\n\n   # Set up Jinja2 environment and load the template\n   env = Environment(loader=FileSystemLoader('.'))\n   template = env.get_template('gallery_template.html')\n\n   # Render the template with the image data\n   rendered_html = template.render(images=images)\n\n   # Write the rendered HTML to a file\n   with open('gallery.html', 'w') as f:\n       f.write(rendered_html)\n\n   print(\"Gallery HTML file generated successfully.\")\n   ```\n\n4. **Run Your Script**: Execute your Python script. It will generate a `gallery.html` file containing your dynamically created picture gallery.\n\nThis method keeps your HTML structure separate from your Python logic, making it easier to manage and maintain both the code and the HTML structure."
    }
]