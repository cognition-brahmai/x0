[
    {
        "role": "user",
        "content": "Given two strings, find and return the longest common substring.\nstr1 = \"abcdef\"\nstr2 = \"abcxyz\""
    },
    {
        "role": "assistant",
        "content": "To find the longest common substring between two strings, we can use dynamic programming. Here\u2019s a step-by-step explanation and solution:\n\n1. **Initialize a 2D array**: Create a 2D array `dp` where `dp[i][j]` represents the length of the longest common substring that ends with `str1[i-1]` and `str2[j-1]`.\n\n2. **Fill the array**: Iterate through each character in `str1` and `str2`. If `str1[i-1] == str2[j-1]`, then set `dp[i][j] = dp[i-1][j-1] + 1`. Otherwise, set `dp[i][j] = 0`.\n\n3. **Track the maximum length**: During the iteration, keep track of the maximum length and the ending index of the substring in `str1`.\n\n4. **Extract the substring**: Once you have the maximum length and the ending index, extract the substring from `str1`.\n\nHere is the implementation in Python:\n\n```python\ndef longest_common_substring(str1, str2):\n    m, n = len(str1), len(str2)\n    # Initialize the 2D array with zeros\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    max_length = 0\n    end_index = 0  # End index of the longest common substring in str1\n    \n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if str1[i - 1] == str2[j - 1]:\n                dp[i][j] = dp[i - 1][j - 1] + 1\n                if dp[i][j] > max_length:\n                    max_length = dp[i][j]\n                    end_index = i\n    \n    # Extract the longest common substring\n    longest_common_substring = str1[end_index - max_length:end_index]\n    \n    return longest_common_substring\n\n# Test\nstr1 = \"abcdef\"\nstr2 = \"abcxyz\"\nprint(longest_common_substring(str1, str2))\n```\n\nFor the given strings `\"abcdef\"` and `\"abcxyz\"`, the longest common substring is `\"abc\"`."
    }
]