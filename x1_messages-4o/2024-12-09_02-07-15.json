[
    {
        "role": "user",
        "content": "Is there an equivalent function in PHP for Python's `__name__ == \"__main__\"`? I'm looking for something that works for scripts executed both through the command line and through a web request. If there's no in-built function, would a custom function be required? In Python, `__name__ == \"__main__\"` allows you to define a module file and also run it if it is the entry point. I'm trying to replicate this behavior in PHP, with an equivalent structure as shown below. \n\n```php\n// SomeClass.php\n<?php\nclass SomeClass\n{\n    function doStuff() {\n        echo \"wahey!\\n\";\n    }\n}\n\nif (__name__ == \"__main__\") {\n    $sc = new SomeClass;\n    $sc->doStuff();\n}\n?>\n\n// OtherClass.php\n<?php\nrequire_once(\"SomeClass.php\");\nclass OtherClass\n{\n    public $yep;\n}\n?>\n\n// command line:\nphp SomeClass.php     // outputs \"wahey!\"\nphp OtherClass.php    // outputs nothing\n```\n\nA recommended solution I found suggested using `if (!debug_backtrace()) { // do useful stuff }` but I'm not sure if this is the best way to go about it."
    },
    {
        "role": "assistant",
        "content": "In PHP, there is no direct equivalent to Python's `__name__ == \"__main__\"` construct, but you can achieve similar behavior by checking how the script is being executed. The `debug_backtrace()` function can indeed be used for this purpose. When a script is run directly, `debug_backtrace()` will return an empty array, but when the script is included or required by another file, it will return information about the calling context.\n\nHere's how you can implement this in your PHP scripts:\n\n```php\n// SomeClass.php\n<?php\nclass SomeClass\n{\n    function doStuff() {\n        echo \"wahey!\\n\";\n    }\n}\n\n// This condition checks if the script is being run directly\nif (!debug_backtrace()) {\n    $sc = new SomeClass;\n    $sc->doStuff();\n}\n?>\n\n// OtherClass.php\n<?php\nrequire_once(\"SomeClass.php\");\n\nclass OtherClass\n{\n    public $yep;\n}\n?>\n```\n\n### Explanation:\n- **`!debug_backtrace()`**: This checks if there are no calls in the stack trace, meaning the script isn't being included or required by another script. If the script is executed directly, `debug_backtrace()` will return an empty array, making the condition true.\n- **Direct Execution**: When you run `php SomeClass.php` from the command line, the condition will be true, and `doStuff()` will be executed.\n- **Included Execution**: When `SomeClass.php` is included in another script, like `OtherClass.php`, `debug_backtrace()` will not be empty, and the condition will be false, so the `doStuff()` method will not be called.\n\nThis approach allows you to mimic the behavior of Python's `__name__ == \"__main__\"` in PHP, allowing scripts to act differently based on whether they are run directly or included in another script."
    }
]