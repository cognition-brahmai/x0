[
    {
        "role": "user",
        "content": "I am trying to create a legend for a line graph in Matplotlib's PyPlot. But I want to do so without creating any extra variables. Here's my current script:\n\n```python\nif __name__ == '__main__':\n    PyPlot.plot(total_lengths, sort_times_bubble, 'b-',\n                total_lengths, sort_times_ins, 'r-',\n                total_lengths, sort_times_merge_r, 'g+',\n                total_lengths, sort_times_merge_i, 'p-', )\n    PyPlot.title(\"Combined Statistics\")\n    PyPlot.xlabel(\"Length of list (number)\")\n    PyPlot.ylabel(\"Time taken (seconds)\")\n    PyPlot.show()\n```\nThis script generates a basic graph. However, I want to make sure people know which line represents what data. I looked at the official guide on adding a legend but it requires an extra variable `ax`. How can I add a legend to my graph without this extra variable and while keeping my current script simple?"
    },
    {
        "role": "assistant",
        "content": "You can add a legend to your Matplotlib plot without creating any additional variables by directly using the `label` parameter in the `plot` function and then calling `legend()` before `show()`. Here's how you can modify your script to include a legend:\n\n```python\nimport matplotlib.pyplot as PyPlot\n\nif __name__ == '__main__':\n    PyPlot.plot(total_lengths, sort_times_bubble, 'b-', label='Bubble Sort')\n    PyPlot.plot(total_lengths, sort_times_ins, 'r-', label='Insertion Sort')\n    PyPlot.plot(total_lengths, sort_times_merge_r, 'g+', label='Recursive Merge Sort')\n    PyPlot.plot(total_lengths, sort_times_merge_i, 'p-', label='Iterative Merge Sort')\n    \n    PyPlot.title(\"Combined Statistics\")\n    PyPlot.xlabel(\"Length of list (number)\")\n    PyPlot.ylabel(\"Time taken (seconds)\")\n    PyPlot.legend()  # Add this line to create the legend\n    PyPlot.show()\n```\n\nHere's a breakdown of what has been changed:\n- Added the `label` parameter to each `plot` call, specifying the name for each line.\n- Called `PyPlot.legend()` before `PyPlot.show()` to display the legend on the plot.\n\nThis way, you'll have a legend on your graph without needing to create an extra `ax` variable."
    }
]