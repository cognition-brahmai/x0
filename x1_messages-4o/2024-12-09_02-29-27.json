[
    {
        "role": "user",
        "content": "I am currently working on a Python project and I'm in need of a stand-alone event system. I know about pydispatcher, but I would like to know if there are any other event-related packages available for Python. I am not interested in event managers that are part of large frameworks. Instead, I am looking for a small, bare-bones solution that I can easily extend. Can you recommend any such Python packages?"
    },
    {
        "role": "assistant",
        "content": "Certainly! If you're looking for a stand-alone event system in Python that is small and easy to extend, here are a few options you might consider:\n\n1. **blinker**: Blinker is a fast and simple event dispatching library for Python. It's lightweight and provides a straightforward API for creating signals and connecting them to handlers. It's well-suited for applications that just need basic event signaling.\n\n   Installation: \n   ```bash\n   pip install blinker\n   ```\n\n   Example usage:\n   ```python\n   from blinker import Signal\n\n   my_signal = Signal()\n\n   def handler(sender):\n       print(f\"Signal received from {sender}\")\n\n   my_signal.connect(handler)\n\n   my_signal.send('source')\n   ```\n\n2. **eventlet**: Eventlet is a concurrent networking library, but it also provides a simple event dispatching mechanism. It's designed for network applications, but its event system can be used independently.\n\n   Installation:\n   ```bash\n   pip install eventlet\n   ```\n\n3. **pyee**: Pyee is an event-emitting library similar to Node.js's EventEmitter. It's simple and intuitive for those familiar with Node.js's event system.\n\n   Installation:\n   ```bash\n   pip install pyee\n   ```\n\n   Example usage:\n   ```python\n   from pyee import EventEmitter\n\n   ee = EventEmitter()\n\n   @ee.on('event')\n   def event_handler():\n       print(\"Event has been handled!\")\n\n   ee.emit('event')\n   ```\n\n4. **events**: The events library is another simple event handling library that provides an easy-to-use interface for defining and emitting events.\n\n   Installation:\n   ```bash\n   pip install events\n   ```\n\n   Example usage:\n   ```python\n   from events import Events\n\n   class MyEmitter(Events):\n       __events__ = ('on_event',)\n\n   emitter = MyEmitter()\n\n   @emitter.on_event\n   def handler():\n       print(\"Event occurred!\")\n\n   emitter.on_event()\n   ```\n\nThese libraries should provide the basic functionality you need for a small, extendable event system in Python. You can choose one based on your familiarity with similar systems or specific requirements for your project."
    }
]