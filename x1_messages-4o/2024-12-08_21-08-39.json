[
    {
        "role": "user",
        "content": "Can you create a Python script that utilizes natural language processing algorithms to perform sentiment analysis on a given paragraph, and returns the emotional tone as a numerical value? The script should also take into account the context of the text and provide more granular analysis of the emotional tone. Please include relevant Python code that implements these features."
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a Python script for sentiment analysis that takes into account the context and provides a granular analysis of the emotional tone, we can use the Hugging Face Transformers library, which provides pre-trained models that are highly effective for NLP tasks. We'll use a model like BERT for sentiment analysis. Additionally, we can utilize the `transformers` and `torch` libraries to perform this task.\n\nBelow is an example Python script that performs sentiment analysis on a given paragraph and returns the emotional tone as a numerical value:\n\n```python\nimport torch\nfrom transformers import BertTokenizer, BertForSequenceClassification\nfrom transformers import pipeline\n\n# Load pre-trained model and tokenizer from Hugging Face\nmodel_name = \"nlptown/bert-base-multilingual-uncased-sentiment\"\ntokenizer = BertTokenizer.from_pretrained(model_name)\nmodel = BertForSequenceClassification.from_pretrained(model_name)\n\n# Create a sentiment analysis pipeline\nnlp = pipeline(\"sentiment-analysis\", model=model, tokenizer=tokenizer)\n\ndef analyze_sentiment(paragraph):\n    # Analyze the sentiment\n    results = nlp(paragraph)\n    \n    # Extract the label and score\n    label = results[0]['label']\n    score = results[0]['score']\n    \n    # Map label to numerical score: \n    # 1 star -> very negative, 5 stars -> very positive\n    label_to_score = {\n        '1 star': 1,\n        '2 stars': 2,\n        '3 stars': 3,\n        '4 stars': 4,\n        '5 stars': 5\n    }\n    \n    numerical_score = label_to_score[label]\n    \n    return numerical_score, score\n\n# Example usage\nparagraph = \"I love this product! It has exceeded my expectations and I couldn't be happier with my purchase.\"\nnumerical_score, confidence_score = analyze_sentiment(paragraph)\n\nprint(f\"Numerical Sentiment Score: {numerical_score}\")\nprint(f\"Confidence Score: {confidence_score:.2f}\")\n```\n\n### Key Points:\n\n1. **Model Selection**: We use the `nlptown/bert-base-multilingual-uncased-sentiment` model, which is designed to handle sentiment analysis with a rating from 1 to 5 stars.\n\n2. **Pipeline**: The `pipeline` API simplifies the process of using pre-trained models for common NLP tasks.\n\n3. **Granular Analysis**: The model outputs both a sentiment label (e.g., '5 stars') and a confidence score, providing a granular understanding of the sentiment.\n\n4. **Numerical Value**: The script maps the label to a numerical score for easier interpretation.\n\nEnsure you have the necessary libraries installed in your environment:\n\n```bash\npip install torch transformers\n```\n\nThis script provides a basic framework for sentiment analysis. Depending on your specific needs, you might want to further customize the model or handle additional nuances in text processing."
    }
]