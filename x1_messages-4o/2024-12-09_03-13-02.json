[
    {
        "role": "user",
        "content": "In Python, I am experiencing an issue where copying my variable seems to be changing the original. I have a function `estExt(matriz,erro)` where I create a copy of `matriz` into `aux` and then call a function `solucoes(aux)`. However, this seems to be altering the original `matriz`. Here's the code:\n\n```python\ndef estExt(matriz,erro):\n    print (\"Matrix after:\");\n    print(matriz);\n\n    aux=matriz;\n    x=solucoes(aux); # IF aux is a copy of matrix, why the matrix is changed??\n\n    print (\"Matrix before: \");\n    print(matriz)\n\n```\nThe matrix `matriz` is:\n```\n[[7, 8, 9, 24], [8, 9, 10, 27], [9, 10, 8, 27]]\n```\nand after running the function `solucoes(aux)`, `matriz` is changed to:\n```\n[[7, 8, 9, 24], [0.0, -0.14285714285714235, -0.2857142857142847, -0.42857142857142705], [0.0, 0.0, -3.0, -3.0000000000000018]]\n```\nWhy is this happening?"
    },
    {
        "role": "assistant",
        "content": "The issue you're experiencing stems from the fact that in Python, assignment with `=` does not create a copy of the object but rather a reference to the same object. When you do `aux = matriz`, both `aux` and `matriz` refer to the same list object in memory. Therefore, any modifications made to `aux` within the `solucoes(aux)` function are also reflected in `matriz`.\n\nTo create a true copy of `matriz`, you need to explicitly create a copy of it. For a list of lists (which is what a matrix is in Python), you can use the `copy` module for a shallow copy, or the `copy.deepcopy` function for a deep copy. Here's how you can modify your code to use a deep copy:\n\n```python\nimport copy\n\ndef estExt(matriz, erro):\n    print(\"Matrix before:\")\n    print(matriz)\n\n    aux = copy.deepcopy(matriz)\n    x = solucoes(aux)  # aux is now a deep copy of matriz\n\n    print(\"Matrix after:\")\n    print(matriz)\n\n```\n\nBy using `copy.deepcopy(matriz)`, you ensure that `aux` is a completely independent copy of `matriz`, and changes to `aux` will not affect `matriz`. This is necessary when dealing with nested lists (like matrices), as a shallow copy would only copy the outer list, leaving inner lists as references."
    }
]