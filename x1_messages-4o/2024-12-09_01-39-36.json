[
    {
        "role": "user",
        "content": "I am trying to modify the logging message format based on the message logging level in Python3. I previously asked this question for python 2, but I am encountering an issue since the previous solution does not work for Python 3.2.3. Here's the code that works on Python 2.7.3:\n\n```python\nimport logging\n\nclass CustomConsoleFormatter(logging.Formatter):\n    \"\"\"\n    Modify the way DEBUG messages are displayed.\n    \"\"\"\n    def __init__(self, fmt=\"%(levelno)d: %(msg)s\"):\n        logging.Formatter.__init__(self, fmt=fmt)\n\n    def format(self, record):\n\n        # Remember the original format\n        format_orig = self._fmt\n\n        if record.levelno == logging.DEBUG:\n            self._fmt = \"DEBUG: %(msg)s\"\n\n        # Call the original formatter to do the grunt work\n        result = logging.Formatter.format(self, record)\n\n        # Restore the original format\n        self._fmt = format_orig\n\n        return result\n\n# Set up a logger\nmy_logger = logging.getLogger(\"my_custom_logger\")\nmy_logger.setLevel(logging.DEBUG)\n\nmy_formatter = CustomConsoleFormatter()\n\nconsole_handler = logging.StreamHandler()\nconsole_handler.setFormatter(my_formatter)\n\nmy_logger.addHandler(console_handler)\n\nmy_logger.debug(\"This is a DEBUG-level message\")\nmy_logger.info(\"This is an INFO-level message\")\n```\n\nWhen I run this on Python 2.7.3, I get:\n\n```\nDEBUG: This is a DEBUG-level message\n20: This is an INFO-level message\n```\n\nHowever, when I convert this to Python 3 by modifying the `CustomConsoleFormatter.__init__` and run it on Python 3.2.3:\n\n```python\ndef __init__(self):\n    super().__init__(fmt=\"%(levelno)d: %(msg)s\", datefmt=None, style='%')\n```\n\nI get:\n\n```\n10: This is a DEBUG-level message\n20: This is an INFO-level message\n```\n\nMy intention is to replace '10' with 'DEBUG', but it is not working as expected. Can anyone suggest a workaround to this issue or point out what I might be missing?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is due to the way the `logging` module works in Python 3. The format string in your `CustomConsoleFormatter` class is not being updated correctly for the `DEBUG` level messages. You need to modify the format string to include `%(levelname)s` instead of `%(levelno)d` for the `DEBUG` messages specifically.\n\nHere's how you can modify your code to achieve the desired format:\n\n```python\nimport logging\n\nclass CustomConsoleFormatter(logging.Formatter):\n    \"\"\"\n    Modify the way DEBUG messages are displayed.\n    \"\"\"\n    def __init__(self, fmt=\"%(levelname)s: %(msg)s\"):\n        super().__init__(fmt=fmt, datefmt=None, style='%')\n\n    def format(self, record):\n        # Remember the original format\n        original_fmt = self._style._fmt\n\n        if record.levelno == logging.DEBUG:\n            self._style._fmt = \"DEBUG: %(msg)s\"\n\n        # Call the original formatter to do the grunt work\n        result = super().format(record)\n\n        # Restore the original format\n        self._style._fmt = original_fmt\n\n        return result\n\n# Set up a logger\nmy_logger = logging.getLogger(\"my_custom_logger\")\nmy_logger.setLevel(logging.DEBUG)\n\nmy_formatter = CustomConsoleFormatter()\n\nconsole_handler = logging.StreamHandler()\nconsole_handler.setFormatter(my_formatter)\n\nmy_logger.addHandler(console_handler)\n\nmy_logger.debug(\"This is a DEBUG-level message\")\nmy_logger.info(\"This is an INFO-level message\")\n```\n\n### Key changes:\n1. **Use `%(levelname)s`:** This allows the logging level name (like `DEBUG`, `INFO`) to be shown instead of the numerical value.\n2. **Access `self._style._fmt`:** In Python 3, the `Formatter` class uses a `style` attribute to handle formatting. By modifying `self._style._fmt`, you can update the format string temporarily for specific levels.\n\nThis should give you the desired output:\n\n```\nDEBUG: This is a DEBUG-level message\nINFO: This is an INFO-level message\n```\n\nThis solution customizes the format for `DEBUG` messages while retaining the original format for other levels."
    }
]