[
    {
        "role": "user",
        "content": "I am using apscheduler and I am trying to pass parameters to the handler function that gets called when the scheduled job is launched. However, I'm encountering an error \"TypeError: func must be callable\". The code I use is as follows:\n\n```python\nfrom apscheduler.scheduler import Scheduler\nimport time\n\ndef printit(sometext):\n    print \"this happens every 5 seconds\"\n    print sometext\n\nsched = Scheduler()\nsched.start()\n\nsometext = \"this is a passed message\"\nsched.add_cron_job(printit(sometext), second=\"*/5\")\n\nwhile True:\n    time.sleep(1)\n```\n\nIs it possible to pass parameters into the function handler? If not, are there any alternatives? Basically, I need each scheduled job to return a string that I pass in when I create the schedule."
    },
    {
        "role": "assistant",
        "content": "The error you're encountering, \"TypeError: func must be callable,\" is happening because you're attempting to call the function `printit` immediately when you schedule the job, instead of passing the function itself to be called later. Here's how you can correct this and pass parameters to the job function:\n\nUse the `args` parameter in `add_cron_job` to pass arguments to the function. Here's how you can modify your code:\n\n```python\nfrom apscheduler.schedulers.background import BackgroundScheduler\nimport time\n\ndef printit(sometext):\n    print(\"this happens every 5 seconds\")\n    print(sometext)\n\nsched = BackgroundScheduler()\nsched.start()\n\nsometext = \"this is a passed message\"\nsched.add_job(printit, 'cron', second='*/5', args=[sometext])\n\ntry:\n    while True:\n        time.sleep(1)\nexcept (KeyboardInterrupt, SystemExit):\n    sched.shutdown()\n```\n\n### Key Changes:\n\n1. **Scheduler Import and Initialization**: \n   - Use the `BackgroundScheduler` from `apscheduler.schedulers.background` instead of the deprecated `apscheduler.scheduler`.\n   \n2. **Job Scheduling**:\n   - Pass the function `printit` itself to `add_job`, and add `args=[sometext]` to pass the parameter.\n\n3. **Shutdown Handling**:\n   - Use a `try-except` block to gracefully shut down the scheduler when the program is interrupted.\n\nWith these changes, your scheduled job will print the specified message every 5 seconds without immediately calling the function when you add the job."
    }
]