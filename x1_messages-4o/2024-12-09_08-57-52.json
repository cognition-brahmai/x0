[
    {
        "role": "user",
        "content": "Can you help me create a decorator function that adds a counter before each function in Python?"
    },
    {
        "role": "assistant",
        "content": "Certainly! In Python, a decorator is a function that takes another function as an argument and extends or alters its behavior. To create a decorator that adds a counter before each function, you can follow these steps:\n\n1. Define the decorator function.\n2. Inside the decorator, define a wrapper function that increments a counter and calls the original function.\n3. Return the wrapper function from the decorator.\n\nHere's an example of how you can do this:\n\n```python\ndef counter_decorator(func):\n    count = 0  # Initialize a counter\n\n    def wrapper(*args, **kwargs):\n        nonlocal count  # Use nonlocal to modify the count variable\n        count += 1\n        print(f\"Function '{func.__name__}' has been called {count} times.\")\n        return func(*args, **kwargs)  # Call the original function\n\n    return wrapper\n\n# Example usage\n@counter_decorator\ndef my_function(x):\n    print(f\"Function is executing with argument {x}\")\n\n# Test the decorator\nmy_function(10)\nmy_function(20)\nmy_function(30)\n```\n\nIn this example:\n\n- The `counter_decorator` function is defined, which will act as the decorator.\n- Inside `counter_decorator`, a counter variable `count` is initialized.\n- The `wrapper` function is defined within `counter_decorator`. It uses the `nonlocal` keyword to modify the `count` variable defined in the enclosing scope.\n- Each time the decorated function is called, the counter is incremented, and a message is printed showing how many times the function has been called.\n- The `wrapper` function then calls the original function `func` with its arguments and keyword arguments.\n- Finally, the `wrapper` function is returned from the decorator.\n\nWhen you apply the `@counter_decorator` to `my_function`, it will print the number of times `my_function` has been called each time it is invoked."
    }
]