[
    {
        "role": "user",
        "content": "Can I set a header with Python's SimpleHTTPServer module? Specifically, I need to set the 'Access-Control-Allow-Origin' header for cross-domain requests while testing some webpages. Is there an easy way to set this header with SimpleHTTPServer so that the original content is served and the header remains the same on each request?"
    },
    {
        "role": "assistant",
        "content": "Python's `SimpleHTTPServer` module, which is available in Python 2, does not directly support setting custom headers out-of-the-box. However, you can achieve this by subclassing `SimpleHTTPRequestHandler` to override the `end_headers` method, allowing you to insert custom headers before sending the response.\n\nFor Python 3, `SimpleHTTPServer` has been merged into `http.server`, so you would use `http.server.SimpleHTTPRequestHandler` instead.\n\nHere's a basic example of how you can modify the handler to set the `Access-Control-Allow-Origin` header:\n\n### Python 2\n\n```python\nimport SimpleHTTPServer\nimport SocketServer\n\nPORT = 8000\n\nclass CustomHandler(SimpleHTTPServer.SimpleHTTPRequestHandler):\n    def end_headers(self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        SimpleHTTPServer.SimpleHTTPRequestHandler.end_headers(self)\n\nHandler = CustomHandler\n\nhttpd = SocketServer.TCPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever()\n```\n\n### Python 3\n\n```python\nfrom http.server import SimpleHTTPRequestHandler, HTTPServer\n\nPORT = 8000\n\nclass CustomHandler(SimpleHTTPRequestHandler):\n    def end_headers(self):\n        self.send_header('Access-Control-Allow-Origin', '*')\n        SimpleHTTPRequestHandler.end_headers(self)\n\nHandler = CustomHandler\n\nhttpd = HTTPServer((\"\", PORT), Handler)\n\nprint(\"Serving at port\", PORT)\nhttpd.serve_forever()\n```\n\n### Explanation\n\n1. **Custom Handler**: We create a subclass of `SimpleHTTPRequestHandler`, overriding the `end_headers` method. This method is called just before the headers are sent to the client, making it an ideal place to insert custom headers.\n\n2. **CORS Header**: We use `self.send_header('Access-Control-Allow-Origin', '*')` to add the CORS header, allowing cross-origin requests from any domain.\n\n3. **Server Setup**: We instantiate `TCPServer` (Python 2) or `HTTPServer` (Python 3) with our custom handler and bind it to the desired port.\n\n4. **Running the Server**: The server will handle HTTP requests as usual, but now with the added custom header for CORS.\n\nThis setup is suitable for development and testing purposes. For production, you should consider using a more robust solution like a WSGI server and a framework that supports middleware for handling headers."
    }
]