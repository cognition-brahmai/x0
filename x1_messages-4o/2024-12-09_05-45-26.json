[
    {
        "role": "user",
        "content": "How can I use the data specified in package_data from my source code? I have specified package_data in my setup.py file as follows:\n\n```python\npackages=['hermes'],\npackage_dir={'hermes': 'hermes'},\npackage_data={'hermes': ['templates/*.tpl']},\n```\n\nMy directory structure looks like this:\n\n```python\nhermes/\n |\n | docs/\n | ...\n | hermes/\n    | \n    | __init__.py\n    | code.py\n    | templates\n        |\n        | python.tpl\n |\n | README\n | setup.py\n```\n\nMy problem is that I need to use files from the templates directory in my source code so I can write out python code as this project is a parser generator. I am unable to figure out how to properly include and use these files in my code. Could you provide any suggestions?"
    },
    {
        "role": "assistant",
        "content": "To use the data files specified in `package_data` (in your case, the template files in the `templates` directory) within your source code, you need to ensure that these files are included in your package distribution and then access them correctly at runtime.\n\nHere are the steps you can follow:\n\n### Step 1: Ensure Files are Included\nYou've already specified the `package_data` in your `setup.py`, which is correct. Make sure you have the following setup:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='hermes',\n    version='0.1',\n    packages=find_packages(),\n    package_dir={'hermes': 'hermes'},\n    package_data={'hermes': ['templates/*.tpl']},\n    include_package_data=True,\n    # other setup arguments...\n)\n```\n\nThe `include_package_data=True` argument is important as it tells setuptools to include the package data files specified.\n\n### Step 2: Accessing the Data Files in Code\nTo access the template files from your code, you can use the `pkg_resources` module from the `setuptools` package. This module provides utilities to access package resources.\n\nHere's how you can do it:\n\n```python\nimport pkg_resources\n\ndef load_template(template_name):\n    # Construct the resource path\n    resource_path = f'templates/{template_name}'\n    \n    # Load the resource using pkg_resources\n    template_content = pkg_resources.resource_string(__name__, resource_path)\n    \n    return template_content.decode('utf-8')  # Decode bytes to string\n\n# Usage\ntemplate_content = load_template('python.tpl')\nprint(template_content)\n```\n\n### Step 3: Using the Template Content\nOnce you've loaded the template content using the function above, you can process it as needed for your parser generator.\n\n### Additional Notes\n- Make sure the `pkg_resources` module is available. It's a part of `setuptools`, which should be available if you've used it for packaging your application.\n- `pkg_resources.resource_string()` returns the content of the file as bytes, so you'll need to decode it to a string if necessary.\n\nBy following these steps, you should be able to include and use the files from the `templates` directory in your source code."
    }
]