[
    {
        "role": "user",
        "content": "In Django REST Framework, how can I raise an error when extra fields are present on a POST request? For example, I have a serializer as follows:\n\n```python\nclass ModelASerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = models.ModelA\n        fields = ('name', 'number')\n```\n\nI am POSTing this payload to create a new instance:\n\n```json\n{\n    \"name\": \"test\",\n    \"number\": 5\n}\n```\n\nThis works fine. However, if my API is updated to include a new field, 'title', and I forget to update my serializer, clients might send payloads that look like this:\n\n```json\n{\n    \"name\": \"test\",\n    \"number\": 5,\n    \"title\": \"Mr\"\n}\n```\n\nIn this case, the serializer simply ignores the extra key and does not raise an exception. How can I ensure that a serializer only expects fields specified in 'fields' or, if it's not a ModelSerializer, fields specified as members, and raises an error if this is not the case?"
    },
    {
        "role": "assistant",
        "content": "To ensure that your Django REST Framework serializer raises an error when extra fields are present in the incoming data, you can override the `to_internal_value` method of the `Serializer` class. This method is responsible for converting the primitive data types from the incoming payload into internal data types that can be used for validation and saving.\n\nHere's how you can modify your `ModelASerializer` to raise an error when extra fields are detected:\n\n```python\nfrom rest_framework import serializers\n\nclass ModelASerializer(serializers.ModelSerializer):\n\n    class Meta:\n        model = models.ModelA\n        fields = ('name', 'number')\n\n    def to_internal_value(self, data):\n        # Check for any extra fields\n        extra_fields = set(data.keys()) - set(self.fields)\n        if extra_fields:\n            raise serializers.ValidationError(\n                {field: \"This field is not allowed.\" for field in extra_fields}\n            )\n\n        return super().to_internal_value(data)\n```\n\n### Explanation:\n- **Custom Validation**: By overriding the `to_internal_value` method, you can check for any keys in the incoming data that are not part of the serializer's defined fields.\n- **Set Operations**: Using set operations, you can easily determine which keys are extra by subtracting the serializer's fields from the keys in the incoming data.\n- **ValidationError**: If extra fields are detected, a `ValidationError` is raised, providing a clear message indicating which fields are not allowed.\n\nThis approach ensures that any unexpected fields in the request payload will trigger a validation error, helping you maintain strict control over the data your API accepts."
    }
]