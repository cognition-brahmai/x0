[
    {
        "role": "user",
        "content": "I am dealing with multiple Panda DataFrames that have the exact same shape and I want to compare them. I need to find the mean and median across these dataframes. For example, for a given cell [0,Source.0], I want to calculate the mean as (0.001182 + 0.000001) / 2 = 0.0005915. This calculation should be applicable for each cell when the indexes and columns of all the dataframes are exactly the same. What would be the most straightforward way to do this in Python?"
    },
    {
        "role": "assistant",
        "content": "To calculate the mean and median across multiple Pandas DataFrames with the same shape, you can use the following approach. Assuming you have a list of DataFrames, you can stack them to create a 3D array-like structure, and then perform the mean and median calculations along the appropriate axis. Here's a step-by-step approach:\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# Sample DataFrames\ndf1 = pd.DataFrame({\n    'Source.0': [0.001182, 0.002345],\n    'Source.1': [0.004567, 0.005678]\n})\n\ndf2 = pd.DataFrame({\n    'Source.0': [0.000001, 0.003456],\n    'Source.1': [0.006789, 0.007890]\n})\n\n# List of DataFrames\ndfs = [df1, df2]\n\n# Stack DataFrames to create a 3D array\nstacked = np.stack([df.values for df in dfs], axis=0)\n\n# Calculate mean across DataFrames\nmean_df = pd.DataFrame(np.mean(stacked, axis=0), columns=df1.columns, index=df1.index)\n\n# Calculate median across DataFrames\nmedian_df = pd.DataFrame(np.median(stacked, axis=0), columns=df1.columns, index=df1.index)\n\nprint(\"Mean DataFrame:\")\nprint(mean_df)\n\nprint(\"\\nMedian DataFrame:\")\nprint(median_df)\n```\n\n### Explanation:\n- **Stacking DataFrames**: We convert each DataFrame to a NumPy array and stack them along a new axis to create a 3D structure where each slice along the first axis corresponds to one DataFrame.\n- **Calculating Mean and Median**: Using `np.mean` and `np.median`, we calculate the mean and median across the stacked DataFrames along the first axis (axis=0). The results are then used to create new DataFrames with the same index and columns as the original DataFrames.\n\nThis method is efficient and leverages NumPy's capabilities to perform element-wise operations across multiple DataFrames."
    }
]