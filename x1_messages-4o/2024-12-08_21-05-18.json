[
    {
        "role": "user",
        "content": "Please write a Java code snippet that can accurately replace a specific word in a given sentence with a different word and simultaneously keep a record of the number of replacements made. The code should be able to handle cases where the same word occurs multiple times in the sentence. As an example, if we provide the sentence \"The cat jumped over the cat,\" please replace the word \"cat\" with \"dog\" and return the modified sentence with the count of total replacements made. The implementation should also consider edge cases like words with different capitalizations or special characters."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a Java code snippet that replaces a specific word in a given sentence with another word and simultaneously keeps track of the number of replacements made. This implementation handles multiple occurrences of the word, as well as different capitalizations and special characters:\n\n```java\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class WordReplacer {\n\n    public static void main(String[] args) {\n        String sentence = \"The cat jumped over the cat.\";\n        String targetWord = \"cat\";\n        String replacementWord = \"dog\";\n\n        Result result = replaceWord(sentence, targetWord, replacementWord);\n\n        System.out.println(\"Modified Sentence: \" + result.modifiedSentence);\n        System.out.println(\"Number of Replacements: \" + result.replacementCount);\n    }\n\n    public static Result replaceWord(String sentence, String targetWord, String replacementWord) {\n        // Using regex to match whole words only (case-insensitive)\n        String regex = \"\\\\b\" + Pattern.quote(targetWord) + \"\\\\b\";\n        Pattern pattern = Pattern.compile(regex, Pattern.CASE_INSENSITIVE);\n        Matcher matcher = pattern.matcher(sentence);\n        \n        StringBuffer modifiedSentence = new StringBuffer();\n        int count = 0;\n\n        while (matcher.find()) {\n            matcher.appendReplacement(modifiedSentence, replacementWord);\n            count++;\n        }\n        matcher.appendTail(modifiedSentence);\n\n        return new Result(modifiedSentence.toString(), count);\n    }\n\n    static class Result {\n        String modifiedSentence;\n        int replacementCount;\n\n        Result(String modifiedSentence, int replacementCount) {\n            this.modifiedSentence = modifiedSentence;\n            this.replacementCount = replacementCount;\n        }\n    }\n}\n```\n\n### Explanation:\n- **Regex Pattern**: The regex pattern `\\\\b` is used to specify word boundaries, ensuring that only whole words are matched. `Pattern.quote(targetWord)` is used to escape any special characters in the target word.\n- **Pattern.CASE_INSENSITIVE**: This flag allows the pattern to match words regardless of their case (e.g., \"Cat\" and \"cat\").\n- **Matcher**: The `Matcher` class is used to find and replace occurrences of the pattern in the input sentence.\n- **Result Class**: A simple class to hold both the modified sentence and the count of replacements.\n\nThis code will correctly replace all occurrences of the word \"cat\" with \"dog\" in the example sentence, accounting for different capitalizations and ensuring that only whole words are replaced."
    }
]