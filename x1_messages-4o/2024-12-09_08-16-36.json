[
    {
        "role": "user",
        "content": "How can I add a retry mechanism to the Python requests library, so that scripts using it will automatically retry for non-fatal errors? The recoverable errors I am currently considering are HTTP return codes 502, 503, 504, host not found (though it's less important now), and request timeout. I initially want to retry specified 5xx requests every minute. Ideally, I would like to add this functionality transparently, without having to manually implement recovery for each HTTP call made from inside these scripts or libraries that are using python-requests."
    },
    {
        "role": "assistant",
        "content": "To implement a retry mechanism in Python's `requests` library, you can use the `urllib3` library, which is used by `requests` under the hood. By configuring a `Retry` object and attaching it to an `HTTPAdapter`, you can transparently add retry functionality to your HTTP requests.\n\nHere's a step-by-step guide on how to set this up:\n\n1. **Install the necessary package**: Ensure you have the `requests` library installed. You can install it via pip if you haven't already:\n\n   ```bash\n   pip install requests\n   ```\n\n2. **Create a Retry Configuration**: Use the `Retry` class from `urllib3.util.retry` to define your retry policy, including which exceptions to retry on and how many retries to attempt.\n\n3. **Attach the Retry Policy to a Session**: Create a `requests.Session()` object, and mount an `HTTPAdapter` with your retry policy to it.\n\nHere's how you can implement this:\n\n```python\nimport requests\nfrom requests.adapters import HTTPAdapter\nfrom urllib3.util.retry import Retry\n\n# Define a retry strategy\nretry_strategy = Retry(\n    total=5,  # Total number of retries\n    backoff_factor=60,  # Wait 60 seconds between retries\n    status_forcelist=[502, 503, 504],  # Retry on these HTTP status codes\n    method_whitelist=[\"GET\", \"POST\"],  # Retry for these HTTP methods\n    raise_on_status=False  # Don't raise an exception on a failed status\n)\n\n# Attach the retry policy to an HTTPAdapter\nadapter = HTTPAdapter(max_retries=retry_strategy)\n\n# Create a session and mount the adapter\nsession = requests.Session()\nsession.mount(\"http://\", adapter)\nsession.mount(\"https://\", adapter)\n\n# Use the session to make requests\ntry:\n    response = session.get(\"http://example.com\")\n    response.raise_for_status()  # Raises HTTPError for bad responses (4xx and 5xx)\n    print(response.content)\nexcept requests.exceptions.RequestException as e:\n    print(f\"An error occurred: {e}\")\n```\n\n### Explanation:\n\n- **Retry Object**: Configures how many retries to attempt (`total`), the delay between retries (`backoff_factor`), and which HTTP status codes should trigger a retry (`status_forcelist`).\n  \n- **HTTPAdapter**: Binds the retry strategy to a session, allowing it to apply to all requests made using that session.\n\n- **Session**: A `requests.Session` object is used to persist settings across multiple requests, such as headers or parameters, and in this case, retry settings.\n\nThis setup will automatically retry requests for the specified status codes and in case of connection errors, without having to manually implement retry logic for each HTTP call. Adjust the `total`, `backoff_factor`, and `status_forcelist` as needed to fit your requirements."
    }
]