[
    {
        "role": "user",
        "content": "I am working with a pandas dataframe that may or may not have columns with constant values throughout. For instance, I have a dataframe like this:\n\n    row    A    B\n    1      9    0\n    2      7    0\n    3      5    0\n    4      2    0\n\nI'd like to transform it into a dataframe without the constant columns, such as:\n\n    row    A  \n    1      9    \n    2      7    \n    3      5    \n    4      2\n\nIs there a simple way to identify these constant columns and then remove them from the dataframe?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can easily identify and remove columns with constant values in a pandas DataFrame using the `nunique` method. The `nunique` method returns the number of unique values in a column. If a column has only one unique value, it means the column is constant.\n\nHere's how you can do it:\n\n```python\nimport pandas as pd\n\n# Example DataFrame\ndata = {\n    'A': [9, 7, 5, 2],\n    'B': [0, 0, 0, 0]\n}\ndf = pd.DataFrame(data)\n\n# Identify columns with only one unique value\nconstant_columns = df.columns[df.nunique() == 1]\n\n# Drop those columns\ndf_reduced = df.drop(columns=constant_columns)\n\nprint(df_reduced)\n```\n\nThis will give you the desired output:\n\n```\n   A\n0  9\n1  7\n2  5\n3  2\n```\n\nIn this code, `df.nunique() == 1` creates a boolean mask for columns with only one unique value, and `df.drop(columns=constant_columns)` removes those columns from the DataFrame."
    }
]