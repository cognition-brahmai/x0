[
    {
        "role": "user",
        "content": "Provide a C# code implementation of the Caesar Cipher algorithm that takes a plaintext string and a key as input and returns the encrypted string. The Caesar Cipher is a simple encryption technique that shifts the letters of the alphabet by a certain number of positions determined by the key. For example, if the key is 3, \"A\" would be replaced with \"D\", \"B\" with \"E\", and so on. Your implementation should handle both uppercase and lowercase letters, as well as non-letter characters."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a C# implementation of the Caesar Cipher algorithm. This code takes a plaintext string and a key as inputs and returns the encrypted string. It handles both uppercase and lowercase letters and leaves non-letter characters unchanged.\n\n```csharp\nusing System;\n\nclass CaesarCipher\n{\n    public static string Encrypt(string input, int key)\n    {\n        char[] buffer = input.ToCharArray();\n\n        for (int i = 0; i < buffer.Length; i++)\n        {\n            char letter = buffer[i];\n\n            if (char.IsLetter(letter))\n            {\n                char offset = char.IsUpper(letter) ? 'A' : 'a';\n                letter = (char)((letter + key - offset) % 26 + offset);\n            }\n\n            buffer[i] = letter;\n        }\n\n        return new string(buffer);\n    }\n\n    static void Main(string[] args)\n    {\n        Console.WriteLine(\"Enter the plaintext:\");\n        string plaintext = Console.ReadLine();\n\n        Console.WriteLine(\"Enter the key:\");\n        int key = int.Parse(Console.ReadLine());\n\n        string encryptedText = Encrypt(plaintext, key);\n        Console.WriteLine($\"Encrypted Text: {encryptedText}\");\n    }\n}\n```\n\n### Explanation:\n- The `Encrypt` method takes an input string and a key as parameters.\n- It converts the input string into a character array to iterate over each character.\n- For each character, it checks if it's a letter using `char.IsLetter`.\n- If it's a letter, it determines whether it's uppercase or lowercase and calculates the encrypted character by shifting it by the given key.\n- Non-letter characters remain unchanged.\n- The encrypted characters are collected back into a string and returned.\n\nTo run this code:\n1. Compile it using a C# compiler.\n2. Enter the plaintext and key when prompted.\n3. The encrypted text will be displayed as output.\n\nFeel free to modify the code as needed for your specific use case!"
    }
]