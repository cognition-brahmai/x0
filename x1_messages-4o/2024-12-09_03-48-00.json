[
    {
        "role": "user",
        "content": "How can I extract the underlying decision-rules or 'decision paths' from a trained tree in a decision tree as a textual list using scikit-learn? I am looking for something like this:\n```python\nif A>0.4 then if B<0.2 then if C>0.8 then class='X'\n```"
    },
    {
        "role": "assistant",
        "content": "To extract the decision rules or decision paths from a trained decision tree in scikit-learn as a textual list, you can use the `export_text` function from `sklearn.tree`. This function will provide you with a textual representation of the decision rules. Here's how you can do it:\n\n1. Train your decision tree using `DecisionTreeClassifier` or `DecisionTreeRegressor`.\n2. Use `export_text` to get the rules.\n\nHere is an example:\n\n```python\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.tree import export_text\nfrom sklearn.datasets import load_iris\n\n# Load dataset\niris = load_iris()\nX, y = iris.data, iris.target\n\n# Train a decision tree classifier\nclf = DecisionTreeClassifier(random_state=0)\nclf.fit(X, y)\n\n# Extract decision rules\ntree_rules = export_text(clf, feature_names=iris['feature_names'])\n\nprint(tree_rules)\n```\n\nThis will output the decision rules in a textual format. If you want it in a more concise 'if-else' format like you mentioned, you might need to manually parse and format it based on the output of `export_text`. Here's a simple way to achieve a more customized format:\n\n```python\ndef tree_to_code(tree, feature_names):\n    tree_ = tree.tree_\n    feature_name = [\n        feature_names[i] if i != _tree.TREE_UNDEFINED else \"undefined!\"\n        for i in tree_.feature\n    ]\n    paths = []\n\n    def recurse(node, depth, path):\n        indent = \"  \" * depth\n        if tree_.feature[node] != _tree.TREE_UNDEFINED:\n            name = feature_name[node]\n            threshold = tree_.threshold[node]\n            path_left = f\"{path}if {name} <= {threshold:.4f} then \"\n            path_right = f\"{path}if {name} > {threshold:.4f} then \"\n            recurse(tree_.children_left[node], depth + 1, path_left)\n            recurse(tree_.children_right[node], depth + 1, path_right)\n        else:\n            paths.append(f\"{path}class: {tree_.value[node].argmax()}\")\n\n    recurse(0, 1, \"\")\n    return paths\n\nfrom sklearn.tree import _tree\n\nrules = tree_to_code(clf, iris['feature_names'])\nfor rule in rules:\n    print(rule)\n```\n\nThis code will give you a more 'if-else' like structure. Adjust the formatting as required to better suit your needs."
    }
]