[
    {
        "role": "user",
        "content": "I have a Python script that loops through Excel files in a specific folder, removes the first 2 rows, then saves them as individual Excel files. The code also combines the files in the loop into a single 'master_data.xlsx' file. However, it currently overwrites the existing 'master_data.xlsx' file each time the script is run. I am looking to append the new data to the bottom of the already existing 'master_data.xlsx' file, instead of overwriting it. How can I modify my existing code to achieve this?\n\n```python\ndfList = []\npath = 'C:\\\\Test\\\\TestRawFile' \nnewpath = 'C:\\\\Path\\\\To\\\\New\\\\Folder'\n\nfor fn in os.listdir(path): \n  # Absolute file path\n  file = os.path.join(path, fn)\n  if os.path.isfile(file): \n    # Import the excel file and call it xlsx_file \n    xlsx_file = pd.ExcelFile(file) \n    # View the excel files sheet names \n    xlsx_file.sheet_names \n    # Load the xlsx files Data sheet as a dataframe \n    df = xlsx_file.parse('Sheet1',header= None) \n    df_NoHeader = df[2:] \n    data = df_NoHeader \n    # Save individual dataframe\n    data.to_excel(os.path.join(newpath, fn))\n\n    dfList.append(data) \n\nappended_data = pd.concat(dfList)\nappended_data.to_excel(os.path.join(newpath, 'master_data.xlsx'))\n```\nI have considered bringing in the 'master_data.xlsx' file as a dataframe, then matching the index up with the new appended data, and saving it back out. Is there an easier solution?"
    },
    {
        "role": "assistant",
        "content": "To append the new data to an existing 'master_data.xlsx' file without overwriting it, you can modify your script to first check if 'master_data.xlsx' already exists. If it does, read it into a DataFrame, concatenate it with the new data, and then save the updated DataFrame back to 'master_data.xlsx'. Here's how you can achieve this:\n\n```python\nimport os\nimport pandas as pd\n\ndfList = []\npath = 'C:\\\\Test\\\\TestRawFile' \nnewpath = 'C:\\\\Path\\\\To\\\\New\\\\Folder'\n\n# Check if master_data.xlsx already exists and read it if it does\nmaster_file_path = os.path.join(newpath, 'master_data.xlsx')\nif os.path.exists(master_file_path):\n    existing_master_data = pd.read_excel(master_file_path, sheet_name='Sheet1')\nelse:\n    existing_master_data = pd.DataFrame()  # Create an empty DataFrame if it doesn't exist\n\nfor fn in os.listdir(path): \n    # Absolute file path\n    file = os.path.join(path, fn)\n    if os.path.isfile(file): \n        # Import the excel file and call it xlsx_file \n        xlsx_file = pd.ExcelFile(file) \n        # Load the xlsx files Data sheet as a dataframe \n        df = xlsx_file.parse('Sheet1', header=None) \n        df_NoHeader = df[2:] \n        data = df_NoHeader \n        # Save individual dataframe\n        data.to_excel(os.path.join(newpath, fn), index=False)\n\n        dfList.append(data)\n\n# Concatenate new data with existing master data\nappended_data = pd.concat([existing_master_data] + dfList, ignore_index=True)\n\n# Save the updated master data back to the Excel file\nappended_data.to_excel(master_file_path, index=False, sheet_name='Sheet1')\n```\n\n### Key Changes:\n\n1. **Check for Existing Master File**: Before processing the new Excel files, check if the 'master_data.xlsx' file already exists. If it does, read it into a DataFrame (`existing_master_data`). If not, initialize an empty DataFrame.\n\n2. **Concatenate DataFrames**: Use `pd.concat` to combine the existing master data with the new dataframes (`dfList`).\n\n3. **Save Updated Master File**: Save the concatenated DataFrame back to 'master_data.xlsx', ensuring that the index is not included in the saved file.\n\nThis approach ensures that your new data is appended to the existing master file without overwriting it."
    }
]