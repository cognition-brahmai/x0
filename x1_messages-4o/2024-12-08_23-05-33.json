[
    {
        "role": "user",
        "content": "Can you create a Python code that generates complementary, triadic, and analogous colors based on the primary color of an image? However, the catch is that the input image will be given as a hexadecimal representation of its dominant color. You can use the table below as a reference for the color theory. Good luck! \n[Color Theory Table]\nColor Harmony | Colors used | Formula\n--------------|------------|--------\nComplementary | Two | Complementary hue = (H + 180\u00b0) % 360\u00b0\nTriadic | Three | Triadic hues = (H + 120\u00b0) % 360\u00b0, (H + 240\u00b0) % 360\u00b0\nAnalogous | Three to five | Analogous hues = H \u00b1 30\u00b0, H \u00b1 60\u00b0, H \u00b1 90\u00b0, H \u00b1 120\u00b0\n[Python code]\nhex_color = \"#3B5998\"\nr, g, b = int(hex_color[1:3], 16), int(hex_color[3:5], 16), int(hex_color[5:7], 16)\nh, s, v = colorsys.rgb_to_hsv(r / 255, g / 255, b / 255)\ncomplementary_hue = (h + 0.5) % 1.0\ntriadic_hues = [(h + 1/3) % 1.0, (h + 2/3) % 1.0]\nanalogous_hues = [(h + 1/12) % 1.0, (h + 1/6) % 1.0, (h + 1/4) % 1.0, (h + 5/12) % 1.0]\ncomplementary_rgb = colorsys.hsv_to_rgb(complementary_hue, s, v)\ntriadic_rgbs = [colorsys.hsv_to_rgb(hue, s, v) for hue in triadic_hues]\nanalogous_rgbs = [colorsys.hsv_to_rgb(hue, s, v) for hue in analogous_hues]\ncomplementary_hex = '#{:02x}{:02x}{:02x}'.format(*[int(x*255) for x in complementary_rgb])\ntriadic_hexes = ['#{:02x}{:02x}{:02x}'.format(*[int(x*255) for x in rgb]) for rgb in triadic_rgbs]\nanalogous_hexes = ['#{:02x}{:02x}{:02x}'.format(*[int(x*255) for x in rgb]) for rgb in analogous_rgbs]"
    },
    {
        "role": "assistant",
        "content": "Certainly! Let's break down the task and generate complementary, triadic, and analogous colors based on a given hexadecimal color. Here's the complete Python code using the `colorsys` module for color conversion:\n\n```python\nimport colorsys\n\ndef hex_to_rgb(hex_color):\n    hex_color = hex_color.lstrip('#')\n    return tuple(int(hex_color[i:i+2], 16) for i in (0, 2, 4))\n\ndef rgb_to_hex(rgb):\n    return '#{:02x}{:02x}{:02x}'.format(*rgb)\n\ndef generate_color_schemes(hex_color):\n    # Convert hex to RGB\n    r, g, b = hex_to_rgb(hex_color)\n    \n    # Convert RGB to HSV\n    h, s, v = colorsys.rgb_to_hsv(r / 255.0, g / 255.0, b / 255.0)\n    \n    # Calculate complementary, triadic, and analogous hues\n    complementary_hue = (h + 0.5) % 1.0\n    triadic_hues = [(h + 1/3) % 1.0, (h + 2/3) % 1.0]\n    analogous_hues = [(h + 1/12) % 1.0, (h + 1/6) % 1.0, (h + 1/4) % 1.0, (h + 5/12) % 1.0]\n    \n    # Convert hues back to RGB\n    complementary_rgb = colorsys.hsv_to_rgb(complementary_hue, s, v)\n    triadic_rgbs = [colorsys.hsv_to_rgb(hue, s, v) for hue in triadic_hues]\n    analogous_rgbs = [colorsys.hsv_to_rgb(hue, s, v) for hue in analogous_hues]\n    \n    # Convert RGB back to hex\n    complementary_hex = rgb_to_hex([int(x * 255) for x in complementary_rgb])\n    triadic_hexes = [rgb_to_hex([int(x * 255) for x in rgb]) for rgb in triadic_rgbs]\n    analogous_hexes = [rgb_to_hex([int(x * 255) for x in rgb]) for rgb in analogous_rgbs]\n    \n    # Print results\n    print(f\"Original Hex Color: {hex_color}\")\n    print(f\"Complementary Hex Color: {complementary_hex}\")\n    print(f\"Triadic Hex Colors: {triadic_hexes}\")\n    print(f\"Analogous Hex Colors: {analogous_hexes}\")\n\n# Example usage\nhex_color = \"#3B5998\"\ngenerate_color_schemes(hex_color)\n```\n\n### Explanation:\n1. **Conversion**: The code first converts the hexadecimal color to an RGB tuple.\n2. **HSV Conversion**: It then converts the RGB values to HSV to manipulate the hue.\n3. **Calculating Hues**: Using color theory, it calculates the complementary, triadic, and analogous hues.\n4. **RGB Conversion**: Converts the calculated hues back to RGB.\n5. **Hex Conversion**: Finally, the RGB values are converted to hexadecimal format for output.\n\nThis code will generate and print the complementary, triadic, and analogous hex colors based on the input hex color."
    }
]