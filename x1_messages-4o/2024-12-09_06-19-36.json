[
    {
        "role": "user",
        "content": "I have a Python package and some tests which are structured according to pytest's recommended layout. The directory structure is as follows:\n\n```\nsetup.py   # your distutils/setuptools Python package metadata\nmypkg/\n    __init__.py\n    appmodule.py\ntests/\n    test_app.py\n```\n\nWhen I run the tests using `py.test`, I encounter an ImportError: `No module named 'mypkg'`. I'm able to resolve this issue by installing the package using `python setup.py install`. However, this means the tests run against the installed package, not the local one. This makes the development process very tedious as I need to reinstall the package every time I make a change and want to run the tests, otherwise, I'm testing the old code. How can I run tests without installing the package?"
    },
    {
        "role": "assistant",
        "content": "To run your tests without installing the package each time, you can set up your environment so that `pytest` can find your package locally. There are a few approaches to achieve this:\n\n1. **Editable Install (Development Mode):**\n   You can install your package in \"editable\" mode using `pip`. This allows you to make changes to your code and have them immediately reflected without needing to reinstall the package. To do this, navigate to the directory containing your `setup.py` and run:\n\n   ```bash\n   pip install -e .\n   ```\n\n   This will create a symbolic link to your package, allowing changes to be picked up immediately.\n\n2. **PYTHONPATH Environment Variable:**\n   You can temporarily modify the `PYTHONPATH` so that Python can find your package. Run the following command in your terminal before executing `pytest`:\n\n   ```bash\n   export PYTHONPATH=$PYTHONPATH:$(pwd)\n   ```\n\n   On Windows, you can set the PYTHONPATH using:\n\n   ```cmd\n   set PYTHONPATH=%CD%\n   ```\n\n   This adds the current directory to the Python path.\n\n3. **pytest Configuration:**\n   You can create a `pytest.ini` file in your project root directory and specify the `testpaths` and `pythonpath`:\n\n   ```ini\n   # pytest.ini\n   [pytest]\n   testpaths = tests\n   pythonpath = mypkg\n   ```\n\n   This informs `pytest` where to find your package.\n\n4. **Use `sys.path` in Your Tests:**\n   Modify your test files to include the package directory at runtime. For example, add the following lines at the top of `test_app.py`:\n\n   ```python\n   import sys\n   import os\n\n   sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '../mypkg')))\n   ```\n\n   This ensures that the `mypkg` directory is included in the `sys.path` during the test execution.\n\nBy using one of these methods, you can run your tests against the local version of your package without needing to reinstall it each time you make changes. The \"editable install\" method is the most commonly used approach for development purposes."
    }
]