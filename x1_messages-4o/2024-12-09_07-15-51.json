[
    {
        "role": "user",
        "content": "How can I add custom model validation in Django such that no two records have overlapping date ranges? I want to enforce this validation globally without having to re-implement this logic in a Form, ModelForm, admin form, and the model's overridden save() method. The problem I encounter is that \"model validation\" typically refers to validating specific model fields, and not the entire model contents, or relations between fields. What is the simplest way to implement this?"
    },
    {
        "role": "assistant",
        "content": "In Django, to enforce a constraint such as ensuring no two records have overlapping date ranges, you can implement custom model validation logic. Here's a way to do this by leveraging Django's model validation framework:\n\n1. **Define Your Model:**\n   First, ensure you have a start and end date field in your model. For instance:\n\n   ```python\n   from django.db import models\n   from django.core.exceptions import ValidationError\n\n   class Event(models.Model):\n       name = models.CharField(max_length=100)\n       start_date = models.DateTimeField()\n       end_date = models.DateTimeField()\n\n       def clean(self):\n           super().clean()\n           if self.start_date >= self.end_date:\n               raise ValidationError(\"Start date must be before end date.\")\n           overlapping_events = Event.objects.filter(\n               start_date__lt=self.end_date,\n               end_date__gt=self.start_date,\n           ).exclude(id=self.id)\n           if overlapping_events.exists():\n               raise ValidationError(\"This event overlaps with another event.\")\n\n   ```\n\n2. **Use the `clean` Method:**\n   The `clean` method is used to provide custom validation logic for the whole model. This method is automatically called when you run `full_clean()` on a model instance, which is typically invoked during form validation, but you can also call it explicitly.\n\n3. **Integrate Validation:**\n   To ensure this validation is applied everywhere, you should call `full_clean()` in the `save` method of your model:\n\n   ```python\n   def save(self, *args, **kwargs):\n       self.full_clean()  # This calls the clean method\n       super().save(*args, **kwargs)\n   ```\n\n4. **Admin and Forms:**\n   When using Django admin or forms, Django automatically calls `full_clean()` when you use `ModelForm`, so you don't need to add extra validation logic there.\n\nBy using this approach, you ensure that the validation logic is centralized in the model itself, making it globally applicable wherever the model is used. This eliminates the need to repeat validation logic across forms, views, or other parts of your application."
    }
]