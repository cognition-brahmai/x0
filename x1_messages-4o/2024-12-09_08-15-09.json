[
    {
        "role": "user",
        "content": "How can I perform arithmetic operations using a pandas Series on each column of a pandas DataFrame? When I attempt to add a Series to a DataFrame, all the values in the result are \"np.nan\". I have defined a DataFrame \"df\" and a Series \"s\" as shown:\n\n```python\ndf = pd.DataFrame(\n    [[1, 2, 3], [4, 5, 6]],\n    index=[0, 1],\n    columns=['a', 'b', 'c']\n)\n\ns = pd.Series([3, 14], index=[0, 1])\n```\n\nWhen I try to add them, I get this:\n\n```python\ndf + s\n\n    a   b   c   0   1\n0 NaN NaN NaN NaN NaN\n1 NaN NaN NaN NaN NaN\n```\n\nHowever, I expected to get this:\n\n```python\n    a   b   c\n0   4   5   6\n1  18  19  20\n```\n\nThis problem could apply to other arithmetic operations such as subtracting, multiplying, or dividing a Series from every column in a DataFrame. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "When you add a `Series` to a `DataFrame`, pandas tries to align both by their indices. In your case, the index of the `Series` does not match the columns of the `DataFrame`, which results in `NaN` values. \n\nTo achieve the desired result, you need to ensure that the `Series` aligns with the DataFrame's indices. Here's how you can do it:\n\n1. **Align the Series with the DataFrame's index**: If you want to perform operations row-wise, the `Series` should align with the DataFrame's index. In your case, the `Series` should be treated as a vector that will be added to each row.\n\n2. **Use the `add` method with the axis parameter**: Use the `add` method (or any other arithmetic method like `sub`, `mul`, `div`) with the `axis` parameter set to `0` for row-wise operations:\n\nHere's how to achieve the desired result:\n\n```python\nimport pandas as pd\n\ndf = pd.DataFrame(\n    [[1, 2, 3], [4, 5, 6]],\n    index=[0, 1],\n    columns=['a', 'b', 'c']\n)\n\ns = pd.Series([3, 14], index=[0, 1])\n\n# Perform the addition ensuring alignment along the index (rows)\nresult = df.add(s, axis=0)\n\nprint(result)\n```\n\nThis will output:\n\n```\n    a   b   c\n0   4   5   6\n1  18  19  20\n```\n\nBy setting `axis=0`, you specify that you want to align the `Series` with the DataFrame's index (rows), which achieves the desired row-wise addition. You can use similar approaches for subtraction, multiplication, or division using `sub`, `mul`, `div` methods respectively."
    }
]