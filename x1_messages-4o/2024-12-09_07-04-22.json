[
    {
        "role": "user",
        "content": "How can I wrap long lines in Python without sacrificing indentation? For example, if I have the following function:\n\n```python\ndef fun():\n    print '{0} Here is a really long sentence with {1}'.format(3, 5)\n```\nThis goes over the 79 character recommended limit. The way I understand it, here is how to indent it:\n\n```python\ndef fun():\n    print '{0} Here is a really long \\\nsentence with {1}'.format(3, 5)\n```\nBut with this approach, the indentation of the continued line matches the indentation of the function. This looks a bit untidy. If someone was to go through my code, it would look bad to have uneven indentation because of this print statement. Is there a way to indent lines like this effectively without sacrificing code readability?"
    },
    {
        "role": "assistant",
        "content": "Certainly! In Python, there are several ways to wrap long lines without sacrificing indentation and readability. Here are a few approaches you can consider:\n\n1. **Using Parentheses:** You can use parentheses to implicitly concatenate strings and keep indentation clean:\n\n    ```python\n    def fun():\n        print ('{0} Here is a really long sentence '\n               'with {1}').format(3, 5)\n    ```\n\n    Here, the use of parentheses allows you to break the line and maintain proper indentation.\n\n2. **Using Triple Quotes:** You can use triple quotes for multiline strings, but be mindful of leading newlines and whitespaces:\n\n    ```python\n    def fun():\n        print ('''{0} Here is a really long sentence \nwith {1}''').format(3, 5)\n    ```\n\n    Note that this method may include unwanted spaces or newlines in your output, so you may need to adjust the string accordingly.\n\n3. **Using String Concatenation:** You can concatenate strings using the `+` operator:\n\n    ```python\n    def fun():\n        print ('{0} Here is a really long sentence '\n               + 'with {1}').format(3, 5)\n    ```\n\n    This approach also allows you to break the line and maintain proper indentation.\n\n4. **Using the Backslash for Line Continuation:** Although you mentioned you didn\u2019t like this approach due to indentation issues, you can still manage indentation manually:\n\n    ```python\n    def fun():\n        print '{0} Here is a really long ' \\\n              'sentence with {1}'.format(3, 5)\n    ```\n\n    By aligning the continuation line, you can keep indentation tidy, though this method is generally less preferred compared to using parentheses.\n\n5. **Using f-strings (Python 3.6+):** If you are using Python 3.6 or later, consider using f-strings for more readability:\n\n    ```python\n    def fun():\n        print (f'{3} Here is a really long sentence '\n               f'with {5}')\n    ```\n\nBy utilizing these methods, you can wrap long lines while maintaining code readability and indentation."
    }
]