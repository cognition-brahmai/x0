[
    {
        "role": "user",
        "content": "I am attempting to use more than one GPU in MATLAB with the Jacket/matlab application. The output of ginfo shows that I have two Tesla C1060 GPUs and one Quadro FX 1800 GPU. My questions are: \n1. Can I use the two Tesla GPUs at the same time (using parfor) and if so, how? \n2. How can I check the number of cores currently running/executing the program? \n3. I ran the following code and made the Quadro GPU (in use). I found that it takes less time than the Tesla, despite Tesla having 240 cores and Quadro only having 64. Could this be due to the Quadro being the display device or because it uses single precision and Tesla uses Double precision?\n\nThe code I am running is as follows:\n```matlab\nclc; clear all;close all;\naddpath ('C:/Program Files/AccelerEyes/Jacket/engine');\ni = im2double(imread('cameraman.tif'));\ni_gpu=gdouble(i);\nh=fspecial('motion',50,45);% Create predefined 2-D filter\nh_gpu=gdouble(h);\ntic;\nfor j=1:500\n    x_gpu = imfilter( i_gpu,h_gpu );\n  end\ni2 = double(x_gpu); %memory transfer \nt=toc\n figure(2), imshow(i2);\n```"
    },
    {
        "role": "assistant",
        "content": "Using multiple GPUs in MATLAB with Jacket involves some considerations and steps. Here's an outline of how you can approach each of your questions:\n\n### 1. Using Two Tesla GPUs Simultaneously\n\nMATLAB with Jacket does not directly support parallel execution across multiple GPUs in the way that modern deep learning frameworks do. However, you can use MATLAB's Parallel Computing Toolbox with `parfor` to distribute computations across workers, each of which can be assigned to a different GPU.\n\nHere's a simplified approach to using `parfor` with multiple GPUs:\n\n1. **Set up a parallel pool** using MATLAB's Parallel Computing Toolbox.\n2. **Assign each worker in the pool to a different GPU** using `gpuDevice`.\n\nExample:\n\n```matlab\n% Set up parallel pool\nparpool('local', 2); % Assuming you have 2 GPUs\n\n% Distribute work using parfor\nparfor workerIndex = 1:2\n    % Select GPU for this worker\n    gpuDevice(workerIndex);\n    \n    % Perform operations on the GPU\n    i_gpu = gdouble(i);\n    h_gpu = gdouble(h);\n    x_gpu = [];\n    for j = 1:500\n        x_gpu = imfilter(i_gpu, h_gpu);\n    end\n    i2 = double(x_gpu); % Memory transfer\nend\n\n% Cleanup\ndelete(gcp('nocreate'));\n```\n\n### 2. Checking the Number of Cores Currently Running\n\nMATLAB itself doesn't provide a direct way to check the number of GPU cores being used at any moment. However, you can check the properties of your GPU using the `gpuDevice` command:\n\n```matlab\ng = gpuDevice;\ndisp(g);\n```\n\nThis command will show you details about the GPU, including the number of multiprocessors (SMs) and cores per SM, which you can use to calculate the total number of cores.\n\n### 3. Performance Discrepancies Between Tesla and Quadro GPUs\n\nThe performance difference you observed could be due to several reasons:\n\n- **Precision**: If the Quadro is being used with single precision and your Tesla code is using double precision, this can cause a significant difference in execution speed.\n  \n- **Data Transfer Rates**: If the Quadro is the display device, it might have better memory bandwidth or lower latency for certain operations, which could offset the core count difference.\n\n- **Driver and Configuration**: Ensuring that the correct drivers and configurations are set for high-performance computing on the Tesla cards is crucial.\n\n- **Different Load**: If the Quadro is handling display tasks as well, it might have optimized paths for certain operations due to its role as the primary display device.\n\nTo properly assess, ensure that both GPUs are configured for similar precision (e.g., both using single or double precision) and compare their performance under those conditions.\n\nBy carefully managing your resources and ensuring consistency in the precision and configuration of the GPUs, you can optimize and balance the workload effectively across your available hardware."
    }
]