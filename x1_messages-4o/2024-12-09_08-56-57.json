[
    {
        "role": "user",
        "content": "How can I solve the Towers of Hanoi problem with at least 3 discs using recursion?"
    },
    {
        "role": "assistant",
        "content": "The Towers of Hanoi is a classic problem that can be solved efficiently using recursion. The problem involves moving a stack of discs from one peg to another, using a third peg as an auxiliary, following these rules:\n\n1. Only one disc can be moved at a time.\n2. A disc can only be placed on top of a larger disc or an empty peg.\n\nHere's a recursive algorithm to solve the Towers of Hanoi problem for at least 3 discs:\n\n1. **Define the Base Case:** If there is only one disc, simply move it from the source peg to the destination peg.\n\n2. **Recursive Case:** \n    - Move the top \\( n-1 \\) discs from the source peg to the auxiliary peg using the destination peg as auxiliary.\n    - Move the nth (largest) disc from the source peg to the destination peg directly.\n    - Move the \\( n-1 \\) discs from the auxiliary peg to the destination peg using the source peg as auxiliary.\n\nHere's the pseudocode for the recursive solution:\n\n```plaintext\nfunction Hanoi(n, source, destination, auxiliary):\n    if n == 1:\n        print(\"Move disc 1 from\", source, \"to\", destination)\n        return\n    Hanoi(n-1, source, auxiliary, destination)\n    print(\"Move disc\", n, \"from\", source, \"to\", destination)\n    Hanoi(n-1, auxiliary, destination, source)\n```\n\nTo solve the problem for 3 discs, you can call the function like this:\n\n```plaintext\nHanoi(3, 'A', 'C', 'B')\n```\n\nThis will output the sequence of moves needed to transfer all the discs from peg A to peg C using peg B as auxiliary. The recursive nature of the solution effectively breaks down the problem into smaller and more manageable sub-problems, ultimately providing a solution for any number of discs."
    }
]