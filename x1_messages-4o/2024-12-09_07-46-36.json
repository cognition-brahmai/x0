[
    {
        "role": "user",
        "content": "In Python, how can I check if a function is a generator function before calling it? For instance, I have two functions, one normal function 'foo' and one generator function 'bar'.\n\n```python\ndef foo():\n  return 'foo'\n\ndef bar():\n  yield 'bar'\n```\n\nI want to write a function that checks if the input function is a generator function, and if so, it will run the generator. \n\n```python\ndef run(func):\n  if is_generator_function(func):\n     gen = func()\n     gen.next()\n     #... run the generator ...\n  else:\n     func()\n```\n\nWhat would a straightforward implementation of `is_generator_function()` look like? I know I can use the `types` package to test if `gen` is a generator, but I want to check before invoking `func()`. \n\nConsider this case:\n\n```python\ndef goo():\n  if False:\n     yield\n  else:\n     return\n```\n\nAn invocation of `goo()` will return a generator. I assume the Python parser knows that the `goo()` function contains a yield statement. Is it possible to get access to that information easily?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can determine if a function is a generator function by using the `inspect` module. This module provides several useful functions to get information about live objects, including whether a function is a generator function. Specifically, you can use `inspect.isgeneratorfunction()` to check if a function is a generator function.\n\nHere's how you can implement `is_generator_function()` using the `inspect` module:\n\n```python\nimport inspect\n\ndef is_generator_function(func):\n    return inspect.isgeneratorfunction(func)\n```\n\nNow, you can use this function within your `run` function to check if the provided function is a generator function before calling it:\n\n```python\ndef run(func):\n    if is_generator_function(func):\n        gen = func()\n        try:\n            next(gen)\n            # Continue processing the generator if needed\n        except StopIteration:\n            pass\n    else:\n        func()\n\n# Example usage\ndef foo():\n    return 'foo'\n\ndef bar():\n    yield 'bar'\n\ndef goo():\n    if False:\n        yield\n    else:\n        return\n\nrun(foo)  # Calls foo\nrun(bar)  # Runs the generator bar\nrun(goo)  # goo is recognized as a generator function, but it completes immediately\n```\n\nIn this setup, `inspect.isgeneratorfunction(func)` returns `True` if `func` is a generator function, and `False` otherwise. This approach correctly identifies `goo` as a generator function, even though it doesn't actually yield anything when executed, because it contains a `yield` statement."
    }
]