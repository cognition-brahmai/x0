[
    {
        "role": "user",
        "content": "I am trying to get a list of all failed tests at the end of a pytest session, especially when I'm using the pytest-xdist plugin. Pytest provides a hook, `pytest_sessionfinish(session, exitstatus)`, that gets called at the end of the session, where I'd like to have this list. The `session` is a `_pytest.main.Session` instance and has an attribute `items`, but I can't determine if each `item` in the list has passed or failed. How can I retrieve a list of all failed tests at the end of the session? Also, when using the pytest-xdist plugin, how can I get this list in the master process? Because when I'm using this plugin, the `session` doesn't even have an `items` attribute in the master. Here's the code I'm trying:\n\n```python\ndef pytest_sessionfinish(session, exitstatus):\n    if os.environ.get(\"PYTEST_XDIST_WORKER\", \"master\") == \"master\":\n         print(hasattr(session, \"items\"))  # False\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the goal of retrieving a list of all failed tests at the end of a pytest session, especially when using the `pytest-xdist` plugin, you'll need to utilize pytest's reporting and collection mechanisms. Here's a step-by-step guide on how you can accomplish this:\n\n### Handling Local Test Execution\n\n1. **Capture Test Results Locally**: In a local (non-distributed) pytest run, you can collect test results using the `pytest_runtest_logreport` hook, which is called after each test item is executed.\n\n2. **Store Failed Tests**: Maintain a list to store failed test items based on the report's outcome.\n\nHere's an example code snippet:\n\n```python\nfailed_tests = []\n\ndef pytest_runtest_logreport(report):\n    if report.failed:\n        failed_tests.append(report.nodeid)\n\ndef pytest_sessionfinish(session, exitstatus):\n    if not os.environ.get(\"PYTEST_XDIST_WORKER\"):\n        print(\"Failed tests at the end of the session:\")\n        for test in failed_tests:\n            print(test)\n```\n\n### Handling Distributed Test Execution with pytest-xdist\n\nWhen using `pytest-xdist`, you need to account for the fact that tests are executed in parallel across multiple processes. Communication between workers and the master process can be handled using pytest hooks and the `pytest-xdist` plugin features.\n\n1. **Use `pytest_xdist` Hooks**: Use hooks like `pytest_xdist_make_scheduler` to manage how tests are scheduled across workers.\n\n2. **Collect Results on Master**: Use the `pytest_runtest_logreport` hook on each worker to send results back to the master.\n\nHere's a modified version to handle distributed execution:\n\n```python\nimport pytest\n\nfailed_tests = []\n\ndef pytest_runtest_logreport(report):\n    if report.failed:\n        # Append failed test to the list\n        failed_tests.append(report.nodeid)\n\n@pytest.hookimpl(trylast=True)\ndef pytest_sessionfinish(session, exitstatus):\n    if not os.environ.get(\"PYTEST_XDIST_WORKER\"):\n        # Only execute this on the master node\n        print(\"Failed tests at the end of the session:\")\n        for test in failed_tests:\n            print(test)\n\n# Custom hook to handle logging from workers\ndef pytest_xdist_node_collection_finished(node, ids):\n    # Send failed tests to master\n    node.slaveinput['failed_tests'] = failed_tests\n\ndef pytest_xdist_setupnodes(config, specs):\n    for spec in specs:\n        spec['failed_tests'] = []\n\ndef pytest_xdist_worker_finished(node):\n    # Collect failed tests from each worker\n    failed_tests.extend(node.slaveoutput.get('failed_tests', []))\n```\n\n### Explanation:\n- **`pytest_runtest_logreport`**: Captures the outcome of each test.\n- **`pytest_xdist_node_collection_finished`**: Gathers test results from each node.\n- **`pytest_xdist_setupnodes`**: Prepares each node for execution.\n- **`pytest_xdist_worker_finished`**: Collects results from worker nodes at the end of their execution.\n\nThis setup allows you to gather and print all failed tests at the end of a pytest session, both in local and distributed environments using `pytest-xdist`. Adjust the code as necessary to fit your specific use case and pytest version."
    }
]