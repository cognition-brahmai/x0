[
    {
        "role": "user",
        "content": "Can someone provide a complete list of atomic operations that can be used in CUDA kernels? I have searched for this information on the internet but could not find a comprehensive list."
    },
    {
        "role": "assistant",
        "content": "In CUDA, atomic operations are used to perform read-modify-write operations on shared or global memory locations in a way that prevents race conditions. Here's a list of some common atomic operations available in CUDA:\n\n1. **Atomic Add**: \n   - `int atomicAdd(int* address, int val);`\n   - `unsigned int atomicAdd(unsigned int* address, unsigned int val);`\n   - `unsigned long long int atomicAdd(unsigned long long int* address, unsigned long long int val);`\n   - `float atomicAdd(float* address, float val);`\n\n2. **Atomic Subtract**: \n   - `int atomicSub(int* address, int val);`\n   - `unsigned int atomicSub(unsigned int* address, unsigned int val);`\n\n3. **Atomic Exchange**:\n   - `int atomicExch(int* address, int val);`\n   - `unsigned int atomicExch(unsigned int* address, unsigned int val);`\n   - `unsigned long long int atomicExch(unsigned long long int* address, unsigned long long int val);`\n   - `float atomicExch(float* address, float val);`\n\n4. **Atomic Compare and Swap**:\n   - `int atomicCAS(int* address, int compare, int val);`\n   - `unsigned int atomicCAS(unsigned int* address, unsigned int compare, unsigned int val);`\n   - `unsigned long long int atomicCAS(unsigned long long int* address, unsigned long long int compare, unsigned long long int val);`\n\n5. **Atomic Minimum**:\n   - `int atomicMin(int* address, int val);`\n   - `unsigned int atomicMin(unsigned int* address, unsigned int val);`\n\n6. **Atomic Maximum**:\n   - `int atomicMax(int* address, int val);`\n   - `unsigned int atomicMax(unsigned int* address, unsigned int val);`\n\n7. **Atomic AND**:\n   - `int atomicAnd(int* address, int val);`\n   - `unsigned int atomicAnd(unsigned int* address, unsigned int val);`\n\n8. **Atomic OR**:\n   - `int atomicOr(int* address, int val);`\n   - `unsigned int atomicOr(unsigned int* address, unsigned int val);`\n\n9. **Atomic XOR**:\n   - `int atomicXor(int* address, int val);`\n   - `unsigned int atomicXor(unsigned int* address, unsigned int val);`\n\n10. **Atomic Increment**:\n    - `unsigned int atomicInc(unsigned int* address, unsigned int val);`\n\n11. **Atomic Decrement**:\n    - `unsigned int atomicDec(unsigned int* address, unsigned int val);`\n\nCUDA has expanded its atomic operations over time, and newer hardware may support additional atomic operations. Always refer to the CUDA toolkit documentation that matches your version and hardware for the most accurate and up-to-date information."
    }
]