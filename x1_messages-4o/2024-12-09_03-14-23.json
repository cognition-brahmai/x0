[
    {
        "role": "user",
        "content": "What are the main differences between NamedTuple and TypedDict in Python / mypy? It seems that NamedTuple and TypedDict are fairly similar, as suggested by some developers. However, Guido van Rossum, the creator of Python, doesn't seem to completely agree with this. Could you provide a detailed comparison of these two types, as the official documentation seems to lack this information?"
    },
    {
        "role": "assistant",
        "content": "Certainly! NamedTuple and TypedDict are both used in Python to create structured data types, but they serve different purposes and have distinct characteristics. Here's a detailed comparison of the two:\n\n### NamedTuple\n\n1. **Purpose**:\n   - NamedTuple is designed to create immutable, tuple-like data structures with named fields. It is part of the `collections` module.\n\n2. **Structure**:\n   - NamedTuples are essentially tuples with named fields. This means you can access the fields using attribute access (e.g., `nt.field`) as well as by index (e.g., `nt[0]`).\n\n3. **Immutability**:\n   - Instances of NamedTuple are immutable. This means that once an instance is created, its fields cannot be changed.\n\n4. **Memory Efficiency**:\n   - NamedTuples are more memory-efficient compared to regular classes, as they are implemented as tuples.\n\n5. **Usage**:\n   - NamedTuples are best suited for small, fixed data structures where immutability is desired. They are often used to represent simple records or data points.\n\n6. **Typing**:\n   - NamedTuple supports type annotations, which can be used with type checkers like mypy to enforce type safety.\n\n7. **Inheritance**:\n   - You can define NamedTuples with default values and even use inheritance to create more complex data structures.\n\n### TypedDict\n\n1. **Purpose**:\n   - TypedDict is introduced in Python 3.8 (via `typing` module) and is designed to define dictionary-like structures with a fixed set of keys and associated types. It is primarily used for type hinting purposes.\n\n2. **Structure**:\n   - TypedDicts are essentially dictionaries with a predefined set of keys, each associated with a specific type.\n\n3. **Mutability**:\n   - TypedDicts are mutable. This means you can change their contents after creation, similar to regular dictionaries.\n\n4. **Memory Efficiency**:\n   - TypedDicts are not as memory-efficient as NamedTuples since they are implemented as dictionaries.\n\n5. **Usage**:\n   - TypedDict is suitable for scenarios where you need a mutable, dictionary-like structure with a fixed schema. They are often used when interacting with JSON-like data or enforcing structure on dynamic data.\n\n6. **Typing**:\n   - TypedDicts are primarily used for static type checking with mypy. They allow you to define a structure that mypy can enforce at type-checking time.\n\n7. **Inheritance**:\n   - TypedDict supports inheritance, allowing you to create complex data structures by extending existing TypedDicts.\n\n### Key Differences\n\n- **Immutability vs. Mutability**: NamedTuple is immutable, while TypedDict is mutable.\n- **Access Pattern**: NamedTuple uses attribute access, whereas TypedDict uses key access.\n- **Performance**: NamedTuple is generally more memory-efficient and faster for access operations due to its tuple-based implementation.\n- **Use Case**: Use NamedTuple for fixed, immutable data records and TypedDict for mutable structures with a fixed schema.\n\nIn summary, choose NamedTuple when you need an immutable data structure with named fields, and choose TypedDict when you require a dictionary-like structure with enforced typing and mutability."
    }
]