[
    {
        "role": "user",
        "content": "How can I access an object's attribute in Python, similar to how I would do it in PHP? For example, in PHP I could declare a `User` class and create a `User` object like this:\n\n```php\nUser(object)\n    fullName = \"John Doe\"\n\n$user = new User();\n$param = 'fullName';\necho $user->$param; // return John Doe\n```\n\nAs a beginner in Python, coming from PHP, I'm having trouble doing the equivalent in Python. How can this be done?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can access an object's attribute using the `getattr` function, which allows you to dynamically access attributes by their name as a string, similar to how you would do it in PHP. Here's how you can achieve this in Python:\n\nFirst, you need to define your class and create an instance of it, similar to your PHP example:\n\n```python\nclass User:\n    def __init__(self):\n        self.full_name = \"John Doe\"\n\n# Create a User object\nuser = User()\n\n# Define the attribute name as a string\nparam = 'full_name'\n\n# Use getattr to access the attribute dynamically\nprint(getattr(user, param))  # Output: John Doe\n```\n\nIn this example:\n- The `User` class is defined with an `__init__` method that initializes the `full_name` attribute.\n- We create an instance of the `User` class named `user`.\n- The `param` variable holds the name of the attribute we want to access as a string.\n- We use `getattr(user, param)` to dynamically retrieve the value of the `full_name` attribute from the `user` object.\n\nThis approach is quite powerful and flexible, as it allows you to access attributes based on string values, which can be particularly useful in situations where attribute names are determined at runtime."
    }
]