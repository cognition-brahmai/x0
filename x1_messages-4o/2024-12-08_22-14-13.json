[
    {
        "role": "user",
        "content": "Please write a python function that takes in a string and returns a list of sentences containing the word 'frantic'. The function should use regular expressions to match sentences and handle edge cases such as abbreviations and acronyms. \nExample Input: \"I was frantic when I realized I lost my keys. My boss's frantic pace made everyone nervous.\"\nExample Output: [\"I was frantic when I realized I lost my keys.\", \"My boss's frantic pace made everyone nervous.\"]"
    },
    {
        "role": "assistant",
        "content": "To accomplish this task, we'll use the `re` module in Python to handle regular expressions. We'll write a function that splits the input text into sentences and checks each sentence for the presence of the word \"frantic\". We'll take care to handle edge cases such as abbreviations and acronyms by using a regular expression pattern that considers sentence boundaries. Here's how you can implement this:\n\n```python\nimport re\n\ndef find_sentences_with_frantic(text):\n    # Regular expression pattern to split the text into sentences\n    sentence_pattern = re.compile(r'(?<!\\w\\.\\w.)(?<![A-Z][a-z]\\.)(?<=\\.|\\?)\\s')\n    # Split the text into sentences\n    sentences = sentence_pattern.split(text)\n    \n    # List to store sentences containing the word 'frantic'\n    frantic_sentences = []\n    \n    # Iterate through each sentence and check for the word 'frantic'\n    for sentence in sentences:\n        # Use word boundary \\b to ensure 'frantic' is matched as a whole word\n        if re.search(r'\\bfrantic\\b', sentence, re.IGNORECASE):\n            frantic_sentences.append(sentence.strip())\n    \n    return frantic_sentences\n\n# Example usage\ntext = \"I was frantic when I realized I lost my keys. My boss's frantic pace made everyone nervous.\"\noutput = find_sentences_with_frantic(text)\nprint(output)\n```\n\n### Explanation:\n\n1. **Sentence Splitting Pattern**: The regular expression pattern used to split sentences is designed to handle typical sentence boundaries while avoiding splitting after abbreviations and acronyms. It checks for periods or question marks followed by a space, but not when the periods are part of common abbreviation patterns.\n\n2. **Word Boundary**: The `\\b` in the regular expression `\\bfrantic\\b` ensures that we're matching \"frantic\" as a whole word, avoiding partial matches with other words.\n\n3. **Case Insensitivity**: The `re.IGNORECASE` flag is used to make the search case-insensitive, allowing it to match \"Frantic\", \"FRANTIC\", etc.\n\n4. **Stripping Whitespace**: Each matched sentence is stripped of leading and trailing whitespace before adding it to the result list.\n\nThis function should effectively handle the splitting and matching of sentences containing the word \"frantic\"."
    }
]