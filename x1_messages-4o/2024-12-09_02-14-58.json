[
    {
        "role": "user",
        "content": "How can I call a parent class's method from a child class in Python? In Perl and Java, there is a keyword for this (super), however, in Python, it appears that I have to name the parent class explicitly from the child. Is this a limitation in Python or is there a way to achieve this without making it hard to create deep hierarchies?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can indeed call a parent class's method from a child class using the `super()` function, which provides a way to access inherited methods that is often more flexible than naming the parent class directly. This approach makes it easier to work with deep hierarchies and supports cooperative multiple inheritance.\n\nHere's a basic example of how you can use `super()` to call a parent class's method:\n\n```python\nclass Parent:\n    def my_method(self):\n        print(\"Parent method\")\n\nclass Child(Parent):\n    def my_method(self):\n        # Call the parent class's method\n        super().my_method()\n        print(\"Child method\")\n\n# Usage\nchild_instance = Child()\nchild_instance.my_method()\n```\n\nOutput:\n```\nParent method\nChild method\n```\n\nIn this example, `super().my_method()` calls the `my_method` of the `Parent` class from the `Child` class. This usage of `super()` is particularly helpful in scenarios where you have multiple inheritance, as it allows Python to properly resolve the method calls according to the method resolution order (MRO).\n\nUsing `super()` is generally recommended over directly referencing the parent class because it makes your code more maintainable and extensible, especially in complex class hierarchies."
    }
]