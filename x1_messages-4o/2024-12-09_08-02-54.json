[
    {
        "role": "user",
        "content": "How can I remove certain HTML tags from a Python string while allowing others? I have a string that contains both text and HTML, and I wish to remove or disable some HTML tags, such as <script>, while allowing other tags so that I can render it on a web page safely. Given a list of allowed tags, how can I process the string to remove any tags that are not included in this list?"
    },
    {
        "role": "assistant",
        "content": "To selectively remove certain HTML tags from a Python string while allowing others, you can use libraries like `BeautifulSoup` from the `bs4` package. This library makes it easy to parse and manipulate HTML. Here's a step-by-step guide on how to achieve this:\n\n1. **Install BeautifulSoup**: If you haven't already, you can install BeautifulSoup using pip:\n\n   ```bash\n   pip install beautifulsoup4\n   ```\n\n2. **Create a function to filter tags**: Create a function that will process the HTML string, removing tags that are not in your allowed list.\n\nHere's a sample implementation:\n\n```python\nfrom bs4 import BeautifulSoup\n\ndef remove_unwanted_tags(html_string, allowed_tags):\n    # Parse the HTML\n    soup = BeautifulSoup(html_string, \"html.parser\")\n\n    # Iterate over all tags in the document\n    for tag in soup.find_all(True):  # True finds all tags\n        if tag.name not in allowed_tags:\n            tag.decompose()  # Remove the tag from the document\n\n    # Return the modified HTML string\n    return str(soup)\n\n# Example usage\nhtml_string = \"\"\"\n<html>\n<head><title>Test Page</title></head>\n<body>\n    <h1>Welcome to the Test Page</h1>\n    <p>This is a <strong>test</strong> paragraph.</p>\n    <script>alert('This should be removed');</script>\n</body>\n</html>\n\"\"\"\n\nallowed_tags = ['html', 'head', 'title', 'body', 'h1', 'p', 'strong']\n\nclean_html = remove_unwanted_tags(html_string, allowed_tags)\nprint(clean_html)\n```\n\n### Explanation:\n\n- **BeautifulSoup**: This library is used to parse the HTML content and provides methods to navigate and modify the parse tree.\n- **find_all(True)**: This finds all tags in the parsed HTML.\n- **decompose()**: This method removes the tag from the document, including its contents.\n- **allowed_tags**: A list of tags you want to keep. Any tag not in this list will be removed.\n\nThis approach ensures that only the specified tags are retained, making the HTML safe for rendering by removing potentially harmful tags like `<script>`. Adjust the `allowed_tags` list according to your requirements."
    }
]