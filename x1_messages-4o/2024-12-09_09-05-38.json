[
    {
        "role": "user",
        "content": "Can you provide an example of using a Closure code to build a simple calculator in Swift?"
    },
    {
        "role": "assistant",
        "content": "Certainly! In Swift, closures are a powerful feature that allow you to encapsulate functionality and use it as a variable or parameter. Here's an example of using closures to build a simple calculator that can perform basic arithmetic operations like addition, subtraction, multiplication, and division:\n\n```swift\nimport Foundation\n\n// Define the type for our calculator closure\ntypealias CalculatorOperation = (Double, Double) -> Double\n\n// Define the operations using closures\nlet add: CalculatorOperation = { (a, b) in\n    return a + b\n}\n\nlet subtract: CalculatorOperation = { (a, b) in\n    return a - b\n}\n\nlet multiply: CalculatorOperation = { (a, b) in\n    return a * b\n}\n\nlet divide: CalculatorOperation = { (a, b) in\n    return a / b\n}\n\n// Function to perform a calculation\nfunc calculate(_ a: Double, _ b: Double, using operation: CalculatorOperation) -> Double {\n    return operation(a, b)\n}\n\n// Example usage\nlet number1 = 10.0\nlet number2 = 5.0\n\nlet sum = calculate(number1, number2, using: add)\nprint(\"Sum: \\(sum)\")  // Output: Sum: 15.0\n\nlet difference = calculate(number1, number2, using: subtract)\nprint(\"Difference: \\(difference)\")  // Output: Difference: 5.0\n\nlet product = calculate(number1, number2, using: multiply)\nprint(\"Product: \\(product)\")  // Output: Product: 50.0\n\nlet quotient = calculate(number1, number2, using: divide)\nprint(\"Quotient: \\(quotient)\")  // Output: Quotient: 2.0\n```\n\nIn this example, we define a type alias `CalculatorOperation` for closures that take two `Double` values and return a `Double`. We then define four closures for the basic operations: addition, subtraction, multiplication, and division. The `calculate` function takes two numbers and a closure representing the operation to perform, and then returns the result. This way, you can easily extend the calculator by adding more operations using the same pattern."
    }
]