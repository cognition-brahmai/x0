[
    {
        "role": "user",
        "content": "How can I enable Python, using MySQLdb and Python 2.7, to connect to a MySQL server through an SSH tunnel using SSH key pairs, rather than a normal connection? I would like the SSH tunnel to be opened by Python, and the SSH tunnel host and MySQL server are the same machine. The code I'm currently using to connect is as follows:\n\n```python\nimport MySQLdb\ndb = MySQLdb.connect(host=\"sql.domain.com\",\n     user=\"dev\", \n      passwd=\"*******\", \n      db=\"appdb\")\n```"
    },
    {
        "role": "assistant",
        "content": "To connect to a MySQL server through an SSH tunnel using SSH key pairs in Python, you can use the `sshtunnel` library, which facilitates the establishment of an SSH tunnel. Below is an example of how you can modify your code to achieve this:\n\n1. First, install the `sshtunnel` library if you haven't already:\n\n   ```bash\n   pip install sshtunnel\n   ```\n\n2. Modify your Python script as follows:\n\n   ```python\n   import MySQLdb\n   from sshtunnel import SSHTunnelForwarder\n\n   # SSH tunnel configuration\n   ssh_host = 'sql.domain.com'\n   ssh_user = 'your_ssh_username'\n   ssh_private_key = '/path/to/your/private/key'  # Path to your SSH private key\n\n   # MySQL configuration\n   mysql_host = '127.0.0.1'  # Localhost since we connect through the tunnel\n   mysql_user = 'dev'\n   mysql_password = '*******'\n   mysql_db = 'appdb'\n   mysql_port = 3306\n\n   # Set up the SSH tunnel\n   with SSHTunnelForwarder(\n       (ssh_host, 22),\n       ssh_username=ssh_user,\n       ssh_pkey=ssh_private_key,\n       remote_bind_address=(mysql_host, mysql_port)\n   ) as tunnel:\n       # Connect to MySQL through the tunnel\n       connection = MySQLdb.connect(\n           host='127.0.0.1',\n           port=tunnel.local_bind_port,\n           user=mysql_user,\n           passwd=mysql_password,\n           db=mysql_db\n       )\n\n       # Perform database operations\n       try:\n           cursor = connection.cursor()\n           cursor.execute(\"SELECT DATABASE();\")\n           result = cursor.fetchone()\n           print(\"Connected to database:\", result)\n\n       finally:\n           # Close the connection\n           connection.close()\n   ```\n\n### Explanation:\n\n- **SSHTunnelForwarder**: This class sets up an SSH tunnel. You need to provide the hostname and port of the SSH server (your MySQL server in this case), your SSH username, and the path to your SSH private key.\n\n- **remote_bind_address**: The address and port on the remote server you want to connect to (the MySQL server in this case).\n\n- **local_bind_port**: This is automatically allocated to forward the connection from your local address (usually `127.0.0.1`) to the remote MySQL server.\n\n- **MySQLdb.connect**: Connects to MySQL through the SSH tunnel. Note that the `host` is set to `127.0.0.1` and the `port` is `tunnel.local_bind_port`.\n\nThis setup allows you to securely connect to your MySQL server using SSH key-based authentication and an SSH tunnel."
    }
]