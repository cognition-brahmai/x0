[
    {
        "role": "user",
        "content": "I am working with a complex, nested JSON object in python and I want to extract only the keys from the first level. For instance, given the JSON object:\n\n```python\n{\n    \"1\": \"a\", \n    \"3\": \"b\", \n    \"8\": {\n        \"12\": \"c\", \n        \"25\": \"d\"\n    }\n}\n```\n\nI would like to retrieve the keys \"1\", \"3\", and \"8\". I tried using the code snippet below but it returned all keys including those from nested objects (\"12\" and \"25\"), which I do not want. How can I achieve this?\n\n```python\nfor key, value in data.iteritems():\n    print key, value\n```"
    },
    {
        "role": "assistant",
        "content": "To extract only the keys from the first level of a nested JSON object in Python, you can utilize the `keys()` method or simply iterate over the dictionary to get the keys. Here's how you can achieve this:\n\n```python\ndata = {\n    \"1\": \"a\", \n    \"3\": \"b\", \n    \"8\": {\n        \"12\": \"c\", \n        \"25\": \"d\"\n    }\n}\n\n# Using the keys() method\nfirst_level_keys = data.keys()\n\n# Printing the keys\nfor key in first_level_keys:\n    print(key)\n```\n\nThis will output:\n\n```\n1\n3\n8\n```\n\nIf you're using Python 3, please note that `iteritems()` is not available, and you should use `items()` instead. However, in this case, since you only need the keys, `keys()` or direct iteration over the dictionary works fine."
    }
]