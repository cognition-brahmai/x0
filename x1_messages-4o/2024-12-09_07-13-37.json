[
    {
        "role": "user",
        "content": "What is the best way to parse out blocks of text contained in matching brackets in Python? For example, given a string like \"{ { a } { b } { { { c } } } }\", I'd like to parse it such that it initially returns [ \"{ a } { b } { { { c } } }\" ]. Then, if I input this result, it should return [ \"a\", \"b\", \"{ { c } }\" ]. This should subsequently return [ \"{ c }\" ], then [ \"c\" ], and finally, an empty list."
    },
    {
        "role": "assistant",
        "content": "To achieve the desired parsing of blocks of text contained in matching brackets, you can use a recursive approach combined with regular expressions to match the innermost brackets first. Here's a Python function that performs this task:\n\n```python\nimport re\n\ndef parse_brackets(s):\n    # This regex matches the innermost blocks enclosed in braces\n    regex = re.compile(r'\\{([^{}]*)\\}')\n    \n    # Find all matches of the innermost blocks\n    matches = regex.findall(s)\n    \n    # If there are matches, return them as a list\n    if matches:\n        return matches\n    \n    # If no matches are found, it means we have reached the deepest level\n    return []\n\ndef parse_recursive(s):\n    result = []\n    while s:\n        parsed = parse_brackets(s)\n        if parsed:\n            result.append(parsed)\n            # Create a new string without the matched innermost blocks\n            for p in parsed:\n                s = s.replace(f'{{{p}}}', '', 1)\n        else:\n            break\n    return result\n\n# Example usage\ninitial_string = \"{ { a } { b } { { { c } } } }\"\nresult = parse_recursive(initial_string)\n\nfor level in result:\n    print(level)\n```\n\n### Explanation:\n\n1. **Regex Matching**: The regular expression `\\{([^{}]*)\\}` is used to match the innermost content within a pair of braces `{}`. It captures anything inside the braces that doesn't contain another pair of braces.\n\n2. **Recursive Parsing**: The `parse_recursive` function repeatedly applies the `parse_brackets` function to parse the string at each level of nesting. It continues until no more innermost blocks can be found.\n\n3. **Output**: The function stores each level of parsed blocks into a list called `result`, effectively unwrapping the nested structure layer by layer.\n\nRunning the provided code will sequentially output the parsed levels of the initial input string."
    }
]