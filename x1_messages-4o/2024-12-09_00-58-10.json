[
    {
        "role": "user",
        "content": "I'm using Python's logging module and I'm finding that lines are being printed multiple times. Here is my code:\n\n```python\nimport logging\nclass A(object):\n    def __init__(self):\n        self._l = self._get_logger()\n\n    def _get_logger(self):\n        loglevel = logging.INFO\n        l = logging.getLogger(__name__)\n        l.setLevel(logging.INFO)\n        h = logging.StreamHandler()\n        f = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n        h.setFormatter(f)\n        l.addHandler(h)\n        l.setLevel(loglevel)\n        return l  \n\n    def p(self, msg):\n        self._l.info(msg)\n\nfor msg in [\"hey\", \"there\"]:\n    a = A()\n    a.p(msg)\n```\nThe output I get is as follows:\n\n```\n2013-07-19 17:42:02,657 INFO hey\n2013-07-19 17:42:02,657 INFO there\n2013-07-19 17:42:02,657 INFO there\n```\n\nThe word \"there\" is being printed twice. If I add another object of class A inside the loop and print a message, it gets printed thrice. According to the documentation, logging.getLogger() should always return the same instance of the logger if the name of the logger matches. In this case, the name does match. Why is it not returning the same logger instance? If it is doing so, why is the message getting printed multiple times?"
    },
    {
        "role": "assistant",
        "content": "The issue you're experiencing arises from the fact that each time you instantiate an object of class `A`, you are adding a new `StreamHandler` to the same logger instance. Since `logging.getLogger(__name__)` returns the same logger instance each time, multiple handlers are being added to it. Consequently, each log message gets processed by all the handlers, resulting in duplicate log outputs.\n\nTo resolve this issue, you should check if the logger already has handlers before adding a new one. Here is how you can modify your `_get_logger` method to prevent adding multiple handlers:\n\n```python\ndef _get_logger(self):\n    loglevel = logging.INFO\n    l = logging.getLogger(__name__)\n    l.setLevel(loglevel)\n    if not l.handlers:  # Check if the logger already has handlers\n        h = logging.StreamHandler()\n        f = logging.Formatter('%(asctime)s %(levelname)s %(message)s')\n        h.setFormatter(f)\n        l.addHandler(h)\n    return l\n```\n\nBy adding the check `if not l.handlers:`, you ensure that a new `StreamHandler` is only added if the logger doesn't already have one. This will prevent duplicate log entries when you create multiple instances of class `A`."
    }
]