[
    {
        "role": "user",
        "content": "I'm currently working with a Python script named `agent.py` which uses built-in modules and also imports a number of custom modules from the same directory. The code for importing looks like this: `import checks`, where `checks.py` is located in the same directory as `agent.py`. The directory structure is as follows:\n\n```\nagent/agent.py\nagent/checks.py\n```\n\nWhen the current working directory is `agent/`, everything works fine. However, if I call `agent.py` from any other directory, it gives an error as it is unable to import `checks.py`. How can I ensure that the custom modules can be imported regardless of where the `agent.py` is called from? For example, calling the script like this: `python /home/bob/scripts/agent/agent.py`."
    },
    {
        "role": "assistant",
        "content": "To ensure that your custom modules can be imported regardless of the directory from which you run your script, you can modify the `sys.path` to include the directory where your `agent.py` and `checks.py` are located. This way, Python knows where to look for the modules. Here's how you can do it:\n\n1. Modify your `agent.py` to dynamically add the directory of the script to the `sys.path`. You can do this at the beginning of your script:\n\n```python\nimport os\nimport sys\n\n# Get the directory where the script is located\nscript_dir = os.path.dirname(os.path.abspath(__file__))\n\n# Add the script directory to the system path\nsys.path.insert(0, script_dir)\n\nimport checks  # Now you can import custom modules\n```\n\nBy inserting `script_dir` at the beginning of `sys.path`, you ensure that Python looks in the directory containing `agent.py` first when trying to import modules.\n\n2. Alternatively, you can use a Python package structure and use relative imports. This requires a slight reorganization of your directory structure and the addition of an `__init__.py` file to make it a package:\n\n```\nagent/\n    __init__.py\n    agent.py\n    checks.py\n```\n\nWith this setup, you can use relative imports in `agent.py`:\n\n```python\nfrom . import checks  # Import checks as a relative import\n```\n\n3. If you prefer not to modify `sys.path` or use relative imports, you can run your script using the `PYTHONPATH` environment variable. This tells Python where to look for modules:\n\n```bash\nPYTHONPATH=/home/bob/scripts/agent python /home/bob/scripts/agent/agent.py\n```\n\nThis command temporarily adds the directory to `PYTHONPATH` for the execution of the script.\n\nChoose the method that best fits your requirements and workflow."
    }
]