[
    {
        "role": "user",
        "content": "I am trying to build a form in Django with an input field for email and two submit buttons for subscribing and unsubscribing from a newsletter. Here is the form:\n\n```html\n<form action=\"\" method=\"post\">\n{{ form_newsletter }}\n<input type=\"submit\" name=\"newsletter_sub\" value=\"Subscribe\" />\n<input type=\"submit\" name=\"newsletter_unsub\" value=\"Unsubscribe\" />\n</form>\n```\nAnd this is my class form:\n```python\nclass NewsletterForm(forms.ModelForm):\n    class Meta:\n        model = Newsletter\n        fields = ('email',)\n```\nI am trying to write my own clean_email method and I need to determine which button was used to submit the form. However, the values of the submit buttons aren't present in the `self.cleaned_data` dictionary. How can I get the values of the buttons in a different way?"
    },
    {
        "role": "assistant",
        "content": "To determine which submit button was clicked in your Django form, you can leverage the `request.POST` dictionary directly in your view, as it contains all the data submitted with the form, including the values of the submit buttons.\n\nHere's how you can handle it in your view:\n\n1. First, ensure your form is initialized properly in your view and handle the request method:\n\n```python\nfrom django.shortcuts import render, redirect\nfrom .forms import NewsletterForm\n\ndef newsletter_view(request):\n    if request.method == 'POST':\n        form = NewsletterForm(request.POST)\n        if form.is_valid():\n            if 'newsletter_sub' in request.POST:\n                # Handle subscription logic\n                # For example, save the form data or subscribe the user\n                pass\n            elif 'newsletter_unsub' in request.POST:\n                # Handle unsubscription logic\n                # For example, remove the user from the subscription list\n                pass\n            return redirect('success_url')  # Redirect to a success page\n\n    else:\n        form = NewsletterForm()\n\n    return render(request, 'your_template.html', {'form': form})\n```\n\n2. In this example, when the form is submitted, you first check if the form is valid. Then, you determine which submit button was clicked by checking for its presence in `request.POST`.\n\n3. Based on which button was clicked, you can implement your logic for subscribing or unsubscribing users.\n\nRemember to replace `'success_url'` with your actual success URL and `'your_template.html'` with the path to your template. Additionally, fill in the logic for subscribing and unsubscribing as per your application's requirements."
    }
]