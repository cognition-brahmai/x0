[
    {
        "role": "user",
        "content": "I'm a beginner with Python and I'm trying to extend the functionality of my script by calling different functions based on the arguments provided when the script is run. Here is what I currently have:\n\n```python\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--showtop20\", help=\"list top 20 by app\", action=\"store_true\")\nparser.add_argument(\"--listapps\", help=\"list all available apps\", action=\"store_true\")\nargs = parser.parse_args()\n```\n\nI also have these two functions:\n\n```python\ndef showtop20():\n    .....\n\ndef listapps():\n....\n```\n\nHow can I call only the function that corresponds to the argument given when the script is run? I don't want to use:\n\n```python\nif args.showtop20:\n   #code here\n\nif args.listapps:\n   #code here\n```\n\nBecause I want to move the different functions to a module later on, keeping the main executable file clean and tidy. Is there a way to do this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can achieve this by using a dictionary to map the command-line arguments to the corresponding functions. This approach allows you to call the appropriate function based on the arguments provided, keeping your main executable file clean. Here's how you can do it:\n\n```python\nimport argparse\n\n# Define your functions\ndef showtop20():\n    print(\"Showing top 20...\")\n\ndef listapps():\n    print(\"Listing all available apps...\")\n\n# Create a dictionary to map argument names to functions\nfunction_map = {\n    'showtop20': showtop20,\n    'listapps': listapps\n}\n\n# Set up argument parsing\nparser = argparse.ArgumentParser()\nparser.add_argument(\"--showtop20\", help=\"list top 20 by app\", action=\"store_true\")\nparser.add_argument(\"--listapps\", help=\"list all available apps\", action=\"store_true\")\nargs = parser.parse_args()\n\n# Loop through the function_map and call the corresponding function if the argument is present\nfor arg_name, func in function_map.items():\n    if getattr(args, arg_name):\n        func()\n```\n\n### Explanation:\n\n1. **Function Mapping**: A dictionary `function_map` is created to map argument names (`'showtop20'`, `'listapps'`) to their corresponding functions (`showtop20`, `listapps`).\n\n2. **Argument Parsing**: You parse the command-line arguments using `argparse`.\n\n3. **Function Execution**: Iterate over the `function_map` dictionary. For each argument name and its corresponding function, check if the argument is present. If it is, call the function.\n\nThis structure keeps your main script simple and allows you to easily extend it by adding new functions and arguments. When you move your functions to a module, you can import them and update the `function_map` accordingly."
    }
]