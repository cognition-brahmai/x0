[
    {
        "role": "user",
        "content": "How can I send mail with TO, CC and BCC using Python's smtplib for populating a few hundred email boxes with various messages for testing purposes? It seems like smtplib does not support CC-ing and BCC-ing while sending emails. I am looking for suggestions on how to send messages with CC or BCC from a python script, within my testing environment."
    },
    {
        "role": "assistant",
        "content": "Python's `smtplib` can indeed be used to send emails with TO, CC, and BCC fields, although it might not be immediately obvious how to implement CC and BCC. The `smtplib` library itself sends emails to all addresses provided, but the trick is in how you construct the email headers.\n\nHere's a basic example of how you can send an email using `smtplib` with TO, CC, and BCC:\n\n```python\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\ndef send_email(subject, body, to_addrs, cc_addrs=None, bcc_addrs=None):\n    from_addr = 'your_email@example.com'\n    password = 'your_password'\n\n    # Create the email headers\n    msg = MIMEMultipart()\n    msg['From'] = from_addr\n    msg['To'] = ', '.join(to_addrs)\n    msg['Subject'] = subject\n    if cc_addrs:\n        msg['Cc'] = ', '.join(cc_addrs)\n\n    # Attach the email body\n    msg.attach(MIMEText(body, 'plain'))\n\n    # Combine all recipients (TO, CC, BCC) for sending\n    all_recipients = to_addrs + (cc_addrs if cc_addrs else []) + (bcc_addrs if bcc_addrs else [])\n\n    # Connect to the SMTP server\n    server = smtplib.SMTP('smtp.example.com', 587)\n    server.starttls()\n    server.login(from_addr, password)\n\n    # Send the email\n    server.sendmail(from_addr, all_recipients, msg.as_string())\n    server.quit()\n\n# Example usage\nto = ['recipient1@example.com']\ncc = ['recipient2@example.com']\nbcc = ['recipient3@example.com']\nsubject = 'Test Email'\nbody = 'This is a test email sent from a Python script.'\n\nsend_email(subject, body, to, cc, bcc)\n```\n\n### Key Points:\n\n1. **Headers**: The `To` and `Cc` fields are set in the email headers. They are visible to the recipients.\n\n2. **BCC**: The BCC recipients are not included in the email headers because you don't want them to be visible to other recipients. However, they should be included in the list of recipients when calling `sendmail`.\n\n3. **Authentication**: Make sure to replace `your_email@example.com`, `your_password`, and `smtp.example.com` with your actual email credentials and SMTP server details.\n\n4. **Environment**: If you're testing, consider using a test SMTP server or a service like Mailtrap to safely capture and inspect emails.\n\n5. **Security**: Never hard-code sensitive information like passwords in your scripts. Use environment variables or configuration files with appropriate permissions.\n\nUsing this approach, you can send emails with TO, CC, and BCC fields using `smtplib` in Python."
    }
]