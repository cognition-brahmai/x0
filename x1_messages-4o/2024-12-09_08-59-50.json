[
    {
        "role": "user",
        "content": "What is the code in Python to pad a matrix to a given size?"
    },
    {
        "role": "assistant",
        "content": "Padding a matrix in Python can be done using various methods, depending on the specific requirements and libraries available. One common approach is to use the NumPy library, which provides efficient and straightforward operations for matrix manipulations. Here's an example of how you can pad a matrix to a given size using NumPy:\n\n```python\nimport numpy as np\n\ndef pad_matrix(matrix, target_rows, target_cols, pad_value=0):\n    \"\"\"\n    Pads the given matrix to the target size with the specified pad value.\n\n    Parameters:\n    - matrix: The original matrix (2D list or NumPy array).\n    - target_rows: The number of rows for the padded matrix.\n    - target_cols: The number of columns for the padded matrix.\n    - pad_value: The value to use for padding.\n\n    Returns:\n    - A new matrix padded to the target size.\n    \"\"\"\n    original_rows, original_cols = matrix.shape\n    padded_matrix = np.full((target_rows, target_cols), pad_value)\n\n    # Copy the original matrix into the padded matrix\n    padded_matrix[:original_rows, :original_cols] = matrix\n\n    return padded_matrix\n\n# Example usage\noriginal_matrix = np.array([[1, 2], [3, 4]])\ntarget_rows = 4\ntarget_cols = 5\npad_value = 0\n\npadded_matrix = pad_matrix(original_matrix, target_rows, target_cols, pad_value)\nprint(padded_matrix)\n```\n\nIn this code:\n\n- We define a function `pad_matrix` that takes the original matrix, the target dimensions (`target_rows` and `target_cols`), and an optional `pad_value`.\n- We create a new matrix filled with the `pad_value` and of the desired target size using `np.full`.\n- We then copy the original matrix into the newly created padded matrix.\n- Finally, we return the padded matrix.\n\nYou can adjust the `pad_value` to use whatever value you need for padding. The above example pads the matrix with zeros by default."
    }
]