[
    {
        "role": "user",
        "content": "What is an optimized C++ function that can be used to extract only the unique characters from a given input string?"
    },
    {
        "role": "assistant",
        "content": "To extract unique characters from a given input string in C++, you can utilize the `unordered_set` from the C++ Standard Library, which provides efficient insertions and lookups. Here's an optimized function to achieve this:\n\n```cpp\n#include <iostream>\n#include <unordered_set>\n#include <string>\n\nstd::string extractUniqueCharacters(const std::string& input) {\n    std::unordered_set<char> uniqueChars;\n    std::string result;\n\n    for (char c : input) {\n        // If the character is not already in the set, insert it and add to result\n        if (uniqueChars.insert(c).second) {\n            result += c;\n        }\n    }\n\n    return result;\n}\n\nint main() {\n    std::string input = \"abracadabra\";\n    std::string uniqueChars = extractUniqueCharacters(input);\n    std::cout << \"Unique characters: \" << uniqueChars << std::endl;\n    return 0;\n}\n```\n\n### Explanation:\n- **`unordered_set`:** This data structure is used to track characters that have already been encountered. It provides average O(1) time complexity for insert and lookup operations.\n- **Loop through the string:** For each character in the string, the `insert` method of `unordered_set` attempts to insert the character.\n- **Check insertion success:** The `insert` method returns a pair, where the second element is a boolean that is `true` if the insertion took place, meaning the character was not already in the set.\n- **Build the result string:** Characters are appended to the result string only if they are inserted successfully into the set, ensuring each character appears only once in the result.\n\nThis function efficiently extracts unique characters while maintaining their original order of appearance in the input string."
    }
]