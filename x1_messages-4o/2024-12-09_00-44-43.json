[
    {
        "role": "user",
        "content": "I have a Python program that uses a virtual environment created using the `mkvirtualenv` function of virtualenvwrapper, with several required libraries listed in a requirements.txt file. I'm trying to add a `bin/run-app` executable shell script that switches to the virtualenv before running the program. The script is as follows:\n\n```bash\n#!/bin/bash\n# cd into the project directory\nworkon \"$(cat .venv)\"\npython main.py\n```\n\nA file `.venv` contains the virtualenv name, but when I run this script, I receive a `workon: command not found` error. I have the virtualenvwrapper.sh sourced in my bashrc, but it doesn't seem to be available in this shell script. How can I access the virtualenvwrapper functions in this script, or is there a better way to launch my Python tools, each with its own virtualenv?"
    },
    {
        "role": "assistant",
        "content": "The `workon` command is part of the `virtualenvwrapper` package, and it relies on the `virtualenvwrapper.sh` script being sourced in the shell session. When you run a shell script, it runs in a new, non-interactive shell session, which doesn't automatically source your `.bashrc` or any other shell startup files.\n\nTo make your `workon` command available in the script, you need to source `virtualenvwrapper.sh` within the script itself. Here\u2019s how you can modify your `bin/run-app` script to achieve that:\n\n```bash\n#!/bin/bash\n\n# Source the virtualenvwrapper.sh script\n# Replace '/path/to/virtualenvwrapper.sh' with the actual path to the script on your system\nsource /path/to/virtualenvwrapper.sh\n\n# Activate the virtual environment by reading the virtualenv name from .venv\nworkon \"$(cat .venv)\"\n\n# Run your Python application\npython main.py\n```\n\n### Steps to implement:\n\n1. **Locate `virtualenvwrapper.sh`:** You need to find where `virtualenvwrapper.sh` is located on your system. It\u2019s usually somewhere in `/usr/local/bin/` or `/usr/local/share/virtualenvwrapper/`.\n\n2. **Update the script:** Replace `/path/to/virtualenvwrapper.sh` in the script with the actual path you found.\n\n3. **Make the script executable:** Ensure your script has executable permissions. You can set this with:\n   ```bash\n   chmod +x bin/run-app\n   ```\n\n4. **Run the Script:** Now you should be able to run your script without encountering the `workon: command not found` error.\n\nThis approach ensures that the `workon` command and other virtualenvwrapper functions are available in the script's execution environment. Alternatively, you can manually activate the virtual environment by sourcing its activation script directly:\n\n```bash\n#!/bin/bash\n\n# Read the virtual environment name from .venv\nVENV_NAME=$(cat .venv)\n\n# Activate the virtual environment\nsource ~/.virtualenvs/$VENV_NAME/bin/activate\n\n# Run your Python application\npython main.py\n```\n\nThis method does not require virtualenvwrapper, assuming you know the directory where your virtual environments are stored (`~/.virtualenvs/` is the default location used by virtualenvwrapper). Adjust the path as necessary based on your setup."
    }
]