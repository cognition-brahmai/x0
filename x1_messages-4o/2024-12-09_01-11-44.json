[
    {
        "role": "user",
        "content": "How can I iterate over a timespan in Python, moving in increments of days, hours, weeks, or months? I need a function similar to the following format:\n\n```python\nfor date in foo(from_date, to_date, delta=HOURS):\n    print date\n```\nHere, 'foo' is a function, returning an iterator. I've investigated the calendar module, but it only seems to work for one specific year or month, not between arbitrary dates."
    },
    {
        "role": "assistant",
        "content": "To iterate over a timespan in Python with custom increments like days, hours, weeks, or months, you can use the `datetime` and `timedelta` classes for days, hours, and weeks. For months, you'll need a bit more logic since months have varying lengths. Here's a function that can handle these requirements:\n\n```python\nfrom datetime import datetime, timedelta\n\ndef date_range(start_date, end_date, delta):\n    current_date = start_date\n    while current_date < end_date:\n        yield current_date\n        current_date += delta\n\ndef foo(from_date, to_date, increment_type='days', increment_value=1):\n    if increment_type == 'days':\n        delta = timedelta(days=increment_value)\n    elif increment_type == 'hours':\n        delta = timedelta(hours=increment_value)\n    elif increment_type == 'weeks':\n        delta = timedelta(weeks=increment_value)\n    elif increment_type == 'months':\n        # For months, we need custom logic\n        current_date = from_date\n        while current_date < to_date:\n            yield current_date\n            # Calculate the next month\n            month = current_date.month - 1 + increment_value\n            year = current_date.year + month // 12\n            month = month % 12 + 1\n            day = min(current_date.day, [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1])\n            current_date = current_date.replace(year=year, month=month, day=day)\n        return\n    else:\n        raise ValueError(\"Invalid increment_type. Choose from 'days', 'hours', 'weeks', 'months'.\")\n    \n    yield from date_range(from_date, to_date, delta)\n\n# Example usage:\nfrom_date = datetime(2023, 1, 1)\nto_date = datetime(2023, 2, 1)\n\nfor date in foo(from_date, to_date, increment_type='days', increment_value=1):\n    print(date)\n\nfor date in foo(from_date, to_date, increment_type='hours', increment_value=12):\n    print(date)\n\nfor date in foo(from_date, to_date, increment_type='months', increment_value=1):\n    print(date)\n```\n\n### Explanation:\n- **`date_range` function**: A generator that yields dates from `start_date` to `end_date` with a specified `delta`.\n- **`foo` function**: Determines the type of increment and sets the appropriate `timedelta`. For months, it manually calculates the next month while handling year transitions and varying month lengths.\n- **Usage**: Provide `from_date`, `to_date`, and specify `increment_type` (`'days'`, `'hours'`, `'weeks'`, or `'months'`) and `increment_value`.\n\nThis setup allows you to easily iterate over a range of dates with custom increments."
    }
]