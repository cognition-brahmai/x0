[
    {
        "role": "user",
        "content": "How to generate a sequence of prime numbers up to a given number using Sieve of Eratosthenes algorithm? Provide the implementation of this algorithm in [C++ code].\nFor example, if the given number is 10, the output should be: 2 3 5 7."
    },
    {
        "role": "assistant",
        "content": "The Sieve of Eratosthenes is an efficient algorithm to generate all prime numbers up to a given number. It works by iteratively marking the multiples of each prime number starting from 2. Here's how you can implement the Sieve of Eratosthenes in C++:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nvoid sieveOfEratosthenes(int n) {\n    // Create a boolean vector and initialize all entries as true.\n    // A value in prime[i] will finally be false if i is Not a prime, true if i is a prime.\n    std::vector<bool> prime(n + 1, true);\n\n    for (int p = 2; p * p <= n; ++p) {\n        // If prime[p] is not changed, then it is a prime\n        if (prime[p] == true) {\n            // Update all multiples of p to false indicating they are not prime\n            for (int i = p * p; i <= n; i += p)\n                prime[i] = false;\n        }\n    }\n\n    // Collecting all prime numbers\n    for (int p = 2; p <= n; ++p) {\n        if (prime[p]) {\n            std::cout << p << \" \";\n        }\n    }\n}\n\nint main() {\n    int n;\n    std::cout << \"Enter the number up to which you want to find prime numbers: \";\n    std::cin >> n;\n    std::cout << \"Prime numbers up to \" << n << \" are: \";\n    sieveOfEratosthenes(n);\n    return 0;\n}\n```\n\n### Explanation:\n1. **Initialization**: We start by creating a boolean vector `prime` of size `n + 1` initialized to `true`, indicating that all numbers are initially considered prime.\n2. **Marking Non-Primes**: We iterate from 2 to `sqrt(n)`. For each number `p` that is still marked as true (prime), we mark all its multiples as false (not prime).\n3. **Output**: Finally, we iterate through the vector and print all numbers that remain marked as true, which are the prime numbers.\n\n### Example:\n- If you input `10`, the output will be `2 3 5 7`, which are the prime numbers up to 10."
    }
]