[
    {
        "role": "user",
        "content": "I am currently using Mock for Python and I would like to mock a function called foo. Normally, I would just use MagicMock(return_value=\"mocked!\") or MagicMock(side_effect=[\"mocked once\", \"mocked twice!\"]) to mock the function. However, I have a situation where I want to return a fixed value when the input parameter has a specific value. For example, if \"my_param\" is equal to \"something\", then I want to return \"my_cool_mock\". I know this is possible with mockito for Python as when(dummy).foo(\"something\").thenReturn(\"my_cool_mock\") can be used. How can I achieve the same with Mock? Here is the function I am trying to mock:\n\n```python\ndef foo(self, my_param):\n    #do something here, assign something to my_result\n    return my_result\n```\n\nAnd here is how I usually mock my functions:\n\n```python\nself.foo = MagicMock(return_value=\"mocked!\")\nself.foo = MagicMock(side_effect=[\"mocked once\", \"mocked twice!\"])\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve conditional return values when mocking a function in Python using the `unittest.mock` library, you can use a custom function or lambda with the `side_effect` attribute. This allows you to define custom logic to determine what the mock should return based on the input parameters.\n\nHere's how you can set up a mock for your `foo` function to return a specific value when the parameter `my_param` is equal to `\"something\"`:\n\n```python\nfrom unittest.mock import MagicMock\n\n# Define your custom side effect function\ndef foo_side_effect(my_param):\n    if my_param == \"something\":\n        return \"my_cool_mock\"\n    else:\n        return \"default_value\"  # Default return value for other cases\n\n# Create the mock and set the side_effect\nself.foo = MagicMock(side_effect=foo_side_effect)\n\n# Example usage\nprint(self.foo(\"something\"))  # Output: \"my_cool_mock\"\nprint(self.foo(\"anything_else\"))  # Output: \"default_value\"\n```\n\nIn this setup, `foo_side_effect` is a custom function that checks the value of `my_param`. If it matches `\"something\"`, it returns `\"my_cool_mock\"`. Otherwise, it returns a default value, which you can specify as needed.\n\nBy using this approach, you can have fine-grained control over the mock's behavior based on the input parameters, similar to what `mockito` can achieve with its `when` and `thenReturn` methods."
    }
]