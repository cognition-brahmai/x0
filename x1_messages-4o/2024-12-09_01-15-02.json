[
    {
        "role": "user",
        "content": "How can I override the __getattr__ method of a class in Python without disrupting its default behavior?"
    },
    {
        "role": "assistant",
        "content": "Overriding the `__getattr__` method in a Python class allows you to define custom behavior for attribute access, but it's important to ensure that you don't disrupt its default behavior. The `__getattr__` method is only called when an attribute is not found in the usual places (i.e., it wasn't defined in the instance's `__dict__`, wasn't found in the class, and wasn't a built-in attribute).\n\nHere's how you can override `__getattr__` while maintaining default behavior:\n\n1. **Define the `__getattr__` method**: This method should be defined in your class. It's called with the attribute name as a string and should return the value of the attribute if it can be resolved.\n\n2. **Handle known attributes**: If you want to add custom behavior for specific attributes, you can handle them explicitly in the `__getattr__` method.\n\n3. **Fallback to default behavior**: If the attribute name doesn't match any of the custom conditions, you should raise an `AttributeError`. This is important because it signals that the attribute indeed does not exist, allowing Python's default machinery to proceed as usual.\n\nHere's an example:\n\n```python\nclass MyClass:\n    def __init__(self, x):\n        self.x = x\n\n    def __getattr__(self, name):\n        # Custom behavior for specific attributes\n        if name == 'double_x':\n            return self.x * 2\n        \n        # If the attribute is not handled here, raise AttributeError\n        raise AttributeError(f\"'{self.__class__.__name__}' object has no attribute '{name}'\")\n\n# Usage\nobj = MyClass(5)\n\n# Accessing a defined attribute\nprint(obj.x)  # Output: 5\n\n# Accessing a custom attribute handled by __getattr__\nprint(obj.double_x)  # Output: 10\n\n# Accessing an undefined attribute will raise AttributeError\ntry:\n    print(obj.undefined_attr)\nexcept AttributeError as e:\n    print(e)  # Output: 'MyClass' object has no attribute 'undefined_attr'\n```\n\nIn this example, the `__getattr__` method handles a custom attribute `double_x`, but for any other attribute that isn't explicitly handled, it raises an `AttributeError`, allowing the default behavior to proceed without disruption. This way, you extend the class's attribute access capabilities while preserving its default behavior for undefined attributes."
    }
]