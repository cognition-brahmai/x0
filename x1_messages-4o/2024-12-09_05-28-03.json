[
    {
        "role": "user",
        "content": "How can I split a multi-class, skewed dataset into a training set and a validation set while maintaining the ratio between classes? For example, if I have 100 instances of a specific class and 10 instances of another class, I want to allocate 30% of the records to the training set. This means 30 instances of the 100 record class and 3 instances of the 10 record class should be in the training set. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To split a multi-class, skewed dataset into a training set and a validation set while maintaining the class distribution, you can use stratified sampling. This method ensures that each class is represented in the training and validation sets in the same proportion as in the original dataset. In Python, you can achieve this using libraries like `scikit-learn`. Here's a step-by-step guide on how to do it:\n\n1. **Install scikit-learn**: If you haven't already, install the library using pip.\n   ```bash\n   pip install scikit-learn\n   ```\n\n2. **Use `train_test_split` with stratification**: This function allows you to split the dataset while preserving the class distribution.\n\nHere's an example of how you can do this:\n\n```python\nfrom sklearn.model_selection import train_test_split\nimport pandas as pd\nimport numpy as np\n\n# Example dataset\ndata = {\n    'features': np.random.rand(110, 5),  # 110 samples, 5 features each\n    'labels': np.array([0]*100 + [1]*10)  # 100 instances of class 0 and 10 instances of class 1\n}\n\n# Create a DataFrame\ndf = pd.DataFrame(data['features'], columns=[f'feature_{i}' for i in range(5)])\ndf['label'] = data['labels']\n\n# Split the dataset\ntrain_set, val_set = train_test_split(df, test_size=0.3, stratify=df['label'], random_state=42)\n\n# Check the distribution of the classes in each set\ntrain_distribution = train_set['label'].value_counts(normalize=True)\nval_distribution = val_set['label'].value_counts(normalize=True)\n\nprint(\"Training set class distribution:\")\nprint(train_distribution)\n\nprint(\"\\nValidation set class distribution:\")\nprint(val_distribution)\n```\n\n### Explanation:\n- **`train_test_split`**: This function is used to split arrays or matrices into random train and test subsets. In this example, `test_size=0.3` means 30% of the data will be allocated to the validation set, and the remaining 70% to the training set.\n- **`stratify=df['label']`**: This parameter ensures that the split maintains the proportion of each class in the dataset.\n- **`random_state=42`**: This is used to ensure that the split is reproducible.\n\nBy using this method, you should be able to maintain the class distribution in both the training and validation sets as specified in your problem statement."
    }
]