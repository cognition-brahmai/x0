[
    {
        "role": "user",
        "content": "Why does Python threading ignore the KeyboardInterrupt exception? When I run my code, it seems to ignore my Ctrl+C keyboard interrupt and doesn't print 'Received Keyboard Interrupt'. My code is as follows:\n\n```Python\nimport threading, time\n\nclass reqthread(threading.Thread):    \n    def run(self):\n        for i in range(0, 10):\n            time.sleep(1)\n            print('.')\n\ntry:\n    thread = reqthread()\n    thread.start()\nexcept (KeyboardInterrupt, SystemExit):\n    print('\\n! Received keyboard interrupt, quitting threads.\\n')\n```\n\nHowever, when I run it, it prints\n\n```Shell\n$ python prova.py\n.\n.\n^C.\n.\n.\n.\n.\n.\n.\n.\nException KeyboardInterrupt in <module 'threading' from '/usr/lib/python2.6/threading.pyc'> ignored\n```\n\nWhat am I doing wrong with this code?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering arises from how exceptions, specifically `KeyboardInterrupt`, are handled in Python when using threads. In your code, the `try...except` block is wrapping the thread start, but it doesn't cover the ongoing execution of the thread itself. \n\nIn Python, `KeyboardInterrupt` is raised in the main thread, and doesn't inherently stop other threads. However, you can modify your code to handle keyboard interruptions more effectively. Here's one way to achieve this:\n\n1. Use a `while` loop to keep the main thread alive and check for a `KeyboardInterrupt`.\n2. Use a stop flag that the thread can check to terminate gracefully.\n\nHere's an updated version of your code:\n\n```python\nimport threading\nimport time\n\nclass reqthread(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self._stop_event = threading.Event()\n\n    def run(self):\n        for i in range(10):\n            if self._stop_event.is_set():\n                break\n            time.sleep(1)\n            print('.')\n\n    def stop(self):\n        self._stop_event.set()\n\ntry:\n    thread = reqthread()\n    thread.start()\n\n    # Keep the main program running, waiting for KeyboardInterrupt\n    while True:\n        time.sleep(0.1)\n\nexcept KeyboardInterrupt:\n    print('\\n! Received keyboard interrupt, quitting threads.\\n')\n    thread.stop()\n    thread.join()\n```\n\n### Key Changes:\n- **Stop Event:** A threading event (`_stop_event`) is used to signal the thread to stop. The `run` method periodically checks this event.\n- **Graceful Shutdown:** When a `KeyboardInterrupt` is detected in the main thread, it calls the `stop` method on the thread, which sets the event and allows the thread to exit its loop.\n- **Thread Join:** After signaling the thread to stop, `thread.join()` ensures the main program waits for the thread to exit gracefully.\n\nThis approach ensures that the `KeyboardInterrupt` is correctly handled, and the thread can terminate properly when the user requests it with a `Ctrl+C`."
    }
]