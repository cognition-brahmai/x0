[
    {
        "role": "user",
        "content": "In Python, if I have a 2D point, how can I rotate that point by a specified degree around another point (the origin)? For instance, if I have a point 'PointA' and an origin, I would like to tilt 'PointA' around the origin by 10 degrees. I am currently considering a code structure like this:\n\n```python\nPointA=(200,300)\norigin=(100,100)\n\nNewPointA=rotate(origin,PointA,10) #The rotate function rotates it by 10 degrees\n```\nCould you guide me on how to implement the rotate function?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To rotate a point around another point by a specified angle, you can use a rotation matrix. The basic idea is to first translate the point such that the origin of rotation becomes the coordinate system origin, apply the rotation, and then translate back. Here's how you can implement the `rotate` function:\n\n```python\nimport math\n\ndef rotate(origin, point, angle_degrees):\n    # Convert the angle from degrees to radians\n    angle_radians = math.radians(angle_degrees)\n    \n    # Translate the point to the origin\n    ox, oy = origin\n    px, py = point\n    translated_x = px - ox\n    translated_y = py - oy\n\n    # Apply the rotation matrix\n    rotated_x = translated_x * math.cos(angle_radians) - translated_y * math.sin(angle_radians)\n    rotated_y = translated_x * math.sin(angle_radians) + translated_y * math.cos(angle_radians)\n\n    # Translate back\n    new_x = rotated_x + ox\n    new_y = rotated_y + oy\n\n    return new_x, new_y\n\n# Example usage\nPointA = (200, 300)\norigin = (100, 100)\nNewPointA = rotate(origin, PointA, 10)\n\nprint(\"New PointA:\", NewPointA)\n```\n\n### Explanation:\n1. **Angle Conversion**: The angle of rotation is converted from degrees to radians because the `math` trigonometric functions (`cos` and `sin`) in Python work with radians.\n2. **Translation**: The point is translated such that the rotation origin becomes the coordinate system origin (i.e., (0, 0)).\n3. **Rotation Matrix**: The rotation matrix is applied:\n   \\[\n   \\begin{bmatrix}\n   \\text{rotated\\_x} \\\\\n   \\text{rotated\\_y} \n   \\end{bmatrix}\n   =\n   \\begin{bmatrix}\n   \\cos(\\theta) & -\\sin(\\theta) \\\\\n   \\sin(\\theta) & \\cos(\\theta)\n   \\end{bmatrix}\n   \\begin{bmatrix}\n   \\text{translated\\_x} \\\\\n   \\text{translated\\_y}\n   \\end{bmatrix}\n   \\]\n   where \\(\\theta\\) is the rotation angle in radians.\n4. **Re-translation**: The result is then translated back to the original coordinate system by adding the origin's coordinates.\n\nThis will give you the new position of `PointA` after rotating it 10 degrees around the specified `origin`."
    }
]