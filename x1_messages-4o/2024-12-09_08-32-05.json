[
    {
        "role": "user",
        "content": "How can I pass a password to 'psql' in a non-interactive way for automating database creation with a shell script? I'm currently using the following code:\n\n```shell\npsql -U $DB_USER -h localhost -c\"$DB_RECREATE_SQL\"\n```"
    },
    {
        "role": "assistant",
        "content": "To pass a password to `psql` in a non-interactive way, you have a few options. Here are some common methods:\n\n1. **Using a `.pgpass` file:**\n\n   You can store your credentials in a `.pgpass` file in your home directory. The file should have the following format:\n\n   ```\n   hostname:port:database:username:password\n   ```\n\n   For example:\n\n   ```\n   localhost:5432:your_database:your_username:your_password\n   ```\n\n   Make sure to set the permissions of this file to be readable only by the user:\n\n   ```shell\n   chmod 600 ~/.pgpass\n   ```\n\n   `psql` will automatically use this file to look up passwords.\n\n2. **Using the `PGPASSWORD` environment variable:**\n\n   You can export the `PGPASSWORD` environment variable in your shell script before calling `psql`:\n\n   ```shell\n   export PGPASSWORD='your_password'\n   psql -U $DB_USER -h localhost -c \"$DB_RECREATE_SQL\"\n   ```\n\n   This method is straightforward, but be cautious as it can expose the password in the environment.\n\n3. **Using a connection URI:**\n\n   You can pass a connection URI directly to `psql`, which includes the password. This is done by appending `?password=your_password` to the connection string:\n\n   ```shell\n   psql \"postgresql://$DB_USER:your_password@localhost:5432/your_database\" -c \"$DB_RECREATE_SQL\"\n   ```\n\n   Ensure that your shell script handles this URI securely to prevent password exposure.\n\nEach method has its pros and cons in terms of security and ease of use, so choose the one that best fits your needs and security requirements."
    }
]