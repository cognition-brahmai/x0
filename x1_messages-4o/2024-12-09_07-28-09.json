[
    {
        "role": "user",
        "content": "How can I redirect Python 'print' output to Logger? I have a Python script that uses 'Print' for printing to stdout. I've recently incorporated logging via Python Logger and would like these print statements to go to the logger if logging is enabled. I don't want to modify or remove these current print statements. Can I log by doing 'log.info(\"some info msg\")'? I would like to do something like this:\n\n```python\nif logging_enabled:\n  sys.stdout=log.info\nprint(\"test\")\n```\nIf logging is enabled, I want \"test\" to be logged as if I did `log.info(\"test\")`. If logging isn't enabled, \"test\" should just be printed to the screen. Is this possible? I am aware that I can direct stdout to a file in a similar manner."
    },
    {
        "role": "assistant",
        "content": "Yes, you can redirect the `print` output to a logger by creating a custom stream handler that writes to the logger instead of the standard output. This way, you can intercept any output to `stdout` and direct it to your logger. Here's how you can achieve this:\n\n```python\nimport logging\nimport sys\n\n# Define a custom stream handler that uses a logger\nclass LoggerWriter:\n    def __init__(self, level):\n        # Initialize with a logging level\n        self.level = level\n        self.logger = logging.getLogger()\n    \n    def write(self, message):\n        # Only log if there's actually a message (to avoid logging empty writes)\n        if message.strip() != \"\":\n            self.logger.log(self.level, message)\n    \n    def flush(self):\n        # This method is required for the stream interface\n        pass\n\n# Configure the logger\nlogging.basicConfig(level=logging.INFO)\nlog = logging.getLogger()\n\n# Conditional redirection of stdout to logger\nlogging_enabled = True  # Change this as needed\nif logging_enabled:\n    sys.stdout = LoggerWriter(logging.INFO)\nelse:\n    sys.stdout = sys.__stdout__  # Reset to default if logging is not enabled\n\n# Test print statements\nprint(\"This will be logged if logging is enabled.\")\n```\n\n### Explanation:\n- A `LoggerWriter` class is defined to act as a stream handler that sends each write to the logger at a specified logging level.\n- This class overrides the `write` and `flush` methods. The `write` method checks if the message is non-empty and then logs it.\n- The `flush` method is defined to satisfy the stream interface, but it doesn't need to do anything here.\n- You set `sys.stdout` to an instance of `LoggerWriter`, which redirects all `print` output to the logger.\n- If logging is not enabled, you reset `sys.stdout` to its original value using `sys.__stdout__`.\n\nThis approach ensures that your existing `print` statements can be dynamically redirected to your logger, based on the `logging_enabled` flag."
    }
]