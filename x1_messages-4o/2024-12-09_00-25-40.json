[
    {
        "role": "user",
        "content": "I am using the flask-cache extension which has a \"@cache.memoize\" decorator to cache a view including the view's \"*args\" and \"**kwargs\". However, some of my views also take a URL query string, for instance \"/foo/image?width=640\". The decorator does add a \"make_cache_key\" method to the decorated view function for customizing the cache key, but I am unsure how to get the \"request.args\" outside of the normal request context. How can I make the \"@cache.memoize\" work with URL query strings as well?"
    },
    {
        "role": "assistant",
        "content": "To make the `@cache.memoize` decorator work with URL query strings, you need to customize the cache key generation to include the query parameters. Flask-Cache provides a way to do this by allowing you to specify a custom function for generating the cache key. Here's how you can achieve this:\n\n1. **Define a Custom Cache Key Function:**\n   Create a function that generates a cache key based on the request path and query parameters. You can use the `request.args` to access the query parameters.\n\n2. **Use the `make_cache_key` Parameter:**\n   Pass this custom function to the `make_cache_key` parameter of the `@cache.memoize` decorator.\n\nHere's an example implementation:\n\n```python\nfrom flask import Flask, request\nfrom flask_caching import Cache\n\napp = Flask(__name__)\ncache = Cache(app, config={'CACHE_TYPE': 'simple'})\n\n# Custom cache key function\ndef custom_cache_key(*args, **kwargs):\n    # Sort the query parameters to ensure the key is consistent\n    query_string = \"&\".join(f\"{key}={value}\" for key, value in sorted(request.args.items()))\n    # Combine the request path and sorted query string to form the cache key\n    return f\"{request.path}?{query_string}\"\n\n@app.route('/foo/image')\n@cache.memoize(make_cache_key=custom_cache_key)\ndef image():\n    width = request.args.get('width', 'default')\n    # Your logic here\n    return f\"Image with width: {width}\"\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\n### Explanation:\n\n- **Custom Cache Key Function:** The `custom_cache_key` function constructs a cache key by combining the request path (`request.path`) with the query string parameters. The query parameters are sorted to ensure consistency in the cache key, regardless of the order in which they appear in the URL.\n\n- **Using `make_cache_key`:** The `make_cache_key` parameter in the `@cache.memoize` decorator is set to `custom_cache_key`, ensuring that this custom function is used to generate the cache key.\n\nWith this setup, your cache will correctly differentiate between requests to the same endpoint with different query parameters, such as `/foo/image?width=640` and `/foo/image?width=800`."
    }
]