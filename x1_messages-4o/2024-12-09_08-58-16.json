[
    {
        "role": "user",
        "content": "How can I find the maximum profit from a given set of stock prices using Python?"
    },
    {
        "role": "assistant",
        "content": "To find the maximum profit from a given set of stock prices using Python, you can use a simple algorithm that calculates the difference between the highest and lowest prices in a single pass through the list of prices. This approach assumes you are allowed to buy and sell once.\n\nHere is a straightforward implementation of this algorithm:\n\n```python\ndef max_profit(prices):\n    if not prices:\n        return 0\n    \n    min_price = float('inf')\n    max_profit = 0\n    \n    for price in prices:\n        # Update the minimum price encountered so far\n        if price < min_price:\n            min_price = price\n        # Calculate the potential profit at the current price and update max_profit if this is the highest we've seen\n        elif price - min_price > max_profit:\n            max_profit = price - min_price\n    \n    return max_profit\n\n# Example usage:\nstock_prices = [7, 1, 5, 3, 6, 4]\nprint(\"Maximum Profit:\", max_profit(stock_prices))\n```\n\n### Explanation:\n- **`min_price`**: This keeps track of the lowest price encountered so far as you iterate through the list.\n- **`max_profit`**: This is updated whenever a higher profit is found by selling at the current price.\n- The loop iterates through each price in the list, updating `min_price` and `max_profit` accordingly.\n- The time complexity of this solution is O(n), where n is the number of prices, because it involves a single pass through the list. The space complexity is O(1) since it uses a fixed amount of extra space.\n\nThis algorithm efficiently finds the maximum profit by maintaining a running tally of the lowest purchase price and the highest profit encountered so far."
    }
]