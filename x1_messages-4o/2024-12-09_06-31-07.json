[
    {
        "role": "user",
        "content": "How can I generate SSH Identity key pairs using Python? Specifically, I want to extract the public key using Python. I tried using the M2Crypto library to generate the keys and managed to save the private key, but I'm having trouble with the public key. The result I get from using `key.save_pub_key(\"/tmp/my.key.pub\")` is something like this:\n\n```\n-----BEGIN PUBLIC KEY-----\nMFwwDQYJKoZIhvcNAQEBBQADASDASDASDASDBarYRsmMazM1hd7a+u3QeMP\n...\nFZQ7Ic+BmmeWHvvVP4Yjyu1t6vAut7mKkaDeKbT3yiGVUgAEUaWMXqECAwEAAQ==\n-----END PUBLIC KEY-----\n```\n\nBut I'm looking for a format like this:\n\n```\nssh-rsa AAAABCASDDBM$%3WEAv/3%$F ..... OSDFKJSL43$%^DFg==\n```\n\nHere is the code I'm using:\n\n```python\nfrom M2Crypto import RSA\nkey = RSA.gen_key(1024, 65337)\nkey.save_key(\"/tmp/my.key\", cipher=None)\n```\n\nI then extract the public key using the command `ssh-keygen -y -f /tmp/my.key > /tmp/my.key.pub`. How can I achieve this using Python?"
    },
    {
        "role": "assistant",
        "content": "To generate SSH identity key pairs and extract the public key in the desired SSH format (`ssh-rsa ...`) using Python, you can use the `cryptography` library, which is more modern and easier to work with compared to M2Crypto. Here's a step-by-step guide on how you can do this:\n\nFirst, make sure you have the `cryptography` library installed. You can install it using pip:\n\n```bash\npip install cryptography\n```\n\nOnce you have the library installed, you can use the following code to generate the key pair and extract the public key in the SSH format:\n\n```python\nfrom cryptography.hazmat.primitives.asymmetric import rsa\nfrom cryptography.hazmat.primitives import serialization\nimport base64\n\n# Generate RSA private key\nprivate_key = rsa.generate_private_key(\n    public_exponent=65537,\n    key_size=2048\n)\n\n# Save the private key to a file\nwith open(\"/tmp/my.key\", \"wb\") as private_key_file:\n    private_key_file.write(\n        private_key.private_bytes(\n            encoding=serialization.Encoding.PEM,\n            format=serialization.PrivateFormat.TraditionalOpenSSL,\n            encryption_algorithm=serialization.NoEncryption()\n        )\n    )\n\n# Get the public key\npublic_key = private_key.public_key()\n\n# Convert the public key to OpenSSH format\npublic_key_ssh = public_key.public_bytes(\n    encoding=serialization.Encoding.OpenSSH,\n    format=serialization.PublicFormat.OpenSSH\n).decode('utf-8')\n\n# Save the public key to a file\nwith open(\"/tmp/my.key.pub\", \"w\") as public_key_file:\n    public_key_file.write(public_key_ssh)\n\nprint(\"Public Key:\", public_key_ssh)\n```\n\n### Explanation:\n\n1. **Key Generation**: We use `cryptography.hazmat.primitives.asymmetric.rsa` to generate a new RSA key pair with a public exponent of 65537 and a key size of 2048 bits.\n\n2. **Private Key Saving**: The private key is saved in PEM format without encryption using `serialization.PrivateFormat.TraditionalOpenSSL`.\n\n3. **Public Key Extraction**: The public key is extracted from the private key and encoded in OpenSSH format using `serialization.Encoding.OpenSSH`.\n\n4. **Public Key Saving**: The public key is saved in a `.pub` file, and the format will be `ssh-rsa ...`, which is the desired format for SSH.\n\nThis code will generate an SSH key pair and save both the private and public keys in the appropriate formats."
    }
]