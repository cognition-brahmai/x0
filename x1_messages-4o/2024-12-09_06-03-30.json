[
    {
        "role": "user",
        "content": "I'm using reST-style docstrings in Python, like in the following function:\n\n```python\ndef foo(bar):\n    \"\"\"a method that takes a bar\n\n    :param bar: a Bar instance\n    :type bar: Bar\n    \"\"\"\n```\n\nIs there a standard way to document `yields` in Python docstrings? I've searched for this in the Sphinx documentation, but I have not been successful. I am looking for a way to document it similarly to this:\n\n```python\n:yields: transformed bars\n:yield type: Baz\n```"
    },
    {
        "role": "assistant",
        "content": "Yes, you can document `yields` in reStructuredText (reST) style docstrings in Python, similar to how you document parameters and return values. When you're working with generator functions that use the `yield` statement, it's a good practice to document what the function yields. Here's how you can do it using the reST style:\n\n```python\ndef foo_generator():\n    \"\"\"A generator function that yields transformed bars.\n\n    :yields: Transformed bars.\n    :yield type: Baz\n    \"\"\"\n    # Generator logic here\n    yield Baz()\n```\n\n- `:yields:` describes what the generator yields. It provides a brief description of the value or object yielded by the generator.\n- `:yield type:` specifies the type of the yielded value, similar to how `:type:` is used for parameters.\n\nThis format should be clear to anyone reading the documentation and is also compatible with tools like Sphinx, which can generate HTML documentation from these docstrings."
    }
]