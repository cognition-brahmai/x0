[
    {
        "role": "user",
        "content": "I am trying to run a specific command within a bash script repeatedly until it is successful. In this case, I want to ask the user to change their password and the script shouldn't proceed until the password is successfully changed. I have attempted to use a while loop to achieve this but it doesn't seem to work. Here is my attempt:\n\n```bash\necho \"Please change password\"\nwhile passwd\ndo\n    echo \"Try again\"\ndone\n```\n\nI have also tried many variations of the while loop like:\n\n```bash\nwhile `passwd`\nwhile [[ \"`passwd`\" -gt 0 ]]\nwhile [ `passwd` -ne 0 ]]\n# ... And much more\n```\n\nBut I'm unable to get any of these to work. How can I solve this issue?"
    },
    {
        "role": "assistant",
        "content": "To run a command repeatedly until it succeeds in a bash script, you can utilize a `while` loop that checks the exit status of the command. The `passwd` command will return a non-zero exit status if it fails, so you want the loop to continue while the command is unsuccessful (i.e., while the exit status is non-zero).\n\nHere's a corrected version of your script:\n\n```bash\necho \"Please change password\"\nwhile ! passwd; do\n    echo \"Password change failed, please try again\"\ndone\necho \"Password successfully changed\"\n```\n\n### Explanation:\n- **`while ! passwd; do`**: The `!` operator negates the exit status of the `passwd` command. If `passwd` fails (i.e., returns a non-zero exit status), `! passwd` will return true, and the loop will continue.\n- **`echo \"Password change failed, please try again\"`**: This message will prompt the user to try changing the password again if the previous attempt failed.\n- **`echo \"Password successfully changed\"`**: This message is printed after the loop exits, indicating that the password change was successful. \n\nThis script will keep prompting the user to change their password until the `passwd` command returns a zero exit status, indicating success."
    }
]