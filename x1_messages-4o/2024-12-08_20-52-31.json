[
    {
        "role": "user",
        "content": "How can I create an excel table to find all possible anagram pairs in a given list of words in Python? The input list will contain duplicate words, and the output should only contain unique pairs. \nIn addition, the table should display the following columns: \n1. Word 1 - displays the first word in the pair\n2. Word 2 - displays the second word in the pair\n3. Anagram Pair - displays \"Yes\" if the pair is an anagram, \"No\" if it is not\n4. Unique Pair - displays \"Yes\" if the pair is unique, \"No\" if it is a duplicate pair \nPlease provide the Python code to populate this table using the input list of words."
    },
    {
        "role": "assistant",
        "content": "To create an Excel table that identifies all possible anagram pairs from a list of words, you can use Python with the `pandas` library to manage the data and `openpyxl` for exporting to Excel. Here's a step-by-step guide:\n\n1. **Install Required Libraries**: Make sure you have `pandas` and `openpyxl` installed. You can install them using pip if you haven't already:\n\n   ```bash\n   pip install pandas openpyxl\n   ```\n\n2. **Python Code**: Use the following Python code to create the Excel table. This code will generate all possible pairs of words, check for anagrams, and ensure that only unique pairs are listed.\n\n```python\nimport pandas as pd\nfrom itertools import combinations\n\ndef are_anagrams(word1, word2):\n    return sorted(word1) == sorted(word2)\n\ndef create_anagram_pairs(word_list):\n    # Generate all possible pairs\n    pairs = list(combinations(word_list, 2))\n    \n    # Prepare data for the DataFrame\n    data = []\n    seen_pairs = set()\n    \n    for word1, word2 in pairs:\n        # Sort words to ensure uniqueness (e.g., ('word1', 'word2') == ('word2', 'word1'))\n        sorted_pair = tuple(sorted((word1, word2)))\n        \n        is_anagram = are_anagrams(word1, word2)\n        is_unique = sorted_pair not in seen_pairs\n        \n        # Mark the pair as seen\n        if is_unique:\n            seen_pairs.add(sorted_pair)\n        \n        # Append the pair's data\n        data.append({\n            'Word 1': word1,\n            'Word 2': word2,\n            'Anagram Pair': 'Yes' if is_anagram else 'No',\n            'Unique Pair': 'Yes' if is_unique else 'No'\n        })\n    \n    # Create DataFrame\n    df = pd.DataFrame(data)\n    \n    # Filter out duplicate entries\n    df = df[df['Unique Pair'] == 'Yes']\n    \n    return df\n\n# Input list of words\nword_list = ['listen', 'silent', 'enlist', 'google', 'gooegl', 'banana', 'banana']\n\n# Create the DataFrame with anagram pairs\nanagram_df = create_anagram_pairs(word_list)\n\n# Export to Excel\nanagram_df.to_excel('anagram_pairs.xlsx', index=False)\n\nprint(\"Anagram pairs table created and saved as 'anagram_pairs.xlsx'.\")\n```\n\n### Explanation:\n\n- **Function `are_anagrams`**: This function checks if two words are anagrams by comparing their sorted characters.\n- **Function `create_anagram_pairs`**: This function generates all possible unique pairs using combinations, checks if they are anagrams, and records whether the pair has been seen before to ensure uniqueness.\n- **Data Structure**: A list of dictionaries is used to store the pairs along with their properties, which is then converted into a Pandas DataFrame.\n- **Excel Export**: The DataFrame is exported to an Excel file using `to_excel`.\n\nThis script will create an Excel file named `anagram_pairs.xlsx` containing your desired columns and unique anagram pairs."
    }
]