[
    {
        "role": "user",
        "content": "I am developing an application using PySide and I am utilizing QTableWidget. My table has three columns, and the data they contain is very different, for instance, a long sentence in the first column, then 3-digit numbers in the two last columns. I want to adjust the size of my table according to the data, or at least to set the column sizes as 70/15/15 % of the available space. I've tried using `table.horizontalHeader().setResizeMode(QHeaderView.Stretch)` and `table.horizontalHeader().setResizeMode(QHeaderView.ResizeToContents)`, but these methods do not give the desired output. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired column width proportions in a `QTableWidget` using PySide, you can manually set the width of each column based on the available space. Since you want the columns to be in a 70/15/15 ratio, you can calculate the widths based on the total width of the table. Here's how you can implement this:\n\n1. Set the resize mode of the header to manual.\n2. Monitor the resize event of the table to adjust the column widths accordingly.\n\nHere's an example of how you can achieve this:\n\n```python\nfrom PySide6.QtWidgets import QApplication, QTableWidget, QTableWidgetItem, QHeaderView, QVBoxLayout, QWidget\nimport sys\n\nclass MyTableWidget(QWidget):\n    def __init__(self):\n        super().__init__()\n\n        self.table = QTableWidget(10, 3)  # Create a table with 10 rows and 3 columns\n        self.table.setHorizontalHeaderLabels(['Column 1', 'Column 2', 'Column 3'])\n\n        # Set resize mode to manual\n        self.table.horizontalHeader().setSectionResizeMode(QHeaderView.Interactive)\n\n        # Populate the table with some example data\n        for row in range(10):\n            self.table.setItem(row, 0, QTableWidgetItem(f\"Long sentence in column 1, row {row}\"))\n            self.table.setItem(row, 1, QTableWidgetItem(str(row * 111)))\n            self.table.setItem(row, 2, QTableWidgetItem(str(row * 222)))\n\n        # Initial column width setup\n        self.resizeColumns()\n\n        layout = QVBoxLayout()\n        layout.addWidget(self.table)\n        self.setLayout(layout)\n\n        # Connect the resize event\n        self.table.horizontalHeader().sectionResized.connect(self.resizeColumns)\n\n    def resizeColumns(self):\n        total_width = self.table.viewport().width()\n        self.table.setColumnWidth(0, total_width * 0.7)\n        self.table.setColumnWidth(1, total_width * 0.15)\n        self.table.setColumnWidth(2, total_width * 0.15)\n\nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    widget = MyTableWidget()\n    widget.resize(800, 600)  # Initial size of the window\n    widget.show()\n    sys.exit(app.exec())\n```\n\n### Explanation:\n\n- **Manual Resize Mode**: We set the header's resize mode to `Interactive` so that we can control the column sizes manually.\n- **Resize Event**: We connect the `sectionResized` signal to a method (`resizeColumns`) that recalculates and sets the column widths whenever the table is resized.\n- **Column Widths Calculation**: In the `resizeColumns` method, we calculate the total available width of the table's viewport and set each column's width based on the specified ratio (70% for the first column and 15% each for the second and third columns).\n\nThis approach ensures that the columns are resized proportionally as the table's size changes."
    }
]