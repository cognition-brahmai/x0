[
    {
        "role": "user",
        "content": "I am working on developing an API where a JSON schema property can either be a number or null. The property in question is 'heading', which can be a number between 0 (inclusive) and 360 (exclusive), or null. Here are some examples of valid inputs:\n\n{\"heading\": 5}\n{\"heading\": 0}\n{\"heading\": null}\n{\"heading\": 12}\n{\"heading\": 120}\n{\"heading\": null}\n\nInvalid inputs would look like this:\n\n{\"heading\": 360}\n{\"heading\": 360.1}\n{\"heading\": -5}\n{\"heading\": false}\n{\"heading\": \"X\"}\n{\"heading\": 1200}\n{\"heading\": false}\n\nI understand that 'anyOf' could be the right answer. However, I am unsure of how to implement this in the schema. Can you help me how to effectively write the schema that validates 'heading' to be a number between 0 and 360 (not inclusive) or null?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To define a JSON schema where the `heading` property can be either a number between 0 (inclusive) and 360 (exclusive) or `null`, you can use the `anyOf` keyword. This allows you to specify multiple conditions, one of which must be met for the property to be valid. In this case, you want to specify that the `heading` can be a number within a specific range or it can be `null`.\n\nHere's how you can write the JSON schema for this requirement:\n\n```json\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"heading\": {\n      \"anyOf\": [\n        {\n          \"type\": \"number\",\n          \"minimum\": 0,\n          \"exclusiveMaximum\": 360\n        },\n        {\n          \"type\": \"null\"\n        }\n      ]\n    }\n  },\n  \"required\": [\"heading\"],\n  \"additionalProperties\": false\n}\n```\n\n### Explanation:\n\n- **`type: \"object\"`**: This indicates that the data should be an object.\n- **`properties`**: This is where you define the properties of your object. In this case, you have a single property called `heading`.\n- **`anyOf`**: This is used to specify that `heading` can be one of several types or formats.\n  - The first object in the `anyOf` array specifies that `heading` should be a `number` with a `minimum` value of 0 and an `exclusiveMaximum` value of 360. This means it can be any number from 0 up to, but not including, 360.\n  - The second object specifies that `heading` can be `null`.\n- **`required`**: This specifies that the `heading` property must be present in the object.\n- **`additionalProperties: false`**: This ensures that no other properties are allowed in the object besides `heading`.\n\nThis schema will validate the examples you provided as valid inputs and reject the invalid ones."
    }
]