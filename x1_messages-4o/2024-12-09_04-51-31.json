[
    {
        "role": "user",
        "content": "What is the most pythonic way to group by multiple keys and summarize or average values of a list of dictionaries in Python? For instance, if I have a list of dictionaries as below:\n\n```python\ninput = [\n{'dept': '001', 'sku': 'foo', 'transId': 'uniqueId1', 'qty': 100},\n{'dept': '001', 'sku': 'bar', 'transId': 'uniqueId2', 'qty': 200},\n{'dept': '001', 'sku': 'foo', 'transId': 'uniqueId3', 'qty': 300},\n{'dept': '002', 'sku': 'baz', 'transId': 'uniqueId4', 'qty': 400},\n{'dept': '002', 'sku': 'baz', 'transId': 'uniqueId5', 'qty': 500},\n{'dept': '002', 'sku': 'qux', 'transId': 'uniqueId6', 'qty': 600},\n{'dept': '003', 'sku': 'foo', 'transId': 'uniqueId7', 'qty': 700}\n]\n```\n\nHow can I obtain the following output for aggregation:\n\n```python\noutput=[\n{'dept': '001', 'sku': 'foo', 'qty': 400},\n{'dept': '001', 'sku': 'bar', 'qty': 200},\n{'dept': '002', 'sku': 'baz', 'qty': 900},\n{'dept': '002', 'sku': 'qux', 'qty': 600},\n{'dept': '003', 'sku': 'foo', 'qty': 700}\n]\n```\n\nOr for averaging:\n\n```python\noutput=[\n{'dept': '001', 'sku': 'foo', 'avg': 200},\n{'dept': '001', 'sku': 'bar', 'avg': 200},\n{'dept': '002', 'sku': 'baz', 'avg': 450},\n{'dept': '002', 'sku': 'qux', 'avg': 600},\n{'dept': '003', 'sku': 'foo', 'avg': 700}\n]\n```\n\nI've looked at the solution provided in [this thread](https://stackoverflow.com/questions/18066269/group-by-and-aggregate-the-values-of-a-list-of-dictionaries-in-python) but it doesn't seem to provide the output I'm looking for."
    },
    {
        "role": "assistant",
        "content": "To achieve the aggregation or averaging of values from a list of dictionaries by grouping multiple keys, you can use Python's `collections.defaultdict` to create a simple and efficient solution. Here is how you can achieve both the summation and averaging:\n\n### Aggregation\n\nTo summarize or aggregate the `qty` values:\n\n```python\nfrom collections import defaultdict\n\n# Input data\ninput_data = [\n    {'dept': '001', 'sku': 'foo', 'transId': 'uniqueId1', 'qty': 100},\n    {'dept': '001', 'sku': 'bar', 'transId': 'uniqueId2', 'qty': 200},\n    {'dept': '001', 'sku': 'foo', 'transId': 'uniqueId3', 'qty': 300},\n    {'dept': '002', 'sku': 'baz', 'transId': 'uniqueId4', 'qty': 400},\n    {'dept': '002', 'sku': 'baz', 'transId': 'uniqueId5', 'qty': 500},\n    {'dept': '002', 'sku': 'qux', 'transId': 'uniqueId6', 'qty': 600},\n    {'dept': '003', 'sku': 'foo', 'transId': 'uniqueId7', 'qty': 700}\n]\n\n# Using defaultdict to aggregate\naggregated = defaultdict(int)\n\nfor item in input_data:\n    key = (item['dept'], item['sku'])\n    aggregated[key] += item['qty']\n\noutput = [{'dept': dept, 'sku': sku, 'qty': qty} for (dept, sku), qty in aggregated.items()]\n\nprint(output)\n```\n\n### Averaging\n\nTo calculate the average `qty` values:\n\n```python\nfrom collections import defaultdict\n\n# Input data\ninput_data = [\n    {'dept': '001', 'sku': 'foo', 'transId': 'uniqueId1', 'qty': 100},\n    {'dept': '001', 'sku': 'bar', 'transId': 'uniqueId2', 'qty': 200},\n    {'dept': '001', 'sku': 'foo', 'transId': 'uniqueId3', 'qty': 300},\n    {'dept': '002', 'sku': 'baz', 'transId': 'uniqueId4', 'qty': 400},\n    {'dept': '002', 'sku': 'baz', 'transId': 'uniqueId5', 'qty': 500},\n    {'dept': '002', 'sku': 'qux', 'transId': 'uniqueId6', 'qty': 600},\n    {'dept': '003', 'sku': 'foo', 'transId': 'uniqueId7', 'qty': 700}\n]\n\n# Using defaultdict to accumulate sums and counts\nsums = defaultdict(int)\ncounts = defaultdict(int)\n\nfor item in input_data:\n    key = (item['dept'], item['sku'])\n    sums[key] += item['qty']\n    counts[key] += 1\n\naverage_output = [{'dept': dept, 'sku': sku, 'avg': sums[key] // counts[key]} for key in sums]\n\nprint(average_output)\n```\n\nIn both examples, `defaultdict` is used to initialize and accumulate quantities. The aggregation is done by summing quantities under the same `(dept, sku)` key for the aggregation task, and both the sum and count are maintained to compute the average for the averaging task."
    }
]