[
    {
        "role": "user",
        "content": "How can I prevent the labels on the x-axis of my bar-chart from overlapping each other in matplotlib? In my bar-chart, I am plotting the 'Amount of created/edited points over time' using the data from a postgres 9.1 database. Here is my Python script that connects to the database and plots the data. I need a solution that works automatically as I can't predict the number of bars.\n\n```python\n# -*- coding: utf-8 -*-\n#!/usr/bin/python2.7\nimport psycopg2\nimport matplotlib.pyplot as plt\nfig = plt.figure()\n\n# for savefig()\nimport pylab\n\n###\n### Connect to database with psycopg2\n###\n\ntry:\n  conn_string=\"dbname='x' user='y' host='z' password='pw'\"\n  print \"Connecting to database\\n-&gt;%s\" % (conn_string)\n\n  conn = psycopg2.connect(conn_string)\n  print \"Connection to database was established succesfully\"\nexcept:\n  print \"Connection to database failed\"\n\n###\n### Execute SQL query\n###  \n\n# New cursor method for sql\ncur = conn.cursor()\n\n# Execute SQL query. For more than one row use three '\"'\ntry:\n  cur.execute(\"\"\" \n\n-- In which year/month have these points been created?\n-- Need 'yyyymm' because I only need Months with years (values are summeed up). Without, query returns every day the db has an entry.\n\nSELECT to_char(s.day,'yyyymm') AS month\n      ,count(t.id)::int AS count\nFROM  (\n   SELECT generate_series(min(date_from)::date\n                         ,max(date_from)::date\n                         ,interval '1 day'\n          )::date AS day\n   FROM   mytable t\n   ) s\nLEFT   JOIN mytable t ON t.date_from::date = s.day\nGROUP  BY month\nORDER  BY month;\n\n  \"\"\")\n\n# Return the results of the query. Fetchall() =  all rows, fetchone() = first row\n  records = cur.fetchall()\n  cur.close()\n\nexcept:\n  print \"Query could not be executed\"\n\n# Unzip the data from the db-query. Order is the same as db-query output\nyear, count = zip(*records)\n\n###\n### Plot (Barchart)\n###\n\n# Count the length of the range of the count-values, y-axis-values, position of axis-labels, legend-label\nplt.bar(range(len(count)), count, align='center', label='Amount of created/edited points')\n\n# Add database-values to the plot with an offset of 10px/10px\nax = fig.add_subplot(111)\nfor i,j in zip(year,count):\n    ax.annotate(str(j), xy=(i,j), xytext=(10,10), textcoords='offset points')\n\n# Rotate x-labels on the x-axis\nfig.autofmt_xdate()\n\n# Label-values for x and y axis\nplt.xticks(range(len(count)), (year))\n\n# Label x and y axis\nplt.xlabel('Year')\nplt.ylabel('Amount of created/edited points')\n\n# Locate legend on the plot (http://matplotlib.org/users/legend_guide.html#legend-location)\nplt.legend(loc=1)\n\n# Plot-title\nplt.title(\"Amount of created/edited points over time\")\n\n# show plot\npylab.show()\n```"
    },
    {
        "role": "assistant",
        "content": "To prevent overlapping x-axis labels in your bar-chart when using Matplotlib, you can automatically adjust the rotation of the labels based on the number of labels. This can be done using the `plt.xticks()` function with a dynamic rotation angle. Additionally, the `tight_layout()` function can help in adjusting the subplot parameters to give specified padding. Here's how you can modify your script to achieve this:\n\n```python\n# -*- coding: utf-8 -*-\n#!/usr/bin/python2.7\nimport psycopg2\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Connect to the database and fetch data as before\n# ...\n\n# After fetching and unpacking the data\nyear, count = zip(*records)\n\n# Create a figure and an axis\nfig, ax = plt.subplots()\n\n# Count the length of the range of the count-values, y-axis-values, position of axis-labels, legend-label\nax.bar(range(len(count)), count, align='center', label='Amount of created/edited points')\n\n# Add database-values to the plot with an offset of 10px/10px\nfor i, j in zip(year, count):\n    ax.annotate(str(j), xy=(i, j), xytext=(10, 10), textcoords='offset points')\n\n# Rotate x-labels on the x-axis dynamically\nrotation_angle = 45 if len(count) > 10 else 0\nplt.xticks(range(len(count)), year, rotation=rotation_angle)\n\n# Label x and y axis\nplt.xlabel('Year')\nplt.ylabel('Amount of created/edited points')\n\n# Locate legend on the plot\nplt.legend(loc=1)\n\n# Plot-title\nplt.title(\"Amount of created/edited points over time\")\n\n# Use tight_layout to adjust subplot parameters for better fit\nplt.tight_layout()\n\n# Show plot\nplt.show()\n```\n\n### Key Adjustments:\n1. **Dynamic Rotation**: The `rotation_angle` is set to 45 degrees if the number of bars (or labels) is more than 10. This is a heuristic; you can adjust this threshold as needed.\n2. **`tight_layout()`**: This function adjusts the padding of the subplot to prevent clipping of tick-labels and other elements. It helps in automatically adjusting the layout to fit the labels better.\n\nBy implementing these changes, your chart should handle varying numbers of bars more gracefully without overlapping labels. Adjust the `rotation_angle` and `tight_layout()` usage as needed based on your specific data and visual preferences."
    }
]