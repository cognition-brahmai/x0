[
    {
        "role": "user",
        "content": "How can I convert a Django model object into a dictionary with all of its fields intact, including both foreign keys and fields with `editable=False`? Given the following Django model:\n\n```\nfrom django.db import models\n\nclass OtherModel(models.Model): pass\n\nclass SomeModel(models.Model):\n    normal_value = models.IntegerField()\n    readonly_value = models.IntegerField(editable=False)\n    auto_now_add = models.DateTimeField(auto_now_add=True)\n    foreign_key = models.ForeignKey(OtherModel, related_name=\"ref1\")\n    many_to_many = models.ManyToManyField(OtherModel, related_name=\"ref2\")\n```\n\nAnd this terminal input:\n\n```\nother_model = OtherModel()\nother_model.save()\ninstance = SomeModel()\ninstance.normal_value = 1\ninstance.readonly_value = 2\ninstance.foreign_key = other_model\ninstance.save()\ninstance.many_to_many.add(other_model)\ninstance.save()\n```\n\nI want to convert it into this dictionary:\n\n```\n{'auto_now_add': datetime.datetime(2015, 3, 16, 21, 34, 14, 926738, tzinfo=<UTC>),\n 'foreign_key': 1,\n 'id': 1,\n 'many_to_many': [1],\n 'normal_value': 1,\n 'readonly_value': 2}\n```\n\nI've already looked at these previous questions but the answers didn't satisfy my needs:\n\n - [Django: Converting an entire set of a Model's objects into a single dictionary](https://stackoverflow.com/questions/1123337/django-converting-an-entire-set-of-a-models-objects-into-a-single-dictionary)\n - [How can I turn Django Model objects into a dictionary and still have their foreign keys?](https://stackoverflow.com/questions/12382546/how-can-i-turn-django-model-objects-into-a-dictionary-and-still-have-their-forei)"
    },
    {
        "role": "assistant",
        "content": "To convert a Django model object into a dictionary with all of its fields intact, including foreign keys and fields with `editable=False`, you can create a custom function. This function will manually extract the desired fields from the model instance. Here's how you can achieve this:\n\n1. Use the model's `_meta` attribute to iterate over all fields.\n2. Handle foreign keys by getting their primary key value.\n3. Handle many-to-many fields by getting a list of primary key values.\n\nHere's the code to convert a `SomeModel` instance into a dictionary:\n\n```python\nfrom django.forms.models import model_to_dict\n\ndef model_to_custom_dict(instance):\n    # Get a dictionary of all fields, including those with `editable=False`\n    data = {}\n    \n    # Handle regular fields and foreign keys\n    for field in instance._meta.get_fields():\n        if field.many_to_many:\n            # Handle many-to-many fields\n            data[field.name] = list(getattr(instance, field.name).values_list('pk', flat=True))\n        elif field.one_to_many or field.many_to_one:\n            # Handle foreign keys\n            value = getattr(instance, field.name)\n            data[field.name] = value.pk if value else None\n        else:\n            # Handle other fields\n            data[field.name] = getattr(instance, field.name)\n    \n    return data\n\n# Example usage\nother_model = OtherModel.objects.create()\ninstance = SomeModel.objects.create(\n    normal_value=1,\n    readonly_value=2,\n    foreign_key=other_model\n)\ninstance.many_to_many.add(other_model)\n\ninstance_dict = model_to_custom_dict(instance)\nprint(instance_dict)\n```\n\nThis function will output the dictionary representation of the `SomeModel` instance with all fields including foreign keys and many-to-many fields properly serialized. Ensure that you have already created and saved instances before calling this function."
    }
]