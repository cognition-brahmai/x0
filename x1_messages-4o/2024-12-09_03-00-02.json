[
    {
        "role": "user",
        "content": "I am trying to create a two-by-two plot dynamically where the first row contains density functions and the second row contains CDFs. I want each of the columns to share the x-axis and each of the rows to share the y-axis. This means two objects aligned vertically should have the same x-axis, and two plots aligned horizontally should have the same y-axis. However, the 'sharex' and 'sharey' attributes force them to be the same for all of the subplots. How can I fix this sort of axes sharing? I understand that I could manually give each axis a share partner, but that wouldn't work with the following generic structure:\n\n```python\nfig, axes = plt.subplots(nrows=2, ncols=2, sharex=True)\nfor i, lam in enumerate(lams):\n    axesNow = [axs[i] for axs in axes]  # pick the ith column from axes\n    for i, Param.p in enumerate(pp):\n        axesNow[0].plot(somethingWithPDF)\n        axesNow[1].plot(somethingWithCDF)\n\nfor ax in axes.flatten(): ax.legend()\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired axis sharing where each column shares the x-axis and each row shares the y-axis, you can manually specify the axes that each subplot should share. This requires a bit of reorganization of your code to ensure that the correct axes are being shared without using the global `sharex` and `sharey` attributes. Here's how you can do it:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Example data\nlams = [0.5, 1.0]\npp = [0.2, 0.8]\n\n# Create a 2x2 grid of subplots without sharing\nfig, axes = plt.subplots(nrows=2, ncols=2, sharex=False, sharey=False)\n\n# Iterate over the parameters and create plots\nfor i, lam in enumerate(lams):\n    # Pick the ith column from axes\n    axesNow = [axes[j][i] for j in range(2)]\n    \n    for j, p in enumerate(pp):\n        # Example plotting for the PDF\n        x = np.linspace(0, 10, 100)\n        y_pdf = np.exp(-lam * x)  # Example PDF\n        axesNow[0].plot(x, y_pdf, label=f'PDF p={p}, lam={lam}')\n        \n        # Example plotting for the CDF\n        y_cdf = 1 - np.exp(-lam * x)  # Example CDF\n        axesNow[1].plot(x, y_cdf, label=f'CDF p={p}, lam={lam}')\n\n# Manually adjust the sharing\n# Columns share the x-axis\naxes[0][0].get_shared_x_axes().join(axes[0][0], axes[1][0])\naxes[0][1].get_shared_x_axes().join(axes[0][1], axes[1][1])\n# Rows share the y-axis\naxes[0][0].get_shared_y_axes().join(axes[0][0], axes[0][1])\naxes[1][0].get_shared_y_axes().join(axes[1][0], axes[1][1])\n\n# Add legends\nfor ax in axes.flatten():\n    ax.legend()\n\n# Display the plot\nplt.tight_layout()\nplt.show()\n```\n\n### Explanation:\n- **Manual axis sharing:** Instead of using `sharex=True` or `sharey=True` globally, we manually specify which axes should be shared using `get_shared_x_axes().join(...)` and `get_shared_y_axes().join(...)`.\n- **Iterating and plotting:** We plot the PDF and CDF in the respective subplots, ensuring that the correct axes in the grid are being used.\n- **Legend and layout:** After plotting, we add legends and use `plt.tight_layout()` to adjust spacing.\n\nThis approach allows you to have more granular control over which axes are shared in your subplot grid without relying on the global `sharex` and `sharey` attributes."
    }
]