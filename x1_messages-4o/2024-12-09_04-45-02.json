[
    {
        "role": "user",
        "content": "I am using Sphinx's automodule as documented here: https://www.sphinx-doc.org/en/master/usage/extensions/autodoc.html. When I write in a .rst file:\n\n```\n.. automodule:: my_module\n    :members:\n```\n\nIt documents my_module fine, but it doesn't find the inner modules like my_module.inner_module0 and my_module.inner_module1. Do I need to specify anything in the __init__.py file besides the __all__ variable? Also, I'm aware of `sphinx-apidoc`. However, that command documents far too much (exposes every function/folder including undocumented ones). How can I solve this issue?"
    },
    {
        "role": "assistant",
        "content": "When using Sphinx's `autodoc` extension to automatically document your Python modules, there are a few strategies you can employ to ensure that inner modules are also documented correctly without exposing everything excessively:\n\n1. **Ensure Proper Imports in `__init__.py`:**\n   You need to make sure that the inner modules are properly imported in your `__init__.py` file. This ensures that when the `automodule` directive processes `my_module`, it recognizes the inner modules as part of the package. If you haven\u2019t already, import them explicitly:\n\n   ```python\n   # my_module/__init__.py\n   from . import inner_module0\n   from . import inner_module1\n   ```\n\n2. **Use `autosummary`:**\n   The `autosummary` directive can be a useful tool to create summary tables for modules and classes and can automatically generate stub pages for all documented items. Here\u2019s how you can use it:\n\n   ```rst\n   .. autosummary::\n      :toctree: _autosummary\n      :recursive:\n\n      my_module\n   ```\n\n   This will create a summary of `my_module` and its inner modules, provided they are imported in `__init__.py`.\n\n3. **Manually Specify Inner Modules:**\n   If you want more control over what gets documented, you can manually specify each module you want to document in your `.rst` file:\n\n   ```rst\n   .. automodule:: my_module\n      :members:\n\n   .. automodule:: my_module.inner_module0\n      :members:\n\n   .. automodule:: my_module.inner_module1\n      :members:\n   ```\n\n4. **Control Visibility with `__all__`:**\n   Although `__all__` is primarily used to control what gets imported when you use `from module import *`, it can also help you manage what gets documented if you\u2019re using `sphinx-apidoc`. Ensure that `__all__` is defined in each module to list only the names you want exposed:\n\n   ```python\n   # my_module/inner_module0.py\n   __all__ = ['desired_function', 'desired_class']\n   ```\n\n5. **Customize `sphinx-apidoc` Output:**\n   If you're using `sphinx-apidoc` and want to avoid documenting everything, you can use the `--separate` flag to generate a separate `.rst` file for each module. This allows you to manually edit the generated files to include only what you want documented.\n\n   ```bash\n   sphinx-apidoc -o output_dir -F -H \"My Project\" --separate my_module/\n   ```\n\n6. **Exclude Certain Modules or Members:**\n   Use `:exclude-members:` option in the `automodule` directive to exclude specific members from being documented.\n\nBy following these steps, you should be able to document your main module along with its inner modules effectively, while also maintaining control over what gets documented."
    }
]