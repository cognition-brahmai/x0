[
    {
        "role": "user",
        "content": "How can I remove all JavaScript and style tags from an HTML document using the Python lxml library? I have figured out how to strip tags from an HTML document but this method leaves all the text, stripping the tags without removing the actual script. I have found a class reference to lxml.html.clean.Cleaner but I am unclear on how to use this class to clean the document. Could I get some assistance or a short example?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The `lxml` library in Python is a powerful tool for parsing and manipulating XML and HTML documents. The `lxml.html.clean` module provides a `Cleaner` class that you can use to remove specific elements like JavaScript and style tags from an HTML document.\n\nHere's a step-by-step example of how you can use the `Cleaner` class to remove all `<script>` and `<style>` tags from an HTML document:\n\n```python\nfrom lxml import html\nfrom lxml.html.clean import Cleaner\n\n# Sample HTML content\nhtml_content = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Sample Page</title>\n    <style>\n        body {background-color: #f3f3f3;}\n        p {color: red;}\n    </style>\n    <script type=\"text/javascript\">\n        console.log('Hello, World!');\n    </script>\n</head>\n<body>\n    <h1>Welcome to the Sample Page</h1>\n    <p>This is a paragraph.</p>\n</body>\n</html>\n\"\"\"\n\n# Parse the HTML content\ndocument = html.fromstring(html_content)\n\n# Initialize the Cleaner\ncleaner = Cleaner(style=True, scripts=True, javascript=True, page_structure=False, safe_attrs_only=False)\n\n# Clean the document\ncleaned_html = cleaner.clean_html(document)\n\n# Convert the cleaned document back to a string\ncleaned_html_string = html.tostring(cleaned_html, pretty_print=True).decode('utf-8')\n\nprint(cleaned_html_string)\n```\n\n### Explanation:\n\n1. **Importing Modules**: We import `html` from `lxml` for parsing and `Cleaner` from `lxml.html.clean`.\n\n2. **HTML Content**: We define a sample HTML string with `<style>` and `<script>` tags.\n\n3. **Parsing**: We parse the HTML content using `html.fromstring()`.\n\n4. **Cleaner Initialization**: We create an instance of `Cleaner`, specifying that we want to remove styles and scripts using the `style`, `scripts`, and `javascript` parameters. Other parameters like `page_structure` and `safe_attrs_only` are set to ensure the document's structure isn't affected and only the specified tags are removed.\n\n5. **Cleaning**: We call `clean_html()` on the `document`, which returns a cleaned version of the document.\n\n6. **Output**: We convert the cleaned document back to a string using `html.tostring()` and print it.\n\nThis will remove all `<script>` and `<style>` tags along with their contents, leaving the rest of the HTML intact."
    }
]