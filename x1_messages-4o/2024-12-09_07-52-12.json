[
    {
        "role": "user",
        "content": "How can I create a function that computes the factorial of an integer in Python?"
    },
    {
        "role": "assistant",
        "content": "Creating a function to compute the factorial of an integer in Python is a straightforward task. The factorial of a non-negative integer \\( n \\) is the product of all positive integers less than or equal to \\( n \\). You can implement this using either an iterative or a recursive approach. Below are examples of both methods:\n\n### Iterative Approach\n\n```python\ndef factorial_iterative(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\n\n# Example usage:\nprint(factorial_iterative(5))  # Output: 120\n```\n\n### Recursive Approach\n\n```python\ndef factorial_recursive(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial_recursive(n - 1)\n\n# Example usage:\nprint(factorial_recursive(5))  # Output: 120\n```\n\n### Explanation\n\n- **Iterative Approach**: This method uses a loop to multiply the numbers from 2 up to \\( n \\). The result is stored in a variable called `result`, which is initialized to 1.\n\n- **Recursive Approach**: This method calls the function itself, reducing the problem size by decrementing \\( n \\) each time until it reaches 0 or 1, at which point it returns 1. This is based on the mathematical definition of factorial: \\( n! = n \\times (n-1)! \\).\n\nBoth methods will give you the factorial of a non-negative integer. Remember to handle edge cases, such as negative inputs, where the factorial is not defined."
    }
]