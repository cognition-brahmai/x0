[
    {
        "role": "user",
        "content": "I am trying to create a plot with several diagonal lines of different slopes using matplotlib. I want to annotate these lines with text labels that match the slope of the lines. I've attempted using the 'text' and 'annotate' parameters for rotation, but they use screen coordinates, not data coordinates, which means they remain at 'x' degrees on the screen regardless of the xy ranges. Given that my 'x' and 'y' ranges differ by large amounts, and the apparent slope is affected by viewport size among other things, a fixed-degree rotation isn't working. Is there a robust way to rotate matplotlib annotation to match a line?"
    },
    {
        "role": "assistant",
        "content": "To annotate diagonal lines with text labels that match the slope of the lines in matplotlib, you'll want to ensure that the text rotation reflects the actual slope of the line in data coordinates. This can be achieved by calculating the angle of the line in the data coordinate system and then applying this angle to the text rotation. Here's a step-by-step guide on how to do this:\n\n1. **Calculate the slope**: Determine the slope of each line using the formula \\(\\text{slope} = \\frac{y_2 - y_1}{x_2 - x_1}\\).\n\n2. **Convert slope to angle**: Convert the slope to an angle in degrees using the arctangent function. The angle \\(\\theta\\) in degrees can be obtained using: \\(\\theta = \\text{np.degrees}(\\text{np.arctan}(\\text{slope}))\\).\n\n3. **Annotate the line**: Use the calculated angle to rotate the text annotation accordingly.\n\nHere's a code example demonstrating how to do this:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Define the lines with different slopes\nlines = [\n    {'x': [0, 10], 'y': [0, 10], 'label': 'Slope 1'},   # Slope = 1\n    {'x': [0, 10], 'y': [0, 20], 'label': 'Slope 2'},   # Slope = 2\n    {'x': [0, 10], 'y': [0, 5], 'label': 'Slope 0.5'},  # Slope = 0.5\n]\n\nplt.figure(figsize=(8, 6))\n\nfor line in lines:\n    x_values = line['x']\n    y_values = line['y']\n    plt.plot(x_values, y_values, label=line['label'])\n    \n    # Calculate the slope\n    slope = (y_values[1] - y_values[0]) / (x_values[1] - x_values[0])\n    \n    # Calculate the angle in degrees\n    angle = np.degrees(np.arctan(slope))\n    \n    # Annotate the line with the slope\n    plt.text((x_values[0] + x_values[1]) / 2, (y_values[0] + y_values[1]) / 2, \n             f'Slope: {slope}', rotation=angle, rotation_mode='anchor')\n\nplt.xlim(0, 10)\nplt.ylim(0, 25)\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\nplt.title('Diagonal Lines with Annotated Slopes')\nplt.grid(True)\nplt.show()\n```\n\n### Key Points:\n- **Slope Calculation**: Ensure the slope is calculated using the difference in y-values over the difference in x-values.\n- **Angle Conversion**: Use `np.degrees` and `np.arctan` to convert the slope to an angle in degrees.\n- **Text Annotation**: Use the calculated angle for the text rotation and position the text at the midpoint of the line.\n\nThis approach ensures that your annotations rotate according to the line's slope in the data coordinate system, regardless of the aspect ratio or viewport size."
    }
]