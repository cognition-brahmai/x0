[
    {
        "role": "user",
        "content": "Does Python 3 have a built-in 'foreach' function similar to JavaScript or other languages? I am looking for a function that loops over every element in an iterable without yielding or returning anything. I am aware that calling a function in Python might not be performant, but I believe a 'foreach' function would still be useful, especially when the API doesn't accept iterable objects or in cases where performance is not a primary concern. Is there a built-in Python equivalent to this function?\n\n```\ndef foreach(fn, iterable):\n    for x in iterable:\n        fn(x)\n```"
    },
    {
        "role": "assistant",
        "content": "Python does not have a built-in `foreach` function like some other languages, such as JavaScript. However, Python's `for` loop is quite powerful and serves a similar purpose. As you've described, you can easily create your own `foreach` function using a `for` loop, as you've already done in your example:\n\n```python\ndef foreach(fn, iterable):\n    for x in iterable:\n        fn(x)\n```\n\nThis function takes a function `fn` and an iterable `iterable`, and applies `fn` to each element in `iterable`. While this is not a built-in function, it provides the same functionality.\n\nPython also offers some built-in functions that can be used in a similar way, like `map()` and `list comprehensions`, but these are generally used when you want to transform data and collect the results, rather than simply applying a function for its side effects:\n\n- `map()` applies a function to all items in the input list and returns an iterator with the results. However, it does not execute the function for side effects only.\n\n- List comprehensions can also be used to iterate over an iterable and apply a function, but again, they are typically used to create a new list with the results.\n\nIf your goal is purely to execute a function for its side effects on each element of an iterable, then your `foreach` function is a simple and effective way to achieve that in Python."
    }
]