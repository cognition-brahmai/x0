[
    {
        "role": "user",
        "content": "I am packaging some popular Fortran codes into a Python package distribution. I am using a `setup.py` file for this purpose and I'm trying to wrap the Fortran extensions. I am finding myself needing to mix `setuptools` and `numpy.distutils`. I want to know if it's a bad practice to mix the two and whether the order of importing them matters. Specifically, should I always import `setuptools` first? Also, is there an updated tutorial for packaging extensions to `numpy`, particularly one discussing Fortran extensions? Here's the approach I'm using:\n\n```python\nfrom setuptools.command.develop import develop\nfrom numpy.distutils.core import Extension, setup\n\next_modules=[Extension(\"my_package.fortran_mod\", sources=['src/fortran_mod.f'])]\n\nclass MyDevelop(develop):\n  def run(self):\n    my_script()\n    develop.run(self)\n\nsetup(\n  ...\n  ext_modules=ext_modules,\n  cmdclass={'develop':MyDevelop})\n```"
    },
    {
        "role": "assistant",
        "content": "Mixing `setuptools` and `numpy.distutils` can be a bit tricky, but it is often necessary when you are dealing with packages that contain Fortran extensions, as `numpy.distutils` provides better support for compiling Fortran code.\n\n### Import Order\n\nRegarding the order of imports, it is generally a good practice to import `setuptools` before `numpy.distutils`. The reason for this is that `setuptools` can modify the behavior of the underlying `distutils` package, which `numpy.distutils` builds upon. Therefore, importing `setuptools` first ensures that `numpy.distutils` can take advantage of any enhancements or changes made by `setuptools`.\n\n### Best Practices\n\n1. **Import Order**: Always import `setuptools` first, as you mentioned. This ensures that `setuptools` enhancements are in effect.\n\n2. **Use of `numpy.distutils`**: Continue using `numpy.distutils.core.Extension` for building Fortran extensions since it is specifically designed to handle Fortran compilers and linking.\n\n3. **Compatibility**: Be aware that `numpy.distutils` is somewhat outdated and may not work seamlessly with all features of `setuptools`. Keep an eye on any deprecation warnings or issues as the Python ecosystem evolves.\n\n### Updated Tutorials\n\nFor updated resources on packaging with `numpy` and Fortran extensions, consider the following:\n\n1. **Numpy Documentation**: The official NumPy documentation has sections on building and distributing NumPy-based projects. While it may not always be up-to-date with the latest practices, it's a good starting point.\n\n2. **Scientific Python**: Tutorials and guides from the scientific Python community, such as SciPy or other scientific computing projects, often cover advanced packaging topics, including Fortran extensions.\n\n3. **Online Blogs and Articles**: Search for recent blog posts or articles from developers who have tackled similar problems. Websites like Medium or towardsdatascience.com often have practical examples and experiences shared by the community.\n\n4. **GitHub Repositories**: Explore open-source projects on GitHub that have similar requirements. Examining their `setup.py` files and build processes can provide insights into how others are handling Fortran extensions.\n\n5. **Forums and Q&A Sites**: Websites like Stack Overflow or the Python mailing list can be useful for specific questions or issues you encounter during the packaging process.\n\nBy staying informed and experimenting with different approaches, you can find the most effective strategy for packaging your Fortran code within a Python distribution."
    }
]