[
    {
        "role": "user",
        "content": "How can I list the full directory tree content in Python? I am aware that we can use `os.walk()` to list all subdirectories or all files in a directory, but I want to generate a more detailed output that lists all files and subdirectories within each directory, much like the following:\n\n```\n- Subdirectory 1:\n   - file11\n   - file12\n   - Sub-sub-directory 11:\n         - file111\n         - file112\n- Subdirectory 2:\n    - file21\n    - sub-sub-directory 21\n    - sub-sub-directory 22    \n        - sub-sub-sub-directory 221\n            - file 2211\n```"
    },
    {
        "role": "assistant",
        "content": "To generate a detailed directory tree similar to what you've described, you can use the `os.walk()` function in combination with some custom formatting to output a structured view of the directory contents. Here's a sample Python script that achieves this:\n\n```python\nimport os\n\ndef list_directory_tree(startpath):\n    for root, dirs, files in os.walk(startpath):\n        level = root.replace(startpath, '').count(os.sep)\n        indent = ' ' * 4 * level\n        print(f'{indent}- {os.path.basename(root)}/')\n        subindent = ' ' * 4 * (level + 1)\n        for f in files:\n            print(f'{subindent}- {f}')\n\n# Example usage:\nstart_directory = '/path/to/your/directory'\nlist_directory_tree(start_directory)\n```\n\n### Explanation:\n\n1. **`os.walk()`**: This function generates the file names in a directory tree by walking the tree either top-down or bottom-up.\n\n2. **Level Calculation**: The level of the current directory is calculated by counting the number of separators (`os.sep`, usually `/` on Unix or `\\` on Windows) in the relative path from the starting directory.\n\n3. **Indentation**: The indentation is dynamically adjusted based on the level of the current directory. This creates a visual hierarchy in the output.\n\n4. **Formatting**: The `print` statements format the output to include the directory name followed by any files within it, with appropriate indentation.\n\nReplace `'/path/to/your/directory'` with the path of the directory you want to list. This script will print the directory tree structure in a readable format, similar to your example."
    }
]