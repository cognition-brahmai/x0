[
    {
        "role": "user",
        "content": "How can I change the font (not the font size) in a plot made with matplotlib in python? I've seen some methods to change the default font by modifying some files in the matplotlib's default font folders, but I am looking for a less radical solution since I want to use more than one font in my plot (text, label, axis label, etc)."
    },
    {
        "role": "assistant",
        "content": "To change the font in a plot made with Matplotlib without modifying default settings or configuration files, you can set the font properties directly in your script. Matplotlib allows you to specify different fonts for different parts of your plot using the `fontdict` parameter in various functions or by setting the font properties globally using `rcParams`.\n\nHere's how you can do it:\n\n### Change Font for Specific Plot Elements\n\n1. **Title and Axis Labels:**\n   You can change the font for the title and axis labels by passing a dictionary of font properties to the `fontdict` parameter in `title()`, `xlabel()`, and `ylabel()` methods.\n\n   ```python\n   import matplotlib.pyplot as plt\n\n   plt.plot([1, 2, 3], [4, 5, 6])\n\n   plt.title('Title', fontdict={'family': 'serif', 'color': 'blue', 'size': 16})\n   plt.xlabel('X-axis', fontdict={'family': 'sans-serif', 'color': 'darkred', 'weight': 'bold', 'size': 14})\n   plt.ylabel('Y-axis', fontdict={'family': 'monospace', 'color': 'darkgreen', 'weight': 'light', 'size': 14})\n\n   plt.show()\n   ```\n\n2. **Text Elements:**\n   You can change the font of text elements using the `fontdict` parameter in the `text()` method.\n\n   ```python\n   plt.text(2, 5, 'Text', fontdict={'family': 'cursive', 'color': 'purple', 'size': 12})\n   ```\n\n### Change Font Globally Using `rcParams`\n\nYou can also set the font properties globally for all text elements in the plot using `matplotlib.rcParams`. This will apply to all text elements unless overridden by specific `fontdict` parameters.\n\n```python\nimport matplotlib.pyplot as plt\n\n# Set global font properties\nplt.rcParams['font.family'] = 'serif'\nplt.rcParams['font.size'] = 14\nplt.rcParams['font.weight'] = 'bold'\n\nplt.plot([1, 2, 3], [4, 5, 6])\nplt.title('Title')\nplt.xlabel('X-axis')\nplt.ylabel('Y-axis')\n\nplt.show()\n```\n\n### Using Font Manager for Custom Fonts\n\nIf you have custom fonts, you can use Matplotlib's font manager to specify a font path:\n\n```python\nimport matplotlib.font_manager as fm\n\n# Add your custom font path\nfont_path = '/path/to/your/font.ttf'\nfont_prop = fm.FontProperties(fname=font_path)\n\nplt.title('Title', fontproperties=font_prop)\nplt.xlabel('X-axis', fontproperties=font_prop)\nplt.ylabel('Y-axis', fontproperties=font_prop)\n\nplt.plot([1, 2, 3], [4, 5, 6])\nplt.show()\n```\n\nBy using these methods, you can customize the fonts of different elements in your plot without altering the default settings for all matplotlib plots."
    }
]