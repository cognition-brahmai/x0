[
    {
        "role": "user",
        "content": "How can I interpret the GPS information from the EXIF data of a photo using the PIL library in Python? The GPSInfo looks like this:\n\n```python\n{1: 'N', \n 2: ((1, 1), (20, 1), (5365, 100)), \n 3: 'E', \n 4: ((103, 1), (41, 1), (1052, 100)), \n 5: 0, \n 6: (43, 1), \n 7: ((15, 1), (32, 1), (7, 1)), \n 16: 'T', \n 17: (77473, 452), \n 29: '2013:10:25'}\n```\n\nI noticed that the tags are not continuous, so is there a reference that I can use to understand the meaning of these number tags?"
    },
    {
        "role": "assistant",
        "content": "To interpret the GPS information from the EXIF data of a photo using the Python Imaging Library (PIL), you'll first need to understand the structure of the EXIF GPS data. The GPS information is stored as part of the EXIF metadata, and each piece of information is associated with a specific tag number. Here\u2019s a breakdown and a guide to interpreting the GPS tags:\n\n### Common GPS EXIF Tags\n\n1. **1 - GPSLatitudeRef**: Indicates whether the latitude is north or south (e.g., 'N' or 'S').\n2. **2 - GPSLatitude**: Latitude as an array of three values: degrees, minutes, and seconds.\n3. **3 - GPSLongitudeRef**: Indicates whether the longitude is east or west (e.g., 'E' or 'W').\n4. **4 - GPSLongitude**: Longitude as an array of three values: degrees, minutes, and seconds.\n5. **5 - GPSAltitudeRef**: Indicates the altitude reference (0 for above sea level, 1 for below sea level).\n6. **6 - GPSAltitude**: Altitude in meters above the sea level.\n7. **7 - GPSTimeStamp**: Time as an array of three values: hours, minutes, and seconds.\n16. **16 - GPSMapDatum**: Geodetic survey data used by the GPS receiver.\n17. **17 - GPSDateStamp**: Date of GPS data in the format YYYY:MM:DD.\n29. **29 - GPSProcessingMethod**: Name of the method used for location finding.\n\n### Extracting and Converting GPS Data\n\nTo convert the GPS coordinates from the EXIF data to a human-readable format (decimal degrees), follow these steps:\n\n```python\nfrom PIL import Image\nfrom fractions import Fraction\n\ndef convert_to_degrees(value):\n    \"\"\"Convert the GPS coordinates stored in the EXIF to degrees in float format.\"\"\"\n    d = float(value[0][0]) / float(value[0][1])\n    m = float(value[1][0]) / float(value[1][1])\n    s = float(value[2][0]) / float(value[2][1])\n    return d + (m / 60.0) + (s / 3600.0)\n\ndef get_exif_data(image_path):\n    \"\"\"Extract EXIF data from an image.\"\"\"\n    image = Image.open(image_path)\n    exif_data = image._getexif()\n\n    if not exif_data:\n        return None\n\n    gps_info = exif_data.get(34853)  # 34853 is the tag for GPSInfo\n\n    if not gps_info:\n        return None\n\n    # Extract GPS data\n    latitude = convert_to_degrees(gps_info[2])\n    if gps_info[1] == 'S':\n        latitude = -latitude\n\n    longitude = convert_to_degrees(gps_info[4])\n    if gps_info[3] == 'W':\n        longitude = -longitude\n\n    gps_data = {\n        'Latitude': latitude,\n        'Longitude': longitude,\n        'Altitude': gps_info[6][0] / gps_info[6][1] if 6 in gps_info else None,\n        'TimeStamp': gps_info[7] if 7 in gps_info else None,\n        'DateStamp': gps_info[29] if 29 in gps_info else None\n    }\n\n    return gps_data\n\n# Example usage\nimage_path = 'your_photo.jpg'\ngps_data = get_exif_data(image_path)\nif gps_data:\n    print(f\"Latitude: {gps_data['Latitude']}\")\n    print(f\"Longitude: {gps_data['Longitude']}\")\n    print(f\"Altitude: {gps_data['Altitude']} meters\")\n    print(f\"Timestamp: {gps_data['TimeStamp']}\")\n    print(f\"Date: {gps_data['DateStamp']}\")\nelse:\n    print(\"No GPS data found.\")\n```\n\n### Explanation\n\n- **convert_to_degrees**: This function converts the tuple format of degrees, minutes, and seconds into a decimal format.\n- **exif_data.get(34853)**: This retrieves the GPSInfo tag from the EXIF data.\n- **Latitude and Longitude**: These are converted to decimal degrees. If the reference is 'S' or 'W', the values are negated to reflect the correct hemisphere.\n- **Altitude and Timestamp**: These are extracted directly if available.\n\n### Reference\n\nFor a complete reference of EXIF tags, you can refer to the EXIF specification or libraries like `piexif` that provide detailed tag mappings."
    }
]