[
    {
        "role": "user",
        "content": "I am attempting to set up multiple Django applications under the same domain at different subdirectories, such as http://example.com/site1/ and http://example.com/site2/. Each site works individually, but when I try to run both side-by-side, apache directs me to whichever site the worker process loaded first, ignoring the WSGIScriptAlias directive. This behavior persists regardless of what I do, including setting WSGIProcessGroup, and choosing between daemon mode and embedded mode. Can you help me figure out what I might be doing wrong?"
    },
    {
        "role": "assistant",
        "content": "When setting up multiple Django applications under the same domain but in different subdirectories using Apache with mod_wsgi, it's crucial to ensure that your Apache configuration is correctly set up to handle multiple WSGI applications. Here are some steps and considerations that might help you resolve the issue:\n\n1. **Separate WSGI Files**: Ensure each Django application has its own WSGI file. These files will be referenced in your Apache configuration.\n\n2. **Apache Configuration**: Your `httpd.conf` or site-specific configuration file should define separate `WSGIScriptAlias` directives for each application. It should look something like this:\n\n   ```apache\n   WSGIDaemonProcess site1 python-path=/path/to/site1:/path/to/virtualenv/lib/python3.x/site-packages\n   WSGIScriptAlias /site1 /path/to/site1/site1/wsgi.py process-group=site1 application-group=%{GLOBAL}\n\n   <Directory /path/to/site1/site1>\n       <Files wsgi.py>\n           Require all granted\n       </Files>\n   </Directory>\n\n   WSGIDaemonProcess site2 python-path=/path/to/site2:/path/to/virtualenv/lib/python3.x/site-packages\n   WSGIScriptAlias /site2 /path/to/site2/site2/wsgi.py process-group=site2 application-group=%{GLOBAL}\n\n   <Directory /path/to/site2/site2>\n       <Files wsgi.py>\n           Require all granted\n       </Files>\n   </Directory>\n   ```\n\n3. **Process Groups**: Make sure you are using distinct `process-group` and `application-group` settings for each application to avoid conflicts and ensure that each application runs in its own process space.\n\n4. **Python Path**: Verify that the `python-path` within the `WSGIDaemonProcess` directive points to the correct project directory and virtual environment for each application.\n\n5. **Virtual Hosts**: If you are using Virtual Hosts, ensure that each application is configured correctly within its own `<VirtualHost>` block, if applicable.\n\n6. **Directory Permissions**: Ensure your Apache user has the necessary permissions to access the directories and files for each Django project.\n\n7. **WSGI Application Group**: Using `application-group=%{GLOBAL}` helps in ensuring that each site operates independently, but if you're using embedded mode, ensure to use distinct application groups.\n\n8. **Restart Apache**: After making changes, don't forget to restart Apache to apply the new configuration.\n\n9. **Check Apache Error Logs**: Look into Apache's error log for any clues if issues persist. This can provide hints on what might be going wrong.\n\n10. **Django Settings**: Double-check that each site\u2019s settings (like `ALLOWED_HOSTS`) are correctly configured to allow the domain and subdirectory.\n\nBy ensuring these configurations are correctly set, you should be able to run multiple Django applications under the same domain in different subdirectories without them interfering with each other."
    }
]