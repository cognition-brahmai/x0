[
    {
        "role": "user",
        "content": "I want to perform pattern matching on lists in Python, similar to what I can do in Haskell. For example, in Haskell, I could do something like this: \n\n```Haskell\nfun (head : rest) = ...\n```\n\nSo, when I pass in a list, `head` will be the first element, and `rest` will be the trailing elements. I can do something similar with tuples in Python:\n\n```Python\n(var1, var2) = func_that_returns_a_tuple()\n```\n\nNow, I have a function in Python that returns a list, and I have this code:\n\n```Python\nls = my_func()\n(head, rest) = (ls[0], ls[1:])\n```\n\nI'm wondering if there's a way to accomplish this in one line in Python instead of the current two lines."
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve a similar pattern-matching behavior in Python in a single line by using tuple unpacking. You can unpack the first element and the rest of the list directly in one line as follows:\n\n```python\nhead, *rest = my_func()\n```\n\nIn this line, `head` will take the first element of the list returned by `my_func()`, and `*rest` will capture the remaining elements of the list in a new list called `rest`. This syntax is quite similar to pattern matching in Haskell and is a clean way to achieve the same effect in Python."
    }
]