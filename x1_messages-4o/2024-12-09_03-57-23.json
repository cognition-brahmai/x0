[
    {
        "role": "user",
        "content": "How can I distribute multiple Python packages using a single setup.py file? I have several Python packages that share a common set of utilities and I want to distribute them as separate packages. I have a directory structure as follows:\n\n```\n/packages\n    |-setup.py\n    |-__init__.py\n    |-MANIFEST.in\n    |-com\n    |    |-__init__.py\n    |    |-company\n    |    |    |-__init__.py\n    |    |    |-subdir1\n    |    |    |    |-__init__.py\n    ...\n    |-utilities\n    |    |-__init__.py\n    |    |-utils1.py\n    |    |-utils2.py\n    |    |-...\n    |-package1\n    |    |-__init__.py\n    |    |-package1_1.py\n    |    |-package1_2.py\n    |    |-...\n    |-package2\n    |    |-__init__.py\n    |    |-package2_1.py\n    |    |-package2_2.py\n    |    |-...\n```\n\nCurrently, I'm using a setup file named package1_setup.py to build package1 that looks similar to this:\n\n```\nfrom setuptools import setup,find_packages\nimport sys, os\n\nversion = '0.1'\n\nsetup(name = 'package1',\n      version = version,\n      description = 'Package 1',\n      author = 'Rob Marshall',\n      author_email = 'rob.marshall17@gmail.com',\n      url = None,\n      packages = [\"package1\",\"utils\",\"com\"],\n      include_package_data = True,\n      zip_safe = False,\n      entry_points = {\n                      'console_scripts':[\n                                         'tool1 = package1.package1_1:main',\n                                         'tool2 = package1.package1_2:main',\n                                         ],\n                      },\n      install_requires = [\n                          'boto >= 2.40',\n                          'python-swiftclient >= 3.2.0',\n                          'fabric >= 1.13.0',\n                          ],\n      )\n```\n\nI build package1 using the command:\n\n```\n% python package1_setup.py sdist\n```\n\nThis creates an installable source package but it feels somewhat awkward because the setup.py is named package1_setup.py. Is there a better way to do this?"
    },
    {
        "role": "assistant",
        "content": "To distribute multiple Python packages with shared utilities using a single `setup.py` file, you can take advantage of the `setuptools` package's ability to find and specify different packages and subpackages. Here's a streamlined approach to reorganize your setup:\n\n1. **Directory Structure:** Ensure that your directory structure clearly separates each package you intend to distribute. Each package directory should have its own `__init__.py` file.\n\n2. **Single `setup.py`:** Create a single `setup.py` file at the top level of your project directory. This file will be responsible for configuring the build and distribution process for all your packages. \n\n3. **Configuration:** Use `setuptools` to specify each package and its dependencies. You can leverage `find_packages()` to automatically discover packages, or manually list them if needed.\n\nHere's an example of how you can structure your `setup.py`:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='my_project',\n    version='0.1',\n    description='My Project with Multiple Packages',\n    author='Rob Marshall',\n    author_email='rob.marshall17@gmail.com',\n    url=None,\n    packages=find_packages(where='.', exclude=['tests*']),  # Adjust as necessary\n    include_package_data=True,\n    zip_safe=False,\n    entry_points={\n        'console_scripts': [\n            'tool1 = package1.package1_1:main',\n            'tool2 = package1.package1_2:main',\n            # Add additional entry points as needed\n        ],\n    },\n    install_requires=[\n        'boto >= 2.40',\n        'python-swiftclient >= 3.2.0',\n        'fabric >= 1.13.0',\n        # Add any other shared dependencies\n    ],\n)\n```\n\n**Key Points:**\n\n- **Packages:** The `find_packages()` function will automatically find packages in your directory. You can specify the `where` parameter to define the root directory and use `exclude` to omit certain directories like tests.\n\n- **Entry Points:** Define console scripts for each package that requires command-line interfaces.\n\n- **Install Requires:** List any dependencies that your packages share.\n\n- **Building and Distributing:** You can now build your entire project using:\n\n  ```bash\n  python setup.py sdist\n  ```\n\n  This command will create a source distribution for all included packages.\n\n**Additional Tips:**\n\n- If you need separate distributions for each package, you might consider using a tool like `setuptools_scm` for better version management or creating separate `setup.py` scripts in each package directory, although that diverges from a single setup file approach.\n\n- Consider using a tool like `tox` or `nox` for testing across different environments, which can help ensure that shared utilities function correctly across all packages.\n\nBy following this approach, you consolidate your build and distribution logic, making it easier to manage and distribute multiple packages with shared components."
    }
]