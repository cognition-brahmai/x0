[
    {
        "role": "user",
        "content": "I have a script that converts a CSV file to an XLSX file using `openpyxl`. But, each time I run it, the width of the columns in the generated XLSX file is very narrow. I am required to manually widen them with the mouse to read the data. I am seeking assistance on how to programmatically set the column width in `openpyxl`. The script I am currently using is as follows:\n\n```python\n#!/usr/bin/python2.6\nimport csv\nfrom openpyxl import Workbook\nfrom openpyxl.cell import get_column_letter\n\nf = open('users_info_cvs.txt', \"rU\")\n\ncsv.register_dialect('colons', delimiter=':')\n\nreader = csv.reader(f, dialect='colons')\n\nwb = Workbook()\ndest_filename = r\"account_info.xlsx\"\n\nws = wb.worksheets[0]\nws.title = \"Users Account Information\"\n\nfor row_index, row in enumerate(reader):\n    for column_index, cell in enumerate(row):\n        column_letter = get_column_letter((column_index + 1))\n        ws.cell('%s%s'%(column_letter, (row_index + 1))).value = cell\n\nwb.save(filename = dest_filename)\n```"
    },
    {
        "role": "assistant",
        "content": "To set the column width programmatically using `openpyxl`, you need to calculate the appropriate width for each column based on the content. You can iterate over each cell to determine the length of its content and set the column width accordingly. Here's an updated version of your script that sets the column width:\n\n```python\n#!/usr/bin/python2.6\nimport csv\nfrom openpyxl import Workbook\nfrom openpyxl.utils import get_column_letter\n\ndef set_column_widths(ws):\n    for column_index, column_cells in enumerate(ws.columns, start=1):\n        max_length = 0\n        for cell in column_cells:\n            try:\n                if len(str(cell.value)) > max_length:\n                    max_length = len(str(cell.value))\n            except:\n                pass\n        adjusted_width = (max_length + 2)\n        ws.column_dimensions[get_column_letter(column_index)].width = adjusted_width\n\nf = open('users_info_cvs.txt', \"rU\")\n\ncsv.register_dialect('colons', delimiter=':')\n\nreader = csv.reader(f, dialect='colons')\n\nwb = Workbook()\ndest_filename = r\"account_info.xlsx\"\n\nws = wb.active\nws.title = \"Users Account Information\"\n\nfor row_index, row in enumerate(reader):\n    for column_index, cell in enumerate(row):\n        column_letter = get_column_letter(column_index + 1)\n        ws.cell(row=row_index + 1, column=column_index + 1, value=cell)\n\nset_column_widths(ws)\n\nwb.save(filename=dest_filename)\n```\n\n### Key Changes:\n\n1. **Function `set_column_widths(ws)`**:\n   - This function iterates over each column, determines the maximum length of content in each column, and sets the width accordingly. Adding a small buffer (like `+2`) ensures there's some extra space.\n\n2. **Using `ws.active`**:\n   - Changed `ws = wb.worksheets[0]` to `ws = wb.active` for clarity and compatibility with newer versions of `openpyxl`.\n\n3. **Column Width Adjustment**:\n   - The script dynamically adjusts each column's width based on its longest cell entry.\n\nBy incorporating these changes, the generated XLSX file will have columns with appropriate widths, making the data easily readable without manual adjustments."
    }
]