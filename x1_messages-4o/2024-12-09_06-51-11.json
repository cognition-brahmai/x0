[
    {
        "role": "user",
        "content": "How can I include a stacktrace in my Django 500.html page? I'm currently using Django 1.0 and I'm preparing to deploy my application. I'll be setting the DEBUG setting to False for deployment, but I would still like to include the stacktrace on my 500.html page when errors occur. This would allow users to copy and paste the errors and easily email them to the developers. Could you suggest the best approach to solve this issue?"
    },
    {
        "role": "assistant",
        "content": "To include a stack trace in your 500.html page in a Django application where `DEBUG` is set to `False`, you need to handle this carefully to avoid exposing sensitive information to end-users. However, for development or internal use, you can use the following approach:\n\n1. **Custom Error View**:\n   Create a custom error view that captures the exception and its stack trace. You can then pass this information to your 500.html template.\n\n2. **Custom Middleware**:\n   Implement custom middleware that captures exceptions and saves the stack trace to be displayed later.\n\nHere's a basic example of how you can implement a custom error view:\n\n1. **Create a Custom Error View**:\n\n   Create a view in your `views.py` file to handle server errors.\n\n   ```python\n   from django.shortcuts import render\n   import traceback\n\n   def custom_server_error(request, template_name='500.html'):\n       \"\"\"\n       Custom 500 error handler.\n       \"\"\"\n       type_, value, tb = sys.exc_info()\n       stack_trace = traceback.format_exception(type_, value, tb)\n\n       return render(request, template_name, {'stack_trace': stack_trace})\n   ```\n\n2. **Update Your URL Configuration**:\n\n   In your `urls.py`, point the handler500 to your custom view:\n\n   ```python\n   from django.conf.urls import handler500\n   from your_app.views import custom_server_error\n\n   handler500 = custom_server_error\n   ```\n\n3. **Modify Your 500.html Template**:\n\n   Edit your `500.html` template to display the stack trace. You can format it as needed:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <title>Server Error</title>\n   </head>\n   <body>\n       <h1>Server Error (500)</h1>\n       <p>Something went wrong. Please contact the administrator.</p>\n       <h2>Stack Trace:</h2>\n       <pre>{{ stack_trace|escape }}</pre>\n   </body>\n   </html>\n   ```\n\n**Caution**: Be very careful with this approach in a production environment. Exposing stack traces can reveal sensitive information about your codebase and server configuration to end-users, which can be a security risk. Consider using logging to capture stack traces instead and keep error pages user-friendly and free from technical details in production. To safely capture and monitor errors, consider using a service like Sentry or integrate Django's built-in error logging with your preferred logging system."
    }
]