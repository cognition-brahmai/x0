[
    {
        "role": "user",
        "content": "I'm using Flask/jinja2 and I'm encountering an issue where my HTML content is being escaped when I want it to display as HTML. I'm pulling a feed from an RSS and storing the data in an AppEngine database. The RSS feed content includes the full HTML. Here is my Python code:\n\n```python\n@app.route(\"/rssRead\")\ndef pullRss():\n    feedItem = db.getFeedItemByName(request.args.get('title',None), request.args.get('key',None))\n    return render_template(\"rss.html\", data= Markup(feedItem.html).unescape())\n```\n\nMy HTML template is as follows:\n\n```jinja\n{% extends \"layout.html\" %}\n{% block body %}\n{{ data }}\n{% endblock %}\n```\n\nWhen I view the page, the actual HTML markup is displayed. How can I unescape the HTML data?"
    },
    {
        "role": "assistant",
        "content": "When you're dealing with HTML content in Jinja2 templates and want to render it as actual HTML rather than escaped text, you need to ensure that the content is marked as safe so that Jinja2 knows not to escape it. The `Markup` class from the `markupsafe` module is designed for this purpose.\n\nHowever, in your code snippet, the use of `Markup(...).unescape()` isn't necessary and might be causing unintended behavior. Instead, you can directly use `Markup` to mark the content as safe.\n\nHere's how you can modify your code:\n\n1. **Ensure `Markup` is properly used**: You should pass the HTML content directly to `Markup` to ensure it's rendered as HTML.\n\n2. **Remove unnecessary `.unescape()`**: The `unescape()` method is not needed in this context.\n\nHere's the updated code:\n\n```python\nfrom flask import Markup\n\n@app.route(\"/rssRead\")\ndef pullRss():\n    feedItem = db.getFeedItemByName(request.args.get('title', None), request.args.get('key', None))\n    # Ensure the HTML content is marked as safe\n    return render_template(\"rss.html\", data=Markup(feedItem.html))\n```\n\nBy passing `Markup(feedItem.html)` directly to the template, Jinja2 will not escape the content, and it will be rendered as HTML.\n\n**Note**: Be careful when rendering HTML content from external sources like RSS feeds, as this can introduce security vulnerabilities such as Cross-Site Scripting (XSS). Always ensure that the content is sanitized or comes from a trusted source."
    }
]