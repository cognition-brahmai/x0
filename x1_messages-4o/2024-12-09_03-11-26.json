[
    {
        "role": "user",
        "content": "I have a numerical list in Python, `myList = [1, 2, 3, 100, 5]`, and I want to sort this list to obtain `[1, 2, 3, 5, 100]`. However, I am not just interested in the sorted list, but I also want to get the indices of the elements from the original list in the sorted order, that is, `[0, 1, 2, 4, 3]`, similar to MATLAB's sort function that returns both values and indices. How can I achieve this in Python?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can achieve this by using the `sorted` function along with the `enumerate` function. The `enumerate` function will help you track the original indices of the elements as you sort the list. Here's how you can do it:\n\n```python\n# Your original list\nmyList = [1, 2, 3, 100, 5]\n\n# Enumerate the list to track original indices\nindexed_list = list(enumerate(myList))\n\n# Sort the list of tuples based on the values\nsorted_indexed_list = sorted(indexed_list, key=lambda x: x[1])\n\n# Extract the sorted values and sorted indices\nsorted_values = [element[1] for element in sorted_indexed_list]\nsorted_indices = [element[0] for element in sorted_indexed_list]\n\nprint(\"Sorted Values:\", sorted_values)\nprint(\"Original Indices in Sorted Order:\", sorted_indices)\n```\n\nThis will give you the sorted values `[1, 2, 3, 5, 100]` and the original indices of these sorted values `[0, 1, 2, 4, 3]`, as you desired."
    }
]