[
    {
        "role": "user",
        "content": "Is there an asynchronous Python ORM other than Twistar that I can use? I'm specifically looking for a lightweight ORM for a non-blocking API, which is built on top of tornado. I know I can write raw SQL queries using momoko, but I prefer to work with objects."
    },
    {
        "role": "assistant",
        "content": "Yes, there are several asynchronous Python ORMs that you can use for a non-blocking API, especially if you're working with Tornado. Here are a few options:\n\n1. **Tortoise-ORM**: Tortoise-ORM is a full-featured asynchronous ORM inspired by Django. It's built to work with asyncio and is compatible with Tornado as well. It's lightweight and easy to use, making it a suitable choice for your needs.\n\n2. **Gino**: Gino is another asynchronous ORM built on top of SQLAlchemy core, designed for asyncio. It offers a lightweight and straightforward approach to working with PostgreSQL databases. While it primarily targets asyncio, it can be integrated with Tornado using appropriate adaptors.\n\n3. **Databases**: This is not an ORM itself but a database interface for asyncio using SQLAlchemy core. It allows you to work with databases asynchronously, and you can use it in combination with an ORM like SQLAlchemy for a more object-oriented approach.\n\n4. **Piccolo**: Piccolo is a fast, asynchronous ORM that is designed to be simple and easy to use, yet powerful. It supports asyncio and can be integrated with Tornado for building non-blocking APIs.\n\n5. **Ormantic**: Similar to Pydantic but for ORM purposes, Ormantic can work asynchronously and is lightweight, making it a good candidate for non-blocking Tornado applications.\n\nThese options offer a range of features and capabilities, so you might want to evaluate them based on your specific requirements and preferences."
    }
]