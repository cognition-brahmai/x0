[
    {
        "role": "user",
        "content": "How can I create a user from Django shell that stores the user password in an encrypted format, instead of plain text? When I create a user from `django-admin`, the passwords are encrypted, but creating a user from Django shell leaves the password in plain text. I am also trying to implement a REST style API for a simple blog app. When I insert a user through a POST request, passing JSON, the password also remains as plain text. How can I override this behavior?"
    },
    {
        "role": "assistant",
        "content": "When you create a user in Django, it's important to ensure that passwords are stored securely using hashing algorithms. Both the Django shell and your REST API should follow this practice. Here's how you can achieve this:\n\n### Creating a User with Encrypted Password in Django Shell\n\nWhen you create a user through the Django shell, you should use Django's `User` model's `create_user` method, which automatically handles password hashing. Here's how you can do it:\n\n1. **Open the Django Shell:**\n   ```bash\n   python manage.py shell\n   ```\n\n2. **Create a User:**\n   ```python\n   from django.contrib.auth.models import User\n\n   # This will automatically hash the password\n   user = User.objects.create_user(username='your_username', password='your_password')\n   user.save()\n   ```\n\nThe `create_user` method takes care of hashing the password using Django's `make_password` function, ensuring that the password is stored securely.\n\n### Handling Password in REST API\n\nWhen implementing a REST API, you'll want to ensure that passwords are hashed before being saved to the database. If you're using Django Rest Framework (DRF), you can achieve this by overriding the `create` method in your serializer.\n\nHere's an example of how you might do this:\n\n1. **Create a Serializer:**\n   ```python\n   from rest_framework import serializers\n   from django.contrib.auth.models import User\n\n   class UserSerializer(serializers.ModelSerializer):\n       class Meta:\n           model = User\n           fields = ['username', 'password']\n\n       def create(self, validated_data):\n           # Use the create_user method to ensure the password is hashed\n           user = User.objects.create_user(\n               username=validated_data['username'],\n               password=validated_data['password']\n           )\n           return user\n   ```\n\n2. **Use the Serializer in Your View:**\n   If you're using a viewset or API view, make sure to use this serializer to handle user creation.\n\nBy using the `create_user` method in your serializer, you ensure that passwords are hashed before being stored, even when creating users via an API request. This approach maintains the integrity and security of user passwords across your application."
    }
]