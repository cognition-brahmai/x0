[
    {
        "role": "user",
        "content": "How can I manually generate a .pyc file from a .py file? I am unable to rely on Python's \"import\" statement to generate .pyc file automatically. Is there a method to create a function like this:\n\n```python\ndef py_to_pyc(py_filepath, pyc_filepath):\n    ...\n```"
    },
    {
        "role": "assistant",
        "content": "Yes, you can manually generate a `.pyc` file from a `.py` file without using the import statement by utilizing the `py_compile` module in Python. Here's a function that you can use to achieve this:\n\n```python\nimport py_compile\n\ndef py_to_pyc(py_filepath, pyc_filepath):\n    try:\n        # Compile the .py file to the specified .pyc file\n        py_compile.compile(py_filepath, cfile=pyc_filepath, doraise=True)\n        print(f\"Successfully compiled {py_filepath} to {pyc_filepath}\")\n    except py_compile.PyCompileError as compile_error:\n        print(f\"Compilation failed: {compile_error}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n# Example usage:\n# py_to_pyc('example.py', 'example.pyc')\n```\n\n### Explanation:\n- The `py_compile.compile()` function is used to compile the given Python source file into a bytecode file (.pyc).\n- The `cfile` parameter specifies the target path for the compiled .pyc file.\n- The `doraise=True` parameter ensures that exceptions are raised if compilation fails, allowing you to handle them with a try-except block.\n- The function prints a success message if compilation is successful, otherwise, it prints an error message.\n\nThis function will help you generate a `.pyc` file manually by specifying the source `.py` file and the target `.pyc` file path."
    }
]