[
    {
        "role": "user",
        "content": "How can I modify my Python code to pretty print a dictionary into JSON format without adding a newline for each list element? Currently, I'm using this code:\n\n```python\nimport json\nd = {'a': 'blah', 'b': 'foo', 'c': [1,2,3]}\nprint(json.dumps(d, indent = 2, separators=(',', ': ')))\n```\n\nThis results in the following output:\n\n```json\n{\n  \"a\": \"blah\",\n  \"c\": [\n    1,\n    2,\n    3\n  ],\n  \"b\": \"foo\"\n}\n```\n\nHowever, I would like to have the list elements on the same line, like so:\n\n```json\n{\n  \"a\": \"blah\",\n  \"c\": [1, 2, 3],\n  \"b\": \"foo\"\n}\n```\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired formatting where the list elements are on the same line but the rest of the JSON is pretty printed, you can use a custom JSON encoder. Here's how you can modify your code:\n\n```python\nimport json\n\nclass CustomEncoder(json.JSONEncoder):\n    def __init__(self, *args, **kwargs):\n        # Call the base class constructor\n        super().__init__(*args, **kwargs)\n\n    def iterencode(self, o, _one_shot=False):\n        # Use the default separator for lists\n        if isinstance(o, list):\n            return '[' + ', '.join(map(json.dumps, o)) + ']'\n        else:\n            # Use the default encoder for other objects\n            return super().iterencode(o, _one_shot)\n\nd = {'a': 'blah', 'b': 'foo', 'c': [1, 2, 3]}\nprint(json.dumps(d, indent=2, separators=(',', ': '), cls=CustomEncoder))\n```\n\n### Explanation:\n- **CustomEncoder**: This subclass of `json.JSONEncoder` overrides the `iterencode` method. It provides a specific encoding for lists to keep their elements on the same line.\n- **iterencode**: When the object being encoded is a list, it's manually joined into a single line with `[ ]`. For other objects, it falls back to the default encoding behavior of `json.JSONEncoder`.\n\nThis approach gives you the flexibility to have fine control over the JSON serialization process, particularly for lists."
    }
]