[
    {
        "role": "user",
        "content": "How can I correctly document lists, optional arguments, and return types for generators in Google-style docstrings using Sphinx-Napoleon? I've tried using the following formats:\n\nFor lists:\n<pre><code>List[type]\nlist of type\n</code></pre>\n\nFor optional arguments:\n<pre><code>Optional[type]\ntype, optional\n</code></pre>\n\nFor return types for generators:\n<pre><code>Yields:\n   type: \n</code></pre>\n\nHowever, they all produce unsatisfactory output that doesn't match the rest of my generated documentation. For instance, using \"Optional[type]\" simply yields \"Optional[type]\" without any link for \"type\". I've encountered the same issues across all built-in themes. How should I document these elements correctly using Google-style docstrings with Sphinx-Napoleon?"
    },
    {
        "role": "assistant",
        "content": "To correctly document lists, optional arguments, and return types for generators in Google-style docstrings using Sphinx-Napoleon, you should follow the specific formatting that works well with Sphinx and its type annotations. Here's a guide on how to document these elements:\n\n### Lists\n\nWhen documenting lists, you should specify the list type using the `list` keyword followed by the type of elements the list contains. The recommended format is:\n\n```python\nArgs:\n    param_name (list[type]): Description of the parameter.\n```\n\n### Optional Arguments\n\nFor optional arguments, use the `Optional` keyword from the `typing` module. However, in Google-style docstrings, you can document them simply by noting that the parameter is optional. Use the `, optional` suffix in the description:\n\n```python\nArgs:\n    param_name (type, optional): Description of the parameter. Defaults to some_value.\n```\n\n### Return Types for Generators\n\nWhen documenting generators, use the `Yields` section to describe the type of values the generator yields. This section is specifically for generators, as they yield values instead of returning them:\n\n```python\nYields:\n    type: Description of the yielded values.\n```\n\n### Example\n\nHere is an example that combines all of the elements:\n\n```python\ndef example_function(param1, param2=None):\n    \"\"\"Example function with list, optional argument, and generator.\n\n    Args:\n        param1 (list[str]): A list of strings to be processed.\n        param2 (int, optional): An optional integer parameter. Defaults to None.\n\n    Yields:\n        str: Each processed string from the list.\n    \"\"\"\n    if param2 is not None:\n        # Process with param2\n        pass\n    for item in param1:\n        yield item.upper()\n```\n\n### Additional Tips\n\n1. **Use Type Hints**: Type hints in the function signature can help Sphinx-Napoleon interpret types correctly. For instance, using `list[str]` in the signature might help generate the appropriate links.\n\n2. **Check Configuration**: Ensure that your `conf.py` is correctly set up for Sphinx-Napoleon. The `napoleon_google_docstring` and `napoleon_use_param` options should be enabled.\n\n3. **Extensions**: If linking to types like `Optional` is problematic, consider using the `sphinx-autodoc-typehints` extension, which can enhance type hint rendering in your documentation.\n\nBy following these guidelines, you should be able to produce clear, consistent, and well-linked documentation using Google-style docstrings with Sphinx-Napoleon."
    }
]