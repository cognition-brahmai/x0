[
    {
        "role": "user",
        "content": "I am having a problem with my Python requests SSL handshake failure. Every time I try to do a `requests.get('https://url')`, I receive the following error:\n\n```\nimport requests\n>>> requests.get('https://reviews.gethuman.com/companies') \nTraceback (most recent call last): \n   File \"<stdin>\", line 1, in <module> \n   File \"/usr/lib/python2.7/dist-packages/requests/api.py\", line 55, in get \n    return request('get', url, **kwargs) \n   File \"/usr/lib/python2.7/dist-packages/requests/api.py\", line 44, in request \n    return session.request(method=method, url=url, **kwargs)    \n   File \"/usr/lib/python2.7/dist-packages/requests/sessions.py\", line 455, in request \n    resp = self.send(prep, **send_kwargs) \n   File \"/usr/lib/python2.7/dist-packages/requests/sessions.py\", line 558, in send \n    r = adapter.send(request, **kwargs) \n   File \"/usr/lib/python2.7/dist-packages/requests/adapters.py\", line 385, in send \n    raise SSLError(e) requests.exceptions.SSLError: [Errno 1]\n_ssl.c:510: error:14077410:SSL routines:SSL23_GET_SERVER_HELLO:sslv3 alert handshake failure\n```\n\nI have tried to update my requests and my SSL, but there has not been any change. I am currently using Python 2.7.6 and cannot change it. How can I resolve this issue?"
    },
    {
        "role": "assistant",
        "content": "The SSL handshake failure you're encountering can be due to a few different reasons, especially given that you're using Python 2.7.6, which is quite old. Here are some steps and suggestions that might help resolve this issue:\n\n1. **Upgrade Requests and Dependencies**:\n   - Ensure you have the latest version of `requests` and its dependencies that are compatible with Python 2.7.\n   - You can upgrade using `pip`:\n     ```bash\n     pip install --upgrade requests\n     ```\n   \n2. **Upgrade OpenSSL**:\n   - The SSL library (OpenSSL) that your Python is using might be outdated. Ensure your system's OpenSSL is updated.\n   - On Ubuntu, you might run:\n     ```bash\n     sudo apt-get update\n     sudo apt-get install --only-upgrade openssl\n     ```\n\n3. **Use a Different SSL Backend**:\n   - You can try using `pyOpenSSL` with `requests` to handle SSL differently.\n   - Install `pyOpenSSL`, `ndg-httpsclient`, and `pyasn1`:\n     ```bash\n     pip install pyOpenSSL ndg-httpsclient pyasn1\n     ```\n\n4. **Specify TLS Version**:\n   - Some servers might not support older SSL/TLS versions. You can specify that `requests` use a specific version by using a session and setting the adapter:\n     ```python\n     import requests\n     from requests.packages.urllib3.poolmanager import PoolManager\n     from requests.adapters import HTTPAdapter\n     import ssl\n\n     class TLSAdapter(HTTPAdapter):\n         def init_poolmanager(self, *args, **kwargs):\n             kwargs['ssl_version'] = ssl.PROTOCOL_TLSv1_2\n             return super(TLSAdapter, self).init_poolmanager(*args, **kwargs)\n\n     session = requests.Session()\n     session.mount('https://', TLSAdapter())\n     response = session.get('https://reviews.gethuman.com/companies')\n     print(response.content)\n     ```\n\n5. **Check Certificate Validity**:\n   - Ensure the server's certificate is valid and not expired. You can try to open the URL in a web browser to check if there are any certificate warnings.\n\n6. **Verify CA Certificates**:\n   - Ensure your system has up-to-date CA certificates. Sometimes, the CA bundle that Python uses might not be up-to-date.\n   - You can update your CA certificates using:\n     ```bash\n     sudo apt-get install --only-upgrade ca-certificates\n     ```\n\n7. **Python Version**:\n   - While you mentioned you cannot change your Python version, it's worth noting that newer versions of Python come with better SSL/TLS support. If possible, try using a virtual environment with a newer Python version to test if the issue resolves.\n\nIf none of these solutions work, consider checking server-side logs (if you have access) or consult with the server administrator to ensure there are no server-side issues with SSL/TLS configurations."
    }
]