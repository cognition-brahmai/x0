[
    {
        "role": "user",
        "content": "How can I search multiple fields in multiple models using Django? I don't want to use any external apps like 'Haystack', only pure Django. For example, I have the following models:\n\n```python\n# models.py\n\nclass Person(models.Model):\n    first_name = models.CharField(\"First name\", max_length=255)\n    last_name = models.CharField(\"Last name\", max_length=255)\n    # other fields\n\n\nclass Restaurant(models.Model):\n    restaurant_name = models.CharField(\"Restaurant name\", max_length=255)\n    # other fields\n\n\nclass Pizza(models.Model):\n    pizza_name = models.CharField(\"Pizza name\", max_length=255)\n    # other fields\n```\n\nWhen I type \"Tonny\", I want to get a:\n- \"Tonny Montana\" from `Person` model\n- \"Tonny's Restaurant\" from `Restaurant` model\n- \"Tonny's Special Pizza\" from `Pizza` model.\n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To search across multiple fields in multiple models using Django without relying on external apps like Haystack, you can perform individual queries for each model and then combine the results. You can implement a function that takes a search term and queries each model using Django's `Q` objects to build complex queries.\n\nHere's how you can achieve this:\n\n```python\nfrom django.db.models import Q\nfrom myapp.models import Person, Restaurant, Pizza\n\ndef search_all_models(search_term):\n    # Search in Person model\n    person_results = Person.objects.filter(\n        Q(first_name__icontains=search_term) | Q(last_name__icontains=search_term)\n    )\n\n    # Search in Restaurant model\n    restaurant_results = Restaurant.objects.filter(\n        Q(restaurant_name__icontains=search_term)\n    )\n\n    # Search in Pizza model\n    pizza_results = Pizza.objects.filter(\n        Q(pizza_name__icontains=search_term)\n    )\n\n    # Combine results\n    combined_results = {\n        'person_results': person_results,\n        'restaurant_results': restaurant_results,\n        'pizza_results': pizza_results,\n    }\n\n    return combined_results\n\n# Usage\nsearch_term = \"Tonny\"\nresults = search_all_models(search_term)\n\nfor model_name, model_results in results.items():\n    print(f\"Results for {model_name}:\")\n    for result in model_results:\n        print(result)\n```\n\n### Explanation:\n\n1. **Q Objects:** These are used to encapsulate a collection of keyword arguments. They allow you to construct complex database queries by combining Q objects using `&` (AND) or `|` (OR) operators.\n\n2. **`icontains` Lookup:** This performs a case-insensitive search. It's equivalent to SQL's `LIKE '%search_term%'`.\n\n3. **Combining Results:** Each query returns a `QuerySet`, and we store them in a dictionary to keep track of results from different models.\n\n4. **Iterating Results:** Finally, iterate over the dictionary to access and display the results from each model.\n\nThis approach is simple and works well for small datasets. If you have a large number of records, you might want to consider optimizing your queries or using pagination to handle the results efficiently."
    }
]