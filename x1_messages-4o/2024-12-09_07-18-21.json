[
    {
        "role": "user",
        "content": "How can I dynamically create an enum with custom values in Python? I am attempting to create an enum type during runtime by reading values from a YAML file. I currently have the following code:\n\n```python\n# Fetch the values\nv = {'foo':42, 'bar':24}\n\n# Create the enum\ne = type('Enum', (), v)\n```\n\nIs there a more appropriate method to accomplish this? I feel that calling the `type` function directly isn't a very clean solution."
    },
    {
        "role": "assistant",
        "content": "Creating an enum dynamically in Python can be done more cleanly by using the `enum` module, which provides the `Enum` class. You can use the `Enum` class's `__new__` method to create new enum members dynamically. Here's how you can achieve this by reading values from a YAML file and then using them to define an enum:\n\nFirst, ensure you have the `PyYAML` library installed to work with YAML files:\n\n```bash\npip install pyyaml\n```\n\nNow, you can write a script to read values from a YAML file and create an enum dynamically:\n\n```python\nimport yaml\nfrom enum import Enum\n\n# Read the YAML file\nwith open('values.yaml', 'r') as file:\n    values = yaml.safe_load(file)\n\n# Create an Enum dynamically\nDynamicEnum = Enum('DynamicEnum', values)\n\n# Example usage\nprint(DynamicEnum.foo)\nprint(DynamicEnum.bar)\n\n# Accessing values\nprint(DynamicEnum.foo.value)\nprint(DynamicEnum.bar.value)\n```\n\nAssuming your `values.yaml` file looks like this:\n\n```yaml\nfoo: 42\nbar: 24\n```\n\nHere's a breakdown of the process:\n\n1. **Reading YAML:** Use `yaml.safe_load()` to read the YAML content into a Python dictionary.\n2. **Creating the Enum:** Use the `Enum` class constructor with the name of the enum type ('DynamicEnum' in this case) and the dictionary of values.\n3. **Accessing Enum Members and Values:** You can access the enum members using `DynamicEnum.foo` and their values with `DynamicEnum.foo.value`.\n\nThis approach is cleaner and leverages Python's built-in `enum` module, providing a structured way to handle enumerations."
    }
]