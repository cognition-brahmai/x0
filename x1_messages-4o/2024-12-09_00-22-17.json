[
    {
        "role": "user",
        "content": "I am trying to connect to an MSSQL database from Python on Linux (SLES) using pyodbc and Free TDS. While I able to connect to the server from the command line successfully, trying to connect through Python script throws an error saying 'Unable to connect to data source'. The command line connection code and Python connection code are as follows:\n\nCommand line connection:\n\n```bash\ntsql -H server -p 1433 -U username -P password\n```\n\nPython connection:\n\n```python\nimport pyodbc\npyodbc.connect(driver='{FreeTDS}', server='server', database='database', uid='username', pwd='password')\n```\n\nThe error I am encountering is:\n\n```bash\npyodbc.Error: ('08001', '[08001] [unixODBC][FreeTDS][SQL Server]Unable to connect to data source (0) (SQLDriverConnect)')\n```\n\nUpon checking the TDS log dump, it looks like this is where the whole thing falls apart:\n\n```bash\ntoken.c:328:tds_process_login_tokens()\nutil.c:331:tdserror(0x87bbeb8, 0x8861820, 20017, 115)\nodbc.c:2270:msgno 20017 20003\nutil.c:361:tdserror: client library returned TDS_INT_CANCEL(2)\nutil.c:384:tdserror: returning TDS_INT_CANCEL(2)\nutil.c:156:Changed query state from IDLE to DEAD\ntoken.c:337:looking for login token, got  0()\ntoken.c:122:tds_process_default_tokens() marker is 0()\ntoken.c:125:leaving tds_process_default_tokens() connection dead\nlogin.c:466:login packet accepted\nutil.c:331:tdserror(0x87bbeb8, 0x8861820, 20002, 0)\nodbc.c:2270:msgno 20002 20003\nutil.c:361:tdserror: client library returned TDS_INT_CANCEL(2)\nutil.c:384:tdserror: returning TDS_INT_CANCEL(2)\nmem.c:615:tds_free_all_results()\nerror.c:412:odbc_errs_add: \"Unable to connect to data source\"\n```\n\nWhat could be causing this error and how can I resolve it?"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering typically indicates an issue with the connection configuration or that the Python script isn't utilizing the same environment and settings as the command line. Here are several steps and checks you can perform to resolve the issue:\n\n1. **Check ODBC and FreeTDS Configuration:**\n   - Make sure your `odbcinst.ini` and `odbc.ini` files are properly configured. These files are usually located in `/etc/` or `/usr/local/etc/`. \n   - Your `odbcinst.ini` should have an entry for FreeTDS, like this:\n\n     ```ini\n     [FreeTDS]\n     Description = FreeTDS Driver\n     Driver = /usr/lib/x86_64-linux-gnu/odbc/libtdsodbc.so\n     ```\n\n   - Your `odbc.ini` should have a data source name (DSN) configured:\n\n     ```ini\n     [YourDSN]\n     Driver = FreeTDS\n     Server = server\n     Port = 1433\n     TDS_Version = 8.0\n     ```\n\n2. **Ensure Environment Consistency:**\n   - The environment from which the Python script runs might be different from your command line. Ensure that the environment variables such as `ODBCINI` and `ODBCINSTINI` are set correctly in your Python environment.\n   - You can set these variables in your script using `os.environ`:\n\n     ```python\n     import os\n     os.environ['ODBCINI'] = '/path/to/odbc.ini'\n     os.environ['ODBCINSTINI'] = '/path/to/odbcinst.ini'\n     ```\n\n3. **Verify Driver Path:**\n   - Ensure the path to `libtdsodbc.so` in `odbcinst.ini` is correct. Use `locate` or `find` to check if it's installed correctly:\n\n     ```bash\n     locate libtdsodbc.so\n     ```\n\n4. **Check TDS Version:**\n   - Ensure you're using the correct TDS version (like 7.3 or 8.0) in your `odbc.ini`. You can specify it directly in the connection string as well:\n\n     ```python\n     pyodbc.connect(\"DRIVER={FreeTDS};SERVER=server;PORT=1433;DATABASE=database;UID=username;PWD=password;TDS_Version=8.0;\")\n     ```\n\n5. **Network and Firewall:**\n   - Ensure there are no network issues or firewall settings blocking the connection from your Python environment.\n\n6. **Check Permissions:**\n   - Ensure that the user running the Python script has read permissions for the `odbcinst.ini` and `odbc.ini` files.\n\n7. **Testing DSN:**\n   - Try connecting using the DSN you defined in `odbc.ini`:\n\n     ```python\n     pyodbc.connect(\"DSN=YourDSN;UID=username;PWD=password\")\n     ```\n\n8. **Debugging with Trace:**\n   - Enable ODBC tracing to get more detailed logs on where the connection is failing. Add the following to your `odbc.ini`:\n\n     ```ini\n     [ODBC]\n     Trace = yes\n     TraceFile = /tmp/odbc_trace.log\n     ```\n\nAfter applying these configurations and checks, try running your Python script again. If you continue to face issues, provide the specific error messages or logs for further assistance."
    }
]