[
    {
        "role": "user",
        "content": "In Python 3.2.2, I have a list of tuples that resembles the following:\n\n(\"Person 1\",10)\n(\"Person 2\",8)\n(\"Person 3\",12)\n(\"Person 4\",20)\n\nI want to sort this list in ascending order based on the second value of the tuple. For instance, after sorting, the first element of the list (L[0]) should be (\"Person 2\", 8). How can this be achieved?"
    },
    {
        "role": "assistant",
        "content": "To sort a list of tuples in Python based on the second value of each tuple, you can use the `sorted()` function with a custom `key` function that specifies the second element of the tuple as the basis for sorting. Here's how you can do it:\n\n```python\n# Your initial list of tuples\npeople = [(\"Person 1\", 10), (\"Person 2\", 8), (\"Person 3\", 12), (\"Person 4\", 20)]\n\n# Sorting the list based on the second element of each tuple\nsorted_people = sorted(people, key=lambda x: x[1])\n\n# Printing the sorted list\nprint(sorted_people)\n```\n\nIn this code:\n\n- `people` is your original list of tuples.\n- `sorted()` is a built-in Python function that returns a new sorted list from the elements of any iterable.\n- The `key` parameter in the `sorted()` function is used to specify a function (in this case, a lambda function) that returns the value to be used for sorting. Here, `lambda x: x[1]` is a lambda function that takes a tuple `x` and returns its second element, which is the value we want to sort by.\n- `sorted_people` will be a new list that contains the tuples sorted by the second element.\n\nAfter running this code, the `sorted_people` list will be:\n\n```\n[('Person 2', 8), ('Person 1', 10), ('Person 3', 12), ('Person 4', 20)]\n```"
    }
]