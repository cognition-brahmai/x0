[
    {
        "role": "user",
        "content": "How can I convert a dictionary of pandas dataframes into a single, unified dataframe in Python? Each key in the dictionary corresponds to an individual dataframe with fruit prices from a certain date (represented by the key). I want the keys to be the column names in the new dataframe, which would represent the date. The goal is to have a dataframe that contains the prices of each fruit per day, with the structure looking like this:\n\n```\n          15012016   16012016   17012016   \nOrange    1          4          7\nApple     2          5          8\nPear      3          6          9\n```\n\nHere's the code I used to generate the dictionary of dataframes from a set of excel files:\n\n```python\n#find all the file names\nfile_list = []\nfor x in os.listdir('C:\\\\Fruit_Prices_by_Day'):\n    file_list.append(x) \n\nfile_list= list(set(file_list))\n\nd = {}\n\nfor date in Raw_list:\n    df1 = pd.read_excel(os.path.join('C:\\\\Fruit_Prices_by_Day', date +'.xlsx'), index_col = 'Fruit')\n    d[date] = df1\n```"
    },
    {
        "role": "assistant",
        "content": "To convert a dictionary of pandas dataframes into a single, unified dataframe with the specified structure, you can follow these steps:\n\n1. Iterate over the dictionary of dataframes.\n2. For each dataframe, rename its columns to match the corresponding date (key).\n3. Concatenate the dataframes along the columns, aligning them by the index (fruit names).\n\nHere's how you can accomplish this:\n\n```python\nimport os\nimport pandas as pd\n\n# Initialize the dictionary to store dataframes\nd = {}\n\n# List all the files in the specified directory\nfile_list = os.listdir('C:\\\\Fruit_Prices_by_Day')\n\n# Remove any duplicates from the file list (if necessary)\nfile_list = list(set(file_list))\n\n# Load each Excel file into the dictionary with the date as the key\nfor file_name in file_list:\n    # Extract the date from the file name (assuming the date is part of the file name)\n    date = file_name.split('.')[0]  # Adjust this part if your filenames have a different pattern\n    df = pd.read_excel(os.path.join('C:\\\\Fruit_Prices_by_Day', file_name), index_col='Fruit')\n    d[date] = df\n\n# Merge the dataframes\nresult_df = pd.concat(d, axis=1)\n\n# The keys (dates) will be added as a MultiIndex, so we need to flatten it\nresult_df.columns = result_df.columns.get_level_values(0)\n\nprint(result_df)\n```\n\n### Key Points:\n- **Loading Data**: The `pd.read_excel()` function loads the Excel files into dataframes. Make sure the `index_col` is set to 'Fruit' to use it as the index.\n- **Concatenation**: `pd.concat()` is used to merge the dataframes along the columns (`axis=1`), using the keys (dates) as the column headers.\n- **Flattening MultiIndex**: After concatenation, the columns may have a MultiIndex. Using `get_level_values(0)` will extract the first level (the date) to use as the column names.\n\nThis should give you a unified dataframe with fruit prices per day, with the dates as column headers. Adjust the filename parsing logic according to your actual file naming convention if necessary."
    }
]