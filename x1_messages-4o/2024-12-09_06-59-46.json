[
    {
        "role": "user",
        "content": "How can I filter the options shown in a foreignkey field within a Django admin inline? I am trying to access the parent object being edited in Django but I'm not able to get the object from kwargs as it is empty when editing an object. Here is my code:\n\n```python\nclass ProjectGroupMembershipInline(admin.StackedInline):\n    model = ProjectGroupMembership\n    extra = 1\n    formset = ProjectGroupMembershipInlineFormSet\n    form = ProjectGroupMembershipInlineForm\n\n    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n        if db_field.name == 'group':\n            kwargs['queryset'] = Group.objects.filter(some_filtering_here=object_being_edited)\n        return super(ProjectGroupMembershipInline, self).formfield_for_foreignkey(db_field, request, **kwargs)\n```\n\nAny suggestions on how I can achieve this?"
    },
    {
        "role": "assistant",
        "content": "In order to filter the options shown in a foreign key field within a Django admin inline, you need to access the parent object being edited. You can achieve this by overriding the `get_formset` method of the inline class. Here's a way to do it:\n\n1. Override the `get_formset` method in your inline class.\n2. Use the `request` object and the `obj` parameter to access the parent object.\n3. Pass the parent object to the formset or form.\n\nHere's how you can implement this:\n\n```python\nclass ProjectGroupMembershipInline(admin.StackedInline):\n    model = ProjectGroupMembership\n    extra = 1\n    formset = ProjectGroupMembershipInlineFormSet\n    form = ProjectGroupMembershipInlineForm\n\n    def get_formset(self, request, obj=None, **kwargs):\n        # Store the object being edited in the formset\n        formset = super().get_formset(request, obj, **kwargs)\n        formset.parent_object = obj\n        return formset\n\n    def formfield_for_foreignkey(self, db_field, request=None, **kwargs):\n        if db_field.name == 'group':\n            # Access the parent object from the formset\n            parent_object = kwargs.get('form', None).parent_object\n            kwargs['queryset'] = Group.objects.filter(some_filtering_here=parent_object)\n        return super().formfield_for_foreignkey(db_field, request, **kwargs)\n\nclass ProjectGroupMembershipInlineFormSet(BaseInlineFormSet):\n    def __init__(self, *args, **kwargs):\n        self.parent_object = kwargs.pop('parent_object', None)\n        super().__init__(*args, **kwargs)\n```\n\nIn this implementation:\n\n- We override the `get_formset` method to pass the `obj` (the parent object being edited) to the formset.\n- Inside the `formfield_for_foreignkey`, we access the `parent_object` from the form and use it to filter the queryset for the foreign key field.\n\nThis should allow you to properly filter the foreign key options based on the parent object being edited in the Django admin inline."
    }
]