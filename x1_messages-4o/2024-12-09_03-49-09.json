[
    {
        "role": "user",
        "content": "How can I change the format of a Python log message on a per-logger basis? I am currently able to perform simple logging using Python's `logging` module and `basicConfig` function. However, since `basicConfig` is a module-level function, I'm not sure how to change the format of log messages for different loggers. I have been able to create different loggers with different levels and names, but is there a way to change the format of the log messages for each logger in a similar way to `basicConfig`?\n\nHere is the code I've been using for simple logging:\n\n```python\nimport logging\n\ndef main():\n    logging.basicConfig(filename=\"messages.log\",\n                        level=logging.WARNING,\n                        format='%(filename)s: '    \n                                '%(levelname)s: '\n                                '%(funcName)s(): '\n                                '%(lineno)d:\\t'\n                                '%(message)s')\n\n    logging.debug(\"Only for debug purposes\\n\")\n    logging.shutdown()\n\nmain()\n```\n\nAnd here is the code I've used to create separate loggers:\n\n```python\nimport inspect\nimport logging\n\ndef function_logger(level=logging.DEBUG):\n    function_name = inspect.stack()[1][3]\n    logger = logging.getLogger(function_name)\n    logger.setLevel(level)\n    logger.addHandler(logging.FileHandler(\"{0}.log\".format(function_name)))\n    return logger\n\ndef f1():\n    f1_logger = function_logger()\n    f1_logger.debug(\"f1 Debug message\")\n    f1_logger.warning(\"f1 Warning message\")\n    f1_logger.critical(\"f1 Critical message\")\n\ndef f2():\n    f2_logger = function_logger(logging.WARNING)\n    f2_logger.debug(\"f2 Debug message\")\n    f2_logger.warning(\"f2 Warning message\")\n    f2_logger.critical(\"f2 Critical message\")\n\ndef main():\n    f1()\n    f2()\n    logging.shutdown()\n\nmain()\n```"
    },
    {
        "role": "assistant",
        "content": "To customize the format of log messages on a per-logger basis, you can set up a different `Formatter` for each logger. The `Formatter` object allows you to specify the format of the log messages. You can attach this formatter to each logger's handler. Here's a modified version of your code to demonstrate how to achieve this:\n\n```python\nimport logging\nimport inspect\n\ndef function_logger(level=logging.DEBUG, format=None):\n    function_name = inspect.stack()[1][3]\n    logger = logging.getLogger(function_name)\n    logger.setLevel(level)\n\n    # Create a file handler\n    handler = logging.FileHandler(f\"{function_name}.log\")\n    \n    # If a custom format is provided, use it; otherwise, use a default format\n    if format is None:\n        format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    \n    # Create a formatter and set it for the handler\n    formatter = logging.Formatter(format)\n    handler.setFormatter(formatter)\n\n    # Add the handler to the logger\n    logger.addHandler(handler)\n\n    return logger\n\ndef f1():\n    # Custom format for f1 logger\n    f1_format = '%(filename)s: %(levelname)s: %(funcName)s(): %(lineno)d:\\t%(message)s'\n    f1_logger = function_logger(format=f1_format)\n    f1_logger.debug(\"f1 Debug message\")\n    f1_logger.warning(\"f1 Warning message\")\n    f1_logger.critical(\"f1 Critical message\")\n\ndef f2():\n    # Different custom format for f2 logger\n    f2_format = '%(asctime)s - %(name)s - %(levelname)s - %(message)s'\n    f2_logger = function_logger(level=logging.WARNING, format=f2_format)\n    f2_logger.debug(\"f2 Debug message\")  # This won't appear because the level is set to WARNING\n    f2_logger.warning(\"f2 Warning message\")\n    f2_logger.critical(\"f2 Critical message\")\n\ndef main():\n    f1()\n    f2()\n    logging.shutdown()\n\nmain()\n```\n\n### Key Points:\n\n1. **Custom Formatter**: You can define a custom format for each logger using the `Formatter` class.\n\n2. **FileHandler**: Each logger can have its own file handler that writes to a distinct log file.\n\n3. **Attach Formatter to Handler**: The formatter is attached to the handler, which is then added to the logger.\n\n4. **Customization**: You can customize the format string to include various attributes like `%(asctime)s`, `%(name)s`, `%(levelname)s`, etc.\n\nBy using this approach, you have fine control over the logging format for each logger individually."
    }
]