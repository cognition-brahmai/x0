[
    {
        "role": "user",
        "content": "How can I perform a case insensitive search in a dictionary in Python? I've been able to achieve this with a list using the 'map' function, as shown below:\n\n```python\na = ['xyz', 'wMa', 'Pma']\nb = map(string.lower, a)\nif 'Xyz'.lower() in b:\n    print 'yes'\n```\n\nHowever, when I try to do the same with a dictionary, I'm not getting the expected results. Here's what I've tried:\n\n```python\na = {'a':1, 'B':2, 'c':3}\nap = map(string.lower, a)\n```\n\nThis gives me a list of ['a', 'b', 'c'], but what I need is a case insensitive dictionary. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To perform a case-insensitive search in a dictionary, you need to modify the way you handle the keys. Unlike lists, dictionaries require a key-value mapping, and directly converting keys using `map(string.lower, a)` will not provide a case-insensitive dictionary. Instead, you can create a new dictionary with all keys converted to lowercase. Here's how you can achieve this:\n\n```python\n# Original dictionary\na = {'a': 1, 'B': 2, 'c': 3}\n\n# Create a case-insensitive dictionary by converting all keys to lowercase\nlowercase_dict = {key.lower(): value for key, value in a.items()}\n\n# Now you can perform a case-insensitive search\nsearch_key = 'B'.lower()\nif search_key in lowercase_dict:\n    print('Yes, found:', lowercase_dict[search_key])\nelse:\n    print('No, not found')\n```\n\nIn this code snippet, we create a new dictionary called `lowercase_dict` where each key is converted to lowercase. This allows you to perform a case-insensitive search by converting your search key to lowercase as well. Note that this approach assumes you do not have conflicting keys when case is ignored (e.g., 'a' and 'A' both in the original dictionary), as they would overwrite each other in the new dictionary."
    }
]