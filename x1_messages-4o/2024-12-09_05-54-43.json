[
    {
        "role": "user",
        "content": "How can I call a function from a Python class based on a variable? I have a class named 'CallMe' with two methods 'App' and 'Foo'. I want to call a method depending on a variable. I tried to do it as follows but I failed:\n\n```python\nclass CallMe: # Class\n\n   def App(): # Method one\n\n      ...\n\n   def Foo(): # Method two\n\n      ...\n\nvariable = \"App\" # Method to call\n\nCallMe.variable() # Calling App()\n```\n\nIs there a way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this by using the `getattr` function in Python, which allows you to retrieve an attribute from an object based on its name. In your case, you can use it to call a method from the class `CallMe` based on the value of the variable. Here's how you can modify your code to do that:\n\n```python\nclass CallMe:  # Class\n\n    def App(self):  # Method one\n        print(\"App method called\")\n\n    def Foo(self):  # Method two\n        print(\"Foo method called\")\n\nvariable = \"App\"  # Method to call\n\n# Create an instance of the class\ncall_me_instance = CallMe()\n\n# Use getattr to call the method based on the variable\nmethod_to_call = getattr(call_me_instance, variable, None)\n\n# Check if method exists and is callable, then call it\nif callable(method_to_call):\n    method_to_call()\nelse:\n    print(f\"Method {variable} does not exist.\")\n```\n\nHere's what happens in this code:\n\n1. An instance of the `CallMe` class is created.\n2. `getattr` is used to retrieve the method from the instance based on the name stored in `variable`.\n3. `getattr` also allows specifying a default value (`None` in this case) if the attribute does not exist.\n4. It checks if the retrieved method is callable, and if so, it calls the method.\n5. If the method does not exist, it prints an error message.\n\nThis approach ensures that the method is called dynamically based on the variable's value."
    }
]