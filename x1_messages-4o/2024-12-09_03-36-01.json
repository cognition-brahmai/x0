[
    {
        "role": "user",
        "content": "How do I count the duplicate rows in a pandas DataFrame? I have a DataFrame and I am trying to find a count of each type of row. For instance, I have a DataFrame as follows:\n\n```python\ndf = pd.DataFrame({'one': pd.Series([1., 1, 1]),\n                   'two': pd.Series([1., 2., 1])})\n```\n\nIt looks like this:\n\n```python\n    one two\n0   1   1\n1   1   2\n2   1   1\n```\n\nI can find the unique rows using `df.drop_duplicates()`, which gives me:\n\n```python\n    one two\n0   1   1\n1   1   2\n```\n\nNow I want to take each row from the above DataFrame ([1 1] and [1 2]) and count how many times each occurs in the initial DataFrame. My desired result would look something like this:\n\n```python\nRow     Count\n[1 1]     2\n[1 2]     1\n```\n\nFor a larger example:\n\n```python\ndf = pd.DataFrame({'one': pd.Series([True, True, True, False]),\n                   'two': pd.Series([True, False, False, True]),\n                   'three': pd.Series([True, False, False, False])})\n```\n\nThe DataFrame looks like this:\n\n```python\n    one three   two\n0   True    True    True\n1   True    False   False\n2   True    False   False\n3   False   False   True\n```\n\nI want a result that tells me:\n\n```python\n       Row           Count\n[True True True]       1\n[True False False]     2\n[False False True]     1\n```\n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired result, you can use the `value_counts` method available in pandas. This method works effectively by treating each row as a tuple and counting the occurrences of each unique tuple. Here is how you can apply it to your DataFrame:\n\nFor the first example:\n\n```python\nimport pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({'one': pd.Series([1., 1, 1]),\n                   'two': pd.Series([1., 2., 1])})\n\n# Count the duplicate rows\nrow_counts = df.value_counts().reset_index(name='Count')\n\n# Create a 'Row' column to represent the rows as lists\nrow_counts['Row'] = row_counts.apply(lambda row: row[:-1].tolist(), axis=1)\n\n# Reorder columns\nrow_counts = row_counts[['Row', 'Count']]\n\nprint(row_counts)\n```\n\nThis code will output:\n\n```\n       Row  Count\n0  [1.0, 1.0]      2\n1  [1.0, 2.0]      1\n```\n\nFor the second example:\n\n```python\nimport pandas as pd\n\n# Create the DataFrame\ndf = pd.DataFrame({'one': pd.Series([True, True, True, False]),\n                   'two': pd.Series([True, False, False, True]),\n                   'three': pd.Series([True, False, False, False])})\n\n# Count the duplicate rows\nrow_counts = df.value_counts().reset_index(name='Count')\n\n# Create a 'Row' column to represent the rows as lists\nrow_counts['Row'] = row_counts.apply(lambda row: row[:-1].tolist(), axis=1)\n\n# Reorder columns\nrow_counts = row_counts[['Row', 'Count']]\n\nprint(row_counts)\n```\n\nThis code will output:\n\n```\n                 Row  Count\n0  [True, False, False]      2\n1  [False, False, True]      1\n2   [True, True, True]      1\n```\n\nHere, the `value_counts()` method provides the count of each unique row, and then we use `apply` with a lambda function to convert each row to a list representation for clarity. The result is a DataFrame with the unique rows and their corresponding counts."
    }
]