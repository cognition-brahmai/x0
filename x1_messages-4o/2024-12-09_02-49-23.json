[
    {
        "role": "user",
        "content": "I'm currently using the PyCharm community edition in conjunction with IPython. PyCharm automatically recognizes IPython and sets it as the default console, which allows it to execute IPython magic commands like `list?`, `ls`, or `%timeit` when debugging. This feature is useful, but I want to use the standard Python console instead. Is there a simple way to make this change without uninstalling IPython or setting up a virtualenv? My current Python version is 3.3.2, but I encounter the same issue with version 2.7."
    },
    {
        "role": "assistant",
        "content": "To switch from using the IPython console to the standard Python console in PyCharm without uninstalling IPython or setting up a virtual environment, you can adjust the configuration settings within PyCharm. Here\u2019s how you can do it:\n\n1. **Open PyCharm Settings**:\n   - Go to `File` > `Settings` on Windows/Linux or `PyCharm` > `Preferences` on macOS.\n\n2. **Project Interpreter**:\n   - In the left pane, navigate to `Project: <Your Project Name>` > `Python Interpreter`.\n   - Here, you can see a list of installed packages. Ensure that the correct interpreter version is selected.\n\n3. **Switching the Console**:\n   - Navigate to `Build, Execution, Deployment` > `Console` > `Python Console`.\n   - You should see an option for setting the console to either IPython or the standard Python console. Look for an option like \"Use IPython if available\" and uncheck it if it's checked.\n\n4. **Apply and Restart**:\n   - Click `Apply` and then `OK` to save your settings.\n   - Restart PyCharm to ensure the changes take effect.\n\nThis should default the console back to the standard Python console. If you don\u2019t see the option for switching consoles, it might be a version-specific feature, and you may need to update PyCharm to a more recent version.\n\nIf the option is not available in your current PyCharm version, you can also consider creating a custom run/debug configuration that does not utilize IPython, though this is a more advanced workaround."
    }
]