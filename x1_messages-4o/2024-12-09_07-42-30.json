[
    {
        "role": "user",
        "content": "How can I write a Python function for debugging purposes that takes a variable or the name of a variable as an argument, and prints both its name and value? This is often seen in print statements like \"print x\" (which is easy to type but gives no context) or \"print 'x=',x\" (which gives more context but is harder to type). I want to be able to call the function like \"debugPrint(x)\" or \"debugPrint('x')\", and have it print \"x=12\" if the value of x is 12."
    },
    {
        "role": "assistant",
        "content": "To create a Python function for debugging purposes that prints both the name and value of a variable, you can use Python's `inspect` module to retrieve the names of variables from the current stack frame. Here\u2019s how you can achieve this:\n\n```python\nimport inspect\n\ndef debugPrint(var):\n    # Get the current frame\n    frame = inspect.currentframe()\n    \n    # Get the calling frame (the frame that called this function)\n    calling_frame = frame.f_back\n    \n    # Get the local variables in the calling frame\n    local_vars = calling_frame.f_locals\n    \n    # Iterate through local variables to find the variable passed to the function\n    for var_name, var_value in local_vars.items():\n        if var_value is var:\n            print(f\"{var_name} = {var_value}\")\n            return\n    \n    # If the variable was passed as a string, try to get its value\n    if isinstance(var, str) and var in local_vars:\n        print(f\"{var} = {local_vars[var]}\")\n    else:\n        print(f\"Variable not found: {var}\")\n\n# Example usage\nx = 12\ndebugPrint(x)  # Output: x = 12\ndebugPrint('x')  # Output: x = 12\n```\n\n### Key Points:\n- The `inspect.currentframe()` function is used to get the current stack frame.\n- `frame.f_back` gives you the previous frame, which is the frame where `debugPrint` was called.\n- `f_locals` is a dictionary of the local variables in the calling frame.\n- The function checks if the variable passed is the same as any variable in the calling frame by comparing the variable itself or its name.\n- If the variable is passed as a string, it checks if this string corresponds to a variable name in the calling frame.\n\nThis function should help you print out the name and value of a variable for debugging purposes in a more convenient way."
    }
]