[
    {
        "role": "user",
        "content": "I've recently pushed a Django project to Heroku. It's working perfectly when accessed via http://rtd-staging.herokuapp.com/rtd2015/, however, I'm encountering a 400 error: Bad Request when trying to access it using my custom domain http://staging.researchthroughdesign.org/rtd2015/. I am certain that the CNAME was setup correctly because during the process of pushing to Heroku, it was pointed out that the Heroku app had crashed, indicating it was pointing to the correct app. Here's the log for the error:\n\n```\n2014-04-23T18:32:29.981976+00:00 heroku[router]: at=info method=GET path=/ host=staging.researchthroughdesign.org request_id=b8fe3ac9-e062-493b-b3bf-862c60e4001b fwd=\"82.34.146.252\" dyno=web.1 connect=1ms service=7ms status=400 bytes=226\n```\n\nWhy is this happening and how can I resolve it?"
    },
    {
        "role": "assistant",
        "content": "The 400 Bad Request error you're encountering when accessing your Django application via a custom domain likely stems from a mismatch between the host header in the request and the allowed hosts configured in your Django settings. Here\u2019s how you can resolve it:\n\n1. **Verify ALLOWED_HOSTS in Django settings:**\n   - In your `settings.py` file, ensure that the `ALLOWED_HOSTS` list includes your custom domain. It should look something like this:\n     ```python\n     ALLOWED_HOSTS = ['staging.researchthroughdesign.org', 'rtd-staging.herokuapp.com']\n     ```\n   - This setting tells Django which host/domain names your application can serve. If the incoming request's host header doesn't match any entry in this list, Django will respond with a 400 Bad Request error.\n\n2. **Check DNS Configuration:**\n   - Ensure that your domain's DNS settings are correctly configured to point to the Heroku app. This usually involves setting up a CNAME record for your custom domain to point to `your-app-name.herokuapp.com`.\n\n3. **SSL Configuration:**\n   - If you are using SSL, ensure that your SSL certificate is correctly configured for your custom domain. Heroku provides automatic SSL for custom domains via the Automated Certificate Management (ACM) feature.\n\n4. **Heroku Domain Settings:**\n   - Verify that your custom domain is added to your Heroku app's domain settings. You can check this via the Heroku Dashboard under the \"Settings\" tab for your app, or by using the Heroku CLI:\n     ```\n     heroku domains\n     ```\n\n5. **Flush DNS Cache:**\n   - Sometimes, DNS changes take a while to propagate. You can try flushing your local DNS cache or using a different network to see if it's a propagation issue.\n\n6. **Check Logs for More Details:**\n   - Heroku logs can provide more information about the error. Use the Heroku CLI to tail the logs and look for any additional clues:\n     ```\n     heroku logs --tail\n     ```\n\nBy ensuring your `ALLOWED_HOSTS` is set correctly and your DNS and Heroku settings are properly configured, you should be able to resolve the 400 Bad Request error and access your Django application via your custom domain."
    }
]