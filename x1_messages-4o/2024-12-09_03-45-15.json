[
    {
        "role": "user",
        "content": "I have a dataframe that contains multiple NaN values. The dataframe is large, with over 2000 columns. I'd like to fill these NaN values based on the previous couple of values in each row, repeating them for each instance of NaN. How can I achieve this?\n\nHere's a small sample of what the data looks like: \n```python\ndf = \n    A   B   C    D   E     F       \n\n0   3   4   NaN  NaN NaN   NaN  \n1   9   8   NaN  NaN NaN   NaN      \n2   5   9   4    7   NaN   NaN  \n3   5   7   6    3   NaN   NaN  \n4   2   6   4    3   NaN   NaN  \n```\nI want to transform it to look like this: \n```python\ndf = \n   A  B   C  D  E  F  \n\n0  3  4   3  4  3  4  \n1  9  8   9  8  9  8  \n2  5  9   4  7  4  7      \n3  5  7   6  3  6  3  \n4  2  6   4  3  4  3  \n```"
    },
    {
        "role": "assistant",
        "content": "To fill the NaN values in your DataFrame based on the previous couple of values in each row, you can use the `fillna()` method along with a custom lambda function. Here's how you can achieve the desired transformation:\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# Sample DataFrame\ndata = {\n    'A': [3, 9, 5, 5, 2],\n    'B': [4, 8, 9, 7, 6],\n    'C': [np.nan, np.nan, 4, 6, 4],\n    'D': [np.nan, np.nan, 7, 3, 3],\n    'E': [np.nan, np.nan, np.nan, np.nan, np.nan],\n    'F': [np.nan, np.nan, np.nan, np.nan, np.nan]\n}\n\ndf = pd.DataFrame(data)\n\n# Function to fill NaN values based on previous values in the row\ndef fill_row(row):\n    last_valid = None\n    for i in range(len(row)):\n        if pd.isna(row[i]):\n            if last_valid is not None:\n                row[i] = last_valid\n        else:\n            last_valid = row[i]\n    return row\n\n# Apply the function to each row\ndf = df.apply(fill_row, axis=1)\n\nprint(df)\n```\n\n### Explanation:\n1. **Data Preparation**: We first define a sample DataFrame `df` with NaN values as per your example.\n2. **Custom Function `fill_row`**: This function iterates over each element in a row. If the current element is NaN, it replaces it with the last valid (non-NaN) value. The `last_valid` variable keeps track of the last seen non-NaN value.\n3. **Apply Function**: The `apply()` method is used to apply `fill_row` to each row (`axis=1`) of the DataFrame.\n4. **Output**: The transformed DataFrame is printed, with NaN values filled based on the prior values in each row.\n\nThis approach efficiently fills the NaN values based on the previous couple of values in each row, even for large DataFrames."
    }
]