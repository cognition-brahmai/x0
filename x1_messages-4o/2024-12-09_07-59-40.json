[
    {
        "role": "user",
        "content": "How can I correctly write cross-references to external API documentation using intersphinx? I am using Sphinx v1.3.1 with Python v2.7.3, and my intersphinx mapping is configured as follows:\n\n```\n{\n'python': ('https://docs.python.org/2.7', None),\n'numpy': ('http://docs.scipy.org/doc/numpy/', None),\n'cv2' : ('http://docs.opencv.org/2.4/', None),\n'h5py' : ('http://docs.h5py.org/en/latest/', None)\n}\n```\nI can easily write a cross-reference to numpy API with `:class:`numpy.ndarray` or `:func:`numpy.array`, which gives me the expected result. However, with h5py, a link is only generated if I omit the module name. For instance, `:class:`Group` (or `:class:`h5py:Group`) gives me a Group link, but `:class:`h5py.Group` fails to generate a link. Lastly, I am unable to find a valid method to write a cross-reference to the OpenCV API, as none of these attempts seem to work:\n\n```\n:func:`cv2.convertScaleAbs`\n:func:`cv2:cv2.convertScaleAbs`\n:func:`cv2:convertScaleAbs`\n:func:`convertScaleAbs`\n```\nHow exactly do I write cross-references to external API, or configure intersphinx, to generate a link as in the numpy case?"
    },
    {
        "role": "assistant",
        "content": "To correctly write cross-references to external API documentation using intersphinx in Sphinx, you need to ensure that the external documentation you're linking to is configured to support intersphinx. This means that the external docs should have an `objects.inv` file available at the root of their respective URLs. This file is used by intersphinx to map Python objects to their documentation URLs.\n\nLet's break down your issue and look at possible solutions:\n\n1. **h5py Cross-References:**\n   - You mentioned that `:class:`Group`` works but `:class:`h5py.Group`` does not. This might be because the `objects.inv` from h5py doesn't contain fully qualified names for certain objects. You can check the contents of the `objects.inv` file by downloading it directly from `http://docs.h5py.org/en/latest/objects.inv` and inspecting it using a tool like `sphobjinv` (a Python package specifically for inspecting `objects.inv` files).\n\n2. **OpenCV Cross-References:**\n   - For OpenCV, it seems like the intersphinx mapping is not working correctly. This could be because the OpenCV documentation does not include an `objects.inv` file, or it is not structured in a way that supports intersphinx directly.\n   - As a workaround, you can manually create a mapping or use direct URLs for linking, or check if there is an updated version of the documentation that supports intersphinx.\n\n3. **General Tips for Configuring Intersphinx:**\n   - Ensure that each external documentation source actually provides an `objects.inv` file. You can test the availability by appending `objects.inv` to the base URL in your intersphinx mapping.\n   - Make sure the URLs in your intersphinx configuration end with a slash, as this helps in resolving relative paths correctly.\n\n4. **Custom Role for OpenCV:**\n   - If OpenCV's documentation does not support intersphinx, consider creating a custom Sphinx role to handle these links. This can be done using the `extlinks` extension, which allows you to define custom roles for hyperlinks.\n\nExample of `extlinks` configuration:\n```python\nextlinks = {\n    'cv2': ('http://docs.opencv.org/2.4/%s.html', ''),\n}\n```\nYou can then use it like this in your documentation:\n```\n:cv2:`cv2.convertScaleAbs`\n```\n\nBy following these steps, you should be able to resolve cross-referencing issues with external API documentation in Sphinx. If the documentation does not support intersphinx, consider reaching out to the maintainers for support or use alternative linking methods."
    }
]