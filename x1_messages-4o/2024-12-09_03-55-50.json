[
    {
        "role": "user",
        "content": "How can I change the default position of the percent label in a matplotlib pie chart?\n\nI created a pie chart using the following code:\n\n```python\nplt.pie(sizes, labels=labels, colors=colors, explode=explode, autopct='%1.0f%%')\n```\n\nI am not satisfied with the positioning of some percent labels as they intrude into other sections of the pie chart. An example of such a situation is the '9m' section. I want these labels to be outside the pie chart with an arrow pointing to the respective section or alternatively, just outside the section. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To customize the position of the percent labels in a Matplotlib pie chart, you can use the `autopct` parameter with a custom function. This function will allow you to adjust the position of the labels. Additionally, you can use the `pctdistance` parameter to move the labels further out from the center of the pie chart.\n\nIf you want the labels to be outside the pie chart with arrows pointing to the respective sections, you can use the `plt.annotate` function to manually add labels with arrows. Here's an example demonstrating both methods:\n\n### Method 1: Adjusting Label Position\n```python\nimport matplotlib.pyplot as plt\n\nsizes = [15, 30, 45, 10]\nlabels = ['A', 'B', 'C', 'D']\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0, 0.1, 0, 0)  # explode 2nd slice\n\ndef custom_autopct(pct):\n    return ('%.1f%%' % pct) if pct > 5 else ''\n\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, explode=explode,\n                                  autopct=custom_autopct, pctdistance=0.85)\n\nfor autotext in autotexts:\n    autotext.set_color('black')\n    autotext.set_fontsize(10)\n\nplt.show()\n```\n\n### Method 2: Using Annotations for Labels Outside the Pie\n```python\nimport matplotlib.pyplot as plt\n\nsizes = [15, 30, 45, 10]\nlabels = ['A', 'B', 'C', 'D']\ncolors = ['gold', 'yellowgreen', 'lightcoral', 'lightskyblue']\nexplode = (0, 0.1, 0, 0)  # explode 2nd slice\n\nfig, ax = plt.subplots()\nwedges, texts, autotexts = ax.pie(sizes, labels=labels, colors=colors, explode=explode, startangle=140)\n\n# Annotate with arrows\nfor i, wedge in enumerate(wedges):\n    angle = (wedge.theta2 - wedge.theta1)/2 + wedge.theta1\n    x = wedge.r * 0.5 * plt.cos(plt.radians(angle))\n    y = wedge.r * 0.5 * plt.sin(plt.radians(angle))\n    ax.annotate(f'{sizes[i]}%', xy=(x, y), xytext=(1.3*x, 1.3*y),\n                arrowprops=dict(facecolor='black', arrowstyle='->'),\n                horizontalalignment='center', verticalalignment='center')\n\nplt.show()\n```\n\n### Explanation:\n- **Method 1**: Adjusts the label position using `pctdistance` and a custom function for `autopct` to hide labels for small sections.\n- **Method 2**: Places the labels outside the pie chart and uses `plt.annotate` to draw arrows from the labels to the pie sections.\n\nYou can choose either method based on your preference for placing the labels outside the pie chart."
    }
]