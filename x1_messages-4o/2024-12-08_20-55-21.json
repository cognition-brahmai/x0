[
    {
        "role": "user",
        "content": "Can you design a Python program that analyzes the sentiment of a list of sentences and outputs a summary of the emotions conveyed? Please format your solution as a Python function that takes in a list of sentences and returns a string summarizing the predominant emotions detected. The emotions can range from happiness to anger, and even include nuanced feelings such as confusion or ambivalence."
    },
    {
        "role": "assistant",
        "content": "Certainly! To analyze the sentiment of a list of sentences and summarize the predominant emotions, we can use a combination of natural language processing (NLP) techniques and sentiment analysis libraries. One popular library for sentiment analysis in Python is `nltk` along with `textblob`, which provides a simple API for common NLP tasks.\n\nHere's a Python function that takes a list of sentences and returns a summary of the predominant emotions detected:\n\n```python\nfrom textblob import TextBlob\nfrom collections import Counter\n\ndef analyze_sentiment(sentences):\n    # Define a simple mapping of polarity to emotions\n    def get_emotion_from_polarity(polarity):\n        if polarity > 0.5:\n            return 'happiness'\n        elif polarity > 0:\n            return 'contentment'\n        elif polarity == 0:\n            return 'neutral'\n        elif polarity > -0.5:\n            return 'confusion'\n        else:\n            return 'anger'\n    \n    emotions = []\n    \n    for sentence in sentences:\n        blob = TextBlob(sentence)\n        polarity = blob.sentiment.polarity\n        emotion = get_emotion_from_polarity(polarity)\n        emotions.append(emotion)\n        \n    # Count the occurrences of each emotion\n    emotion_counts = Counter(emotions)\n    \n    # Determine the predominant emotion\n    predominant_emotion = emotion_counts.most_common(1)[0][0]\n    \n    # Create a summary string\n    summary = f\"The predominant emotion is {predominant_emotion}, with the following distribution: {dict(emotion_counts)}.\"\n    \n    return summary\n\n# Example usage\nsentences = [\n    \"I am so happy with the results!\",\n    \"This is quite confusing.\",\n    \"I feel really content and satisfied.\",\n    \"I'm not sure how I feel about this.\",\n    \"This makes me angry!\"\n]\n\nprint(analyze_sentiment(sentences))\n```\n\n### Explanation:\n\n1. **TextBlob Library**: This library is used to analyze the sentiment of each sentence. It provides a polarity score ranging from -1 (negative) to 1 (positive).\n\n2. **Emotion Mapping**: We map the polarity scores to emotions:\n   - Polarity > 0.5 is mapped to 'happiness'.\n   - Polarity > 0 is mapped to 'contentment'.\n   - Polarity == 0 is 'neutral'.\n   - Polarity > -0.5 is 'confusion'.\n   - Polarity <= -0.5 is 'anger'.\n\n3. **Counting Emotions**: We use the `Counter` from the `collections` module to count the occurrences of each emotion.\n\n4. **Predominant Emotion**: The function identifies the most common emotion and generates a summary string that includes the distribution of emotions.\n\nThis function provides a simple yet effective way to summarize the emotional content of a list of sentences."
    }
]