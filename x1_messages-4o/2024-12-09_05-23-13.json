[
    {
        "role": "user",
        "content": "In Python, I know that the function `list.append()` appends to the end of a list. However, I have discovered that `list.prepend()` does not exist due to performance concerns for large lists. So, how can I prepend a value to a short list?"
    },
    {
        "role": "assistant",
        "content": "In Python, while there isn't a built-in `list.prepend()` method, you can prepend an element to a list by using list concatenation or the `insert()` method. Here are a couple of ways to do it:\n\n1. **Using List Concatenation:**\n\n   You can concatenate a single-element list with the existing list:\n\n   ```python\n   my_list = [2, 3, 4]\n   my_list = [1] + my_list\n   print(my_list)  # Output: [1, 2, 3, 4]\n   ```\n\n2. **Using the `insert()` method:**\n\n   The `insert()` method allows you to insert an element at a specific position in the list. To prepend, you insert at index `0`:\n\n   ```python\n   my_list = [2, 3, 4]\n   my_list.insert(0, 1)\n   print(my_list)  # Output: [1, 2, 3, 4]\n   ```\n\nBoth methods work well for short lists. However, keep in mind that both of these operations have a time complexity of O(n), where n is the number of elements in the list, because all the existing elements need to be shifted. For very large lists, this could become a performance concern."
    }
]