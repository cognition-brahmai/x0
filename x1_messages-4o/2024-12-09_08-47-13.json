[
    {
        "role": "user",
        "content": "How can I write a C++ class that sorts a vector of integers using the merge sort algorithm?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To implement a C++ class that sorts a vector of integers using the merge sort algorithm, you'll need to define a class that encapsulates the sorting logic. Here's a basic implementation:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nclass MergeSort {\npublic:\n    void sort(std::vector<int>& nums) {\n        if (nums.empty()) return;\n        std::vector<int> temp(nums.size());\n        mergeSort(nums, temp, 0, nums.size() - 1);\n    }\n\nprivate:\n    void mergeSort(std::vector<int>& nums, std::vector<int>& temp, int left, int right) {\n        if (left >= right) return;\n        int mid = left + (right - left) / 2;\n        mergeSort(nums, temp, left, mid);\n        mergeSort(nums, temp, mid + 1, right);\n        merge(nums, temp, left, mid, right);\n    }\n\n    void merge(std::vector<int>& nums, std::vector<int>& temp, int left, int mid, int right) {\n        for (int i = left; i <= right; i++) {\n            temp[i] = nums[i];\n        }\n\n        int i = left;\n        int j = mid + 1;\n        int k = left;\n\n        while (i <= mid && j <= right) {\n            if (temp[i] <= temp[j]) {\n                nums[k++] = temp[i++];\n            } else {\n                nums[k++] = temp[j++];\n            }\n        }\n\n        while (i <= mid) {\n            nums[k++] = temp[i++];\n        }\n\n        while (j <= right) {\n            nums[k++] = temp[j++];\n        }\n    }\n};\n\nint main() {\n    std::vector<int> nums = {38, 27, 43, 3, 9, 82, 10};\n    MergeSort sorter;\n    sorter.sort(nums);\n\n    std::cout << \"Sorted array: \";\n    for (int num : nums) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Class Definition**: The `MergeSort` class contains a public method `sort` that takes a vector of integers and sorts it.\n\n2. **Recursive Sorting**: The `mergeSort` function is a recursive function that divides the vector into halves until each sub-vector has one or zero elements (base case).\n\n3. **Merging**: The `merge` function combines two sorted halves into a single sorted sequence. It uses a temporary vector to hold elements while merging.\n\n4. **Main Function**: The `main` function demonstrates the use of the `MergeSort` class by sorting a vector of integers and printing the sorted sequence.\n\nThis implementation is a classic example of the divide-and-conquer approach used in merge sort, where the vector is recursively divided and then merged back together in a sorted manner."
    }
]