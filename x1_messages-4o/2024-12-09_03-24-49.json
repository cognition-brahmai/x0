[
    {
        "role": "user",
        "content": "In Python, is there an equivalent command to Matlab's 'hold on'? I'm trying to plot all my graphs on the same axes. Some graphs are generated inside a for loop and these are plotted separately from 'su' and 'sl'. Here's the code I'm currently working with:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nfor i in np.arange(1,5):\n    z = 68 + 4 * np.random.randn(50)\n    zm = np.cumsum(z) / range(1,len(z)+1)\n    plt.plot(zm)\n    plt.axis([0,50,60,80])\n\nplt.show()\n\nn = np.arange(1,51)\nsu = 68 + 4 / np.sqrt(n)\nsl = 68 - 4 / np.sqrt(n)\n\nplt.plot(n,su,n,sl)\n\nplt.axis([0,50,60,80])\nplt.show()\n```"
    },
    {
        "role": "assistant",
        "content": "In Python, when you use Matplotlib for plotting, the equivalent to MATLAB's `hold on` is simply continuing to call plot functions before calling `plt.show()`. By default, Matplotlib will overlay plots on the same axes until you clear the figure with `plt.clf()` or create a new one with `plt.figure()`. \n\nYour current code is almost correct; you just need to ensure you don't call `plt.show()` between the loops if you want all plots on the same axes. Here's how you can modify your code to achieve this:\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Create a new figure\nplt.figure()\n\n# Plot within the loop\nfor i in np.arange(1, 5):\n    z = 68 + 4 * np.random.randn(50)\n    zm = np.cumsum(z) / np.arange(1, len(z) + 1)\n    plt.plot(zm)\n\n# Plot 'su' and 'sl' on the same axes\nn = np.arange(1, 51)\nsu = 68 + 4 / np.sqrt(n)\nsl = 68 - 4 / np.sqrt(n)\n\nplt.plot(n, su, label='su')\nplt.plot(n, sl, label='sl')\n\n# Set axis limits\nplt.axis([0, 50, 60, 80])\n\n# Optionally add labels, title, and legend\nplt.xlabel('Sample Number')\nplt.ylabel('Values')\nplt.title('Cumulative Mean and Confidence Bounds')\nplt.legend()\n\n# Show the combined plot\nplt.show()\n```\n\n### Key Points:\n- Using `plt.figure()` creates a new figure window, but since we want to plot everything on the same plot, we call it only once at the beginning.\n- We don't call `plt.show()` until all plots are added.\n- Adding `label` to the `plot()` function allows you to use `plt.legend()` to show which line corresponds to which plot, which is helpful for distinguishing multiple plots."
    }
]