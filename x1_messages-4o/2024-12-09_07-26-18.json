[
    {
        "role": "user",
        "content": "How can I pass arguments to AWS Lambda functions using GET requests? I have an API gateway endpoint and I'd like to pass 'val1' and 'val2' in the URL string when making a GET request to my Lambda function. The URL is https://xyz.execute-api.amazonaws.com/prod/test?val1=5&val2=10. I have a function that sums the two inputs, 'val1' and 'val2'. Can anyone guide me on how to access these parameters inside the function?\n\n```python\ndef lambda_handler(event, context):\n    # How do I get at val1 and val2??\n    return {'result': val1 + val2}\n```\n\nI have added 'val1' and 'val2' to URL Query String Parameters on the Method Request on the AWS API Gateway."
    },
    {
        "role": "assistant",
        "content": "To access query string parameters in your AWS Lambda function, you can use the `event` object that is passed to the `lambda_handler` function. The query string parameters are available in the `event` dictionary under `event['queryStringParameters']`.\n\nHere's how you can modify your `lambda_handler` function to access `val1` and `val2` from the query string and calculate their sum:\n\n```python\ndef lambda_handler(event, context):\n    # Access val1 and val2 from the query string parameters\n    val1 = event['queryStringParameters'].get('val1')\n    val2 = event['queryStringParameters'].get('val2')\n\n    # Convert the parameters to integers\n    try:\n        val1 = int(val1)\n        val2 = int(val2)\n    except (TypeError, ValueError):\n        return {\n            'statusCode': 400,\n            'body': 'Invalid input: val1 and val2 must be integers.'\n        }\n\n    # Calculate the sum\n    result = val1 + val2\n\n    # Return the result\n    return {\n        'statusCode': 200,\n        'body': {'result': result}\n    }\n```\n\n### Key Points:\n1. **Accessing Parameters:** Use `event['queryStringParameters']` to access query parameters.\n2. **Type Conversion:** Convert the string parameters to integers, and handle exceptions if the conversion fails.\n3. **Error Handling:** Return an appropriate error message if the input is invalid.\n4. **Returning JSON:** Make sure the return value is properly formatted, usually as a dictionary with a status code and body.\n\nWhen you deploy this Lambda function behind an API Gateway, it will be able to extract the `val1` and `val2` parameters from the URL query string and compute their sum."
    }
]