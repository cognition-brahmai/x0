[
    {
        "role": "user",
        "content": "I am working on a Python project and I need to find the maximum rectangle area in a given matrix of 1s and 0s. Can anyone help me with the code?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To find the maximum rectangle area in a matrix of 1s and 0s, you can use a combination of dynamic programming and the largest rectangle in histogram algorithm. Here's a Python function to achieve that:\n\n```python\ndef max_histogram_area(heights):\n    stack = []\n    max_area = 0\n    index = 0\n    \n    while index < len(heights):\n        if not stack or heights[index] >= heights[stack[-1]]:\n            stack.append(index)\n            index += 1\n        else:\n            top_of_stack = stack.pop()\n            area = (heights[top_of_stack] *\n                   ((index - stack[-1] - 1) if stack else index))\n            max_area = max(max_area, area)\n    \n    while stack:\n        top_of_stack = stack.pop()\n        area = (heights[top_of_stack] *\n               ((index - stack[-1] - 1) if stack else index))\n        max_area = max(max_area, area)\n    \n    return max_area\n\ndef max_rectangle_area(matrix):\n    if not matrix:\n        return 0\n    \n    max_area = 0\n    n = len(matrix[0])\n    heights = [0] * n\n    \n    for row in matrix:\n        for i in range(n):\n            heights[i] = heights[i] + 1 if row[i] == 1 else 0\n        \n        max_area = max(max_area, max_histogram_area(heights))\n    \n    return max_area\n\n# Example usage\nmatrix = [\n    [1, 0, 1, 0, 0],\n    [1, 0, 1, 1, 1],\n    [1, 1, 1, 1, 1],\n    [1, 0, 0, 1, 0]\n]\n\nprint(max_rectangle_area(matrix))  # Output: 6\n```\n\n### Explanation:\n1. **Max Histogram Area Function**: The `max_histogram_area` function calculates the largest rectangle area in a histogram (array of heights) using a stack-based approach.\n\n2. **Max Rectangle Area Function**: The `max_rectangle_area` function iterates over each row of the matrix to build a histogram of \"heights\" for each column. The heights represent consecutive 1s in each column.\n\n3. **Calculate Maximum Area**: For each row (interpreted as the base of a histogram), it calculates the maximum rectangle area using the `max_histogram_area` function.\n\nThis solution efficiently computes the maximum rectangle area in a matrix with a time complexity of O(n*m), where n is the number of rows and m is the number of columns."
    }
]