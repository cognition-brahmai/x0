[
    {
        "role": "user",
        "content": "I am trying to use coroutines in Python 3.2 using the `yield` statement as shown in the example from Python Essential Reference. But when I run my code, I get an AttributeError saying 'generator' object has no attribute 'next'. Why doesn't this code work in Python 3.2? Why is what is supposed to be a coroutine, treated as a generator instead?\n\nHere is the code I wrote:\n\n```python\n#!/usr/bin/python3.2\nimport sys\n\ndef match_text(pattern):\n    line = (yield)\n    if pattern in line:\n        print(line)\n\nx = match_text('apple')\nx.next()\n\nfor line in input('>>>> '):\n    if x.send(line):\n        print(line)\n\nx.close()\n```\n\nAnd here is the error message I get:\n```python\nTraceback (most recent call last):\n  File \"xxx\", line 9, in <module>\n    matcher.next() # Advance to the first (yield)\nAttributeError: 'generator' object has no attribute 'next'\n```"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to differences in how coroutines and generators are handled in Python 3 as compared to Python 2. Specifically, the `next()` method has been replaced by the `__next__()` method in Python 3, and you should use the built-in `next()` function to advance a generator or coroutine.\n\nHere's how you can modify your code to work in Python 3.2:\n\n```python\n#!/usr/bin/python3.2\nimport sys\n\ndef match_text(pattern):\n    while True:\n        line = (yield)\n        if pattern in line:\n            print(line)\n\nx = match_text('apple')\nnext(x)  # Advance to the first (yield)\n\nwhile True:\n    line = input('>>>> ')\n    if not line:  # Exit on empty line\n        break\n    x.send(line)\n\nx.close()\n```\n\n### Key Changes:\n\n1. **Initialization**: Use `next(x)` instead of `x.next()` to advance the generator to the first `yield`.\n\n2. **Input Loop**: I changed the input loop to a `while True` loop, with an exit condition on an empty line, as `input()` doesn't work directly in a `for` loop.\n\n3. **Coroutine Pattern**: Added a `while True` loop inside the `match_text()` function to handle multiple lines of input, as initial code would only handle the first line due to the lack of a loop.\n\nWith these changes, your code should work correctly in Python 3.2."
    }
]