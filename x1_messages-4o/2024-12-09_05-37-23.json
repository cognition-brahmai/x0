[
    {
        "role": "user",
        "content": "How can I draw text at different angles using Python's PIL library? For instance, if I were to draw numbers around the face of a clock, the number '3' would appear as expected, while the number '12' would be drawn rotated counter-clockwise by 90 degrees. How can I draw multiple different strings at various angles?"
    },
    {
        "role": "assistant",
        "content": "To draw text at different angles using Python's PIL (Pillow) library, you can follow these steps. The key is to rotate each piece of text individually before pasting it onto the final image. Here's a step-by-step guide with a code example:\n\n1. **Install Pillow**: Make sure you have the Pillow library installed. You can install it using pip:\n\n   ```bash\n   pip install Pillow\n   ```\n\n2. **Create a function to draw rotated text**: This function will create an image of the text, rotate it, and then paste it onto the main image.\n\n3. **Draw each number at the appropriate angle**: Calculate the angle for each text position and use the function to draw it.\n\nHere's an example code illustrating how to do this:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\nimport math\n\ndef draw_rotated_text(image, text, position, angle, font, fill=(0, 0, 0)):\n    # Create a new image with transparent background to hold the text\n    text_image = Image.new('RGBA', image.size, (255, 255, 255, 0))\n    \n    # Draw the text onto the text image\n    draw = ImageDraw.Draw(text_image)\n    text_size = draw.textsize(text, font=font)\n    text_position = (position[0] - text_size[0] // 2, position[1] - text_size[1] // 2)\n    draw.text(text_position, text, font=font, fill=fill)\n    \n    # Rotate the text image\n    rotated_text_image = text_image.rotate(angle, resample=Image.BICUBIC, center=position)\n    \n    # Composite the rotated text image onto the main image\n    image.alpha_composite(rotated_text_image)\n\ndef main():\n    # Create an image with a white background\n    image_size = (400, 400)\n    image = Image.new('RGBA', image_size, (255, 255, 255, 255))\n    draw = ImageDraw.Draw(image)\n    \n    # Load a font\n    font_size = 24\n    try:\n        font = ImageFont.truetype(\"arial.ttf\", font_size)\n    except IOError:\n        font = ImageFont.load_default()\n\n    # Center of the clock\n    center = (image_size[0] // 2, image_size[1] // 2)\n    radius = 150\n\n    # Draw numbers around the clock face\n    for i in range(1, 13):\n        angle = i * 30  # Clock face angles (30 degrees between each hour)\n        text_angle = -angle  # Rotate text counter-clockwise\n        # Calculate position\n        x = center[0] + int(radius * math.cos(math.radians(angle - 90)))\n        y = center[1] + int(radius * math.sin(math.radians(angle - 90)))\n        draw_rotated_text(image, str(i), (x, y), text_angle, font)\n\n    # Save the image\n    image.save(\"clock_face.png\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- **draw_rotated_text**: This function handles the creation of a separate image for the text, rotates it, and pastes it onto the main image.\n- **main function**: Sets up the image, font, and calculates positions for each number around the clock face.\n- **Rotation**: The text is rotated by the negative of the angle at which the number should appear on the clock. This is because the PIL `rotate` function rotates images counter-clockwise by default.\n\nYou can modify the font, size, colors, and positions as needed to fit your specific requirements."
    }
]