[
    {
        "role": "user",
        "content": "I am experiencing an issue when printing pandas dataframes in Jupyter notebook. If the column names are too long, it disrupts the dataframe structure into separate lines. How can I print the dataframe in a bordered table style like the default output in Jupyter notebook? The code I am using is as follows:\n\n```\nd = pd.DataFrame({'A1_column':[1, 2, 4], 'B1_column':['a', 'b', 'd'],\n                 'A2_column':[1, 2, 4], 'B2_column':['a', 'b', 'd'],\n                 'A3_column':[1, 2, 4], 'B3_column':['a', 'b', 'd'],\n                 'A4_column':[1, 2, 4], 'B4_column':['a', 'b', 'd'],\n                 'A5_column':[1, 2, 4], 'B5_column':['a', 'b', 'd'],\n                 'A6_column':[1, 2, 4], 'B6_column':['a', 'b', 'd'],\n                 'A7_column':[1, 2, 4], 'B7_column':['a', 'b', 'd']})\nprint(d)\nd\n```"
    },
    {
        "role": "assistant",
        "content": "If you're experiencing issues with the display of pandas DataFrames in Jupyter Notebook due to long column names, you can use a couple of methods to improve the display. Here are some options to consider:\n\n1. **Use Pandas Display Options**:\n   You can adjust the display options for pandas to better fit your DataFrame.\n\n   ```python\n   import pandas as pd\n\n   pd.set_option('display.max_columns', None)  # Show all columns\n   pd.set_option('display.max_colwidth', None)  # No limit on column width\n\n   d = pd.DataFrame({\n       'A1_column': [1, 2, 4], 'B1_column': ['a', 'b', 'd'],\n       'A2_column': [1, 2, 4], 'B2_column': ['a', 'b', 'd'],\n       'A3_column': [1, 2, 4], 'B3_column': ['a', 'b', 'd'],\n       'A4_column': [1, 2, 4], 'B4_column': ['a', 'b', 'd'],\n       'A5_column': [1, 2, 4], 'B5_column': ['a', 'b', 'd'],\n       'A6_column': [1, 2, 4], 'B6_column': ['a', 'b', 'd'],\n       'A7_column': [1, 2, 4], 'B7_column': ['a', 'b', 'd']\n   })\n   print(d)\n   ```\n\n2. **Use the `Styler` Object**:\n   You can style the DataFrame with borders to make it more readable using the `Styler` object.\n\n   ```python\n   import pandas as pd\n\n   d = pd.DataFrame({\n       'A1_column': [1, 2, 4], 'B1_column': ['a', 'b', 'd'],\n       'A2_column': [1, 2, 4], 'B2_column': ['a', 'b', 'd'],\n       'A3_column': [1, 2, 4], 'B3_column': ['a', 'b', 'd'],\n       'A4_column': [1, 2, 4], 'B4_column': ['a', 'b', 'd'],\n       'A5_column': [1, 2, 4], 'B5_column': ['a', 'b', 'd'],\n       'A6_column': [1, 2, 4], 'B6_column': ['a', 'b', 'd'],\n       'A7_column': [1, 2, 4], 'B7_column': ['a', 'b', 'd']\n   })\n\n   # Use the Styler to add borders\n   styled_df = d.style.set_table_styles(\n       [{'selector': 'th', 'props': 'border: 1px solid black;'},\n        {'selector': 'td', 'props': 'border: 1px solid black;'}]\n   )\n   styled_df\n   ```\n\n3. **Use HTML/CSS for Better Display**:\n   You can use HTML and CSS to render the DataFrame in a more visually appealing way if you want more control over the styling.\n\n   ```python\n   from IPython.display import HTML\n\n   def render_dataframe(df):\n       return HTML(df.to_html(index=False,\n                              border=1,\n                              justify='center',\n                              classes='dataframe-style'))\n\n   d = pd.DataFrame({\n       'A1_column': [1, 2, 4], 'B1_column': ['a', 'b', 'd'],\n       'A2_column': [1, 2, 4], 'B2_column': ['a', 'b', 'd'],\n       'A3_column': [1, 2, 4], 'B3_column': ['a', 'b', 'd'],\n       'A4_column': [1, 2, 4], 'B4_column': ['a', 'b', 'd'],\n       'A5_column': [1, 2, 4], 'B5_column': ['a', 'b', 'd'],\n       'A6_column': [1, 2, 4], 'B6_column': ['a', 'b', 'd'],\n       'A7_column': [1, 2, 4], 'B7_column': ['a', 'b', 'd']\n   })\n\n   render_dataframe(d)\n   ```\n\nThese methods should help you maintain the structure of your DataFrame and make it more readable in Jupyter Notebook. Feel free to adjust the styling options to suit your needs."
    }
]