[
    {
        "role": "user",
        "content": "I am new to Heroku and Gunicorn and I am trying to deploy my Django app (1.5.1). My project structure is a bit different and the root directory is not where I can run Gunicorn. Here is my directory structure:\n\n```\napp_project\n    requirements/\n    contributors/\n    app/\n        app/\n            settings/\n            wsgi.py\n        # Normally Procfile goes here\n    Procfile\n```\n\nNormally, the `app/` would be the root directory, but I have structured my folders differently to separate my Django app from other things. As Heroku requires the Procfile to be in the root directory, I am unsure what I should put in the Procfile or what parameters I should use in the Gunicorn command. I want to keep the directory structure as is and I do not want to create a secondary git inside the app folder just for Heroku. The following commands do not work for me:\n\n```\nweb: gunicorn app.wsgi # won't work because Procfile is in a directory above\nweb: gunicorn app.app.wsgi # won't work because I don't want to convert the folder into a python module\n```\n\nHow can I modify the Procfile to run the Gunicorn process in a non-standard folder on Heroku?"
    },
    {
        "role": "assistant",
        "content": "To deploy your Django app on Heroku with your current directory structure, you can specify the Python path in the Procfile so that Gunicorn knows where to find your `wsgi` module. Given your setup, you can use the `--chdir` option with Gunicorn to change the working directory to where your `wsgi.py` file is located.\n\nHere's how you can modify your Procfile:\n\n1. Open your Procfile located in the `app_project` directory.\n\n2. Add the following line to it:\n\n   ```\n   web: gunicorn --chdir app/app app.wsgi\n   ```\n\n   In this command:\n   - `--chdir app/app` tells Gunicorn to change the current directory to `app/app` before starting the application.\n   - `app.wsgi` is the module path to your `wsgi.py` file, relative to the `app/app` directory.\n\n3. Ensure your `requirements.txt` includes `gunicorn` and any other necessary dependencies.\n\n4. Commit your changes to your git repository and push to Heroku.\n\nThis setup should tell Heroku to run Gunicorn with the correct module path, allowing you to maintain your directory structure as is. Make sure your `wsgi.py` is set up correctly to expose the WSGI application object. Here's a simple reference for what `wsgi.py` might look like:\n\n```python\nimport os\nfrom django.core.wsgi import get_wsgi_application\n\nos.environ.setdefault('DJANGO_SETTINGS_MODULE', 'app.settings')\n\napplication = get_wsgi_application()\n```\n\nReplace `'app.settings'` with the correct path to your settings module if it differs. This setup should deploy your Django app on Heroku successfully with your existing directory structure."
    }
]