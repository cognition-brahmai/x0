[
    {
        "role": "user",
        "content": "I have two pandas data frames with some common rows. Suppose dataframe2 is a subset of dataframe1. How can I obtain the rows from dataframe1 that are not present in dataframe2? Here are my dataframes for reference:\n\ndf1:\n```\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\n3     4    13\n4     5    14\n```\n\ndf2:\n```\n   col1  col2\n0     1    10\n1     2    11\n2     3    12\n```\n\nI want to get this result:\n```\n   col1  col2\n3     4    13\n4     5    14\n```"
    },
    {
        "role": "assistant",
        "content": "To obtain the rows from `df1` that are not present in `df2`, you can use the `pandas` function `merge` with the parameter `indicator=True` to identify which rows are unique to each DataFrame, followed by filtering the result. Here's how you can do it:\n\n```python\nimport pandas as pd\n\n# Define your dataframes\ndf1 = pd.DataFrame({\n    'col1': [1, 2, 3, 4, 5],\n    'col2': [10, 11, 12, 13, 14]\n})\n\ndf2 = pd.DataFrame({\n    'col1': [1, 2, 3],\n    'col2': [10, 11, 12]\n})\n\n# Perform the merge with indicator\nmerged_df = df1.merge(df2, how='outer', indicator=True)\n\n# Filter to get the rows only in df1\nresult = merged_df[merged_df['_merge'] == 'left_only'].drop(columns='_merge')\n\nprint(result)\n```\n\nThis will give you the desired output:\n```\n   col1  col2\n3     4    13\n4     5    14\n```"
    }
]