[
    {
        "role": "user",
        "content": "How can I add an Excel file attachment when sending an email using Python? I have already written code to send a basic email, but I now want to attach a document from my local computer. Here is my existing code:\n\n```python\n#!/usr/bin/python\n\nimport time\nimport smtplib\n\nwhile True:\n    TO = 'xxxx@gmail.com'\n    SUBJECT = 'Python Email'\n    TEXT = 'Here is the message'\n\n    gmail_sender = 'xxxx@gmail.com'\n    gmail_passwd = 'xxxx'\n\n    server = smtplib.SMTP('smtp.gmail.com',587)\n    server.ehlo()\n    server.starttls()\n    server.ehlo()\n    server.login(gmail_sender, gmail_passwd)\n    BODY = '\\n'.join([\n        'To: %s' % TO,\n        'From: %s' % gmail_sender,\n        'Subject:%s' % SUBJECT,\n        '',\n        TEXT\n    ])\n\n    try:\n        server.sendmail(gmail_sender,[TO], BODY)\n        print 'email sent'\n    except:\n        print 'error sending mail'\n\n    time.sleep(5)\n\nserver.quit()\n```"
    },
    {
        "role": "assistant",
        "content": "To add an Excel file attachment to your email using Python, you can use the `email` and `MIME` libraries to create a MIME message with an attachment. Here's how you can modify your existing code to include an Excel file as an attachment:\n\n```python\n#!/usr/bin/python\n\nimport time\nimport smtplib\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\nfrom email.mime.base import MIMEBase\nfrom email import encoders\nimport os\n\nwhile True:\n    TO = 'xxxx@gmail.com'\n    SUBJECT = 'Python Email'\n    TEXT = 'Here is the message'\n    FILE_PATH = 'path/to/your/excel_file.xlsx'  # Update this path to your Excel file\n\n    gmail_sender = 'xxxx@gmail.com'\n    gmail_passwd = 'xxxx'\n\n    # Create a multipart message\n    msg = MIMEMultipart()\n    msg['From'] = gmail_sender\n    msg['To'] = TO\n    msg['Subject'] = SUBJECT\n\n    # Add body text to the email\n    msg.attach(MIMEText(TEXT, 'plain'))\n\n    # Attach Excel file\n    part = MIMEBase('application', 'octet-stream')\n    with open(FILE_PATH, 'rb') as file:\n        part.set_payload(file.read())\n    encoders.encode_base64(part)\n    part.add_header(\n        'Content-Disposition',\n        f'attachment; filename={os.path.basename(FILE_PATH)}',\n    )\n    msg.attach(part)\n\n    # Connect to the server and send the email\n    try:\n        server = smtplib.SMTP('smtp.gmail.com', 587)\n        server.ehlo()\n        server.starttls()\n        server.ehlo()\n        server.login(gmail_sender, gmail_passwd)\n        server.sendmail(gmail_sender, [TO], msg.as_string())\n        print('email sent')\n    except Exception as e:\n        print(f'error sending mail: {e}')\n    finally:\n        server.quit()\n\n    time.sleep(5)\n```\n\n### Key Changes:\n1. **MIMEMultipart**: Used to create a message that can contain multiple parts, including text and attachments.\n2. **MIMEText**: Used to attach the body text to the email.\n3. **MIMEBase**: Used to attach the Excel file to the email.\n4. **Encoders**: Used to encode the attachment in base64.\n5. **os.path.basename**: Used to extract the file name from the file path for the attachment header.\n\nMake sure to replace `'path/to/your/excel_file.xlsx'` with the actual path to your Excel file.\n\nAdditionally, ensure that you have enabled \"Allow less secure apps\" on your Gmail account settings, as Gmail\u2019s default security settings might block this script. However, it's recommended to use more secure methods like OAuth2 for accessing Gmail in production environments."
    }
]