[
    {
        "role": "user",
        "content": "How can I easily pretty print floats in Python? I have a list of floats and when I print it, I get the output as follows:\n\n```python\n[9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]\n```\n\nI can use `print \"%.2f\"` in a for loop to traverse the list, but this would not work for more complex data structures. I want to have an output like this:\n\n```python\n>>> import print_options\n>>> print_options.set_float_precision(2)\n>>> print [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]\n[9.0, 0.05, 0.03, 0.01, 0.06, 0.08]\n```\n\nIs there a way to set the float precision for the print function?"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired output of pretty-printing floats with a set precision in Python, you can create a custom function or use a context manager to format the floats when printing. Unfortunately, there isn't a built-in `print_options` module, but you can achieve similar functionality using Python's formatting features. Here\u2019s a way to do it:\n\n### Custom Function\n\nYou can define a custom function to pretty print your list of floats:\n\n```python\ndef pretty_print_floats(float_list, precision=2):\n    formatted_floats = [f\"{x:.{precision}f}\" for x in float_list]\n    print(f\"[{', '.join(formatted_floats)}]\")\n\n# Example usage\nfloats = [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]\npretty_print_floats(floats)\n```\n\n### Using a Context Manager\n\nIf you want to use a more reusable approach and simulate something akin to `print_options`, you can define a context manager:\n\n```python\nfrom contextlib import contextmanager\n\n@contextmanager\ndef float_precision(precision):\n    format_str = f\"{{:.{precision}f}}\"\n    original_repr = float.__repr__\n    float.__repr__ = lambda self: format_str.format(self)\n    try:\n        yield\n    finally:\n        float.__repr__ = original_repr\n\n# Example usage\nfloats = [9.0, 0.052999999999999999, 0.032575399999999997, 0.010892799999999999, 0.055702500000000002, 0.079330300000000006]\n\nwith float_precision(2):\n    print(floats)\n```\n\n### Explanation\n\n1. **Custom Function**: This approach is straightforward and works well for lists of floats. It uses Python\u2019s string formatting to control the precision of each float before converting the list to a string for printing.\n\n2. **Context Manager**: This approach temporarily overrides the `__repr__` method of the `float` type to change how floats are represented as strings. This allows you to use `print()` naturally within the context manager block, and it will format the floats with the specified precision.\n\nBoth methods will give you the desired output with the specified float precision."
    }
]