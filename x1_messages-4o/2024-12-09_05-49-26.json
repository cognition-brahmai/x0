[
    {
        "role": "user",
        "content": "How can I determine if an exception was raised once I'm in the `finally` block in Python? I don't want to catch an exception I don't intend to handle just to set a flag. I'm dealing with a third-party code that can raise exceptions and I want to escalate the logging levels if an exception occurs. However, I do not want to escalate the logging levels in the general case as it becomes too verbose. Here's the code I'm working with:\n\n```python\ntry:\n    with LogCapture() as log:\n        funky_code()  # <-- third party badness\nfinally:\n    # log events are buffered in memory. if there was an exception,\n    # emit everything that was captured at a WARNING level\n    for record in log.captured:\n        if <there was an exception>:\n            log_fn = mylogger.warning\n        else:\n            log_fn = getattr(mylogger, record.levelname.lower())\n        log_fn(record.msg, record.args)\n```"
    },
    {
        "role": "assistant",
        "content": "In Python, when you want to determine if an exception was raised once you're in the `finally` block, you can use the `else` block of the `try` statement. The `else` block runs if no exception was raised in the `try` block. Here's how you can modify your code to achieve this:\n\n```python\nexception_occurred = False\n\ntry:\n    with LogCapture() as log:\n        funky_code()  # <-- third party badness\nexcept Exception as e:\n    exception_occurred = True\n    # Optionally, log the exception if you want to capture it immediately\n    mylogger.error(\"An exception occurred: %s\", e)\nfinally:\n    # log events are buffered in memory. if there was an exception,\n    # emit everything that was captured at a WARNING level\n    for record in log.captured:\n        if exception_occurred:\n            log_fn = mylogger.warning\n        else:\n            log_fn = getattr(mylogger, record.levelname.lower())\n        log_fn(record.msg, record.args)\n```\n\nHere's a breakdown of how this solution works:\n\n1. **Initialization**: Set a flag `exception_occurred` to `False` before the `try` block.\n\n2. **Exception Handling**: Use an `except` block to catch any exception and set the `exception_occurred` flag to `True`.\n\n3. **Finally Block**: In the `finally` block, check the value of `exception_occurred`. If it's `True`, escalate the logging level to `WARNING`. Otherwise, use the log level of the captured record.\n\nThis approach allows you to determine if an exception occurred without having to handle the exception immediately, thereby keeping your code clean and maintaining the intended control flow."
    }
]