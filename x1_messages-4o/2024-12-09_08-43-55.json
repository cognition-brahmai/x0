[
    {
        "role": "user",
        "content": "In Python, how can I check if all the items in a list are strings? For instance, in a list such as [\"one\", \"two\", 3], I want to return False, while for a list like [\"one\", \"two\", \"three\"], I want to return True. Is there a specific function that can help me achieve this?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can achieve this by using the `all()` function combined with a generator expression. The `all()` function returns `True` if all elements of the iterable are true (or if the iterable is empty). Here's how you can use it to check if all items in a list are strings:\n\n```python\ndef all_strings(lst):\n    return all(isinstance(item, str) for item in lst)\n\n# Example usage:\nlist1 = [\"one\", \"two\", 3]\nlist2 = [\"one\", \"two\", \"three\"]\n\nprint(all_strings(list1))  # Output: False\nprint(all_strings(list2))  # Output: True\n```\n\nIn this code, `isinstance(item, str)` checks if each item in the list is a string, and the generator expression `(isinstance(item, str) for item in lst)` creates an iterable of boolean values. The `all()` function then checks if all values in this iterable are `True`."
    }
]