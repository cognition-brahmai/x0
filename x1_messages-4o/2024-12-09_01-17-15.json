[
    {
        "role": "user",
        "content": "How can I configure Python to pass all traffic through a HTTP proxy server? I have looked into the urllib2 and requests packages and found they can be configured to use proxies. However, what I am looking for is something like a system-wide proxy for Python that can proxy all outgoing data."
    },
    {
        "role": "assistant",
        "content": "To configure Python to pass all traffic through a HTTP proxy server in a more system-wide manner, you can set environment variables that Python will automatically use for HTTP, HTTPS, and FTP traffic. Here\u2019s how you can do it:\n\n### Step 1: Set Environment Variables\n\nYou can set environment variables for `HTTP_PROXY`, `HTTPS_PROXY`, and `FTP_PROXY` which Python will use by default when making requests. This can be done in the terminal or within your Python script.\n\n#### For Unix/Linux/MacOS:\n\n```bash\nexport HTTP_PROXY=\"http://your-proxy-server:port\"\nexport HTTPS_PROXY=\"http://your-proxy-server:port\"\nexport FTP_PROXY=\"http://your-proxy-server:port\"\n```\n\n#### For Windows:\n\n```cmd\nset HTTP_PROXY=http://your-proxy-server:port\nset HTTPS_PROXY=http://your-proxy-server:port\nset FTP_PROXY=http://your-proxy-server:port\n```\n\n### Step 2: Use Environment Variables in Python\n\nPython\u2019s `requests` and `urllib` packages will automatically use these environment variables if they are set. There\u2019s no need to explicitly configure the proxy in your Python code if these variables are set.\n\n### Example with `requests`\n\n```python\nimport requests\n\nresponse = requests.get('http://example.com')\nprint(response.text)\n```\n\n### Example with `urllib`\n\n```python\nimport urllib.request\n\nwith urllib.request.urlopen('http://example.com') as response:\n    html = response.read()\n    print(html)\n```\n\n### Additional Considerations\n\n- **Authentication**: If your proxy requires authentication, include the username and password in the proxy URL: `http://username:password@your-proxy-server:port`.\n- **No Proxy**: If there are specific domains that should bypass the proxy, you can set the `NO_PROXY` environment variable with a comma-separated list of domains.\n- **Persistent Environment Variables**: To make these environment variables persistent across sessions, you can add them to your shell\u2019s configuration file (e.g., `.bashrc`, `.bash_profile`, or `.zshrc` for Unix/Linux/MacOS, or the system environment variables in Windows).\n\nBy setting these environment variables, you can ensure that all Python network traffic is routed through your specified HTTP proxy server."
    }
]