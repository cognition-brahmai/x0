[
    {
        "role": "user",
        "content": "How can I create a Python method with explicit keyword arguments, where I will be able to get a dictionary of only those arguments that the caller passed into the method? I would like the function signature to remain intact as it's part of a public API. Moreover, the solution should be able to detect even when the caller passes in a keyword argument assigned its default value. Here's the code I have:\n\n```python\ndef func(a=None, b=None, c=None):\n    for arg, val in magic_arg_dict.items():   # Where do I get the magic?\n        print '%s: %s' % (arg, val)\n```\n\nAnd I want to achieve the following:\n\n```python\n>>> func(b=2)\nb: 2\n>>> func(a=3, c=5)\na: 3\nc: 5\n>>> func(a=None)\na: None\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired behavior of capturing only the keyword arguments that were explicitly passed by the caller, even if they are assigned their default values, you can utilize Python's `inspect` module. The `inspect` module provides the capability to retrieve the arguments passed to a function and distinguish between those explicitly provided by the caller and those that were not. Here's how you can modify your function to achieve this:\n\n```python\nimport inspect\n\ndef func(a=None, b=None, c=None):\n    # Get the current frame and the caller's frame\n    current_frame = inspect.currentframe()\n    # Get the arguments of the caller function\n    args, _, _, values = inspect.getargvalues(current_frame)\n\n    # Dictionary to store only explicitly passed keyword arguments\n    magic_arg_dict = {}\n\n    # Iterate over the function's arguments\n    for arg in args:\n        # Check if the argument was explicitly passed by the caller\n        if arg in values:\n            magic_arg_dict[arg] = values[arg]\n\n    # Print the arguments passed by the caller\n    for arg, val in magic_arg_dict.items():\n        print('%s: %s' % (arg, val))\n\n# Example Usage\nfunc(b=2)\nfunc(a=3, c=5)\nfunc(a=None)\n```\n\n### Explanation:\n\n- The `inspect.currentframe()` function is used to get the current stack frame.\n- `inspect.getargvalues()` retrieves a tuple consisting of the argument names, variable positional arguments, variable keyword arguments, and a dictionary of the local namespace (i.e., the values of the arguments).\n- By iterating over the argument names and checking if they are present in the local namespace dictionary (`values`), you can determine which arguments were explicitly passed by the caller.\n- This approach captures all explicitly provided arguments, even if they match the default values."
    }
]