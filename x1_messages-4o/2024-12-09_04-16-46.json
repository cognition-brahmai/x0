[
    {
        "role": "user",
        "content": "I am debugging Python scripts using pdb and I know that I can use the 'p variables' command to print the values of specified variables at a certain point. However, if I have a large number of variables (like 20) and I want to track the value of all of them, how can I print all of them without specifying each one manually? For example, consider this script:\n```\na = 1\nb = 2\nc = 3\n```\nI can debug it with pdb and print all of the variables using 'p a, b, c' like this:\n```\n$ python -m pdb test.py \n> /media/test.py(1)<module>()\n-> a = 1\n(Pdb) n\n> /media/test.py(2)<module>()\n-> b = 2\n(Pdb) n\n> /media/test.py(3)<module>()\n(Pdb) n\n--Return--\n> /media/test.py(3)<module>()->None\n-> c = 3\n(Pdb) p a, b, c\n(1, 2, 3)\n(Pdb) \n```\nBut, I have to manually specify each variable. Is there a way to print all variables at once, without specifying each one of them?"
    },
    {
        "role": "assistant",
        "content": "When you're using `pdb` to debug Python scripts, printing all variables without specifying each one manually can be a bit tricky, but you can achieve this by leveraging the `locals()` function. The `locals()` function returns a dictionary of the current local symbol table, which includes all local variables and their values at that point in the execution.\n\nHere's how you can print all local variables using `locals()` in `pdb`:\n\n1. Start your script with `pdb` as usual.\n\n2. When you reach the point where you want to inspect all variables, you can use the `p locals()` command to print all local variables.\n\nHere's an example with your script:\n\n```python\na = 1\nb = 2\nc = 3\n```\n\nDebugging with `pdb`:\n\n```bash\n$ python -m pdb test.py\n> /media/test.py(1)<module>()\n-> a = 1\n(Pdb) n\n> /media/test.py(2)<module>()\n-> b = 2\n(Pdb) n\n> /media/test.py(3)<module>()\n(Pdb) n\n--Return--\n> /media/test.py(3)<module>()->None\n-> c = 3\n(Pdb) p locals()\n{'a': 1, 'b': 2, 'c': 3}\n```\n\nThis will print out all local variables and their values as a dictionary, so you don't have to specify each one manually. This approach is especially useful when you have a large number of variables you want to inspect."
    }
]