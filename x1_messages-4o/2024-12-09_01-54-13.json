[
    {
        "role": "user",
        "content": "How can I open and write to multiple files simultaneously using the \"with open\" statement in Python? I would like to modify several files at once only if I have write access to all of them. I tried to combine multiple open calls within a 'with' statement but it does not seem to work. Here is the code I tried:\n\n```python\ntry:\n  with open('a', 'w') as a and open('b', 'w') as b:\n    do_something()\nexcept IOError as e:\n  print 'Operation failed: %s' % e.strerror\n```\n\nIf this method is not feasible, could you suggest an elegant solution to this problem?"
    },
    {
        "role": "assistant",
        "content": "The syntax you used in the `with open` statement is incorrect. The `and` operator cannot be used to open multiple files in a single `with` statement. Instead, you can use a tuple to open multiple files simultaneously. Here's how you can do it:\n\n```python\ntry:\n    with open('a', 'w') as file_a, open('b', 'w') as file_b:\n        # Perform operations on the files here\n        file_a.write(\"Writing to file a\\n\")\n        file_b.write(\"Writing to file b\\n\")\nexcept IOError as e:\n    print(f'Operation failed: {e.strerror}')\n```\n\nThis approach will ensure that both files are opened, and the operations are performed only if both files are successfully opened. If opening either file fails, the exception will be caught, and the error message will be printed.\n\nHere's a breakdown of how this works:\n- The `with` statement can handle multiple context managers separated by commas.\n- If any file fails to open, the subsequent operations within the `with` block won't execute, and control will move to the `except` block.\n- This ensures that you attempt to write to the files only if both files are opened successfully.\n\nThis method is both elegant and Pythonic, as it makes use of the context management protocol to handle file operations safely and efficiently."
    }
]