[
    {
        "role": "user",
        "content": "I am transitioning to Python from a PHP background. In PHP, I can check if a function exists and assign it to a variable in one statement. For example, instead of writing the following code:\n\n```php\nif(getData()){\n    $data = getData();\n    echo $data;\n}\n```\n\nI can do this:\n\n```php\nif($data = getData()){\n    echo $data;\n}\n```\n\nIs there a way to do this in Python? Specifically, I want to avoid writing `request.GET.get('q')` twice in the following code snippet:\n\n```python\nif request.GET.get('q'):\n    q = request.GET.get('q')\n    print q\n```"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve similar functionality in Python by using a single statement to both check if a value exists and assign it to a variable. Here\u2019s how you can do it using the `:=` operator, also known as the \"walrus operator,\" which was introduced in Python 3.8:\n\n```python\nif (q := request.GET.get('q')):\n    print(q)\n```\n\nIn this code snippet, `q := request.GET.get('q')` both assigns the value of `request.GET.get('q')` to the variable `q` and evaluates to `True` if `q` is not `None` or is not a falsy value. This allows you to avoid calling `request.GET.get('q')` twice and keeps your code concise. Make sure you're using Python 3.8 or later to use the walrus operator."
    }
]