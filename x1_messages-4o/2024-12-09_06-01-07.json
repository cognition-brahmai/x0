[
    {
        "role": "user",
        "content": "Can someone explain what exactly does the function `functools.wraps` do in Python? I came across this function while reading an answer to another question and I am not sure about its function and usage."
    },
    {
        "role": "assistant",
        "content": "Certainly! In Python, `functools.wraps` is a decorator that is used to preserve the metadata of the original function when you are wrapping it with another function, typically in the context of creating decorators.\n\nWhen you create a decorator, you often define an inner function that takes the place of the original function. This can cause the original function's metadata, such as its name, docstring, and other attributes, to be lost or replaced by those of the inner function. This is where `functools.wraps` comes into play.\n\nHere's how `functools.wraps` works:\n\n1. **Preserving Metadata**: `functools.wraps` is itself a decorator that you apply to the inner function within your decorator. It copies the metadata from the original function to the inner function, ensuring that the name, docstring, and other attributes are preserved.\n\n2. **Usage**: You use `functools.wraps` by passing the original function as an argument to it. This is typically done in the definition of the wrapper function inside your decorator.\n\nHere is an example to illustrate its usage:\n\n```python\nimport functools\n\ndef my_decorator(func):\n    @functools.wraps(func)\n    def wrapper(*args, **kwargs):\n        print(\"Something is happening before the function is called.\")\n        result = func(*args, **kwargs)\n        print(\"Something is happening after the function is called.\")\n        return result\n    return wrapper\n\n@my_decorator\ndef say_hello(name):\n    \"\"\"This function says hello to someone.\"\"\"\n    print(f\"Hello, {name}!\")\n\nsay_hello(\"Alice\")\nprint(say_hello.__name__)  # Output: say_hello\nprint(say_hello.__doc__)   # Output: This function says hello to someone.\n```\n\nIn this example:\n\n- `my_decorator` is a decorator that wraps the `say_hello` function.\n- The `wrapper` function inside `my_decorator` is decorated with `@functools.wraps(func)`, which copies the metadata from `say_hello` to `wrapper`.\n- As a result, when you inspect the decorated `say_hello`, it retains its original name and docstring, despite being wrapped by the `wrapper` function.\n\nIn summary, `functools.wraps` is a helpful tool for ensuring that the original function's metadata is not lost when you create decorators, making debugging and introspection easier."
    }
]