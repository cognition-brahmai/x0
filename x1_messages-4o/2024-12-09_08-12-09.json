[
    {
        "role": "user",
        "content": "How can I ignore extra arguments passed to a Python dataclass? I am trying to create a 'config' dataclass to simplify whitelisting and access to specific environment variables. However, I'm having trouble ignoring unused environment variables in my dataclass's '__init__' function. Here is the code I am using:\n\n```python\nimport os\nfrom dataclasses import dataclass\n\n@dataclass\nclass Config:\n    VAR_NAME_1: str\n    VAR_NAME_2: str\n\nconfig = Config(**os.environ)\n```\n\nWhen I run this, I get the following TypeError: '__init__() got an unexpected keyword argument 'SOME_DEFAULT_ENV_VAR''. How can I modify the '__init__' function to ignore extra arguments?"
    },
    {
        "role": "assistant",
        "content": "To handle this situation, you can customize the `__init__` method of your dataclass to filter out any unexpected keyword arguments. This involves overriding the default `__init__` method generated by the `dataclass` decorator. Here\u2019s how you can modify your `Config` dataclass to ignore extra arguments:\n\n```python\nimport os\nfrom dataclasses import dataclass, fields\n\n@dataclass\nclass Config:\n    VAR_NAME_1: str = None\n    VAR_NAME_2: str = None\n\n    def __init__(self, **kwargs):\n        # Retrieve the names of the fields defined in the dataclass\n        field_names = {field.name for field in fields(self)}\n        \n        # Filter out kwargs to only include those present in the dataclass\n        filtered_kwargs = {k: v for k, v in kwargs.items() if k in field_names}\n        \n        # Set the attributes\n        for field_name in field_names:\n            setattr(self, field_name, filtered_kwargs.get(field_name, None))\n\n# Example usage\nconfig = Config(**os.environ)\n```\n\n### Explanation:\n\n1. **Field Names Extraction**: We get the names of the fields defined in the dataclass using `fields(self)`. This returns a list of `Field` objects, and we create a set of field names for easy lookup.\n\n2. **Filtering Keyword Arguments**: We only retain keyword arguments that match the field names of the dataclass. This is done using a dictionary comprehension.\n\n3. **Setting Attributes**: We iterate over each field name and set the respective attribute on the dataclass instance. If an environment variable is not provided, the field will be set to `None` by default.\n\nThis approach ensures that only the expected arguments are passed to the dataclass, and any extra arguments in `os.environ` are ignored without causing a `TypeError`."
    }
]