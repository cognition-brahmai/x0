[
    {
        "role": "user",
        "content": "In Python, how can I use Regular Expressions (RegEx) to split a text string into sentences, without using NLTK? I want to split at the end of a sentence, but not at decimals, abbreviations, titles of names, or if the sentence includes a \".com\". My current attempt at a regex pattern does not work as expected. \n\nHere is the code I've attempted:\n\n```python\nimport re\n\ntext = \"\"\"\\\nMr. Smith bought cheapsite.com for 1.5 million dollars, i.e. he paid a lot for it. Did he mind? Adam Jones Jr. thinks he didn't. In any case, this isn't true... Well, with a probability of .9 it isn't.\n\"\"\"\nsentences = re.split(r' *[\\.\\?!][\\'\"\\)\\]]* *', text)\n\nfor stuff in sentences:\n        print(stuff)    \n```\nHowever, I want the output to look like this:\n\n```python\nMr. Smith bought cheapsite.com for 1.5 million dollars, i.e. he paid a lot for it. \nDid he mind?\nAdam Jones Jr. thinks he didn't.\nIn any case, this isn't true...\nWell, with a probability of .9 it isn't.\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired result, you'll need to craft a more sophisticated regular expression pattern that accounts for exceptions like decimals, common abbreviations, and URLs. The goal is to split the text only at the end of complete sentences. Here's an improved approach using regular expressions:\n\n```python\nimport re\n\ntext = \"\"\"\\\nMr. Smith bought cheapsite.com for 1.5 million dollars, i.e. he paid a lot for it. Did he mind? Adam Jones Jr. thinks he didn't. In any case, this isn't true... Well, with a probability of .9 it isn't.\n\"\"\"\n\n# Define a regex pattern that matches sentence boundaries considering exceptions\npattern = r'''\n    (?<!\\bMr)(?<!\\bMrs)(?<!\\bMs)(?<!\\bDr)     # Not preceded by common titles\n    (?<!\\bJr)(?<!\\bSr)(?<!\\bSt)               # Not preceded by common abbreviations\n    (?<!\\bInc)(?<!\\bLtd)(?<!com\\b)            # Not preceded by company-related or domain-related words\n    (?<!\\b\\w\\.\\w\\.)                           # Not preceded by initials (e.g., A.B.)\n    (?<!\\.\\d)                                # Not preceded by a decimal number\n    (?<=\\b\\.\\s|\\b\\?\\s|\\b!\\s)                  # Followed by a sentence-ending punctuation and a space\n'''\n\n# Use re.split with the defined pattern and re.VERBOSE for clarity\nsentences = re.split(pattern, text, flags=re.VERBOSE)\n\n# Strip leading and trailing whitespace and filter out empty strings\nsentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n\nfor sentence in sentences:\n    print(sentence)\n```\n\n### Explanation:\n- **(?<!...)**: This is a negative lookbehind assertion. It ensures that the pattern is not preceded by the specified sequence.\n- **(?<=...)**: This is a positive lookbehind assertion. It ensures that the pattern is preceded by the specified sequence.\n- **\\b**: This matches a word boundary, helping to ensure we don't accidentally match parts of longer words.\n- **\\s**: This matches any whitespace character.\n- **re.VERBOSE**: This flag allows us to write the regular expression pattern in a more readable format by ignoring whitespace and comments within the pattern.\n\nThis pattern should help you split the text into sentences, respecting the exceptions you mentioned. Adjust the lookbehind assertions as needed for other exceptions you might encounter."
    }
]