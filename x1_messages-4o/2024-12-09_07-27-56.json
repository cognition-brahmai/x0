[
    {
        "role": "user",
        "content": "I'm trying to clone two private Github repositories (A and B) within the same organization (ORG). In repository A, I have repository B listed in the `requirements.txt` file as `-e git+git@github.com:ORG/B.git#egg=B`. I'm running a workflow for A in `.github/workflows/test.yml` with the following code:\n\n```yml\nname: Python package\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Install requirements\n      run: |\n        pip install -r requirements.txt\n\n    - name: Test with pytest\n      run: |\n        pytest ./tests\n```\n\nHowever, since repository B is private, it fails when attempting to install it. Is there a way to successfully install repository B while testing A in this workflow, given that both repositories are within the same organization?"
    },
    {
        "role": "assistant",
        "content": "To handle the installation of a private repository in a GitHub Actions workflow, you need to ensure that the workflow has the appropriate authentication to access the private repository. Here\u2019s a step-by-step guide to achieve this:\n\n1. **Use SSH Keys or Personal Access Token (PAT)**: You can either use SSH keys configured in your GitHub secrets or a Personal Access Token to authenticate access to the private repository.\n\n2. **Configure SSH Keys (Recommended for Organization Repositories)**:\n   - Generate an SSH key pair on your local machine (if you don't already have one).\n   - Add the public key to the `Deploy keys` section of both repositories A and B.\n   - Add the private key to the secrets of repository A (let's name it `SSH_PRIVATE_KEY`).\n\n3. **Update the Workflow**:\n   - Modify the workflow to use the SSH key for authentication. Below is an example of how you can do it:\n\n```yml\nname: Python package\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Setup SSH\n      run: |\n        mkdir -p ~/.ssh/\n        echo \"${{ secrets.SSH_PRIVATE_KEY }}\" > ~/.ssh/id_rsa\n        chmod 600 ~/.ssh/id_rsa\n        ssh-keyscan github.com >> ~/.ssh/known_hosts\n\n    - name: Install requirements\n      run: |\n        pip install -r requirements.txt\n\n    - name: Test with pytest\n      run: |\n        pytest ./tests\n```\n\n4. **Using Personal Access Token (PAT)**:\n   - Generate a PAT with `repo` scope from your GitHub account.\n   - Add the PAT as a secret in repository A, for example, `GH_TOKEN`.\n   - Modify the `requirements.txt` entry for repository B to use HTTPS with the token:\n\n```plaintext\n-e git+https://${GH_TOKEN}@github.com/ORG/B.git#egg=B\n```\n\n   - Update the workflow to use the PAT:\n\n```yml\nname: Python package\n\non: push\n\njobs:\n  build:\n\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v1\n\n    - name: Install requirements\n      env:\n        GH_TOKEN: ${{ secrets.GH_TOKEN }}\n      run: |\n        pip install -r requirements.txt\n\n    - name: Test with pytest\n      run: |\n        pytest ./tests\n```\n\nBy setting up authentication through either SSH keys or a PAT, you can grant the necessary permissions for your GitHub Actions workflow to access and install dependencies from private repositories."
    }
]