[
    {
        "role": "user",
        "content": "What is the code to create a GraphQL server with a schema for a todo list application?"
    },
    {
        "role": "assistant",
        "content": "To create a GraphQL server with a schema for a Todo List application, you can use Node.js along with the `apollo-server` library. Below is a simple example that demonstrates how to set up such a server:\n\n1. **Initialize the project**: Create a new directory for your project and initialize a Node.js project.\n\n   ```bash\n   mkdir graphql-todo-list\n   cd graphql-todo-list\n   npm init -y\n   ```\n\n2. **Install necessary packages**: Install `apollo-server`, `graphql`, and `uuid` (for generating unique IDs).\n\n   ```bash\n   npm install apollo-server graphql uuid\n   ```\n\n3. **Create the server**: Create a file named `server.js` and add the following code:\n\n   ```javascript\n   const { ApolloServer, gql } = require('apollo-server');\n   const { v4: uuidv4 } = require('uuid');\n\n   // Sample data\n   let todos = [\n     { id: '1', task: 'Buy groceries', completed: false },\n     { id: '2', task: 'Read a book', completed: true },\n   ];\n\n   // Define the GraphQL schema\n   const typeDefs = gql`\n     type Todo {\n       id: ID!\n       task: String!\n       completed: Boolean!\n     }\n\n     type Query {\n       todos: [Todo!]!\n       todo(id: ID!): Todo\n     }\n\n     type Mutation {\n       addTodo(task: String!): Todo\n       updateTodo(id: ID!, task: String, completed: Boolean): Todo\n       deleteTodo(id: ID!): Boolean\n     }\n   `;\n\n   // Define the resolvers\n   const resolvers = {\n     Query: {\n       todos: () => todos,\n       todo: (_, { id }) => todos.find(todo => todo.id === id),\n     },\n     Mutation: {\n       addTodo: (_, { task }) => {\n         const newTodo = { id: uuidv4(), task, completed: false };\n         todos.push(newTodo);\n         return newTodo;\n       },\n       updateTodo: (_, { id, task, completed }) => {\n         const todo = todos.find(todo => todo.id === id);\n         if (!todo) return null;\n         if (task !== undefined) todo.task = task;\n         if (completed !== undefined) todo.completed = completed;\n         return todo;\n       },\n       deleteTodo: (_, { id }) => {\n         const index = todos.findIndex(todo => todo.id === id);\n         if (index === -1) return false;\n         todos.splice(index, 1);\n         return true;\n       },\n     },\n   };\n\n   // Create an instance of ApolloServer\n   const server = new ApolloServer({ typeDefs, resolvers });\n\n   // Start the server\n   server.listen().then(({ url }) => {\n     console.log(`\ud83d\ude80 Server ready at ${url}`);\n   });\n   ```\n\n4. **Run the server**: Start the server by running the following command in your terminal:\n\n   ```bash\n   node server.js\n   ```\n\n5. **Test the server**: Open your browser and navigate to the server URL (usually `http://localhost:4000`). You\u2019ll see the Apollo Server playground where you can test your GraphQL queries and mutations.\n\nHere's how you can use some example queries and mutations:\n\n- **Query all todos**:\n\n  ```graphql\n  query {\n    todos {\n      id\n      task\n      completed\n    }\n  }\n  ```\n\n- **Add a new todo**:\n\n  ```graphql\n  mutation {\n    addTodo(task: \"Write code\") {\n      id\n      task\n      completed\n    }\n  }\n  ```\n\n- **Update a todo**:\n\n  ```graphql\n  mutation {\n    updateTodo(id: \"1\", completed: true) {\n      id\n      task\n      completed\n    }\n  }\n  ```\n\n- **Delete a todo**:\n\n  ```graphql\n  mutation {\n    deleteTodo(id: \"1\")\n  }\n  ```\n\nThis setup provides a basic GraphQL server that allows you to manage a simple Todo list. You can expand upon this by adding features such as user authentication, more complex querying, and better error handling."
    }
]