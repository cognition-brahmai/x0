[
    {
        "role": "user",
        "content": "I am using Django REST Framework and I want to limit the values that can be used in a related field during creation. For instance, in the following class 'PurchaseList' which is based on the filtering example on http://django-rest-framework.org/api-guide/filtering.html, but modified to 'ListCreateAPIView':\n\n```python\nclass PurchaseList(generics.ListCreateAPIView):\n    model = Purchase\n    serializer_class = PurchaseSerializer\n\n    def get_queryset(self):\n        user = self.request.user\n        return Purchase.objects.filter(purchaser=user)\n```\nHow can I ensure that during the creation, the purchaser can only be equal to self.request.user, and this is the only value populated in the dropdown in the form in the browsable API renderer?"
    },
    {
        "role": "assistant",
        "content": "To ensure that the `purchaser` field is automatically set to the current user (`self.request.user`) during the creation of a new `Purchase` instance in Django REST Framework, you can override the `perform_create` method in your `PurchaseList` view. Additionally, you can customize the behavior in the serializer to prevent the `purchaser` field from being exposed in the browsable API.\n\nHere\u2019s how you can achieve this:\n\n1. **Override `perform_create` Method:**\n\n   Override the `perform_create` method in your `PurchaseList` view to set the `purchaser` field to the current user:\n\n   ```python\n   from rest_framework import generics\n   from .models import Purchase\n   from .serializers import PurchaseSerializer\n\n   class PurchaseList(generics.ListCreateAPIView):\n       serializer_class = PurchaseSerializer\n\n       def get_queryset(self):\n           user = self.request.user\n           return Purchase.objects.filter(purchaser=user)\n\n       def perform_create(self, serializer):\n           serializer.save(purchaser=self.request.user)\n   ```\n\n2. **Customize the Serializer:**\n\n   To ensure the `purchaser` field is not exposed in the browsable API form, you can use the `SerializerMethodField` or simply exclude the `purchaser` field from the input fields:\n\n   ```python\n   from rest_framework import serializers\n   from .models import Purchase\n\n   class PurchaseSerializer(serializers.ModelSerializer):\n       class Meta:\n           model = Purchase\n           fields = ['id', 'item', 'quantity', 'price']  # Exclude 'purchaser'\n\n       # Alternatively, you can override the create method to ensure purchaser is not set by the client\n       def create(self, validated_data):\n           # purchaser is set in the perform_create method, so remove it from validated_data\n           validated_data.pop('purchaser', None)\n           return super().create(validated_data)\n   ```\n\nThis setup ensures that during the creation of a `Purchase` instance, the `purchaser` is automatically set to the current user, and it is not exposed in the form for selection or change. The `perform_create` method ensures that the purchaser field is set correctly, while the serializer is configured to prevent clients from manually setting or altering the `purchaser` field."
    }
]