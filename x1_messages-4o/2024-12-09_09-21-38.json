[
    {
        "role": "user",
        "content": "How can I create a program that sorts an array of numbers using the selection sort algorithm and returns the sorted array?"
    },
    {
        "role": "assistant",
        "content": "To create a program that sorts an array of numbers using the selection sort algorithm, you can follow these steps. I'll provide an example in Python, but the logic can be implemented in any programming language.\n\n### Selection Sort Algorithm\n\n1. **Initialize**: Start from the beginning of the array.\n2. **Find the Minimum**: For each position, find the smallest element in the unsorted portion of the array.\n3. **Swap**: Swap the found minimum element with the element at the current position.\n4. **Repeat**: Move to the next position and repeat until the array is sorted.\n\nHere's a Python implementation of the selection sort algorithm:\n\n```python\ndef selection_sort(arr):\n    # Traverse through all array elements\n    for i in range(len(arr)):\n        # Find the minimum element in remaining unsorted array\n        min_idx = i\n        for j in range(i + 1, len(arr)):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n                \n        # Swap the found minimum element with the first element\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]\n    \n    return arr\n\n# Example usage:\narray = [64, 25, 12, 22, 11]\nsorted_array = selection_sort(array)\nprint(\"Sorted array:\", sorted_array)\n```\n\n### Explanation\n\n- **Outer Loop (`for i in range(len(arr))`)**: This loop iterates over each element of the array, treating it as the boundary between the sorted and unsorted portions.\n- **Inner Loop (`for j in range(i + 1, len(arr))`)**: This loop finds the minimum element in the unsorted portion of the array.\n- **Swap Operation**: Once the minimum element is found, it is swapped with the element at the current boundary (i).\n\nThe time complexity of the selection sort algorithm is \\(O(n^2)\\), where \\(n\\) is the number of elements in the array. It is not the most efficient sorting algorithm for large datasets but is a good choice for educational purposes and small arrays due to its simplicity."
    }
]