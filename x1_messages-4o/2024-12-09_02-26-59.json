[
    {
        "role": "user",
        "content": "I am working on a Python/Django application which serves as a web API server to its frontend counterpart. The data is exchanged between the server and the client in JSON format with the use of XMLHttpRequest (Javascript). Python uses `names_with_underscores` naming convention while Javascript prefers `camelCaseNames`. I would like to maintain these conventions in their respective environments and convert the identifiers when data exchange occurs. I have decided to perform this conversion on the server side (Python). I am specifically interested in performing this conversion during JSON serialization/deserialization. How can I implement this approach using Python 2.7?"
    },
    {
        "role": "assistant",
        "content": "To achieve the conversion between `snake_case` and `camelCase` during JSON serialization and deserialization in a Python/Django application, you can implement a custom JSON encoder and decoder. Here's a guide on how to do this in Python 2.7:\n\n### Step 1: Create Conversion Functions\n\nFirst, you need functions to convert from `snake_case` to `camelCase` and vice versa.\n\n```python\nimport re\n\ndef snake_to_camel(snake_str):\n    components = snake_str.split('_')\n    return components[0] + ''.join(x.title() for x in components[1:])\n\ndef camel_to_snake(camel_str):\n    return re.sub('([A-Z])', r'_\\1', camel_str).lower()\n```\n\n### Step 2: Custom JSON Encoder and Decoder\n\nYou can use `json` module customization to handle encoding and decoding.\n\n#### Custom JSON Encoder\n\n```python\nimport json\n\nclass CustomJSONEncoder(json.JSONEncoder):\n    def encode(self, obj):\n        def convert_keys(obj):\n            if isinstance(obj, dict):\n                new_obj = {}\n                for k, v in obj.items():\n                    new_key = snake_to_camel(k) if isinstance(k, str) else k\n                    new_obj[new_key] = convert_keys(v)\n                return new_obj\n            elif isinstance(obj, list):\n                return [convert_keys(item) for item in obj]\n            else:\n                return obj\n\n        return super(CustomJSONEncoder, self).encode(convert_keys(obj))\n```\n\n#### Custom JSON Decoder\n\n```python\nclass CustomJSONDecoder(json.JSONDecoder):\n    def __init__(self, *args, **kwargs):\n        super(CustomJSONDecoder, self).__init__(object_hook=self.object_hook, *args, **kwargs)\n\n    def object_hook(self, obj):\n        def convert_keys(obj):\n            if isinstance(obj, dict):\n                new_obj = {}\n                for k, v in obj.items():\n                    new_key = camel_to_snake(k) if isinstance(k, str) else k\n                    new_obj[new_key] = convert_keys(v)\n                return new_obj\n            elif isinstance(obj, list):\n                return [convert_keys(item) for item in obj]\n            else:\n                return obj\n\n        return convert_keys(obj)\n```\n\n### Step 3: Use Custom Encoder and Decoder\n\nYou can now use these custom encoder and decoder classes in your Django views or wherever you perform JSON serialization or deserialization.\n\n#### Example Usage\n\n```python\n# Serializing Python object to JSON with camelCase keys\nresponse_data = {\n    'some_data': 123,\n    'another_value': 'hello'\n}\n\njson_response = json.dumps(response_data, cls=CustomJSONEncoder)\n\n# Deserializing JSON with camelCase keys to Python object with snake_case keys\njson_input = '{\"someData\": 123, \"anotherValue\": \"hello\"}'\npython_data = json.loads(json_input, cls=CustomJSONDecoder)\n```\n\n### Integration with Django\n\nTo integrate this into a Django view, you can use these custom encoder and decoder classes when handling JSON data:\n\n```python\nfrom django.http import JsonResponse, HttpResponse\nimport json\n\ndef my_view(request):\n    if request.method == 'POST':\n        # Deserialize JSON input with camelCase keys\n        body = request.body.decode('utf-8')\n        data = json.loads(body, cls=CustomJSONDecoder)\n\n        # Process the data...\n        \n        # Prepare response data with snake_case keys\n        response_data = {\n            'some_data': 123,\n            'another_value': 'processed'\n        }\n        \n        # Serialize response to JSON with camelCase keys\n        return HttpResponse(json.dumps(response_data, cls=CustomJSONEncoder), content_type='application/json')\n    else:\n        return JsonResponse({'error': 'Invalid request method'}, status=405)\n```\n\nThis setup ensures that your Python/Django application adheres to the `snake_case` convention while communicating JSON data in `camelCase` with the JavaScript frontend."
    }
]