[
    {
        "role": "user",
        "content": "Are user-defined classes in Python mutable? For example, if I want to create a class for `car`, `tractor`, and `boat`, where all these classes have an instance of `engine` and I aim to keep track of all the engines in a single list. Can I store the motor object as an attribute of `car` and also the same instance in a list, if the motor object is mutable? I am not able to find concrete information on whether user-defined classes are mutable and if there is an option to choose when you define them. Can someone provide clarity on this?"
    },
    {
        "role": "assistant",
        "content": "In Python, user-defined classes are mutable by default. This means that instances of a class can have their attributes modified after they have been created. This is different from immutable types, like tuples and strings, where the content cannot be changed once they are created.\n\nFor your scenario, if you have classes for `Car`, `Tractor`, and `Boat`, and each of these classes has an instance of `Engine`, you can indeed store the `Engine` object both as an attribute of the `Car` (or `Tractor`, or `Boat`) and in a list. Here's a basic example to illustrate this:\n\n```python\nclass Engine:\n    def __init__(self, model):\n        self.model = model\n\nclass Car:\n    def __init__(self, engine):\n        self.engine = engine\n\nclass Tractor:\n    def __init__(self, engine):\n        self.engine = engine\n\nclass Boat:\n    def __init__(self, engine):\n        self.engine = engine\n\n# Creating engine instances\nengine1 = Engine(\"V8\")\nengine2 = Engine(\"Diesel\")\n\n# Creating vehicle instances using the same engines\ncar = Car(engine1)\ntractor = Tractor(engine2)\nboat = Boat(engine1)\n\n# List to keep track of all engines\nengine_list = [engine1, engine2]\n\n# Modifying the engine through one of the vehicles\ncar.engine.model = \"V8 Turbo\"\n\n# Checking the engine model in the list\nprint(engine_list[0].model)  # Output: V8 Turbo\n```\n\nIn this example, `engine1` is used as the engine for both the `Car` and the `Boat`. Since `Engine` is mutable, any changes made to `engine1` through one of these classes will be reflected in all references to that object, including the `engine_list`.\n\nIf you want to make a user-defined class immutable, you can override the `__setattr__` method to prevent modifications to attributes or use properties to control access to the attributes. However, doing so can be more complex and is not typical unless immutability is specifically required for your design."
    }
]