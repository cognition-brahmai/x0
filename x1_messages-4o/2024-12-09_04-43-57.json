[
    {
        "role": "user",
        "content": "How can I add exactly \"3 months\" to a datetime.date object in Python? I need to plot dates every three months for several years in my application, ensuring the dates occur exactly 4 times a year, on the same day each year and month as much as possible. The dates should be as close to \"3 months\" apart as they can be, accounting for variations like leap years. Unfortunately, I noticed that datetime.timedelta doesn't support months. Is there a standard or recommended way to perform this calculation in Python?"
    },
    {
        "role": "assistant",
        "content": "To add exactly \"3 months\" to a `datetime.date` object in Python, you can use the `dateutil` library, which provides a convenient way to handle relative date adjustments with its `relativedelta` class. This approach will account for variations such as leap years and different month lengths, ensuring that your dates occur every three months as close to the same day as possible.\n\nHere is how you can achieve this using `dateutil.relativedelta`:\n\n1. First, ensure you have the `python-dateutil` library installed. You can install it using pip if you haven't already:\n\n   ```bash\n   pip install python-dateutil\n   ```\n\n2. Use the `relativedelta` class to add three months to a `datetime.date` object:\n\n   ```python\n   from datetime import date\n   from dateutil.relativedelta import relativedelta\n\n   # Example starting date\n   start_date = date(2023, 1, 31)  # January 31, 2023\n\n   # Calculate the next date 3 months later\n   next_date = start_date + relativedelta(months=3)\n\n   print(\"Start Date:\", start_date)\n   print(\"Next Date (3 months later):\", next_date)\n   ```\n\nThis approach will correctly handle cases such as moving from January 31 to April 30 (rather than a non-existent April 31), and it will ensure that the intervals are approximately three months apart as much as possible while respecting the calendar constraints.\n\nYou can repeat this operation in a loop to generate a series of dates spaced three months apart:\n\n```python\nfrom datetime import date\nfrom dateutil.relativedelta import relativedelta\n\n# Example starting date\nstart_date = date(2023, 1, 31)  # January 31, 2023\n\n# Number of intervals\nnum_intervals = 10\n\n# Generate and print dates at 3-month intervals\ncurrent_date = start_date\nfor _ in range(num_intervals):\n    print(current_date)\n    current_date += relativedelta(months=3)\n```\n\nThis will give you a list of dates spaced three months apart, maintaining the same day as much as possible given the constraints of the calendar."
    }
]