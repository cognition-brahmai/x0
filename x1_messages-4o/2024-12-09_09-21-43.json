[
    {
        "role": "user",
        "content": "How can I sort an array of integers in non-decreasing order using a sorting algorithm in Python?"
    },
    {
        "role": "assistant",
        "content": "To sort an array of integers in non-decreasing order in Python, you can use several sorting algorithms. One of the simplest ways is to use Python's built-in sorting functionality, but if you want to implement a sorting algorithm yourself, here's how you can do it using the Bubble Sort algorithm as an example:\n\n```python\ndef bubble_sort(arr):\n    n = len(arr)\n    for i in range(n):\n        # Track whether any swapping occurs\n        swapped = False\n        for j in range(0, n-i-1):\n            # Swap if the element found is greater than the next element\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n                swapped = True\n        # If no elements were swapped, the array is already sorted\n        if not swapped:\n            break\n\n# Example usage\narray = [64, 34, 25, 12, 22, 11, 90]\nbubble_sort(array)\nprint(\"Sorted array is:\", array)\n```\n\nThis code will sort the array in non-decreasing order using the Bubble Sort algorithm. However, Bubble Sort is not the most efficient sorting algorithm for large datasets. You can also consider using more efficient algorithms like Merge Sort, Quick Sort, or simply use Python's built-in `sorted()` function or the `sort()` method for lists:\n\n```python\n# Using Python's built-in sorted function\narray = [64, 34, 25, 12, 22, 11, 90]\nsorted_array = sorted(array)\nprint(\"Sorted array is:\", sorted_array)\n\n# Or using the list's sort method\narray.sort()\nprint(\"Sorted array is:\", array)\n```\n\nThese built-in methods use Timsort, which is highly efficient for most datasets."
    }
]