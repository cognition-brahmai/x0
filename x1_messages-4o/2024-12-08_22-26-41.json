[
    {
        "role": "user",
        "content": "In C++, write a program that creates a doubly linked list with the following requirements: \n1. Each node of the list should contain an integer value and a character string. \n2. The integer value of each node should be randomly generated within a range of 1 to 100. \n3. The character string of each node should be inputted by the user and should not exceed 20 characters. \n4. The list should be sorted in ascending order based on the integer value of each node. \n5. The program should be able to display the list in both forward and backward directions. \n6. Additionally, the program should implement a function that removes all nodes with an even integer value from the list. \n7. The program should be written in a modular way and should include proper error handling for user inputs."
    },
    {
        "role": "assistant",
        "content": "To create a program in C++ that fulfills the specified requirements for a doubly linked list, we can break down the task into several steps. Each step corresponds to a function or a part of the main function that performs a specific task. Below is an implementation of the program:\n\n```cpp\n#include <iostream>\n#include <string>\n#include <cstdlib>\n#include <ctime>\n\nusing namespace std;\n\nstruct Node {\n    int value;\n    string data;\n    Node* prev;\n    Node* next;\n    \n    Node(int val, const string& str) : value(val), data(str), prev(nullptr), next(nullptr) {}\n};\n\nclass DoublyLinkedList {\nprivate:\n    Node* head;\n    Node* tail;\n\n    void insertSorted(Node* newNode) {\n        if (!head) {\n            head = tail = newNode;\n            return;\n        }\n        if (newNode->value < head->value) {\n            newNode->next = head;\n            head->prev = newNode;\n            head = newNode;\n            return;\n        }\n        Node* temp = head;\n        while (temp->next && temp->next->value < newNode->value) {\n            temp = temp->next;\n        }\n        newNode->next = temp->next;\n        if (temp->next) {\n            temp->next->prev = newNode;\n        } else {\n            tail = newNode;\n        }\n        temp->next = newNode;\n        newNode->prev = temp;\n    }\n\npublic:\n    DoublyLinkedList() : head(nullptr), tail(nullptr) {}\n\n    void addNode(const string& data) {\n        int value = rand() % 100 + 1; // Random value between 1 and 100\n        Node* newNode = new Node(value, data);\n        insertSorted(newNode);\n    }\n\n    void displayForward() const {\n        Node* temp = head;\n        cout << \"List (Forward): \" << endl;\n        while (temp) {\n            cout << temp->value << \": \" << temp->data << \" <-> \";\n            temp = temp->next;\n        }\n        cout << \"NULL\" << endl;\n    }\n\n    void displayBackward() const {\n        Node* temp = tail;\n        cout << \"List (Backward): \" << endl;\n        while (temp) {\n            cout << temp->value << \": \" << temp->data << \" <-> \";\n            temp = temp->prev;\n        }\n        cout << \"NULL\" << endl;\n    }\n\n    void removeEvenNodes() {\n        Node* temp = head;\n        while (temp) {\n            if (temp->value % 2 == 0) {\n                Node* toDelete = temp;\n                if (toDelete->prev) {\n                    toDelete->prev->next = toDelete->next;\n                } else {\n                    head = toDelete->next;\n                }\n                if (toDelete->next) {\n                    toDelete->next->prev = toDelete->prev;\n                } else {\n                    tail = toDelete->prev;\n                }\n                temp = temp->next;\n                delete toDelete;\n            } else {\n                temp = temp->next;\n            }\n        }\n    }\n\n    ~DoublyLinkedList() {\n        Node* temp = head;\n        while (temp) {\n            Node* toDelete = temp;\n            temp = temp->next;\n            delete toDelete;\n        }\n    }\n};\n\nbool isValidString(const string& str) {\n    return str.length() <= 20;\n}\n\nint main() {\n    srand(static_cast<unsigned>(time(0))); // Seed for random number generation\n    DoublyLinkedList list;\n    int nodeCount;\n\n    cout << \"Enter the number of nodes to be added: \";\n    cin >> nodeCount;\n    cin.ignore(numeric_limits<streamsize>::max(), '\\n'); // Ignore any remaining characters in input buffer\n\n    for (int i = 0; i < nodeCount; ++i) {\n        string data;\n        cout << \"Enter a string (up to 20 characters) for node \" << (i + 1) << \": \";\n        getline(cin, data);\n\n        while (!isValidString(data)) {\n            cout << \"String exceeds 20 characters. Please enter again: \";\n            getline(cin, data);\n        }\n\n        list.addNode(data);\n    }\n\n    list.displayForward();\n    list.displayBackward();\n\n    cout << \"\\nRemoving nodes with even integer values...\\n\";\n    list.removeEvenNodes();\n\n    list.displayForward();\n    list.displayBackward();\n\n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Structures and Classes:**\n   - **Node:** A structure that contains an integer (`value`), a string (`data`), and pointers to the previous and next nodes.\n   - **DoublyLinkedList:** A class that manages the list, including functions for adding nodes, displaying the list, and removing nodes with even values.\n\n2. **Functions:**\n   - **insertSorted:** Inserts a new node into the list in a sorted order based on the integer value.\n   - **addNode:** Generates a random integer value and adds a new node with user inputted data.\n   - **displayForward/Backward:** Displays the list from head to tail and tail to head, respectively.\n   - **removeEvenNodes:** Removes nodes with even integer values from the list.\n   \n3. **Error Handling:**\n   - **isValidString:** Ensures the input string does not exceed 20 characters.\n   - **cin.ignore:** Clears the input buffer to prevent issues with getline after integer input.\n\n4. **Random Number Generation:**\n   - The `srand` function seeds the random number generator to ensure different results each time the program is run.\n\nThis program meets the specified requirements and provides a modular approach to handling a doubly linked list in C++."
    }
]