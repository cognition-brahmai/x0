[
    {
        "role": "user",
        "content": "How can I pass Jinja2 data into JavaScript? I've got a Flask REST URL as '/logs/<test_case_name>' and I'm trying to use .getJSON() to query this URL. I would like to pass the Jinja2 data which has the test case name to the .getJSON function. Here's the sample code I tried:\n\n```javascript\n<script type=\"text/javascript\">\n  alert({{name}});\n</script>\n```\nBut this doesn't seem to work. Can anyone suggest a solution?"
    },
    {
        "role": "assistant",
        "content": "To pass Jinja2 data into JavaScript, you need to ensure that the data is properly rendered into the JavaScript code by the Jinja2 template engine. The key here is to make sure the Jinja2 variable is correctly converted into a JavaScript string or variable. Here's how you can do it:\n\n1. **Ensure Proper Quoting:** Jinja2 data needs to be properly quoted so that it is treated as a string in JavaScript. You can do this by wrapping the Jinja2 variable in quotes.\n\n2. **Escape Special Characters:** If there is a possibility of special characters in your data, it's a good practice to escape them to prevent JavaScript from misinterpreting the data.\n\nHere's an example of how you can pass the `name` variable from Jinja2 to JavaScript:\n\n```html\n<script type=\"text/javascript\">\n  var testCaseName = \"{{ name|escapejs }}\";  // Use escapejs filter to escape special characters\n  alert(testCaseName);\n</script>\n```\n\nIn this example, `{{ name|escapejs }}` ensures that the `name` variable from your Flask application is safely inserted into the JavaScript context, with any special characters properly escaped to avoid syntax errors.\n\nIf you're using `.getJSON()` to query a URL and want to include the test case name in the URL, you can do it like this:\n\n```html\n<script type=\"text/javascript\">\n  var testCaseName = \"{{ name|escapejs }}\";\n  var url = '/logs/' + encodeURIComponent(testCaseName);  // encodeURIComponent to safely encode the URL\n\n  $.getJSON(url, function(data) {\n    console.log(data);\n  });\n</script>\n```\n\nIn this script, `encodeURIComponent()` is used to ensure that the test case name is safely encoded for use in a URL. This is important for handling any special characters that might be present in the `name` variable."
    }
]