[
    {
        "role": "user",
        "content": "How can I create a Java application that implements a stack data structure with methods for push, pop, size, and isEmpty?"
    },
    {
        "role": "assistant",
        "content": "To create a Java application that implements a stack data structure with methods for `push`, `pop`, `size`, and `isEmpty`, you can follow these steps. We'll make use of an array to store the stack elements, but you could also use other structures like `ArrayList` or `LinkedList`. Here's a simple implementation using an array:\n\n```java\npublic class Stack {\n    private int[] stackArray;\n    private int top;\n    private int capacity;\n\n    // Constructor to initialize stack\n    public Stack(int size) {\n        stackArray = new int[size];\n        capacity = size;\n        top = -1;\n    }\n\n    // Pushes an element onto the stack\n    public void push(int value) {\n        if (isFull()) {\n            System.out.println(\"Stack Overflow\");\n            System.exit(1);\n        }\n        stackArray[++top] = value;\n    }\n\n    // Pops an element from the stack\n    public int pop() {\n        if (isEmpty()) {\n            System.out.println(\"Stack Underflow\");\n            System.exit(1);\n        }\n        return stackArray[top--];\n    }\n\n    // Returns the size of the stack\n    public int size() {\n        return top + 1;\n    }\n\n    // Checks if the stack is empty\n    public boolean isEmpty() {\n        return top == -1;\n    }\n\n    // Helper method to check if the stack is full\n    private boolean isFull() {\n        return top == capacity - 1;\n    }\n\n    public static void main(String[] args) {\n        Stack stack = new Stack(5);\n\n        stack.push(1);\n        stack.push(2);\n        stack.push(3);\n\n        System.out.println(\"Stack size: \" + stack.size()); // Output: 3\n\n        System.out.println(\"Popped element: \" + stack.pop()); // Output: 3\n\n        System.out.println(\"Stack is empty: \" + stack.isEmpty()); // Output: false\n\n        stack.pop();\n        stack.pop();\n\n        System.out.println(\"Stack is empty: \" + stack.isEmpty()); // Output: true\n    }\n}\n```\n\n### Explanation:\n\n- **Constructor**: Initializes the stack with a specified size. The `stackArray` holds the stack elements, and `top` keeps track of the top element's index. The `capacity` is the maximum size of the stack.\n\n- **push(int value)**: Adds an element to the top of the stack. It checks for stack overflow before adding an element.\n\n- **pop()**: Removes the top element from the stack and returns it. It checks for stack underflow before removing an element.\n\n- **size()**: Returns the current number of elements in the stack.\n\n- **isEmpty()**: Checks if the stack is empty by verifying if `top` is `-1`.\n\n- **isFull()**: A helper method to check if the stack is full.\n\nThis implementation provides a basic stack structure in Java. You can further enhance it by adding more features or using generics to handle different data types."
    }
]