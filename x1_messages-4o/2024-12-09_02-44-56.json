[
    {
        "role": "user",
        "content": "In Python DB API/Psycopg2, how can I explicitly quote a string value that will become a part of a constructed SQL query rather than waiting for the implicit quotation performed by the `cursor.execute` method on the contents of its second parameter? Is there a low-level, ready-to-use quoting function expected by the Python DB API specification, or perhaps a function provided by Psycopg2 or Django?\n\nHere's an example of what I mean by \"implicit quotation\":\n\n```python\nvalue = \"Unsafe string\"\nquery = \"SELECT * FROM some_table WHERE some_char_field = %s;\"\ncursor.execute( query, (value,) ) # value will be correctly quoted\n```\n\nAnd here is what I would prefer:\n\n```python\nvalue = \"Unsafe string\"\nquery = \"SELECT * FROM some_table WHERE some_char_field = %s;\" % \\\n    READY_TO_USE_QUOTING_FUNCTION(value)\ncursor.execute( query ) # value will be correctly quoted, too\n```\n\nI couldn't find such functionality in the Python DB API specification (PEP 249) document."
    },
    {
        "role": "assistant",
        "content": "In Python's DB API and specifically with Psycopg2, the recommended approach for safely including variables in SQL queries is to use parameterized queries, as you've shown in your first example. This approach prevents SQL injection and handles quoting automatically.\n\nHowever, if you need to explicitly quote a string value to construct a SQL query directly, Psycopg2 does provide a utility for this purpose through the `sql` module. You can use the `sql.Identifier` and `sql.Literal` classes to safely construct SQL queries. Here's how you can do it:\n\n```python\nfrom psycopg2 import sql\n\nvalue = \"Unsafe string\"\nquery = sql.SQL(\"SELECT * FROM some_table WHERE some_char_field = {}\").format(\n    sql.Literal(value)\n)\ncursor.execute(query)\n```\n\nIn this example, `sql.Literal` safely quotes the `value` for inclusion in the SQL query. This method is part of Psycopg2's SQL composition module, which provides a safe way to construct dynamic SQL statements.\n\nIt's important to note that while the `sql` module is powerful for constructing complex queries dynamically, sticking to parameterized queries is usually the best practice for most use cases, as it inherently manages quoting and keeps your code safe from SQL injection vulnerabilities."
    }
]