[
    {
        "role": "user",
        "content": "I am creating a class in Python and I have an attribute that takes a significant amount of time to compute. I want to ensure that computation is only done once, and not by every instance of the class, so I don't want to do it by default in the `__init__` method. As a beginner in Python, I am looking for a Pythonic solution to this. What is the appropriate way to implement this in Python?"
    },
    {
        "role": "assistant",
        "content": "To ensure that a computation-heavy attribute is calculated only once and shared across all instances of a class, you can use a class attribute instead of an instance attribute. This way, the computation is done only once, and all instances of the class can access the result without recalculating it.\n\nHere's a Pythonic way to achieve this using a class method or a class attribute:\n\n```python\nclass MyClass:\n    _heavy_computation_result = None\n\n    @classmethod\n    def _perform_heavy_computation(cls):\n        # Simulating a heavy computation\n        print(\"Performing heavy computation...\")\n        result = sum(x * x for x in range(1000000))\n        return result\n\n    def __init__(self):\n        if MyClass._heavy_computation_result is None:\n            MyClass._heavy_computation_result = MyClass._perform_heavy_computation()\n\n    @property\n    def heavy_computation_result(self):\n        return MyClass._heavy_computation_result\n\n# Usage\ninstance1 = MyClass()\nprint(instance1.heavy_computation_result)\n\ninstance2 = MyClass()\nprint(instance2.heavy_computation_result)\n```\n\nIn this example:\n\n1. `_heavy_computation_result` is a class attribute that stores the result of the heavy computation.\n2. `_perform_heavy_computation` is a class method that performs the computation.\n3. The `__init__` method checks if `_heavy_computation_result` is `None` (i.e., not yet computed). If so, it calls the computation method and assigns the result to the class attribute.\n4. The `heavy_computation_result` property retrieves the precomputed result.\n\nThis way, the heavy computation is performed only once, and the result is shared by all instances of `MyClass`."
    }
]