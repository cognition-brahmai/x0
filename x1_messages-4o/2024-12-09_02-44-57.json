[
    {
        "role": "user",
        "content": "How can I filter Django queryset using `__in` for every item in a list? I have the following models:\n\n```\nclass Photo(models.Model):\n    tags = models.ManyToManyField(Tag)\n\nclass Tag(models.Model):\n    name = models.CharField(max_length=50)\n```\n\nIn a view, I have a list with active filters called categories. I want to filter `Photo` objects which have all tags present in categories. I tried using:\n\n```\nPhoto.objects.filter(tags__name__in=categories)\n```\n\nHowever, this matches any item in categories, not all items. For instance, if categories would be ['holiday', 'summer'] I want Photos with both a holiday and summer tag. How can this be achieved?"
    },
    {
        "role": "assistant",
        "content": "To filter `Photo` objects that have all the tags present in a list of categories, you need to ensure that each `Photo` object has every tag in the `categories` list. Using the `__in` lookup alone won't work because it will match any tag in the list, not all of them. Instead, you can achieve this by chaining multiple queries together or using the `annotate` and `filter` methods to count the tags.\n\nHere's how you can do it:\n\n1. **Chaining Queries:**\n   You can filter the `Photo` objects by chaining multiple filter queries, one for each tag in the categories list:\n\n   ```python\n   from django.db.models import Q\n\n   photos = Photo.objects.all()\n   for category in categories:\n       photos = photos.filter(tags__name=category)\n   ```\n\n   This approach iteratively narrows down the queryset to only those `Photo` objects that contain each tag in the `categories`.\n\n2. **Using `annotate` and `filter`:**\n   Alternatively, you can use `annotate` to count the number of tags and then filter based on that count:\n\n   ```python\n   from django.db.models import Count\n\n   photos = Photo.objects.annotate(num_tags=Count('tags')).filter(\n       tags__name__in=categories\n   ).filter(num_tags=len(categories))\n   ```\n\n   In this approach, you first annotate each `Photo` with the number of tags it has, then filter the queryset to ensure that the `Photo` objects have the same number of tags as the number of categories, ensuring that all tags are covered.\n\nBoth methods will help you achieve the desired result of filtering `Photo` objects that have all the tags specified in the `categories` list. Choose the one that best fits your use case and style preference."
    }
]