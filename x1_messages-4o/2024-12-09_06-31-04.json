[
    {
        "role": "user",
        "content": "I am trying to insert JSON data from tornado to postgres using psycopg2 in Python 2.7.2+. I am executing the following code:\n\n```python\nfrom psycopg2 import connect\n\nconn = connect(\"user='pguser' host='localhost' dbname='pgdb' password='pgpass'\")\ncursor = conn.cursor()\n\ndata = '[{\"id\":\"sdf\",\"name\":\"wqe\",\"author\":\"vb\"}]'\n\nfor row in eval(data):\n  print row\n  cursor.execute(\"\"\"INSERT INTO books(id,name,author) VALUES('%s','%s','%s')\"\"\" % \\\n        (row['id'], row['name'], row['author'])\n  )\n\ncursor.execute(\"SELECT * FROM books\")\ncursor.fetchall()\n```\n\nThis returns `[('sdf', 'wqe', 'vb')]` meaning the data is being inserted. However, when I check the `books` table in psql, it shows 0 rows. Why is the data not being inserted in the table?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is likely due to the fact that the changes are not being committed to the database. In psycopg2, after executing INSERT, UPDATE, or DELETE statements, you need to commit the transaction to make the changes permanent in the database.\n\nYou can achieve this by calling `conn.commit()` after executing your insert statements. Here's how you should modify your code:\n\n```python\nfrom psycopg2 import connect\n\nconn = connect(\"user='pguser' host='localhost' dbname='pgdb' password='pgpass'\")\ncursor = conn.cursor()\n\ndata = '[{\"id\":\"sdf\",\"name\":\"wqe\",\"author\":\"vb\"}]'\n\nfor row in eval(data):\n    print(row)\n    cursor.execute(\"\"\"INSERT INTO books(id,name,author) VALUES(%s, %s, %s)\"\"\",\n                   (row['id'], row['name'], row['author']))\n\n# Commit the transaction\nconn.commit()\n\ncursor.execute(\"SELECT * FROM books\")\nprint(cursor.fetchall())\n\n# Close the cursor and the connection\ncursor.close()\nconn.close()\n```\n\nAdditionally, it's important to use parameterized queries (using `%s` placeholders) instead of string interpolation for building SQL queries. This prevents SQL injection attacks and handles special characters in the data properly.\n\nLastly, don't forget to close the cursor and connection when done to free up resources."
    }
]