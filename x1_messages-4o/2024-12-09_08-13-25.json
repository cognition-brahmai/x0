[
    {
        "role": "user",
        "content": "Is it possible in Python to catch a Control-C input and implement a specific functionality based on this input? I have tried using the `try` and `except KeyboardInterrupt` methods but they don't seem to work for me. Here is the basic structure of what I am trying to achieve:\n\n```python\n if input != contr-c:\n    #DO THINGS\n else:\n    #quit\n```"
    },
    {
        "role": "assistant",
        "content": "Yes, it is indeed possible to catch a `Control-C` (KeyboardInterrupt) in Python and implement specific functionality based on this input. The `KeyboardInterrupt` exception is raised when the user interrupts program execution, usually by pressing `Control-C`.\n\nThe `try` and `except` block is the right way to handle this. Here's a simple example of how you can implement this:\n\n```python\ntry:\n    while True:\n        # Simulating some operations\n        print(\"Running... Press Ctrl+C to interrupt.\")\n        # Other operations can be placed here\n        \nexcept KeyboardInterrupt:\n    print(\"Control-C was pressed. Performing specific functionality before quitting.\")\n    # Implement your specific functionality here\n    # For example, cleanup tasks, saving state, etc.\n    # After performing the specific functionality, you can exit or continue based on your needs\n    # exit the program\n    exit(0)\n```\n\nIn this example:\n- The `while True` loop simulates a long-running process. You can replace this with your actual code.\n- When `Control-C` is pressed, the program will jump to the `except KeyboardInterrupt` block, where you can implement the specific functionality you desire. You might want to perform cleanup operations or save the program's state before exiting.\n- After handling the exception, you can choose to exit the program using `exit(0)` or continue with other operations as needed.\n\nMake sure to run this script in a terminal or command line interface where you can send the `Control-C` interrupt."
    }
]