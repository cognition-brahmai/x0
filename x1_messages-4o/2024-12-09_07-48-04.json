[
    {
        "role": "user",
        "content": "How can I format floats with the standard json module in Python 2.6 to have only two decimal digits? I am currently using the json module to serialize a list of floats, but I'm getting results like '23.670000000000002' instead of '23.67'. I have tried defining my own JSON Encoder class, which works for a sole float object but fails for nested objects. I want to stick with the standard json module and avoid external dependencies. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To format floats to have only two decimal digits while using the standard `json` module in Python 2.6, you can create a custom JSON encoder. While Python 2.6's `json` module does not provide direct support for customizing the float format, you can achieve this by overriding the `default` method in a custom encoder class. Below is an approach that should work for nested objects:\n\n```python\nimport json\n\nclass CustomFloatEncoder(json.JSONEncoder):\n    def default(self, obj):\n        # Check if the object is a float\n        if isinstance(obj, float):\n            # Format the float to two decimal places\n            return format(obj, '.2f')\n        # Use the default behavior for other types\n        return json.JSONEncoder.default(self, obj)\n\n    def encode(self, obj):\n        # First, encode the object using the base class method\n        json_representation = super(CustomFloatEncoder, self).encode(obj)\n\n        # Ensure all floats are properly formatted\n        # Convert any float string representations to the desired format\n        float_representation = re.sub(r'(\\d+\\.\\d{2})\\d*', r'\\1', json_representation)\n        \n        return float_representation\n\nimport re\n\n# Example usage\ndata = {\n    'value1': 23.670000000000002,\n    'value2': 45.123456789,\n    'nested': {\n        'value3': 67.89999999999998\n    }\n}\n\n# Serialize the data using the custom encoder\njson_data = json.dumps(data, cls=CustomFloatEncoder)\nprint(json_data)\n```\n\n### Explanation:\n\n1. **Custom Encoder Class**: We create `CustomFloatEncoder` by subclassing `json.JSONEncoder`. In the `default` method, we check if the object is a float and format it to two decimal places using `format(obj, '.2f')`.\n\n2. **Encode Method Override**: We override the `encode` method to ensure that any float inside the JSON string is recalibrated to the correct format, taking care of nested structures.\n\n3. **Regular Expression**: We use a regular expression to identify and reformat the float strings in the final JSON output to ensure they have only two decimal places.\n\nThis approach should work for both top-level and nested floats in your JSON data while keeping the solution confined to Python 2.6's standard library."
    }
]