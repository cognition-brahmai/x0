[
    {
        "role": "user",
        "content": "How can I maintain the same order of keys in a JSON object as the order in which I append them? I'm using `json.dumps` to convert a list into a JSON object. Here's the code I'm using:\n\n```python\ncountries.append({\"id\":row.id,\"name\":row.name,\"timezone\":row.timezone})\nprint json.dumps(countries)\n```\n\nThe output I'm getting is:\n\n```json\n[\n   {\"timezone\": 4, \"id\": 1, \"name\": \"Mauritius\"}, \n   {\"timezone\": 2, \"id\": 2, \"name\": \"France\"}, \n   {\"timezone\": 1, \"id\": 3, \"name\": \"England\"}, \n   {\"timezone\": -4, \"id\": 4, \"name\": \"USA\"}\n]\n```\n\nI want the keys in the following order: id, name, timezone - but instead I'm getting timezone, id, name. How can I fix this?"
    },
    {
        "role": "assistant",
        "content": "To maintain the order of keys in a JSON object as you append them, you need to ensure that the order is preserved when converting the objects to a JSON string. Python's `json.dumps` function respects the order of keys in the dictionary as of Python 3.7, where the insertion order is preserved by default.\n\nIf you're using Python 3.7 or later, you just need to ensure that your dictionary is created with the keys in the desired order:\n\n```python\ncountries = []\ncountries.append({\"id\": row.id, \"name\": row.name, \"timezone\": row.timezone})\nprint(json.dumps(countries, indent=4))  # Using indent for pretty printing\n```\n\nIf you are using an older version of Python, you can use `collections.OrderedDict` to ensure order:\n\n```python\nfrom collections import OrderedDict\nimport json\n\ncountries = []\ncountries.append(OrderedDict([(\"id\", row.id), (\"name\", row.name), (\"timezone\", row.timezone)]))\nprint(json.dumps(countries, indent=4))\n```\n\nWith this approach, the order of keys in the JSON output will be maintained as `id`, `name`, `timezone`. Ensure that you use `OrderedDict` only if you're working with Python versions prior to 3.7."
    }
]