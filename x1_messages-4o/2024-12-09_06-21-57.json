[
    {
        "role": "user",
        "content": "How can I create an empty DataFrame with a MultiIndex before assigning rows to it in Python? I want to set the MultiIndex names during creation, but not the levels. The current code I'm using provides me with NaN values that I do not need. Is there a better solution to this problem?\n\nHere is the code I have so far:\n\n```python\ndef empty_multiindex(names):\n    \"\"\"\n    Creates empty MultiIndex from a list of level names.\n    \"\"\"\n    return MultiIndex.from_tuples(tuples=[(None,) * len(names)], names=names)\n```\n\nThe output I get is:\n\n```python\nIn [2]:\n\nempty_multiindex(['one','two', 'three'])\n\nOut[2]:\n\nMultiIndex(levels=[[], [], []],\n           labels=[[-1, -1, -1], [-1, -1, -1], [-1, -1, -1]],\n           names=[u'one', u'two', u'three'])\n\nIn [3]:\nDataFrame(index=empty_multiindex(['one','two', 'three']))\n\nOut[3]:\none two three\nNaN NaN NaN\n```\n\nI would prefer not to have the NaN values."
    },
    {
        "role": "assistant",
        "content": "To create an empty `DataFrame` with a `MultiIndex` without getting unwanted NaN values, you can initialize the `MultiIndex` using `pd.MultiIndex.from_product()` with an empty list of levels. Here's how you can do it:\n\n```python\nimport pandas as pd\n\ndef empty_multiindex(names):\n    \"\"\"\n    Creates an empty MultiIndex from a list of level names.\n    \"\"\"\n    # Create a MultiIndex with no levels and the specified names\n    return pd.MultiIndex(levels=[[] for _ in names], codes=[[] for _ in names], names=names)\n\n# Create an empty DataFrame with the specified MultiIndex\ndf = pd.DataFrame(index=empty_multiindex(['one', 'two', 'three']))\n\nprint(df)\n```\n\nIn this solution:\n\n- We used `levels=[[] for _ in names]` to create an empty list of levels for each name.\n- We used `codes=[[] for _ in names]` to indicate that there are no actual index positions, effectively making the `MultiIndex` empty.\n- This avoids introducing NaN values since there are no actual rows in the `DataFrame` until you add data to it.\n\nAfter running this code, the output for the DataFrame will be empty without any NaN values:\n\n```\nEmpty DataFrame\nColumns: []\nIndex: []\n```\n\nThis approach allows you to start with a clean slate and add data to the DataFrame later as needed."
    }
]