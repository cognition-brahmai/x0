[
    {
        "role": "user",
        "content": "I have a binary tree in Python, and I want to print out the tree level by level. I've written the code for inserting nodes, but I am having trouble with the code for printing the tree. My code is as follows:\n\n```python\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n        self.parent = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n        self.size = 0\n\n    def insert(self, data):\n        if self.root == None:\n            self.root = Node(data)\n        else:\n            current = self.root\n            while True:\n                if data < current.data:\n                    if current.left:\n                        current = current.left\n                    else:\n                        new = Node(data)\n                        current.left = new\n                        break\n                elif data > current.data:\n                    if current.right:\n                        current = current.right\n                    else:\n                        new = Node(data)\n                        current.right = new\n                        break\n                else:\n                    break\n\nb = BinaryTree()  \n```\nI'm aiming to print the tree in this format:\n\n```\n                   10\n               6        12\n             5   7    11  13 \n```\nWhat should I add to my code to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To print a binary tree level by level, you can perform a level-order traversal (also known as breadth-first traversal). For this, you might find using a queue helpful. Here's how you can implement the printing function in your `BinaryTree` class:\n\n```python\nfrom collections import deque\n\nclass Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\nclass BinaryTree:\n    def __init__(self):\n        self.root = None\n\n    def insert(self, data):\n        if not self.root:\n            self.root = Node(data)\n        else:\n            current = self.root\n            while True:\n                if data < current.data:\n                    if current.left:\n                        current = current.left\n                    else:\n                        current.left = Node(data)\n                        break\n                elif data > current.data:\n                    if current.right:\n                        current = current.right\n                    else:\n                        current.right = Node(data)\n                        break\n                else:\n                    break\n\n    def print_level_order(self):\n        if not self.root:\n            return\n\n        # Initialize a queue for level order traversal\n        queue = deque([self.root])\n\n        while queue:\n            level_size = len(queue)\n            level_nodes = []\n            \n            for _ in range(level_size):\n                node = queue.popleft()\n                level_nodes.append(str(node.data))\n\n                # Enqueue left child\n                if node.left:\n                    queue.append(node.left)\n                # Enqueue right child\n                if node.right:\n                    queue.append(node.right)\n\n            # Print the current level\n            print(' '.join(level_nodes))\n\n# Example of usage:\nb = BinaryTree()\nb.insert(10)\nb.insert(6)\nb.insert(12)\nb.insert(5)\nb.insert(7)\nb.insert(11)\nb.insert(13)\n\nb.print_level_order()\n```\n\n### Explanation:\n\n1. **Queue Initialization**: We use a queue to keep track of nodes at each level. We start by adding the root node to the queue.\n\n2. **Level Traversal**: We iterate through all nodes in the queue. For each node, we print its data and add its children to the queue. This ensures we process nodes level by level.\n\n3. **Formatting Output**: Within each level, we collect node values and print them in a single line. This makes it easy to see the structure of the tree level by level.\n\nWhen you run this code with the example usage, it will print the binary tree in level-order, showing each level on a new line, which is the format you desired."
    }
]