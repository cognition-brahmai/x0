[
    {
        "role": "user",
        "content": "I am a beginner in Python and currently experimenting with JSON data. I am trying to dynamically build a JSON object by adding key-value pairs to an existing JSON object. However, when I try to do this, I encounter a `TypeError: 'str' object does not support item assignment`. Here's the code I've been using:\n\n```python\nimport json\n\njson_data = json.dumps({})\njson_data[\"key\"] = \"value\"\n\nprint('JSON: ', json_data)\n```\nHow can I correctly add key-value pairs to my JSON object without encountering this error?"
    },
    {
        "role": "assistant",
        "content": "The `TypeError: 'str' object does not support item assignment` error occurs because `json.dumps()` converts a Python dictionary to a JSON-formatted string, and you cannot assign values to a string like you would with a dictionary.\n\nTo dynamically build a JSON object, you should keep the data as a Python dictionary until you're ready to convert it to a JSON string. Here's how you can do it:\n\n```python\nimport json\n\n# Start with an empty Python dictionary\njson_data = {}\n\n# Add key-value pairs to the dictionary\njson_data[\"key\"] = \"value\"\n\n# Convert the dictionary to a JSON string when you're ready to output or use it\njson_string = json.dumps(json_data)\n\nprint('JSON: ', json_string)\n```\n\nIn this corrected version, `json_data` is initially a dictionary, allowing you to use item assignment to add key-value pairs. When you need the JSON string representation, use `json.dumps()` on the dictionary."
    }
]