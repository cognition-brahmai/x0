[
    {
        "role": "user",
        "content": "How can I extract an attribute value based on its name using BeautifulSoup in Python? I am trying to extract the \"content\" attribute of a \"meta\" tag which has a \"name\" attribute equal to \"City\" from an HTML document. I attempted the following code, but it results in a `KeyError: 'name'` error. \n\n```python\nsoup = BeautifulSoup(f)  # f is some HTML containing the above meta tag\nfor meta_tag in soup(\"meta\"):\n    if meta_tag[\"name\"] == \"City\":\n        print(meta_tag[\"content\"])\n```\nThe HTML segment I am working with is as follows:\n\n```html\n<META NAME=\"City\" content=\"Austin\">\n```\nI suspect the error is because BeautifulSoup uses \"name\" internally and it cannot be used as a keyword argument."
    },
    {
        "role": "assistant",
        "content": "The `KeyError: 'name'` error occurs because not all `<meta>` tags have a `name` attribute. When you try to access `meta_tag[\"name\"]`, it raises an error if the `name` attribute is not present. You can avoid this by using the `get` method, which returns `None` if the attribute doesn't exist, instead of raising an error. Here's how you can modify your code to handle this:\n\n```python\nfrom bs4 import BeautifulSoup\n\n# Assuming 'f' is your HTML content\nsoup = BeautifulSoup(f, 'html.parser')\n\n# Iterate over all meta tags\nfor meta_tag in soup.find_all(\"meta\"):\n    # Use .get() to safely check for the 'name' attribute\n    if meta_tag.get(\"name\") == \"City\":\n        print(meta_tag.get(\"content\"))\n```\n\nThis code will safely check for the presence of the `name` attribute and only compares it if it exists. If the `name` attribute is equal to \"City\", it will then print the `content` attribute of that tag. This approach prevents the `KeyError` from occurring."
    }
]