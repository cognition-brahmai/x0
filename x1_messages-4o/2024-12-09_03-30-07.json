[
    {
        "role": "user",
        "content": "I am working with Matplotlib version 2.0.0 on Python 3 in a miniconda virtual environment on a Unix scientific computing cluster where I don't have root privileges. When I execute basic python code such as `import matplotlib.pyplot as plt` and `plt.scatter([1,5], [1,5])` through an ipython notebook, I encounter an error message: `path_to_miniconda/miniconda3/envs/conda34/lib/python3.4/site-packages/matplotlib/font_manager.py:1297: UserWarning: findfont: Font family ['sans-serif'] not found. Falling back to DejaVu Sans (prop.get_family(), self.defaultFamily[fontext]))`. I tried using the Times New Roman font, and even after deleting the Font cache file (fontList.py3k.cache) using `import matplotlib as mpl`, `fm = mpl.font_manager`, and `fm.get_cachedir()`, the commands `mpl.rcParams['font.family'] = ['serif']` and `mpl.rcParams['font.serif'] = ['Times New Roman']` have no effect and I get the same error as above. The true type fonts directory: `path_to_miniconda/miniconda3/envs/conda34/lib/python3.4/site-packages/matplotlib/mpl-data/fonts/ttf/` only has 40 fonts of the type: DejaVuSerif, DejaVuSans, STIX, cmb, cmt, cmy. How can I add additional fonts and resolve this issue?"
    },
    {
        "role": "assistant",
        "content": "To resolve the issue of missing fonts in Matplotlib, you can follow these steps to add additional fonts to your environment:\n\n1. **Download the Desired Font:**\n   - First, you need to download the Times New Roman font (or any other font you want to use) in a TrueType Font (TTF) format.\n\n2. **Add the Font to Matplotlib's Font Directory:**\n   - Copy the TTF font file(s) to Matplotlib's font directory. You mentioned the directory path as:\n     ```\n     path_to_miniconda/miniconda3/envs/conda34/lib/python3.4/site-packages/matplotlib/mpl-data/fonts/ttf/\n     ```\n\n3. **Refresh Matplotlib's Font Cache:**\n   - After adding the new font files, you need to refresh Matplotlib's font cache to recognize the new fonts. You can do this by deleting the `fontList.py3k.cache` file again and running the following commands:\n     ```python\n     import matplotlib as mpl\n     mpl.font_manager._rebuild()\n     ```\n\n4. **Verify the Font Installation:**\n   - Verify that Matplotlib recognizes the newly added font by listing all available fonts:\n     ```python\n     import matplotlib.font_manager as fm\n     for font in fm.findSystemFonts(fontpaths=None, fontext='ttf'):\n         print(fm.FontProperties(fname=font).get_name())\n     ```\n   - This will print out all the available font names, including the newly added ones.\n\n5. **Set the New Font in Matplotlib:**\n   - Once you've verified that the font is available, you can set it as the default font in your script:\n     ```python\n     import matplotlib.pyplot as plt\n     plt.rcParams['font.family'] = ['serif']\n     plt.rcParams['font.serif'] = ['Times New Roman']\n     ```\n\n6. **Plot Your Data:**\n   - Finally, try plotting your data again to see if the issue is resolved:\n     ```python\n     plt.scatter([1, 5], [1, 5])\n     plt.show()\n     ```\n\nBy following these steps, you should be able to add and use additional fonts in your Matplotlib plots. If you still face issues, ensure that the font file you downloaded is not corrupted and that you have the necessary file permissions to add files to the directory."
    }
]