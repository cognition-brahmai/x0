[
    {
        "role": "user",
        "content": "Is there a simple method in Python to format the string outputs of dictionaries? I have a dictionary like the one shown below and when I try to convert it into a string using str(dict), the output is quite unreadable. I'm looking for a solution that does not involve writing a lot of code with many special cases and string.replace() calls.\n\n```python\n{\n  'planet' : {\n    'name' : 'Earth',\n    'has' : {\n      'plants' : 'yes',\n      'animals' : 'yes',\n      'cryptonite' : 'no'\n    }\n  }\n}\n```\n\nThe output I get with str(dict) is: \n\n```python\n{'planet' : {'has': {'plants': 'yes', 'animals': 'yes', 'cryptonite': 'no'}, 'name': 'Earth'}}\n```"
    },
    {
        "role": "assistant",
        "content": "To format the output of a dictionary in a more readable way, you can use the `json` module in Python, which provides a simple method to pretty-print dictionaries. Here's how you can do it:\n\n```python\nimport json\n\ndata = {\n    'planet': {\n        'name': 'Earth',\n        'has': {\n            'plants': 'yes',\n            'animals': 'yes',\n            'cryptonite': 'no'\n        }\n    }\n}\n\n# Use json.dumps() with the indent parameter to pretty-print the dictionary\npretty_output = json.dumps(data, indent=4)\nprint(pretty_output)\n```\n\nOutput:\n```python\n{\n    \"planet\": {\n        \"name\": \"Earth\",\n        \"has\": {\n            \"plants\": \"yes\",\n            \"animals\": \"yes\",\n            \"cryptonite\": \"no\"\n        }\n    }\n}\n```\n\nThe `json.dumps()` function converts the dictionary into a JSON-formatted string. By providing the `indent` parameter, you can specify the number of spaces to use for indentation, making the output more readable. This method is straightforward and avoids the need for complicated string manipulation."
    }
]