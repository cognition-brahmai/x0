[
    {
        "role": "user",
        "content": "I am working with a large number of PDF files, some of which are scanned images, while others are full or partially text-based PDF. Is there a way to programmatically check these files in Python 3.6 environment to ensure that I am only processing files which are scanned images and not the ones that are full or partially text-based PDF files?"
    },
    {
        "role": "assistant",
        "content": "To programmatically differentiate between scanned image PDFs and text-based PDFs in a Python 3.6 environment, you can use the `PyPDF2` library along with `pdfminer.six` and `Pillow` (PIL) to assess the content of each PDF file. \n\nHere's a step-by-step guide on how to achieve this:\n\n1. **Install Required Libraries**:\n   Ensure you have the necessary libraries installed. You can install them via pip if you haven't already:\n\n   ```bash\n   pip install PyPDF2 pdfminer.six Pillow\n   ```\n\n2. **Check if PDF Contains Text**:\n   Use `pdfminer.six` to extract text from the PDF file. If the PDF contains extractable text, it is not a pure scanned image PDF.\n\n3. **Check for Images in PDF**:\n   Use `PyPDF2` to check if the PDF contains images. This can help confirm if the PDF is composed of scanned images.\n\nHere's a sample script that performs these checks:\n\n```python\nimport os\nfrom PyPDF2 import PdfReader\nfrom pdfminer.high_level import extract_text\n\ndef is_text_based_pdf(file_path):\n    text = extract_text(file_path)\n    return bool(text.strip())  # If there's any text, it's not purely scanned\n\ndef check_scanned_pdf(file_path):\n    try:\n        # Check for text content\n        if is_text_based_pdf(file_path):\n            return False  # It's not a scanned image PDF\n        \n        # Check for images\n        reader = PdfReader(file_path)\n        for page in reader.pages:\n            if '/XObject' in page['/Resources']:\n                xObject = page['/Resources']['/XObject'].getObject()\n                for obj in xObject:\n                    if xObject[obj]['/Subtype'] == '/Image':\n                        return True  # Contains an image, likely scanned\n        return False  # No images found, not a scanned image PDF\n    except Exception as e:\n        print(f\"Error processing {file_path}: {e}\")\n        return False\n\n# Example usage\ndirectory = '/path/to/your/pdfs'\nfor filename in os.listdir(directory):\n    if filename.endswith('.pdf'):\n        file_path = os.path.join(directory, filename)\n        if check_scanned_pdf(file_path):\n            print(f\"{filename} is likely a scanned image PDF.\")\n        else:\n            print(f\"{filename} is not a scanned image PDF.\")\n```\n\n### Explanation:\n\n- **Text Extraction**: The `extract_text` function from `pdfminer.six` is used to extract text from the PDF. If any text is found, the file is not a purely scanned image PDF.\n\n- **Image Detection**: The script uses `PyPDF2` to check each page for images. If an image is found, it is likely that the PDF is scanned.\n\nThis approach should give you a reasonable way to differentiate between scanned image PDFs and text-based PDFs. Keep in mind that some PDFs might contain both text and images, so you may need to adjust the logic based on your specific needs."
    }
]