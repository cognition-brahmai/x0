[
    {
        "role": "user",
        "content": "I have a class named 'Ship' in SQLAlchemy, mapped in a declarative way with a table. I want to discover the table properties like columns, names and relations from this class. Is there a way provided by the SQLAlchemy API to achieve this? Here is my current setup:\n\n```python\nengine = create_engine('sqlite:///' + databasePath, echo=True)\n\n# setting up root class for declarative declaration\nBase = declarative_base(bind=engine)\n\nclass Ship(Base):\n    __tablename__ = 'ships'\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String(255))\n\n    def __init__(self, name):\n            self.name = name\n\n    def __repr__(self):\n            return \"<Ship('%s')>\" % (self.name)\n```"
    },
    {
        "role": "assistant",
        "content": "Yes, you can discover the table properties such as columns, their names, and relations using the SQLAlchemy API through the class attributes and methods. Here\u2019s how you can achieve this with your `Ship` class:\n\n### Accessing Columns\n\nYou can access the columns of the `Ship` class via the `__table__` attribute, which provides a reflection of the table properties. Here\u2019s how you can do it:\n\n```python\nfrom sqlalchemy import inspect\n\n# Access the table object\nship_table = Ship.__table__\n\n# Get all columns\ncolumns = ship_table.columns\n\n# Print column details\nfor column in columns:\n    print(f\"Column Name: {column.name}, Type: {column.type}, Primary Key: {column.primary_key}\")\n\n# Alternatively, using the inspector\ninspector = inspect(engine)\ncolumns_info = inspector.get_columns('ships')\n\nfor column_info in columns_info:\n    print(f\"Column Name: {column_info['name']}, Type: {column_info['type']}, Primary Key: {column_info['primary_key']}\")\n```\n\n### Accessing Relationships\n\nIf your model had relationships, you could use the `__mapper__` attribute to explore them. Since your current `Ship` class doesn\u2019t have any relationships, here\u2019s a general way to access them:\n\n```python\n# Assuming there are relationships defined in the Ship class\nrelationships = Ship.__mapper__.relationships\n\n# Print relationship details\nfor relationship in relationships:\n    print(f\"Relationship Name: {relationship.key}, Target: {relationship.target}, Direction: {relationship.direction}\")\n```\n\n### Accessing Table Name\n\nSimply access the `__tablename__` attribute:\n\n```python\ntable_name = Ship.__tablename__\nprint(f\"Table Name: {table_name}\")\n```\n\nThis way, you can dynamically explore and introspect your database schema through your SQLAlchemy ORM models."
    }
]