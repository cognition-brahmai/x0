[
    {
        "role": "user",
        "content": "Can you provide a C++ code example that generates random numbers within a specific range with a uniform distribution?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To generate random numbers within a specific range with a uniform distribution in C++, you can use the `<random>` library, which provides facilities for random number generation. Here's an example that demonstrates how to generate random numbers in a specified range using this library:\n\n```cpp\n#include <iostream>\n#include <random>\n\nint main() {\n    // Define the range\n    int lower_bound = 10;\n    int upper_bound = 50;\n\n    // Initialize random number generator\n    std::random_device rd;  // Obtain a random number from hardware\n    std::mt19937 gen(rd()); // Seed the generator\n\n    // Define the distribution range\n    std::uniform_int_distribution<> distr(lower_bound, upper_bound);\n\n    // Generate and print random numbers\n    for (int i = 0; i < 10; ++i) {\n        int random_number = distr(gen);\n        std::cout << \"Random number \" << i + 1 << \": \" << random_number << std::endl;\n    }\n\n    return 0;\n}\n```\n\nIn this example:\n\n- We define the range of random numbers with `lower_bound` and `upper_bound`.\n- We use `std::random_device` to seed the random number generator, which provides entropy from the hardware.\n- We use `std::mt19937`, a standard random number generator engine.\n- We define a `std::uniform_int_distribution` with the specified range, which ensures that the numbers generated are uniformly distributed within the range.\n- Finally, we generate and print 10 random numbers within the specified range. \n\nFor floating-point numbers, you can use `std::uniform_real_distribution` instead and adjust the bounds accordingly."
    }
]