[
    {
        "role": "user",
        "content": "How can I set a condition (>=12) for an integer argument using Python's argparse module? I currently have a script where the argparse module is used to parse command line arguments. I have an argument called \"bandwidth\" which needs to be an integer greater than or equal to 12. I'm currently checking this condition manually, but I'm wondering if there's a way to set this condition directly using an argparse option. Here's my current code:\n\n```python\nimport sys, argparse\n\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-b\", \"--bandwidth\", type=int, help=\"target bandwidth >=12\")\nargs = parser.parse_args()\nif args.bandwidth and args.bandwidth < 12:\n    print \"ERROR: minimum bandwidth is 12\"\n    sys.exit(1)\n```"
    },
    {
        "role": "assistant",
        "content": "You can achieve this by defining a custom type or using the `argparse` `type` parameter to enforce the condition directly when parsing the command line arguments. Here's how you can modify your script to check if the `bandwidth` argument is greater than or equal to 12:\n\n```python\nimport sys\nimport argparse\n\ndef check_bandwidth(value):\n    ivalue = int(value)\n    if ivalue < 12:\n        raise argparse.ArgumentTypeError(f\"ERROR: minimum bandwidth is 12, but got {value}\")\n    return ivalue\n\nparser = argparse.ArgumentParser(description=\"Process bandwidth parameter.\")\nparser.add_argument(\"-b\", \"--bandwidth\", type=check_bandwidth, help=\"target bandwidth >=12\")\n\nargs = parser.parse_args()\nprint(f\"Bandwidth set to: {args.bandwidth}\")\n```\n\n### Explanation:\n- **Custom Function (`check_bandwidth`)**: This function converts the input value to an integer and checks if it's greater than or equal to 12. If the value is less than 12, it raises an `ArgumentTypeError`, which `argparse` will handle and display an error message.\n- **Type Parameter**: In the `add_argument` method, the `type` parameter is set to `check_bandwidth`, which ensures that the custom validation logic is applied when parsing the command line arguments.\n- **Error Handling**: If the input fails validation, `argparse` will automatically print the error message and usage information.\n\nThis method keeps your validation logic centralized and takes advantage of `argparse`'s built-in error handling and messaging."
    }
]