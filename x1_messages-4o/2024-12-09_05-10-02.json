[
    {
        "role": "user",
        "content": "In Python, I am trying to format a dictionary that contains nested dictionaries and some None values. However, when a key is deleted or a value is set to None, I am encountering a KeyError. How can I modify this to handle None's and non-existent fields more gracefully? I would like the missing values to be replaced by a specified string, for example '~'. Here is the code I am currently using and the error I receive:\n\n```python\ndata = {'n': 3, 'k': 3.141594, 'p': {'a': 7, 'b': 8}}\nprint('{n}, {k:.2f}, {p[a]}, {p[b]}'.format(**data))\ndel data['k']\ndata['p']['b'] = None\nprint('{n}, {k:.2f}, {p[a]}, {p[b]}'.format(**data))\n```\n\nError:\n\n```python\nTraceback (most recent call last):\n  File \"./funky.py\", line 186, in <module>\n    print('{n}, {k:.2f}, {p[a]}, {p[b]}'.format(**data))\nKeyError: 'k'\n```"
    },
    {
        "role": "assistant",
        "content": "To handle `None` values and missing keys gracefully in your dictionary, you can create a custom dictionary subclass that provides a default value for missing keys. This way, you can avoid `KeyError` and specify a default string, such as `~`, for missing or `None` values. Here's how you can achieve this:\n\n```python\nclass SafeDict(dict):\n    def __missing__(self, key):\n        return '~'  # Default value for missing keys\n\n    def __getitem__(self, key):\n        value = super().get(key, '~')  # Default value for missing keys\n        if value is None:\n            return '~'  # Default value for None values\n        return value\n\ndata = SafeDict({'n': 3, 'k': 3.141594, 'p': {'a': 7, 'b': 8}})\nprint('{n}, {k:.2f}, {p[a]}, {p[b]}'.format(**data))\n\ndel data['k']\ndata['p']['b'] = None\nprint('{n}, {k:.2f}, {p[a]}, {p[b]}'.format(**data))\n```\n\n### Explanation:\n1. **SafeDict Class**: This subclass of `dict` overrides the `__missing__` method to return a default value (`~`) when a key is not found.\n2. **__getitem__ Method**: This is overridden to also handle `None` values by returning the default value (`~`) instead.\n\nBy using `SafeDict`, you can safely format your dictionary without encountering `KeyError` for missing or `None` values."
    }
]