[
    {
        "role": "user",
        "content": "How can I load an image from the internet into PIL (Python Imaging Library) to find its dimensions? I tried using the following code as suggested in another answer, but I received an error message stating \"addinfourl instance has no attribute 'seek'\". It seems that objects returned by urllib2.urlopen(url) do not have a 'seek' method. What should I do to resolve this issue?\n\nHere is the code I tried:\n```python\nfrom PIL import Image\nimport urllib2 as urllib\nfd = urllib.urlopen(\"http://a/b/c\")\nim = Image.open(fd)\nim.size\n```\nAnd here is the error message I received:\n```\naddinfourl instance has no attribute 'seek'\n```"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to the fact that the object returned by `urllib.urlopen()` does not support seeking, which is required by `Image.open()` to read the image data properly. To resolve this issue, you can use the `io.BytesIO` class to create an in-memory binary stream that supports seeking. Here's how you can modify your code to load an image from the internet and get its dimensions using Python Imaging Library (PIL):\n\n```python\nfrom PIL import Image\nimport requests\nfrom io import BytesIO\n\n# Use requests to fetch the content of the image\nresponse = requests.get(\"http://a/b/c\")\nresponse.raise_for_status()  # Check if the request was successful\n\n# Create an in-memory binary stream\nimage_data = BytesIO(response.content)\n\n# Open the image using PIL\nim = Image.open(image_data)\n\n# Get the dimensions of the image\nwidth, height = im.size\nprint(f\"Width: {width}, Height: {height}\")\n```\n\n### Explanation:\n- **`requests.get()`**: This is used to send a GET request to the specified URL. It returns a response object that contains the image data.\n- **`response.raise_for_status()`**: This checks if the request was successful and raises an error if not.\n- **`BytesIO(response.content)`**: This creates an in-memory binary stream from the image data, which supports seeking.\n- **`Image.open(image_data)`**: This opens the image using the in-memory binary stream.\n\nUsing `requests` instead of `urllib` offers a more straightforward and modern approach to handling HTTP requests in Python."
    }
]