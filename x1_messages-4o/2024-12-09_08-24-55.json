[
    {
        "role": "user",
        "content": "I am working with Python and I am encountering an issue regarding scope. I have a variable 'c' which I have initialized as 1. I have two functions, 'f(n)' and 'g(n)', where I am trying to increment the variable 'c' with the value 'n'. However, when I call the function 'g(n)', I am getting an UnboundLocalError with the message \"local variable 'c' referenced before assignment\". Could you please provide some insight into this? Here is my code:\n\n```python\nc = 1\ndef f(n):\n    print c + n \ndef g(n):\n    c = c + n\n\nf(1) # => 2\ng(1) # => UnboundLocalError: local variable 'c' referenced before assignment\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is related to Python's handling of variable scope, particularly with how it distinguishes between global and local variables within functions.\n\nIn your `g(n)` function, the line `c = c + n` is trying to modify the variable `c`. However, because you have assigned a value to `c` within the function, Python treats `c` as a local variable. Since `c` hasn't been initialized within the function before it's used in the expression `c = c + n`, Python raises an `UnboundLocalError`.\n\nTo modify the global variable `c` within the function, you need to explicitly declare `c` as global using the `global` keyword. Here's how you can fix your code:\n\n```python\nc = 1\n\ndef f(n):\n    print(c + n)\n\ndef g(n):\n    global c\n    c = c + n\n\nf(1)  # Output: 2\ng(1)\nprint(c)  # Output: 2\n```\n\nBy adding `global c` in the `g(n)` function, you're telling Python that you want to use the `c` variable from the global scope, allowing you to modify it."
    }
]