[
    {
        "role": "user",
        "content": "How can I modify my Python code to handle both `with open(...)` and `sys.stdout` uniformly? In my current implementation, I am outputting data to a file or, if a file is not specified, to stdout. However, I would like to rewrite my code to handle both targets uniformly. I am aware that I can wrap the target, define a separate function or use a context manager, but I am seeking a simple and idiomatic solution that doesn't require more than five lines of code.\n\nHere is my current code:\n\n```python\nif target:\n    with open(target, 'w') as h:\n        h.write(content)\nelse:\n    sys.stdout.write(content)\n```\n\nIdeal case:\n\n```python\nwith open(target, 'w') as h:\n    h.write(content)\n```\n\nHowever, this doesn't work well because `sys.stdout` is closed when leaving the `with` block and I don't want that. I also don't want to open the target like `stdout = open(target, 'w')` because I would then need to remember to restore the original stdout."
    },
    {
        "role": "assistant",
        "content": "To handle both writing to a file and `sys.stdout` uniformly, you can use the `contextlib` module which provides a `nullcontext` that can be used to handle cases where you do not want to open a file, but still need a context manager. This allows you to use the `with` statement without closing `sys.stdout`. Here's how you can modify your code:\n\n```python\nimport sys\nfrom contextlib import nullcontext\n\ntarget = None  # Replace with your actual target\n\nwith open(target, 'w') if target else nullcontext(sys.stdout) as h:\n    h.write(\"Your content here\")\n```\n\n### Explanation:\n- **`open(target, 'w') if target else nullcontext(sys.stdout)`**: This line uses a conditional expression to decide whether to open a file or use `sys.stdout`. If `target` is provided, it opens the file; otherwise, it uses `nullcontext` with `sys.stdout`.\n- **`nullcontext(sys.stdout)`**: Acts as a no-op context manager that simply returns `sys.stdout`, preventing it from being closed when the `with` block is exited.\n\nThis approach keeps the code clean, concise, and idiomatic while maintaining the functionality you desire."
    }
]