[
    {
        "role": "user",
        "content": "How can I insert statistical annotations such as stars or p-values into matplotlib or seaborn plots? I've been searching for an answer but can't seem to find one. Is there a standard way to include statistical annotation between distribution plots in seaborn, for instance between two box or swarm plots? I would like to visually indicate that one distribution is significantly different from others, as determined by a Wilcoxon test.\n\n[Example image](https://i.stack.imgur.com/n0ZaZ.png)"
    },
    {
        "role": "assistant",
        "content": "To add statistical annotations such as stars or p-values to your Matplotlib or Seaborn plots, you can use a combination of libraries and techniques. While Seaborn does not natively support statistical annotations, you can use the `matplotlib` library alongside Seaborn to achieve this. Here's a step-by-step guide on how you can do this:\n\n1. **Perform Statistical Test:**\n   First, perform your statistical test (e.g., Wilcoxon test) to determine the p-value.\n\n2. **Plot with Seaborn:**\n   Create your plot using Seaborn, for example, using `sns.boxplot()` or `sns.swarmplot()`.\n\n3. **Use `matplotlib` to Add Annotations:**\n   You can use Matplotlib's `text()` or `annotate()` functions to add stars or text to indicate significance. You might also find the `statannot` library useful, which simplifies adding statistical annotations.\n\n4. **Example Code:**\n\n```python\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport scipy.stats as stats\nimport numpy as np\n\n# Sample data\nnp.random.seed(10)\ndata1 = np.random.normal(0, 1, 100)\ndata2 = np.random.normal(0.5, 1, 100)\n\n# Perform Wilcoxon test\nstat, p_value = stats.wilcoxon(data1, data2)\n\n# Create a box plot\nsns.boxplot(data=[data1, data2])\n\n# Add statistical annotation\n# You can define a function to determine the significance level\ndef significance_stars(p):\n    if p < 0.001:\n        return '***'\n    elif p < 0.01:\n        return '**'\n    elif p < 0.05:\n        return '*'\n    else:\n        return 'ns'\n\n# Define position for text\nx1, x2 = 0, 1\ny, h, col = data1.max() + 1, 1, 'k'\n\nplt.plot([x1, x1, x2, x2], [y, y+h, y+h, y], lw=1.5, c=col)\nplt.text((x1 + x2) * .5, y + h, significance_stars(p_value), ha='center', va='bottom', color=col)\n\n# Show plot\nplt.show()\n```\n\n5. **Install `statannot` for Simplicity:**\n   If you prefer a library to handle annotations, you can use `statannot`. Install it with:\n\n   ```\n   pip install statannot\n   ```\n\n   Then you can use it in your code like this:\n\n```python\nfrom statannot import add_stat_annotation\n\n# Create a plot\nax = sns.boxplot(data=[data1, data2])\n\n# Add statistical annotation\nadd_stat_annotation(ax, data=[data1, data2],\n                    box_pairs=[(0, 1)],\n                    test='Wilcoxon',\n                    text_format='star',\n                    loc='outside',\n                    verbose=2)\n\n# Show plot\nplt.show()\n```\n\nThis approach will visually indicate statistical significance between the distributions in your plots, making your visualizations more informative."
    }
]