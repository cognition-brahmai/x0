[
    {
        "role": "user",
        "content": "How can I iterate over a model instance's field names and values in a Django template? I want to create a basic table to display the selected instance's field values along with their names. For example, I have a model defined as:\n\n```python\nclass Client(Model):\n    name = CharField(max_length=150)\n    email = EmailField(max_length=100, verbose_name=\"E-mail\")\n```\n\nI want the output in the template to look like this (assume an instance with the given values):\n\n```\nField Name      Field Value\n----------      -----------\nName            Wayne Koorts\nE-mail          waynes@email.com\n```\n\nI want to be able to pass an instance of the model to a template and dynamically iterate over it in the template, something like this:\n\n```html\n<table>\n    {% for field in fields %}\n        <tr>\n            <td>{{ field.name }}</td>\n            <td>{{ field.value }}</td>\n        </tr>\n    {% endfor %}\n</table>\n```\n\nIs there a neat, Django-approved way to do this, as it seems like a very common task that I will need to do often for this particular project?"
    },
    {
        "role": "assistant",
        "content": "To iterate over a model instance's field names and values in a Django template, you can make use of Django's model API to extract the field names and their corresponding values dynamically. This can be achieved by creating a method in your model or using a template filter. Here's how you can do it:\n\n### Approach 1: Using a Method in the Model\n\nYou can add a method to your model class that returns a list of dictionaries, each containing the field name and its value. This method can be called in your template.\n\n#### Model Method\n\nFirst, add a method to your `Client` model:\n\n```python\nfrom django.db import models\n\nclass Client(models.Model):\n    name = models.CharField(max_length=150)\n    email = models.EmailField(max_length=100, verbose_name=\"E-mail\")\n\n    def get_fields(self):\n        return [\n            {'name': field.verbose_name, 'value': getattr(self, field.name)}\n            for field in self._meta.fields\n        ]\n```\n\n#### Template Usage\n\nIn your template, you can now use this method to iterate over the fields:\n\n```html\n<table>\n    <tr>\n        <th>Field Name</th>\n        <th>Field Value</th>\n    </tr>\n    {% for field in client.get_fields %}\n        <tr>\n            <td>{{ field.name }}</td>\n            <td>{{ field.value }}</td>\n        </tr>\n    {% endfor %}\n</table>\n```\n\n### Approach 2: Using a Template Filter\n\nAlternatively, you can create a custom template filter if you want to keep the logic out of your model.\n\n#### Custom Template Filter\n\nCreate a custom template filter in one of your app's `templatetags` modules:\n\n```python\n# myapp/templatetags/model_extras.py\n\nfrom django import template\n\nregister = template.Library()\n\n@register.filter\ndef model_fields(instance):\n    return [\n        {'name': field.verbose_name, 'value': getattr(instance, field.name)}\n        for field in instance._meta.fields\n    ]\n```\n\nMake sure to load this template tag in your template:\n\n```html\n{% load model_extras %}\n\n<table>\n    <tr>\n        <th>Field Name</th>\n        <th>Field Value</th>\n    </tr>\n    {% for field in client|model_fields %}\n        <tr>\n            <td>{{ field.name }}</td>\n            <td>{{ field.value }}</td>\n        </tr>\n    {% endfor %}\n</table>\n```\n\n### Explanation\n\n- **`_meta.fields`**: This is used to access all the fields in the model. Each field has a `verbose_name` attribute and a `name` attribute.\n- **`getattr(self, field.name)`**: This is used to get the value of the field for the particular instance.\n\nBoth methods provide a neat and Django-approved way to dynamically access model field names and values in a template, allowing for greater flexibility in displaying model data."
    }
]