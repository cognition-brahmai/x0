[
    {
        "role": "user",
        "content": "Is there an equivalent functionality in Java to Python's defaultdict? In Python, defaultdict class allows for the creation of a mapping from key to a list of values. Here's an example of how it works in Python:\n```python\nfrom collections import defaultdict\nd = defaultdict(list)\nd[1].append(2)\nd[1].append(3)\n# d is now {1: [2, 3]}\n```\nSo, how can I implement similar functionality in Java?"
    },
    {
        "role": "assistant",
        "content": "In Java, there isn't a direct equivalent to Python's `defaultdict`, but you can achieve similar functionality using the `Map` interface along with the `computeIfAbsent` method, which was introduced in Java 8. Here's how you can implement it:\n\n```java\nimport java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class DefaultDictExample {\n    public static void main(String[] args) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n\n        // Using computeIfAbsent to mimic defaultdict behavior\n        map.computeIfAbsent(1, k -> new ArrayList<>()).add(2);\n        map.computeIfAbsent(1, k -> new ArrayList<>()).add(3);\n\n        System.out.println(map); // Output: {1=[2, 3]}\n    }\n}\n```\n\nIn this example, `computeIfAbsent` checks if the key `1` is already present in the map. If it is not, it will create a new `ArrayList` and associate it with the key. Then, you can safely add values to the list. This approach mimics the behavior of Python's `defaultdict` with a default factory of `list`."
    }
]