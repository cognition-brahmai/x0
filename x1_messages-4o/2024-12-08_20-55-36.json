[
    {
        "role": "user",
        "content": "In Python, how can I find the first non-repeated character in a string? Can you provide an example using [Counter] in Python code?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To find the first non-repeated character in a string using Python, you can use the `Counter` class from the `collections` module. The `Counter` class helps count the occurrences of each character in the string. Then, you can iterate through the string and find the first character with a count of 1. Here's how you can do it:\n\n```python\nfrom collections import Counter\n\ndef first_non_repeated_character(s):\n    # Create a Counter object to count occurrences of each character\n    char_count = Counter(s)\n    \n    # Iterate through the string and find the first character with a count of 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    \n    # If no non-repeated character is found, return None\n    return None\n\n# Example usage\nstring = \"abracadabra\"\nresult = first_non_repeated_character(string)\nprint(f\"The first non-repeated character is: {result}\")\n```\n\nIn this example, the function `first_non_repeated_character` takes a string `s` as input and returns the first non-repeated character. If there is no such character, it returns `None`. For the string `\"abracadabra\"`, the result would be `'c'`, as it is the first character that does not repeat."
    }
]