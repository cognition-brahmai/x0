[
    {
        "role": "user",
        "content": "How can I retrieve the name of the class that contains a logging call in Python? I am currently able to get the function name by including `%(funcName)s` in the Formatter, but I am struggling to find how to get the class name. Despite going through the documentation for logging, I haven't found any mention of this."
    },
    {
        "role": "assistant",
        "content": "To retrieve the class name in a logging call, you can create a custom logging formatter that inspects the stack to determine the class name. The standard logging library doesn't directly support including the class name in log messages, but you can achieve this by extending the standard formatter.\n\nHere's an example of how you can create a custom formatter to include the class name:\n\n```python\nimport logging\nimport inspect\n\nclass CustomFormatter(logging.Formatter):\n    def format(self, record):\n        # Get the current frame\n        frame = inspect.currentframe()\n        # Move up the frame stack to the caller\n        while frame:\n            # Get the code object of the current frame\n            code = frame.f_code\n            # Check if the code object is part of a class\n            if 'self' in code.co_varnames:\n                # Find the index of 'self' in the arguments\n                index = code.co_varnames.index('self')\n                # Get the 'self' argument from the frame's local variables\n                self_arg = frame.f_locals.get(code.co_varnames[index], None)\n                if self_arg is not None:\n                    # Get the class name from the 'self' argument\n                    record.className = self_arg.__class__.__name__\n                    break\n            frame = frame.f_back\n        else:\n            record.className = None\n        return super().format(record)\n\n# Example usage\nlogger = logging.getLogger(__name__)\nhandler = logging.StreamHandler()\nformatter = CustomFormatter('%(asctime)s - %(className)s - %(name)s - %(levelname)s - %(message)s')\nhandler.setFormatter(formatter)\nlogger.addHandler(handler)\nlogger.setLevel(logging.DEBUG)\n\nclass MyClass:\n    def my_method(self):\n        logger.info(\"This is a log message from MyClass\")\n\nclass AnotherClass:\n    def another_method(self):\n        logger.info(\"This is a log message from AnotherClass\")\n\nmy_instance = MyClass()\nmy_instance.my_method()\n\nanother_instance = AnotherClass()\nanother_instance.another_method()\n```\n\nIn this example, the `CustomFormatter` class extends the standard `Formatter` class. It overrides the `format` method to inspect the call stack and extract the class name from the `self` argument of the method where the logging call occurs. This class name is then added to the log record as `className`, which can be included in the log format string.\n\nNote that this approach relies on the convention that instance methods have a `self` parameter, so it won't work for class methods or static methods. Adjustments would be needed to handle those cases if necessary."
    }
]