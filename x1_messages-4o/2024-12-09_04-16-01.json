[
    {
        "role": "user",
        "content": "I am using Pyodbc to execute a SQL statement and then populate the results into a pandas DataFrame. The piece of code I am using is as follows:\n\n```python\nfrom pandas import DataFrame\nimport pyodbc\n\ncnxn = pyodbc.connect(databasez)\ncursor.execute(\"\"\"SELECT ID, NAME AS Nickname, ADDRESS AS Residence FROM tablez\"\"\")\nDF = DataFrame(cursor.fetchall())\n```\n\nThis connects to the database and populates my DataFrame successfully. However, I am trying to set the DataFrame column names to ['ID', 'Nickname', 'Residence'] directly from the cursor object like so:\n\n```python\nDF.columns = ['ID', 'Nickname', 'Residence']\n```\n\nIs there a way to do this? Is the column name information stored in the cursor object?"
    },
    {
        "role": "assistant",
        "content": "Yes, the column name information is stored in the cursor object. You can extract the column names directly from the cursor's description attribute, which contains metadata about the result set. Here's how you can modify your code to automatically set the column names for your DataFrame:\n\n```python\nfrom pandas import DataFrame\nimport pyodbc\n\n# Establish the database connection\ncnxn = pyodbc.connect(databasez)\ncursor = cnxn.cursor()\n\n# Execute the SQL query\ncursor.execute(\"\"\"SELECT ID, NAME AS Nickname, ADDRESS AS Residence FROM tablez\"\"\")\n\n# Fetch the results\nrows = cursor.fetchall()\n\n# Extract column names from cursor description\ncolumn_names = [column[0] for column in cursor.description]\n\n# Create the DataFrame with the extracted column names\nDF = DataFrame.from_records(rows, columns=column_names)\n\n# Close the cursor and connection\ncursor.close()\ncnxn.close()\n\n# Print the DataFrame\nprint(DF)\n```\n\nIn this code:\n\n- We use `cursor.description` to get the metadata about the columns. It returns a list of tuples, where each tuple contains information about a column. The first element of each tuple is the column name.\n- We extract the column names and pass them to the `DataFrame.from_records()` method, which allows us to set the column names when creating the DataFrame from the fetched records."
    }
]