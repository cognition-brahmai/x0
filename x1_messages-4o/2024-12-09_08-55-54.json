[
    {
        "role": "user",
        "content": "How can I create a JavaScript program to determine if two given strings are anagrams of each other?"
    },
    {
        "role": "assistant",
        "content": "To determine if two given strings are anagrams of each other in JavaScript, you can follow these steps:\n\n1. **Clean and Prepare the Strings**: Remove any non-alphabetic characters and convert the strings to lowercase to ensure the comparison is case-insensitive and not affected by spaces or punctuation.\n\n2. **Sort the Characters**: Convert each string to an array of characters, sort the array, and convert it back to a string.\n\n3. **Compare the Sorted Strings**: If the two sorted strings are identical, then the original strings are anagrams of each other.\n\nHere is a JavaScript function implementing these steps:\n\n```javascript\nfunction areAnagrams(str1, str2) {\n    // Helper function to clean and sort the string\n    function cleanAndSortString(str) {\n        return str\n            .toLowerCase()          // Convert string to lowercase\n            .replace(/[^a-z]/g, '') // Remove non-alphabetic characters\n            .split('')              // Convert string to array of characters\n            .sort()                 // Sort the array\n            .join('');              // Convert array back to string\n    }\n\n    // Clean and sort both strings\n    const sortedStr1 = cleanAndSortString(str1);\n    const sortedStr2 = cleanAndSortString(str2);\n\n    // Compare the sorted strings\n    return sortedStr1 === sortedStr2;\n}\n\n// Example usage\nconst string1 = \"Listen\";\nconst string2 = \"Silent\";\n\nif (areAnagrams(string1, string2)) {\n    console.log(`\"${string1}\" and \"${string2}\" are anagrams.`);\n} else {\n    console.log(`\"${string1}\" and \"${string2}\" are not anagrams.`);\n}\n```\n\n### Explanation\n\n- **Lowercasing and Cleaning**: The function `cleanAndSortString` normalizes the input by converting it to lowercase and removing any characters that are not letters.\n- **Sorting**: By sorting the characters, you create a standardized representation of the string. If two strings are anagrams, their sorted forms will be identical.\n- **Comparison**: Finally, the function checks if the sorted versions of the strings are equal, returning `true` if they are anagrams and `false` otherwise.\n\nThis approach ensures that the program correctly identifies anagrams regardless of case or special characters."
    }
]