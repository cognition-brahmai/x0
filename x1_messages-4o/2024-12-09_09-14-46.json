[
    {
        "role": "user",
        "content": "How can I create a JavaScript function that tests if a given number is prime?"
    },
    {
        "role": "assistant",
        "content": "Creating a JavaScript function to test if a given number is prime is a great exercise. Here's a simple and efficient way to do it:\n\n```javascript\nfunction isPrime(number) {\n  // Handle special cases\n  if (number <= 1) return false; // 0 and 1 are not prime numbers\n  if (number <= 3) return true;  // 2 and 3 are prime numbers\n\n  // Eliminate even numbers and multiples of 3\n  if (number % 2 === 0 || number % 3 === 0) return false;\n\n  // Check for factors from 5 to the square root of the number\n  // We check i and i+2 to skip even numbers\n  for (let i = 5; i * i <= number; i += 6) {\n    if (number % i === 0 || number % (i + 2) === 0) return false;\n  }\n\n  return true;\n}\n\n// Example usage:\nconsole.log(isPrime(11)); // true\nconsole.log(isPrime(15)); // false\n```\n\n### Explanation:\n\n1. **Special Cases**: \n   - Numbers less than or equal to 1 are not prime.\n   - Numbers 2 and 3 are prime.\n\n2. **Eliminating Multiples**:\n   - If the number is divisible by 2 or 3, it's not prime (except for 2 and 3 themselves).\n\n3. **Checking Factors**:\n   - We only check for factors up to the square root of the number. This is because if a number `n` is divisible by some number `p`, then `n = p * q` and at least one of `p` or `q` must be less than or equal to the square root of `n`.\n   - We increment by 6 each time (`i += 6`) and check `i` and `i + 2` to skip even numbers and multiples of 3 beyond 5, for efficiency.\n\nThis function efficiently determines if a number is prime with a time complexity of `O(sqrt(n))`, which is suitable for relatively large numbers."
    }
]