[
    {
        "role": "user",
        "content": "How can I implement a WebSocket server that can handle multiple client connections?"
    },
    {
        "role": "assistant",
        "content": "Implementing a WebSocket server that can handle multiple client connections involves several steps. Here\u2019s a basic guide using Node.js and the popular `ws` library:\n\n### Step 1: Set Up Your Project\n\n1. **Initialize a Node.js Project**:\n   ```bash\n   mkdir websocket-server && cd websocket-server\n   npm init -y\n   ```\n\n2. **Install the `ws` Library**:\n   ```bash\n   npm install ws\n   ```\n\n### Step 2: Create the WebSocket Server\n\n1. **Create a Server File**:\n\n   Create a file named `server.js` and add the following code:\n\n   ```javascript\n   const WebSocket = require('ws');\n\n   // Create a WebSocket server\n   const wss = new WebSocket.Server({ port: 8080 });\n\n   // Array to keep track of connected clients\n   const clients = [];\n\n   // Handle new connections\n   wss.on('connection', (ws) => {\n     console.log('New client connected');\n     clients.push(ws);\n\n     // Handle incoming messages\n     ws.on('message', (message) => {\n       console.log(`Received: ${message}`);\n       \n       // Broadcast the message to all clients\n       clients.forEach((client) => {\n         if (client.readyState === WebSocket.OPEN) {\n           client.send(`Echo: ${message}`);\n         }\n       });\n     });\n\n     // Handle client disconnection\n     ws.on('close', () => {\n       console.log('Client disconnected');\n       clients.splice(clients.indexOf(ws), 1);\n     });\n   });\n\n   console.log('WebSocket server is running on ws://localhost:8080');\n   ```\n\n### Step 3: Run the Server\n\n- Run your server with Node.js:\n\n  ```bash\n  node server.js\n  ```\n\n  The server should now be running on `ws://localhost:8080`.\n\n### Step 4: Connect Clients\n\nYou can connect clients using any WebSocket client library. Here's an example using a simple HTML file with JavaScript:\n\n1. **Create an HTML File** (e.g., `client.html`):\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n     <meta charset=\"UTF-8\">\n     <title>WebSocket Client</title>\n   </head>\n   <body>\n     <h1>WebSocket Client</h1>\n     <button id=\"connect\">Connect</button>\n     <button id=\"send\">Send Message</button>\n     <div id=\"messages\"></div>\n\n     <script>\n       let ws;\n\n       document.getElementById('connect').onclick = () => {\n         ws = new WebSocket('ws://localhost:8080');\n\n         ws.onopen = () => {\n           console.log('Connected to the server');\n           document.getElementById('messages').innerHTML += '<p>Connected</p>';\n         };\n\n         ws.onmessage = (event) => {\n           console.log('Received:', event.data);\n           document.getElementById('messages').innerHTML += `<p>${event.data}</p>`;\n         };\n\n         ws.onclose = () => {\n           console.log('Disconnected from the server');\n           document.getElementById('messages').innerHTML += '<p>Disconnected</p>';\n         };\n       };\n\n       document.getElementById('send').onclick = () => {\n         if (ws && ws.readyState === WebSocket.OPEN) {\n           ws.send('Hello Server!');\n           console.log('Message sent');\n         }\n       };\n     </script>\n   </body>\n   </html>\n   ```\n\n### Conclusion\n\nThis setup will allow multiple clients to connect to the WebSocket server and send messages. The server broadcasts incoming messages to all connected clients. You can expand upon this basic setup to include more advanced functionalities like authentication, rooms, or message history."
    }
]