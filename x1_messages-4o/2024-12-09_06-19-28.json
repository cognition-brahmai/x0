[
    {
        "role": "user",
        "content": "What is the recommended directory structure for a Python project when using `virtualenv`? Specifically, where should I place my own Python files, static files such as images, and custom packages that are available online but not in the cheese-shop, in relation to the `virtualenv` directories? Suppose I am building a WSGI application and I have created a `virtualenv` named `foobar` with the following directory structure:\n\n```\n/foobar\n  /bin\n    {activate, activate.py, easy_install, python}\n  /include\n    {python2.6/...}\n  /lib\n    {python2.6/...}\n```"
    },
    {
        "role": "assistant",
        "content": "When structuring a Python project, especially when using `virtualenv`, it's important to keep your project organized and maintain a clear separation between your code, dependencies, and other assets. Below is a recommended directory structure for a Python project, particularly when building a WSGI application:\n\n```\n/my_project\n  /foobar            # Your virtual environment\n    /bin\n    /include\n    /lib\n  /src               # Your own Python files\n    /my_app          # Your application's code\n      __init__.py\n      app.py         # Main application file\n      models.py      # Database models\n      views.py       # Views or controllers\n  /static            # Static files such as images, CSS, JavaScript\n    /images\n    /css\n    /js\n  /custom_packages   # Custom packages not available in PyPI\n    /package1\n    /package2\n  /tests             # Unit tests for your application\n    test_app.py\n  /config            # Configuration files\n    config.yaml\n  requirements.txt   # List of Python dependencies\n  setup.py           # Script for installing the package\n  README.md          # Project documentation\n  .gitignore         # Git ignore file\n```\n\n### Directory Breakdown:\n\n1. **`/foobar`**: This is your virtual environment directory. It should contain the Python interpreter and installed packages specific to your project. It is best practice to keep this directory separate from your source code and not include it in version control.\n\n2. **`/src`**: This directory contains your own Python source files. Organizing your application code under a directory like `my_app` helps in maintaining a modular structure.\n\n3. **`/static`**: Place all static files like images, CSS, and JavaScript here. This keeps your static assets organized and separate from your Python code.\n\n4. **`/custom_packages`**: This directory is for custom packages that you have sourced from places other than PyPI. You can include these packages in your `PYTHONPATH` or install them directly into your virtual environment using symlinks or other methods.\n\n5. **`/tests`**: Store your test files here. Keeping tests separate helps in maintaining clean and maintainable code.\n\n6. **`/config`**: This directory is for configuration files. Using a dedicated directory for configurations makes it easy to manage different environments (development, testing, production).\n\n7. **`requirements.txt`**: This file lists the Python dependencies required for your project. Use this file to manage and install dependencies using `pip`.\n\n8. **`setup.py`**: If your project is intended to be a package, use `setup.py` to specify how it should be installed and any dependencies it requires.\n\n9. **`README.md`**: Include a README file to provide an overview of your project, installation instructions, and usage details.\n\n10. **`.gitignore`**: Use this file to specify files and directories that should be ignored by version control (e.g., the virtual environment directory).\n\nThis structure aims to keep your project organized and maintainable, allowing for easy scalability and collaboration."
    }
]