[
    {
        "role": "user",
        "content": "How can I sort a Python list by two criteria: first by the value in field 1 and then by the value in field 2? Currently, I have my list sorted by one field as shown below:\n\n```python\nimport operator\nlist1 = sorted(csv1, key=operator.itemgetter(1))\n```\n\nHow can I modify this to sort by two fields?"
    },
    {
        "role": "assistant",
        "content": "To sort a Python list by two criteria using `operator.itemgetter`, you can simply pass multiple indices to `itemgetter`. This will sort the list first by the value in the first specified field, and then by the value in the second specified field in case of ties. Here's how you can modify your code:\n\n```python\nimport operator\n\n# Assuming csv1 is your list of records, where each record is a list or tuple\nlist1 = sorted(csv1, key=operator.itemgetter(1, 2))\n```\n\nIn this example, `operator.itemgetter(1, 2)` will first sort the list by the values in the field with index 1, and then by the values in the field with index 2. You can adjust the indices `1` and `2` to match the actual fields you want to sort by in your data.\n\nIf you'd like to sort in descending order for any of the fields, you can use a lambda function with `sorted` and specify the `reverse` parameter:\n\n```python\nlist1 = sorted(csv1, key=lambda x: (x[1], x[2]), reverse=True)\n```\n\nThis example sorts both fields in descending order. If you want to sort one field in ascending order and another in descending order, you can modify the lambda function like this:\n\n```python\nlist1 = sorted(csv1, key=lambda x: (x[1], -x[2]))\n```\n\nThis sorts by the field at index `1` in ascending order and the field at index `2` in descending order. Adjust the logic as per your requirement."
    }
]