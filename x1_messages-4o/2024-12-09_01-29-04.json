[
    {
        "role": "user",
        "content": "I am trying to manage multiple threads in Python and would like to be notified when a thread ends execution (i.e., when the `run()` method finishes). I know I could check the status of all my threads using the `Thread.isActive()` method but I want to avoid polling. I was thinking of passing a callback method to the threads and calling this function at the end of the `run()` method. How can I pass the callback method from the manager to the threads and call it upon completion? Here is an example of what I am trying to achieve:\n\n```python\nclass Manager():\n    #...\n    MyThread(self.on_thread_finished).start() # How do I pass the callback\n\n    def on_thread_finished(self, data):\n        pass\n    #...\n\nclass MyThread(Thread):\n    #...\n    def run(self):\n        #...\n        self.callback(data) # How do I call the callback?\n    #...\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the functionality of notifying the manager when a thread finishes execution, you can indeed pass a callback function to the thread and call it at the end of the `run()` method. Here's an example of how you can implement this:\n\n```python\nfrom threading import Thread\n\nclass Manager:\n    def __init__(self):\n        # Initiating a thread and passing the callback function\n        self.thread = MyThread(self.on_thread_finished)\n        self.thread.start()\n\n    def on_thread_finished(self, data):\n        # This method will be called when the thread is finished\n        print(f\"Thread finished with data: {data}\")\n\nclass MyThread(Thread):\n    def __init__(self, callback):\n        super().__init__()\n        self.callback = callback  # Store the callback function\n\n    def run(self):\n        # Perform some operations\n        data = \"Result from thread\"\n        \n        # Call the callback function with the data when finished\n        if self.callback:\n            self.callback(data)\n\n# Example usage\nif __name__ == \"__main__\":\n    manager = Manager()\n```\n\n### Explanation:\n1. **Manager Class Initialization**:\n   - In the `Manager` class, you initialize the `MyThread` instance with the `on_thread_finished` method as the callback function.\n   - The `start()` method is called to begin the execution of the thread.\n\n2. **Callback Function**:\n   - The `on_thread_finished` method in the `Manager` class is defined to handle the completion notification. It receives `data` from the thread and processes it (in this example, it simply prints the data).\n\n3. **MyThread Class**:\n   - The `MyThread` class extends `Thread` and accepts a `callback` parameter in its constructor.\n   - This callback is stored as an instance variable and is called with relevant data at the end of the `run()` method.\n\nThis setup allows for asynchronous execution where the `Manager` is notified when the thread finishes, without the need for polling."
    }
]