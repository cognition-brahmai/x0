[
    {
        "role": "user",
        "content": "I have two images and I need to highlight the differences between the two images using OpenCV in Python. I am currently using a method where I create a mask (difference between the two images), color it red, and then add it to the images. However, the computed mask does not show all the differences clearly. Some differences are lightly marked, but I want all the differences to be clearly marked in red. What changes should I make in my code to achieve this?\n\nHere is my current code:\n\n```python\nimport cv2\n\n# load images\nimage1 = cv2.imread(\"leftImage.jpg\")\nimage2 = cv2.imread(\"rightImage.jpg\")\n\n# compute difference\ndifference = cv2.subtract(image1, image2)\n\n# color the mask red\nConv_hsv_Gray = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\nret, mask = cv2.threshold(Conv_hsv_Gray, 0, 255,cv2.THRESH_BINARY_INV |cv2.THRESH_OTSU)\ndifference[mask != 255] = [0, 0, 255]\n\n# add the red mask to the images to make the differences obvious\nimage1[mask != 255] = [0, 0, 255]\nimage2[mask != 255] = [0, 0, 255]\n\n# store images\ncv2.imwrite('diffOverImage1.png', image1)\ncv2.imwrite('diffOverImage2.png', image1)\ncv2.imwrite('diff.png', difference)\n```"
    },
    {
        "role": "assistant",
        "content": "To improve the visibility of the differences between two images using OpenCV, you can enhance the masking process by applying a few techniques to ensure that all differences are clearly marked. Here is an improved version of your code:\n\n```python\nimport cv2\nimport numpy as np\n\n# Load images\nimage1 = cv2.imread(\"leftImage.jpg\")\nimage2 = cv2.imread(\"rightImage.jpg\")\n\n# Ensure both images have the same size\nif image1.shape != image2.shape:\n    raise ValueError(\"Images must have the same dimensions.\")\n\n# Compute absolute difference\ndifference = cv2.absdiff(image1, image2)\n\n# Convert difference to grayscale\ngray_difference = cv2.cvtColor(difference, cv2.COLOR_BGR2GRAY)\n\n# Apply a threshold to get a binary image showing the differences\n_, mask = cv2.threshold(gray_difference, 30, 255, cv2.THRESH_BINARY)\n\n# Dilate the mask to make the differences more pronounced\nkernel = np.ones((5, 5), np.uint8)\nmask = cv2.dilate(mask, kernel, iterations=1)\n\n# Create a red mask of the differences\nred_mask = np.zeros_like(image1)\nred_mask[:, :] = [0, 0, 255]\n\n# Apply the red mask to the original images where differences are found\nhighlighted_image1 = cv2.addWeighted(image1, 1, red_mask, 0.5, 0, mask=mask)\nhighlighted_image2 = cv2.addWeighted(image2, 1, red_mask, 0.5, 0, mask=mask)\n\n# Store images\ncv2.imwrite('diffOverImage1.png', highlighted_image1)\ncv2.imwrite('diffOverImage2.png', highlighted_image2)\ncv2.imwrite('diff.png', difference)\n```\n\n### Key Improvements:\n1. **Absolute Difference**: Use `cv2.absdiff()` to ensure the difference is calculated in an absolute manner, which is more reliable than simple subtraction.\n   \n2. **Grayscale Conversion**: Convert the difference image to grayscale for easier thresholding.\n\n3. **Thresholding**: Use a fixed threshold value (e.g., 30) to create a binary mask of the differences. You can adjust this value as needed to capture more subtle differences.\n\n4. **Dilation**: Apply morphological dilation to the mask to make the differences more visible and pronounced. You can adjust the kernel size and iteration count to fine-tune the effect.\n\n5. **Red Mask**: Create a separate red mask that highlights the differences by blending it with the original images using `cv2.addWeighted()`. This provides a clear visual cue of where the differences are located.\n\nBy applying these techniques, you should be able to clearly highlight all the differences between the two images in red."
    }
]