[
    {
        "role": "user",
        "content": "How can I mock an HTTP request for unit testing in Python? I need to include a web server for all my tests related to HTTP. I would like to start the server, create a few resources with appropriate mime types, response codes, etc., run the tests (ideally without having to start the server for each test), and then shut down the server. I tried a few things with BaseHTTPServer but haven't been successful yet, as the \"nosetests\" command seems to wait indefinitely. Any advice would be very helpful. \n\nAdditionally, I have a piece of code that returns the list of CSS for a given website. I want to test if it returns the right list of CSS. Currently, this code depends on an online server. I want to be able to add different types of combination of stylesheets and to test the protocol and then later on some options on their parsing, combinations, etc. without needing an online server."
    },
    {
        "role": "assistant",
        "content": "To effectively mock HTTP requests for unit testing in Python, you can use different approaches depending on your requirements. Here\u2019s a comprehensive guide to help you set up a testing environment without relying on an actual online server:\n\n### Mocking HTTP Requests\n\n1. **Using `unittest.mock` with `requests` Library:**\n\n   If you're using the `requests` library, you can mock HTTP requests using `unittest.mock`. Here's a simple example:\n\n   ```python\n   import unittest\n   from unittest.mock import patch\n   import requests\n\n   def get_css(url):\n       response = requests.get(url)\n       # Implement logic to extract CSS links\n       return response.text\n\n   class TestCSS(unittest.TestCase):\n\n       @patch('requests.get')\n       def test_get_css(self, mock_get):\n           mock_get.return_value.status_code = 200\n           mock_get.return_value.text = \"<link rel='stylesheet' href='style.css'>\"\n           \n           css = get_css('http://example.com')\n           self.assertIn('style.css', css)\n\n   if __name__ == '__main__':\n       unittest.main()\n   ```\n\n2. **Using `responses` Library:**\n\n   The `responses` library is a great option specifically designed for mocking HTTP requests made by `requests` library:\n\n   ```python\n   import requests\n   import responses\n   import unittest\n\n   def get_css(url):\n       response = requests.get(url)\n       # Implement logic to extract CSS links\n       return response.text\n\n   class TestCSS(unittest.TestCase):\n\n       @responses.activate\n       def test_get_css(self):\n           responses.add(responses.GET, 'http://example.com',\n                         body=\"<link rel='stylesheet' href='style.css'>\",\n                         status=200, content_type='text/html')\n\n           css = get_css('http://example.com')\n           self.assertIn('style.css', css)\n\n   if __name__ == '__main__':\n       unittest.main()\n   ```\n\n### Running a Local HTTP Server for Tests\n\nIf you need to run a local server for integration tests (not unit tests), you can use `http.server` for Python 3:\n\n1. **Using `http.server`:**\n\n   You can create a simple HTTP server using `http.server` module in Python 3:\n\n   ```python\n   import http.server\n   import socketserver\n   import threading\n\n   PORT = 8000\n\n   Handler = http.server.SimpleHTTPRequestHandler\n\n   def start_server():\n       with socketserver.TCPServer((\"\", PORT), Handler) as httpd:\n           print(f\"Serving at port {PORT}\")\n           httpd.serve_forever()\n\n   # Run the server in a separate thread\n   server_thread = threading.Thread(target=start_server)\n   server_thread.setDaemon(True)\n   server_thread.start()\n\n   # Your test code can go here\n   ```\n\n### Combining with Unit Tests\n\nFor your CSS functionality, you can integrate the server setup in your test setup and teardown:\n\n```python\nimport unittest\nimport http.server\nimport socketserver\nimport threading\nimport requests\n\nclass TestCSS(unittest.TestCase):\n\n    @classmethod\n    def setUpClass(cls):\n        PORT = 8000\n        Handler = http.server.SimpleHTTPRequestHandler\n\n        cls.httpd = socketserver.TCPServer((\"\", PORT), Handler)\n        cls.server_thread = threading.Thread(target=cls.httpd.serve_forever)\n        cls.server_thread.setDaemon(True)\n        cls.server_thread.start()\n\n    @classmethod\n    def tearDownClass(cls):\n        cls.httpd.shutdown()\n        cls.httpd.server_close()\n\n    def test_get_css(self):\n        response = requests.get('http://localhost:8000')\n        # Assert response and CSS extraction logic\n\nif __name__ == '__main__':\n    unittest.main()\n```\n\n### Conclusion\n\nBy using mocking libraries like `unittest.mock` or `responses`, you can effectively mock HTTP requests for unit testing without starting a real HTTP server. For integration tests, you can use a local server setup with `http.server` and manage its lifecycle with test setup and teardown methods. This approach ensures that your tests are reliable and isolated from external network dependencies."
    }
]