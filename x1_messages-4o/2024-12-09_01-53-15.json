[
    {
        "role": "user",
        "content": "How can I correctly set up a Python package with sub-packages? I have a package structure like this:\n\n```\nmyPackage\n\u251c\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mySubPackage1\n\u2502   \u251c\u2500\u2500 foo2.py\n\u2502   \u251c\u2500\u2500 foo.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 mySubPackage2\n\u2502   \u251c\u2500\u2500 bar2.py\n\u2502   \u251c\u2500\u2500 bar.py\n\u2502   \u2514\u2500\u2500 __init__.py\n\u2514\u2500\u2500 setup.py\n```\n\nAll the `__init__.py` files are empty. My `setup.py` file looks like this:\n\n```python\nfrom distutils.core import setup\n\nif __name__ == \"__main__\":\n    setup(\n        name='myPackage',\n        package_dir = {\n            'mySubPackage1': 'mySubPackage1',\n            'mySubPackage2': 'mySubPackage2'},\n        packages=['mySubPackage1', 'mySubPackage2'],\n    )\n```\n\nWhen I run `python setup.py install` from `myPackage`, the sub-packages are installed into `dist-packages`:\n\n```\n/usr/local/lib/python2.7/dist-packages/mySubPackage1\n/usr/local/lib/python2.7/dist-packages/mySubPackage2\n```\n\nI suspect the problem lies with my `setup.py` file, but I don't know how to correct it. Should it be in the parent directory of `myPackage`? If so, how does it work when I pack the package into a `zip` file using `python setup.py sdist`?"
    },
    {
        "role": "assistant",
        "content": "To correctly set up your Python package with sub-packages, you need to ensure that your `setup.py` file is configured properly. The goal is to have your package and sub-packages installed under the main package directory, not directly in `dist-packages`. Here's how you can achieve this:\n\n1. **Directory Structure**: Your directory structure is generally correct, but you need to ensure that your `setup.py` is configured to recognize your main package (`myPackage`) and its sub-packages.\n\n2. **Correct `setup.py` Configuration**:\n   - Use `setuptools` instead of `distutils.core` as it's more versatile and supports more features.\n   - Ensure the `packages` argument in `setup.py` includes the main package and all sub-packages.\n\nHere's an updated version of your `setup.py`:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='myPackage',\n    version='0.1.0',  # Add a version number for your package\n    packages=find_packages(),  # Automatically find all packages and sub-packages\n    install_requires=[],  # Add any dependencies your package requires\n)\n```\n\n3. **Explanation**:\n   - **`find_packages()`**: This function will automatically discover all packages and sub-packages under the directory where `setup.py` is located. It assumes that all directories containing a `__init__.py` file are packages.\n   - **`install_requires`**: This is where you list any third-party packages your package depends on.\n\n4. **Packaging and Distribution**:\n   - When you run `python setup.py sdist`, it'll create a source distribution in a `.zip` or `.tar.gz` format that includes your entire package structure. This can be distributed and installed using `pip`.\n\n5. **Installation**:\n   - When you run `python setup.py install`, it should install `myPackage` and its sub-packages correctly under `dist-packages` as `myPackage.mySubPackage1`, `myPackage.mySubPackage2`, etc.\n\nBy following these steps, your package and sub-packages should be installed correctly under the main package directory in the `dist-packages`, ensuring a proper hierarchical package structure."
    }
]