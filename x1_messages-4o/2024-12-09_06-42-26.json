[
    {
        "role": "user",
        "content": "I am trying to set up a PostgreSQL table that has two foreign keys pointing to the same primary key in another table, using SQLAlchemy. While attempting to do this, I encountered an error: \"sqlalchemy.exc.AmbiguousForeignKeysError: Could not determine join condition between parent/child tables on relationship Company.stakeholder - there are multiple foreign key paths linking the tables. Specify the 'foreign_keys' argument, providing a list of those columns which should be counted as containing a foreign key reference to the parent table.\" I tried implementing the solution given in the SQLAlchemy Documentation, but the error still persists. What should I do?\n\nHere is the code I am using:\n\n```python\nclass Company(Base):\n    __tablename__ = 'company'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), nullable=False)\n\nclass Stakeholder(Base):\n    __tablename__ = 'stakeholder'\n    id = Column(Integer, primary_key=True)\n    company_id = Column(Integer, ForeignKey('company.id'), nullable=False)\n    stakeholder_id = Column(Integer, ForeignKey('company.id'), nullable=False)\n    company = relationship(\"Company\", foreign_keys='company_id')\n    stakeholder = relationship(\"Company\", foreign_keys='stakeholder_id')\n```\n\nI've seen answers to similar questions suggesting the use of `primaryjoin`, but according to the documentation, it seems like `primaryjoin` isn't necessary for this situation. What am I doing wrong?"
    },
    {
        "role": "assistant",
        "content": "To resolve the `AmbiguousForeignKeysError` you're encountering, you need to ensure that the `foreign_keys` argument in the `relationship` definition is correctly specified. In your code, you're using strings to specify the `foreign_keys`, but it should be a list of column objects. Let's correct the code accordingly:\n\n```python\nfrom sqlalchemy import Column, Integer, String, ForeignKey\nfrom sqlalchemy.orm import relationship\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Company(Base):\n    __tablename__ = 'company'\n    id = Column(Integer, primary_key=True)\n    name = Column(String(50), nullable=False)\n\nclass Stakeholder(Base):\n    __tablename__ = 'stakeholder'\n    id = Column(Integer, primary_key=True)\n    company_id = Column(Integer, ForeignKey('company.id'), nullable=False)\n    stakeholder_id = Column(Integer, ForeignKey('company.id'), nullable=False)\n\n    # Correctly specifying foreign_keys with actual column objects\n    company = relationship(\"Company\", foreign_keys=[company_id])\n    stakeholder = relationship(\"Company\", foreign_keys=[stakeholder_id])\n```\n\nKey changes:\n\n1. Use actual column objects in the `foreign_keys` parameter in the `relationship` function, rather than strings. This helps SQLAlchemy to clearly understand which foreign keys are being referred to.\n\n2. Ensure that you have imported all the necessary modules and initialized the Base class correctly.\n\nThis approach should resolve the ambiguity in the foreign key paths and allow SQLAlchemy to correctly map the relationships. If you continue to encounter issues, verify that the table and column names are correct and that there are no additional configurations interfering with the setup."
    }
]