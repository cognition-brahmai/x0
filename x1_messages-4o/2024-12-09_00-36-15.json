[
    {
        "role": "user",
        "content": "How can I create a primary key in SQLAlchemy that doesn't auto-increment?\n\nI'm working on a project where I am trying to create a table using SQLAlchemy with the following structure:\n\n```python\nclass Widget(db.Model):\n    __tablename__ = 'widgets'\n    ext_id = db.Column(db.Integer, primary_key=True)\n    w_code = db.Column(db.String(34), unique=True)\n    # other traits follow...\n```\n\nEvery field value is provided by an external system. The ext_id and w_code will always be unique. I'd like to use ext_id as the primary key. However, when I attempt to create a new record and specify the ext_id value, it appears that the system is ignoring the value I've specified and instead auto-incrementing the value.\n\nHere's an example of what's happening:\n\n```python\n>>> # from a clean database\n>>> skill = Widget(ext_id=7723, w_code=u'IGF35ac9')\n>>> session.add(skill)\n>>> session.commit()\n>>> Skill.query.first().ext_id\n1\n>>> \n```\n\nI want to specify to SQLAlchemy that the ext_id field should be used as the primary key field without auto-increment. I understand that I could add a synthetic id column as the primary key and make ext_id be a unique column, but I'd rather avoid the extra complication and potential database bloat. Can someone assist me in solving this issue? For context, I am testing with SQLite."
    },
    {
        "role": "assistant",
        "content": "To achieve a primary key in SQLAlchemy that does not auto-increment, you'll need to ensure that the primary key column is explicitly set up without the `autoincrement` behavior. By default, SQLAlchemy will try to auto-increment integer primary keys unless instructed otherwise. Here's how you can define your `Widget` class to prevent `ext_id` from auto-incrementing:\n\n```python\nfrom sqlalchemy import create_engine, Column, Integer, String, Sequence\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\n\nBase = declarative_base()\n\nclass Widget(Base):\n    __tablename__ = 'widgets'\n    \n    # By default, autoincrement is set to True for integer primary keys.\n    # Set it to False to prevent auto-increment behavior.\n    ext_id = Column(Integer, primary_key=True, autoincrement=False)\n    w_code = Column(String(34), unique=True)\n\n# Example setup for SQLite\nengine = create_engine('sqlite:///:memory:')\nBase.metadata.create_all(engine)\n\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Adding a widget with a specified ext_id\nwidget = Widget(ext_id=7723, w_code=u'IGF35ac9')\nsession.add(widget)\nsession.commit()\n\n# Verify that the ext_id is set correctly\nprint(session.query(Widget).first().ext_id)  # Should print 7723\n```\n\n### Explanation:\n\n1. **autoincrement=False**: This is the key setting that prevents the primary key from being auto-incremented. By default, SQLAlchemy will set `autoincrement=True` for integer primary keys, but setting it to `False` ensures that the provided value is used.\n\n2. **Database Configuration**: Make sure that your database connection and session setup is correct. The example uses an in-memory SQLite database for demonstration purposes. You'll need to adjust the connection string for your specific database environment.\n\n3. **Testing and Verification**: After defining the model, it's always a good idea to test the insertion and ensure that the primary key value you provide is the one stored in the database.\n\nThis setup should work as expected for both SQLite and other databases, ensuring that the primary key values you specify are used without being overridden by auto-increment behavior."
    }
]