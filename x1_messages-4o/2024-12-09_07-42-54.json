[
    {
        "role": "user",
        "content": "In Python, is there a way to combine two decorators into one new decorator? I understand that it's possible to apply multiple decorators to a function, but I'm curious if there's a simpler method to merge two into a new one."
    },
    {
        "role": "assistant",
        "content": "Yes, you can definitely combine two decorators into a new one in Python. This approach can help make your code cleaner and more modular by merging common functionality into a single decorator. Here's a general way to do it:\n\nLet's assume you have two decorators, `decorator_one` and `decorator_two`, and you want to combine them into a single decorator called `combined_decorator`.\n\n```python\nimport functools\n\ndef decorator_one(func):\n    @functools.wraps(func)\n    def wrapper_one(*args, **kwargs):\n        print(\"Decorator One: Before function call\")\n        result = func(*args, **kwargs)\n        print(\"Decorator One: After function call\")\n        return result\n    return wrapper_one\n\ndef decorator_two(func):\n    @functools.wraps(func)\n    def wrapper_two(*args, **kwargs):\n        print(\"Decorator Two: Before function call\")\n        result = func(*args, **kwargs)\n        print(\"Decorator Two: After function call\")\n        return result\n    return wrapper_two\n\ndef combined_decorator(func):\n    @functools.wraps(func)\n    def wrapper_combined(*args, **kwargs):\n        print(\"Combined: Before both decorators\")\n        result = decorator_one(decorator_two(func))(*args, **kwargs)\n        print(\"Combined: After both decorators\")\n        return result\n    return wrapper_combined\n```\n\nIn the `combined_decorator`, you can apply `decorator_two` first and then `decorator_one` to the function `func`. This is equivalent to stacking decorators as `@decorator_one @decorator_two` on a function.\n\nHere's how you can use the `combined_decorator`:\n\n```python\n@combined_decorator\ndef my_function():\n    print(\"Original function is called\")\n\nmy_function()\n```\n\nThis will output:\n\n```\nCombined: Before both decorators\nDecorator One: Before function call\nDecorator Two: Before function call\nOriginal function is called\nDecorator Two: After function call\nDecorator One: After function call\nCombined: After both decorators\n```\n\nThis approach allows you to seamlessly merge the functionality of multiple decorators into a single one, simplifying the application of common patterns across your codebase."
    }
]