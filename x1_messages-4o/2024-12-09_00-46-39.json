[
    {
        "role": "user",
        "content": "I am using Django on an Apache server with mod_wsgi, and also running an AngularJS app which is served directly by Apache, not Django. I'm trying to use POST requests to the Django server (which is running rest_framework), but I'm encountering issues with the csrf token. Is there a way to set the csrf token from the server without including {% csrf token %} in the template, since these pages are not processed by Django? My requirements are:\n\n1. I want to obtain a csrf token via a GET request as a cookie.\n2. I want to make POST requests to the Django server using the csrf token cookie value."
    },
    {
        "role": "assistant",
        "content": "To handle CSRF tokens with an AngularJS application communicating with a Django backend (using Django Rest Framework), you can follow these steps:\n\n### Step 1: Configure Django to Use CSRF Cookies\n\n1. **Modify Django Settings:**\n\n   Ensure your `settings.py` contains the following settings for CSRF:\n\n   ```python\n   CSRF_COOKIE_NAME = \"csrftoken\"\n   CSRF_COOKIE_HTTPONLY = False  # Allow JavaScript access to the CSRF token\n   CSRF_COOKIE_SAMESITE = \"Lax\"  # Adjust according to your needs, (e.g., 'Strict' or 'None' if using cross-site requests)\n   ```\n\n2. **Include `CsrfViewMiddleware`:**\n\n   Ensure `CsrfViewMiddleware` is included in your `MIDDLEWARE` settings:\n\n   ```python\n   MIDDLEWARE = [\n       ...\n       'django.middleware.csrf.CsrfViewMiddleware',\n       ...\n   ]\n   ```\n\n3. **Add CSRF Token to Views:**\n\n   If you are using class-based views, make sure they are decorated with `@csrf_protect` or use `@ensure_csrf_cookie` to ensure a CSRF token is set on GET requests:\n\n   ```python\n   from django.views.decorators.csrf import ensure_csrf_cookie\n\n   @ensure_csrf_cookie\n   def index(request):\n       return render(request, 'index.html')\n   ```\n\n   For function-based views, you can similarly use `@ensure_csrf_cookie`.\n\n### Step 2: Obtain CSRF Token via AngularJS\n\n1. **Retrieve CSRF Token:**\n\n   After making a GET request to your Django server, the CSRF token should be available in the cookies. Use AngularJS to read this token:\n\n   ```javascript\n   var csrftoken = $cookies.get('csrftoken');\n   ```\n\n   Ensure you have included the `ngCookies` module to access cookies.\n\n2. **Send CSRF Token in POST Requests:**\n\n   When making a POST request, include the CSRF token in the HTTP headers:\n\n   ```javascript\n   $http.post('/your/api/endpoint/', data, {\n       headers: {\n           'X-CSRFToken': csrftoken\n       }\n   }).then(function(response) {\n       // Handle success\n   }, function(error) {\n       // Handle error\n   });\n   ```\n\n### Step 3: Apache Configuration (Optional)\n\nIf you're encountering issues with the CSRF token being set or read, ensure that your Apache server is correctly configured to handle cookies and headers. This might involve checking the settings in your `httpd.conf` or equivalent configuration files to ensure that cookies are not being stripped or altered.\n\n### Additional Considerations\n\n- **CORS Configuration:** If your AngularJS application is served from a different domain, ensure you have correctly configured CORS on your Django server using `django-cors-headers` or similar packages.\n\n- **Security:** Review the security implications of the CSRF settings, especially if you are using `CSRF_COOKIE_SAMESITE='None'`, which requires `CSRF_COOKIE_SECURE=True` and serving over HTTPS.\n\nBy following these steps, you should be able to manage CSRF protection in your AngularJS application when making requests to a Django backend."
    }
]