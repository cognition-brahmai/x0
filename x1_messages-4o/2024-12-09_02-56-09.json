[
    {
        "role": "user",
        "content": "I'm working with Django 1.0.2 and I've noticed that the `slugify` filter is stripping out non-ASCII alphanumeric characters, which is problematic for me. I need a method to prevent this. As an example, I've seen that cnprog.com has Chinese characters in their question URLs. They don't seem to be using `slugify` in their templates, but are calling a method in their `Question` model to get permalinks as shown here:\n\n```python\ndef get_absolute_url(self):\n    return '%s%s' % (reverse('question', args=[self.id]), self.title)\n```\n\nI'm unsure if they are slugifying the URLs or not. How can I modify my code to mimic this functionality?"
    },
    {
        "role": "assistant",
        "content": "To handle non-ASCII characters in slugs, you can customize the way slugs are generated in Django. The default `slugify` function in Django is designed to produce ASCII-only slugs, which is why it's stripping out non-ASCII characters. If you want to include characters from other languages, you might need to use a custom slugification function or a third-party library that supports international characters.\n\nHere's a way to modify your code to handle this:\n\n1. **Use a third-party library:** You can use `slugify` from the `python-slugify` package, which supports Unicode characters. First, install the package:\n\n   ```bash\n   pip install python-slugify\n   ```\n\n2. **Implement a custom slugify function:** You can then create a custom function in your Django model:\n\n   ```python\n   from django.db import models\n   from slugify import slugify\n\n   class Question(models.Model):\n       title = models.CharField(max_length=200)\n       # other fields...\n\n       def get_absolute_url(self):\n           # Use the custom slugify function to include non-ASCII characters\n           slug = slugify(self.title, allow_unicode=True)\n           return '%s%s' % (reverse('question', args=[self.id]), slug)\n   ```\n\n3. **Adjust your URL patterns and views:** Make sure your URL patterns and views can handle slugs with non-ASCII characters. Django's URL dispatcher supports Unicode, so you generally don't need special handling in the URL configuration.\n\nBy using `python-slugify`, you can generate slugs that retain non-ASCII characters, making your URLs more user-friendly for international content. Adjust the `get_absolute_url` method in your model to use this new slugify function, and you should be able to achieve similar functionality to what you've observed on cnprog.com."
    }
]