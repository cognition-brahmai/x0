[
    {
        "role": "user",
        "content": "I am attempting to create a Python class that uses the Python logging module. This class should be responsible for creating a file with a given name as specified in the init function. I want to be able to create an object of this class in two or more other classes and expect that this will result in two or more files being generated. But, I am encountering an issue where I am unable to create multiple files. How can I resolve this issue? Here is the class I've written so far:\n\n```python\nclass Logger:\n    def __init__(self, log_filename = \"test.log\"):\n        if not os.path.exists(\"LogFiles\"):\n            os.makedirs(\"LogFiles\")\n        self.Logger = logging.getLogger(\"main\")\n        logging.basicConfig(level=logging.DEBUG,\n                            format='%(asctime)s : %(message)s',\n                            filename= log_filename,\n                            filemode='w')           # change filemode to 'w' to overwrite file on each run\n\n        consoleHandler = logging.StreamHandler()\n        consoleHandler.setLevel(logging.DEBUG)\n        formatter = logging.Formatter('%(asctime)s - %(message)s')\n        consoleHandler.setFormatter(formatter)\n        logging.getLogger('').addHandler(consoleHandler)      # Add to the root logger\n        self.Logger.info(\"Starting new logging sessions\")\n\n\n    def writeToFile(self, line):\n        if self.Logger.propagate == True:\n            self.Logger.debug(line)\n\n    def closeFile(self):\n\n        if self.Logger.propagate == True:\n            self.Logger.propagate = False\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're facing likely stems from the way the logging configuration is set up. The `logging.basicConfig()` function can only be called once per session, and it won't have an effect if you call it multiple times. This means that if you create multiple instances of your `Logger` class, they will all share the same configuration and the same log file, rather than creating separate files.\n\nTo resolve this issue, you can configure each logger instance separately. Here's how you can modify your `Logger` class to achieve this:\n\n1. Use a different logger name for each instance.\n2. Set up handlers and formatters manually instead of using `basicConfig`.\n\nHere's an updated version of your `Logger` class:\n\n```python\nimport logging\nimport os\n\nclass Logger:\n    def __init__(self, log_filename=\"test.log\"):\n        if not os.path.exists(\"LogFiles\"):\n            os.makedirs(\"LogFiles\")\n        \n        # Create a unique logger name for each instance\n        self.logger = logging.getLogger(log_filename)\n        self.logger.setLevel(logging.DEBUG)\n\n        # Check if the logger already has handlers to avoid duplicate logging\n        if not self.logger.hasHandlers():\n            # Create a file handler for logging to a file\n            file_handler = logging.FileHandler(os.path.join(\"LogFiles\", log_filename), mode='w')\n            file_handler.setLevel(logging.DEBUG)\n\n            # Create a console handler for logging to the console\n            console_handler = logging.StreamHandler()\n            console_handler.setLevel(logging.DEBUG)\n\n            # Create a formatter and set it for both handlers\n            formatter = logging.Formatter('%(asctime)s : %(message)s')\n            file_handler.setFormatter(formatter)\n            console_handler.setFormatter(formatter)\n\n            # Add handlers to the logger\n            self.logger.addHandler(file_handler)\n            self.logger.addHandler(console_handler)\n\n        self.logger.info(\"Starting new logging session\")\n\n    def writeToFile(self, line):\n        if self.logger.propagate:\n            self.logger.debug(line)\n\n    def closeFile(self):\n        if self.logger.propagate:\n            self.logger.propagate = False\n```\n\n### Key Changes:\n- **Unique Logger Name**: Each logger instance now uses the `log_filename` as its name, which ensures that each logger is independent.\n- **Manual Handler Setup**: Handlers and formatters are set up manually. This allows each instance to have its own handlers and configuration.\n- **Handler Check**: The `if not self.logger.hasHandlers():` check prevents adding duplicate handlers if the logger is reinitialized.\n\nNow, when you create multiple instances of the `Logger` class with different filenames, each instance will log to its own file."
    }
]