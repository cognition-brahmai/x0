[
    {
        "role": "user",
        "content": "In my Django project, I have two apps, 'blog' and 'polls', both with their own 'index.html' templates. I also have a 'base.html' in the project's templates which I want the two apps to extend. How can I extend this base template from multiple apps without copying it to every app, given that I am using split directories? Are there better ways to do this?"
    },
    {
        "role": "assistant",
        "content": "In a Django project with multiple apps that have their own templates, you can efficiently extend a common `base.html` template without duplicating it across apps by utilizing Django's template loading mechanism. Here's a step-by-step guide on how to achieve this:\n\n1. **Project Structure**: Ensure your project directory is organized properly. You might have something like this:\n\n   ```\n   myproject/\n       \u251c\u2500\u2500 blog/\n       \u2502   \u251c\u2500\u2500 templates/\n       \u2502   \u2502   \u2514\u2500\u2500 blog/\n       \u2502   \u2502       \u2514\u2500\u2500 index.html\n       \u251c\u2500\u2500 polls/\n       \u2502   \u251c\u2500\u2500 templates/\n       \u2502   \u2502   \u2514\u2500\u2500 polls/\n       \u2502   \u2502       \u2514\u2500\u2500 index.html\n       \u251c\u2500\u2500 templates/\n       \u2502   \u2514\u2500\u2500 base.html\n       \u251c\u2500\u2500 manage.py\n       \u2514\u2500\u2500 myproject/\n   ```\n\n2. **Django Settings**: Ensure the `TEMPLATES` setting in your `settings.py` file includes the path to your project's `templates` directory. It should look something like this:\n\n   ```python\n   TEMPLATES = [\n       {\n           'BACKEND': 'django.template.backends.django.DjangoTemplates',\n           'DIRS': [os.path.join(BASE_DIR, 'templates')],\n           'APP_DIRS': True,\n           'OPTIONS': {\n               'context_processors': [\n                   'django.template.context_processors.debug',\n                   'django.template.context_processors.request',\n                   'django.contrib.auth.context_processors.auth',\n                   'django.contrib.messages.context_processors.messages',\n               ],\n           },\n       },\n   ]\n   ```\n\n3. **Extending the Base Template**: In your app-specific templates (`index.html` in both `blog` and `polls`), extend the `base.html` template like this:\n\n   ```html\n   {% extends \"base.html\" %}\n\n   {% block content %}\n   <!-- Your app-specific content here -->\n   {% endblock %}\n   ```\n\n4. **Base Template**: Your `base.html` should define blocks that can be overridden by the app-specific templates. For example:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>{% block title %}My Site{% endblock %}</title>\n   </head>\n   <body>\n       <header>\n           <h1>Welcome to My Site</h1>\n       </header>\n       <main>\n           {% block content %}\n           {% endblock %}\n       </main>\n       <footer>\n           <p>&copy; 2023 My Site</p>\n       </footer>\n   </body>\n   </html>\n   ```\n\n5. **Template Resolution**: Since you've set up your `DIRS` and `APP_DIRS` correctly, Django will look for `base.html` in the project's `templates` directory, allowing both the `blog` and `polls` apps to extend it without duplication.\n\nBy following these steps, you can maintain a single `base.html` file and have it extendable by multiple apps, keeping your templates DRY (Don't Repeat Yourself) and easier to maintain."
    }
]