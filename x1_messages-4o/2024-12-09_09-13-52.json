[
    {
        "role": "user",
        "content": "What is an algorithm that can search an array of size n for a given value and has a time complexity of O(log n)?"
    },
    {
        "role": "assistant",
        "content": "An algorithm with a time complexity of \\( O(\\log n) \\) that can search an array for a given value is the **Binary Search** algorithm. However, it requires that the array be sorted before performing the search. Here's how the binary search algorithm works:\n\n1. **Initialize**: Set two pointers, `low` and `high`, to the beginning and end of the array respectively.\n\n2. **Iterate**: While `low` is less than or equal to `high`:\n   - Calculate the middle index: `mid = low + (high - low) / 2`.\n   - Compare the target value with the middle element of the array.\n   - If the middle element is equal to the target value, return the middle index.\n   - If the target value is less than the middle element, adjust the `high` pointer to `mid - 1` (search in the left half).\n   - If the target value is greater than the middle element, adjust the `low` pointer to `mid + 1` (search in the right half).\n\n3. **Return**: If the element is not found, return an indication that the element is not in the array (e.g., return -1).\n\nThis algorithm effectively reduces the search space by half in each iteration, leading to a logarithmic time complexity of \\( O(\\log n) \\)."
    }
]