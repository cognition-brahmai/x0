[
    {
        "role": "user",
        "content": "In my Django 1.2 project, I am trying to pre-populate a field in a ModelForm, but my new value seems to be ignored. The snippet of code I am using is as follows:\n\n```python\nclass ArtefactForm(ModelForm):\n    material = CharField(widget=AutoCompleteWidget('material', force_selection=False))\n\n    def __init__(self, *args, **kwargs):\n        super(ArtefactForm, self).__init__(*args, **kwargs)\n        self.fields['material'].initial = 'Test'\n```\n\nI've also tried using `self.base_fields`, but to no effect. The form always displays the database value instead of the one I'm trying to set. How can I override the initial value in the ModelForm successfully?"
    },
    {
        "role": "assistant",
        "content": "In Django, when you create a form from a model instance, the form fields are initialized with the instance's current values from the database. This is why your attempt to set an initial value in the `__init__` method is being ignored when the form is bound to an instance.\n\nTo successfully override the initial value for the `material` field, you need to address the form's behavior when it is instantiated with instance data. Here's how you can do it:\n\n1. **Check if the form is bound to an instance**: Override the initial value only if the form is not bound to a specific instance.\n\n2. **Modify the initial data before the form is instantiated**: You can set the initial data when you instantiate the form in your view.\n\nHere's how you can achieve this:\n\n### Option 1: Modify in the View\n\nIn your view, when you instantiate the form, you can set the `initial` parameter for the field you want to override:\n\n```python\ndef my_view(request, pk):\n    artefact = Artefact.objects.get(pk=pk)\n\n    if request.method == 'POST':\n        form = ArtefactForm(request.POST, instance=artefact)\n    else:\n        form = ArtefactForm(instance=artefact, initial={'material': 'Test'})\n\n    if form.is_valid():\n        form.save()\n\n    return render(request, 'my_template.html', {'form': form})\n```\n\n### Option 2: Modify in the Form\n\nIf you want to encapsulate this logic within the form, you can check if the form is being initialized with an instance and only set the initial value if it is not:\n\n```python\nclass ArtefactForm(ModelForm):\n    material = CharField(widget=AutoCompleteWidget('material', force_selection=False))\n\n    def __init__(self, *args, **kwargs):\n        super(ArtefactForm, self).__init__(*args, **kwargs)\n        \n        # Only set the initial value if the form is not bound to an instance\n        if not self.instance.pk:\n            self.fields['material'].initial = 'Test'\n```\n\nHowever, since you're dealing with an existing instance and want to override it irrespective of the database value, using the `initial` parameter when instantiating the form in the view (Option 1) is more straightforward and explicit."
    }
]