[
    {
        "role": "user",
        "content": "How can I test email sending in my Django application without relying on external systems such as Gmail? I want to verify the correctness of the email content but I'm not interested in testing the actual email service. Is there a way I can store the emails locally in a folder as they are sent?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can test email sending in your Django application without relying on external systems by using the `django.core.mail.backends.filebased.EmailBackend`. This email backend allows you to store emails as files on your local filesystem, which is useful for testing purposes as you can verify the email content without actually sending them through an email service.\n\nHere's how you can set it up:\n\n1. **Update your Django settings**: In your Django project's settings file (`settings.py`), configure the email backend to use the file-based backend and specify the directory where you want to save the email files. For example:\n\n   ```python\n   EMAIL_BACKEND = 'django.core.mail.backends.filebased.EmailBackend'\n   EMAIL_FILE_PATH = '/path/to/email_directory'  # Change this to your desired directory\n   ```\n\n   Make sure that the directory specified by `EMAIL_FILE_PATH` exists and is writable by your application.\n\n2. **Send emails as usual**: In your Django application, you can continue using Django's email sending functions as you normally would. For instance, using `send_mail()`:\n\n   ```python\n   from django.core.mail import send_mail\n\n   send_mail(\n       'Subject here',\n       'Here is the message.',\n       'from@example.com',\n       ['to@example.com'],\n       fail_silently=False,\n   )\n   ```\n\n3. **Check the email files**: After sending an email, you can navigate to the directory specified by `EMAIL_FILE_PATH` to find the email stored as a file. Each email will be saved in a separate file with a unique name, and you can open these files to verify the email content, including the subject, body, and recipients.\n\nThis approach allows you to effectively test the email functionality of your Django application without needing to interact with external email services, ensuring that your email generation logic is working correctly."
    }
]