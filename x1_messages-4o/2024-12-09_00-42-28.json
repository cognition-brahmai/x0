[
    {
        "role": "user",
        "content": "How can I convert a string with a UTC offset to a datetime object in Python? I have a string (\"Fri, 09 Apr 2010 14:10:50 +0000\") which I'm trying to convert to a datetime object using the following code:\n\n```python\nfrom datetime import datetime\n\nstr = 'Fri, 09 Apr 2010 14:10:50 +0000'\nfmt = '%a, %d %b %Y %H:%M:%S %z'\ndatetime.strptime(str, fmt)\n```\nHowever, I'm encountering the following error: \n```python\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/usr/lib64/python2.6/_strptime.py\", line 317, in _strptime\n    (bad_directive, format))\nValueError: 'z' is a bad directive in format '%a, %d %b %Y %H:%M:%S %z'\n```\nI've noticed that the code works without a problem if I remove the UTC offset from the string:\n```python\nfrom datetime import datetime\n\nstr = 'Fri, 09 Apr 2010 14:10:50'\nfmt = '%a, %d %b %Y %H:%M:%S'\ndatetime.strptime(str, fmt)\n```\nThis returns: `datetime.datetime(2010, 4, 9, 14, 10, 50)`. But I need a solution that works without changing or slicing the original string with the UTC offset."
    },
    {
        "role": "assistant",
        "content": "The issue you're facing is because the `%z` directive for parsing UTC offsets in `datetime.strptime()` is not supported in Python 2.6, which is what your error message indicates you are using. The `%z` directive was added in later versions of Python (Python 3.2 and above).\n\nTo handle this in Python 2.6, you can use the `pytz` library to manually handle the timezone offset. Here's how you can do it:\n\n1. Install `pytz` if you haven't already. You can do this via pip:\n\n   ```bash\n   pip install pytz\n   ```\n\n2. Use `pytz` in combination with `datetime` to parse the string and handle the timezone:\n\n```python\nfrom datetime import datetime\nimport pytz\n\nstr = 'Fri, 09 Apr 2010 14:10:50 +0000'\nfmt = '%a, %d %b %Y %H:%M:%S %z'\n\n# Temporarily remove the offset for parsing\ndt_naive = datetime.strptime(str[:-6], '%a, %d %b %Y %H:%M:%S')\n\n# Extract the offset part and convert it into a timezone\noffset_str = str[-5:]\nhours_offset = int(offset_str[1:3])\nminutes_offset = int(offset_str[3:])\n\n# Calculate the total offset in minutes\ntotal_offset = hours_offset * 60 + minutes_offset\nif offset_str[0] == '-':\n    total_offset = -total_offset\n\n# Create a timezone object with the offset\ntz = pytz.FixedOffset(total_offset)\n\n# Localize the naive datetime with the timezone\ndt_aware = tz.localize(dt_naive)\n\nprint(dt_aware)\n```\n\nThis code manually extracts the timezone offset from the string and uses `pytz.FixedOffset` to localize the naive datetime object, producing a timezone-aware datetime object."
    }
]