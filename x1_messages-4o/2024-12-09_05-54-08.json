[
    {
        "role": "user",
        "content": "I am working with CSV files where several of the columns contain simple JSON objects (several key-value pairs) while other columns are just normal. I am trying to parse and split one of these columns, namely 'stats', into additional columns after reading the file into a dataframe using pandas. Here is an example of my data:\n\n```\nname,dob,stats\njohn smith,1/1/1980,\"{\"\"eye_color\"\": \"\"brown\"\", \"\"height\"\": 160, \"\"weight\"\": 76}\"\ndave jones,2/2/1981,\"{\"\"eye_color\"\": \"\"blue\"\", \"\"height\"\": 170, \"\"weight\"\": 85}\"\nbob roberts,3/3/1982,\"{\"\"eye_color\"\": \"\"green\"\", \"\"height\"\": 180, \"\"weight\"\": 94}\"\n```\n\nAfter using `df = pandas.read_csv('file.csv')`, what's the most efficient way to parse and split the 'stats' column into additional columns?\n\nThe solution I tried was:\n\n```\nimport json\nstdf = df['stats'].apply(json.loads)\nstlst = list(stdf)\nstjson = json.dumps(stlst)\ndf.join(pandas.read_json(stjson))\n```\n\nHowever, it seems a bit laborious as I will have to repeat this process for three columns on a regular basis. Is there a better way to achieve this?\n\nMy desired output is:\n\n```\n          name       dob eye_color  height  weight\n0   john smith  1/1/1980     brown     160      76\n1   dave jones  2/2/1981      blue     170      85\n2  bob roberts  3/3/1982     green     180      94\n```\n\nTo get to this output, I added these lines of code:\n\n```\ndf = df.join(pandas.read_json(stjson))\ndel(df['stats'])\n```"
    },
    {
        "role": "assistant",
        "content": "To efficiently parse and split the 'stats' column into additional columns in your DataFrame, you can use the `pandas.json_normalize()` function, which is specifically designed for flattening JSON objects into a DataFrame. Here's how you can achieve this in a more streamlined way:\n\n```python\nimport pandas as pd\nimport json\n\n# Sample data\ndata = {\n    \"name\": [\"john smith\", \"dave jones\", \"bob roberts\"],\n    \"dob\": [\"1/1/1980\", \"2/2/1981\", \"3/3/1982\"],\n    \"stats\": [\n        '{\"eye_color\": \"brown\", \"height\": 160, \"weight\": 76}',\n        '{\"eye_color\": \"blue\", \"height\": 170, \"weight\": 85}',\n        '{\"eye_color\": \"green\", \"height\": 180, \"weight\": 94}'\n    ]\n}\n\n# Create DataFrame\ndf = pd.DataFrame(data)\n\n# Parse 'stats' column and expand it\nstats_df = df['stats'].apply(json.loads).apply(pd.Series)\n\n# Join the expanded columns back to the original DataFrame\ndf = df.join(stats_df)\n\n# Drop the original 'stats' column\ndf.drop(columns=['stats'], inplace=True)\n\nprint(df)\n```\n\n### Explanation:\n1. **`apply(json.loads)`**: This converts each JSON string in the 'stats' column into a Python dictionary.\n2. **`apply(pd.Series)`**: This step transforms each dictionary into a Series, effectively creating separate columns for each key in the JSON object.\n3. **`join()`**: Combines the expanded columns with the original DataFrame.\n4. **`drop()`**: Removes the original 'stats' column from the DataFrame.\n\nThis method is efficient and leverages pandas' internal functions to handle JSON objects, making it easier to apply the same process to multiple columns if needed."
    }
]