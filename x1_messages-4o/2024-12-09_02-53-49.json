[
    {
        "role": "user",
        "content": "I have a time-series data that contains the daily orders count of the last two years and I am using Python's statsmodels library to predict future orders. However, my input data has additional columns that indicate if each day was a \"holiday\" and a day that the company has had a \"promotion\". How can I use this new type of input data in the model to understand the reason for outliers and also predict future orders while providing \"holiday\" and \"promotion_day\" information in Python? Here's the code I have been using:\n\n```python\nfit = statsmodels.api.tsa.statespace.SARIMAX(\n                  train.Count, order=(2, 1, 4),seasonal_order=(0,1,1,7)\n      ).fit()\n\ny_hat_avg['SARIMA'] = fit1.predict(\n                      start=\"2018-06-16\", end=\"2018-08-14\", dynamic=True\n                      )\n```\n\nI was thinking of using the predict method like this:\n\n```python\nfit1.predict('2018-08-29', holiday=True, is_promotion=False)\n# or\nfit1.predict(start=\"2018-08-20\", end=\"2018-08-25\", holiday=[0,0,0,1,1,0], is_promotion=[0,0,1,1,0,1])\n```\n\nBut I am unsure how to implement this."
    },
    {
        "role": "assistant",
        "content": "To incorporate additional features such as \"holiday\" and \"promotion\" information into your SARIMAX model, you can use exogenous variables (also known as `exog`). In the `statsmodels` library, the `SARIMAX` model can take an additional `exog` parameter for this purpose. Here's how you can modify your code to include these exogenous variables:\n\n1. **Prepare Your Data**: Ensure that your data includes the \"holiday\" and \"promotion\" information as separate columns. These should be binary (0 or 1) indicators for each day.\n\n2. **Fit the Model with Exogenous Variables**:\n   You need to pass the exogenous variables while fitting the model.\n\n```python\nimport statsmodels.api as sm\nimport pandas as pd\n\n# Assuming 'train' is your DataFrame with 'Count', 'holiday', and 'is_promotion' columns.\nexog_train = train[['holiday', 'is_promotion']]\n\n# Fit the SARIMAX model with exogenous variables\nfit = sm.tsa.statespace.SARIMAX(\n    train['Count'],\n    order=(2, 1, 4),\n    seasonal_order=(0, 1, 1, 7),\n    exog=exog_train\n).fit()\n```\n\n3. **Make Predictions with Exogenous Variables**:\n   When predicting, you also need to provide the exogenous variables for the forecast period.\n\n```python\n# Assuming you have a similar DataFrame 'forecast_exog' for the forecast period\nforecast_exog = pd.DataFrame({\n    'holiday': [0, 0, 0, 1, 1, 0],  # Example values for the forecast period\n    'is_promotion': [0, 0, 1, 1, 0, 1]\n}, index=pd.date_range(start='2018-08-20', periods=6))\n\n# Make predictions\ny_hat_avg = fit.predict(\n    start=\"2018-08-20\", \n    end=\"2018-08-25\", \n    exog=forecast_exog\n)\n```\n\n4. **Interpret the Results**:\n   Now, your model takes into account the effect of holidays and promotions while making predictions. You can analyze the coefficients of the exogenous variables to understand their impact on the order count.\n\nBy setting up your model this way, you can better understand the reasons for outliers and improve the accuracy of your forecasts by accounting for patterns associated with holidays and promotions."
    }
]