[
    {
        "role": "user",
        "content": "How can I determine the size of an image file using standard classes in Python 2.5, without using any external libraries like PIL (Python Image Library)? I am looking for a solution that supports common image formats, particularly JPG and PNG."
    },
    {
        "role": "assistant",
        "content": "In Python 2.5, you can determine the size of an image file such as JPG or PNG by manually reading and parsing the file's binary data. Below, I'll outline a way to achieve this for both JPG and PNG formats without relying on external libraries.\n\n### For JPG Files\nJPEG files have a specific structure that includes markers, one of which (`FFC0` or `FFC2`) indicates the start of the frame and contains the image dimensions.\n\n```python\ndef get_jpg_size(filename):\n    with open(filename, 'rb') as f:\n        f.seek(0)\n        byte = f.read(1)\n\n        while byte:\n            while byte != b'\\xFF':\n                byte = f.read(1)\n            while byte == b'\\xFF':\n                byte = f.read(1)\n\n            if byte in (b'\\xC0', b'\\xC2'):\n                f.read(3)\n                height, width = [ord(f.read(1)) << 8 | ord(f.read(1)) for _ in range(2)]\n                return width, height\n            else:\n                f.read(int.from_bytes(f.read(2), 'big') - 2)\n            byte = f.read(1)\n    return None\n\n# Example usage:\nfilename = 'example.jpg'\nprint(get_jpg_size(filename))\n```\n\n### For PNG Files\nPNG files have a header that starts with specific bytes, and the image dimensions are stored in the IHDR chunk.\n\n```python\ndef get_png_size(filename):\n    with open(filename, 'rb') as f:\n        f.seek(8)  # Skip the PNG file signature\n        while True:\n            length = int.from_bytes(f.read(4), 'big')\n            chunk_type = f.read(4)\n            if chunk_type == b'IHDR':\n                width = int.from_bytes(f.read(4), 'big')\n                height = int.from_bytes(f.read(4), 'big')\n                return width, height\n            f.read(length + 4)  # Skip the chunk data and CRC\n    return None\n\n# Example usage:\nfilename = 'example.png'\nprint(get_png_size(filename))\n```\n\n### Explanation\n- **JPG**: The code reads through the file to find the start of frame marker (`FFC0` or `FFC2`) and then extracts the height and width from the subsequent bytes.\n- **PNG**: The code skips the initial 8-byte signature and then reads chunks until it finds the `IHDR` chunk, which contains the width and height information.\n\nThis approach manually parses the binary data in the image files to extract dimensions, which is necessary when you cannot use external libraries in environments like Python 2.5."
    }
]