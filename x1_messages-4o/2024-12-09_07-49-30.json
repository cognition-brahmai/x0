[
    {
        "role": "user",
        "content": "I have an issue with FastAPI redirection for trailing slash. When I call an endpoint and a redirect occurs due to a missing trailing slash, the server responds with a redirect to an http link instead of https. For instance, when a request is made to https://.../notifications, I am redirected to http://...notifications/. I suspect that it's an app configuration issue rather than a server configuration issue. How can I resolve this issue?"
    },
    {
        "role": "assistant",
        "content": "The issue you're facing with FastAPI redirecting to `http` instead of `https` when automatically adding a trailing slash is often due to how the application is deployed and handled by the proxy server in front of FastAPI. This commonly occurs when FastAPI is behind a reverse proxy (like Nginx or a cloud provider's load balancer) that terminates the SSL connection. Here are some steps you can take to address this:\n\n1. **Use `Forwarded` or `X-Forwarded-Proto` Headers:**\n   Make sure your reverse proxy is correctly setting the `X-Forwarded-Proto` header to `https`. FastAPI and Starlette (the ASGI framework FastAPI is built on) can use this header to determine the original protocol used by the client.\n\n   For Nginx, you can set this header like so:\n   ```nginx\n   location / {\n       proxy_set_header X-Forwarded-Proto $scheme;\n       proxy_pass http://your_fastapi_app;\n   }\n   ```\n\n2. **Configure FastAPI to Trust Proxy Headers:**\n   FastAPI itself doesn't directly manage the headers, but you can configure the ASGI server (like Uvicorn or Hypercorn) to trust these headers by using the `--proxy-headers` option.\n\n   If you're using Uvicorn, you can start it with:\n   ```bash\n   uvicorn your_app:app --host 0.0.0.0 --port 8000 --proxy-headers\n   ```\n\n3. **Use Middleware to Force HTTPS:**\n   If you want to ensure that all requests are redirected to `https`, you can use middleware to enforce this:\n\n   ```python\n   from starlette.middleware.httpsredirect import HTTPSRedirectMiddleware\n   from fastapi import FastAPI\n\n   app = FastAPI()\n\n   # Add HTTPS Redirect Middleware\n   app.add_middleware(HTTPSRedirectMiddleware)\n\n   @app.get(\"/notifications/\")\n   async def read_notifications():\n       return {\"message\": \"This is the notifications endpoint\"}\n   ```\n\n4. **Check Your Proxy/Load Balancer Configuration:**\n   Ensure that your proxy or load balancer is properly configured to handle SSL and is forwarding the correct headers to your FastAPI application.\n\n5. **Environment Variable in Cloud Providers:**\n   If you're deploying on a cloud provider, make sure to check if there's an environment variable or a setting that controls how the protocol is determined.\n\nBy implementing these configurations, your redirects should retain the `https` protocol as expected."
    }
]