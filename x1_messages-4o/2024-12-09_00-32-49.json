[
    {
        "role": "user",
        "content": "Can someone provide a real-life, practical example of Polymorphism? The general explanation provided by my professor doesn't resonate with me much, it's about the operator '+' and how 'a + b = c' or '2 + 2 = 4' exemplifies polymorphism. I've gone through this explanation repeatedly in books, but it's still vague for me. I need a real world example with code, something relatable. Here's a simple code example related to a 'Person' and a 'Student'. Could someone extend it to explain the concept of polymorphism?\n\nHere is the code:\n\n```python\nclass Person(object):\n    def __init__(self, name):\n        self.name = name\n\nclass Student(Person):\n    def __init__(self, name, age):\n        super(Student, self).__init__(name)\n        self.age = age\n```"
    },
    {
        "role": "assistant",
        "content": "Polymorphism in programming refers to the ability of different objects to respond to the same method call in different ways. It's a core concept in object-oriented programming that allows for flexible and reusable code. Let's extend your example to illustrate polymorphism in a practical and relatable way.\n\nConsider a scenario where you have a `Person`, `Student`, and `Teacher` class. Both `Student` and `Teacher` are subclasses of `Person`. We will add a method called `get_details()` to each class, which will demonstrate polymorphism. Each subclass will implement this method differently, based on its specific attributes.\n\nHere's the extended code with polymorphism:\n\n```python\nclass Person(object):\n    def __init__(self, name):\n        self.name = name\n\n    def get_details(self):\n        return f\"Name: {self.name}\"\n\nclass Student(Person):\n    def __init__(self, name, age, student_id):\n        super(Student, self).__init__(name)\n        self.age = age\n        self.student_id = student_id\n\n    def get_details(self):\n        return f\"Student Name: {self.name}, Age: {self.age}, Student ID: {self.student_id}\"\n\nclass Teacher(Person):\n    def __init__(self, name, subject):\n        super(Teacher, self).__init__(name)\n        self.subject = subject\n\n    def get_details(self):\n        return f\"Teacher Name: {self.name}, Subject: {self.subject}\"\n\n# Example usage\npeople = [\n    Student(\"Alice\", 20, \"S123\"),\n    Teacher(\"Bob\", \"Math\"),\n    Person(\"Charlie\")\n]\n\nfor person in people:\n    print(person.get_details())\n```\n\n### Explanation:\n\n- **Person Class**: A base class with a `get_details()` method that returns the name.\n- **Student Class**: Inherits from `Person` and overrides `get_details()` to include `age` and `student_id`.\n- **Teacher Class**: Also inherits from `Person` and overrides `get_details()` to include `subject`.\n\n### Polymorphism in Action:\n\n- When you iterate over the `people` list and call `get_details()`, each object responds according to its class type. The `Student` object returns details including age and student ID, while the `Teacher` object returns details including the subject they teach.\n- This demonstrates polymorphism because the same method (`get_details()`) is implemented differently across different classes, allowing for dynamic method resolution.\n\nThis practical example shows how polymorphism allows you to write code that can handle objects of different types in a uniform way, making your code more flexible and easier to maintain."
    }
]