[
    {
        "role": "user",
        "content": "I am using Django Rest Framework and have a ViewSet structured to list users' data. My code is currently as follows:\n\n```python\nclass Foo(viewsets.ViewSet):\n\n    def list(self, request):\n        queryset = User.objects.all()\n        serializer = UserSerializer(queryset, many=True)\n        return Response(serializer.data)\n```\n\nI want to add pagination similar to the default pagination for ModelViewSet which is:\n\n```python\n{\n    \"count\": 55,\n    \"next\": \"http://myUrl/?page=2\",\n    \"previous\": null,\n    \"results\": [{...},{...},...,{...}]\n}\n```\n\nThe official Django Rest Framework documentation states that: \"Pagination is only performed automatically if you're using the generic views or viewsets.\" However, my result set is not getting paginated at all. How can I paginate it?"
    },
    {
        "role": "assistant",
        "content": "To add pagination to your `ViewSet` using Django Rest Framework (DRF), you need to manually handle pagination since you're using a custom `ViewSet`. Here's how you can achieve it:\n\n1. **Set up Pagination in Settings:**\n\n   First, ensure you have pagination settings defined in your `settings.py` file. For example, you can use `PageNumberPagination`:\n\n   ```python\n   REST_FRAMEWORK = {\n       'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',\n       'PAGE_SIZE': 10,  # Adjust the page size as needed\n   }\n   ```\n\n2. **Manually Apply Pagination:**\n\n   In your `list` method, you need to manually apply pagination. Here's how you can modify your existing code to include pagination:\n\n   ```python\n   from rest_framework.pagination import PageNumberPagination\n   from rest_framework.response import Response\n\n   class Foo(viewsets.ViewSet):\n\n       def list(self, request):\n           queryset = User.objects.all()\n\n           # Instantiate the paginator\n           paginator = PageNumberPagination()\n           paginator.page_size = 10  # You can also set this to a different number or use the default from settings\n\n           # Paginate the queryset\n           paginated_queryset = paginator.paginate_queryset(queryset, request)\n\n           # Serialize the paginated queryset\n           serializer = UserSerializer(paginated_queryset, many=True)\n\n           # Return the paginated response\n           return paginator.get_paginated_response(serializer.data)\n   ```\n\n   In this code:\n\n   - We instantiate `PageNumberPagination` and optionally set the `page_size`.\n   - Use `paginator.paginate_queryset` to paginate the `queryset` based on the request.\n   - Serialize the paginated queryset.\n   - Finally, use `paginator.get_paginated_response` to return a response that includes pagination information like `count`, `next`, `previous`, and the serialized `results`.\n\nBy following these steps, you should be able to achieve pagination similar to what is provided by default in `ModelViewSet`. Adjust the `page_size` as needed to fit your application's requirements."
    }
]