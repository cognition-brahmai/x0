[
    {
        "role": "user",
        "content": "I am working on generating a large document where many of the figures and sections are programmatically generated using iPython. However, for this to work, I need to write a function that can write other iPython-Code-Blocks. Is there a way to generate iPython Cells through iPython? Here is a piece of pseudocode to give an idea of what I'm trying to do:\n\n```python\nfor variable in list:\n    image = make_image(variable)\n    write_iPython_Markdown_Cell(variable)\n    write_iPython_Image_cell(image)\n```\n\nIs this possible? Or should I stick to a classic solution like a templating library such as Jinja?"
    },
    {
        "role": "assistant",
        "content": "Yes, it is possible to generate iPython cells programmatically within an iPython environment, such as Jupyter Notebook. You can achieve this by using the `IPython.display` module to dynamically create and display content. However, creating new cells programmatically within an existing notebook is a bit more involved and typically requires external tools or extensions. \n\nHere's a basic approach using `IPython.display` to display content dynamically:\n\n1. **Using IPython display to output content**: This doesn't actually create new cells but allows you to display content dynamically in the output of a cell.\n\n    ```python\n    from IPython.display import display, Markdown, Image\n    import matplotlib.pyplot as plt\n    import io\n\n    def make_image(variable):\n        # Example: Create a simple plot\n        plt.figure()\n        plt.plot([1, 2, 3], [variable, variable**2, variable**3])\n        buf = io.BytesIO()\n        plt.savefig(buf, format='png')\n        buf.seek(0)\n        return buf\n\n    for variable in [1, 2, 3]:\n        image = make_image(variable)\n        display(Markdown(f\"## Analysis for variable {variable}\"))\n        display(Image(data=image.read()))\n    ```\n\n2. **Using Jupyter Notebook extensions or APIs**: If you want to programmatically add new cells to a notebook, you might need to use Jupyter Notebook server extensions or manipulate the notebook file (`.ipynb`) directly. However, this can be complex and is generally not recommended unless necessary.\n\n3. **Using Templating libraries**: If you are generating a static document, such as a report, using a templating library like Jinja to generate the notebook content as a `.ipynb` file might be more straightforward. You can write a script to generate a notebook file with the desired structure and content.\n\nHere\u2019s a simple example of how you might use Jinja2 to create a `.ipynb` file:\n\n```python\nfrom jinja2 import Template\nimport json\n\nnotebook_template = \"\"\"\n{\n \"cells\": [\n  {% for variable in variables %}\n  {\n   \"cell_type\": \"markdown\",\n   \"metadata\": {},\n   \"source\": [\n    \"## Analysis for variable {{ variable }}\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": [\n    \"image = make_image({{ variable }})\\\\n\",\n    \"display(image)\"\n   ]\n  }{% if not loop.last %},{% endif %}\n  {% endfor %}\n ],\n \"metadata\": {},\n \"nbformat\": 4,\n \"nbformat_minor\": 2\n}\n\"\"\"\n\nvariables = [1, 2, 3]\ntemplate = Template(notebook_template)\nrendered_notebook = template.render(variables=variables)\n\nwith open('generated_notebook.ipynb', 'w') as f:\n    f.write(rendered_notebook)\n```\n\nThis approach allows you to fully automate the generation of notebook content, including code execution if needed, by creating a notebook file programmatically."
    }
]