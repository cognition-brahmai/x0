[
    {
        "role": "user",
        "content": "Is there a way to import a Python module into a Jinja template so I can use its functions? I have a `format.py` file that contains methods for formatting dates and times. I am trying to use the 'timesince' function from this file in a Jinja macro like this:\n\n```jinja\n{% from 'dates/format.py' import timesince %}\n\n{% macro time(mytime) %}\n<a title=\"{{ mytime }}\">{{ timesince(mytime) }}</a>\n{% endmacro %}\n```\n\nHowever, I am encountering an error saying: \n```jinja\nUndefinedError: the template 'dates/format.py' (imported on line 2 in 'dates/macros.html') does not export the requested name 'timesince'\n```\nAs `format.py` is not a template, this approach doesn't work. Is there a different way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Jinja templates are designed to be used in a secure and sandboxed environment, which means they can't directly import Python modules like you might do in a regular Python script. However, you can achieve the functionality you want by using a different approach. Here\u2019s how you can utilize functions from a Python module within a Jinja template:\n\n### Steps to Use a Python Function in a Jinja Template:\n\n1. **Define Your Python Function:**\n   Ensure your `format.py` file contains the `timesince` function. For example:\n\n   ```python\n   # format.py\n   from datetime import datetime\n\n   def timesince(mytime):\n       now = datetime.now()\n       diff = now - mytime\n       return f\"{diff.days} days ago\"\n   ```\n\n2. **Make the Function Available to the Template:**\n   You need to pass the function to the Jinja environment so it can be used within templates. This is typically done in the part of your code where you render the template.\n\n   ```python\n   from jinja2 import Environment, FileSystemLoader\n   import format  # Ensure this is your `format.py` module\n\n   # Set up the Jinja environment\n   env = Environment(loader=FileSystemLoader('templates'))\n\n   # Get your template\n   template = env.get_template('your_template.html')\n\n   # Render the template with the function passed in\n   rendered_template = template.render(timesince=format.timesince)\n   ```\n\n3. **Use the Function in the Template:**\n   Now that the `timesince` function is passed to the template, you can use it just like any other template variable.\n\n   ```jinja\n   {%- macro time(mytime) -%}\n   <a title=\"{{ mytime }}\">{{ timesince(mytime) }}</a>\n   {%- endmacro -%}\n   ```\n\n### Explanation:\n- **Passing Functions to Templates:** By passing the `timesince` function to the template context, you make the function available to be called within the template.\n- **Sandboxed Environment:** Jinja templates run in a restricted environment for security reasons, which is why you can't directly import Python modules in the template itself.\n\nThis method ensures that your Python logic and Jinja templates remain cleanly separated while still allowing you to leverage Python code within your templates."
    }
]