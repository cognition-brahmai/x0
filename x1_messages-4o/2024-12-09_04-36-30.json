[
    {
        "role": "user",
        "content": "I am looking to write a function that can generate combinations, similar to itertools.combinations() in Python. Can you guide me on where I could find its source code for reference?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The `itertools.combinations()` function is a part of Python's standard library, specifically within the `itertools` module, which is written in C for performance reasons. However, you can find its implementation on the official Python repository on GitHub. Here is a simple Python implementation of how combinations can be generated, to give you an idea:\n\n```python\ndef combinations(iterable, r):\n    # Convert the input iterable to a tuple\n    pool = tuple(iterable)\n    n = len(pool)\n    if r > n:\n        return\n    indices = list(range(r))\n    yield tuple(pool[i] for i in indices)\n    while True:\n        for i in reversed(range(r)):\n            if indices[i] != i + n - r:\n                break\n        else:\n            return\n        indices[i] += 1\n        for j in range(i + 1, r):\n            indices[j] = indices[j - 1] + 1\n        yield tuple(pool[i] for i in indices)\n```\n\nThis code mimics the behavior of `itertools.combinations()`. It generates all possible combinations of a specified length `r` from the input `iterable`. The key idea is to maintain a list of indices representing the current combination, and then systematically update this list to produce the next combination.\n\nIf you want to dive into the actual source code of `itertools`, you can check the official CPython repository on GitHub:\n- [CPython GitHub Repository](https://github.com/python/cpython)\n\nNavigate to the `Modules/itertoolsmodule.c` file, where you'll find the C implementation of the `itertools` functions, including `combinations`."
    }
]