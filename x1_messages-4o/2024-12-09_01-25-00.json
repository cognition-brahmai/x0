[
    {
        "role": "user",
        "content": "Is there a Python library available for caching? I am looking for something with a simple dict-like interface where I can set keys and their expiration and then retrieve them back cached. I need functionality similar to what is described by this code: \n\n```python\ncache.get(myfunction, duration=300)\n```\nThis should return the item from the cache if it exists or call the function and store it if it doesn't or has expired. Can anyone suggest a library that can provide this functionality?"
    },
    {
        "role": "assistant",
        "content": "Yes, there are several Python libraries available for caching that provide a simple dict-like interface and support key expiration. Here are a couple of popular choices:\n\n1. **Cachetools**: This is a simple and efficient caching library that provides various cache algorithms and supports time-based expiration. You can use the `TTLCache` for setting an expiration time for each entry.\n\n   ```python\n   from cachetools import cached, TTLCache\n\n   # Create a cache with a max size and a TTL of 300 seconds\n   cache = TTLCache(maxsize=100, ttl=300)\n\n   @cached(cache)\n   def myfunction():\n       # Your function logic here\n       return \"some_result\"\n   ```\n\n2. **DiskCache**: This library provides a persistent cache with a dictionary-like interface and supports expiration times. It can cache data to disk, which is useful if you need to persist the cache across program runs.\n\n   ```python\n   import diskcache\n\n   cache = diskcache.Cache('cache_directory')\n\n   @cache.memoize(expire=300)\n   def myfunction():\n       # Your function logic here\n       return \"some_result\"\n   ```\n\n3. **ExpiringDict**: This is a lightweight library that provides a dictionary with expiring keys.\n\n   ```python\n   from expiringdict import ExpiringDict\n\n   # Create an expiring dict with a max length and an expiration time\n   cache = ExpiringDict(max_len=100, max_age_seconds=300)\n\n   def myfunction():\n       # Your function logic here\n       return \"some_result\"\n\n   # Example usage\n   key = 'result'\n   if key not in cache:\n       cache[key] = myfunction()\n   result = cache[key]\n   ```\n\nEach of these libraries can be installed via pip, and they offer straightforward APIs for integrating caching into your Python application. Choose the one that best fits your use case in terms of features and persistence needs."
    }
]