[
    {
        "role": "user",
        "content": "How can I select objects based on the value of a variable in the object using jq? I have a JSON file with the following structure:\n\n```json\n{\n    \"FOO\": {\n        \"name\": \"Donald\",\n        \"location\": \"Stockholm\"\n    },\n    \"BAR\": {\n        \"name\": \"Walt\",\n        \"location\": \"Stockholm\"\n    },\n    \"BAZ\": {\n        \"name\": \"Jack\",\n        \"location\": \"Whereever\"\n    }\n}\n```\n\nI am currently using jq and I would like to extract the \"name\" elements of the objects where the 'location' is 'Stockholm'. I am able to obtain all the names with the following command:\n\n```bash\ncat json | jq .[] | jq .\"name\"\n\"Jack\"\n\"Walt\"\n\"Donald\"\n```\n\nHowever, I am struggling to find a way to print only those objects that have a specific sub key value (in this case: \"location\" : \"Stockholm\")."
    },
    {
        "role": "assistant",
        "content": "To filter objects based on a specific sub-key value using `jq`, you can use the `select` function. In your case, you want to extract the \"name\" elements where the \"location\" is \"Stockholm\". You can achieve this with the following command:\n\n```bash\njq 'to_entries[] | select(.value.location == \"Stockholm\") | .value.name' json\n```\n\nHere's a breakdown of what this command does:\n\n1. `to_entries[]`: Converts the JSON object into an array of key-value pairs, so you can iterate over them.\n2. `select(.value.location == \"Stockholm\")`: Filters entries where the \"location\" key has the value \"Stockholm\".\n3. `.value.name`: Extracts the \"name\" field from the filtered entries.\n\nThis will give you the desired output:\n\n```json\n\"Donald\"\n\"Walt\"\n```\n\nThis command assumes that your JSON data is stored in a file named `json`. If you're using a different filename, make sure to replace `json` with the appropriate filename."
    }
]