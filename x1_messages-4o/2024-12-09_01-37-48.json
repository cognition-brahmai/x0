[
    {
        "role": "user",
        "content": "How can I handle extra arguments and keyword arguments for a Jinja2 macro? I tried the following code:\n\n```jinja\n{% macro example_1(one, two, **kwargs) %}\n    do macro stuff\n{% endmacro %}\n```\n\nBut this results in a `TemplateSyntaxError`:\n\n```\njinja2.exceptions.TemplateSyntaxError\n\nTemplateSyntaxError: expected token 'name', got '**'\n```\n\nThe Jinja2 documentation mentions \"kwargs\" as a special variable for storing all unconsumed keyword arguments. However, when I try to pass extra keyword arguments to a macro like this:\n\n```jinja\n{% macro example_2(one, two) %}\n    do macro stuff\n{% endmacro %}\n\n{{ example_2(one, two, test='test') }}\n```\n\nI get a `TypeError`:\n\n```\nTypeError: macro 'example_2' takes no keyword keyword argument 'test'\n```\n\nI am not sure how to correctly use *args and **kwargs in Jinja2 macros. Could you please provide some guidance?"
    },
    {
        "role": "assistant",
        "content": "Jinja2 macros don't support the use of `*args` and `**kwargs` in the same way Python functions do. Instead, Jinja2 provides a different mechanism to handle additional keyword arguments by using the `caller` and `kwargs` variables within the macro.\n\nHere\u2019s how you can handle additional keyword arguments in a Jinja2 macro:\n\n1. **Passing Extra Keyword Arguments:**\n   You can pass extra keyword arguments to the macro by using the `kwargs` variable, which is available inside the macro to access all the extra keyword arguments passed to it.\n\n2. **Using `caller` for Dynamic Content:**\n   If you need more dynamic content, you can use the `caller` feature, which allows you to pass a block of content to the macro.\n\nHere's how you can define and use a macro that accepts additional keyword arguments:\n\n```jinja\n{% macro example_3(one, two, **kwargs) %}\n    {{ one }} - {{ two }}\n    {% for key, value in kwargs.items() %}\n        {{ key }}: {{ value }}\n    {% endfor %}\n{% endmacro %}\n```\n\nAnd then, you can call this macro with additional keyword arguments:\n\n```jinja\n{{ example_3('value1', 'value2', test='test', extra='extra_value') }}\n```\n\nThis will output:\n\n```\nvalue1 - value2\ntest: test\nextra: extra_value\n```\n\nNote that when defining the macro, you don't explicitly use `**kwargs` like in Python. Instead, you directly access `kwargs` inside the macro. This approach allows you to iterate over the extra keyword arguments using `kwargs.items()` and handle them as needed.\n\nRemember that Jinja2 macros are more limited than Python functions, so you might need to adjust your logic to fit within these constraints."
    }
]