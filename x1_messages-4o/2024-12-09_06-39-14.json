[
    {
        "role": "user",
        "content": "I am developing a website using Flask and I have noticed a strange behavior. When I run Flask using the file provided, every time I start the server or it auto-restarts due to file updates, the print line is displayed twice. Here is the code and output:\n\nCode:\n```\n#!/usr/bin/env python\nfrom datetime import datetime\nfrom app import app\nimport config\n\nif __name__ == '__main__':\n    print('################### Restarting @', datetime.utcnow(), '###################')\n    app.run(port=4004, debug=config.DEBUG, host='0.0.0.0')\n```\n\nOutput:\n```\n################### Restarting @ 2014-08-26 10:51:49.167062 ###################\n################### Restarting @ 2014-08-26 10:51:49.607096 ###################\n```\n\nThis isn't causing any issues with the functionality, but I'm curious as to why this is happening. Any ideas?"
    },
    {
        "role": "assistant",
        "content": "This behavior is due to how Flask's development server handles code reloading. When you run a Flask application in debug mode, Flask uses a reloader to automatically restart the server whenever it detects changes in your code. This is extremely helpful during development because it means you don't have to manually restart your server every time you make a change.\n\nHere's what's happening in your case:\n\n1. **Initial Start:** When you initially start your Flask application, the `__main__` block is executed, which includes your `print` statement.\n\n2. **Reloader Start:** If the `debug` mode is enabled, Flask's built-in reloader kicks in. The reloader runs your script in a separate process to monitor for changes. As part of its initialization, it runs the `__main__` block again, which leads to the `print` statement being executed a second time.\n\nThis is why you see the print statement twice in the console output. The first line comes from the initial run, and the second one from the reloader.\n\nYou can avoid this double print by checking if the code is being executed by the reloader or not. Flask sets the `WERKZEUG_RUN_MAIN` environment variable to `'true'` when it starts the reloader. You can modify your code to print the message only in the reloader process like this:\n\n```python\nimport os\nfrom datetime import datetime\nfrom app import app\nimport config\n\nif __name__ == '__main__':\n    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true':\n        print('################### Restarting @', datetime.utcnow(), '###################')\n    app.run(port=4004, debug=config.DEBUG, host='0.0.0.0')\n```\n\nWith this change, the message will only be printed once, during the actual reloader process."
    }
]