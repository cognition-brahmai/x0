[
    {
        "role": "user",
        "content": "I am currently generating a legend with matplotlib in Python. I have different plots based on a condition on variable 't'. For example, for values t=25, t=50 and other, I plot graphs with different colors. However, this results in duplication of information in the legend. Is there a way I can customize the legend? Ideally, I want different colored lines corresponding to time 't' and a single entry each for my analytical solution and the results of my simulation.\n\nHere is my current code:\n\n```python\nif t==25:\n    l1,l2 = ax2.plot(x320,vTemp320,'or',x320,vAnaTemp320,'-r')\nelif t==50:\n    l3,l4 = ax2.plot(x320,vTemp320,'ob',x320,vAnaTemp320,'-b')\nelse:\n    l5,l6 = ax2.plot(x320,vTemp320,'og',x320,vAnaTemp320,'-g')\nplt.legend((l1,l2,l3,l4,l5,l6), ('t=25 Simulation', 't=25 Analytical','t=50 Simulation', 't=50 Analytical','t=500 Simulation', 't=500 Analytical'),\n   bbox_to_anchor=(-.25, 1), loc=2, borderaxespad=0.,prop={'size':12})\n```\n\nHow can I achieve this kind of customization in matplotlib?"
    },
    {
        "role": "assistant",
        "content": "To customize the legend in your matplotlib plot to avoid duplication and achieve a cleaner look, you can create custom legend handles. Instead of passing all individual line objects to the legend, you can manually specify the labels you want to appear in the legend.\n\nHere's how you can modify your code to achieve this:\n\n```python\n# Initialize lists to store the plot handles for simulation and analytical solutions\nsim_handles = []\nana_handles = []\n\n# Plot based on the condition of 't' and store the handles\nif t == 25:\n    sim_handle, ana_handle = ax2.plot(x320, vTemp320, 'or', x320, vAnaTemp320, '-r')\n    sim_handles.append(sim_handle)\n    ana_handles.append(ana_handle)\nelif t == 50:\n    sim_handle, ana_handle = ax2.plot(x320, vTemp320, 'ob', x320, vAnaTemp320, '-b')\n    sim_handles.append(sim_handle)\n    ana_handles.append(ana_handle)\nelse:\n    sim_handle, ana_handle = ax2.plot(x320, vTemp320, 'og', x320, vAnaTemp320, '-g')\n    sim_handles.append(sim_handle)\n    ana_handles.append(ana_handle)\n\n# Create custom legend handles\ncustom_lines = [\n    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='r', markersize=8, label='t=25 Simulation'),\n    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='b', markersize=8, label='t=50 Simulation'),\n    plt.Line2D([0], [0], marker='o', color='w', markerfacecolor='g', markersize=8, label='t=500 Simulation'),\n    plt.Line2D([0], [0], color='k', lw=2, label='Analytical Solution')  # Use a generic color for the analytical solution\n]\n\n# Add the legend with custom handles\nax2.legend(handles=custom_lines, loc='upper left', bbox_to_anchor=(-.25, 1), borderaxespad=0., prop={'size': 12})\n```\n\n### Explanation:\n\n- **Custom Legend Handles:** We create custom legend handles using `plt.Line2D`. The `marker` and `color` attributes are used to create a representative line for each category (Simulation and Analytical Solution).\n\n- **Appending Handles:** We append the plot handles to `sim_handles` and `ana_handles` lists, which helps in keeping track of the plots made for different values of `t`.\n\n- **Legend Creation:** We use `handles=custom_lines` to specify our custom legend entries.\n\nThis approach creates a single entry for each type of plot in your legend, avoiding duplication and making the legend more readable."
    }
]