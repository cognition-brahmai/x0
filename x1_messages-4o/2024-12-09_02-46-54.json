[
    {
        "role": "user",
        "content": "How can I use the Requests library in Python to check for a 404 error when accessing a website? I have written the following code to access a website and gather data:\n\n```python\nr = requests.get(url)\n```\n\nI want to add error testing for when an invalid URL is entered and a 404 error is returned. If I intentionally enter an invalid URL and print the response object, I get this output:\n\n```python\nprint(r)\n<Response [404]>\n```\n\nHowever, I'm not sure how to test for this 404 response as the object type remains the same. When I use `r.content` or `r.text`, I only get the HTML of a custom 404 page. How can I specifically test for a 404 error?"
    },
    {
        "role": "assistant",
        "content": "To specifically test for a 404 error using the `requests` library in Python, you can check the `status_code` attribute of the response object. The `status_code` will give you the HTTP status code of the response, which you can use to determine if the URL returned a 404 error.\n\nHere's how you can modify your code to check for a 404 error:\n\n```python\nimport requests\n\nurl = \"http://example.com/invalid-page\"  # Replace with your URL\nr = requests.get(url)\n\nif r.status_code == 404:\n    print(\"404 Error: The requested URL was not found on the server.\")\nelse:\n    print(f\"Success! Status code: {r.status_code}\")\n    # You can proceed with processing r.content or r.text\n```\n\nIn this code, `r.status_code` is used to check the HTTP status code returned by the server. If it's `404`, it means the page was not found, and you can handle it accordingly. Otherwise, you can proceed with processing the response as needed."
    }
]