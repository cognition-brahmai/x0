[
    {
        "role": "user",
        "content": "I am currently working on a Selenium script in Python, but I am unable to find any information on how to get the HTTP status code from the Selenium Python code. Can anyone provide a solution for this?"
    },
    {
        "role": "assistant",
        "content": "Selenium itself does not provide a direct way to capture HTTP status codes because it is primarily designed for automating web browsers and interacting with web elements, not for directly handling network requests. However, there are a few workarounds to achieve this:\n\n### Using Browser Developer Tools Protocol\n\nIf you are using Chrome, you can leverage the Chrome DevTools Protocol (CDP) to access network information, including HTTP status codes. Here's a basic example using the `undetected-chromedriver` package to avoid detection and enable CDP:\n\n1. **Install the required packages:**\n\n   ```bash\n   pip install undetected-chromedriver selenium\n   ```\n\n2. **Example code to capture HTTP status codes:**\n\n   ```python\n   import undetected_chromedriver.v2 as uc\n   from selenium.webdriver.common.desired_capabilities import DesiredCapabilities\n\n   # Enable logging of browser performance\n   capabilities = DesiredCapabilities.CHROME\n   capabilities[\"goog:loggingPrefs\"] = {\"performance\": \"ALL\"}\n\n   # Start the Chrome browser with undetected-chromedriver\n   driver = uc.Chrome(desired_capabilities=capabilities)\n\n   # Define a function to get the HTTP status code\n   def get_status_codes(driver):\n       logs = driver.get_log(\"performance\")\n       for entry in logs:\n           log = json.loads(entry[\"message\"])[\"message\"]\n           if log[\"method\"] == \"Network.responseReceived\":\n               status_code = log[\"params\"][\"response\"][\"status\"]\n               url = log[\"params\"][\"response\"][\"url\"]\n               print(f\"URL: {url} - Status Code: {status_code}\")\n\n   # Navigate to the desired URL\n   driver.get(\"https://example.com\")\n\n   # Extract status codes\n   get_status_codes(driver)\n\n   # Close the browser\n   driver.quit()\n   ```\n\n### Using a Proxy Server\n\nAnother approach is to use a proxy server to intercept and log network requests:\n\n1. **Set up a proxy server** using a tool like BrowserMob Proxy or mitmproxy.\n\n2. **Route Selenium traffic through the proxy** and capture the HTTP status codes.\n\nHere's a simplified example using BrowserMob Proxy:\n\n1. **Install the required packages:**\n\n   ```bash\n   pip install browsermob-proxy selenium\n   ```\n\n2. **Example code:**\n\n   ```python\n   from browsermobproxy import Server\n   from selenium import webdriver\n   from selenium.webdriver.common.proxy import Proxy, ProxyType\n\n   # Start the BrowserMob Proxy server\n   server = Server(\"/path/to/browsermob-proxy\")\n   server.start()\n   proxy = server.create_proxy()\n\n   # Configure WebDriver to use the proxy\n   proxy_config = Proxy({\n       'proxyType': ProxyType.MANUAL,\n       'httpProxy': proxy.proxy,\n       'sslProxy': proxy.proxy,\n   })\n   chrome_options = webdriver.ChromeOptions()\n   chrome_options.proxy = proxy_config\n   driver = webdriver.Chrome(options=chrome_options)\n\n   # Start capturing requests\n   proxy.new_har(\"example\")\n\n   # Navigate to the desired URL\n   driver.get(\"https://example.com\")\n\n   # Get status codes from the captured requests\n   for entry in proxy.har['log']['entries']:\n       url = entry['request']['url']\n       status_code = entry['response']['status']\n       print(f\"URL: {url} - Status Code: {status_code}\")\n\n   # Stop the proxy server and close the browser\n   server.stop()\n   driver.quit()\n   ```\n\nChoose the method that best suits your needs and setup. The CDP approach is often simpler and more integrated if you're using Chrome, while the proxy method can be more flexible but requires additional setup."
    }
]