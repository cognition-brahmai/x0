[
    {
        "role": "user",
        "content": "How can I configure Sphinx to conditionally exclude certain pages when generating documentation? I want to create two versions of my documentation: one inclusive of all pages, and another with only a specific set of pages. Is there a possibility to instruct Sphinx to exclude or include specific documents during a specific build without having to resort to a build script that moves files around?"
    },
    {
        "role": "assistant",
        "content": "To conditionally exclude or include certain pages in Sphinx documentation builds, you can use the \"tags\" feature in conjunction with conditional logic in your `conf.py` file. This allows you to create different versions of your documentation by specifying which pages to include or exclude during the build process without having to move files around. Here's how you can achieve this:\n\n### Step-by-Step Guide\n\n1. **Use Sphinx Tags:**\n\n   Sphinx provides a tag system that allows you to conditionally include or exclude content. You can define tags and use them in your reStructuredText files.\n\n2. **Modify the `conf.py` File:**\n\n   In your `conf.py`, you can set the tags based on the build configuration you want. For example:\n\n   ```python\n   import os\n\n   # Define custom tags\n   if os.environ.get('SPHINX_BUILD_TYPE') == 'minimal':\n       tags.add('minimal')\n   else:\n       tags.add('full')\n   ```\n\n3. **Use Tags in Your Documentation Files:**\n\n   In your reStructuredText files, you can conditionally include or exclude content based on the tags you define:\n\n   ```rst\n   .. only:: minimal\n\n      This content is only included in the minimal version.\n\n   .. only:: full\n\n      This content is included in the full version.\n   ```\n\n4. **Conditional Inclusion in `toctree`:**\n\n   If you want to conditionally include whole pages in your table of contents, you can use the `:glob:` option with `toctree` directives and conditionally list files:\n\n   ```rst\n   .. toctree::\n      :maxdepth: 2\n\n      common_page\n\n   .. only:: full\n\n      .. toctree::\n         :maxdepth: 2\n\n         exclusive_full_page\n   ```\n\n5. **Building Different Versions:**\n\n   You can use environment variables or command-line arguments to specify which version to build. For example, to build the minimal version, you can run:\n\n   ```bash\n   SPHINX_BUILD_TYPE=minimal make html\n   ```\n\n   For the full version, you can run:\n\n   ```bash\n   SPHINX_BUILD_TYPE=full make html\n   ```\n\n### Summary\n\nBy utilizing Sphinx's tags and the `only` directive, you can conditionally include or exclude content and pages in your documentation build process, allowing you to maintain a single source for your documentation while generating different versions based on your needs."
    }
]