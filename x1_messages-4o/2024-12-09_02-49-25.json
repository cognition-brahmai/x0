[
    {
        "role": "user",
        "content": "I am working on Django and have encountered an issue with the `get_or_create` method. I have a model named `Example` which inherits from `Stat` and has two fields `numeric` and `date`. The `date` field is set to auto_now_add=True. I have also defined a unique_together constraint on `numeric` and `date` fields in the Meta class. The problem arises when I try to use `get_or_create` method with the values 72 and '2011-08-07' which are already stored. It raises an `IntegrityError` stating \"Duplicate entry '72-2011-08-07'\". I am not sure why `get_or_create` is raising this error as it is supposed to handle the duplicate case. Is this a bug in Django? Here is the model and the code:\n\n```python\nclass Example(Stat):\n    numeric = models.IntegerField(...) \n    date = models.DateField( auto_now_add=True,...)\n\n    class Meta:\n       unique_together = ('numeric','date')\n\n# Already stored values\nExample.object.get_or_create(numeric=72,date='2011-08-07')\n```\n\nAnd the error I am receiving:\n\n```python\ndjango.db.utils.IntegrityError: (1062, \"Duplicate entry '72-2011-08-07'\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is related to how the `get_or_create` method works in conjunction with the `auto_now_add` attribute in Django's ORM. When you use `auto_now_add=True` on a `DateField`, Django automatically sets the field to the current date whenever a new instance is created. However, this can cause problems when combined with `get_or_create`, especially when you're explicitly providing a date that might already exist in the database.\n\nHere's what happens in your case:\n\n1. You are calling `get_or_create` with `numeric=72` and `date='2011-08-07'`.\n2. Django tries to fetch the object with these attributes.\n3. If it doesn't find it, Django will attempt to create a new one with `numeric=72` and the current date (since `auto_now_add=True`), which might conflict with the date you provided if it matches an existing entry.\n\nTo resolve this issue, you should avoid using `auto_now_add=True` if you need to explicitly provide a date value. Instead, manually handle the date setting in your code.\n\nHere's how you can modify your model:\n\n```python\nclass Example(Stat):\n    numeric = models.IntegerField(...)\n    date = models.DateField(...)  # Remove auto_now_add=True\n\n    class Meta:\n        unique_together = ('numeric', 'date')\n```\n\nThen, when you use `get_or_create`, you can explicitly provide the date:\n\n```python\nfrom datetime import date\n\n# Make sure to import date from datetime module\nExample.objects.get_or_create(numeric=72, date=date(2011, 8, 7))\n```\n\nBy removing `auto_now_add=True`, you gain control over the date value and ensure that `get_or_create` behaves as expected without triggering an `IntegrityError`."
    }
]