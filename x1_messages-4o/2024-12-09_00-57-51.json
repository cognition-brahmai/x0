[
    {
        "role": "user",
        "content": "How can I read environment variables from a configuration file in Python? I have a Python script that usually runs in a Docker container and uses a `docker-compose.yml` file. This file specifies an environment file that partially looks like this:\n\n``` \nDB_ADDR=rethinkdb\nDB_PORT=28015\nDB_NAME=ipercron\n```\n\nI want these lines to be converted to:\n\n```\nos.environ['DB_ADDR'] = 'rethinkdb'\nos.environ['DB_PORT'] = '28015'\nos.environ['DB_NAME'] = 'ipercron'\n```\n\nI know I could write my parser, but I was wondering if there are any existing Python modules or tools that can read in environment variables from such configuration files?"
    },
    {
        "role": "assistant",
        "content": "Yes, there are several ways to read environment variables from a configuration file in Python without writing your own parser. One of the most popular libraries for this purpose is `python-dotenv`. This library is specifically designed to read key-value pairs from a `.env` file and set them as environment variables.\n\nHere's how you can use it:\n\n1. **Install `python-dotenv`:**\n\n   You can install the `python-dotenv` package using pip:\n\n   ```bash\n   pip install python-dotenv\n   ```\n\n2. **Create a `.env` file:**\n\n   Create a file named `.env` in your project directory and add your environment variables to it. The content of this file will be similar to your configuration file:\n\n   ```\n   DB_ADDR=rethinkdb\n   DB_PORT=28015\n   DB_NAME=ipercron\n   ```\n\n3. **Load the environment variables in your Python script:**\n\n   Use `python-dotenv` to load the environment variables from the `.env` file into your script:\n\n   ```python\n   from dotenv import load_dotenv\n   import os\n\n   # Load environment variables from .env file\n   load_dotenv()\n\n   # Access the environment variables\n   db_addr = os.environ.get('DB_ADDR')\n   db_port = os.environ.get('DB_PORT')\n   db_name = os.environ.get('DB_NAME')\n\n   print(f\"Database Address: {db_addr}\")\n   print(f\"Database Port: {db_port}\")\n   print(f\"Database Name: {db_name}\")\n   ```\n\nBy following these steps, you can easily manage your environment variables using a `.env` file, making it convenient to switch configurations or move your application between different environments.\n\n`python-dotenv` is a great tool for managing environment variables in development and is widely used in many Python projects."
    }
]