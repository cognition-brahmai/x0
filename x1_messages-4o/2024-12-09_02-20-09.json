[
    {
        "role": "user",
        "content": "What is a Pythonic way to check if a list, specifically a list of timestamps, is sorted in ascending (ASC) or descending (DESC) order? For example, I have a list like this:\n\n```python\nlisttimestamps = [1, 2, 3, 5, 6, 7]\n```\n\nIs there a method or function in Python similar to `listtimestamps.isSorted()`, that will return `True` if the list is sorted and `False` otherwise? My goal is to check that transactions have appeared in the correct order."
    },
    {
        "role": "assistant",
        "content": "In Python, there isn't a built-in method like `listtimestamps.isSorted()` to directly check if a list is sorted. However, you can achieve this in a Pythonic way using list comprehensions or the `all()` function. Here's how you can check if a list of timestamps is sorted in ascending or descending order:\n\nTo check if the list is sorted in ascending order:\n\n```python\nlisttimestamps = [1, 2, 3, 5, 6, 7]\n\nis_sorted_asc = all(earlier <= later for earlier, later in zip(listtimestamps, listtimestamps[1:]))\nprint(is_sorted_asc)  # Output: True\n```\n\nTo check if the list is sorted in descending order:\n\n```python\nis_sorted_desc = all(earlier >= later for earlier, later in zip(listtimestamps, listtimestamps[1:]))\nprint(is_sorted_desc)  # Output: False\n```\n\nThe `zip()` function is used here to pair each element of the list with the next one, and `all()` checks if the condition holds true for all such pairs. Adjust the comparison operators (`<=` for ascending, `>=` for descending) based on your requirement. \n\nThis method is efficient and considered Pythonic, leveraging Python's powerful iteration and comparison features."
    }
]