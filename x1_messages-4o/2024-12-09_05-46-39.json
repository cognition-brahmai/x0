[
    {
        "role": "user",
        "content": "I'm using Visual Studio Code with the Python plugin and autopep8 with the \"editor.formatOnSave\" set to true. I'm trying to import local packages and my code looks like this:\n\n```python\nimport sys\nsys.path.insert(0, '/path/to/packages')\nimport localpackage\n```\n\nHowever, when I save, Visual Studio Code/autopep8 moves all import statements before the code, causing Python to not be able to find my local package. The modified code looks like this:\n\n```python\nimport sys\nimport localpackage\nsys.path.insert(0, '/path/to/packages')\n```\n\nIs there a way I can instruct Visual Studio Code/autopep8 to allow a statement before imports? Or, is there a more correct way of importing local packages? As a workaround, I found that it's fine if you import in an if statement:\n\n```python\nimport sys\n\nsys.path.insert(0, '/path/to/packages')\nif 'localpackage' not in sys.modules:\n    import localpackage\n```"
    },
    {
        "role": "assistant",
        "content": "The behavior you're experiencing is due to PEP 8 standards, which aim to place all import statements at the top of the file. Using `autopep8` will automatically reorder imports to comply with this standard, which can cause problems when you need to modify `sys.path` before importing local packages.\n\nHere are a few approaches you can consider:\n\n1. **Use a `.env` file**: \n   - If you're using Visual Studio Code, you can use a `.env` file to set the `PYTHONPATH` environment variable, which can include the path to your local packages. This way, you don't need to modify `sys.path` in your code.\n   \n   Create a file named `.env` in the root of your workspace with the following content:\n   ```\n   PYTHONPATH=/path/to/packages\n   ```\n\n2. **Use a `setup.py` or `setup.cfg`**:\n   - If this is a larger project, consider structuring your project as a package and using a `setup.py` or `setup.cfg` file. This can help manage dependencies and paths more effectively.\n\n3. **Using `PYTHONPATH` directly**:\n   - Before running your script, you can set the `PYTHONPATH` environment variable in your shell or terminal:\n   ```bash\n   export PYTHONPATH=/path/to/packages:$PYTHONPATH\n   python your_script.py\n   ```\n\n4. **Conditional Import**:\n   - As you found out, placing the import inside a conditional block like an `if` statement can prevent `autopep8` from moving it. However, this is more of a workaround than a standard practice.\n\n5. **Using `importlib`**:\n   - Another approach is to use the `importlib` module to import your local package after modifying `sys.path`:\n   ```python\n   import sys\n   import importlib\n\n   sys.path.insert(0, '/path/to/packages')\n   localpackage = importlib.import_module('localpackage')\n   ```\n\nAmong these, using a `.env` file or setting `PYTHONPATH` in your environment are the most straightforward and widely used methods for managing import paths in development environments."
    }
]