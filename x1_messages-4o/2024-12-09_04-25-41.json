[
    {
        "role": "user",
        "content": "How can I change the timestamp in the log file to reflect my current time zone in Python logging? Currently, my configuration is as follows:\n\n```python\nlogging.basicConfig(filename='audit.log',\n                filemode='w',\n                level=logging.INFO,\n                format='%(asctime)s %(message)s',\n                datefmt='%m/%d/%Y %I:%M:%S %p')\n```\nI want to be able to debug errors at a faster rate by having the timestamps in my own time zone. Is it possible to change the time zone in the log file?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can change the timestamp in your log file to reflect your current time zone by using a custom `Formatter` that adjusts the time zone. Here's how you can do it:\n\n1. Import the necessary modules.\n2. Create a custom formatter class that overrides the `formatTime` method to adjust the time zone.\n3. Set up your logging configuration to use this custom formatter.\n\nBelow is the modified version of your logging configuration with a custom formatter:\n\n```python\nimport logging\nimport time\nimport pytz  # you'll need to install pytz if you haven't already\nfrom datetime import datetime\n\n# Define a custom formatter class to include the timezone.\nclass TimeZoneFormatter(logging.Formatter):\n    def __init__(self, fmt=None, datefmt=None, tz=None):\n        super().__init__(fmt=fmt, datefmt=datefmt)\n        self.tz = tz\n\n    def formatTime(self, record, datefmt=None):\n        # Convert the timestamp to the desired timezone\n        dt = datetime.fromtimestamp(record.created, tz=self.tz)\n        if datefmt:\n            s = dt.strftime(datefmt)\n        else:\n            s = dt.isoformat()\n        return s\n\n# Set the desired timezone\nmy_timezone = pytz.timezone('Asia/Kolkata')  # Replace with your timezone\n\n# Set up logging configuration with the custom formatter\nformatter = TimeZoneFormatter(\n    fmt='%(asctime)s %(message)s',\n    datefmt='%m/%d/%Y %I:%M:%S %p',\n    tz=my_timezone\n)\n\nhandler = logging.FileHandler('audit.log', mode='w')\nhandler.setFormatter(formatter)\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\nlogger.addHandler(handler)\n\n# Example usage\nlogger.info(\"This is a test log message.\")\n```\n\nMake sure to replace `'Asia/Kolkata'` with the appropriate time zone for your needs. You will also need to have the `pytz` library installed, which you can do using:\n\n```bash\npip install pytz\n```\n\nThis setup ensures that the timestamps in your log file will reflect the desired time zone."
    }
]