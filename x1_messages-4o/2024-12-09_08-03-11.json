[
    {
        "role": "user",
        "content": "I'm trying to add tooltips to a Timeseries chart in Bokeh. I want to see a single column name ('a','b' or 'c') when the mouse hovers over the relevant line but instead, a \"???\" is displayed and all three lines get a tooltip, not just the one I'm hovering over. How can I display the 'columns' from a pandas DataFrame in the tooltip? If the high level TimeSeries interface doesn't support this, how can I use the lower level interfaces to do the same thing? Also, how can I format the \"$x\" to display the date as a date? Here is my current code:\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom bokeh.charts import TimeSeries\nfrom bokeh.models import HoverTool\nfrom bokeh.plotting import show\n\ntoy_df = pd.DataFrame(data=np.random.rand(5,3), columns = ('a', 'b' ,'c'), index = pd.DatetimeIndex(start='01-01-2015',periods=5, freq='d'))   \n\np = TimeSeries(toy_df, tools='hover')  \n\nhover = p.select(dict(type=HoverTool))\nhover.tooltips = [\n    (\"Series\", \"@columns\"),\n    (\"Date\", \"$x\"),\n    (\"Value\", \"$y\"),\n    ]\n\nshow(p)\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the behavior you're looking for in your Bokeh TimeSeries chart, you'll need to switch to using the lower-level Bokeh plotting interface. The high-level `TimeSeries` interface doesn't expose the necessary controls for customizing tooltips per line. Below is an example of how you can use the Bokeh `figure` and `line` methods to create a similar plot with the desired tooltip functionality and date formatting:\n\n```python\nimport pandas as pd\nimport numpy as np\nfrom bokeh.plotting import figure, show, output_notebook\nfrom bokeh.models import ColumnDataSource, HoverTool\nfrom bokeh.io import curdoc\n\n# Prepare data\ntoy_df = pd.DataFrame(data=np.random.rand(5, 3), columns=('a', 'b', 'c'), index=pd.date_range(start='01-01-2015', periods=5, freq='D'))\n\n# Output to notebook\noutput_notebook()\n\n# Create a new plot\np = figure(plot_width=800, plot_height=400, x_axis_type='datetime', title=\"Time Series with Tooltips\")\n\n# Add lines and tooltips for each column\nfor col in toy_df.columns:\n    source = ColumnDataSource(data={'date': toy_df.index, 'value': toy_df[col], 'series': [col]*len(toy_df)})\n    line = p.line('date', 'value', source=source, line_width=2, legend_label=col, name=col)\n    \n    hover = HoverTool(\n        tooltips=[\n            (\"Series\", \"@series\"),\n            (\"Date\", \"@date{%F}\"),\n            (\"Value\", \"@value{0.2f}\")\n        ],\n        formatters={\n            '@date': 'datetime',  # use 'datetime' formatter for '@date' field\n        },\n        mode='vline',  # Display tooltips for all data points on the same x-axis\n        renderers=[line]  # Only show the tooltip for the corresponding line\n    )\n    p.add_tools(hover)\n\n# Customize legend\np.legend.title = 'Series'\np.legend.location = 'top_left'\np.legend.click_policy = \"hide\"\n\n# Show the plot\nshow(p)\n```\n\n### Key Points:\n1. **Lower-level Interface**: Instead of using `TimeSeries`, we use `figure` and `line` to have more control.\n   \n2. **ColumnDataSource**: We create a `ColumnDataSource` for each series, which allows us to pass the data directly to the plot and include metadata like the series name.\n\n3. **HoverTool**: We customize the `HoverTool` for each line, specifying the `tooltips` and the `formatters`. The `formatters` dictionary is used here to format the date correctly.\n\n4. **Renderers**: By adding each `HoverTool` specifically to a `line` renderer, it ensures that tooltips only appear for the line being hovered over.\n\n5. **Legend**: We add a legend for clarity and set `click_policy` to \"hide\" to allow toggling the visibility of each line.\n\nThis approach gives you the flexibility to customize your plot further, including styling, interactivity, and more control over how data is represented."
    }
]