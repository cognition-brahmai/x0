[
    {
        "role": "user",
        "content": "In Python, how can I redirect the script execution log to a file as well as to stdout in a pythonic way?"
    },
    {
        "role": "assistant",
        "content": "To redirect the script execution log to both a file and stdout in a Pythonic way, you can use the `logging` module, which is part of the Python standard library. This module provides a flexible framework for emitting log messages from Python programs. Here\u2019s how you can set it up to log to both a file and the console:\n\n```python\nimport logging\n\n# Create a custom logger\nlogger = logging.getLogger(__name__)\n\n# Set the log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\nlogger.setLevel(logging.DEBUG)\n\n# Create handlers\nconsole_handler = logging.StreamHandler()  # Console handler for stdout\nfile_handler = logging.FileHandler('execution.log')  # File handler for logging to a file\n\n# Set level for handlers\nconsole_handler.setLevel(logging.INFO)\nfile_handler.setLevel(logging.DEBUG)\n\n# Create formatters and add them to the handlers\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nconsole_handler.setFormatter(formatter)\nfile_handler.setFormatter(formatter)\n\n# Add handlers to the logger\nlogger.addHandler(console_handler)\nlogger.addHandler(file_handler)\n\n# Example usage\nlogger.debug('This is a debug message')\nlogger.info('This is an info message')\nlogger.warning('This is a warning message')\nlogger.error('This is an error message')\nlogger.critical('This is a critical message')\n```\n\n### Explanation:\n- **Logger:** Create a logger instance using `logging.getLogger(__name__)`. This allows you to name the logger based on the module\u2019s `__name__`.\n- **Level:** Use `setLevel()` to define the severity level of logs that you want to capture. Setting it to `DEBUG` will capture all levels of logs.\n- **Handlers:** \n  - `StreamHandler` is used for console output (stdout).\n  - `FileHandler` is used to write logs to a file (`execution.log` in this case).\n- **Formatters:** Define a log format using `logging.Formatter` and attach it to the handlers.\n- **Adding Handlers:** Attach the handlers to the logger using `addHandler()`.\n\nThis setup ensures that all log messages are sent to both the console and the specified log file. Adjust the log levels and formats as needed for your specific use case."
    }
]