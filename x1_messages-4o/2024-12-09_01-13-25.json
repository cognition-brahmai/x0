[
    {
        "role": "user",
        "content": "I'm running into a `UnicodeDecodeError: 'ascii' codec can't decode byte` error when trying to publish a Chinese post using Wok on my static blog. How can I resolve this issue? Here is the error message I'm receiving when I attempt to use Wok:\n\n```\nas3:~/ngokevin-site# nano content/blog/20140114_test-chinese.mkd\nas3:~/ngokevin-site# wok\nTraceback (most recent call last):\nFile \"/usr/local/bin/wok\", line 4, in\nEngine()\nFile \"/usr/local/lib/python2.7/site-packages/wok/engine.py\", line 104, in init\nself.load_pages()\nFile \"/usr/local/lib/python2.7/site-packages/wok/engine.py\", line 238, in load_pages\np = Page.from_file(os.path.join(root, f), self.options, self, renderer)\nFile \"/usr/local/lib/python2.7/site-packages/wok/page.py\", line 111, in from_file\npage.meta['content'] = page.renderer.render(page.original)\nFile \"/usr/local/lib/python2.7/site-packages/wok/renderers.py\", line 46, in render\nreturn markdown(plain, Markdown.plugins)\nFile \"/usr/local/lib/python2.7/site-packages/markdown/init.py\", line 419, in markdown\nreturn md.convert(text)\nFile \"/usr/local/lib/python2.7/site-packages/markdown/init.py\", line 281, in convert\nsource = unicode(source)\nUnicodeDecodeError: 'ascii' codec can't decode byte 0xe8 in position 1: ordinal not in range(128).\n-- Note: Markdown only accepts unicode input!\n```\n\nFor your reference, Chinese posts can be published successfully on other python-based static blog apps, like this one: http://github.com/vrypan/bucket3. Also, on my site http://bc3.brite.biz/, Chinese posts are published without any issues."
    },
    {
        "role": "assistant",
        "content": "The `UnicodeDecodeError` you're encountering is a common issue when dealing with non-ASCII characters in Python 2.x, which is the version you're currently using. This error occurs because Python 2 uses ASCII as the default encoding for strings, and it cannot handle characters outside the ASCII range, such as Chinese characters.\n\nHere are a few steps you can take to resolve this issue:\n\n1. **Specify the Encoding**: Make sure that your source files are explicitly defined with UTF-8 encoding. You can do this by adding the following line at the top of your Python files (like `wok/page.py` or `wok/renderers.py`):\n\n   ```python\n   # -*- coding: utf-8 -*-\n   ```\n\n   This tells Python to interpret the file as UTF-8 encoded.\n\n2. **Convert to Unicode**: Before processing your text, ensure that it is converted to a Unicode string. You may need to modify the `from_file` method in `wok/page.py` or wherever the content is being read to explicitly decode the content with UTF-8:\n\n   ```python\n   with open(file_path, 'r', encoding='utf-8') as f:\n       content = f.read()\n   page.meta['content'] = page.renderer.render(content.decode('utf-8'))\n   ```\n\n3. **Upgrade to Python 3**: If possible, consider upgrading your project to Python 3. Python 3 uses UTF-8 as the default encoding for strings, which eliminates many of the issues related to Unicode handling in Python 2.\n\n4. **Use UTF-8 Everywhere**: Ensure that all parts of your system are using UTF-8. This includes:\n   - Your text editor (ensure it saves files as UTF-8).\n   - Your terminal or console (set it to use UTF-8).\n   - Any external libraries or dependencies in your project.\n\n5. **Check Wok's Codebase**: If you're comfortable with modifying the Wok codebase, look for places where string handling occurs and ensure that any byte strings are decoded to Unicode before processing.\n\n6. **Library Updates**: Ensure that all libraries you're using are updated to their latest versions. Sometimes, such issues are resolved in newer releases.\n\nBy following these steps, you should be able to handle Chinese characters properly in your Wok-based blog. If you encounter specific issues while implementing these suggestions, feel free to ask for further assistance."
    }
]