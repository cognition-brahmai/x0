[
    {
        "role": "user",
        "content": "I have been a long-time user of `pylint` and its static analysis has become a crucial part of my python projects. However, after upgrading from `pylint 1.3` to `pylint 1.4`, almost all compiled C extensions are throwing `E1101(no-member)` errors. Previously, projects that ran perfectly clean with `pylint 1.3` are now giving `E1101` errors for almost every C extension member. As a workaround, I'm forced to disable the `E1101` errors, but this reduces the usefulness of `pylint`. For instance, when I use the `lxml` package in the following code snippet:\n\n```python\nr\"\"\"valid.py: demonstrate pylint 1.4 error\"\"\"\nfrom lxml import etree\nprint etree.Element('mydoc')\n```\n\nRunning this through `pylint` returns:\n\n```shell\n$ pylint -rn valid.py\nNo config file found, using default configuration\n************* Module valid\nE:  3, 6: Module 'lxml.etree' has no 'Element' member (no-member)\n```\n\nHowever, the code is perfectly valid as it produces the expected output when run:\n\n```shell\n$ python valid.py\n<Element mydoc at 7fddf67b1ba8>\n```\n\nInterestingly, some C extensions seem to work fine with `pylint`, as shown below:\n\n```python\nr\"\"\"valid2.py: this one works fine\"\"\"\nimport sqlite3\nprint sqlite3.version\n\n$ pylint -rn valid2.py\nNo config file found, using default configuration\n```\n\nI've tried creating plugins to suppress these warnings following the guidelines here: [http://docs.pylint.org/plugins.html#enter-plugin], but the documentation is not very clear and the `astroid` base class appears quite complex. I would like to know if anyone else has experienced this issue and if so, can you share your workaround or solution? Also, I would appreciate understanding what changed in `pylint` that could have caused this issue.\n\nHere are my platform details:\n\n```shell\n$ pylint --version\nNo config file found, using default configuration\npylint 1.4.0,\nastroid 1.3.2, common 0.63.2\nPython 2.7.5 (default, Jul  1 2013, 18:09:11)\n[GCC 4.4.7 20120313 (Red Hat 4.4.7-3)]\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering with `pylint 1.4` generating `E1101(no-member)` errors for C extensions like `lxml` is indeed a known problem that many users have faced after upgrading. This issue is primarily due to how `pylint` and its underlying library `astroid` handle introspection of C extension modules.\n\n### What's Changed?\n\n1. **Improved Introspection**: `pylint` 1.4 introduced enhancements in how it introspects and analyzes code, but these changes inadvertently led to difficulties with C extensions that don't expose their members in a way that `pylint` can easily recognize.\n\n2. **Astroid Updates**: The `astroid` library, which is used by `pylint` for building the abstract syntax tree, also received updates that may have affected its ability to understand certain C extension structures.\n\n### Workarounds and Solutions:\n\n1. **Whitelist C Extensions**: One common approach is to use `--generated-members` option to tell `pylint` to ignore certain members that are known to be dynamically generated by C extensions:\n   ```shell\n   pylint --generated-members=Element,SubElement valid.py\n   ```\n\n2. **Custom PyLint Plugin**: Writing a custom plugin can help suppress specific warnings. Here is a simplified approach:\n   - Create a file `pylint_plugin.py`.\n   - Add the following code to ignore specific errors:\n     ```python\n     from astroid import MANAGER, nodes\n     from pylint.checkers import BaseChecker\n     from pylint.interfaces import IAstroidChecker\n\n     class NoMemberChecker(BaseChecker):\n         __implements__ = IAstroidChecker\n         name = 'no-member-checker'\n         priority = -1\n         msgs = {\n             'C9999': (\n                 'Ignoring no-member error for known C extensions',\n                 'ignore-no-member',\n                 'Used to suppress false positive no-member errors.'\n             )\n         }\n\n         def visit_attribute(self, node):\n             if isinstance(node.expr, nodes.Call) and node.attrname in ['Element']:\n                 # Suppress false positive no-member errors\n                 self.add_message('ignore-no-member', node=node)\n\n     def register(linter):\n         linter.register_checker(NoMemberChecker(linter))\n\n     MANAGER.register_transform(nodes.Module, register)\n     ```\n   - Run `pylint` with the plugin:\n     ```shell\n     pylint --load-plugins=pylint_plugin valid.py\n     ```\n\n3. **Upgrade `pylint` and `astroid`**: Check if newer versions of `pylint` and `astroid` have been released since your issue arose. They may include fixes or improvements for better handling of C extensions.\n\n4. **Disable Specific Errors**: While not ideal, you can disable specific errors in your `pylint` configuration file or directly in the code using:\n   ```python\n   # pylint: disable=no-member\n   ```\n\n5. **Use Type Annotations**: If you're migrating to Python 3, using type annotations can sometimes help `pylint` with better introspection, though it may not resolve issues with all C extensions.\n\n### Conclusion:\n\nThe issue you're facing is tied to the nature of how `pylint` interacts with C extensions. Using a combination of the above workarounds can help mitigate the problem until a more permanent fix is implemented in `pylint` or `astroid`. Additionally, participating in discussions or reporting issues to the `pylint` and `astroid` maintainers can help bring more attention to these kinds of problems."
    }
]