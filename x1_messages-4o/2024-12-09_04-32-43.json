[
    {
        "role": "user",
        "content": "I have a dataframe in pandas as follows:\n\n```python\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'COL1': ['A', np.nan,'A'], \n                   'COL2' : [np.nan,'A','A']})\ndf\n    COL1    COL2\n0    A      NaN\n1    NaN    A\n2    A      A\n```\n\nI want to create a new column ('COL3') that uses the value from COL1 for each row unless the value is null (or NaN). If the value is null (or NaN), it should use the value from COL2. The desired result is:\n\n```python\n    COL1    COL2   COL3\n0    A      NaN    A\n1    NaN    A      A\n2    A      A      A\n```\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "You can achieve this by using the `fillna()` method in combination with the `apply()` method or by using the `numpy` function `np.where()`. However, the simplest and most efficient way to achieve this is by using the `fillna()` method directly on the DataFrame. Here's how you can do it:\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# Create the DataFrame\ndf = pd.DataFrame({'COL1': ['A', np.nan, 'A'], \n                   'COL2': [np.nan, 'A', 'A']})\n\n# Create the new column 'COL3'\ndf['COL3'] = df['COL1'].fillna(df['COL2'])\n\n# Display the DataFrame\nprint(df)\n```\n\nThis code will create the new column `COL3` by taking values from `COL1` and filling any `NaN` values with the corresponding values from `COL2`. The resulting DataFrame will look like this:\n\n```\n  COL1 COL2 COL3\n0    A  NaN    A\n1  NaN    A    A\n2    A    A    A\n```\n\nThis method is efficient and concise, making use of the built-in functionality of pandas to handle missing data."
    }
]