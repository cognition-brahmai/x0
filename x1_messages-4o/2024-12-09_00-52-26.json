[
    {
        "role": "user",
        "content": "How can I manually set the color of points in the legend of a scatter plot in matplotlib? In the following scatter plot, the colors of the points in the legend are automatically set to blue by matplotlib, but I need to set these points to a different color which is not present in the colormap (for instance, black) to avoid any confusion with the colors associated with the colormap. I've tried using the matplotlib.legend module, but it doesn't seem to accept a color keyword. Is there any way to do this?\n\nHere's the code I'm using to generate this plot:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndef rand_data():\n    return np.random.uniform(low=0., high=1., size=(100,))\n\n# Generate data.\nx, y, x2, x3 = [rand_data() for i in range(4)]\n# This data defines the markes and labels used.\nx1 = np.random.random_integers(7, 9, size=(100,))\n\n# Order all lists so smaller points are on top.\norder = np.argsort(-np.array(x2))\n# Order x and y.\nx_o, y_o = np.take(x, order), np.take(y, order)\n# Order list related to markers and labels.\nz1 = np.take(x1, order)\n# Order list related to sizes.\nz2 = np.take(x2, order)\n# Order list related to colors.\nz3 = np.take(x3, order)\n\nplt.figure()\ncm = plt.cm.get_cmap('RdYlBu')\n\n# Scatter plot where each value in z1 has a different marker and label\n# assigned.\nmrk = {7: ('o', '7'), 8: ('s', '8'), 9: ('D', '9')}\nfor key, value in mrk.items():\n\n    s1 = (z1 == key)\n    plt.scatter(x_o[s1], y_o[s1], marker=value[0], label=value[1],\n        s=z2[s1] * 100., c=z3[s1], cmap=cm, lw=0.2)\n\n# Plot colorbar\nplt.colorbar()\n\n# Plot legend.\nplt.legend(loc=\"lower left\", markerscale=0.7, scatterpoints=1, fontsize=10)\n\nplt.show()\n```"
    },
    {
        "role": "assistant",
        "content": "To manually set the color of points in the legend of a scatter plot in Matplotlib, you can use a custom legend handler. This involves creating a separate `Line2D` object with the desired color and marker style for each entry in the legend. You can then customize the legend using these objects.\n\nHere's how you can modify your code to achieve this:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.patches as mpatches\nfrom matplotlib.lines import Line2D\n\ndef rand_data():\n    return np.random.uniform(low=0., high=1., size=(100,))\n\n# Generate data.\nx, y, x2, x3 = [rand_data() for i in range(4)]\n# This data defines the markers and labels used.\nx1 = np.random.randint(7, 10, size=(100,))\n\n# Order all lists so smaller points are on top.\norder = np.argsort(-np.array(x2))\n# Order x and y.\nx_o, y_o = np.take(x, order), np.take(y, order)\n# Order list related to markers and labels.\nz1 = np.take(x1, order)\n# Order list related to sizes.\nz2 = np.take(x2, order)\n# Order list related to colors.\nz3 = np.take(x3, order)\n\nplt.figure()\ncm = plt.cm.get_cmap('RdYlBu')\n\n# Scatter plot where each value in z1 has a different marker and label\n# assigned.\nmrk = {7: ('o', '7'), 8: ('s', '8'), 9: ('D', '9')}\nfor key, value in mrk.items():\n    s1 = (z1 == key)\n    plt.scatter(x_o[s1], y_o[s1], marker=value[0], label=value[1],\n                s=z2[s1] * 100., c=z3[s1], cmap=cm, lw=0.2)\n\n# Plot colorbar\nplt.colorbar()\n\n# Custom legend\nlegend_elements = [Line2D([0], [0], marker=value[0], color='w', label=value[1],\n                          markerfacecolor='black', markersize=10) for key, value in mrk.items()]\n\n# Plot legend with custom colors\nplt.legend(handles=legend_elements, loc=\"lower left\", markerscale=0.7, scatterpoints=1, fontsize=10)\n\nplt.show()\n```\n\n### Explanation:\n\n1. **Custom Legend Elements**: We create a list of `Line2D` objects, each representing a legend entry. We specify the marker style, face color, and size we want in the legend.\n\n2. **Marker Color**: We set `markerfacecolor='black'` to make the legend markers black, as desired.\n\n3. **Adding the Legend**: We pass the `legend_elements` list to the `handles` parameter of `plt.legend()`, which overrides the default legend items with our custom ones.\n\nThis solution ensures that the legend markers are distinct and are not confused with the colormap used in the plot."
    }
]