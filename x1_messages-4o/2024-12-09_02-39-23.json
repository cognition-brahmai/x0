[
    {
        "role": "user",
        "content": "Is there a method to prevent Python from looking up variables outside the current scope? For example, in the following code, Python looks for variable definitions in outer scopes if they are not defined in the current scope. This can lead to potential issues during refactoring:\n\n```python\ndef line(x, a, b):\n    return a + x * b\n\na, b = 1, 1\ny1 = line(1, a, b)\ny2 = line(1, 2, 3)\n```\n\nIf I were to rename the function arguments without renaming them inside the function body, the code would still run:\n\n```python\ndef line(x, a0, b0):\n    return a + x * b  # not an error\n\na, b = 1, 1\ny1 = line(1, a, b)  # correct result by coincidence\ny2 = line(1, 2, 3)  # wrong result\n```\n\nI understand it is bad practice to shadow names from outer scopes, but is there a way to have Python raise an Error when accessing a variable like `a` or `b` from the second example?"
    },
    {
        "role": "assistant",
        "content": "In Python, the language does not provide a built-in mechanism to restrict variable lookup to only the current scope and prevent it from falling back to outer scopes. The language follows the LEGB rule (Local, Enclosing, Global, Built-in) for name resolution, which means that if a variable isn't found in the local scope, Python will look for it in the enclosing scope, then the global scope, and finally in the built-in scope.\n\nHowever, you can adopt several practices and tools to help mitigate issues arising from unintended variable access across scopes:\n\n1. **Explicitly Use Keyword Arguments**: When calling functions, use keyword arguments to ensure that the correct variables are being passed.\n\n    ```python\n    y1 = line(1, a=a, b=b)\n    y2 = line(1, a=2, b=3)\n    ```\n\n2. **Linting Tools**: Use linting tools like `pylint` or `flake8`. These tools can catch potential issues related to variable shadowing or unused variables, which can help you identify mistakes in your code.\n\n3. **Code Review Practices**: Adopt a code review process where multiple eyes can catch such logical errors during the review process.\n\n4. **Testing**: Implement thorough unit tests for your functions, ensuring that they operate correctly with various inputs.\n\n5. **Static Type Checkers**: Use type checkers like `mypy` to enforce type checks, which might catch some unexpected behavior due to incorrect variable usage.\n\n6. **Refactoring Tools**: Use IDEs or editors with good refactoring support, which can help rename variables consistently throughout the codebase.\n\n7. **Avoid Global Variables**: As a general practice, try to minimize the use of global variables, which can help reduce the risk of such issues.\n\nBy combining these practices, you can significantly reduce the chances of encountering errors due to variable lookup across scopes."
    }
]