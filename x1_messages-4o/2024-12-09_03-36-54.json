[
    {
        "role": "user",
        "content": "How can I access nested dictionary items in Python using a list of keys? I have a complex dictionary structure and I wish to address the correct item through a list of keys. For instance, I have the following dictionary and lists:\n\n```\ndataDict = {\n    \"a\":{\n        \"r\": 1,\n        \"s\": 2,\n        \"t\": 3\n        },\n    \"b\":{\n        \"u\": 1,\n        \"v\": {\n            \"x\": 1,\n            \"y\": 2,\n            \"z\": 3\n        },\n        \"w\": 3\n        }\n}\n\nmaplist = [\"a\", \"r\"]\n```\nor\n```\nmaplist = [\"b\", \"v\", \"y\"]\n```\nI have written some code that works, but I'm sure there is a more efficient way to do this. Can you suggest a better solution?\n\nHere is my current code:\n```\n# Get a given data from a dictionary with position provided as a list\ndef getFromDict(dataDict, mapList):    \n    for k in mapList: dataDict = dataDict[k]\n    return dataDict\n\n# Set a given data in a dictionary with position provided as a list\ndef setInDict(dataDict, mapList, value): \n    for k in mapList[:-1]: dataDict = dataDict[k]\n    dataDict[mapList[-1]] = value\n```"
    },
    {
        "role": "assistant",
        "content": "Your current code for accessing and setting values in a nested dictionary using a list of keys is quite efficient already. However, you can enhance readability and maintainability by using more descriptive variable names and adding error handling to avoid potential exceptions when keys are missing. Here\u2019s an improved version of your code with these considerations:\n\n```python\ndef get_from_dict(nested_dict, key_list):\n    \"\"\"Retrieve a value from a nested dictionary using a list of keys.\"\"\"\n    for key in key_list:\n        try:\n            nested_dict = nested_dict[key]\n        except KeyError:\n            raise KeyError(f\"Key '{key}' not found in the dictionary.\")\n    return nested_dict\n\ndef set_in_dict(nested_dict, key_list, value):\n    \"\"\"Set a value in a nested dictionary using a list of keys.\"\"\"\n    for key in key_list[:-1]:\n        try:\n            nested_dict = nested_dict[key]\n        except KeyError:\n            raise KeyError(f\"Key '{key}' not found in the dictionary.\")\n    nested_dict[key_list[-1]] = value\n\n# Example usage:\ndataDict = {\n    \"a\": {\n        \"r\": 1,\n        \"s\": 2,\n        \"t\": 3\n    },\n    \"b\": {\n        \"u\": 1,\n        \"v\": {\n            \"x\": 1,\n            \"y\": 2,\n            \"z\": 3\n        },\n        \"w\": 3\n    }\n}\n\nmaplist_get = [\"a\", \"r\"]\nmaplist_set = [\"b\", \"v\", \"y\"]\nnew_value = 10\n\n# Getting a value\ntry:\n    result = get_from_dict(dataDict, maplist_get)\n    print(f\"Value obtained: {result}\")\nexcept KeyError as e:\n    print(e)\n\n# Setting a value\ntry:\n    set_in_dict(dataDict, maplist_set, new_value)\n    print(f\"Updated Dictionary: {dataDict}\")\nexcept KeyError as e:\n    print(e)\n```\n\n### Key Improvements:\n1. **Descriptive Function and Variable Names**: Improved names like `get_from_dict` and `set_in_dict` make it clear what the functions are doing.\n2. **Error Handling**: Added error handling with `try-except` blocks to handle `KeyError` exceptions gracefully, providing a more informative message when a key is not found.\n3. **Code Readability**: The use of comments and spacing enhances the readability of the code.\n\nThese improvements make the code more robust and user-friendly, especially in larger projects where predictable error handling is crucial."
    }
]