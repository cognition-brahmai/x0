[
    {
        "role": "user",
        "content": "In Python, I am looking for a way to get the next and previous key:value pair of a particular key in a dictionary. The dictionary I'm working with contains hashed usernames (as keys) associated with IP addresses (as values). The keys are ordered by running them against base 16 and using Collection.orderedDict. For example, the dictionary might look like this:\n\n```python\nd = {'1234': '8.8.8.8', '2345':'0.0.0.0', '3213':'4.4.4.4', '4523':'1.1.1.1', '7654':'1.3.3.7', '9999':'127.0.0.1'}\n```\n\nI want a mechanism that allows me to select one of these keys, and then return the key:value pair one higher and one lower. If I were to choose '2345', the code should return the key:value pairs '1234:8.8.8.8' and '3213:4.4.4.4'. I tried implementing it like this but it's not working:\n\n```python\nfor i in d:\n  while i < len(d):\n   if i == '2345':\n     print i.nextItem\n     print i.previousItem\n     break\n```\nHow can this be achieved?"
    },
    {
        "role": "assistant",
        "content": "To achieve this, you can convert the keys of the dictionary into a list and then find the index of the key you are interested in. Once you have the index, you can easily access the previous and next items in the list, provided they exist. Here's how you can implement this:\n\n```python\nfrom collections import OrderedDict\n\n# Sample ordered dictionary\nd = OrderedDict({'1234': '8.8.8.8', '2345': '0.0.0.0', '3213': '4.4.4.4', '4523': '1.1.1.1', '7654': '1.3.3.7', '9999': '127.0.0.1'})\n\ndef get_adjacent_items(dictionary, target_key):\n    keys = list(dictionary.keys())\n    if target_key not in keys:\n        return None, None\n\n    index = keys.index(target_key)\n\n    prev_item = (keys[index - 1], dictionary[keys[index - 1]]) if index > 0 else None\n    next_item = (keys[index + 1], dictionary[keys[index + 1]]) if index < len(keys) - 1 else None\n\n    return prev_item, next_item\n\n# Test with key '2345'\nprev_item, next_item = get_adjacent_items(d, '2345')\n\nprint(\"Previous item:\", prev_item)\nprint(\"Next item:\", next_item)\n```\n\n### Explanation:\n1. **OrderedDict**: Since Python 3.7+, the built-in `dict` maintains insertion order, so `OrderedDict` is not strictly necessary unless you're using an earlier version of Python or need additional functionality.\n\n2. **List of Keys**: Extract the keys of the dictionary into a list to maintain the order.\n\n3. **Find Index**: Use the `index()` method to find the position of the target key in the list.\n\n4. **Adjacent Items**: Use this index to find the previous and next items, ensuring you don't go out of bounds.\n\nWith this approach, you can easily retrieve the key-value pairs adjacent to a specified key in the ordered dictionary."
    }
]