[
    {
        "role": "user",
        "content": "I have installed pytest on a Mac using easy_install and have started writing tests for a project with the following file structure:\n<pre><code>repo/\n   |--app.py\n   |--settings.py\n   |--models.py\n   |--tests/\n          |--test_app.py\n</code></pre>\nWhen I run `py.test` in the repo directory on my Mac, everything works as expected. However, when I try to do the same on either Linux or Windows (both with pytest 2.2.3), it gives an error whenever it encounters the first import from my application path like `from app import some_def_in_app`. Do I need to modify my PATH to run py.test on these systems? Has anyone else experienced this issue?"
    },
    {
        "role": "assistant",
        "content": "This issue is likely related to how Python's import system works and the current working directory from where you're running the tests. When you run `py.test`, it may not be recognizing your project directory as a package, which is why the import statements are failing on Linux or Windows.\n\nHere are a few ways to resolve this issue:\n\n1. **PYTHONPATH Environment Variable**: You can explicitly add your project directory to the `PYTHONPATH` environment variable before running `py.test`. This tells Python where to look for modules to import.\n\n   On Linux or macOS, you can set the `PYTHONPATH` with:\n   ```bash\n   export PYTHONPATH=/path/to/repo\n   py.test\n   ```\n\n   On Windows, you can set it with:\n   ```cmd\n   set PYTHONPATH=C:\\path\\to\\repo\n   py.test\n   ```\n\n2. **Modify sys.path in Tests**: You can modify the `sys.path` within your test files to include the project directory. Add the following lines at the top of your `test_app.py` file:\n\n   ```python\n   import sys\n   import os\n   sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n   ```\n\n3. **Use a Test Runner**: If you're using a test runner like `tox`, you can configure it to set the `PYTHONPATH` or handle the imports correctly in the virtual environment it creates.\n\n4. **Package Structure**: Consider converting your project into a package by adding an `__init__.py` file in the `repo` directory. This way, you can use relative imports, or Python will recognize the directory as a package.\n\n5. **Check for Naming Conflicts**: Ensure there are no naming conflicts between your module names and Python's standard library modules. This is less likely but worth checking.\n\nTry one of these solutions to see if it resolves your import issues on Linux and Windows."
    }
]