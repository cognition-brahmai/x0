[
    {
        "role": "user",
        "content": "I'm using django-allauth in my website for social logins and I also have a REST API powered by django-rest-framework that serves as the backend of a mobile app. How can I integrate allauth's authentication backend into the REST API so that I can validate and register users who use Facebook login in the mobile app? The Facebook login is managed by native SDKs and I need an endpoint that operates like `POST /user` (i.e., creates a new user), but accepts a Facebook oauth token as input instead of email/password."
    },
    {
        "role": "assistant",
        "content": "To integrate `django-allauth` with `django-rest-framework` for handling Facebook login in your mobile app, you can follow these steps to create a custom endpoint that accepts a Facebook OAuth token and registers or logs in the user:\n\n1. **Create a Custom View**:\n   Create a custom view that will handle the Facebook OAuth token. This view will interact with Facebook's API to verify the token and retrieve the user's information.\n\n2. **Verify the Facebook Token**:\n   Use Facebook's Graph API to verify the token and obtain the user's information. You can do this using the `requests` library or any other HTTP client. You'll need the `access_token` and `user_id` from the mobile app.\n\n3. **Create or Retrieve User**:\n   Use the information obtained from Facebook to either create a new user or retrieve an existing user. You can use `django-allauth`'s existing functionality to handle this.\n\n4. **Return a Token**:\n   Once the user is authenticated, generate and return an authentication token (e.g., using Django Rest Framework's TokenAuthentication or another token-based authentication system).\n\nHere's a rough implementation to guide you through the process:\n\n```python\nfrom rest_framework import status\nfrom rest_framework.response import Response\nfrom rest_framework.views import APIView\nfrom django.contrib.auth import get_user_model\nfrom allauth.socialaccount.models import SocialAccount\nfrom allauth.socialaccount.providers.facebook.views import FacebookOAuth2Adapter\nfrom dj_rest_auth.registration.views import SocialLoginView\nimport requests\n\nUser = get_user_model()\n\nclass FacebookLoginView(APIView):\n    def post(self, request, *args, **kwargs):\n        access_token = request.data.get('access_token')\n        if not access_token:\n            return Response({'error': 'Access token is required'}, status=status.HTTP_400_BAD_REQUEST)\n\n        # Verify the access token with Facebook\n        app_id = 'your-facebook-app-id'\n        app_secret = 'your-facebook-app-secret'\n        debug_token_url = f'https://graph.facebook.com/debug_token?input_token={access_token}&access_token={app_id}|{app_secret}'\n\n        response = requests.get(debug_token_url)\n        if response.status_code != 200:\n            return Response({'error': 'Invalid access token'}, status=status.HTTP_400_BAD_REQUEST)\n\n        data = response.json()\n        if not data.get('data', {}).get('is_valid'):\n            return Response({'error': 'Invalid access token'}, status=status.HTTP_400_BAD_REQUEST)\n\n        user_id = data['data']['user_id']\n\n        # Retrieve or create the user\n        try:\n            social_account = SocialAccount.objects.get(uid=user_id, provider='facebook')\n            user = social_account.user\n        except SocialAccount.DoesNotExist:\n            # Use Facebook's Graph API to get user info\n            user_info_url = f'https://graph.facebook.com/v10.0/{user_id}?fields=id,name,email&access_token={access_token}'\n            user_data = requests.get(user_info_url).json()\n\n            # Create a new user\n            user = User.objects.create(\n                username=user_data['email'],  # or another unique field\n                email=user_data['email'],\n                first_name=user_data['name'].split()[0],\n                last_name=' '.join(user_data['name'].split()[1:]),\n            )\n            # Create a SocialAccount entry\n            social_account = SocialAccount.objects.create(\n                user=user,\n                uid=user_id,\n                provider='facebook',\n            )\n\n        # Generate a token for the user\n        from rest_framework.authtoken.models import Token\n        token, _ = Token.objects.get_or_create(user=user)\n\n        return Response({'token': token.key}, status=status.HTTP_200_OK)\n\n# In your urls.py\nfrom django.urls import path\n\nurlpatterns = [\n    path('api/facebook-login/', FacebookLoginView.as_view(), name='facebook-login'),\n]\n```\n\n### Important Points:\n- Replace `'your-facebook-app-id'` and `'your-facebook-app-secret'` with your actual Facebook app credentials.\n- Ensure that the `email` field is unique in your `User` model, or adjust the logic to use a different unique identifier.\n- This example uses Django Rest Framework's TokenAuthentication. If you're using JWT or another token method, adjust the token generation part accordingly.\n- Handle any edge cases, such as users who deny permissions or network errors, with appropriate error messages and responses.\n\nThis setup will allow your mobile app to use Facebook's native SDKs for login and then authenticate with your Django backend using the provided endpoint."
    }
]