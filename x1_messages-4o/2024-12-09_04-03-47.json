[
    {
        "role": "user",
        "content": "In Keras, I am using `flow_from_directory` function to load my files. Is there a way to get the file names that were loaded using this method? Here is the code I am currently using:\n\n```python\ndatagen = ImageDataGenerator(\n    rotation_range=3,\n#     featurewise_std_normalization=True,\n    fill_mode='nearest',\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True\n)\n\ntrain_generator = datagen.flow_from_directory(\n        path+'/train',\n        target_size=(224, 224),\n        batch_size=batch_size,)\n\na = np.arange(8).reshape(2, 4)\n# print(a)\n\nprint(train_generator.filenames)\n\ndef generate():\n    while 1:\n        x,y = train_generator.next()\n        yield [x] ,[a,y]\n```\n\nI have a custom generator for my multi output model and I am currently generating random numbers for `a`. However, for actual training, I need to load a `json` file that contains the bounding box coordinates for my images. To do this, I need to obtain the names of the files generated by the `train_generator.next()` method. Once I have this information, I can load the file, parse the `json`, and pass it instead of `a`. It's also crucial that the ordering of the `x` variable and the list of file names I get is the same. Is there a way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this by keeping track of the indices generated by the `flow_from_directory` method in Keras. The `train_generator` object has a property called `index_array`, which provides the indices of the images that are currently being used in the batch. Using these indices, you can map them back to the filenames.\n\nHere's how you can modify your code to achieve this:\n\n1. Use the `index_array` property to get the indices of the images in the current batch.\n2. Use these indices to get the corresponding filenames from the `train_generator.filenames` list.\n\nHere's a modified version of your code to illustrate this:\n\n```python\ndatagen = ImageDataGenerator(\n    rotation_range=3,\n    fill_mode='nearest',\n    width_shift_range=0.2,\n    height_shift_range=0.2,\n    horizontal_flip=True\n)\n\ntrain_generator = datagen.flow_from_directory(\n    path+'/train',\n    target_size=(224, 224),\n    batch_size=batch_size,\n    shuffle=True  # Ensure that the data is shuffled\n)\n\ndef generate():\n    while True:\n        x, y = train_generator.next()\n        # Get the indices of the current batch\n        index_array = train_generator.index_array\n        # Get the filenames for the current batch\n        batch_filenames = [train_generator.filenames[i] for i in index_array[:len(x)]]\n        \n        # Here, you can load your JSON files based on batch_filenames\n        # For demonstration, I'm just printing the filenames\n        print(\"Batch filenames:\", batch_filenames)\n        \n        # Replace `a` with the actual bounding box data parsed from your JSON files\n        # For demonstration, using random numbers for `a`\n        a = np.random.rand(len(batch_filenames), 4)  # Assuming 4 bounding box coordinates\n        \n        yield [x], [a, y]\n\n# Example usage\nfor batch in generate():\n    # Process your batch here\n    break\n```\n\nIn this code, `batch_filenames` will contain the filenames of the images in the current batch, and they will be in the same order as the `x` variable. You can then load your JSON files based on these filenames to get the bounding box coordinates."
    }
]