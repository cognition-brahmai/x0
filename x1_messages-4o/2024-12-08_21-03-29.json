[
    {
        "role": "user",
        "content": "Write pseudocode for a Merge Sort algorithm."
    },
    {
        "role": "assistant",
        "content": "Certainly! Merge Sort is a classic divide-and-conquer algorithm that sorts an array by recursively dividing it into two halves, sorting each half, and then merging the sorted halves back together. Here's a pseudocode for the Merge Sort algorithm:\n\n```\nMERGE-SORT(A, left, right)\n1. If left < right\n2.    middle = (left + right) / 2\n3.    MERGE-SORT(A, left, middle)\n4.    MERGE-SORT(A, middle + 1, right)\n5.    MERGE(A, left, middle, right)\n\nMERGE(A, left, middle, right)\n1. n1 = middle - left + 1\n2. n2 = right - middle\n3. Create arrays L[1...n1] and R[1...n2]\n4. For i = 1 to n1\n5.    L[i] = A[left + i - 1]\n6. For j = 1 to n2\n7.    R[j] = A[middle + j]\n8. i = 1\n9. j = 1\n10. k = left\n11. While i <= n1 and j <= n2\n12.     If L[i] \u2264 R[j]\n13.         A[k] = L[i]\n14.         i = i + 1\n15.     Else\n16.         A[k] = R[j]\n17.         j = j + 1\n18.     k = k + 1\n19. While i <= n1\n20.     A[k] = L[i]\n21.     i = i + 1\n22.     k = k + 1\n23. While j <= n2\n24.     A[k] = R[j]\n25.     j = j + 1\n26.     k = k + 1\n```\n\n### Explanation:\n- **MERGE-SORT Function:** This function takes an array `A`, and the `left` and `right` indices as parameters. It recursively divides the array into two halves, sorts them, and then merges them using the `MERGE` function.\n- **MERGE Function:** This function merges two sorted subarrays `L` and `R` back into the main array `A`. It uses two pointers to track the current element of each subarray and inserts the smaller element into the array `A`.\n\nThe algorithm runs in O(n log n) time complexity, which is efficient for large datasets."
    }
]