[
    {
        "role": "user",
        "content": "How can I use MATLAB to analyze the performance of different sorting algorithms and display the results in a table? Here is a sample code to get you started:\n% Generate random data\ndata = randi(1000,1,1000);\n% Sort using different algorithms and time the execution\ntic\nbubble_sorted = bubbleSort(data);\nbubble_time = toc;\ntic\nmerge_sorted = mergeSort(data);\nmerge_time = toc;\ntic\nquick_sorted = quickSort(data);\nquick_time = toc;\n% Display the results in a table\nalgorithm_names = {'Bubble Sort', 'Merge Sort', 'Quick Sort'};\nexecution_times = [bubble_time, merge_time, quick_time]';\nT = table(algorithm_names, execution_times);\ndisp(T);\nCan you suggest any other sorting algorithms that can be added to the analysis? Please provide the MATLAB code to implement the new algorithm."
    },
    {
        "role": "assistant",
        "content": "Certainly! There are several other sorting algorithms you can analyze in MATLAB. One widely used algorithm is the **Insertion Sort**. Below, I'll provide the MATLAB code to implement Insertion Sort and integrate it into your analysis.\n\n### Insertion Sort Implementation\n\n```matlab\nfunction sortedArray = insertionSort(arr)\n    n = length(arr);\n    for i = 2:n\n        key = arr(i);\n        j = i - 1;\n        while j > 0 && arr(j) > key\n            arr(j + 1) = arr(j);\n            j = j - 1;\n        end\n        arr(j + 1) = key;\n    end\n    sortedArray = arr;\nend\n```\n\n### Integrating Insertion Sort into Your Analysis\n\nAdd the Insertion Sort to your existing script:\n\n```matlab\n% Generate random data\ndata = randi(1000, 1, 1000);\n\n% Sort using different algorithms and time the execution\n\n% Bubble Sort\ntic\nbubble_sorted = bubbleSort(data);\nbubble_time = toc;\n\n% Merge Sort\ntic\nmerge_sorted = mergeSort(data);\nmerge_time = toc;\n\n% Quick Sort\ntic\nquick_sorted = quickSort(data);\nquick_time = toc;\n\n% Insertion Sort\ntic\ninsertion_sorted = insertionSort(data);\ninsertion_time = toc;\n\n% Display the results in a table\nalgorithm_names = {'Bubble Sort', 'Merge Sort', 'Quick Sort', 'Insertion Sort'};\nexecution_times = [bubble_time, merge_time, quick_time, insertion_time]';\nT = table(algorithm_names', execution_times, 'VariableNames', {'Algorithm', 'ExecutionTime'});\ndisp(T);\n```\n\n### Additional Algorithms to Consider\n\n1. **Selection Sort**:\n   - A simple comparison-based algorithm.\n   \n2. **Heap Sort**:\n   - A comparison-based algorithm using a binary heap.\n\n3. **Radix Sort**:\n   - A non-comparison-based algorithm that sorts numbers digit by digit.\n\n4. **Shell Sort**:\n   - An optimization over insertion sort.\n\nIf you want to add any of these algorithms, let me know, and I can provide the MATLAB implementation for them as well!"
    }
]