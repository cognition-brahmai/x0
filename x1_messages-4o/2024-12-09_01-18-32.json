[
    {
        "role": "user",
        "content": "I am working on a project in Python where I have two loops nested within each other. I am trying to have a progress bar for each loop, effectively creating a double progress bar. I'm using the `time.sleep` function to represent some operation happening within each loop. Here's a simplified version of my code:\n\n```python\nimport time\nfor i1 in range(5):\n    for i2 in range(300):\n        # do something, e.g. sleep\n        time.sleep(0.01)\n        # update upper progress bar\n    # update lower progress bar\n```\n\nI want the output to look like this:\n\n```python\n50%|############################                                  |ETA: 0:00:02\n80%|##################################################            |ETA: 0:00:04\n```\n\nHowever, I am unable to accomplish this with the progressbar module as it doesn't seem to support double progress bars. Is there any way around this?"
    },
    {
        "role": "assistant",
        "content": "To achieve a double progress bar in Python, you can use the `tqdm` library, which is great for showing progress bars in loops. While `tqdm` natively supports single progress bars, you can creatively use it to show double progress bars by updating both progress bars manually.\n\nHere's how you can do it:\n\n1. Install `tqdm` if you haven't already:\n\n   ```bash\n   pip install tqdm\n   ```\n\n2. Use `tqdm` to create two separate progress bars, one for the outer loop and one for the inner loop.\n\nHere's a sample code to demonstrate this:\n\n```python\nimport time\nfrom tqdm import tqdm\n\nouter_iterations = 5\ninner_iterations = 300\n\n# Create progress bars\nwith tqdm(total=outer_iterations, desc='Outer Loop', position=0) as outer_bar:\n    for i1 in range(outer_iterations):\n        with tqdm(total=inner_iterations, desc='Inner Loop', position=1, leave=False) as inner_bar:\n            for i2 in range(inner_iterations):\n                # Simulate some work with sleep\n                time.sleep(0.01)\n                # Update inner progress bar\n                inner_bar.update(1)\n        # Update outer progress bar\n        outer_bar.update(1)\n```\n\n### Explanation:\n\n- **`tqdm(total=outer_iterations, desc='Outer Loop', position=0)`**: Initializes a progress bar for the outer loop. `desc` provides a label for the bar, and `position` determines its position on the screen.\n  \n- **`tqdm(total=inner_iterations, desc='Inner Loop', position=1, leave=False)`**: Initializes a progress bar for the inner loop. `leave=False` ensures that the inner progress bar is cleared after completion, preventing clutter.\n\n- **`inner_bar.update(1)`**: Updates the inner progress bar for every iteration of the inner loop.\n\n- **`outer_bar.update(1)`**: Updates the outer progress bar for each iteration of the outer loop.\n\nBy nesting `tqdm` contexts, you can effectively create and manage multiple progress bars in Python. Using `position` allows you to stack them vertically without interference."
    }
]