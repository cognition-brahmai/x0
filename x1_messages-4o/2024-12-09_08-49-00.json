[
    {
        "role": "user",
        "content": "How can I create a Node.js application that searches a movie database and returns movie details based on a specified query?"
    },
    {
        "role": "assistant",
        "content": "Creating a Node.js application that searches a movie database and returns movie details involves a few steps. Here\u2019s a simple guide on how to achieve this using the OMDB API, which provides movie details.\n\n### Step 1: Set Up Your Node.js Environment\n\n1. **Install Node.js**: If you haven't already, download and install Node.js from [nodejs.org](https://nodejs.org/).\n\n2. **Initialize Your Project**: Open your terminal and create a new directory for your project. Navigate into the directory and initialize a new Node.js project:\n   ```bash\n   mkdir movie-search-app\n   cd movie-search-app\n   npm init -y\n   ```\n\n### Step 2: Install Required Packages\n\nYou'll need a package to make HTTP requests. `axios` is a popular choice for this.\n\n```bash\nnpm install axios\n```\n\n### Step 3: Obtain an OMDB API Key\n\n1. Visit [OMDB API](http://www.omdbapi.com/apikey.aspx) and sign up to get a free API key.\n\n### Step 4: Create the Application\n\nCreate a file `app.js` in your project directory and add the following code:\n\n```javascript\nconst axios = require('axios');\n\n// Replace 'YOUR_OMDB_API_KEY' with your actual OMDB API key\nconst OMDB_API_KEY = 'YOUR_OMDB_API_KEY';\nconst OMDB_API_URL = 'http://www.omdbapi.com/';\n\nasync function searchMovie(query) {\n    try {\n        const response = await axios.get(OMDB_API_URL, {\n            params: {\n                apikey: OMDB_API_KEY,\n                s: query\n            }\n        });\n\n        if (response.data.Response === \"True\") {\n            return response.data.Search;\n        } else {\n            console.log(response.data.Error);\n            return [];\n        }\n    } catch (error) {\n        console.error('Error fetching data from OMDB:', error);\n        return [];\n    }\n}\n\nasync function getMovieDetails(movieID) {\n    try {\n        const response = await axios.get(OMDB_API_URL, {\n            params: {\n                apikey: OMDB_API_KEY,\n                i: movieID\n            }\n        });\n\n        if (response.data.Response === \"True\") {\n            return response.data;\n        } else {\n            console.log(response.data.Error);\n            return null;\n        }\n    } catch (error) {\n        console.error('Error fetching movie details from OMDB:', error);\n        return null;\n    }\n}\n\n// Example usage\n(async () => {\n    const query = 'Inception'; // Replace with your search query\n    const movies = await searchMovie(query);\n\n    if (movies.length > 0) {\n        console.log('Movies found:', movies);\n\n        // Get details of the first movie found\n        const movieDetails = await getMovieDetails(movies[0].imdbID);\n        console.log('Movie Details:', movieDetails);\n    } else {\n        console.log('No movies found.');\n    }\n})();\n```\n\n### Step 5: Run Your Application\n\nIn your terminal, run the following command to execute your application:\n\n```bash\nnode app.js\n```\n\n### Explanation\n\n- **searchMovie(query)**: This function takes a search query and returns a list of movies that match the query.\n- **getMovieDetails(movieID)**: This function takes a movie ID (IMDb ID) and returns detailed information about that movie.\n- **axios**: Used to make HTTP requests to the OMDB API.\n\n### Additional Enhancements\n\n- **Error Handling**: Ensure robust error handling to manage API limits and potential errors.\n- **User Input**: Allow users to input search queries dynamically, perhaps using a command-line prompt or a web interface.\n- **Web Interface**: Consider using a framework like Express.js to create a web interface for your application.\n\nThis guide should help you get started with building a simple Node.js application for searching and retrieving movie details from a database like OMDB. You can expand on this by integrating additional features as needed."
    }
]