[
    {
        "role": "user",
        "content": "Given a list of numbers, develop an algorithm to find the maximum sum of a subarray."
    },
    {
        "role": "assistant",
        "content": "To find the maximum sum of a subarray, you can use Kadane's Algorithm, which is an efficient algorithm with a time complexity of O(n). Here's how the algorithm works:\n\n1. Initialize two variables:\n   - `max_current` to the first element of the array. This will store the maximum sum of the subarray ending at the current position.\n   - `max_global` to the first element of the array. This will store the maximum sum of any subarray found so far.\n\n2. Iterate over the array starting from the second element:\n   - For each element, update `max_current` to be the maximum of the current element and the sum of `max_current` and the current element. This step determines whether to include the current element in the existing subarray or start a new subarray with the current element.\n   - Update `max_global` to be the maximum of `max_global` and `max_current`. This keeps track of the largest sum encountered so far.\n\n3. At the end of the iteration, `max_global` will contain the maximum sum of any subarray in the list.\n\nHere's a Python implementation of Kadane's Algorithm:\n\n```python\ndef max_subarray_sum(nums):\n    if len(nums) == 0:\n        return 0\n\n    max_current = nums[0]\n    max_global = nums[0]\n\n    for i in range(1, len(nums)):\n        max_current = max(nums[i], max_current + nums[i])\n        if max_current > max_global:\n            max_global = max_current\n\n    return max_global\n\n# Example usage:\nnumbers = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint(max_subarray_sum(numbers))  # Output: 6, for the subarray [4, -1, 2, 1]\n```\n\nThis algorithm efficiently finds the maximum sum of a subarray by making a single pass through the list, updating the current and global maximum sums as it goes."
    }
]