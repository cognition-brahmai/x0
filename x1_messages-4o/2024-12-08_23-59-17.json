[
    {
        "role": "user",
        "content": "Write a Javascript function that uses the Math.random() method to generate a cryptographically secure random integer within a given range, with the ability to generate a non-repeating set of random numbers. The function should also have options for generating random decimals and for seeding the random number generator."
    },
    {
        "role": "assistant",
        "content": "To achieve the generation of cryptographically secure random numbers, JavaScript provides the `crypto.getRandomValues()` method. However, `crypto.getRandomValues()` doesn't directly support seeding or generating numbers in a range out of the box. We can combine this with custom logic to achieve your requirements. Here's an implementation that covers the generation of random integers, non-repeating sets, random decimals, and a basic form of seeding:\n\n```javascript\nclass SecureRandomGenerator {\n    constructor(seed = null) {\n        this.seed = seed;\n        this.usedValues = new Set();\n    }\n\n    getRandomValues(array) {\n        if (this.seed !== null) {\n            // Basic seeding using seeded array shuffling\n            let seed = this.seed;\n            for (let i = array.length - 1; i > 0; i--) {\n                const j = Math.floor(this.seededRandom(seed) * (i + 1));\n                [array[i], array[j]] = [array[j], array[i]];\n                seed = (seed * 9301 + 49297) % 233280;\n            }\n        } else {\n            crypto.getRandomValues(array);\n        }\n    }\n\n    seededRandom(seed) {\n        const x = Math.sin(seed++) * 10000;\n        return x - Math.floor(x);\n    }\n\n    getRandomInt(min, max) {\n        const range = max - min + 1;\n        const array = new Uint32Array(1);\n        this.getRandomValues(array);\n        return min + array[0] % range;\n    }\n\n    getRandomIntNonRepeating(min, max) {\n        const range = max - min + 1;\n        if (this.usedValues.size >= range) {\n            throw new Error(\"All possible values have been used.\");\n        }\n\n        let randomInt;\n        do {\n            randomInt = this.getRandomInt(min, max);\n        } while (this.usedValues.has(randomInt));\n\n        this.usedValues.add(randomInt);\n        return randomInt;\n    }\n\n    getRandomDecimal(min, max) {\n        const array = new Uint32Array(1);\n        this.getRandomValues(array);\n        return min + (array[0] / 0xFFFFFFFF) * (max - min);\n    }\n\n    resetUsedValues() {\n        this.usedValues.clear();\n    }\n}\n\n// Example Usage\nconst generator = new SecureRandomGenerator();\n\nconsole.log(generator.getRandomInt(1, 10)); // Random integer between 1 and 10\nconsole.log(generator.getRandomIntNonRepeating(1, 10)); // Non-repeating random integer\nconsole.log(generator.getRandomDecimal(0, 1)); // Random decimal between 0 and 1\n\n// Reset used values to allow repeated non-repeating generation\ngenerator.resetUsedValues();\n```\n\n### Key Features:\n- **Cryptographically Secure:** Uses `crypto.getRandomValues()` for secure randomness.\n- **Non-Repeating Integers:** Uses a `Set` to track generated integers and ensures no repetition until all possible values are used.\n- **Decimal Generation:** Generates random decimals within a specified range.\n- **Basic Seeding:** Uses a basic seeding mechanism for reproducibility, though it's not truly cryptographically secure.\n\n### Note:\n- JavaScript doesn't natively support seeded cryptographically secure random generation. The seeding mechanism here is a workaround and should not be used for security-critical applications.\n- The non-repeating integer generation will throw an error if all possible values in the range have been used. Use `resetUsedValues()` to clear the used values and start over."
    }
]