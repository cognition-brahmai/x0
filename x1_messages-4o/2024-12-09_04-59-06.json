[
    {
        "role": "user",
        "content": "I am trying to sort two lists in Python, keeping the initial order for equal numbers in the first list. Here are my lists:\n\n```\nlist1 = [1, 2, 5, 4, 4, 3, 6]\nlist2 = [3, 2, 1, 2, 1, 7, 8]\n```\n\nI am using the following code to sort the lists:\n\n```\nlist1, list2 = (list(x) for x in zip(*sorted(zip(list1, list2))))\n```\n\nThis gives me the following output:\n\n```\nlist1 = [1, 2, 3, 4, 4, 5, 6]\nlist2 = [3, 2, 7, 1, 2, 1, 8]\n```\n\nHowever, I want to maintain the initial order for the equal number 4 in the first list, so the output should look like this:\n\n```\nlist1 = [1, 2, 3, 4, 4, 5, 6]\nlist2 = [3, 2, 7, 2, 1, 1, 8]\n```\n\nWhat amendments do I need to make in my code to achieve this? I prefer not to use a loop for bubble-sorting. Any help would be appreciated."
    },
    {
        "role": "assistant",
        "content": "To maintain the initial order of equal elements in `list1` while sorting, you need a stable sorting algorithm. Python's built-in `sorted()` function is stable by default, meaning it preserves the order of equal elements. However, your current approach isn't utilizing the stable property correctly due to the way you're handling the tuple pairs.\n\nTo fix this, you should ensure that the sorting is based primarily on `list1` and utilizes the stability of the `sorted()` function. Here's how you can achieve this:\n\n```python\n# Original lists\nlist1 = [1, 2, 5, 4, 4, 3, 6]\nlist2 = [3, 2, 1, 2, 1, 7, 8]\n\n# Sort based on list1, utilizing the stable property of sorted()\nsorted_pairs = sorted(zip(list1, list2), key=lambda x: x[0])\n\n# Unzip the sorted pairs back into two separate lists\nlist1, list2 = map(list, zip(*sorted_pairs))\n\nprint(\"list1 =\", list1)\nprint(\"list2 =\", list2)\n```\n\nThis code uses `zip()` to pair elements of `list1` and `list2`, sorts the pairs using `sorted()` with `list1` as the key, and then unzips the sorted pairs back into separate lists. The stable sorting ensures that the relative order of the equal elements (like the `4`s in `list1`) is preserved."
    }
]