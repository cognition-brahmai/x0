[
    {
        "role": "user",
        "content": "I am trying to submit data from HTML forms and validate it with a Pydantic model in FastAPI. However, when I try to post the form data, I receive a \"422 Unprocessable Entity\" HTTP error. The error detail indicates that a field is required, but I have already provided data for \"no\" and \"nm\" fields in the body of the request. My current setup includes a FastAPI application with a \"get\" and \"post\" method for \"/form\" and a Pydantic model \"SimpleModel\" to validate the form data. However, it seems that I am doing something wrong. Can you help me find out the issue?\n\nHere's the code:\n```python\nfrom fastapi import FastAPI, Form\nfrom pydantic import BaseModel\nfrom starlette.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/form\", response_class=HTMLResponse)\ndef form_get():\n    return '''<form method=\"post\"> \n    <input type=\"text\" name=\"no\" value=\"1\"/> \n    <input type=\"text\" name=\"nm\" value=\"abcd\"/> \n    <input type=\"submit\"/> \n    </form>'''\n\nclass SimpleModel(BaseModel):\n    no: int\n    nm: str = \"\"\n\n@app.post(\"/form\", response_model=SimpleModel)\ndef form_post(form_data: SimpleModel = Form(...)):\n    return form_data\n```\nAnd here's the error detail:\n```\n{\n    \"detail\": [\n        {\n            \"loc\": [\n                \"body\",\n                \"form_data\"\n            ],\n            \"msg\": \"field required\",\n            \"type\": \"value_error.missing\"\n        }\n    ]\n}\n```\nI am also using the following curl command to test the post method:\n```\ncurl 'http://localhost:8001/form' -H 'Content-Type: application/x-www-form-urlencoded' --data 'no=1&nm=abcd'\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you are experiencing with the \"422 Unprocessable Entity\" error is due to the way you're trying to use Pydantic's `BaseModel` with FastAPI's `Form` data. When dealing with form data, FastAPI expects each form field to be extracted individually using `Form`, not as a Pydantic model directly.\n\nHere's how you can fix the issue:\n\n1. Extract form fields individually using the `Form` class.\n2. Then, you can create an instance of your Pydantic model using those extracted fields.\n\nHere's the corrected FastAPI code:\n\n```python\nfrom fastapi import FastAPI, Form\nfrom pydantic import BaseModel\nfrom starlette.responses import HTMLResponse\n\napp = FastAPI()\n\n@app.get(\"/form\", response_class=HTMLResponse)\ndef form_get():\n    return '''<form method=\"post\"> \n    <input type=\"text\" name=\"no\" value=\"1\"/> \n    <input type=\"text\" name=\"nm\" value=\"abcd\"/> \n    <input type=\"submit\"/> \n    </form>'''\n\nclass SimpleModel(BaseModel):\n    no: int\n    nm: str = \"\"\n\n@app.post(\"/form\", response_model=SimpleModel)\ndef form_post(no: int = Form(...), nm: str = Form(...)):\n    form_data = SimpleModel(no=no, nm=nm)\n    return form_data\n```\n\n### Explanation:\n\n1. **Form Data Extraction**: The `Form` class is used to specify that the data is coming from an HTML form. Each field (`no` and `nm`) is extracted individually.\n2. **Model Instantiation**: After extracting the fields, you create an instance of `SimpleModel` by passing the extracted fields as arguments.\n\nWith this setup, your FastAPI application should correctly process the form data without the \"422 Unprocessable Entity\" error. The `curl` command you provided should work as expected with this corrected setup."
    }
]