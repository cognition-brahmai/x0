[
    {
        "role": "user",
        "content": "I am working with Django 1.5 and I am unsure about how to best access URL-parameters in class-based-views. For example, I have a class-based view 'Yearly' and a URL configuration where I have a 'year' parameter. I want to use this 'year' parameter in my view for certain logic. I have also written a bit of logic to check the current year and month. How can I access the 'year' URL parameter in my class-based view that is a subclass of 'TemplateView'? Where should I ideally place this logic in the code?\n\nHere's the relevant code I'm working with:\n\nView:\n```python\nfrom django.views.generic.base import TemplateView\n\nclass Yearly(TemplateView):\n    template_name = \"calendars/yearly.html\"\n\n    current_year = datetime.datetime.now().year\n    current_month = datetime.datetime.now().month\n\n    def get_context_data(self, **kwargs):\n        context = super(Yearly, self).get_context_data(**kwargs)\n        context['current_year'] = self.current_year\n        context['current_month'] = self.current_month\n        return context\n```\nURLCONF:\n```python\nfrom .views import Yearly\n\nurlpatterns = patterns('',\n    url(\n        regex=r'^(?P<year>\\d+)/$',\n        view=Yearly.as_view(),\n        name='yearly-view'\n    ),\n)\n```\nLogic:\n```python\nmonth_names = [\n    \"January\", \"February\", \"March\", \"April\", \n    \"May\", \"June\", \"July\", \"August\", \n    \"September\", \"October\", \"November\", \"December\"\n]\n\nfor month, month_name in enumerate(month_names, start=1):\n    is_current = False\n    if year == current_year and month == current_month:\n        is_current = True\n        months.append({\n            'month': month,\n            'name': month_name,\n            'is_current': is_current\n        })\n```"
    },
    {
        "role": "assistant",
        "content": "To access URL parameters in a class-based view in Django, you can use the `kwargs` dictionary that is available in methods like `get_context_data`. In your case, the `year` parameter from the URL can be accessed as part of the `kwargs` dictionary passed to these methods. Here's how you can modify your `Yearly` view to incorporate this:\n\n1. Access the `year` parameter from the URL.\n2. Update your logic to incorporate this `year` parameter.\n\nHere's how you can do it:\n\n```python\nfrom django.views.generic.base import TemplateView\nimport datetime\n\nclass Yearly(TemplateView):\n    template_name = \"calendars/yearly.html\"\n\n    current_year = datetime.datetime.now().year\n    current_month = datetime.datetime.now().month\n\n    def get_context_data(self, **kwargs):\n        # Access the URL parameter 'year'\n        year = int(kwargs.get('year', self.current_year))  # Default to current year if not provided\n\n        context = super(Yearly, self).get_context_data(**kwargs)\n        context['current_year'] = self.current_year\n        context['current_month'] = self.current_month\n\n        # Your logic to determine months\n        month_names = [\n            \"January\", \"February\", \"March\", \"April\", \n            \"May\", \"June\", \"July\", \"August\", \n            \"September\", \"October\", \"November\", \"December\"\n        ]\n\n        months = []\n        for month, month_name in enumerate(month_names, start=1):\n            is_current = (year == self.current_year and month == self.current_month)\n            months.append({\n                'month': month,\n                'name': month_name,\n                'is_current': is_current\n            })\n        \n        context['months'] = months\n\n        return context\n```\n\n### Explanation:\n\n- **Accessing the `year` Parameter**: In the `get_context_data` method, you retrieve the `year` parameter from `kwargs` using `kwargs.get('year')`. If for some reason the `year` parameter is not present, it defaults to the current year by using `self.current_year`.\n\n- **Incorporating the Year in Logic**: The logic to determine whether a month is the current month is updated to check against the `year` obtained from the URL.\n\n- **Populating Context**: The `months` list containing month information is added to the context, so it can be used in your template.\n\nThis setup allows your class-based view to dynamically handle different years based on the URL parameter, while also providing current month/year information."
    }
]