[
    {
        "role": "user",
        "content": "Is it possible to create an HTTP server in Node.js that responds with \"Hello World\" when receiving a GET request? Could you provide an example of how to accomplish this?"
    },
    {
        "role": "assistant",
        "content": "Yes, it is definitely possible to create an HTTP server in Node.js that responds with \"Hello World\" when it receives a GET request. Node.js is well-suited for building web servers due to its non-blocking I/O and event-driven architecture. Here's a simple example of how you can accomplish this:\n\n```javascript\n// Import the built-in 'http' module\nconst http = require('http');\n\n// Create an HTTP server\nconst server = http.createServer((req, res) => {\n  // Check if the request method is GET\n  if (req.method === 'GET') {\n    // Set the response HTTP header with HTTP status and Content type\n    res.writeHead(200, { 'Content-Type': 'text/plain' });\n    // Send the response body \"Hello World\"\n    res.end('Hello World\\n');\n  } else {\n    // If the request is not a GET request, respond with a 405 Method Not Allowed\n    res.writeHead(405, { 'Content-Type': 'text/plain' });\n    res.end('Method Not Allowed\\n');\n  }\n});\n\n// The server listens on port 3000\nconst PORT = 3000;\nserver.listen(PORT, () => {\n  console.log(`Server running at http://localhost:${PORT}/`);\n});\n```\n\nThis code does the following:\n\n1. Imports the `http` module which is part of Node.js's core modules.\n2. Creates an HTTP server that listens for incoming requests.\n3. The server checks if the incoming request method is `GET`.\n4. If it is a GET request, it responds with a status code of 200 and the text \"Hello World\".\n5. If the request is not a GET request, it responds with a 405 Method Not Allowed status.\n6. The server listens on port 3000, and a message is printed to the console indicating that the server is running.\n\nTo run this server, save the code to a file, for example `server.js`, and execute it using Node.js:\n\n```bash\nnode server.js\n```\n\nYou can then open your web browser or use a tool like `curl` to visit `http://localhost:3000` and you should see \"Hello World\" as the response."
    }
]