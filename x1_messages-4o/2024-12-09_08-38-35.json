[
    {
        "role": "user",
        "content": "How can I programmatically obtain a Google Cloud Platform (GCP) Bearer token using Python? I am aware that the shell command `gcloud auth print-access-token` gives me a Bearer token for later use, but I want to do this with Python. I have seen an earlier example using oauth2client, but it is now deprecated. What is the method for achieving this with google.auth and oauthlib?"
    },
    {
        "role": "assistant",
        "content": "To obtain a Google Cloud Platform (GCP) Bearer token programmatically using Python, you can use the `google-auth` library, which is the recommended way to handle authentication with GCP in Python. Here's how you can do it:\n\n1. **Install the necessary libraries**:\n   Make sure you have the `google-auth` and `google-auth-oauthlib` libraries installed. You can install them using pip if you haven't already:\n\n   ```bash\n   pip install google-auth google-auth-oauthlib\n   ```\n\n2. **Obtain the credentials**:\n   You can obtain credentials either from a service account JSON file or by using user credentials. Here's how to get the Bearer token using a service account:\n\n   ```python\n   from google.oauth2 import service_account\n   import google.auth.transport.requests\n\n   # Path to your service account key file\n   SERVICE_ACCOUNT_FILE = 'path/to/your/service-account-file.json'\n\n   # Specify the scopes required for your application\n   SCOPES = ['https://www.googleapis.com/auth/cloud-platform']\n\n   # Create credentials using the service account file and scopes\n   credentials = service_account.Credentials.from_service_account_file(\n       SERVICE_ACCOUNT_FILE, scopes=SCOPES)\n\n   # Use the credentials to request an access token\n   auth_request = google.auth.transport.requests.Request()\n   credentials.refresh(auth_request)\n\n   # Get the Bearer token\n   bearer_token = credentials.token\n\n   print(\"Bearer Token:\", bearer_token)\n   ```\n\n3. **Using user credentials**:\n   If you need to authenticate as a user instead of a service account, you can use the OAuth 2.0 flow with `google-auth-oauthlib`. Here\u2019s a basic example:\n\n   ```python\n   from google.auth.transport.requests import Request\n   from google.oauth2.credentials import Credentials\n   from google_auth_oauthlib.flow import InstalledAppFlow\n\n   # The file token.json stores the user's access and refresh tokens, and is\n   # created automatically when the authorization flow completes for the first time.\n   TOKEN_FILE = 'token.json'\n   CLIENT_SECRET_FILE = 'path/to/your/client_secret.json'\n   SCOPES = ['https://www.googleapis.com/auth/cloud-platform']\n\n   creds = None\n   # Load credentials from the token.json file if it exists\n   if os.path.exists(TOKEN_FILE):\n       creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)\n   # If there are no valid credentials available, let the user log in.\n   if not creds or not creds.valid:\n       if creds and creds.expired and creds.refresh_token:\n           creds.refresh(Request())\n       else:\n           flow = InstalledAppFlow.from_client_secrets_file(\n               CLIENT_SECRET_FILE, SCOPES)\n           creds = flow.run_local_server(port=0)\n       # Save the credentials for the next run\n       with open(TOKEN_FILE, 'w') as token:\n           token.write(creds.to_json())\n\n   # Get the Bearer token\n   bearer_token = creds.token\n\n   print(\"Bearer Token:\", bearer_token)\n   ```\n\nMake sure you replace `'path/to/your/service-account-file.json'` and `'path/to/your/client_secret.json'` with the paths to your actual credential files. The `SCOPES` variable should include the necessary scopes for your application. This approach will allow you to obtain a Bearer token programmatically using Python."
    }
]