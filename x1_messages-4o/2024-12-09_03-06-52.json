[
    {
        "role": "user",
        "content": "In Python, how do I use type hinting to indicate that a given variable is a subclass of a specific class? For instance, given the following code snippet:\n\n```python\nclass A(object):\n    pass\n\nclass B(A):\n    pass\n\ndef register(cls: type[A]):\n    assert issubclass(cls, A)\n\nregister(A)\nregister(B)\n```\n\nI am trying to use `cls: type[A]` to indicate that `cls` is a class or type that subclasses `A`. However, I am unsure if this is the correct approach. If I were to use `cls: A` instead, it would imply that `cls` is an instance of `A`, which is not my intention. Specifically, I want to indicate that the parameter should be a Django model type. What is the correct way to write this type hint in Python?"
    },
    {
        "role": "assistant",
        "content": "In Python, when you want to use type hinting to indicate that a variable should be a subclass of a specific class, you can indeed use the `Type` hint from the `typing` module. This is useful when you want to specify that a parameter should be a class itself, not an instance, and that it should be a subclass of a particular class. \n\nIn your case, where you want to ensure that the parameter to the `register` function is a subclass of `A`, you should use `Type[A]`. This indicates that the parameter is expected to be a class (not an instance) that is a subclass of `A`. Here's how you can write this:\n\n```python\nfrom typing import Type\n\nclass A(object):\n    pass\n\nclass B(A):\n    pass\n\ndef register(cls: Type[A]):\n    assert issubclass(cls, A)\n\nregister(A)  # This will work\nregister(B)  # This will also work\n```\n\nUsing `Type[A]` is the correct approach here, as it allows you to specify that `cls` must be a type (i.e., a class) that is either `A` or a subclass of `A`. This is particularly useful in frameworks like Django, where you might want to enforce that a function operates on model classes rather than instances."
    }
]