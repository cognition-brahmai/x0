[
    {
        "role": "user",
        "content": "How can I create functions in Python to format data into and parse data from JSON format?"
    },
    {
        "role": "assistant",
        "content": "To handle JSON data in Python, you can use the built-in `json` module, which provides methods to convert Python objects to JSON format and parse JSON data back into Python objects. Here's a step-by-step guide to creating functions for these tasks:\n\n### Converting Python Objects to JSON\n\nTo convert Python objects (like dictionaries, lists, etc.) into JSON format, you can use the `json.dumps()` function. Here's how you can create a function for this:\n\n```python\nimport json\n\ndef format_to_json(data):\n    \"\"\"\n    Convert a Python object to a JSON string.\n\n    Args:\n    data (dict or list): The Python object to convert.\n\n    Returns:\n    str: The JSON formatted string.\n    \"\"\"\n    try:\n        json_string = json.dumps(data, indent=4)\n        return json_string\n    except (TypeError, ValueError) as e:\n        return f\"Error in converting to JSON: {e}\"\n\n# Example usage:\npython_data = {'name': 'John', 'age': 30, 'city': 'New York'}\njson_string = format_to_json(python_data)\nprint(json_string)\n```\n\n### Parsing JSON Data to Python Objects\n\nTo parse JSON-formatted strings back into Python objects, you can use the `json.loads()` function. Here's how you can create a parsing function:\n\n```python\nimport json\n\ndef parse_json(json_string):\n    \"\"\"\n    Parse a JSON string to a Python object.\n\n    Args:\n    json_string (str): The JSON string to parse.\n\n    Returns:\n    dict or list: The resulting Python object.\n    \"\"\"\n    try:\n        data = json.loads(json_string)\n        return data\n    except json.JSONDecodeError as e:\n        return f\"Error in parsing JSON: {e}\"\n\n# Example usage:\njson_string = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'\npython_data = parse_json(json_string)\nprint(python_data)\n```\n\n### Key Points:\n\n- The `json.dumps()` function is used to convert Python objects to a JSON string. The `indent` parameter is optional and is used to pretty-print the JSON string.\n- The `json.loads()` function is used to convert a JSON string back into a Python object.\n- Both functions include error handling to manage potential exceptions (`TypeError`, `ValueError`, `JSONDecodeError`).\n\nBy using these functions, you can easily format data to JSON and parse data from JSON in your Python applications."
    }
]