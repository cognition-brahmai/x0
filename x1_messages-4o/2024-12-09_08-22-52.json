[
    {
        "role": "user",
        "content": "I'm using SQLite3 with Python 2.5 and trying to iterate through a list to extract the weight of an item from a database based on the item's name. I'm using the \"?\" parameter substitution to prevent SQL injections, but it's not working. Here's the code I'm using:\n\n```python\nfor item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", item)\n    self.cursor.close()\n```\nThis results in an error: \"sqlite3.ProgrammingError: Incorrect number of bindings supplied. The current statement uses 1, and there are 8 supplied.\"\n\nI suspect the error is somehow related to the initial creation of the database, which includes 8 bindings:\n\n```python\ncursor.execute(\"\"\"\nCREATE TABLE Equipment \n    (id INTEGER PRIMARY KEY, \n    name TEXT,\n    price INTEGER, \n    weight REAL, \n    info TEXT, \n    ammo_cap INTEGER, \n    availability_west TEXT,\n    availability_east TEXT)\n\"\"\")\n```\nHowever, when I use the less-secure \"%s\" substitution, it works as expected:\n\n```python\nfor item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = '%s'\" % item)\n    self.cursor.close()\n```\nI'm confused as to why it thinks I have 8 bindings when I'm only calling one. How can I solve this?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is due to how parameter substitution is being used in your query. The error message indicates that the `execute` method is expecting a tuple or list containing the parameters for the query. When you pass `item` directly, it's treating the string as an iterable and thus sees it as multiple parameters instead of one.\n\nTo fix this, you need to pass `item` as a single-element tuple or list. Here's how you can correct the code:\n\n```python\nfor item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", (item,))\n    # You do not want to close the cursor inside the loop\n    # self.cursor.close()\n```\n\nNotice the comma after `item` inside the parentheses. This creates a single-element tuple, which is what the `execute` method expects when using parameter substitution with `?`.\n\nAlso, it's a good practice to close the cursor after you've finished all operations with it, not within the loop. If you close the cursor inside the loop, it will be closed after the first iteration, which will cause an error on subsequent iterations.\n\nIf you need to close the cursor, do it outside the loop:\n\n```python\nfor item in self.inventory_names:\n    self.cursor.execute(\"SELECT weight FROM Equipment WHERE name = ?\", (item,))\n\nself.cursor.close()  # Close the cursor after the loop\n```\n\nBy making these changes, your code should work as expected with the `?` parameter substitution, protecting against SQL injection."
    }
]