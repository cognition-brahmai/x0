[
    {
        "role": "user",
        "content": "I am trying to write a Python program that checks a list for any duplicates. If any duplicates are found, they should be removed and a new list should be returned, containing only the non-duplicated items. I have started with the following code, but I'm not sure how to proceed further:\n\n```\ndef remove_duplicates():\n    t = ['a', 'b', 'c', 'd']\n    t2 = ['a', 'c', 'd']\n    for t in t2:\n        t.append(t.remove())\n    return t\n```\n\nCould someone guide me on how to correctly implement this functionality?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To remove duplicates from a list and return a new list containing only the unique items, you can use a set to keep track of seen items. Here's a corrected version of your code:\n\n```python\ndef remove_duplicates(input_list):\n    seen = set()  # This set will keep track of items already added to the new list\n    unique_items = []  # This list will store the unique items\n\n    for item in input_list:\n        if item not in seen:\n            unique_items.append(item)  # Add item to the list if it hasn't been seen\n            seen.add(item)  # Mark item as seen\n\n    return unique_items\n\n# Example usage\noriginal_list = ['a', 'b', 'c', 'd', 'a', 'c', 'd']\nresult = remove_duplicates(original_list)\nprint(result)  # Output will be ['a', 'b', 'c', 'd']\n```\n\n### Explanation:\n1. **Set for Tracking**: We use a set `seen` to keep track of items we have already encountered. Sets are perfect for this because they automatically handle duplicates for you.\n\n2. **Loop Through List**: We iterate over each item in the `input_list`.\n\n3. **Check and Add**: For each item, we check if it is not in `seen`. If it is not, we add it to the `unique_items` list and mark it as seen by adding it to the `seen` set.\n\n4. **Return Unique Items**: Finally, we return the `unique_items` list, which contains only the non-duplicated items from the original list.\n\nThis approach maintains the order of first appearance of each unique item, which can be important in many applications."
    }
]