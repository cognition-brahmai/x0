[
    {
        "role": "user",
        "content": "How can I add a jQuery script to the Django admin interface to automatically fill in the 'query' field after entering text in the 'acronym' field in a 'Lab' model? Here's my model:\n\n```python\nfrom django.db import models\n\nclass Lab(models.Model):\n    acronym = models.CharField(max_length=20)\n    query = models.TextField()\n```\n\nThe 'query' field is almost always the same as the 'acronym' field. So, if I add a new lab to the database through the Django admin interface, fill in the 'acronym' field with a value like 'ABCD', I want the 'query' field to automatically be completed with the same value."
    },
    {
        "role": "assistant",
        "content": "To achieve this functionality, you can customize the Django admin interface by adding a jQuery script to automatically fill in the 'query' field after entering text in the 'acronym' field. Here's a step-by-step guide to implement this:\n\n1. **Create a Custom Admin Class**: First, create a custom admin class for your `Lab` model.\n\n2. **Add a Media Class**: Include the jQuery script in the `Media` class of the admin class to ensure it's loaded in the admin interface.\n\n3. **Write the jQuery Script**: Write a simple jQuery script to copy the value from the 'acronym' field to the 'query' field whenever the 'acronym' field changes.\n\nHere is how you can do it:\n\n```python\n# admin.py\n\nfrom django.contrib import admin\nfrom .models import Lab\n\nclass LabAdmin(admin.ModelAdmin):\n    class Media:\n        js = ('admin/js/jquery.init.js',  # Ensure jQuery is loaded\n              'admin/js/lab_autofill.js',)  # Include your custom script\n\nadmin.site.register(Lab, LabAdmin)\n```\n\n4. **Create the jQuery Script**: Now, create a static JavaScript file `lab_autofill.js` in your static files directory. Here's what the content of the file could look like:\n\n```javascript\n// static/admin/js/lab_autofill.js\n\n(function($) {\n    $(document).ready(function() {\n        $('#id_acronym').on('input', function() {\n            var acronymValue = $(this).val();\n            $('#id_query').val(acronymValue);\n        });\n    });\n})(django.jQuery);\n```\n\n5. **Ensure Static Files are Served**: Make sure Django is properly serving your static files. During development, ensure `django.contrib.staticfiles` is included in your `INSTALLED_APPS` and run `python manage.py collectstatic` if necessary.\n\n6. **Verify in the Admin Interface**: Log in to your Django admin site, navigate to the `Lab` model's add or change form, and test if entering text in the 'acronym' field automatically fills the 'query' field.\n\nBy following these steps, you should be able to achieve the desired functionality in the Django admin interface using jQuery."
    }
]