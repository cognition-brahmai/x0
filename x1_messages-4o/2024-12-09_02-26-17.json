[
    {
        "role": "user",
        "content": "How can I create a mutually exclusive option group in Python using Click? I want to implement a feature where I can either accept the flag \"--all\" or take an option with a parameter like \"--color red\"."
    },
    {
        "role": "assistant",
        "content": "To create a mutually exclusive option group using the Click library in Python, you can define a custom Click command that checks for the presence of these options and raises an error if both are provided. Below is an example of how you can implement this functionality:\n\n```python\nimport click\n\nclass MutuallyExclusiveOption(click.Option):\n    def __init__(self, *args, **kwargs):\n        self.mutually_exclusive = set(kwargs.pop('mutually_exclusive', []))\n        help_text = kwargs.get('help', '')\n        if self.mutually_exclusive:\n            ex_str = ', '.join(self.mutually_exclusive)\n            kwargs['help'] = help_text + (\n                ' NOTE: This argument is mutually exclusive with '\n                ' arguments: [' + ex_str + '].'\n            )\n        super(MutuallyExclusiveOption, self).__init__(*args, **kwargs)\n\n    def handle_parse_result(self, ctx, opts, args):\n        if self.mutually_exclusive.intersection(opts) and self.name in opts:\n            raise click.UsageError(\n                \"Illegal usage: '{}' is mutually exclusive with \"\n                \"arguments: [{}].\".format(self.name, ', '.join(self.mutually_exclusive))\n            )\n\n        return super(MutuallyExclusiveOption, self).handle_parse_result(ctx, opts, args)\n\n@click.command()\n@click.option('--all', is_flag=True, cls=MutuallyExclusiveOption, mutually_exclusive=['color'])\n@click.option('--color', type=str, cls=MutuallyExclusiveOption, mutually_exclusive=['all'])\ndef cli(all, color):\n    if all:\n        click.echo(\"Option '--all' selected\")\n    elif color:\n        click.echo(f\"Option '--color' selected with value: {color}\")\n\nif __name__ == '__main__':\n    cli()\n```\n\n### Explanation:\n\n1. **Custom Option Class**: We define a custom class `MutuallyExclusiveOption` that inherits from `click.Option`. This class takes an additional parameter `mutually_exclusive` which is a list of other option names that this option is mutually exclusive with.\n\n2. **Help Message Enhancement**: The constructor of the custom class appends a note to the help text mentioning the mutually exclusive options.\n\n3. **Mutual Exclusion Logic**: In the `handle_parse_result` method, we check if both the current option and any mutually exclusive options are present in the command line arguments. If they are, a `UsageError` is raised.\n\n4. **Command Definition**: In the `cli` command, we use the custom class to define the `--all` and `--color` options, specifying the mutual exclusion between them.\n\nWith this setup, if a user tries to run the script with both `--all` and `--color`, an error will be raised indicating the improper usage."
    }
]