[
    {
        "role": "user",
        "content": "In Python, what is the equivalent of 'functools.partial' for a class or a constructor? I'm trying to create a class that behaves like `collections.defaultdict`, without the usage code specifying the factory. When I try using `functools.partial` as shown in the code below, `isinstance(Config(), Config)` fails. I believe this issue indicates that there could be more problems deeper in the code. Is there a way to actually achieve this?\n\n```python\nclass Config(collections.defaultdict):\n    pass\n\nConfig = functools.partial(collections.defaultdict, list)\n\nisinstance(Config(), Config)\n```\nI also tried to use `functools.partial` in `__init__` like this:\n\n```python\nclass Config(Object):\n    __init__ = functools.partial(collections.defaultdict, list)\n```"
    },
    {
        "role": "assistant",
        "content": "When you use `functools.partial`, it returns a callable that behaves like the original function but with some arguments pre-filled. However, `functools.partial` does not create a subclass or mimic the class behavior in terms of inheritance checks like `isinstance`.\n\nIf you want to create a class that behaves like `collections.defaultdict` with a predefined factory (like `list`), you can subclass `collections.defaultdict` and customize the constructor. Here's how you can achieve this:\n\n```python\nimport collections\n\nclass Config(collections.defaultdict):\n    def __init__(self):\n        super().__init__(list)\n\n# Now Config behaves like a defaultdict with list as the default factory\nconfig_instance = Config()\n\nprint(isinstance(config_instance, Config))  # True\nprint(isinstance(config_instance, collections.defaultdict))  # True\n\n# Usage example\nconfig_instance['key'].append(1)\nprint(config_instance['key'])  # Output: [1]\n```\n\nIn this example, `Config` is a subclass of `collections.defaultdict` with `list` as the default factory. This way, `isinstance(config_instance, Config)` will return `True`, and it will behave like a `defaultdict` with `list` as the default value factory.\n\nThis approach maintains the expected behavior of both `isinstance` checks and functionality."
    }
]