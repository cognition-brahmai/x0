[
    {
        "role": "user",
        "content": "How can I make sans-serif superscript or subscript text in matplotlib without using LaTeX? I am currently using `$N_i$` in my code to set a subscript in an axis label in a matplotlib figure, but it gives me an italic serif font. I am aware I can use `\\mathrm` to get non-italic mathfont, but I want the text in the default matplotlib sans-serif font so it complements the rest of the text in the figure."
    },
    {
        "role": "assistant",
        "content": "To achieve sans-serif superscript or subscript text in Matplotlib without relying on LaTeX, you can use Unicode characters for superscripts and subscripts. This method allows you to maintain a consistent sans-serif style throughout your plot. Here\u2019s how you can do it:\n\n1. **Unicode Characters**: Use Unicode characters for subscripts and superscripts. For example, the Unicode for subscript 'i' is `\\u1d62`, and superscript 'i' is `\\u2071`.\n\n2. **Using `set_label`**: You can directly set the axis label using these Unicode characters.\n\nHere is an example of how you can do this in your Matplotlib code:\n\n```python\nimport matplotlib.pyplot as plt\n\n# Data for plotting\nx = [1, 2, 3, 4, 5]\ny = [2, 3, 5, 7, 11]\n\n# Create a plot\nfig, ax = plt.subplots()\n\n# Plot data\nax.plot(x, y)\n\n# Set labels using Unicode characters for subscripts/superscripts\nax.set_xlabel('N\\u1d62')  # N with subscript i\nax.set_ylabel('N\\u2071')  # N with superscript i\n\n# Show the plot\nplt.show()\n```\n\nThis method allows you to use the default sans-serif font in Matplotlib while adding subscript or superscript text. You can find more Unicode superscript and subscript characters if you need different ones for your specific use case. This approach does not require LaTeX and keeps the font style consistent with the rest of your plot."
    }
]