[
    {
        "role": "user",
        "content": "How can I send a latitude and longitude point as a JSON object from Python to Javascript using Jinja in Flask? I'm trying to send data to a Javascript function, but the standard Jinja notation of variable = {{ data }} isn't working. I found some advice that using eval was necessary, but I'm not sure if that's the best approach. \n\nHere's my Python code:\n\n```python\n@app.route('/')\ndef homepage():\n    lat_lng = (39.7392,-104.9847) \n    return render_template(\"index_v2.html\", lat_lng=json.dumps(lat_lng))\n```\nAnd here's my HTML with Javascript code:\n\n```html\n<script type='text/javascript'>\n    var map;\n    function initialize() {\n      // Create the map.\n      var lat_lng = eval('({{ lat_lng }})')\n      map = new google.maps.Map(document.getElementById('map-canvas'), {\n        zoom: 8,\n        center: new google.maps.LatLng(lat_lng)\n      });\n\n    }\n\n    google.maps.event.addDomListener(window, 'load', initialize);\n</script>\n```"
    },
    {
        "role": "assistant",
        "content": "To send a latitude and longitude point as a JSON object from Python to JavaScript using Jinja in Flask, you do not need to use `eval`, which can pose security risks. Instead, you can directly pass the data in a way that JavaScript can interpret it as an object. You can achieve this by ensuring the data is correctly formatted and safely embedded in your HTML.\n\nHere's how you can modify your code to achieve this:\n\n### Python Code\n\nIn your Flask route, you are correctly using `json.dumps()` to serialize the tuple into a JSON string. This is good practice as it ensures the data is properly formatted for JavaScript.\n\n```python\nfrom flask import Flask, render_template\nimport json\n\napp = Flask(__name__)\n\n@app.route('/')\ndef homepage():\n    lat_lng = (39.7392, -104.9847)\n    return render_template(\"index_v2.html\", lat_lng=json.dumps(lat_lng))\n```\n\n### HTML with JavaScript Code\n\nYou should use Jinja to insert the JSON string directly into JavaScript. You can achieve this by ensuring it is evaluated correctly as a JavaScript object:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Map</title>\n    <script type='text/javascript' src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY\"></script>\n    <script type='text/javascript'>\n        function initialize() {\n            // Parse the JSON string into a JavaScript object\n            var lat_lng = JSON.parse('{{ lat_lng | safe }}');\n            \n            // Create the map centered on the passed lat_lng\n            var map = new google.maps.Map(document.getElementById('map-canvas'), {\n                zoom: 8,\n                center: new google.maps.LatLng(lat_lng[0], lat_lng[1])\n            });\n        }\n\n        google.maps.event.addDomListener(window, 'load', initialize);\n    </script>\n</head>\n<body>\n    <div id=\"map-canvas\" style=\"width: 600px; height: 400px;\"></div>\n</body>\n</html>\n```\n\n### Key Points\n\n1. **JSON Handling**: Use `JSON.parse()` to safely convert the JSON string into a JavaScript object. This avoids the security risks associated with `eval`.\n\n2. **Jinja `safe` Filter**: Use the `| safe` filter in Jinja to ensure that the JSON string is rendered properly without being escaped in HTML.\n\n3. **JavaScript Array Access**: As `lat_lng` is a tuple in Python and becomes an array in JavaScript, access its elements using indices (`lat_lng[0]` for latitude and `lat_lng[1]` for longitude).\n\nWith these steps, you can safely and effectively pass latitude and longitude data from your Flask backend to the JavaScript frontend for use in initializing maps or other applications. Remember to replace `\"YOUR_API_KEY\"` with your actual Google Maps API key."
    }
]