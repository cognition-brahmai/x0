[
    {
        "role": "user",
        "content": "How can I compress a directory using shutil.make_archive() in Python while preserving the directory structure? I'm trying to zip a directory called 'test_dicoms' to a zip file named 'test_dicoms.zip' using the following code: `shutil.make_archive('/home/code/test_dicoms', 'zip', '/home/code/test_dicoms')`. However, when I unzip it, all of the files that were in '/test_dicoms/' are extracted to '/home/code/' instead of being extracted to '/home/code/test_dicoms/'. For example, if '/test_dicoms/' has a file called 'foo.txt', after zipping and unzipping, 'foo.txt's path becomes '/home/code/foo.txt' instead of '/home/code/test_dicoms/foo.txt'. How can I maintain the original directory structure during this process? Also, some of the directories I'm working with are very large. Do I need to add anything to my code to make it ZIP64, or does shutil.make_archive() handle that automatically?"
    },
    {
        "role": "assistant",
        "content": "To preserve the directory structure when compressing a directory with `shutil.make_archive()`, you need to specify the root directory and the base directory correctly. This ensures that the directory you want to compress is included in the zip file with its original structure intact.\n\nHere's how you can achieve this:\n\n```python\nimport shutil\nimport os\n\n# Set the directory you want to compress\nroot_dir = '/home/code'\nbase_dir = 'test_dicoms'\n\n# Make the archive\nshutil.make_archive(os.path.join(root_dir, base_dir), 'zip', root_dir, base_dir)\n```\n\nIn this code:\n\n- `root_dir` is the parent directory of `test_dicoms`.\n- `base_dir` is the name of the directory you want to compress (`test_dicoms`).\n- When you pass both `root_dir` and `base_dir` to `shutil.make_archive()`, it will preserve the directory structure inside the zip file.\n\nRegarding ZIP64, `shutil.make_archive()` automatically supports large files and directories that require ZIP64 extensions. You don't need to do anything extra for enabling ZIP64 support; it's handled by default if the archive size exceeds the ZIP format's standard 4 GiB limit.\n\nBy using the above code, when you unzip `test_dicoms.zip`, you should see the `test_dicoms` directory with all its contents preserved in the original structure."
    }
]