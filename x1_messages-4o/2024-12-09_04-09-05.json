[
    {
        "role": "user",
        "content": "I am new to Django and I have created an excel parser using xlrd. While the data loads swiftly, I am having trouble updating the file info in the database to track the load progress. The save() method does not seem to work and I have also tried using update with get and filter but it continues to show the same issue. Here is the models.py and views.py files that I have written:\n\nmodels.py:\n\n```python\nclass archivo(models.Model):\n    archivo_id = models.AutoField(primary_key=True)\n    fk_cliente = models.IntegerField()\n    fk_usuario = models.IntegerField()\n    archivo_nombre = models.CharField(max_length = 30)\n    archivo_original = models.CharField(max_length = 255)\n    archivo_extension = models.CharField(max_length = 5)\n    archivo_tamano = models.FloatField()\n    archivo_registros = models.IntegerField()\n    archivo_registros_buenos = models.IntegerField()\n    archivo_registros_malos = models.IntegerField()\n    archivo_registros_cargados = models.IntegerField()\n    archivo_fecha_carga = models.DateTimeField()\n    archivo_fecha_envio = models.DateTimeField()\n    def __unicode__(self):\n        return self.archivo_id\n```\n\nviews.py:\n\n```python\nfrom procesa.models import *\nfrom django.conf import settings\nfrom django.shortcuts import render_to_response  \nimport xlrd\nfrom time import strftime\nfrom symbol import except_clause\ndef procesa(request, procesar = 0):\n    datos = None\n    infoarchivo = None\n    if(procesar > 0):\n        try:\n            infoarchivo = archivo.objects.get(archivo_id=int(procesar))\n        except:\n            return render_to_response('error.html')\n\n    if (infoarchivo is not None):\n        excel_path = settings.FILES_URL+infoarchivo.archivo_original\n        wb = xlrd.open_workbook(str(excel_path))\n        sh = wb.sheet_by_index(0)\n        ##START UPDATE##\n        infoarchivo2 = archivo.objects.filter(archivo_id = procesar)\n        infoarchivo2.archivo_registros = sh.nrows\n        infoarchivo2.save()\n        ##END UPDATE##            \n        for rownum in range(sh.nrows):\n            destino = str(sh.cell(rownum,0).value)\n            destino = destino.replace(\".0\",\"\")\n            if (int(destino) > 0):\n                mensaje = str(sh.cell(rownum,1).value)\n                ahora = strftime(\"%Y-%m-%d %H:%M:%S\")\n                reg = registro.objects.filter(registro_destino__exact=destino,fk_archivo__exact=procesar)\n                #reg = registro.objects.raw(str(el_query))\n\n                if (reg.exists()):\n                    exists = True\n                else:\n                    r = registro(fk_cliente=1,fk_usuario=1,fk_archivo=int(procesar),registro_destino=destino,registro_mensaje=mensaje,registro_estado='Cargado',registro_fecha_carga=ahora)\n                    r.save()\n\n\n        datos = {'ID':procesar,'PATH': settings.FILES_URL, 'INFO':infoarchivo, 'el_excel':infoarchivo.archivo_original, 'registros':sh.nrows }\n        return render_to_response('carga.html', {'datos': datos})\n```\n\nI have tried the following in the ##START UPDATE## block:\n\n```python\ninfoarchivo.archivo_registros = sh.nrows\ninfoarchivo.save()\n```\n\nand\n\n```python\narchivo.objects.filter(archivo_id = procesar).update(archivo_registros=sh.nrows)\n```\n\nand\n\n```python\narchivo.objects.get(archivo_id = procesar).update(archivo_registros=sh.nrows)\n```\n\nThe error I get for all the codes is:\n\nException Type: AttributeError at /procesa/4\nException Value: 'archivo' object has no attribute 'update'\n\nThe records of the file get parsed and inserted with no problem. I am using Django 1.5 with python 2.7 in Apache 2.2 with mod_wsgi and mysql backend installed in EC2 on Amazon. After rebooting my server once, the code started working. I suspect this is a bug on mod_wsgi. Can you help me understand what is going wrong?"
    },
    {
        "role": "assistant",
        "content": "It looks like you're encountering a common issue when updating Django model instances. Let's address some of the points and ensure you're handling model updates correctly:\n\n1. **AttributeError**: The error `'archivo' object has no attribute 'update'` occurs because the `update()` method is not available on individual model instances. It is a method available on Django querysets.\n\n2. **Correct Use of `update()` Method**: If you want to update a record using the `update()` method, you should call it on a queryset, like this:\n\n   ```python\n   archivo.objects.filter(archivo_id=procesar).update(archivo_registros=sh.nrows)\n   ```\n\n   This is correct and should work without issues, provided the queryset is correct.\n\n3. **Using `save()` Method**: When using the `save()` method, you should modify the instance attributes and call `save()` on the instance:\n\n   ```python\n   infoarchivo.archivo_registros = sh.nrows\n   infoarchivo.save()\n   ```\n\n   This is also correct, assuming `infoarchivo` is a valid instance of the `archivo` model.\n\n4. **Possible Issues**:\n   - **Database Transaction**: Ensure that your database transactions are properly committed. Sometimes, you might face issues if transactions are not being committed, especially if there are middleware or settings affecting transaction management.\n   - **Cache**: If you have any caching mechanisms in place, ensure that they are not interfering with your data retrieval or updates.\n   - **Server State**: As you mentioned, rebooting the server made it work, which suggests there might be a caching issue or some server state issue. It's worth checking your server configurations and any middlewares that might affect request handling or data persistence.\n\n5. **Debugging Tips**:\n   - **Print Statements**: Add print statements or logging to verify that the code reaches the update segment and what values are being set.\n   - **Database Logs**: Check your database logs to see if there are any errors or if queries are being executed as expected.\n   - **Check Queryset**: Ensure that the queryset returned by `filter()` is not empty before calling `update()`.\n\n6. **Consider Django Versions**: Since you're using Django 1.5, which is quite old, consider upgrading to a newer version if possible. Newer versions of Django have better support, improved features, and fixes for older issues.\n\nBy following these guidelines, you should be able to resolve the issue with updating the database record. If the problem persists, further investigation into the server setup or Django configurations might be necessary."
    }
]