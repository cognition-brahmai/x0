[
    {
        "role": "user",
        "content": "How can I create a custom keyboard shortcut in IPython Notebook using the IPython Javascript API that duplicates the current line in edit mode? I want to bind the 'Ctrl-Alt-Down' keys to the action of duplicating the current line. That is, the function should move the cursor to the start of the current line, select the line, copy it, return, and paste it. However, my attempts suggest 'ctrl-alt-down' is the wrong way to represent the shortcut sequence and I can't find any documentation for the keyboard_manager. I want to avoid using solutions like AutoHotKey, as I want to restrict this shortcut to the edit mode of IPython Notebook."
    },
    {
        "role": "assistant",
        "content": "Creating a custom keyboard shortcut in IPython Notebook requires using the IPython/Jupyter JavaScript API to bind a specific key combination to a custom function. Here's how you can achieve this for duplicating the current line in edit mode:\n\n1. **Access the Notebook's JavaScript Console:**\n   - Open your IPython Notebook.\n   - Navigate to your browser's developer tools (usually found under the \"View\" menu or by pressing `F12`).\n   - Go to the \"Console\" tab.\n\n2. **Define the Custom Action:**\n   - You'll need to create a JavaScript function that duplicates the current line. This involves moving the cursor to the start of the line, selecting it, copying, and then pasting it.\n\n3. **Register the Keybinding:**\n   - Use the `Jupyter` object available in the notebook's JavaScript environment to register the custom keybinding.\n\nHere's a sample script you could use in the console to achieve this:\n\n```javascript\nrequire([\"base/js/namespace\", \"base/js/events\"], function(Jupyter, events) {\n    function duplicate_current_line(cm) {\n        var doc = cm.getDoc();\n        var cursor = doc.getCursor();\n        var line = doc.getLine(cursor.line);\n        doc.replaceRange(line + '\\n', {line: cursor.line, ch: 0});\n    }\n\n    function register_shortcut() {\n        Jupyter.keyboard_manager.edit_shortcuts.add_shortcut('Ctrl-Alt-Down', {\n            help: 'Duplicate Current Line',\n            help_index: 'zz',\n            handler: function(env) {\n                var cm = env.notebook.get_selected_cell().code_mirror;\n                duplicate_current_line(cm);\n                return false;\n            }\n        });\n    }\n\n    events.on(\"app_initialized.NotebookApp\", register_shortcut);\n});\n```\n\n4. **Execute the Script:**\n   - Copy the script and paste it into the console, then press Enter. This should register the `Ctrl-Alt-Down` shortcut to duplicate the current line in edit mode.\n\n5. **Use the Shortcut:**\n   - Go back to your notebook, enter edit mode in a cell, and press `Ctrl-Alt-Down` to see if it correctly duplicates the current line.\n\n### Explanation:\n\n- **`duplicate_current_line(cm)`**: This function handles the duplication of the current line in the CodeMirror editor (which Jupyter uses for its code cells).\n- **`register_shortcut()`**: This function registers the new keyboard shortcut, linking it to the `duplicate_current_line` action.\n- **`events.on(\"app_initialized.NotebookApp\", register_shortcut);`**: This ensures that the shortcut is registered when the notebook is fully initialized.\n\n### Notes:\n\n- If you experience issues with the keybinding not working, ensure that there are no conflicts with other extensions or customizations in your Jupyter environment.\n- The `help_index: 'zz'` is used to ensure it appears at the end of the help menu for shortcuts.\n\nThis should give you a good starting point for adding custom functionality to your IPython/Jupyter notebook environment!"
    }
]