[
    {
        "role": "user",
        "content": "Is it possible to include multiple models in a single ModelForm in Django? I am attempting to create a profile edit form, and need to include some fields from both the User and UserProfile models. Currently, I am using two separate forms as shown below:\n\n```python\nclass UserEditForm(ModelForm):\n    class Meta:\n        model = User\n        fields = (\"first_name\", \"last_name\")\n\nclass UserProfileForm(ModelForm):\n    class Meta:\n        model = UserProfile\n        fields = (\"middle_name\", \"home_phone\", \"work_phone\", \"cell_phone\")\n```\nIs there a method to consolidate these into a single form, or do I need to create a form manually and handle the database loading and saving myself?"
    },
    {
        "role": "assistant",
        "content": "In Django, a `ModelForm` is designed to work with a single model, so it's not directly possible to include fields from multiple models in a single `ModelForm`. However, you can achieve the desired functionality by creating a custom form that combines fields from both models. This approach involves using a standard `forms.Form` and manually handling the data saving process. Here's how you can do it:\n\n```python\nfrom django import forms\nfrom django.contrib.auth.models import User\nfrom .models import UserProfile\n\nclass ProfileEditForm(forms.Form):\n    # Fields from the User model\n    first_name = forms.CharField(max_length=30)\n    last_name = forms.CharField(max_length=30)\n    \n    # Fields from the UserProfile model\n    middle_name = forms.CharField(max_length=30, required=False)\n    home_phone = forms.CharField(max_length=15, required=False)\n    work_phone = forms.CharField(max_length=15, required=False)\n    cell_phone = forms.CharField(max_length=15, required=False)\n\n    def __init__(self, *args, **kwargs):\n        user = kwargs.pop('user', None)\n        user_profile = kwargs.pop('user_profile', None)\n        super().__init__(*args, **kwargs)\n\n        # Initialize with instance data\n        if user:\n            self.fields['first_name'].initial = user.first_name\n            self.fields['last_name'].initial = user.last_name\n\n        if user_profile:\n            self.fields['middle_name'].initial = user_profile.middle_name\n            self.fields['home_phone'].initial = user_profile.home_phone\n            self.fields['work_phone'].initial = user_profile.work_phone\n            self.fields['cell_phone'].initial = user_profile.cell_phone\n\n    def save(self, user=None, user_profile=None):\n        if user:\n            user.first_name = self.cleaned_data['first_name']\n            user.last_name = self.cleaned_data['last_name']\n            user.save()\n\n        if user_profile:\n            user_profile.middle_name = self.cleaned_data['middle_name']\n            user_profile.home_phone = self.cleaned_data['home_phone']\n            user_profile.work_phone = self.cleaned_data['work_phone']\n            user_profile.cell_phone = self.cleaned_data['cell_phone']\n            user_profile.save()\n```\n\n### Usage\n\nWhen using this form in your views, you can pass the `User` and `UserProfile` instances to the form upon initialization and call `save()` to update the instances:\n\n```python\ndef edit_profile(request):\n    # Assuming you have a way to get the current user and their profile\n    user = request.user\n    user_profile = UserProfile.objects.get(user=user)\n\n    if request.method == 'POST':\n        form = ProfileEditForm(request.POST, user=user, user_profile=user_profile)\n        if form.is_valid():\n            form.save(user=user, user_profile=user_profile)\n            # Redirect or perform any additional actions\n    else:\n        form = ProfileEditForm(user=user, user_profile=user_profile)\n\n    return render(request, 'edit_profile.html', {'form': form})\n```\n\nThis approach allows you to consolidate fields from both models into a single form while maintaining separate data handling logic for each model."
    }
]