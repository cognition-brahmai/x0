[
    {
        "role": "user",
        "content": "How can I set the x-axis ticks in multiples of pi in Python using matplotlib? I am trying to make a plot and I'd like the x range to display ticks in multiples of pi. Is there a method to accomplish this without manually setting the ticks? I am open to other options as well. I tried implementing a solution where I used matplotlib.ticker as tck, but it didn't seem to work right for me.\n\nHere's the code I tried:\n```python\nimport matplotlib.ticker as tck\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nf,ax=plt.subplots(figsize=(20,10))\nx=np.linspace(-10*np.pi, 10*np.pi)\ny=np.sin(x)\n\nax.plot(x/np.pi,y)\n\nax.xaxis.set_major_formatter(tck.FormatStrFormatter('%g $\\pi$'))\nax.xaxis.set_major_locator(tck.MultipleLocator(base=1.0))\n\nplt.style.use(\"ggplot\")\n\nplt.show()\n```\n\nHowever, the result doesn't look correct."
    },
    {
        "role": "assistant",
        "content": "To set the x-axis ticks in multiples of \u03c0 in a matplotlib plot, you need to adjust both the tick locations and their labels to reflect the multiples of \u03c0. You can use `MultipleLocator` for setting the tick locations and `FuncFormatter` for formatting the labels. Here is an updated version of your code that should accomplish this:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom matplotlib.ticker import MultipleLocator, FuncFormatter\n\n# Function to format the ticks\ndef pi_formatter(x, pos):\n    if x == 0:\n        return '0'\n    elif x == np.pi:\n        return r'$\\pi$'\n    elif x == -np.pi:\n        return r'$-\\pi$'\n    else:\n        return r'${0}\\pi$'.format(int(x/np.pi))\n\n# Create the plot\nf, ax = plt.subplots(figsize=(20, 10))\nx = np.linspace(-10*np.pi, 10*np.pi, 1000)\ny = np.sin(x)\n\nax.plot(x, y)\n\n# Set the x ticks and labels\nax.xaxis.set_major_locator(MultipleLocator(base=np.pi))\nax.xaxis.set_major_formatter(FuncFormatter(pi_formatter))\n\nplt.style.use(\"ggplot\")\n\nplt.show()\n```\n\n### Key Changes and Explanation:\n1. **linspace**: Ensure you have enough points by specifying the number of points e.g., `1000`, in `np.linspace`.\n\n2. **MultipleLocator**: Used to set the location of the ticks based on multiples of \u03c0.\n\n3. **FuncFormatter**: Used to format the tick labels to display them as multiples of \u03c0. The `pi_formatter` function determines how each tick should be labeled.\n\n4. **Plot range**: Adjusted to have a smooth curve by setting `x` to `np.linspace(-10*np.pi, 10*np.pi, 1000)`.\n\nWhen you run this code, you should see the x-axis ticks displayed at intervals of \u03c0, labeled as multiples of \u03c0 (e.g., -3\u03c0, -2\u03c0, etc.)."
    }
]