[
    {
        "role": "user",
        "content": "How can I check if a set of points is contained within multiple polygons using GeoPandas? I have a GeoDataFrame of polygons (approximately 30) and a GeoDataFrame of points (approximately 10k). I want to create 30 new columns in my Points GeoDataFrame, each corresponding to one of the polygons. The values in these columns should be boolean, indicating whether a point is contained within the corresponding polygon. Given the following sample data:\n\nThe GeoDataFrame of Polygons:\n\n```\nid  geometry\nfoo POLYGON ((-0.18353,51.51022, -0.18421,51.50767, -0.18253,51.50744, -0.1794,51.50914))\nbar POLYGON ((-0.17003,51.50739, -0.16904,51.50604, -0.16488,51.50615, -0.1613,51.5091))\n```\n\nAnd the GeoDataFrame of Points:\n\n```\ncounter     points\n   1     ((-0.17987,51.50974))\n   2     ((-0.16507,51.50925))\n```\n\nThe expected output is:\n\n```\ncounter          points        foo    bar\n   1    ((-0.17987,51.50974))  False  False\n   2    ((-0.16507,51.50925))  False  False\n```\n\nI can do this manually for each polygon like so:\n\n```\nfoo = df_poly.loc[df_poly.id=='foo']\ndf_points['foo'] = df_points['points'].map(lambda x: True if foo.contains(x).any()==True else False\n```\n\nBut given that I have 30 polygons, is there a more efficient way to do this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can efficiently perform this task using GeoPandas by leveraging the `apply` method along with vectorized operations. Here's a step-by-step guide to streamline the process for checking if points are contained within multiple polygons:\n\n1. **Import necessary libraries**:\n\n   ```python\n   import geopandas as gpd\n   from shapely.geometry import Point, Polygon\n   ```\n\n2. **Create your GeoDataFrames**:\n\n   Assuming you have your polygons and points data, first convert them into GeoDataFrames:\n\n   ```python\n   # Sample polygon data\n   polygons_data = {'id': ['foo', 'bar'],\n                    'geometry': [\n                        Polygon([(-0.18353, 51.51022), (-0.18421, 51.50767), (-0.18253, 51.50744), (-0.1794, 51.50914)]),\n                        Polygon([(-0.17003, 51.50739), (-0.16904, 51.50604), (-0.16488, 51.50615), (-0.1613, 51.5091)])\n                    ]}\n\n   df_poly = gpd.GeoDataFrame(polygons_data, crs=\"EPSG:4326\")\n\n   # Sample points data\n   points_data = {'counter': [1, 2],\n                  'points': [Point(-0.17987, 51.50974), Point(-0.16507, 51.50925)]}\n\n   df_points = gpd.GeoDataFrame(points_data, geometry='points', crs=\"EPSG:4326\")\n   ```\n\n3. **Check point containment for each polygon**:\n\n   Use the `apply` method to iterate over each polygon and check if the points are contained within it.\n\n   ```python\n   # Iterate over each polygon\n   for idx, poly in df_poly.iterrows():\n       # Create a new column in the points GeoDataFrame for each polygon\n       df_points[poly['id']] = df_points['points'].apply(lambda point: poly['geometry'].contains(point))\n   ```\n\n4. **Output the resulting GeoDataFrame**:\n\n   This will result in a GeoDataFrame with additional columns indicating whether each point is contained within each polygon.\n\n   ```python\n   print(df_points)\n   ```\n\nThis method efficiently checks whether each point is contained within each polygon, adding a column for each polygon with boolean values. It avoids manually writing code for each polygon, making it easily scalable for larger datasets."
    }
]