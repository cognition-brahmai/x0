[
    {
        "role": "user",
        "content": "I am creating a web application using Flask that interacts with an API to carry out certain functions. The application provides a form where users can enter their account URL and API token, and upon form submission, a Python script is triggered to export PDFs from their account using the API. This process can take quite a long time, and I want to display a bootstrap progress bar on the form page to keep the users informed about the progress of the script. How can I update the progress bar while the function is running? How do I send the current progress to my .html file to fit within the 'style=' tag of the progress bar in a way that I can reuse the same tool for progress bars on other pages?"
    },
    {
        "role": "assistant",
        "content": "To implement a progress bar in your Flask application that updates in real-time while a long-running task is being processed, you can use WebSockets. WebSockets provide a way for the server to push updates to the client without the client having to repeatedly request updates. Here's a step-by-step guide on how you can achieve this:\n\n### Step 1: Set Up Flask with WebSockets\n\nYou'll need to use an extension like `Flask-SocketIO` to enable WebSocket support. First, install the necessary package:\n\n```bash\npip install flask-socketio\n```\n\n### Step 2: Modify Your Flask Application\n\n1. **Initialize Flask-SocketIO**:\n\n   ```python\n   from flask import Flask, render_template, request\n   from flask_socketio import SocketIO, emit\n   import time  # Simulating long process\n\n   app = Flask(__name__)\n   socketio = SocketIO(app)\n\n   @app.route('/')\n   def index():\n       return render_template('index.html')\n\n   @app.route('/start-task', methods=['POST'])\n   def start_task():\n       account_url = request.form.get('account_url')\n       api_token = request.form.get('api_token')\n       # Start the task in a new thread to avoid blocking\n       socketio.start_background_task(target=long_running_task)\n       return '', 202  # Return an empty response\n\n   def long_running_task():\n       for i in range(101):\n           time.sleep(0.1)  # Simulate time-consuming work\n           socketio.emit('progress', {'progress': i})\n   ```\n\n2. **Run the SocketIO Server**:\n\n   Update your Flask app running command:\n\n   ```python\n   if __name__ == '__main__':\n       socketio.run(app)\n   ```\n\n### Step 3: Create Your HTML Template\n\nIn your `templates` folder, create an `index.html` file with the following content:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Flask Progress Bar</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\">\n    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.0.0/socket.io.js\"></script>\n    <style>\n        .progress { margin-top: 20px; }\n    </style>\n</head>\n<body>\n    <div class=\"container\">\n        <form id=\"task-form\">\n            <div class=\"form-group\">\n                <label for=\"account_url\">Account URL</label>\n                <input type=\"text\" class=\"form-control\" id=\"account_url\" name=\"account_url\" required>\n            </div>\n            <div class=\"form-group\">\n                <label for=\"api_token\">API Token</label>\n                <input type=\"text\" class=\"form-control\" id=\"api_token\" name=\"api_token\" required>\n            </div>\n            <button type=\"submit\" class=\"btn btn-primary\">Start Task</button>\n        </form>\n\n        <div class=\"progress\">\n            <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 0%\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\">0%</div>\n        </div>\n    </div>\n\n    <script>\n        var socket = io();\n\n        document.getElementById('task-form').onsubmit = function(e) {\n            e.preventDefault();\n            fetch('/start-task', {\n                method: 'POST',\n                body: new FormData(this)\n            });\n        };\n\n        socket.on('progress', function(data) {\n            var progress = data.progress;\n            var progressBar = document.querySelector('.progress-bar');\n            progressBar.style.width = progress + '%';\n            progressBar.setAttribute('aria-valuenow', progress);\n            progressBar.textContent = progress + '%';\n        });\n    </script>\n</body>\n</html>\n```\n\n### Explanation:\n\n- **Flask-SocketIO** is used to establish WebSocket connections. It allows the server to push updates to the client.\n- **Progress Updates**: The server emits progress updates via `socketio.emit('progress', {'progress': i})` which is received by the client and updates the progress bar.\n- **HTML and JavaScript**: The HTML form captures user input, and JavaScript listens for progress updates, updating the progress bar accordingly.\n\n### Reusability:\n\nTo reuse this setup on other pages, you can extract the progress bar logic into a separate JavaScript file or a Flask template partial. This way, you can include it wherever needed.\n\nBy implementing WebSockets, you ensure that users receive real-time feedback on the progress of their tasks, improving the user experience."
    }
]