[
    {
        "role": "user",
        "content": "I am trying to use `bcrypt.checkpw` to check if an unencrypted password matches with a hashed password stored in my credentials database, but I keep receiving a `TypeError: Unicode-objects must be encoded before checking`. How can I resolve this issue? I am currently using Python 2.7.6 and bcrypt 3.1.1. Here is the code I am using:\n\n```python\ndef check_password(password, hashed_password)\n    if not bcrypt.checkpw(password, hashed_password):\n        raise InvalidCredentials(\"403 Forbidden\")\n    else:\n        return true\n```\n\nThe error message I receive is:\n\n```python\nFile \"/home/qt/virtualenv/lib/python2.7/site-packages/bcrypt/__init__.py\", line 100, in checkpw\n  raise TypeError(\"Unicode-objects must be encoded before checking\")\nTypeError: Unicode-objects must be encoded before checking\n```\n\nI looked into `bcrypt/__init__.py` and found this:\n\n```python\ndef checkpw(password, hashed_password):    \n    if (isinstance(password, six.text_type) or            \n        isinstance(hashed_password, six.text_type)):        \n    raise TypeError(\"Unicode-objects must be encoded before checking\")\n```\n\nBut I am not sure why this is causing an issue."
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to the fact that in Python 2, strings can be either Unicode or byte strings. The `bcrypt.checkpw` function requires byte strings, so you need to explicitly encode your password and hashed password before passing them to the function.\n\nHere's how you can modify your code to fix the error:\n\n```python\ndef check_password(password, hashed_password):\n    # Encode the password and hashed password to byte strings\n    password_bytes = password.encode('utf-8')\n    hashed_password_bytes = hashed_password.encode('utf-8')\n    \n    if not bcrypt.checkpw(password_bytes, hashed_password_bytes):\n        raise InvalidCredentials(\"403 Forbidden\")\n    else:\n        return True  # Note: Corrected 'true' to 'True' for Python boolean\n```\n\nKey changes:\n- Use `encode('utf-8')` to convert the `password` and `hashed_password` from Unicode strings to byte strings.\n- Ensure that the `return true` statement is corrected to `return True` as Python is case-sensitive and uses `True` for boolean values.\n\nThis should resolve the `TypeError` you're encountering."
    }
]