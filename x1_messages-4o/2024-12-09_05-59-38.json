[
    {
        "role": "user",
        "content": "What is the optimal way in Python to check if a program has anything to read from stdin? I wish for the program to execute a certain function if run with the following command: 'cat something | my_program.py'. Conversely, the program should execute a different function if run as 'my_program.py'. If I attempt to read from stdin, it waits for user input. Can I check if there is anything to read before actually reading from stdin?"
    },
    {
        "role": "assistant",
        "content": "To determine if there's data available to read from `stdin` in Python without blocking, you can use the `select` module, which provides a way to wait for I/O completion on multiple streams. This is particularly useful when you want your program to behave differently based on whether or not data is being piped into it.\n\nHere's a simple example that demonstrates how to check for data in `stdin`:\n\n```python\nimport sys\nimport select\n\ndef function_with_input():\n    print(\"Data is being piped in. Executing the function that handles input.\")\n    # Handle the input\n    input_data = sys.stdin.read()\n    print(f\"Received input: {input_data}\")\n\ndef function_without_input():\n    print(\"No data is being piped in. Executing the function that handles no input.\")\n    # Handle the case with no input\n\ndef main():\n    # Check if there's any data to read from stdin\n    if select.select([sys.stdin], [], [], 0.0)[0]:\n        function_with_input()\n    else:\n        function_without_input()\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n\n1. **`select.select()`**: This function monitors file descriptors to see if they are ready for some kind of I/O operation. It takes three lists of objects (read, write, and error) and a timeout value. If any of the file descriptors are ready, it returns a list of those that are ready.\n\n2. **`[sys.stdin]`**: This tells `select` to monitor `stdin` for readability.\n\n3. **`0.0`**: The timeout value is set to 0.0 seconds, meaning `select` will return immediately without blocking.\n\n4. **`if select.select([sys.stdin], [], [], 0.0)[0]:`**: If there is data available on `stdin`, `select` will return a non-empty list, and the program will call `function_with_input()`. Otherwise, it will call `function_without_input()`.\n\nThis approach allows your program to distinguish between being run with or without piped input and react accordingly."
    }
]