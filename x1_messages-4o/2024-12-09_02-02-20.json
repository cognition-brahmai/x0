[
    {
        "role": "user",
        "content": "I am using SQLAlchemy connection.execute(sql) to transform select results to an array of maps with the following code. However, I am currently using the format function to add parameters to sql. How could I modify my function so that I could pass parameters in a more direct manner, such as \"__sql_to_data(sql_get_profile,user_id)\"?\n\n```python\ndef __sql_to_data(sql):\n    result = []\n    connection = engine.connect()\n    try:\n        rows = connection.execute(sql)\n        for row in rows:\n            result_row = {}\n            for col in row.keys():\n                result_row[str(col)] = str(row[col])\n            result.append(result_row)\n    finally:\n        connection.close()\n    return result\n```\nA call to this function, for instance, \"__sql_to_data(sql_get_scan_candidate)\", returns a desirable data structure. But when I need to add a parameter to the sql, I currently use format in the following way: \"return __sql_to_data(sql_get_profile.format(user_id))\"."
    },
    {
        "role": "assistant",
        "content": "To pass parameters to SQL queries in a more direct and secure manner, you should use parameterized queries. This approach helps prevent SQL injection attacks and makes your code cleaner. In SQLAlchemy, you can achieve this by using placeholders in your SQL string and passing the parameters separately. Below is a modified version of your function that supports parameterized queries:\n\n```python\nfrom sqlalchemy.sql import text\n\ndef __sql_to_data(sql, **params):\n    result = []\n    connection = engine.connect()\n    try:\n        # Use the text function to safely construct the SQL with placeholders\n        stmt = text(sql)\n        # Execute the query with the parameters\n        rows = connection.execute(stmt, **params)\n        for row in rows:\n            result_row = {}\n            for col in row.keys():\n                result_row[str(col)] = str(row[col])\n            result.append(result_row)\n    finally:\n        connection.close()\n    return result\n```\n\nHere\u2019s how you can call this function with parameters:\n\n```python\nsql_get_profile = \"SELECT * FROM profiles WHERE user_id = :user_id\"\nuser_id = 123\ndata = __sql_to_data(sql_get_profile, user_id=user_id)\n```\n\nIn the SQL string, `:user_id` is a placeholder for a parameter. When calling `execute`, you pass the parameters as keyword arguments (`user_id=user_id`), which are then safely bound to the query. This method is both secure and efficient for passing parameters to your SQL queries."
    }
]