[
    {
        "role": "user",
        "content": "I am developing a web application using Python Flask and I need to display a matplotlib figure. The function that creates the figure works fine, but I am unable to display the figure in HTML. Is there a way to convert a matplotlib figure into an actual image that I can use in my HTML template? Here is my current Python and HTML code:\n\nPython:\n```python\n@app.route('/images/<cropzonekey>')\ndef images(cropzonekey):\n    fig = draw_polygons(cropzonekey)\n    return render_template(\"images.html\", title=cropzonekey, figure = fig)\n```\n\nHTML:\n```html\n<html>\n  <head>\n    <title>{{ title }} - image</title>\n  </head>\n  <body>\n    <img src={{ figure }} alt=\"Image Placeholder\" height=\"100\">\n  </body>\n</html>\n```\nWhen I try to load the page, I only see \"Image Placeholder\"."
    },
    {
        "role": "assistant",
        "content": "To display a Matplotlib figure in your Flask application, you'll need to convert the figure to a format that can be embedded in an HTML template, such as a PNG or JPEG image. One common approach is to convert the Matplotlib figure to a PNG image and then encode it to a base64 string, which can be directly embedded in your HTML.\n\nHere's how you can achieve this:\n\n### Python Code\n\n1. Convert the Matplotlib figure to a PNG image.\n2. Encode the image to a base64 string.\n3. Pass the base64 string to the HTML template.\n\n```python\nimport io\nimport base64\nfrom flask import Flask, render_template, send_file\nimport matplotlib.pyplot as plt\n\napp = Flask(__name__)\n\ndef draw_polygons(cropzonekey):\n    # Sample function to create a Matplotlib figure\n    fig, ax = plt.subplots()\n    ax.plot([1, 2, 3], [1, 2, 3], label=f\"Plot {cropzonekey}\")\n    ax.legend()\n    return fig\n\n@app.route('/images/<cropzonekey>')\ndef images(cropzonekey):\n    fig = draw_polygons(cropzonekey)\n    \n    # Convert the figure to a PNG image\n    img = io.BytesIO()\n    fig.savefig(img, format='png')\n    img.seek(0)\n    plt.close(fig)  # Close the figure to free memory\n\n    # Encode the PNG image to a base64 string\n    img_base64 = base64.b64encode(img.getvalue()).decode('utf8')\n    \n    return render_template(\"images.html\", title=cropzonekey, figure=img_base64)\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n\n### HTML Code\n\nModify your HTML template to include the base64 string in the `src` attribute of the `<img>` tag:\n\n```html\n<html>\n  <head>\n    <title>{{ title }} - image</title>\n  </head>\n  <body>\n    <img src=\"data:image/png;base64,{{ figure }}\" alt=\"Image Placeholder\" height=\"100\">\n  </body>\n</html>\n```\n\n### Explanation\n\n- **Converting Figure to PNG**: The `fig.savefig()` method is used to save the Matplotlib figure to a BytesIO object as a PNG file.\n- **Base64 Encoding**: The PNG data is then encoded into a base64 string using the `base64.b64encode()` function. This encoded string can be embedded directly in the HTML.\n- **Embedding in HTML**: The base64 string is used in the `src` attribute of the `<img>` tag with a prefix of `data:image/png;base64,`, which tells the browser to interpret the string as an image.\n\nThis approach allows you to dynamically generate and display images generated by Matplotlib in your Flask web application."
    }
]