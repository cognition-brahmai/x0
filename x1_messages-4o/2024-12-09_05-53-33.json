[
    {
        "role": "user",
        "content": "I am working with Django models `AppVersion`, `App`, and `DeployApp`. In the `AppVersion` model, users can upload APK files to the filesystem. I have used a `pre_save` signal to prevent uploading APK files with the same `version_code` for a specific `App`. However, the signal raises an error when I am trying to create an object in the bridge-table `DeployApp`. How can I ensure that the Exception is only raised on creating a new `AppVersion` instance and not when adding or editing a `DeployApp` instance?"
    },
    {
        "role": "assistant",
        "content": "To solve this issue, you need to ensure that your `pre_save` signal only applies to the creation of new `AppVersion` instances and not when you are creating or updating `DeployApp` instances. One way to achieve this is by checking whether the instance being saved is a new instance or an existing one. Here's how you can do it:\n\n1. **Differentiate Between New and Existing Instances:** In the `pre_save` signal, you can check if the `AppVersion` instance is new by seeing if it has a primary key. If the instance does not have a primary key, it is being created.\n\n2. **Implement the Signal:** Use this logic in your `pre_save` signal handler to conditionally raise the exception:\n\n```python\nfrom django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom .models import AppVersion\n\n@receiver(pre_save, sender=AppVersion)\ndef prevent_duplicate_version_code(sender, instance, **kwargs):\n    if instance.pk is None:  # This means the instance is being created\n        # Check for existing AppVersion with the same version_code for the same App\n        if AppVersion.objects.filter(app=instance.app, version_code=instance.version_code).exists():\n            raise ValueError(\"An AppVersion with this version_code already exists for this App.\")\n```\n\n3. **Ensure Signal is Registered:** Make sure your signal is registered, usually in the `apps.py` or `signals.py` file of your app.\n\n4. **Check Your Logic in `DeployApp`:** Ensure that when you are creating or updating a `DeployApp` instance, the `AppVersion` instance is already created and you are not inadvertently triggering the `pre_save` signal for `AppVersion`.\n\nBy using the check `if instance.pk is None`, you ensure that the signal logic only applies when an `AppVersion` instance is being created and not when it is being updated or when related models like `DeployApp` are being manipulated. This should prevent the error from being raised during operations on `DeployApp`."
    }
]