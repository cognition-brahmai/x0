[
    {
        "role": "user",
        "content": "I have a class that represents locations in SQLAlchemy. These locations belong to customers and are identified by a unique 10 character code. The 'customer_id' and 'location_code' fields should be unique together. For example, two customers, customer \"123\" and customer \"456\", can both have a location called \"main\", but neither could have two locations called \"main\". I know that the unique=True option in SQLAlchemy works when applied to a specific field, but it would cause the entire table to only have a unique code for all locations. How can I enforce this unique constraint on the combination of these two fields in SQLAlchemy?\n\n<pre><code>\nThe two below fields in combination should be unique\ncustomer_id = Column(Integer,ForeignKey('customers.customer_id')\nlocation_code = Column(Unicode(10))\n</code></pre>"
    },
    {
        "role": "assistant",
        "content": "To enforce a unique constraint on a combination of two fields in SQLAlchemy, you can use the `UniqueConstraint` construct. This allows you to specify that a combination of columns must be unique across the entire table. In your case, you want to ensure that the combination of `customer_id` and `location_code` is unique.\n\nHere's how you can apply this to your class definition:\n\n```python\nfrom sqlalchemy import Column, Integer, Unicode, ForeignKey, UniqueConstraint\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Location(Base):\n    __tablename__ = 'locations'\n    \n    id = Column(Integer, primary_key=True)\n    customer_id = Column(Integer, ForeignKey('customers.customer_id'))\n    location_code = Column(Unicode(10))\n    \n    __table_args__ = (\n        UniqueConstraint('customer_id', 'location_code', name='uq_customer_location'),\n    )\n```\n\nIn this example, the `UniqueConstraint` is added to the `__table_args__` of the `Location` class. This ensures that for any given `customer_id`, the `location_code` must be unique. The `name` parameter is optional but can be useful if you need to refer to the constraint by name later.\n\nWith this setup, attempting to insert or update rows that violate this unique constraint will result in an error, ensuring the integrity of your data."
    }
]