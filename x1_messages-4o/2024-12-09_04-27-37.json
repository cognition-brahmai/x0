[
    {
        "role": "user",
        "content": "I am working with a 2D numpy array which contains some `NaN` values. I need to perform certain operations on this array, such as sorting each row in reversed order to get the max 3 values from the row and taking their average. My current code doesn't work when there's a `NaN` value in the row. Here's the code I have tried:\n\n```python\n# nparr is a 2D numpy array\nfor entry in nparr:\n    sortedentry = sorted(entry, reverse=True)\n    highest_3_values = sortedentry[:3]\n    avg_highest_3 = float(sum(highest_3_values)) / 3\n```\nHow can I quickly convert all `NaN` values to zero in the 2D numpy array so that I can perform sorting and other operations without any issues?"
    },
    {
        "role": "assistant",
        "content": "To handle `NaN` values in your 2D numpy array and perform the desired operations, you can replace all `NaN` values with zeros using `numpy.nan_to_num()`, which is a convenient way to handle `NaN` values. Here's how you can modify your code:\n\n```python\nimport numpy as np\n\n# Assuming nparr is your 2D numpy array\nnparr = np.nan_to_num(nparr, nan=0.0)  # Replace NaN values with zero\n\n# Now you can proceed with your operations\nfor entry in nparr:\n    sortedentry = sorted(entry, reverse=True)\n    highest_3_values = sortedentry[:3]\n    avg_highest_3 = float(sum(highest_3_values)) / 3\n    print(f\"Average of highest 3 values: {avg_highest_3}\")\n```\n\nThis approach uses `numpy.nan_to_num()` to replace all `NaN` values in `nparr` with zeros, allowing you to perform your sorting and averaging operations without any issues. After this conversion, you can safely sort each row, extract the top 3 values, and compute their average."
    }
]