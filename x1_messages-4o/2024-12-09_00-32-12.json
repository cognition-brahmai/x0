[
    {
        "role": "user",
        "content": "In Python, is it safe to rely on the order of condition evaluation in if statements? If my variable `my_var` can be None, is it bad practice to use the format `if my_var and 'something' in my_var:`? This throws a TypeError if `my_var` is None. Is it better to use nested if statements, or to use a try-except block to handle the TypeError? Which of the following is the best practice, or are there any recommended alternatives?"
    },
    {
        "role": "assistant",
        "content": "In Python, the order of condition evaluation in `if` statements is well-defined, and it's safe to rely on it. Python evaluates conditions from left to right, and it uses short-circuit evaluation. This means that if the first condition in an `and` expression is `False`, Python will not evaluate the second condition because the result of the `and` expression is already determined to be `False`.\n\nGiven this behavior, using the format `if my_var and 'something' in my_var:` is both safe and common practice. If `my_var` is `None`, the first condition (`my_var`) evaluates to `False`, and the second condition (`'something' in my_var`) is never evaluated, thus avoiding a `TypeError`.\n\nHere's a brief explanation of the options you mentioned:\n\n1. **Using the `if my_var and 'something' in my_var:` format:**\n   - This is a concise and idiomatic way to check both conditions safely, relying on short-circuit evaluation.\n\n2. **Using nested `if` statements:**\n   ```python\n   if my_var:\n       if 'something' in my_var:\n           # Do something\n   ```\n   - This is also safe, but less concise. It might make the logic clearer to some readers by explicitly separating the checks.\n\n3. **Using a `try-except` block:**\n   ```python\n   try:\n       if 'something' in my_var:\n           # Do something\n   except TypeError:\n       pass\n   ```\n   - This is generally not recommended for this situation. It's more verbose and can obscure the logic of your code. It's better to prevent exceptions when you can, rather than handle them afterwards.\n\n**Best Practice Recommendation:**\n\nUsing `if my_var and 'something' in my_var:` is the best practice in this scenario. It is concise, clear, and leverages Python's short-circuit evaluation effectively. This pattern is widely used and recognized in Python programming, making it a good choice for readability and maintainability."
    }
]