[
    {
        "role": "user",
        "content": "How can I pass data from a Flask application to JavaScript in a template? I am using an API that returns a dictionary, and I want to pass the information from this dictionary to JavaScript in the view. Specifically, I am using the Google Maps API in the JavaScript, so I want to pass it a list of tuples with the longitude and latitude information. I understand that `render_template` can pass variables to the view for use in HTML, but how can I pass these variables to JavaScript in the template? Here's what my code looks like currently:\n\n```python\nfrom flask import Flask\nfrom flask import render_template\n\napp = Flask(__name__)\n\nimport foo_api\n\napi = foo_api.API('API KEY')\n\n@app.route('/')\ndef get_data():\n    events = api.call(get_event, arg0, arg1)\n    geocode = event['latitude'], event['longitude']\n    return render_template('get_data.html', geocode=geocode)\n```"
    },
    {
        "role": "assistant",
        "content": "To pass data from a Flask application to JavaScript in a template, you can use the Jinja2 templating engine to embed the data directly into your HTML. This way, you can pass the `geocode` data to your JavaScript code.\n\nHere's how you can update your template and JavaScript code to include the `geocode` data:\n\n1. **Pass the data to `render_template`:** You are already passing the `geocode` variable to the `render_template` function.\n\n2. **Embed the data in JavaScript within your HTML Template:**\n\n   In your `get_data.html` file, you can use Jinja2 syntax to insert the data directly into a JavaScript variable. Here's how you can do it:\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n       <meta charset=\"UTF-8\">\n       <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n       <title>Map Example</title>\n       <script src=\"https://maps.googleapis.com/maps/api/js?key=YOUR_GOOGLE_MAPS_API_KEY\"></script>\n   </head>\n   <body>\n       <div id=\"map\" style=\"height: 500px; width: 100%;\"></div>\n       <script type=\"text/javascript\">\n           // Pass the geocode data from Flask to JavaScript\n           const geocode = {{ geocode|tojson }};\n\n           // Initialize and add the map\n           function initMap() {\n               // The location from the geocode\n               const location = { lat: geocode[0], lng: geocode[1] };\n               // The map, centered at the location\n               const map = new google.maps.Map(document.getElementById(\"map\"), {\n                   zoom: 10,\n                   center: location,\n               });\n               // The marker, positioned at the location\n               const marker = new google.maps.Marker({\n                   position: location,\n                   map: map,\n               });\n           }\n\n           // Call the initMap function to load the map\n           window.onload = initMap;\n       </script>\n   </body>\n   </html>\n   ```\n\n3. **Explanation:**\n\n   - `{{ geocode|tojson }}`: This Jinja2 syntax is used to safely serialize the `geocode` Python variable into a JSON format that JavaScript can understand. The `tojson` filter is particularly useful for converting Python data structures like tuples or dictionaries into JSON.\n   \n   - The `initMap` function initializes the Google Map using the passed latitude and longitude, and places a marker at that location.\n\n   - Make sure to replace `YOUR_GOOGLE_MAPS_API_KEY` with your actual Google Maps API key.\n\nThis approach allows you to seamlessly pass data from your Flask backend to the frontend JavaScript, enabling dynamic content updates based on server-side data."
    }
]