[
    {
        "role": "user",
        "content": "In Python, I have a list that should have one and only one truthy value (i.e., `bool(value) is True`). Currently, I'm using a function to iterate over the list and manually check for this condition. However, I feel that this approach is inelegant and not very Pythonic. Is there a more efficient way to verify that a list has exactly one truthy value?\n\nHere is the function I'm using right now:\n\n```python\ndef only1(l):\n    true_found = False\n    for v in l:\n        if v and not true_found:\n            true_found=True\n        elif v and true_found:\n             return False #\"Too Many Trues\"\n    return true_found\n```"
    },
    {
        "role": "assistant",
        "content": "You can achieve a more concise and Pythonic solution by utilizing the `sum` function along with a generator expression. The idea is to sum up the truthy values in the list, and then check if the sum is exactly 1. This works because in Python, `True` is equivalent to `1` and `False` is equivalent to `0`.\n\nHere's how you can implement it:\n\n```python\ndef only1(lst):\n    return sum(bool(v) for v in lst) == 1\n```\n\nThis function converts each element of the list to a boolean using `bool(v)`, which will be `True` for truthy values and `False` for falsy values. It then sums up these boolean values. If there's exactly one truthy value, the sum will be 1. Otherwise, it will be 0 or greater than 1.\n\nThis approach is both concise and efficient, as it iterates over the list only once and eliminates the need for explicit condition checking and flag management."
    }
]