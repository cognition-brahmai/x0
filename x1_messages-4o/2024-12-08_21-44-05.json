[
    {
        "role": "user",
        "content": "Provide example code for the following data structure: stack, while ensuring that the stack can only contain integers between 0 and 100 inclusive. <none>"
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is an example of a stack data structure implemented in Python, ensuring that it only contains integers between 0 and 100 inclusive:\n\n```python\nclass BoundedStack:\n    def __init__(self):\n        self.stack = []\n\n    def push(self, value):\n        if isinstance(value, int) and 0 <= value <= 100:\n            self.stack.append(value)\n            print(f\"Pushed {value} onto the stack.\")\n        else:\n            raise ValueError(\"Only integers between 0 and 100 are allowed.\")\n\n    def pop(self):\n        if not self.is_empty():\n            value = self.stack.pop()\n            print(f\"Popped {value} from the stack.\")\n            return value\n        else:\n            raise IndexError(\"Pop from an empty stack.\")\n\n    def peek(self):\n        if not self.is_empty():\n            return self.stack[-1]\n        else:\n            raise IndexError(\"Peek from an empty stack.\")\n\n    def is_empty(self):\n        return len(self.stack) == 0\n\n    def size(self):\n        return len(self.stack)\n\n    def display(self):\n        print(\"Stack contents:\", self.stack)\n\n# Example usage:\nstack = BoundedStack()\nstack.push(10)\nstack.push(25)\nstack.display()\nstack.pop()\nstack.display()\n\n# Uncomment the line below to see the error handling\n# stack.push(150)  # This will raise a ValueError\n```\n\n### Key Features:\n- **Push Method**: Adds an integer to the stack after checking if it falls within the specified range (0 to 100).\n- **Pop Method**: Removes and returns the topmost integer from the stack, handling cases where the stack might be empty.\n- **Peek Method**: Returns the topmost integer without removing it, also handling empty stack scenarios.\n- **is_empty Method**: Checks if the stack is empty.\n- **Size Method**: Returns the number of elements in the stack.\n- **Display Method**: Outputs the current contents of the stack.\n\nFeel free to test the code and modify it as needed!"
    }
]