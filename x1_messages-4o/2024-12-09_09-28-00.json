[
    {
        "role": "user",
        "content": "Can you provide a code example for calculating factorials using a functional programming approach?"
    },
    {
        "role": "assistant",
        "content": "Certainly! In functional programming, we often use recursion to solve problems like calculating factorials. Here is an example using a functional programming approach in JavaScript with a recursive function:\n\n```javascript\nconst factorial = (n) => {\n  if (n < 0) {\n    throw new Error(\"Factorial is not defined for negative numbers\");\n  }\n  return n === 0 ? 1 : n * factorial(n - 1);\n};\n\nconsole.log(factorial(5)); // Output: 120\n```\n\nThis code defines a function `factorial` that takes a number `n` and returns its factorial. The function checks if `n` is zero, in which case it returns 1 (since 0! = 1). Otherwise, it recursively calls itself with `n - 1` and multiplies the result by `n`.\n\nHere's how you might implement the same logic using a functional programming approach in Python:\n\n```python\ndef factorial(n):\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    return 1 if n == 0 else n * factorial(n - 1)\n\nprint(factorial(5))  # Output: 120\n```\n\nIn both examples, the function is defined recursively, which is a common approach in functional programming."
    }
]