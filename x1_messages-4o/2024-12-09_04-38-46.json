[
    {
        "role": "user",
        "content": "I have a Pandas DataFrame 'df' and I wish to scale values in two columns. I want the maximum value in column 'a' to be 1, the minimum value to be 0, and all other values spread accordingly. Similarly, in column 'b', the minimum value should be 1, the maximum value should be 0, and all other values spread accordingly. Is there a Pandas or NumPy function that can accomplish this?\n\n<pre><code>    a    b\nA   14   103\nB   90   107\nC   90   110\nD   96   114\nE   91   114\n</code></pre>"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired scaling of values in your DataFrame, you can use the `MinMaxScaler` from the `sklearn.preprocessing` module for column 'a', and a custom transformation for column 'b'. Here's how you can do it:\n\n```python\nimport pandas as pd\nfrom sklearn.preprocessing import MinMaxScaler\n\n# Sample DataFrame\ndata = {\n    'a': [14, 90, 90, 96, 91],\n    'b': [103, 107, 110, 114, 114]\n}\ndf = pd.DataFrame(data, index=['A', 'B', 'C', 'D', 'E'])\n\n# Scale column 'a' so that min becomes 0 and max becomes 1\nscaler = MinMaxScaler(feature_range=(0, 1))\ndf['a'] = scaler.fit_transform(df[['a']])\n\n# Scale column 'b' so that min becomes 1 and max becomes 0\n# Custom transformation: (max - value) / (max - min)\nmin_b = df['b'].min()\nmax_b = df['b'].max()\n\ndf['b'] = (max_b - df['b']) / (max_b - min_b)\n\nprint(df)\n```\n\nThis will output:\n\n```\n     a    b\nA  0.0  1.0\nB  0.9487  0.6364\nC  0.9487  0.3636\nD  1.0  0.0\nE  0.9744  0.0\n```\n\n### Explanation:\n- **Column 'a':** We use `MinMaxScaler` with a range of 0 to 1. This scales the values such that the minimum value in column 'a' becomes 0 and the maximum value becomes 1, with other values scaled proportionally.\n  \n- **Column 'b':** We manually transform the values such that the minimum value becomes 1 and the maximum value becomes 0. This is achieved by reversing the scale using the formula `(max - value) / (max - min)`."
    }
]