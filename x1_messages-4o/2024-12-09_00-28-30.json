[
    {
        "role": "user",
        "content": "Does pytest have an equivalent method to `unittest.TestCase`'s `assertCountEqual` or `assertItemsEqual`? I am trying to compare two iterables and check if they contain the same number of the same objects, regardless of their order. The problem is, the iterables I am comparing are lists of dictionaries, and dictionaries are not hashable. Thus, the straightforward alternatives like `set(x)`, `sorted(x)`, or `Counter(list(x))`, as suggested in the official documentation, are not working. Is there a suitable method or workaround in pytest to achieve this?"
    },
    {
        "role": "assistant",
        "content": "In `pytest`, there isn't a direct equivalent to `unittest.TestCase`'s `assertCountEqual` or `assertItemsEqual`. However, you can achieve similar functionality by using a custom assertion function. The goal is to compare two iterables to ensure they contain the same items in any order, even when those items are dictionaries (which are not hashable).\n\nHere's a custom function that you can use in your pytest tests to achieve this:\n\n```python\ndef assert_count_equal(iterable1, iterable2):\n    from collections import Counter\n    import pytest\n\n    # Convert the dictionaries to frozensets of tuples so they can be counted\n    def to_frozenset_of_tuples(d):\n        if isinstance(d, dict):\n            return frozenset((k, to_frozenset_of_tuples(v)) for k, v in d.items())\n        return d\n\n    converted1 = [to_frozenset_of_tuples(item) for item in iterable1]\n    converted2 = [to_frozenset_of_tuples(item) for item in iterable2]\n\n    # Use Counter to compare the converted lists\n    if Counter(converted1) != Counter(converted2):\n        pytest.fail(f\"Iterables do not have the same items:\\n{iterable1}\\n{iterable2}\")\n\n# Example usage in a pytest test\ndef test_example():\n    list1 = [{'a': 1, 'b': 2}, {'c': 3}]\n    list2 = [{'c': 3}, {'a': 1, 'b': 2}]\n\n    assert_count_equal(list1, list2)  # This should pass\n\n    list3 = [{'a': 1, 'b': 2}, {'c': 4}]\n    assert_count_equal(list1, list3)  # This should fail\n```\n\nThis function converts each dictionary in the lists to a frozenset of tuples, allowing them to be compared using `Counter`. The conversion is recursive to handle nested dictionaries. This approach should work well for comparing lists of dictionaries in `pytest`."
    }
]