[
    {
        "role": "user",
        "content": "I'm working with Python 3.7 and I'm trying to determine whether a type annotation is a \"subclass\" of a given generic type. In Python 3.5 and 3.6, this was straightforward, but in Python 3.7, instances of generic types are no longer instances of type, causing the check to fail. I've tried checking the actual instance type and the __origin__ argument on the type but neither of these methods seem correct or reliable. What is the best way to check if a type annotation is a subclass of a given generic type in Python 3.7?"
    },
    {
        "role": "assistant",
        "content": "In Python 3.7, type annotations and the way generics are handled have undergone some changes due to the introduction of PEP 560, which aimed to improve the performance and flexibility of typing. As a result, checking if a type annotation is a subclass of a given generic type requires a slightly different approach.\n\nHere's a strategy you can use to determine if a type annotation is a subclass of a given generic type:\n\n1. **Use `__origin__` and `__args__`:** Check the `__origin__` attribute, which indicates the original generic type, and compare it to your target generic. Then, check the `__args__` for specific type parameters.\n\n2. **Inspect the `__mro__`:** Examine the Method Resolution Order (MRO) of the type annotation to see if the generic type appears in the hierarchy.\n\nHere's a sample function that demonstrates how to perform this check:\n\n```python\nfrom typing import Generic, TypeVar, List, Union\n\nT = TypeVar('T')\n\ndef is_subclass_of_generic(type_annotation, generic_type):\n    # Check if the provided type annotation is a subclass of the generic type\n    if hasattr(type_annotation, '__origin__'):\n        if type_annotation.__origin__ is generic_type:\n            return True\n        # Check if the base classes include the generic type\n        for base in type_annotation.__orig_bases__:\n            if base.__origin__ is generic_type:\n                return True\n    return False\n\n# Example usage\nclass MyList(List[int]):\n    pass\n\n# Check if MyList is a subclass of List\nprint(is_subclass_of_generic(MyList, List))  # Output: True\n\n# Check with other generic types\nprint(is_subclass_of_generic(Union[int, str], Union))  # Output: True\n```\n\nIn this example, `is_subclass_of_generic` checks if a given type annotation is a subclass of a specific generic type by inspecting the `__origin__` and `__orig_bases__` attributes.\n\nKeep in mind that this solution is specifically for Python 3.7 and may require adjustments for future versions of Python as the typing module continues to evolve."
    }
]