[
    {
        "role": "user",
        "content": "How can I write each row of my pandas DataFrame as a new JSON file? I tried iterating over the rows of the DataFrame using df.iterrows and then using json.dumps to dump the file, but I wasn't successful. Can you provide some guidance?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Writing each row of a pandas DataFrame to a separate JSON file can be done efficiently by iterating over the DataFrame rows and using the `json` module to handle the file writing. Below is a step-by-step guide to help you achieve this:\n\n1. **Import the necessary libraries**: Make sure you have pandas and json modules imported.\n\n2. **Iterate over the rows**: Use the `iterrows()` method to iterate over each row of the DataFrame.\n\n3. **Convert rows to JSON**: Convert each row to a dictionary and then to JSON.\n\n4. **Write to a JSON file**: Use the `json.dump()` function to write each JSON object to a separate file.\n\nHere is an example code snippet to achieve this:\n\n```python\nimport pandas as pd\nimport json\nimport os\n\n# Sample DataFrame\ndata = {\n    'col1': [1, 2, 3],\n    'col2': ['a', 'b', 'c'],\n    'col3': [True, False, True]\n}\n\ndf = pd.DataFrame(data)\n\n# Directory to save JSON files\noutput_dir = 'output_json_files'\nos.makedirs(output_dir, exist_ok=True)  # Create directory if it doesn't exist\n\n# Iterate over each row in the DataFrame\nfor index, row in df.iterrows():\n    # Convert the row to a dictionary\n    row_dict = row.to_dict()\n    \n    # Define the filename for each JSON file\n    filename = f'{output_dir}/row_{index}.json'\n    \n    # Write the dictionary to a JSON file\n    with open(filename, 'w') as json_file:\n        json.dump(row_dict, json_file, indent=4)\n        \n    print(f'Row {index} written to {filename}')\n```\n\n### Key Points:\n- **Directory Creation**: Use `os.makedirs()` to ensure the output directory exists.\n- **Row Conversion**: `row.to_dict()` converts the row to a dictionary, which is easy to serialize to JSON.\n- **File Naming**: Use a systematic way to name each file, such as using the row index.\n- **JSON Formatting**: The `indent` parameter in `json.dump()` makes the JSON output more readable.\n\nThis script will create individual JSON files for each row in the specified output directory. Adjust the DataFrame and file naming as needed for your specific use case."
    }
]