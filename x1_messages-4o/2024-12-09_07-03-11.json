[
    {
        "role": "user",
        "content": "I'm trying to understand the status of `setup.cfg` in Python. It seems to me that `setup.cfg` is an improvement over `setup.py` as it's declarative, does not involve running arbitrary code to make the package installable, and makes it harder to distribute malicious Python packages. However, I'm confused because while the setuptools documentation suggests that setuptools only got support for `setup.cfg` in version `30.3.0 (8 Dec 2016)`, the `distutils` documentation says that `setup.cfg` has been supported for a long time, at least since Python 2.6. Furthermore, the wheel documentation implies that `setup.cfg` is now deprecated and it's preferred to provide environment markers via the `extras_require` parameter. So, is `setup.cfg` deprecated or is it the most recent way to do things?"
    },
    {
        "role": "assistant",
        "content": "The confusion around the status of `setup.cfg` in Python packaging stems from the evolution of packaging tools and practices over the years. Let's break it down:\n\n1. **Historical Context**: \n   - `distutils` has indeed supported `setup.cfg` for a long time, allowing some configuration to be specified in a declarative manner. However, `distutils` itself is now deprecated, and its functionality has been largely absorbed by `setuptools`.\n   \n2. **Setuptools and `setup.cfg`**: \n   - As you've noted, `setuptools` started to support `setup.cfg` in a more substantial way from version 30.3.0. This allows defining package metadata and options in a declarative manner, which is favored for its simplicity and security benefits, as it avoids the execution of arbitrary code during package installation.\n\n3. **Current Best Practices**:\n   - `setup.cfg` is not deprecated; rather, it is part of the current best practices for Python packaging. The Python packaging community encourages the use of declarative configurations, and `setup.cfg` fits well into this model.\n   - `pyproject.toml` is also becoming increasingly popular as it provides a more modern and flexible way to define build system requirements and configurations, helping to standardize the build process across different tools.\n\n4. **Wheel and Environment Markers**:\n   - The reference to environment markers in the wheel documentation is likely about how dependencies are specified. Environment markers can be used within `setup.cfg` to specify platform-specific dependencies, and they can be used in `extras_require` configurations within `setup.py` or `setup.cfg`.\n\n5. **Summary**:\n   - `setup.cfg` is not deprecated. It is a recommended approach for specifying package metadata declaratively.\n   - Consider also using `pyproject.toml` for defining build system requirements, especially if you are using newer tools or features, as it represents the future direction of Python packaging.\n\nIn short, the use of `setup.cfg` in combination with `pyproject.toml` represents the most modern and recommended approach for Python packaging as of now."
    }
]