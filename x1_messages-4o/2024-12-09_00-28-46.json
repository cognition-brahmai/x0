[
    {
        "role": "user",
        "content": "How can I check if a variable in Python is a list or a tuple? I often deal with indefinitely deep nested data-structures of lists of lists of lists of strings and so on, which I explore using a recursive algorithm. For this reason, I need to distinguish a list from a string. I am aware of the `isinstance()` function, but I've heard it is not recommended. Is there a better way?"
    },
    {
        "role": "assistant",
        "content": "The `isinstance()` function is actually a perfectly valid and recommended way to check if a variable is an instance of a particular type, such as a list or tuple, in Python. It is widely used and considered a good practice for type checking. However, if you are looking for alternative methods, here are a couple of options:\n\n1. **Using `type()`**:\n   You can use the `type()` function to compare the type of a variable. However, this is generally less flexible than `isinstance()` because it does not support inheritance checking.\n\n   ```python\n   if type(variable) is list:\n       print(\"It's a list!\")\n   elif type(variable) is tuple:\n       print(\"It's a tuple!\")\n   ```\n\n2. **Custom Type Checking**:\n   If you want to distinguish between lists, tuples, and strings specifically, you can create a utility function to encapsulate the check:\n\n   ```python\n   def is_sequence_but_not_string(obj):\n       return isinstance(obj, (list, tuple)) and not isinstance(obj, str)\n\n   # Usage\n   if is_sequence_but_not_string(variable):\n       print(\"It's a list or tuple!\")\n   ```\n\n3. **Duck Typing**:\n   If you are following a more Pythonic approach, you might rely on \"duck typing\" by simply trying to perform operations that would work on lists or tuples and handling exceptions if they occur.\n\n   ```python\n   try:\n       iter(variable)\n       if isinstance(variable, str):\n           raise TypeError\n       print(\"It's a list or tuple!\")\n   except TypeError:\n       print(\"It's not a list or tuple!\")\n   ```\n\nIn your case, since you're dealing with recursively nested structures and need to differentiate between lists/tuples and strings, `isinstance()` is indeed your best choice. It is clear, concise, and efficient for this purpose."
    }
]