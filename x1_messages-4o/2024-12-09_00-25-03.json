[
    {
        "role": "user",
        "content": "How can I extract and straighten a rotated rectangle area from an image using OpenCV in Python? I have the information of the rectangle in the image including width, height, center point and rotation degree. I would like to write a script that not only cuts out these rectangles but also straightens them. I am using OpenCV Python and I am having difficulty finding examples to guide me."
    },
    {
        "role": "assistant",
        "content": "To extract and straighten a rotated rectangle from an image using OpenCV in Python, you can follow these steps:\n\n1. **Import Required Libraries**: Make sure you have OpenCV installed. You can install it using pip if you haven't already:\n\n   ```bash\n   pip install opencv-python\n   ```\n\n2. **Load Your Image**: Use OpenCV to read your image from a file.\n\n3. **Define the Rotated Rectangle**: You already have the rectangle's center point, width, height, and rotation angle.\n\n4. **Get the Rotation Matrix**: Use the `cv2.getRotationMatrix2D` function to get the rotation matrix to rotate the entire image such that the rectangle becomes axis-aligned.\n\n5. **Apply the Affine Transform**: Rotate the image using `cv2.warpAffine`.\n\n6. **Extract the Axis-Aligned Rectangle**: Now that the rectangle is axis-aligned, extract it using slicing.\n\nHere's a sample code to guide you through these steps:\n\n```python\nimport cv2\nimport numpy as np\n\ndef extract_and_straighten_rectangle(image_path, center, width, height, angle):\n    # Load the image\n    image = cv2.imread(image_path)\n\n    # Convert angle from degrees to radians\n    angle_rad = np.deg2rad(angle)\n\n    # Calculate the size of the bounding box\n    cos_a = np.abs(np.cos(angle_rad))\n    sin_a = np.abs(np.sin(angle_rad))\n\n    # Calculate the new dimensions of the rotated image\n    new_width = int(height * sin_a + width * cos_a)\n    new_height = int(height * cos_a + width * sin_a)\n\n    # Get the rotation matrix\n    rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)\n\n    # Adjust the rotation matrix to take into account translation\n    rotation_matrix[0, 2] += (new_width / 2) - center[0]\n    rotation_matrix[1, 2] += (new_height / 2) - center[1]\n\n    # Rotate the image\n    rotated_image = cv2.warpAffine(image, rotation_matrix, (new_width, new_height))\n\n    # Calculate the top-left corner of the rectangle in the rotated image\n    top_left_x = int(new_width / 2 - width / 2)\n    top_left_y = int(new_height / 2 - height / 2)\n\n    # Extract the rectangle\n    extracted_rectangle = rotated_image[top_left_y:top_left_y + height, top_left_x:top_left_x + width]\n\n    return extracted_rectangle\n\n# Example usage\nimage_path = 'your_image.jpg'\ncenter = (150, 100)  # Example center point (x, y)\nwidth = 100  # Example width\nheight = 50  # Example height\nangle = 30  # Example angle in degrees\n\nextracted_img = extract_and_straighten_rectangle(image_path, center, width, height, angle)\n\n# Display the result\ncv2.imshow(\"Extracted and Straightened Rectangle\", extracted_img)\ncv2.waitKey(0)\ncv2.destroyAllWindows()\n```\n\n### Explanation\n- **Rotation and Translation**: The rotation matrix is adjusted to account for the translation that occurs during rotation.\n- **Warping the Image**: `cv2.warpAffine` applies the rotation, allowing you to handle the change in dimensions.\n- **Rectangle Extraction**: Once the image is aligned, it's straightforward to extract the desired rectangle using array slicing.\n\nThis script should help you extract and straighten rotated rectangles with the given parameters. Adjust the parameters according to your actual rectangle's properties."
    }
]