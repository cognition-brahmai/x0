[
    {
        "role": "user",
        "content": "How can I view the entire HTTP request, including headers, that is being sent by my Python application using the `requests` library? I am using it to call PayPal's API over HTTPS and am encountering an error that PayPal support is unable to identify. They have requested that I provide the entire request for troubleshooting."
    },
    {
        "role": "assistant",
        "content": "To view the entire HTTP request, including headers, that your Python application is sending using the `requests` library, you can use the `requests` library's built-in logging or a tool like `mitmproxy` for more complex scenarios. Here's how you can do it using Python's `logging` module:\n\n### Method 1: Using Logging with the `requests` Library\n\nYou can enable logging to see the request headers and body. Here's a simple example of how to do that:\n\n```python\nimport logging\nimport requests\n\n# Set up logging\nlogging.basicConfig(level=logging.DEBUG)\n\n# Create a logger for the 'requests' library\nlogger = logging.getLogger('urllib3')\nlogger.setLevel(logging.DEBUG)\n\n# Use a StreamHandler to print logs to the console\nstream_handler = logging.StreamHandler()\nstream_handler.setLevel(logging.DEBUG)\nlogger.addHandler(stream_handler)\n\n# Your request details\nurl = 'https://api.paypal.com/v1/your_endpoint'\nheaders = {\n    'Content-Type': 'application/json',\n    'Authorization': 'Bearer YOUR_ACCESS_TOKEN',\n    # Add other headers as required\n}\ndata = {\n    # Your request payload\n}\n\n# Send the request\nresponse = requests.post(url, headers=headers, json=data)\n\n# Print the response\nprint(response.status_code)\nprint(response.text)\n```\n\nThis will print out detailed debug information for each request made with the `requests` library, including the headers and the body.\n\n### Method 2: Using a Proxy Tool like `mitmproxy`\n\nFor more complex scenarios or when you want to capture HTTPS traffic, you might consider using a tool like `mitmproxy`:\n\n1. **Install mitmproxy**:\n   ```\n   pip install mitmproxy\n   ```\n\n2. **Run mitmproxy**:\n   Start `mitmproxy` to intercept traffic:\n   ```\n   mitmproxy\n   ```\n\n3. **Configure your application**:\n   Configure your Python application to use `mitmproxy` as an HTTP proxy. You can do this by setting the `HTTP_PROXY` and `HTTPS_PROXY` environment variables:\n\n   ```python\n   import os\n   os.environ['HTTP_PROXY'] = 'http://localhost:8080'\n   os.environ['HTTPS_PROXY'] = 'http://localhost:8080'\n   ```\n\n4. **Send the request**:\n   Run your Python application, and `mitmproxy` will intercept and display all requests and responses.\n\nThis approach allows you to see the exact HTTP request and response, which can be very helpful for debugging.\n\nBy using one of these methods, you should be able to capture the full HTTP request, including headers, and provide it to PayPal support for troubleshooting."
    }
]