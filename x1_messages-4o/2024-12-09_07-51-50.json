[
    {
        "role": "user",
        "content": "How can I modify a Bash script to read from either a file provided as a command line argument, or from standard input, similar to the Perl script provided? The Perl script 'my.pl' reads from standard input with 'perl my.pl', and from 'a.txt' with 'perl my.pl a.txt'. Can I achieve the same functionality in Bash?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve similar functionality in a Bash script by using conditional logic to check if a file is provided as a command-line argument. If a file is provided, the script will read from the file; otherwise, it will read from standard input. Here's an example of how you can implement this in a Bash script:\n\n```bash\n#!/bin/bash\n\n# Check if a file is provided as a command-line argument\nif [ $# -eq 1 ]; then\n    # Read from the file provided as an argument\n    while IFS= read -r line; do\n        # Process each line\n        echo \"Processing: $line\"\n    done < \"$1\"\nelse\n    # Read from standard input\n    while IFS= read -r line; do\n        # Process each line\n        echo \"Processing: $line\"\n    done\nfi\n```\n\n### How it Works:\n1. `if [ $# -eq 1 ]; then`: This checks if exactly one argument is provided to the script. `$#` is a special variable that holds the number of command-line arguments.\n\n2. If an argument is provided, the script reads from the file specified by the argument using `while IFS= read -r line; do ... done < \"$1\"`. Here, `$1` refers to the first argument, which is expected to be a file name.\n\n3. If no argument is provided, the script defaults to reading from standard input.\n\n4. The `IFS=` part ensures that leading and trailing whitespace is preserved in each line being read, and `-r` prevents backslashes from being interpreted as escape characters.\n\n### Usage:\n- To read from a file: `./myscript.sh a.txt`\n- To read from standard input: `./myscript.sh` and then type the input, or use a pipe, like `cat a.txt | ./myscript.sh`\n\nThis script structure allows you to handle input flexibly, similar to the Perl script you described."
    }
]