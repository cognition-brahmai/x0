[
    {
        "role": "user",
        "content": "I am working on a python linear algebra module and I tried to add type annotations to the module, as shown in the code below. However, I am facing a `NameError: Name 'Vector' is not defined` when I try to import this. Even though I have defined the class in the same file, why does it say the name isn't defined? How can I define `Vector` in such a way that it can be used for annotations as a `type`?\n\n```python\nclass Vector:\n    # Various irrelevant implementation details\n    def __add__(self, other: Vector) -> Vector:\n       # More implementation details....\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering arises because the type annotations are being evaluated at runtime, and at the point where you use `Vector` in the type annotations, the `Vector` class has not been fully defined yet. In Python, you can resolve this by using a forward reference, which involves enclosing the class name in quotes to make it a string. This tells Python to treat it as a forward declaration of the class type.\n\nHere's how you can modify your code to fix the `NameError`:\n\n```python\nclass Vector:\n    # Various irrelevant implementation details\n\n    def __add__(self, other: 'Vector') -> 'Vector':\n       # More implementation details....\n```\n\nBy using `'Vector'` in quotes, Python understands that this is a reference to a type that will be defined later. This is a common practice when using type annotations for methods within the same class.\n\nAdditionally, if you are using Python 3.7 or newer and want to make type annotations more flexible, you can also import `annotations` from the `__future__` module at the top of your file. This will allow you to use the class name directly without quotes, as it delays the evaluation of type annotations until all classes are defined:\n\n```python\nfrom __future__ import annotations\n\nclass Vector:\n    # Various irrelevant implementation details\n\n    def __add__(self, other: Vector) -> Vector:\n       # More implementation details....\n```\n\nThis approach is more readable and is recommended for projects that can use Python 3.7 or later."
    }
]