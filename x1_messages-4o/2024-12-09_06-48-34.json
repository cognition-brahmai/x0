[
    {
        "role": "user",
        "content": "What is the correct return type hint for a generator function in Python? I have a generator function that reads a text file and yields its lines one by one. The function is as follows:\n\n```python\ndef read_text_file(fn):\n    \"\"\"\n    Yields the lines of the text file one by one.\n    :param fn: Path of text file to read.\n    :type fn: str\n    :rtype: ???????????????? <======================= what goes here?\n    \"\"\"\n    with open(fn, 'rt') as text_file:\n        for line in text_file:\n            yield line\n```\n\nThe return type isn't just a string, it's some kind of iterable of strings. I can't just write `:rtype: str`. What should be the right type hint?"
    },
    {
        "role": "assistant",
        "content": "In Python, when you have a generator function, you should use the `Generator` type from the `typing` module to indicate the return type. The `Generator` type allows you to specify the type of values yielded, the type sent to the generator (if using `.send()`), and the return type of the generator function itself.\n\nFor your specific case, since your generator yields strings and doesn't expect to receive any values via `.send()`, and it doesn't return any value via `return`, you can use `Generator[str, None, None]`.\n\nHere's how you can update your function's docstring with the correct type hint:\n\n```python\nfrom typing import Generator\n\ndef read_text_file(fn) -> Generator[str, None, None]:\n    \"\"\"\n    Yields the lines of the text file one by one.\n    :param fn: Path of text file to read.\n    :type fn: str\n    :rtype: Generator[str, None, None]\n    \"\"\"\n    with open(fn, 'rt') as text_file:\n        for line in text_file:\n            yield line\n```\n\nThis indicates that the function returns a generator that yields `str` values, doesn't accept values sent to it, and doesn't return a value."
    }
]