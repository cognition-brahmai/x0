[
    {
        "role": "user",
        "content": "What are the available tools in the Python Standard Library that can be utilized in a similar fashion to the base64 encoder/decoder and json validator and pretty printer? For instance, I know I can use the base64 encoder/decoder and json validator and pretty printer with the following commands:\n\n1. base64 encoder/decoder: \n```python \npython -m base64 -e <input>\npython -m base64 -d <input>\n```\n2. json validator and pretty printer\n```python \npython -m json.tool <input>\n```\nIn these examples, the input can be either stdin or a file. I am curious to know if there are other tools that can be used in the Python Standard Library in a similar way?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The Python Standard Library offers several tools that can be utilized in a similar fashion, using the `-m` flag to execute modules as scripts. Here are some examples:\n\n1. **HTTP Server**: You can quickly start a simple HTTP server with the `http.server` module.\n   ```bash\n   python -m http.server [port]\n   ```\n\n2. **CGIHTTPRequestHandler**: For running a CGI script, you can use:\n   ```bash\n   python -m http.server --cgi [port]\n   ```\n\n3. **Zipfile**: You can create, read, and extract ZIP files using the `zipfile` module.\n   - To list contents of a ZIP file:\n     ```bash\n     python -m zipfile -l <zipfile>\n     ```\n   - To extract a ZIP file:\n     ```bash\n     python -m zipfile -e <zipfile> <destination>\n     ```\n   - To create a ZIP file:\n     ```bash\n     python -m zipfile -c <zipfile> <files...>\n     ```\n\n4. **TAR File**: Similar to `zipfile`, you can work with TAR archives using the `tarfile` module.\n   - To list contents of a TAR file:\n     ```bash\n     python -m tarfile -l <tarfile>\n     ```\n   - To extract a TAR file:\n     ```bash\n     python -m tarfile -e <tarfile> <destination>\n     ```\n   - To create a TAR file:\n     ```bash\n     python -m tarfile -c <tarfile> <files...>\n     ```\n\n5. **Profile**: You can profile a Python script using the `cProfile` module.\n   ```bash\n   python -m cProfile <script.py>\n   ```\n\n6. **Timeit**: This module can be used to measure the execution time of small code snippets.\n   ```bash\n   python -m timeit \"code snippet\"\n   ```\n\n7. **Pydoc**: You can generate documentation for Python modules.\n   - To view the documentation of a module:\n     ```bash\n     python -m pydoc <module>\n     ```\n   - To start an HTTP server to browse documentation:\n     ```bash\n     python -m pydoc -p <port>\n     ```\n\n8. **Pycompile**: You can compile Python files to bytecode using the `py_compile` module.\n   ```bash\n   python -m py_compile <file.py>\n   ```\n\n9. **Dis**: You can disassemble Python bytecode into a more readable form using the `dis` module.\n   ```bash\n   python -m dis <file.py>\n   ```\n\nThese tools can be very handy for quick tasks and are quite powerful when used appropriately. Make sure to explore their respective documentation for more detailed usage."
    }
]