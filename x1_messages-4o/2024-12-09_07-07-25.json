[
    {
        "role": "user",
        "content": "How can I import my own model into myproject/alembic/env.py? I want to use `alembic revision --autogenerate` with my own model classes and therefore need to import them into `myproject/alembic/env.py` as described in the Alembic documentation. However, I'm encountering issues with the import and get the error `SystemError: Parent module '' not loaded, cannot perform relative import`. My project directory and file structure are as follows:\n\n```\nmyproject/\n    common/\n        __init__.py\n        model.py\n    alembic/\n        env.py\n```\n\nThe error I encounter is `from .common import model SystemError: Parent module '' not loaded, cannot perform relative import`. The `myproject` directory is just a repository/working directory and is not installed into the system with pip3, apt-get, easyinstall, or any other similar tools."
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to how Python handles relative imports when running scripts directly. When you run a script, the directory containing the script isn't automatically added to the Python path, so relative imports may fail.\n\nTo resolve this issue, you can adjust how you import your models in the `env.py` file. Here are a few approaches you can take:\n\n1. **Modify the `PYTHONPATH`:** You can run your Alembic commands with the `PYTHONPATH` set to the root of your project directory. This will make the `myproject` directory available for imports.\n\n   ```bash\n   PYTHONPATH=. alembic revision --autogenerate\n   ```\n\n   This sets the current directory (where `myproject` is located) as the root for Python imports.\n\n2. **Use Absolute Imports:** Instead of using a relative import, switch to an absolute import in `env.py`. Change:\n\n   ```python\n   from .common import model\n   ```\n\n   To:\n\n   ```python\n   from myproject.common import model\n   ```\n\n   Make sure to run the Alembic command from the root of your project directory or set the `PYTHONPATH` appropriately.\n\n3. **Modify `sys.path` in `env.py`:** You can dynamically add the root of your project to `sys.path` in the `env.py` file.\n\n   ```python\n   import sys\n   import os\n\n   # Add the root directory of the project to sys.path\n   sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))\n\n   from common import model\n   ```\n\n   This approach modifies the Python path at runtime, ensuring that imports will work as expected.\n\nBy implementing one of these methods, you should be able to import your model class into the `env.py` file and use `alembic revision --autogenerate` successfully."
    }
]