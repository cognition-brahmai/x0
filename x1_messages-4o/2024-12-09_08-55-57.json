[
    {
        "role": "user",
        "content": "How can I extract all phone numbers from a given text using Python?"
    },
    {
        "role": "assistant",
        "content": "To extract phone numbers from a given text using Python, you can use regular expressions (regex) with the `re` module. Here's a simple example to demonstrate how you can achieve this:\n\n```python\nimport re\n\ndef extract_phone_numbers(text):\n    # Define a regular expression pattern for phone numbers\n    phone_pattern = re.compile(r'\\b\\d{10}\\b|\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b')\n    \n    # Find all matches of the pattern in the text\n    phone_numbers = phone_pattern.findall(text)\n    \n    return phone_numbers\n\n# Example text\ntext = \"\"\"\nHere are some phone numbers:\n- John: 123-456-7890\n- Alice: 9876543210\n- Bob: (123) 456 7890\n- Carol: 123.456.7890\n\"\"\"\n\n# Extract phone numbers\nextracted_numbers = extract_phone_numbers(text)\nprint(\"Extracted Phone Numbers:\", extracted_numbers)\n```\n\n### Explanation:\n- The regular expression pattern `\\b\\d{10}\\b|\\b\\d{3}[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b` is designed to match:\n  - 10 consecutive digits.\n  - Phone numbers in the format `XXX-XXX-XXXX`, `XXX.XXX.XXXX`, `XXX XXX XXXX`, or with parentheses like `(XXX) XXX XXXX`.\n- `\\b` is a word boundary to ensure that we don't accidentally match parts of longer numbers.\n- `[-.\\s]?` allows for optional separators such as a dash, period, or space between different parts of the phone number.\n\nThis script will extract different common formats of phone numbers from the text. You can modify the regular expression pattern to match any specific formats you need."
    }
]