[
    {
        "role": "user",
        "content": "How can I count consecutive positive values in a Python/Pandas array more efficiently? I am currently using the following code to count consecutive up days in equity return data, where a positive day is 1 and a negative day is 0. For example, an input list `y=[0,0,1,1,1,0,0,1,0,1,1]` should return `z=[0,0,1,2,3,0,0,1,0,1,2]`. However, my current solution is very slow and I suspect it's because I'm looping through the list `y` too many times. Is there a more Pythonic way of achieving this that only loops through the data once?\n\n```python\nimport pandas\ny = pandas.Series([0,0,1,1,1,0,0,1,0,1,1])\n\ndef f(x):\n    return reduce(lambda a,b:reduce((a+b)*b,x)\n\nz = pandas.expanding_apply(y,f)\n```"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can achieve this more efficiently by iterating through the list only once using a simple loop. You can avoid the overhead of using `reduce` and `expanding_apply` by directly computing the consecutive counts. Here's a more efficient and Pythonic way to do it:\n\n```python\nimport numpy as np\n\ndef count_consecutive_positive(y):\n    z = np.zeros_like(y)  # Initialize the result array with zeros\n    count = 0\n\n    for i in range(len(y)):\n        if y[i] == 1:\n            count += 1\n            z[i] = count\n        else:\n            count = 0\n\n    return z\n\ny = np.array([0, 0, 1, 1, 1, 0, 0, 1, 0, 1, 1])\nz = count_consecutive_positive(y)\nprint(z)\n```\n\nThis function `count_consecutive_positive` iterates through the array `y` once, maintaining a `count` of consecutive positive values (1s). When a zero is encountered, it resets the count. This approach should be efficient and straightforward."
    }
]