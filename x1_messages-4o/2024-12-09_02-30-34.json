[
    {
        "role": "user",
        "content": "Can I use Dash within a Jupyter Notebook or JupyterLab? Is it possible to have a Dash application function within a Jupyter Notebook instead of viewing it in a separate browser? My goal is to link graphs in a Jupyter notebook such that hovering over one graph generates the input needed for another graph."
    },
    {
        "role": "assistant",
        "content": "Yes, you can use Dash within a Jupyter Notebook or JupyterLab. Plotly Dash can be integrated into Jupyter environments, allowing you to build interactive web applications that function within the notebook interface.\n\n### Using Dash in Jupyter Notebook\n\nTo get started, you can use the `jupyter-dash` library, which is specifically designed to integrate Dash with Jupyter notebooks. Here\u2019s a simple guide to set it up:\n\n1. **Install `jupyter-dash`:**\n\n   You can install the library using pip:\n\n   ```bash\n   pip install jupyter-dash\n   ```\n\n2. **Create a Dash Application:**\n\n   Import necessary libraries and create a Dash application within your Jupyter Notebook:\n\n   ```python\n   from jupyter_dash import JupyterDash\n   import dash\n   from dash import html, dcc\n   import plotly.express as px\n   import pandas as pd\n\n   # Create a sample DataFrame\n   df = pd.DataFrame({\n       \"Fruit\": [\"Apples\", \"Oranges\", \"Bananas\", \"Apples\", \"Oranges\", \"Bananas\"],\n       \"Amount\": [4, 1, 2, 2, 4, 5],\n       \"City\": [\"SF\", \"SF\", \"SF\", \"Montreal\", \"Montreal\", \"Montreal\"]\n   })\n\n   # Create a Dash application\n   app = JupyterDash(__name__)\n\n   app.layout = html.Div(children=[\n       html.H1(children='Hello Dash'),\n\n       html.Div(children='''\n           Dash: A web application framework for your data.\n       '''),\n\n       dcc.Graph(\n           id='example-graph',\n           figure=px.bar(df, x=\"Fruit\", y=\"Amount\", color=\"City\", barmode=\"group\")\n       )\n   ])\n\n   app.run_server(mode='inline')\n   ```\n\n3. **Interaction Between Graphs:**\n\n   To link graphs such that hovering over one generates input for another, you can use Dash callbacks. Here\u2019s a simple example:\n\n   ```python\n   from dash.dependencies import Input, Output\n\n   app.layout = html.Div([\n       dcc.Graph(\n           id='graph-1',\n           figure=px.bar(df, x=\"Fruit\", y=\"Amount\", color=\"City\", barmode=\"group\")\n       ),\n       dcc.Graph(id='graph-2')\n   ])\n\n   @app.callback(\n       Output('graph-2', 'figure'),\n       Input('graph-1', 'hoverData')\n   )\n   def update_graph_2(hoverData):\n       fruit = hoverData['points'][0]['x'] if hoverData else None\n       filtered_df = df[df['Fruit'] == fruit] if fruit else df\n       return px.scatter(filtered_df, x=\"City\", y=\"Amount\", color=\"City\")\n\n   app.run_server(mode='inline')\n   ```\n\n### Notes:\n\n- **`jupyter-dash`** allows Dash applications to be run directly within Jupyter notebooks using either `inline` mode (displayed in the notebook) or `external` mode (displayed in a separate browser tab).\n- This setup makes it easy to create interactive visualizations and dashboards that respond to user interactions directly within the notebook environment.\n- Be sure to install all required dependencies and libraries, including `dash`, `plotly`, and `jupyter-dash`.\n\nThis approach will enable you to create interactive, linked visualizations within your Jupyter Notebook, meeting your requirement to have graphs interactively influence each other based on user interactions like hovering."
    }
]