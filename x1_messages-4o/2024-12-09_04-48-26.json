[
    {
        "role": "user",
        "content": "I am trying to make a list as the default value for a dictionary in Python. My initial code was:\n\n```python\nif key in dict:\n  dict[key].append(some_value)\nelse:\n  dict[key] = [some_value]\n```\n\nBut I am supposing there could be a way to avoid using this 'if' statement. I tried the following two methods:\n\n```python\ndict.setdefault(key, [])\ndict[key].append(some_value)\n```\n\nand \n\n```python\ndict[key] = dict.get(key, []).append(some_value)\n```\n\nHowever, both of these methods are throwing a \"TypeError: unhashable type: 'list'\". Can you recommend a solution for this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The issue you encountered with the second approach (`dict[key] = dict.get(key, []).append(some_value)`) arises because the `append()` method returns `None`, which leads to an attempt to assign `None` to `dict[key]`. This is why you encounter the error.\n\nThe first approach using `setdefault()` is almost correct, but you should call `append()` on the result of `setdefault()` directly. Here\u2019s how you can do it:\n\n```python\ndict.setdefault(key, []).append(some_value)\n```\n\nThis approach will set `dict[key]` to an empty list if `key` is not already in the dictionary, and then it will append `some_value` to that list.\n\nAlternatively, you can use the `collections.defaultdict` class, which is designed specifically for this kind of use case. Here\u2019s how you can use it:\n\n```python\nfrom collections import defaultdict\n\n# Create a defaultdict with list as the default factory\ndict = defaultdict(list)\n\n# Now you can append values without checking if the key exists\ndict[key].append(some_value)\n```\n\nWith `defaultdict`, you don't need to worry about checking if the key exists or setting a default value manually; it automatically creates a new list for any new key accessed. This makes your code cleaner and more efficient."
    }
]