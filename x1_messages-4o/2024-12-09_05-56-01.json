[
    {
        "role": "user",
        "content": "I am trying to configure a Python logger for a wsgi (web2py) application, using a specific formatted handler. However, I am encountering an issue where I see double entries in my stdout. How can I use my new formatted handler and remove or hide the default one?\n\nHere's the code I am currently using:\n```python\nimport logging, logging.handlers\nfrom logging import StreamHandler, Formatter\n\ndef get_configured_logger(name):\n\n    logger = logging.getLogger(name)\n\n    if (len(logger.handlers) == 0):\n        # This logger has no handlers, so we can assume it hasn't yet been configured (Django uses similiar trick)\n\n        # === Configure logger ===\n\n        # Create Formatted StreamHandler:\n        FORMAT = \"%(process)s %(thread)s: %(message)s\"\n        formatter = logging.Formatter(fmt=FORMAT)\n        handler = logging.StreamHandler()\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n        logger.debug('CONFIGURING LOGGER')\n\n    return logger\n\n# Get app specific logger:\nlogger = get_configured_logger(request.application)\nlogger.debug(\"TEST\")\n```\n\nAnd here's the output I am getting:\n```\n81893 4329050112: CONFIGURING LOGGER\nDEBUG:dummy:CONFIGURING LOGGER\n81893 4329050112: TEST\nDEBUG:dummy:TEST\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is likely due to multiple handlers being attached to your logger, which is causing duplicate log entries. When configuring a logger, it's important to ensure that you're not adding handlers that are already present. Additionally, you should check if a default handler is being added elsewhere in your application or framework.\n\nHere are some steps you can follow to resolve the issue:\n\n1. **Ensure Single Handler**: Before adding a handler to the logger, make sure no default handlers are already attached. You can do this by clearing existing handlers before adding your custom one.\n\n2. **Configure Root Logger**: If your application might be configuring the root logger elsewhere, ensure your logger is isolated by setting `propagate` to `False`.\n\n3. **Check for Existing Configuration**: Make sure no other parts of your application or framework are configuring the logger.\n\nHere's an updated version of your code that includes these considerations:\n\n```python\nimport logging\n\ndef get_configured_logger(name):\n    logger = logging.getLogger(name)\n\n    # Prevent propagation to root logger\n    logger.propagate = False\n\n    if not logger.hasHandlers():\n        # Clear existing handlers (if any)\n        logger.handlers.clear()\n\n        # Create Formatted StreamHandler\n        FORMAT = \"%(process)s %(thread)s: %(message)s\"\n        formatter = logging.Formatter(fmt=FORMAT)\n        handler = logging.StreamHandler()\n        handler.setFormatter(formatter)\n        logger.addHandler(handler)\n        logger.setLevel(logging.DEBUG)\n        logger.debug('CONFIGURING LOGGER')\n\n    return logger\n\n# Get app specific logger\nlogger = get_configured_logger('your_application_name')\nlogger.debug(\"TEST\")\n```\n\n### Key Changes:\n- **Clear Existing Handlers**: Using `logger.handlers.clear()` ensures you're starting with a clean slate.\n- **Prevent Propagation**: Setting `logger.propagate = False` ensures that logs do not bubble up to the root logger, which may have its own handlers.\n- **Check for Handlers**: Using `logger.hasHandlers()` to determine if any handlers are already configured.\n\nBy following these steps, you should be able to avoid duplicate log entries and have a logger configured exactly as you need it."
    }
]