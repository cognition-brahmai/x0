[
    {
        "role": "user",
        "content": "I am currently utilizing scikit-learn and numpy for my data analysis work and I am creating IPython notebooks. I want the work to be reproducible, thus I want to set a global seed. However, I am unsure about whether to use `numpy.random.seed` or `random.seed`. I've learned that they are different, particularly, `numpy.random.seed` is not thread-safe. Given that some scikit-learn algorithms I am employing involve generating random numbers, I want the results to be the same each time I run the notebook. Which function should I use to control random number generation in scikit-learn?"
    },
    {
        "role": "assistant",
        "content": "When working with scikit-learn and numpy, ensuring reproducibility typically involves setting the random seed for both numpy and the standard Python random library. This is because different parts of your code might use different libraries for random number generation. \n\nHere\u2019s how you can ensure reproducibility:\n\n1. **Numpy Random Seed:** Use `numpy.random.seed()` to set the seed for numpy-based random number generation. This is important for any operations related to numpy that involve randomness.\n\n2. **Python\u2019s Random Seed:** Use `random.seed()` to set the seed for Python\u2019s built-in random module. This is important if you\u2019re using the standard Python random functions.\n\n3. **Scikit-learn Random State:** Many scikit-learn functions and classes have a `random_state` parameter. You should specify this parameter when possible to ensure reproducibility of models and algorithms that use random number generation internally.\n\nHere is an example of how you might set the seeds:\n\n```python\nimport numpy as np\nimport random\nfrom sklearn.model_selection import train_test_split\n\n# Set seed for numpy\nnp.random.seed(42)\n\n# Set seed for Python's random module\nrandom.seed(42)\n\n# Example usage with scikit-learn\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\n```\n\nBy setting the seed in this way, you help ensure that any random number generation is consistent across runs. Always check the documentation for specific scikit-learn functions or classes to see if they have a `random_state` parameter, and make sure to set it for reproducibility."
    }
]