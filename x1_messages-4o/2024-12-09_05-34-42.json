[
    {
        "role": "user",
        "content": "I am new to using Anaconda Python and trying to set up a project in Sublime Text 3. I have successfully installed Anaconda and created two virtual environments, one for Python 2.7 and another for Python 3.5, using the following commands:\n\n```\nconda create -n python27 python=2.7 anaconda\nconda create -n python35 python=3.5 anaconda\n```\n\nI am having difficulty in setting up the Virtualenvs plugin for SublimeText 3. When asked for a virtualenvs path, I provided:\n\n```\n~/users/../anaconda/envs/python27\n```\n\nHowever, it then asks for what it seems to be a path to a Python distribution. The options it provides are the file paths for the system versions of Python, but not the Anaconda install. I do not necessarily want to use the plugin, I just want to use both Python versions. Is it possible to use a project settings file to set the version of Python instead?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can configure Sublime Text to use different Python versions without relying on the Virtualenvs plugin by setting up custom build systems for each virtual environment. Here\u2019s how you can do it:\n\n### Step 1: Locate the Python Executable\nFirst, find the path to the Python executable for each virtual environment you created with Anaconda. You can find these paths by activating each environment and using the following command in your terminal:\n\n```bash\n# For Python 2.7 environment\nconda activate python27\nwhich python\n\n# For Python 3.5 environment\nconda activate python35\nwhich python\n```\n\nThe output will give you the path to the Python executable within each virtual environment.\n\n### Step 2: Create Custom Build Systems in Sublime Text\nYou need to create custom build systems in Sublime Text to specify which Python version to use. Here\u2019s how:\n\n1. Open Sublime Text.\n2. Go to `Tools` > `Build System` > `New Build System...`.\n\nFor the Python 2.7 environment, create a build system like this:\n\n```json\n{\n    \"cmd\": [\"/path/to/python2.7/executable\", \"-u\", \"$file\"],\n    \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n    \"selector\": \"source.python\"\n}\n```\n\nReplace `/path/to/python2.7/executable` with the actual path you obtained earlier.\n\nSave this file with a descriptive name, like `Python2.7.sublime-build`.\n\nFor the Python 3.5 environment, create another build system:\n\n```json\n{\n    \"cmd\": [\"/path/to/python3.5/executable\", \"-u\", \"$file\"],\n    \"file_regex\": \"^[ ]*File \\\"(...*?)\\\", line ([0-9]*)\",\n    \"selector\": \"source.python\"\n}\n```\n\nReplace `/path/to/python3.5/executable` with the actual path you obtained.\n\nSave this file with a name like `Python3.5.sublime-build`.\n\n### Step 3: Select the Build System\nWhenever you want to run a Python script in Sublime Text, you can select the appropriate build system:\n\n1. Go to `Tools` > `Build System`.\n2. Select either `Python2.7` or `Python3.5`, depending on which virtual environment you want to use.\n\n### Step 4: Use Project Settings (Optional)\nIf you want to set a specific build system for a project, you can create a project file in Sublime Text:\n\n1. Go to `Project` > `Save Project As...`.\n2. Save the project file with a `.sublime-project` extension.\n3. Edit the project file to include the build system:\n\n```json\n{\n    \"build_systems\":\n    [\n        {\n            \"name\": \"Python2.7\",\n            \"cmd\": [\"/path/to/python2.7/executable\", \"-u\", \"$file\"]\n        },\n        {\n            \"name\": \"Python3.5\",\n            \"cmd\": [\"/path/to/python3.5/executable\", \"-u\", \"$file\"]\n        }\n    ],\n    \"folders\":\n    [\n        {\n            \"path\": \".\"\n        }\n    ]\n}\n```\n\nThis setup allows you to switch between different Python versions easily while working on different projects."
    }
]