[
    {
        "role": "user",
        "content": "How can I retrieve arguments passed to setup.py using pip's '--install-option'? For example, I am trying to install a package from a local path using pip 1.4.1 as shown below:\n\n```python\npip install /path/to/my/local/package\n```\n\nThis does what I want, which is more or less the equivalent of running `python /path/to/my/local/package/setup.py install`, but I would like to pass some additional options/arguments to my package's setup.py install. I understand from the pip documentation that this is possible with the `--install-option` option, such as:\n\n```python\npip install --install-option=\"--some-option\" /path/to/my/local/package\n```\n\nA post from the python-virtualenv Google Group suggests this is achievable. However, I am struggling to obtain the passed-in \"--some-option\" from within setup.py. I tried examining `sys.argv`, but regardless of what I specify for \"--install-option=\", `sys.argv` always appears like this:\n\n```python\n['-c', 'egg_info', '--egg-base', 'pip-egg-info']\n```\n\nSo, how can I retrieve the values of options passed in as \"--install-option\" from pip install?"
    },
    {
        "role": "assistant",
        "content": "When you use `pip install --install-option=\"--some-option\" /path/to/my/local/package`, the `--install-option` is intended to pass additional options to the `setup.py install` command. However, these options are not directly visible in `sys.argv` during the initial phases of the installation when `egg_info` is running. Instead, these options are passed later during the `install` phase.\n\nHere\u2019s a way to handle custom install options in your `setup.py`:\n\n1. **Subclass `install` Command**: You can subclass the `install` command and handle custom options. Here's an example of how to achieve this:\n\n    ```python\n    from setuptools import setup\n    from setuptools.command.install import install\n    import sys\n\n    class CustomInstallCommand(install):\n        user_options = install.user_options + [\n            ('some-option=', None, 'Description of some-option'),\n        ]\n\n        def initialize_options(self):\n            install.initialize_options(self)\n            self.some_option = None\n\n        def finalize_options(self):\n            install.finalize_options(self)\n            if self.some_option:\n                print(f\"Custom option: {self.some_option}\")\n\n        def run(self):\n            # Here you can handle the custom option as needed\n            if self.some_option:\n                # Do something with self.some_option\n                print(f\"Running custom install with option: {self.some_option}\")\n            install.run(self)\n\n    setup(\n        name='mypackage',\n        version='0.1',\n        packages=['mypackage'],\n        cmdclass={\n            'install': CustomInstallCommand,\n        },\n    )\n    ```\n\n2. **Install with Custom Option**: Now, when you install the package with pip, you can pass the custom option like this:\n\n    ```bash\n    pip install --install-option=\"--some-option=value\" /path/to/my/local/package\n    ```\n\n3. **Access the Custom Option**: The value of `--some-option` will be accessible within your custom `install` command class as `self.some_option`.\n\nThis method will allow you to pass and handle custom installation options when installing your package using pip. Remember that `--install-option` is only supported for source distributions, so this approach will not work with wheels or other binary distributions."
    }
]