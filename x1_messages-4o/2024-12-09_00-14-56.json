[
    {
        "role": "user",
        "content": "How can I verify that all elements in a Python list or tuple are of the same type, specifically of a certain type? For instance, if I have a tuple such as (1, 2, 3), how can I test that all elements are integers?"
    },
    {
        "role": "assistant",
        "content": "To verify that all elements in a Python list or tuple are of the same type, you can use a combination of the `all()` function and a generator expression. Here's how you can check if all elements in a tuple are of a specific type, such as `int`:\n\n```python\ndef all_elements_are_of_type(iterable, data_type):\n    return all(isinstance(element, data_type) for element in iterable)\n\n# Example usage:\nmy_tuple = (1, 2, 3)\nare_all_integers = all_elements_are_of_type(my_tuple, int)\nprint(are_all_integers)  # Output: True\n```\n\nIn this code snippet:\n\n- The `all()` function checks that all elements in the iterable return `True` for the condition specified.\n- `isinstance(element, data_type)` checks if each element is of the specified type.\n- The generator expression `(isinstance(element, data_type) for element in iterable)` generates a sequence of `True` or `False` values depending on whether each element matches the specified type.\n\nThis method will return `True` if all elements in the tuple or list are of the specified type, and `False` otherwise."
    }
]