[
    {
        "role": "user",
        "content": "In Python, is there an easy way to check if an object is JSON serializable? I have a dictionary with various items and I want to loop through its keys to check if they are JSON serializable. If they are not, I need to remove them. I have a function that removes keys from the dictionary, but it checks if the values are callable, not if they are JSON serializable. How can I modify this function to check for JSON serializability instead?\n\nHere is my existing function:\n\n```python\ndef remove_functions_from_dict(arg_dict):\n    '''\n        Removes functions from dictionary and returns modified dictionary\n    '''\n    keys_to_delete = []\n    for key,value in arg_dict.items():\n        if hasattr(value, '__call__'):\n            keys_to_delete.append(key)\n    for key in keys_to_delete:\n        del arg_dict[key]\n    return arg_dict\n```"
    },
    {
        "role": "assistant",
        "content": "To modify the function to remove keys with values that are not JSON serializable, you can use Python's `json` module to attempt serialization. If serialization fails with a `TypeError`, it means the value is not JSON serializable. Here's how you can modify your function:\n\n```python\nimport json\n\ndef remove_non_json_serializable(arg_dict):\n    '''\n        Removes non-JSON-serializable items from dictionary and returns modified dictionary\n    '''\n    keys_to_delete = []\n    for key, value in arg_dict.items():\n        try:\n            json.dumps(value)  # Attempt to serialize the value\n        except (TypeError, OverflowError):\n            keys_to_delete.append(key)\n    for key in keys_to_delete:\n        del arg_dict[key]\n    return arg_dict\n\n# Example usage\nmy_dict = {\n    'name': 'Alice',\n    'age': 30,\n    'func': lambda x: x,  # This is not serializable\n    'data': [1, 2, 3]\n}\n\ncleaned_dict = remove_non_json_serializable(my_dict)\nprint(cleaned_dict)\n```\n\n### Explanation:\n- **`json.dumps(value)`**: This function tries to serialize the value. If it succeeds, the value is JSON serializable.\n- **Exception Handling**: If `TypeError` or `OverflowError` is raised, it indicates that the value is not JSON serializable, and the key is marked for deletion.\n- **`keys_to_delete`**: This list collects all keys whose values are not JSON serializable.\n- **Loop through `keys_to_delete`**: This removes the keys from the dictionary.\n\nThis modified function will help you filter out any non-JSON-serializable items from your dictionary."
    }
]