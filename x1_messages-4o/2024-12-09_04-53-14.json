[
    {
        "role": "user",
        "content": "I am trying to load a Jinja template directly from the filesystem as opposed to loading it as a resource in a Python package. The Jinja API document at pocoo.org suggests the following configuration:\n\n```python\nfrom jinja2 import Environment, PackageLoader\nenv = Environment(loader=PackageLoader('yourapplication', 'templates'))\n```\nThis creates a template environment with the default settings and a loader that looks up the templates in the templates folder inside the yourapplication python package. However, this approach seems complex as it requires creating a Python package with the templates, which I don't intend to do. How can I load the Jinja template directly from the filesystem?"
    },
    {
        "role": "assistant",
        "content": "To load a Jinja template directly from the filesystem, you can use the `FileSystemLoader` instead of the `PackageLoader`. This allows you to specify a directory on the filesystem from which Jinja will load the templates. Here\u2019s a simple example of how you can achieve this:\n\n```python\nfrom jinja2 import Environment, FileSystemLoader\n\n# Set the directory where your templates are located\ntemplate_dir = '/path/to/your/templates'\n\n# Create an environment with the FileSystemLoader\nenv = Environment(loader=FileSystemLoader(template_dir))\n\n# Load a specific template by name\ntemplate = env.get_template('your_template.html')\n\n# Render the template with any variables you need\nrendered_template = template.render(your_variable='value')\n\nprint(rendered_template)\n```\n\n### Steps to Follow:\n\n1. **Import the Required Modules**: Start by importing `Environment` and `FileSystemLoader` from the Jinja2 package.\n\n2. **Specify the Template Directory**: Define the path to the directory where your Jinja templates are stored. Replace `'/path/to/your/templates'` with the actual path.\n\n3. **Create an Environment**: Use `FileSystemLoader` with the specified directory to create an `Environment` object.\n\n4. **Load the Template**: Use the `get_template` method on the environment object to load a template by its filename.\n\n5. **Render the Template**: Call the `render` method on the template object, passing any variables your template needs.\n\nThis approach is straightforward and doesn't require you to package your templates within a Python package, allowing you to keep your templates separate and easily manageable."
    }
]