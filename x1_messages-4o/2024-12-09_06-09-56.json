[
    {
        "role": "user",
        "content": "Why does Pylint mark the use of `len(SEQUENCE)` in condition values as incorrect? When I use this in my code:\n```python\nfrom os import walk\n\nfiles = []\nfor (dirpath, _, filenames) in walk(mydir):\n    # More code that modifies files\nif len(files) == 0: # <-- C1801\n    return None\n```\nPylint flags the line with the if statement with a warning: `[pylint] C1801:Do not use len(SEQUENCE) as condition value`. The rule C1801, as described in the [reference guide](https://pylint.readthedocs.io/en/latest/reference_guide/features.html#id19), doesn't provide a clear explanation for this. I understand that a sequence's length property may be lazily evaluated and that `__len__` can have side effects, but I'm not sure if this is problematic enough for Pylint to categorize it as incorrect. I want to understand the specific scenarios where the use of `len(SEQ)` as a condition value is problematic and what major situations Pylint is trying to avoid with rule C1801, before I configure my project to ignore this rule."
    },
    {
        "role": "assistant",
        "content": "Pylint's warning C1801 is more about code readability and efficiency rather than correctness. The warning suggests that using `len(SEQUENCE) == 0` to check if a sequence is empty is not the most Pythonic way. The more idiomatic approach in Python is to use the sequence directly in a boolean context, like so:\n\n```python\nif not files:\n    return None\n```\n\nHere's why this is preferred:\n\n1. **Readability**: Using `if not files:` is more readable and immediately conveys the intent of checking for emptiness. Python developers are accustomed to this pattern, making the code easier to understand at a glance.\n\n2. **Efficiency**: While the performance difference is usually negligible, using `if not files:` can be slightly more efficient. The `len()` function has to compute the length of the sequence, while the direct check simply evaluates the truthiness of the object.\n\n3. **Pythonic Style**: Python encourages writing code that is clean and idiomatic. Using direct checks for emptiness is considered more in line with Python's design philosophy of simplicity and readability.\n\nPylint is trying to encourage this idiomatic usage to make the codebase more maintainable and align with common Python practices. There aren't major problematic scenarios with using `len(SEQ) == 0`, but adhering to these conventions can improve the overall code quality.\n\nIf you have a specific reason to check the length or if you find the rule too restrictive, you can configure Pylint to ignore this warning in your project. However, it's often beneficial to consider these stylistic suggestions, as they promote consistency and clarity in your code."
    }
]