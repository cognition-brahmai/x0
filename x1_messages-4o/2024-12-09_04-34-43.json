[
    {
        "role": "user",
        "content": "How can I instruct PyYAML to write a short string as a YAML quoted scalar and a long multi-line string as a literal scalar? For instance, I have an object with a short string attribute and a long multi-line string attribute like this:\n\n```python\nmy_obj.short = \"Hello\"\nmy_obj.long = \"Line1\\nLine2\\nLine3\"\n```\n\nI want the YAML to be formatted like this:\n\n```yaml\nshort: \"Hello\"\nlong: |\n  Line1\n  Line2\n  Line3\n```\n\nHowever, when I call `yaml.dump(my_obj)`, I get a dict-like output that looks like this:\n\n```yaml\n{long: 'line1\n\n    line2\n\n    line3\n\n    ', short: Hello}\n```\n\nI'm not sure why the long attribute is double-spaced. Can I dictate to PyYAML how to treat my attributes, affecting both the order and style?"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired YAML output format using PyYAML, you can customize the serialization process by defining a representer for your object. This allows you to specify how each attribute should be represented in the YAML output. Below is a step-by-step guide on how to implement this:\n\n1. **Define Your Object Class**: If not already done, make sure your object is defined as a class with attributes.\n\n2. **Implement a Custom Representer**: You can create a custom representer for your object to control how each attribute should be serialized. Specifically, for short strings, you can ensure they are quoted, and for long strings, you can ensure they are written as literal blocks.\n\n3. **Register the Custom Representer**: Register this custom representer with PyYAML's `yaml.Representer`.\n\nHere's a complete example:\n\n```python\nimport yaml\n\nclass MyObject:\n    def __init__(self, short, long):\n        self.short = short\n        self.long = long\n\ndef my_object_representer(dumper, obj):\n    # Use a dictionary to represent the object\n    node = {\n        'short': obj.short,\n        'long': obj.long\n    }\n    # Represent each part, ensuring quoting for short and literal for long\n    return dumper.represent_mapping('tag:yaml.org,2002:map', node)\n\nyaml.add_representer(MyObject, my_object_representer)\n\ndef quoted_scalar_representer(dumper, data):\n    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='\"')\n\ndef literal_scalar_representer(dumper, data):\n    return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')\n\n# Register the scalar representers\nyaml.add_representer(str, quoted_scalar_representer)\n\n# Create an instance of your object\nmy_obj = MyObject(short=\"Hello\", long=\"Line1\\nLine2\\nLine3\")\n\n# Serialize with the custom representers\nyaml_output = yaml.dump(my_obj, default_flow_style=False)\n\nprint(yaml_output)\n```\n\n### Key Points:\n- **Custom Representer**: The `my_object_representer` function handles how `MyObject` instances are serialized. It uses a dictionary to map the object's attributes, which allows you to specify different styles for different attributes.\n- **Scalar Styles**: For short strings, use the quoted scalar style (`style='\"'`), and for long strings, use the literal block style (`style='|'`).\n- **Registration**: Make sure to register your custom representers using `yaml.add_representer`.\n\nThis setup ensures that your YAML output is formatted as you described, with short strings quoted and long strings written in a literal block style."
    }
]