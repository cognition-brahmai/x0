[
    {
        "role": "user",
        "content": "Why am I unable to use the 'await' keyword outside an asynchronous function in Python? In the following code, I'm attempting to clean some data with a non-async function that uses 'await'. However, this results in a `SyntaxError: 'await' outside async function`. Even though the 'await' expression isn't inside a coroutine function, it's still being executed in the context of one. Why isn't this behavior allowed?\n\n```python\nasync def fetch_text() -> str:\n    return \"text \"\n\ndef fetch_clean_text(text: str) -> str:\n    text = await fetch_text()\n    return text.strip(text)\n\nasync def show_something():\n    something = fetch_clean_text()\n    print(something)\n```\n\nI could clean the text inside the `show_something()` function, but let's assume that `show_something()` can print many things and doesn't know the proper way of cleaning them. Is there a better way to structure this without causing a syntax error and without unnecessarily complicating the code?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering arises from how Python handles asynchronous operations. In Python, the `await` keyword is used to pause the execution of a coroutine until the awaited task is completed. However, it can only be used inside an `async` function. This is why you're encountering a `SyntaxError`.\n\nLet's break down your code and see how it can be restructured to work correctly.\n\n### Problem Analysis\n\n1. **`await` in a Non-Async Function**: You're trying to use `await` in the `fetch_clean_text()` function, which is not defined as an `async` function. This is not allowed in Python.\n\n2. **Separation of Concerns**: You want to keep the cleaning logic separate from the `show_something()` function, which is a good design decision.\n\n### Solution\n\nTo resolve this, you can make `fetch_clean_text()` an `async` function. This will allow you to use `await` within it. Here is how you can modify your code:\n\n```python\nasync def fetch_text() -> str:\n    return \"text \"\n\nasync def fetch_clean_text() -> str:\n    text = await fetch_text()\n    return text.strip()\n\nasync def show_something():\n    something = await fetch_clean_text()\n    print(something)\n\n# To run the async function:\nimport asyncio\nasyncio.run(show_something())\n```\n\n### Explanation of Changes\n\n1. **Make `fetch_clean_text()` Async**: By defining `fetch_clean_text()` as an `async` function, you can use `await` within it. This allows it to execute asynchronous operations like `await fetch_text()`.\n\n2. **Use `await` in `show_something()`**: Since `fetch_clean_text()` is now an async function, you need to use `await` when calling it inside `show_something()`.\n\n3. **Running the Coroutine**: To run `show_something()`, use `asyncio.run()` as it will handle the event loop for you.\n\nThis structure maintains the separation of concerns, allowing `show_something()` to remain focused on its task while delegating the text cleaning logic to `fetch_clean_text()`."
    }
]