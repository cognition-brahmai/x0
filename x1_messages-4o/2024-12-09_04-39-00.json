[
    {
        "role": "user",
        "content": "I am working with a large pandas dataframe with over 200 columns. The columns were generated in a disordered sequence like ['Q1.3','Q6.1','Q1.2','Q1.1',......] and I need to sort them in an ascending order such as ['Q1.1','Q1.2','Q1.3',.....'Q6.1',......]. How can I achieve this using Python?"
    },
    {
        "role": "assistant",
        "content": "To sort the columns of your pandas DataFrame in the desired order, you can use the `sorted()` function with a custom sorting key. You want to sort the columns based on the numerical parts embedded in the column names. Here's how you can achieve that:\n\n```python\nimport pandas as pd\nimport re\n\n# Sample DataFrame\n# df = pd.DataFrame(...)\n\n# Custom sorting function\ndef custom_sort(column_name):\n    # Use regular expressions to extract numbers from the column names\n    parts = re.findall(r'\\d+', column_name)\n    # Convert extracted parts to integers for numerical sorting\n    return tuple(map(int, parts))\n\n# Sort the columns using the custom sorting function\nsorted_columns = sorted(df.columns, key=custom_sort)\n\n# Reorder the DataFrame columns\ndf = df[sorted_columns]\n\n# Now the DataFrame columns are sorted as desired\nprint(df)\n```\n\n### Explanation:\n1. **Custom Sorting Function**: The `custom_sort` function uses a regular expression (`re.findall(r'\\d+', column_name)`) to extract all numbers from the column name. The `map(int, parts)` converts these parts into integers to ensure numerical sorting.\n\n2. **Sorted Function**: The `sorted()` function sorts the column names based on the keys generated by the `custom_sort` function.\n\n3. **Reordering Columns**: Finally, the DataFrame columns are reordered using the sorted column names.\n\nThis approach ensures that the columns are sorted in a natural order, considering the numerical parts of the column names."
    }
]