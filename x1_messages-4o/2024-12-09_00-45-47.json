[
    {
        "role": "user",
        "content": "How can I skip a few iterations in a Python for loop? I'm familiar with looping through ranges like this:\n\n```python\nfor i in range(100): \n    #do something\n```\n\nBut now, I want to increment the counter by 10 and skip the whole loop in between. In C, I would just add 10 to `i`, but this approach doesn't seem to work in Python. Is there a Python equivalent to something like `continue(10)`?"
    },
    {
        "role": "assistant",
        "content": "In Python, you don't have a direct equivalent to C's ability to modify the loop variable within the loop itself without affecting the loop's natural progression. However, you can achieve the desired behavior by adjusting the range function to increment by a specific step size. Here\u2019s how you can modify your loop to increment the counter by 10:\n\n```python\nfor i in range(0, 100, 10):\n    # do something\n```\n\nIn this `range` function, `0` is the starting value, `100` is the ending value, and `10` is the step size. This will increment `i` by 10 on each iteration, effectively skipping the intermediate values.\n\nThis approach is both clean and efficient, as it leverages Python's built-in functionality to control the loop iteration steps directly."
    }
]