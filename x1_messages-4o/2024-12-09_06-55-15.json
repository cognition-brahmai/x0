[
    {
        "role": "user",
        "content": "How can I create a decorator in Python that will restore the current working directory (cwd) to its original state after a function that uses the `os.chdir()` command is called?"
    },
    {
        "role": "assistant",
        "content": "Creating a decorator in Python that restores the current working directory after a function call can be quite useful, especially when dealing with functions that change the working directory using `os.chdir()`. Below is a step-by-step guide to create such a decorator:\n\n1. **Import the necessary module**: You will need to import the `os` module to manipulate the current working directory.\n\n2. **Define the decorator**: Create a decorator function that wraps around the target function.\n\n3. **Store the current working directory**: Before calling the target function, store the current working directory.\n\n4. **Call the target function**: Execute the target function wrapped by the decorator.\n\n5. **Restore the working directory**: After the function execution, change the working directory back to its original state.\n\nHere's how you can implement this:\n\n```python\nimport os\nfrom functools import wraps\n\ndef restore_cwd(func):\n    @wraps(func)\n    def wrapper(*args, **kwargs):\n        # Store the current working directory\n        original_cwd = os.getcwd()\n        try:\n            # Call the wrapped function\n            result = func(*args, **kwargs)\n            return result\n        finally:\n            # Restore the original working directory\n            os.chdir(original_cwd)\n    return wrapper\n\n# Example usage\n@restore_cwd\ndef change_directory_example(new_dir):\n    print(f\"Original directory: {os.getcwd()}\")\n    os.chdir(new_dir)\n    print(f\"Changed to new directory: {os.getcwd()}\")\n\n# Test the decorator\nprint(f\"Starting in directory: {os.getcwd()}\")\nchange_directory_example('/path/to/new/directory')\nprint(f\"Back to original directory: {os.getcwd()}\")\n```\n\n### Explanation:\n\n- **`@wraps(func)`**: This decorator from the `functools` module is used to preserve the metadata of the original function, such as its name and docstring, when it's wrapped by our custom decorator.\n\n- **`original_cwd = os.getcwd()`**: This line stores the current working directory before the function is executed.\n\n- **`try...finally` block**: This ensures that no matter what happens during the function execution (even if an exception occurs), the working directory will be restored to its original state.\n\n- **`os.chdir(original_cwd)`**: This restores the working directory to its original state after the function call.\n\nBy using this decorator, any function that changes the working directory will automatically restore it back after execution, maintaining the consistency of the working environment."
    }
]