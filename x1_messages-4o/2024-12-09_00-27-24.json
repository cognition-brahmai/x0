[
    {
        "role": "user",
        "content": "I have a DataFrame in pandas that looks like this:\n\n```python\n    A   B   C\n0   1 NaN   2\n1 NaN   3 NaN\n2 NaN   4   5\n3 NaN NaN NaN\n```\n\nI am trying to extract the first non-null value from each row. For instance, for the above DataFrame, I would like to obtain the following list: `[1, 3, 4, None]`. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "You can achieve this by using the `DataFrame.apply()` method along with a lambda function to iterate over each row and find the first non-null value. Here's how you can do it:\n\n```python\nimport pandas as pd\nimport numpy as np\n\n# Sample DataFrame\ndata = {\n    'A': [1, np.nan, np.nan, np.nan],\n    'B': [np.nan, 3, 4, np.nan],\n    'C': [2, np.nan, 5, np.nan]\n}\ndf = pd.DataFrame(data)\n\n# Extracting the first non-null value from each row\nfirst_non_null_values = df.apply(lambda row: row.first_valid_index() if row.first_valid_index() is not None else None, axis=1)\n\n# Convert the index to values\nfirst_non_null_values = df.lookup(first_non_null_values.index, first_non_null_values.values)\n\n# Fill in None for fully NaN rows\nfirst_non_null_values = [value if value == value else None for value in first_non_null_values]\n\nprint(first_non_null_values)\n```\n\nThis code will provide the desired list `[1, 3, 4, None]`."
    }
]