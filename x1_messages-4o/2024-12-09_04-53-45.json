[
    {
        "role": "user",
        "content": "How can I use the `connectedComponentsWithStats()` function in OpenCV with Python? I am using OpenCV version 3 or newer and am having difficulty, as the official documentation only shows the API for C++. Could you provide me with an example of how to use this function?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The `connectedComponentsWithStats()` function in OpenCV is used for labeling connected components in a binary image and provides additional statistics on each component. This can be particularly useful for tasks such as object detection and image segmentation.\n\nHere's a step-by-step example of how you can use `connectedComponentsWithStats()` in Python with OpenCV:\n\n1. **Import the necessary libraries:**\n\n   ```python\n   import cv2\n   import numpy as np\n   ```\n\n2. **Read and preprocess the image:**\n\n   For this example, let's assume you have a binary image. If your image is not binary, you'll need to convert it using a thresholding method.\n\n   ```python\n   # Load the image in grayscale mode\n   image = cv2.imread('path_to_your_image.jpg', cv2.IMREAD_GRAYSCALE)\n\n   # Apply a binary threshold to get a binary image\n   # Here, we use a simple thresholding operation\n   _, binary_image = cv2.threshold(image, 127, 255, cv2.THRESH_BINARY)\n   ```\n\n3. **Use `connectedComponentsWithStats()`:**\n\n   This function returns several outputs: the number of labels, the label matrix, stats, and centroids. Here's how you can use it:\n\n   ```python\n   # Apply connected components with stats\n   num_labels, labels, stats, centroids = cv2.connectedComponentsWithStats(binary_image, connectivity=8)\n\n   # Print the number of connected components\n   print(\"Number of connected components:\", num_labels)\n\n   # Print the stats for each component\n   # Stats returns a matrix with 5 columns: [left, top, width, height, area]\n   for i in range(num_labels):\n       print(f\"Component {i}:\")\n       print(f\"  Bounding box: x={stats[i, cv2.CC_STAT_LEFT]}, y={stats[i, cv2.CC_STAT_TOP]}, \"\n             f\"width={stats[i, cv2.CC_STAT_WIDTH]}, height={stats[i, cv2.CC_STAT_HEIGHT]}\")\n       print(f\"  Area: {stats[i, cv2.CC_STAT_AREA]}\")\n       print(f\"  Centroid: x={centroids[i, 0]}, y={centroids[i, 1]}\")\n   ```\n\n4. **Visualize the results (optional):**\n\n   You can visualize the labeled components if needed.\n\n   ```python\n   # Create an output image to visualize the labeled components\n   output_image = np.zeros((image.shape[0], image.shape[1], 3), dtype=np.uint8)\n\n   # Assign different colors to each component\n   for label in range(1, num_labels):  # Start from 1 to skip the background\n       mask = labels == label\n       output_image[mask] = [np.random.randint(0, 255), np.random.randint(0, 255), np.random.randint(0, 255)]\n\n   # Display the result\n   cv2.imshow('Labeled Components', output_image)\n   cv2.waitKey(0)\n   cv2.destroyAllWindows()\n   ```\n\nThis example demonstrates how to use `connectedComponentsWithStats()` to label and analyze connected components in a binary image. Adjust the path to your image and the threshold value as needed for your specific use case."
    }
]