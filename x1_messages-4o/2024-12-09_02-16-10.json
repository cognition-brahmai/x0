[
    {
        "role": "user",
        "content": "How can I run a single test out of a set configured with pytest.mark.parametrize in pytest? I have a situation where I have three parameters and I generate a list of 15 different possible values for them to test the function. Is there a way that I can run just one of these tests, other than the obvious way of giving a single value instead of 15? Here's the code I'm working with:\n\n```python\n@pytest.mark.parametrize(PARAMETERS_LIST, PARAMETERS_VALUES)\ndef test_my_feature(self, param1, param2, param3):\n    \"\"\"\n    test doc\n    \"\"\"\n    if param1 == 'value':\n        assert True\n    else:\n        print 'not value'\n        assert False\n```"
    },
    {
        "role": "assistant",
        "content": "To run a single test case out of a set configured with `pytest.mark.parametrize`, you can use the `-k` option to filter tests by name or use a custom condition. However, because the test name generated by `pytest` for each set of parameters isn't very descriptive by default, you often need to use the `pytest` `-v` (verbose) option first to find the specific test case name. Here's a step-by-step approach:\n\n### Step 1: Identify the Test Case Name\n\nFirst, run your tests with the `-v` option to see the names of all generated test cases:\n\n```bash\npytest -v\n```\n\nThis will output a list of all the test cases, including their parameter values, in a format like:\n\n```\ntest_module.py::test_my_feature[param1-value1-param2-value2-param3-value3] PASSED\ntest_module.py::test_my_feature[param1-value4-param2-value5-param3-value6] FAILED\n```\n\n### Step 2: Run a Specific Test Case\n\nOnce you have identified the specific test case you want to run, you can use the `-k` option to filter and run that test case. For example, if you want to run the test case with `param1-value1`, `param2-value2`, `param3-value3`, you would do:\n\n```bash\npytest -k \"test_my_feature[param1-value1-param2-value2-param3-value3]\"\n```\n\nNote that the `-k` option uses substring matching, so ensure your filter string uniquely identifies the test case you want to run.\n\n### Alternative Approach: Using a Conditional Break\n\nIf the parameter values are complex and you can't easily filter using `-k`, you can temporarily modify the test function to only run the desired parameters. For example:\n\n```python\n@pytest.mark.parametrize(PARAMETERS_LIST, PARAMETERS_VALUES)\ndef test_my_feature(self, param1, param2, param3):\n    \"\"\"\n    test doc\n    \"\"\"\n    # Only run specific test case\n    if (param1, param2, param3) != ('desired_value1', 'desired_value2', 'desired_value3'):\n        pytest.skip(\"Skipping other test cases\")\n\n    if param1 == 'value':\n        assert True\n    else:\n        print('not value')\n        assert False\n```\n\nThis approach allows you to run the test suite normally, but only the specific test case will actually execute, while others will be skipped. Remember to remove or comment out this condition once you're done testing the specific case.\n\nBy using these methods, you can efficiently run a single test case from a set of parameterized tests without altering the parameter list permanently."
    }
]