[
    {
        "role": "user",
        "content": "I am working with Keras and I need to create a custom activation function. The default standard activations like ReLU, tanh, softmax and the advanced activations like LeakyReLU are not enough for my needs and I couldn't find what I need in keras-contrib. How can I create my own activation function in Keras?"
    },
    {
        "role": "assistant",
        "content": "Creating a custom activation function in Keras is quite straightforward. You need to define your function and then use it in your model. Here's a step-by-step guide on how to do this:\n\n1. **Define Your Activation Function:**\n   You can define your custom activation function as a regular Python function. This function should take a tensor as input and return a tensor as output.\n\n   Here's an example of a custom activation function, let's call it `custom_activation`:\n\n   ```python\n   import tensorflow as tf\n   from tensorflow.keras import backend as K\n\n   def custom_activation(x):\n       return K.maximum(0.01 * x, x)  # Example: Parametric ReLU\n   ```\n\n2. **Use Your Custom Activation Function in a Model:**\n   Once your custom activation function is defined, you can use it in your Keras model just like any other activation function.\n\n   ```python\n   from tensorflow.keras.models import Sequential\n   from tensorflow.keras.layers import Dense\n\n   model = Sequential()\n   model.add(Dense(64, input_dim=20))\n   model.add(Dense(64, activation=custom_activation))\n   model.add(Dense(1, activation='sigmoid'))\n   ```\n\n3. **Compile and Train Your Model:**\n   You can compile and train your model as usual.\n\n   ```python\n   model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])\n   # Assume X_train and y_train are your training data\n   model.fit(X_train, y_train, epochs=10, batch_size=32)\n   ```\n\n4. **Save Your Model:**\n   If you plan to save your model, make sure to pass your custom activation function to the `custom_objects` parameter when loading the model.\n\n   ```python\n   # Save model\n   model.save('my_model.h5')\n\n   # Load model\n   from tensorflow.keras.models import load_model\n   model = load_model('my_model.h5', custom_objects={'custom_activation': custom_activation})\n   ```\n\nBy following these steps, you can create and use a custom activation function in Keras. Make sure that your function is differentiable if you plan to train the model using backpropagation."
    }
]