[
    {
        "role": "user",
        "content": "How can I generate a chessboard pattern using C# code that outputs alternating black and white squares of a given size? Can you provide a sample function that uses nested loops to accomplish this task? The function should output a 2D array or table that accurately represents the chessboard pattern, with each square labeled as either black or white."
    },
    {
        "role": "assistant",
        "content": "Certainly! Below is a sample C# function that generates a chessboard pattern using nested loops. This function creates a 2D array where each element is labeled \"Black\" or \"White\" based on its position, and outputs this pattern as a console table.\n\n```csharp\nusing System;\n\npublic class Chessboard\n{\n    public static void Main(string[] args)\n    {\n        int size = 8; // You can change the size of the chessboard here\n        string[,] chessboard = GenerateChessboard(size);\n        PrintChessboard(chessboard);\n    }\n\n    public static string[,] GenerateChessboard(int size)\n    {\n        string[,] board = new string[size, size];\n\n        for (int row = 0; row < size; row++)\n        {\n            for (int col = 0; col < size; col++)\n            {\n                // Determine whether the square should be black or white\n                if ((row + col) % 2 == 0)\n                {\n                    board[row, col] = \"White\";\n                }\n                else\n                {\n                    board[row, col] = \"Black\";\n                }\n            }\n        }\n\n        return board;\n    }\n\n    public static void PrintChessboard(string[,] board)\n    {\n        int size = board.GetLength(0);\n\n        for (int row = 0; row < size; row++)\n        {\n            for (int col = 0; col < size; col++)\n            {\n                Console.Write($\"{board[row, col],6} \");\n            }\n            Console.WriteLine();\n        }\n    }\n}\n```\n\n### Explanation:\n\n1. **GenerateChessboard Function**: \n   - Takes an integer `size` as a parameter, which represents the number of rows and columns in the chessboard.\n   - Initializes a 2D array `board` of dimensions `size x size`.\n   - Uses nested loops to iterate through each cell. The sum of the row index and column index `(row + col)` determines the color: if the sum is even, the square is labeled \"White\"; if odd, \"Black\".\n\n2. **PrintChessboard Function**: \n   - Takes the 2D array `board` as input and prints each element formatted to align properly, creating a visual representation of the chessboard pattern in the console.\n\nYou can change the `size` variable to create a larger or smaller chessboard. The code above is set to generate an 8x8 board, which is the standard size for a chessboard."
    }
]