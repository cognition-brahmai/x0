[
    {
        "role": "user",
        "content": "How can I implement code-folding in Emacs for Python code? I have many classes and definitions in my code and I'd like to be able to use the \"+\" and \"-\" keys before \"class\" and \"def\" to collapse or expand (toggle) the class or function."
    },
    {
        "role": "assistant",
        "content": "To implement code folding in Emacs for Python code, you can use the built-in `hideshow` mode, which provides basic support for code folding. However, for more advanced and user-friendly code folding specifically tailored for Python, you might want to consider using `elpy` or `yafolding`. Below are the steps to set up each method:\n\n### Using `hideshow` Mode\n\n`hideshow` (hs-minor-mode) is a built-in mode that can be used for code folding in Emacs. Here's how to set it up:\n\n1. **Enable `hideshow`:** Add the following lines to your Emacs configuration file (usually `.emacs` or `init.el`):\n\n   ```emacs-lisp\n   (add-hook 'python-mode-hook 'hs-minor-mode)\n   ```\n\n2. **Keybindings for Folding:**\n\n   Use the following keybindings within a Python buffer:\n\n   - `C-c @ C-c` (or `C-c C-h`) to toggle folding at the current block.\n   - `C-c @ C-M-c` to toggle all blocks.\n   - `C-c @ C-l` to hide all blocks.\n   - `C-c @ C-s` to show all blocks.\n\n### Using `yafolding`\n\n`yafolding` provides a more intuitive folding experience:\n\n1. **Install `yafolding`:**\n\n   You can install `yafolding` from MELPA. Add MELPA to your package archives if you haven't already, and then use `M-x package-install RET yafolding RET` to install it.\n\n2. **Enable `yafolding`:**\n\n   Add the following to your Emacs configuration:\n\n   ```emacs-lisp\n   (require 'yafolding)\n   (add-hook 'python-mode-hook\n             (lambda ()\n               (yafolding-mode)))\n   ```\n\n3. **Keybindings for Folding:**\n\n   By default, `yafolding` provides these keybindings:\n\n   - `C-c C-f` to toggle folding at the current block.\n   - `C-c C-a` to hide all blocks.\n   - `C-c C-r` to show all blocks.\n\n### Using `elpy`\n\n`elpy` is a comprehensive Python development environment for Emacs that includes code folding among other features.\n\n1. **Install `elpy`:**\n\n   Install `elpy` from MELPA using `M-x package-install RET elpy RET`.\n\n2. **Enable `elpy`:**\n\n   Add the following to your Emacs configuration:\n\n   ```emacs-lisp\n   (elpy-enable)\n   ```\n\n3. **Use `elpy` folding features:**\n\n   `elpy` integrates with `hideshow`, so you can use the same keybindings as `hs-minor-mode` for folding.\n\n### Custom Keybindings for \"+\" and \"-\"\n\nIf you specifically want to use \"+\" and \"-\" keys for folding, you can customize the keybindings. Here's an example using `yafolding`:\n\n```emacs-lisp\n(define-key yafolding-mode-map (kbd \"+\") 'yafolding-toggle-element)\n(define-key yafolding-mode-map (kbd \"-\") 'yafolding-toggle-element)\n```\n\nAdd the above code to your Emacs configuration to use \"+\" and \"-\" for toggling folds.\n\nBy setting up any of these options, you can effectively manage your Python code structure in Emacs, making it easier to navigate through classes and functions."
    }
]