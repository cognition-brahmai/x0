[
    {
        "role": "user",
        "content": "I am working on a Python project where I need to subtract business days from the current date. The code I have should always run on the most recent business day. If it's Monday to Friday then it can be today's date but if it's Saturday or Sunday, I need to set it back to the previous Friday. I am currently doing this with the following code:\n\n```python\nlastBusDay = datetime.datetime.today()\nif datetime.date.weekday(lastBusDay) == 5:      #if it's Saturday\n    lastBusDay = lastBusDay - datetime.timedelta(days = 1) #then make it Friday\nelif datetime.date.weekday(lastBusDay) == 6:      #if it's Sunday\n    lastBusDay = lastBusDay - datetime.timedelta(days = 2); #then make it Friday\n```\n\nI find this code to be bit clunky and I am looking for a better way. Is there a method to make timedelta work in weekdays rather than calendar days?"
    },
    {
        "role": "assistant",
        "content": "You can simplify the logic by using the `numpy` library, which provides a `busday_offset` function that can be used to calculate business days directly. Alternatively, you can use the `pandas` library, which has convenient date manipulation capabilities. Here is an example using `pandas`:\n\n```python\nimport pandas as pd\n\n# Get the current date\ncurrent_date = pd.Timestamp('today')\n\n# Check if today is a weekday (Monday to Friday)\nif current_date.weekday() < 5:\n    # If today is a weekday, set the last business day to today\n    last_business_day = current_date\nelse:\n    # If today is Saturday (5) or Sunday (6), find the last Friday\n    last_business_day = current_date - pd.tseries.offsets.BDay()\n\nprint(\"Last Business Day:\", last_business_day)\n```\n\nAlternatively, if you prefer to stick with the standard library, you can achieve the same with a slightly modified logic:\n\n```python\nimport datetime\n\ndef get_last_business_day():\n    today = datetime.datetime.today()\n    weekday = today.weekday()\n\n    # If today is Saturday (5) or Sunday (6), subtract accordingly\n    if weekday == 5:\n        # It's Saturday\n        last_business_day = today - datetime.timedelta(days=1)\n    elif weekday == 6:\n        # It's Sunday\n        last_business_day = today - datetime.timedelta(days=2)\n    else:\n        # It's a weekday\n        last_business_day = today\n\n    return last_business_day\n\nlast_business_day = get_last_business_day()\nprint(\"Last Business Day:\", last_business_day)\n```\n\nThis code simply checks the current day of the week and adjusts it to the previous Friday if it's the weekend. This provides a cleaner and more straightforward approach."
    }
]