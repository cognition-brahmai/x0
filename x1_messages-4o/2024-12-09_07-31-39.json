[
    {
        "role": "user",
        "content": "How can I modify a function in Python to select rows in a table based on the row name (column 2), such that it can handle either a single name or a list of names as arguments? Currently, I have two separate loops for each case which leads to code duplication. I am looking for an efficient way to handle this, possibly using exceptions. Here's my current code:\n\n```python\ndef select_rows(to_select):\n    # For a list\n    for row in range(0, table.numRows()):\n        if _table.item(row, 1).text() in to_select:\n            table.selectRow(row)\n    # For a single integer\n    for row in range(0, table.numRows()):\n        if _table.item(row, 1).text() == to_select:\n            table.selectRow(row)\n```"
    },
    {
        "role": "assistant",
        "content": "To efficiently handle both single names and lists of names without duplicating code, you can convert the single name case into a list. This way, you only need one loop to handle both cases. Here's how you can modify your function:\n\n```python\ndef select_rows(to_select):\n    # Ensure to_select is a list for uniform handling\n    if not isinstance(to_select, list):\n        to_select = [to_select]\n\n    # Iterate through the rows and select based on the condition\n    for row in range(table.numRows()):\n        if _table.item(row, 1).text() in to_select:\n            table.selectRow(row)\n```\n\n### Explanation:\n1. **Type Check**: The `isinstance(to_select, list)` function checks if `to_select` is a list. If it isn't, we wrap `to_select` in a list. This ensures that we always deal with a list in the loop.\n\n2. **Single Loop**: By converting the single item into a list, we can use a single loop to check if the row name is in the `to_select` list, which simplifies your code and avoids redundancy.\n\nThis approach is clean and leverages Python's dynamic typing and list handling capabilities. It also makes your function more robust and easier to maintain."
    }
]