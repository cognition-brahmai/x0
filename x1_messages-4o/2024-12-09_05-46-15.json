[
    {
        "role": "user",
        "content": "How can I prepend a specific path, in this case pip's installation directory path, to Python's search path (`sys.path`), globally across all my Python scripts? I have tried using `virtualenv`, changing `easy-install.pth`, and adding a separate `.pth` file, but none of these solutions have been satisfactory. I want this path to come before the path to Ubuntu's Python installation directory. I'm running Ubuntu 14.04 and have recently upgraded to the latest version of requests (version 2.7.0) using pip, but when I import requests and print `requests.__version__`, I am seeing version 2.2.1. This is because Python is using the pre-installed Ubuntu version of requests, and not the pip version I want to use."
    },
    {
        "role": "assistant",
        "content": "To ensure that Python uses the correct version of a package installed via `pip`, you need to modify the `sys.path` so that the directory containing the pip-installed packages has precedence over the Ubuntu-installed packages. Here\u2019s how you can achieve that globally:\n\n1. **Environment Variables**: Set the `PYTHONPATH` environment variable in your shell profile to prepend the pip installation directory. This will affect all Python scripts executed in that environment.\n\n   First, find the directory where pip installs packages. This is typically in a directory like `~/.local/lib/pythonX.Y/site-packages`, where `X.Y` corresponds to your Python version.\n\n   Then, add this line to your shell profile file (like `~/.bashrc`, `~/.bash_profile`, or `~/.zshrc`):\n\n   ```bash\n   export PYTHONPATH=~/.local/lib/pythonX.Y/site-packages:$PYTHONPATH\n   ```\n\n   Replace `~/.local/lib/pythonX.Y/site-packages` with the actual path you found earlier.\n\n   After adding this line, run `source ~/.bashrc` (or the equivalent for your shell) to apply the changes.\n\n2. **Sitecustomize Module**: Create a `sitecustomize.py` file that modifies `sys.path` at runtime. This file should be placed in a directory that is already in your `sys.path`.\n\n   Create a `sitecustomize.py` file with the following content:\n\n   ```python\n   import sys\n\n   pip_path = '/path/to/your/pip/site-packages'\n   if pip_path not in sys.path:\n       sys.path.insert(0, pip_path)\n   ```\n\n   Replace `/path/to/your/pip/site-packages` with the correct path to your pip-installed packages.\n\n   Place this file in one of the directories that Python automatically searches, such as `/usr/lib/pythonX.Y/site-packages`.\n\n3. **Custom Python Startup Script**: If you want more control, you can create a Python startup script that modifies `sys.path`. Set the `PYTHONSTARTUP` environment variable to point to this script.\n\n   Create a file, say `pythonstartup.py`, with the following content:\n\n   ```python\n   import sys\n\n   pip_path = '/path/to/your/pip/site-packages'\n   if pip_path not in sys.path:\n       sys.path.insert(0, pip_path)\n   ```\n\n   Then, in your shell profile file, set the `PYTHONSTARTUP` variable:\n\n   ```bash\n   export PYTHONSTARTUP=~/pythonstartup.py\n   ```\n\n   Again, run `source ~/.bashrc` to apply the changes.\n\nAfter implementing one of these solutions, test it by running a Python script that imports the `requests` library and prints its version to ensure the correct version is being used.\n\nThese methods provide a way to globally affect how Python determines which packages to import, ensuring your pip-installed packages take precedence over system-installed ones."
    }
]