[
    {
        "role": "user",
        "content": "How can I integrate the following Ruby code into an HTML page to check if a number is prime and display the result to the user? Can you also provide a form with an input field and a button for the user to input a number?\nrequire 'prime'\ndef is_prime(num)\n  Prime.prime?(num)\nend\nAdditionally, can you explain how the Ruby code works to determine if a number is prime and how it can be used in an HTML page?"
    },
    {
        "role": "assistant",
        "content": "To integrate Ruby code into an HTML page to check if a number is prime, you need to use a web framework like Ruby on Rails or Sinatra, since Ruby code cannot be executed directly in HTML. Below, I'll provide an example using Sinatra, which is a lightweight web framework for Ruby. This example will include a form for user input and display the result.\n\n### Step-by-step Guide\n\n#### 1. Set up the Sinatra application\n\nFirst, you need to have Ruby and the Sinatra gem installed. If you haven't installed Sinatra yet, you can do so by running:\n\n```bash\ngem install sinatra\n```\n\nCreate a new file, say `app.rb`, and write the following Ruby code:\n\n```ruby\nrequire 'sinatra'\nrequire 'prime'\n\n# Define the route for the homepage\nget '/' do\n  erb :index\nend\n\n# Define the route to handle form submission\npost '/check_prime' do\n  num = params[:number].to_i # Convert input to an integer\n  @is_prime = Prime.prime?(num) # Check if the number is prime\n  @number = num\n  erb :result\nend\n```\n\n#### 2. Create the HTML views\n\nNext, you need to create two view templates: one for the form and another for displaying the result. By default, Sinatra looks for templates in a directory named `views`.\n\nCreate a directory named `views` and inside it, create two files: `index.erb` and `result.erb`.\n\n**`index.erb`** (form page):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Prime Checker</title>\n</head>\n<body>\n    <h1>Check if a Number is Prime</h1>\n    <form action=\"/check_prime\" method=\"post\">\n        <label for=\"number\">Enter a number:</label>\n        <input type=\"number\" id=\"number\" name=\"number\" required>\n        <button type=\"submit\">Check</button>\n    </form>\n</body>\n</html>\n```\n\n**`result.erb`** (result page):\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Result</title>\n</head>\n<body>\n    <h1>Result</h1>\n    <p>The number <%= @number %> is <%= @is_prime ? 'a prime' : 'not a prime' %> number.</p>\n    <a href=\"/\">Check another number</a>\n</body>\n</html>\n```\n\n#### 3. Run the application\n\nYou can start your Sinatra application by running the following command in your terminal:\n\n```bash\nruby app.rb\n```\n\nBy default, Sinatra runs on `localhost:4567`. Open your web browser and go to `http://localhost:4567` to see the form.\n\n### Explanation of the Ruby Code\n\nThe Ruby code uses the `Prime` module from the Ruby standard library, which provides a method `Prime.prime?` to check if a given number is prime. The function `is_prime(num)` simply returns `true` if the number is prime and `false` otherwise.\n\nIn the `app.rb` file, when a user submits a number using the form, the `/check_prime` route is triggered. It retrieves the number from the form, checks if it's prime, and then renders the result using the `result.erb` template.\n\nThis setup allows your Ruby code to interact with an HTML front-end, providing a simple interface for users to check if a number is prime."
    }
]