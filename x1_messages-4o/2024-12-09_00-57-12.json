[
    {
        "role": "user",
        "content": "How can I compare two Pandas dataframes of different sizes row-wise and print out the non-matching rows? For instance, given the following two dataframes:\n```python\ndf1 = DataFrame({\n'Buyer': ['Carl', 'Carl', 'Carl'],\n'Quantity': [18, 3, 5, ]})\n\ndf2 = DataFrame({\n'Buyer': ['Carl', 'Mark', 'Carl', 'Carl'],\n'Quantity': [2, 1, 18, 5]})\n```\nWhat is the most efficient way to iterate row-wise over df2 and print out rows that are not in df1? The desired output is:\n```python\nBuyer     Quantity \nCarl         2\nMark         1\n```\nHowever, I do not want the row `{'Buyer': 'Carl', 'Quantity': 3}` included in the difference. I have tried the solutions provided in \"Comparing two dataframes of different length row by row and adding columns for each row with equal value\" and \"Compare two DataFrames and output their differences side-by-side\", but they do not fit my specific use case."
    },
    {
        "role": "assistant",
        "content": "To compare two Pandas DataFrames of different sizes row-wise and output the non-matching rows, you can use the `merge` function with the `indicator=True` option. This approach allows you to efficiently determine which rows are only present in `df2` and not in `df1`. Here's how you can do it:\n\n```python\nimport pandas as pd\n\n# Define the dataframes\ndf1 = pd.DataFrame({\n    'Buyer': ['Carl', 'Carl', 'Carl'],\n    'Quantity': [18, 3, 5]\n})\n\ndf2 = pd.DataFrame({\n    'Buyer': ['Carl', 'Mark', 'Carl', 'Carl'],\n    'Quantity': [2, 1, 18, 5]\n})\n\n# Merge the dataframes with indicator to find differences\nmerged = df2.merge(df1, on=['Buyer', 'Quantity'], how='left', indicator=True)\n\n# Filter out the rows that are only in df2\nnon_matching_rows = merged[merged['_merge'] == 'left_only'].drop(columns=['_merge'])\n\n# Print the non-matching rows\nprint(non_matching_rows)\n```\n\n### Explanation:\n1. **Merge with Indicator:**\n   - Use `merge` with `how='left'` to keep all rows from `df2` and only the matching rows from `df1`.\n   - The `indicator=True` option adds a column `_merge` which indicates the source of each row.\n\n2. **Filter Non-Matching Rows:**\n   - After merging, filter for rows where `_merge` is `'left_only'`, which means those rows are only present in `df2` and not in `df1`.\n\n3. **Drop the `_merge` Column:**\n   - Drop the `_merge` column to get a clean output of non-matching rows.\n\nThe output will be:\n```\n  Buyer  Quantity\n0  Carl         2\n1  Mark         1\n```\n\nThis method is efficient and leverages Pandas' built-in functionality to handle the comparison without explicitly iterating over rows."
    }
]