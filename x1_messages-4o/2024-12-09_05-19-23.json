[
    {
        "role": "user",
        "content": "How can I document global constants in a Python module using reStructuredText? I have a module named `errors.py` where I've defined several global constants by convention using uppercase. Here is my current code:\n\n```python\n\"\"\"Indicates some unknown error.\"\"\"\nAPI_ERROR = 1\n\n\"\"\"Indicates that the request was bad in some way.\"\"\"\nBAD_REQUEST = 2\n\n\"\"\"Indicates that the request is missing required parameters.\"\"\"\nMISSING_PARAMS = 3\n```\n\nI have placed a docstring above each constant, but I haven't found any official documentation recommending this approach. How should I properly document these constants using reStructuredText?"
    },
    {
        "role": "assistant",
        "content": "To properly document global constants in a Python module using reStructuredText for Sphinx documentation (or similar tools that support reStructuredText), you should use the `.. py:data::` directive. This directive allows you to document module-level data, including constants, in a structured way that can be easily picked up by documentation generators.\n\nHere\u2019s how you can document your constants in the `errors.py` module:\n\n```python\n\"\"\"\nThis module defines error codes used throughout the application.\n\"\"\"\n\n#: Indicates some unknown error.\nAPI_ERROR = 1\n\n#: Indicates that the request was bad in some way.\nBAD_REQUEST = 2\n\n#: Indicates that the request is missing required parameters.\nMISSING_PARAMS = 3\n```\n\nAnd in your reStructuredText file (for example, `errors.rst`), you can document these constants like this:\n\n```rst\nConstants\n---------\n\n.. py:module:: errors\n\n.. py:data:: API_ERROR\n\n   Indicates some unknown error.\n\n.. py:data:: BAD_REQUEST\n\n   Indicates that the request was bad in some way.\n\n.. py:data:: MISSING_PARAMS\n\n   Indicates that the request is missing required parameters.\n```\n\n### Explanation:\n\n1. **Inline Comments**: Use the `#:` syntax for inline comments. This is a convention that Sphinx can recognize if configured with the appropriate extensions (like `autodoc` and `napoleon`).\n\n2. **reStructuredText Documentation**: Use the `.. py:data::` directive in your `.rst` files to explicitly declare and describe each constant. This makes it clear and structured for generating documentation.\n\n3. **Module Docstring**: A module-level docstring can provide a high-level overview of what the module is about, which is useful for context in documentation.\n\nBy following these steps, your constants will be well-documented and easily incorporated into documentation systems that support reStructuredText, making them more accessible and understandable for users and developers."
    }
]