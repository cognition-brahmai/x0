[
    {
        "role": "user",
        "content": "I want to implement a new node class in Java that can store two pointers - one for the next node and one for a random node in the list. How can I do this?"
    },
    {
        "role": "assistant",
        "content": "To implement a new node class in Java that can store two pointers, one for the next node and another for a random node in the list, you can define a simple class with the necessary attributes and methods. Here's a basic example of how you can achieve this:\n\n```java\npublic class Node {\n    // Data stored in the node\n    private int data;\n    // Pointer to the next node in the list\n    private Node next;\n    // Pointer to a random node in the list\n    private Node random;\n\n    // Constructor to initialize the node with data\n    public Node(int data) {\n        this.data = data;\n        this.next = null;\n        this.random = null;\n    }\n\n    // Getter and setter for data\n    public int getData() {\n        return data;\n    }\n\n    public void setData(int data) {\n        this.data = data;\n    }\n\n    // Getter and setter for the next node\n    public Node getNext() {\n        return next;\n    }\n\n    public void setNext(Node next) {\n        this.next = next;\n    }\n\n    // Getter and setter for the random node\n    public Node getRandom() {\n        return random;\n    }\n\n    public void setRandom(Node random) {\n        this.random = random;\n    }\n\n    @Override\n    public String toString() {\n        return \"Node{\" +\n                \"data=\" + data +\n                \", next=\" + (next != null ? next.data : \"null\") +\n                \", random=\" + (random != null ? random.data : \"null\") +\n                '}';\n    }\n}\n```\n\n### Explanation:\n\n- **Data Field**: This stores the value contained in the node.\n- **Next Pointer**: This is a reference to the next node in the linked list.\n- **Random Pointer**: This is a reference to any other node in the linked list.\n\n### Methods:\n\n- **Constructor**: Initializes the node with a specified data value. Both `next` and `random` pointers are initially set to `null`.\n- **Getters and Setters**: Allow access and modification of the data and the pointers.\n- **toString Method**: Provides a string representation of the node, useful for debugging or printing the node's details.\n\nWith this `Node` class, you can create and manipulate nodes in a linked list where each node can point to a random node in addition to the next node in the list."
    }
]