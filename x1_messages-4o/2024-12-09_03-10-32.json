[
    {
        "role": "user",
        "content": "I am working with Python PIL and I want to adjust the hue of a given image. By adjusting the hue, I mean performing an operation similar to the Photoshop operation called \u201cHue/saturation\u201d, which changes the color of the image uniformly. Photoshop uses a scale of -180 to +180 for this hue setting, which possibly represents the HSL hue scale expressed in 0-360 degrees. How can I create a function that, given a PIL image and a float 'hue' within [0, 1] (or an int within [0, 360]), returns the image with its hue shifted by 'hue'? So far, what I've done is blend my original image with a color-filled layer, which does not give the desired result. The current code I have is:\n\n```python\nimport Image\n\nim = Image.open('tweeter.png')\nlayer = Image.new('RGB', im.size, 'red') # \"hue\" selection is done by choosing a color...\noutput = Image.blend(im, layer, 0.5)\noutput.save('output.png', 'PNG')\n```"
    },
    {
        "role": "assistant",
        "content": "To adjust the hue of an image using Python and the PIL library, you'll need to convert the image to a color space that supports hue manipulation, such as HSV (Hue, Saturation, Value). Here's how you can achieve this:\n\n1. Convert the image from RGB to HSV.\n2. Adjust the hue channel by the desired amount.\n3. Convert the image back to RGB.\n\nHere's a function to adjust the hue of a given image:\n\n```python\nfrom PIL import Image\nimport numpy as np\n\ndef adjust_hue(image, hue_shift):\n    # Convert image to numpy array\n    img_array = np.array(image.convert('RGB'))\n    \n    # Normalize the hue shift value to be within the range of [0, 1]\n    hue_shift = hue_shift % 1.0\n    \n    # Convert RGB to HSV\n    hsv_array = np.empty_like(img_array, dtype=float)\n    for i in range(img_array.shape[0]):\n        for j in range(img_array.shape[1]):\n            r, g, b = img_array[i, j] / 255.0\n            max_c = max(r, g, b)\n            min_c = min(r, g, b)\n            delta = max_c - min_c\n            \n            # Calculate hue\n            h = 0\n            if delta != 0:\n                if max_c == r:\n                    h = (g - b) / delta + (6 if g < b else 0)\n                elif max_c == g:\n                    h = (b - r) / delta + 2\n                elif max_c == b:\n                    h = (r - g) / delta + 4\n                h /= 6\n            \n            # Calculate saturation\n            s = 0 if max_c == 0 else delta / max_c\n            \n            # Value\n            v = max_c\n            \n            # Shift hue\n            h = (h + hue_shift) % 1.0\n            \n            hsv_array[i, j] = [h, s, v]\n    \n    # Convert HSV back to RGB\n    for i in range(hsv_array.shape[0]):\n        for j in range(hsv_array.shape[1]):\n            h, s, v = hsv_array[i, j]\n            \n            i_h = int(h * 6)\n            f = h * 6 - i_h\n            p = v * (1 - s)\n            q = v * (1 - f * s)\n            t = v * (1 - (1 - f) * s)\n            \n            if i_h == 0:\n                r, g, b = v, t, p\n            elif i_h == 1:\n                r, g, b = q, v, p\n            elif i_h == 2:\n                r, g, b = p, v, t\n            elif i_h == 3:\n                r, g, b = p, q, v\n            elif i_h == 4:\n                r, g, b = t, p, v\n            elif i_h == 5:\n                r, g, b = v, p, q\n            \n            img_array[i, j] = [int(r * 255), int(g * 255), int(b * 255)]\n    \n    # Convert numpy array back to image\n    return Image.fromarray(img_array.astype('uint8'), 'RGB')\n\n# Usage:\nim = Image.open('tweeter.png')\nhue_shift = 0.5  # For a 180-degree shift\nadjusted_image = adjust_hue(im, hue_shift)\nadjusted_image.save('output.png', 'PNG')\n```\n\nThis function defines `adjust_hue` to shift the hue of an image. The hue shift value should be given as a float between 0 and 1, where 1 corresponds to a full 360-degree rotation. This example shifts the hue by 180 degrees (0.5 in normalized form). Adjust `hue_shift` based on your needs."
    }
]