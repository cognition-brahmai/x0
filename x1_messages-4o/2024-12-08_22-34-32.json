[
    {
        "role": "user",
        "content": "How can I implement a recommendation system in MATLAB that uses collaborative filtering to suggest the top three movies for a user based on their historical ratings? The user's movie ratings are stored in a table called \"user_ratings\" with columns for user ID, movie ID, and rating. The movie dataset is in a separate table named \"movies\" with columns for movie ID, title, genre, and other features. Can you provide me with sample MATLAB code that uses collaborative filtering to generate movie recommendations based on the user's historical ratings?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To implement a recommendation system using collaborative filtering in MATLAB, you will need to follow these general steps:\n\n1. **Matrix Factorization**: Decompose the user-item matrix into two lower-dimensional matrices using techniques such as Singular Value Decomposition (SVD) or Alternating Least Squares (ALS).\n\n2. **Prediction**: Predict the ratings for the user-movie pairs that haven't been rated yet.\n\n3. **Recommendation**: Choose the top N movies with the highest predicted ratings for a given user.\n\nHere's a sample MATLAB code using a simple collaborative filtering approach:\n\n```matlab\n% Sample MATLAB code for Collaborative Filtering\n\n% Load user ratings and movies data\nuser_ratings = readtable('user_ratings.csv');\nmovies = readtable('movies.csv');\n\n% Convert data into matrices\nnum_users = max(user_ratings.userID);\nnum_movies = max(movies.movieID);\n\n% Initialize ratings matrix\nR = zeros(num_users, num_movies);\n\n% Fill the ratings matrix\nfor i = 1:height(user_ratings)\n    user_id = user_ratings.userID(i);\n    movie_id = user_ratings.movieID(i);\n    rating = user_ratings.rating(i);\n    R(user_id, movie_id) = rating;\nend\n\n% Normalize ratings and handle missing values\nR(R == 0) = NaN;  % Replace zeros with NaN for missing values\nR_mean = nanmean(R, 2);  % Mean rating for each user\nR_normalized = R - R_mean;\n\n% Use Singular Value Decomposition (SVD)\n[U, S, V] = svds(R_normalized, 10);  % Reduce to 10 features\n\n% Predict ratings\nR_predicted = U * S * V' + R_mean;\n\n% Recommendation function\nfunction top_movies = recommend_movies(user_id, R_predicted, movies, N)\n    [sorted_ratings, sorted_indices] = sort(R_predicted(user_id, :), 'descend');\n    top_movie_ids = sorted_indices(1:N);\n    top_movies = movies(top_movie_ids, :);\nend\n\n% Get top 3 movie recommendations for a specific user\nuser_id = 1;  % Example user ID\ntop_3_movies = recommend_movies(user_id, R_predicted, movies, 3);\n\n% Display the recommended movies\ndisp('Top 3 movie recommendations:');\ndisp(top_3_movies.title);\n```\n\n### Explanation:\n- **Data Preparation**: Convert your user ratings into a matrix format, where rows represent users and columns represent movies.\n- **Normalization**: Normalize the ratings by subtracting the mean rating for each user.\n- **SVD**: Use Singular Value Decomposition (SVD) to reduce the dimensionality of the data.\n- **Prediction**: Predict the ratings for all user-movie combinations.\n- **Recommendation**: Sort the predicted ratings for a specific user and select the top N.\n\n### Note:\n- Ensure your data files (`user_ratings.csv` and `movies.csv`) are correctly formatted and accessible.\n- The number of features for SVD (`10` in the example) can be adjusted based on your dataset and the desired accuracy.\n- This is a basic implementation. For a more robust system, consider integrating additional features like regularization, implicit feedback, or advanced matrix factorization techniques."
    }
]