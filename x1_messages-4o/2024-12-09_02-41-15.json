[
    {
        "role": "user",
        "content": "I am implementing auto_now_add using Django's pre_save signal. I want to check if the instance is created or updated. Some sources suggest that this can be done by checking if `kwargs['created']` is True. However, I don't find `'created'` in my `kwargs` even when the instance is newly created. I'm aware I could check if `kwargs['instance'].id` is set, which works for me, but I'm curious to know if `kwargs['created']` still exists. Does it?"
    },
    {
        "role": "assistant",
        "content": "In Django, the `pre_save` and `post_save` signals are used to perform actions before or after a model's `save()` method is called. The `created` keyword argument is specific to the `post_save` signal, not the `pre_save` signal. \n\nHere's a breakdown of how these signals work:\n\n- **`pre_save` Signal**: This signal is sent just before a model's `save()` method is called. It does not provide a `created` keyword argument because, at this point, the object has not yet been saved to the database, so Django doesn't know if it's a new instance or an update.\n\n- **`post_save` Signal**: This signal is sent after a model's `save()` method is called. It includes the `created` keyword argument, which is a boolean indicating whether a new record was created (`True`) or an existing record was updated (`False`).\n\nIf you are working with the `pre_save` signal, you will not find the `created` keyword in `kwargs`. To determine whether the instance is being created or updated, you can check if `instance.pk` is `None`. If it is `None`, the object is being created. If it has a value, the object is being updated.\n\nHere is a basic example using the `post_save` signal which includes the `created` argument:\n\n```python\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom myapp.models import MyModel\n\n@receiver(post_save, sender=MyModel)\ndef my_model_post_save(sender, instance, created, **kwargs):\n    if created:\n        # Instance is newly created\n        print(\"A new instance was created.\")\n    else:\n        # Instance was updated\n        print(\"An existing instance was updated.\")\n```\n\nFor `pre_save`, you can use the `instance.pk` check:\n\n```python\nfrom django.db.models.signals import pre_save\nfrom django.dispatch import receiver\nfrom myapp.models import MyModel\n\n@receiver(pre_save, sender=MyModel)\ndef my_model_pre_save(sender, instance, **kwargs):\n    if instance.pk is None:\n        # This is a new instance being created\n        print(\"A new instance is being created.\")\n    else:\n        # This is an existing instance being updated\n        print(\"An existing instance is being updated.\")\n```\n\nSo, if you're using the `pre_save` signal, checking `instance.pk` is the correct approach since `created` is not available."
    }
]