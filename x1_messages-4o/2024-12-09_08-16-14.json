[
    {
        "role": "user",
        "content": "How can I unpack the results of a SQL select query into a single pandas dataframe, with a series for each instrument and indexed on date? The select query is as follows:\n\n```sql\nselect instrument, price, date from my_prices;\n```\n\nI want my dataframe to look like this:\n\n```python\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: ...\nData columns (total 2 columns):\ninst_1    ...\ninst_2    ...\ndtypes: float64(1), object(1)\n```\n\nHowever, I do not want my dataframe to look like this:\n\n```python\n<class 'pandas.core.frame.DataFrame'>\nDatetimeIndex: ...\nData columns (total 2 columns):\ninstrument    ...\nprice         ...\ndtypes: float64(1), object(1)\n```\n\nHow can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To unpack the results of your SQL select query into a pandas DataFrame with each instrument as a separate column and indexed by date, you can follow these steps:\n\n1. **Fetch the data from the database**: Use a library like `pandas` to execute the SQL query and fetch the data.\n\n2. **Pivot the data**: Use pandas' `pivot` function or `pivot_table` method to reshape the DataFrame so that each instrument has its own column, indexed by the date.\n\nHere's a step-by-step implementation:\n\n```python\nimport pandas as pd\nimport sqlite3  # Or use another database connector, depending on your database\n\n# Connect to your database\nconn = sqlite3.connect('your_database.db')  # Replace with your database connection details\n\n# Execute the SQL query\nquery = \"SELECT instrument, price, date FROM my_prices;\"\ndf = pd.read_sql(query, conn)\n\n# Convert the 'date' column to datetime if it's not already\ndf['date'] = pd.to_datetime(df['date'])\n\n# Pivot the DataFrame\ndf_pivot = df.pivot(index='date', columns='instrument', values='price')\n\n# Close the database connection\nconn.close()\n\n# Now, df_pivot will have each instrument as a separate column, indexed by date\nprint(df_pivot.head())\n```\n\n### Explanation:\n\n- **Connection**: Establish a connection to your database using the appropriate library. Here, `sqlite3` is used for SQLite databases, but you can replace it with another connector for different databases.\n\n- **Query Execution**: Use `pd.read_sql()` to execute your SQL query and load the data into a DataFrame.\n\n- **Date Conversion**: Ensure that the 'date' column is in a datetime format for proper indexing.\n\n- **Pivoting**: The `pivot` method reshapes the DataFrame so each unique value in the 'instrument' column becomes a separate column, with 'date' as the index and 'price' as the values.\n\nAfter running the above code, `df_pivot` will have the desired structure with each instrument as a separate column and dates as the index."
    }
]