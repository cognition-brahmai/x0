[
    {
        "role": "user",
        "content": "How can I design a Java program to calculate the total number of unique permutations of a string?"
    },
    {
        "role": "assistant",
        "content": "To calculate the total number of unique permutations of a string in Java, you'll need to consider the factorial function and account for any repeated characters. Here's a step-by-step guide to designing such a program:\n\n1. **Understand the Concept**: The number of permutations of a string of length \\( n \\) with all unique characters is \\( n! \\) (n factorial). If there are repeated characters, the formula becomes:\n\n   \\[\n   \\text{Permutations} = \\frac{n!}{p_1! \\times p_2! \\times \\ldots \\times p_k!}\n   \\]\n\n   where \\( p_1, p_2, \\ldots, p_k \\) are the frequencies of the repeated characters.\n\n2. **Implement Factorial Function**: You'll need a function to calculate the factorial of a number.\n\n3. **Count Character Frequencies**: Use a data structure to count how many times each character appears in the string.\n\n4. **Calculate Permutations**: Use the formula above to calculate the unique permutations.\n\nHere's a Java implementation:\n\n```java\nimport java.util.HashMap;\nimport java.util.Map;\n\npublic class UniquePermutations {\n\n    // Function to calculate factorial\n    public static long factorial(int n) {\n        long result = 1;\n        for (int i = 2; i <= n; i++) {\n            result *= i;\n        }\n        return result;\n    }\n\n    // Function to calculate the number of unique permutations\n    public static long uniquePermutations(String str) {\n        int n = str.length();\n\n        // Count frequency of each character\n        Map<Character, Integer> charFrequency = new HashMap<>();\n        for (char c : str.toCharArray()) {\n            charFrequency.put(c, charFrequency.getOrDefault(c, 0) + 1);\n        }\n\n        // Calculate n!\n        long numerator = factorial(n);\n\n        // Calculate the product of factorials of frequencies\n        long denominator = 1;\n        for (int frequency : charFrequency.values()) {\n            denominator *= factorial(frequency);\n        }\n\n        // Calculate the number of unique permutations\n        return numerator / denominator;\n    }\n\n    public static void main(String[] args) {\n        String input = \"aabb\";\n        long result = uniquePermutations(input);\n        System.out.println(\"Total unique permutations of \\\"\" + input + \"\\\": \" + result);\n    }\n}\n```\n\n### Explanation:\n\n- **Factorial Function**: A simple loop to compute the factorial of a number.\n- **Character Frequency Count**: A `HashMap` is used to store the frequency of each character in the string.\n- **Calculate Permutations**: Compute the factorial of the string's length and divide it by the product of the factorials of the frequencies of each character to account for duplicates.\n- **Main Method**: Demonstrates the calculation with the string \"aabb\", which outputs 6 as there are 6 unique permutations of \"aabb\".\n\nThis code handles strings with repeated characters and calculates the correct number of unique permutations."
    }
]