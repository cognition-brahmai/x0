[
    {
        "role": "user",
        "content": "How can I specify a default value for a ForeignKey field in a Django Model or AdminModel? I tried doing something like this, but it doesn't seem to work:\n\n```python\ncreated_by = models.ForeignKey(User, default=request.user)\n```\nI am aware that I can 'trick' it in the view, but in terms of the AdminModel, it doesn't seem possible. Is there a way to solve this?"
    },
    {
        "role": "assistant",
        "content": "In Django, setting a default value for a `ForeignKey` field directly in the model definition using `default=request.user` won't work because `request.user` is not available at the time the model class is defined. However, you can achieve the desired behavior by overriding the `save_model` method in your `AdminModel`. Here\u2019s how you can do it:\n\n1. **Override the `save_model` Method in the Admin:**\n\n   By overriding the `save_model` method, you can set the `created_by` field to the current user before saving the object.\n\n   ```python\n   from django.contrib import admin\n   from .models import YourModel\n\n   class YourModelAdmin(admin.ModelAdmin):\n       def save_model(self, request, obj, form, change):\n           if not obj.pk:  # Only set the created_by field if the object is being created\n               obj.created_by = request.user\n           super().save_model(request, obj, form, change)\n\n   admin.site.register(YourModel, YourModelAdmin)\n   ```\n\n2. **Customizing the Model Form:**\n\n   Alternatively, you can customize the form used in the admin to automatically fill in the `created_by` field with the current user, hiding it from the user:\n\n   ```python\n   from django import forms\n   from .models import YourModel\n\n   class YourModelForm(forms.ModelForm):\n       class Meta:\n           model = YourModel\n           fields = '__all__'\n\n       def __init__(self, *args, **kwargs):\n           self.current_user = kwargs.pop('current_user', None)\n           super().__init__(*args, **kwargs)\n           if self.instance.pk is None:  # New instance\n               self.fields['created_by'].initial = self.current_user\n\n   class YourModelAdmin(admin.ModelAdmin):\n       form = YourModelForm\n\n       def get_form(self, request, obj=None, **kwargs):\n           kwargs['form'] = YourModelForm\n           form = super().get_form(request, obj, **kwargs)\n           form.current_user = request.user\n           return form\n\n       def save_model(self, request, obj, form, change):\n           if not obj.pk:\n               obj.created_by = request.user\n           super().save_model(request, obj, form, change)\n\n   admin.site.register(YourModel, YourModelAdmin)\n   ```\n\nBy using either of these methods, you can ensure that the `created_by` field is populated with the current user when creating a new object via the Django admin interface."
    }
]