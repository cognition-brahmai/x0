[
    {
        "role": "user",
        "content": "Is it considered bad or poor practice to include non-validating methods in a pydantic model? I'm currently using pydantic 1.3 for model validation for an API I am working on. I need to incorporate some helper methods associated with the objects and am deciding whether I should create a \"handler\" class. These models are being converted to JSON and sent to a restful service that I am also creating. For instance, I currently have a model as follows:\n\n```python\nclass Foo(pydantic.BaseModel):\n    name: str\n    bar: int\n    baz: int\n```\n\nWould it be considered bad practice if I were to do something like the following?\n\n```python\nclass Foo(pydantic.BaseModel):\n    name: str\n    bar: int\n    baz: int\n\n    def add_one(self):\n        self.bar += 1\n```\n\nI couldn't find an example of anyone doing this and I'm wondering if it's a good or common practice to include arbitrary methods in a class that inherits from `pydantic.BaseModel`."
    },
    {
        "role": "assistant",
        "content": "Including non-validating methods in a Pydantic model is not inherently bad or poor practice; it largely depends on the specific use case and how you plan to use the models. Pydantic models are primarily designed for data validation and serialization, but they can also be used to encapsulate related behaviors if it makes sense for your application's architecture. Here are some considerations to help you decide:\n\n1. **Separation of Concerns:** If the methods are closely related to the data and its validation or transformation, it might make sense to include them in the Pydantic model. If the methods are more about business logic or operations that don't directly relate to the data structure, it might be better to place them in a separate class or module.\n\n2. **Maintainability:** Including too much logic in your data models can make them harder to maintain, especially if the logic is complex or if you have many such methods. Consider whether the added methods might make the model harder to understand or test.\n\n3. **Consistency:** If you have a consistent pattern of including certain types of methods in your models across your codebase, it can be easier for others (or future you) to understand and work with the code.\n\n4. **Use Case:** If your Pydantic model is the primary way you're interacting with or manipulating the data in your application logic, it might be practical to include helper methods directly in the model.\n\nIn your specific example, adding a simple method like `add_one` is not problematic, especially if incrementing `bar` is a common operation that is directly associated with the state of the `Foo` object. However, if you find that you're adding numerous methods or complex logic, it might be worth reconsidering the design to ensure that the model remains focused on its primary role of data validation and serialization.\n\nUltimately, the decision should be guided by what makes your code more readable, maintainable, and aligned with the overall architecture of your application."
    }
]