[
    {
        "role": "user",
        "content": "I am seeking clarification on the term \"built-in\" function in Python. My initial understanding was that it referred only to those functions that are built into the interpreter and documented in [Python's Built-in Functions](https://docs.python.org/3/library/functions.html) page. However, I've noticed that functions defined in standard library modules are also sometimes referred to as built-in functions. For instance, when I import the 'os' module and call the 'chdir' function, or import the 'warnings' module and call the 'warn' function, they are identified as built-in functions. Conversely, when I import 'json' and call 'dumps', it's not considered a built-in function. When is a function in a standard library module considered a built-in function and when is it not? Here's the exact code I am referring to:\n\n```python\n>>> import os\n>>> os.chdir\n<built-in function chdir>\n>>> import warnings\n>>> warnings.warn\n<built-in function warn>\n>>> import json\n>>> json.dumps\n<function dumps at 0x7f3643a240d0> # not built-in\n>>> dir\n<built-in function dir>\n>>> \n```"
    },
    {
        "role": "assistant",
        "content": "The distinction you're encountering is related to how certain functions are implemented and integrated into Python. Let's break this down:\n\n1. **Built-in Functions**: These are functions that are always available in Python without needing to import any module. They are part of the Python interpreter and are documented on the [Python's Built-in Functions](https://docs.python.org/3/library/functions.html) page. Examples include `dir()`, `len()`, `print()`, etc.\n\n2. **Functions from Standard Library Modules**: These are functions that become available when you import specific modules in the Python Standard Library, such as `os`, `json`, `warnings`, etc.\n\n3. **C-Implemented Functions**: Some functions in standard library modules are implemented in C and are considered \"built-in\" in the sense that they directly interface with the Python runtime. This is common for performance reasons. When you see `<built-in function ...>`, it often means the function is a C-implemented function that has been exposed to Python. Examples include `os.chdir` and `warnings.warn`.\n\n4. **Pure Python Functions**: These are functions implemented in Python itself, and they appear as `<function ...>` when checked in a REPL or similar environment. The `json.dumps` function falls into this category. It is implemented in Python, hence it doesn't show as a built-in function.\n\nThe distinction you're observing is primarily about implementation detail. Functions implemented in C and integrated directly with the Python runtime often have the `<built-in function ...>` designation, reflecting their close integration and potentially enhanced performance. Functions implemented in pure Python do not receive this designation.\n\nIn essence, a function is referred to or recognized as \"built-in\" based on its level of integration with the Python interpreter and its implementation language, rather than its mere presence in the standard library."
    }
]