[
    {
        "role": "user",
        "content": "How can I modify my setup.py file to pre-delete and post-delete the build directory?"
    },
    {
        "role": "assistant",
        "content": "To modify your `setup.py` file to pre-delete and post-delete the `build` directory, you can use custom commands in the `setuptools` setup process. By subclassing the `clean` command and adding custom pre- and post-build logic, you can achieve the desired behavior. Here's an example of how you can implement this:\n\n```python\nimport os\nimport shutil\nfrom setuptools import setup, Command\n\nclass CleanCommand(Command):\n    \"\"\"Custom clean command to tidy up the project root.\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        print(\"Deleting the 'build' directory...\")\n        if os.path.exists('build'):\n            shutil.rmtree('build')\n        print(\"Clean completed.\")\n\nclass CustomBuildCommand(Command):\n    \"\"\"Custom build command to clean before and after build.\"\"\"\n    user_options = []\n\n    def initialize_options(self):\n        pass\n\n    def finalize_options(self):\n        pass\n\n    def run(self):\n        # Pre-build clean\n        print(\"Pre-build: Deleting the 'build' directory...\")\n        if os.path.exists('build'):\n            shutil.rmtree('build')\n\n        # Run the standard build command\n        self.run_command('build')\n\n        # Post-build clean\n        print(\"Post-build: Deleting the 'build' directory...\")\n        if os.path.exists('build'):\n            shutil.rmtree('build')\n\nsetup(\n    name='your-package-name',\n    version='0.1',\n    packages=['your_package'],\n    cmdclass={\n        'clean': CleanCommand,\n        'custom_build': CustomBuildCommand,\n    },\n    # Other setup options\n)\n```\n\n### Explanation:\n\n- **CleanCommand**: A custom command to clean up directories. It deletes the `build` directory when run.\n  \n- **CustomBuildCommand**: This command first removes the `build` directory before running the standard build command, then removes it again after the build is completed.\n\n- **setup()**: The `setup` function is called with the `cmdclass` argument to specify custom commands. You can run the custom build command using `python setup.py custom_build`.\n\nThis setup ensures that the `build` directory is deleted both before and after the build process, keeping your project directory clean."
    }
]