[
    {
        "role": "user",
        "content": "How can I modify my Python script to recognize whether it is running on a terminal (tty) or with redirected stdout, such as when it is piped to another command? I want the script to behave differently based on this. For instance, the 'grep --color=auto' command highlights matches when running in an interactive shell but doesn't when piped to something else. How can I achieve similar functionality in my Python script?"
    },
    {
        "role": "assistant",
        "content": "To determine whether your Python script is running in a terminal (tty) or if its stdout is redirected, you can use the `sys` and `os` modules. The `os.isatty()` function can be used to check if the output stream is a terminal or not. Here's an example to illustrate how you can implement this in your Python script:\n\n```python\nimport os\nimport sys\n\ndef main():\n    if os.isatty(sys.stdout.fileno()):\n        # Running in a terminal\n        print(\"This is running in a terminal (tty).\")\n        # Add your terminal-specific code here\n    else:\n        # Output is redirected\n        print(\"This is running with redirected stdout.\")\n        # Add your redirected-output specific code here\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Explanation:\n- `sys.stdout.fileno()` returns the file descriptor for the standard output.\n- `os.isatty(fd)` returns `True` if the file descriptor `fd` is open and connected to a terminal.\n- Depending on the result, you can execute different code blocks based on whether your script is running interactively in a terminal or if its output is being redirected.\n\nBy using this approach, you can conditionally change the behavior of your Python script based on how it is executed, similar to the `grep --color=auto` functionality."
    }
]