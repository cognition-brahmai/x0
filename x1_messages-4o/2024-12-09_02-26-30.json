[
    {
        "role": "user",
        "content": "I am trying to pickle a Python3 object to a string which I then want to unpickle from an environmental variable in a Travis CI build. However, I am unable to pickle it to a portable string (unicode) in Python3. I have attempted the following pieces of code but they each raise an error:\n\n```python\nimport os, pickle    \nfrom my_module import MyPickleableClass\n\nobj = {'cls': MyPickleableClass, 'other_stuf': '(...)'}\n\npickled = pickle.dumps(obj)\n\n# This raises TypeError: str expected, not bytes\nos.environ['pickled'] = pickled\n\n# This raises UnicodeDecodeError: 'utf-8' codec can't decode byte 0xbb (...)\nos.environ['pickled'] = pickled.decode('utf-8')\n\npickle.loads(os.environ['pickled'])\n```\n\nIs there a way to serialize complex objects like `datetime.datetime` to unicode or to some other string representation in Python3 which I can transfer to a different machine and deserialize? In addition, I have tested the solutions suggested by @kindall, but the `pickle.dumps(obj, 0).decode()` raises a `UnicodeDecodeError`. Nevertheless, the base64 approach works but it needed an extra decode/encode step. The solution works on both Python2.x and Python3.x.\n\n```python\n# encode returns bytes so it needs to be decoded to string\npickled = pickle.loads(codecs.decode(pickled.encode(), 'base64')).decode()\n\ntype(pickled)  # <class 'str'>\n\nunpickled = pickle.loads(codecs.decode(pickled.encode(), 'base64'))\n```\n\nCan you help me with this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The issue you're encountering stems from the fact that `pickle.dumps()` returns a bytes object, which cannot be directly stored in environment variables that expect a string. To solve this, you can encode the pickled bytes using a text-safe encoding, such as Base64, which converts the bytes into a string that can be stored and transferred easily.\n\nHere's a step-by-step solution using Base64 encoding and decoding:\n\n1. **Pickle and encode the object:**\n\n   ```python\n   import pickle\n   import base64\n   from my_module import MyPickleableClass\n\n   obj = {'cls': MyPickleableClass, 'other_stuff': '(...)'}\n\n   # Pickle the object\n   pickled_bytes = pickle.dumps(obj)\n\n   # Encode the bytes to a Base64 string\n   pickled_str = base64.b64encode(pickled_bytes).decode('utf-8')\n\n   # Store the Base64 string in an environment variable\n   os.environ['pickled'] = pickled_str\n   ```\n\n2. **Retrieve and decode the object:**\n\n   ```python\n   import os\n   import pickle\n   import base64\n\n   # Retrieve the Base64 string from the environment variable\n   pickled_str = os.environ['pickled']\n\n   # Decode the Base64 string back to bytes\n   pickled_bytes = base64.b64decode(pickled_str)\n\n   # Unpickle the bytes to get the original object\n   unpickled_obj = pickle.loads(pickled_bytes)\n\n   print(unpickled_obj)\n   ```\n\nBy encoding the pickled bytes as a Base64 string, you ensure that the data can be safely stored in environment variables and transferred across different systems without encountering encoding issues. This method is both portable and works across Python versions."
    }
]