[
    {
        "role": "user",
        "content": "I am using Python 2.6.5 and I am facing issues with the urllib.quote and urllib.unquote functions, as they do not handle Unicode correctly. The problem occurs when I execute the following code: \n\n```python\nprint urllib.unquote(urllib.quote(u'Cata\u00f1o'))\n```\n\nI receive a KeyError as follows:\n\n```python\nKeyError: u'\\xc3'\n```\n\nEven UTF-8 encoding does not resolve the issue. If I run this code:\n\n```python\nprint urllib.unquote(urllib.quote(u'Cata\u00f1o'.encode('utf8')))\n```\n\nThe output is incorrect: `Cata\u00c3\u00b1o`. I am aware this is a known bug with a fix available but not for my version of Python. What I need is a substitute for urllib.quote and urllib.unquote that correctly handles Unicode variables. I want to be able to run the following code without issues:\n\n```python\ndecode_url(encode_url(u'Cata\u00f1o')) == u'Cata\u00f1o'\n```\n\nDo you have any recommendations?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The issue you're facing is due to how `urllib.quote` and `urllib.unquote` handle Unicode strings in Python 2.6.5. To address this, you can create custom functions that correctly encode and decode Unicode strings using UTF-8. Here's a possible solution:\n\n```python\nimport urllib\n\ndef encode_url(s):\n    # Encode the Unicode string as UTF-8, then use urllib.quote\n    return urllib.quote(s.encode('utf-8'))\n\ndef decode_url(s):\n    # Use urllib.unquote, then decode the result as UTF-8\n    return urllib.unquote(s).decode('utf-8')\n\n# Test the functions\nencoded = encode_url(u'Cata\u00f1o')\ndecoded = decode_url(encoded)\n\nprint(encoded)  # Expected output similar to 'Cata%C3%B1o'\nprint(decoded)  # Expected output 'Cata\u00f1o'\n\n# Check if the decoded result matches the original\nassert decoded == u'Cata\u00f1o', \"Decoding failed\"\n```\n\n### Explanation:\n\n1. **Encoding:**\n   - Convert the Unicode string to a UTF-8 encoded byte string using `encode('utf-8')`.\n   - Use `urllib.quote` to percent-encode the UTF-8 byte string.\n\n2. **Decoding:**\n   - Use `urllib.unquote` to decode the percent-encoded string back to a UTF-8 byte string.\n   - Convert the UTF-8 byte string back to a Unicode string using `decode('utf-8')`.\n\nThis approach ensures that the Unicode characters are properly handled by first encoding them as UTF-8, which `urllib.quote` and `urllib.unquote` can work with, and then converting them back to Unicode after the URL operations."
    }
]