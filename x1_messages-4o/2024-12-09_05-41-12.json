[
    {
        "role": "user",
        "content": "How can I get the indices of all `True` values in a boolean list in Python? I have a switchboard represented by a list where \"on\" equals `True` and \"off` equals `False`. I want to return a list of all the `True` values and their positions. Currently, my code only returns the position of the first occurrence of `True`. Here's a snippet of my code:\n\n```python\nself.states = [False, False, False, False, True, True, False, True, False, False, False, False, False, False, False, False]\n\ndef which_switch(self):\n    x = [self.states.index(i) for i in self.states if i == True]\n```\n    \nThis only returns \"4\"."
    },
    {
        "role": "assistant",
        "content": "The issue with your current code is that the `index()` method returns the first occurrence of the element in the list, which is why you're only getting \"4\". To get the indices of all `True` values, you should use a different approach. You can utilize list comprehension with the `enumerate()` function to achieve this.\n\nHere's how you can modify your `which_switch` method to get a list of indices for all `True` values:\n\n```python\nself.states = [False, False, False, False, True, True, False, True, False, False, False, False, False, False, False, False]\n\ndef which_switch(self):\n    return [index for index, value in enumerate(self.states) if value]\n\n# Example usage\nswitchboard = YourClass()  # Replace YourClass with the actual class name\nprint(switchboard.which_switch())\n```\n\nThis code will return `[4, 5, 7]`, which are the indices of all `True` values in the list. The `enumerate()` function provides both the index and the value as you iterate over the list, allowing you to easily filter and collect the indices where the value is `True`."
    }
]