[
    {
        "role": "user",
        "content": "How can I obtain only the classes defined in a module, excluding the ones that are imported, in Python? Let's take an example where I have a module with the following code:\n\n```python\nfrom my.namespace import MyBaseClass\nfrom somewhere.else import SomeOtherClass\n\nclass NewClass(MyBaseClass):\n    pass\n\nclass AnotherClass(MyBaseClass):\n    pass\n\nclass YetAnotherClass(MyBaseClass):\n    pass\n```\n\nIf I use `clsmembers = inspect.getmembers(sys.modules[__name__], inspect.isclass)` as suggested in the linked Stack Overflow question, it returns `MyBaseClass` and `SomeOtherClass` along with `NewClass`, `AnotherClass` and `YetAnotherClass`. I, however, want only `NewClass`, `AnotherClass` and `YetAnotherClass`. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To filter out only the classes that are defined in your module and exclude the ones that are imported, you can use the `inspect` module in combination with checking the `__module__` attribute of each class. The `__module__` attribute of a class gives you the name of the module in which the class was defined.\n\nHere's how you can achieve this:\n\n```python\nimport inspect\nimport sys\n\ndef get_local_classes(module):\n    # Get all members of the module that are classes\n    clsmembers = inspect.getmembers(module, inspect.isclass)\n    # Filter classes that were defined in the module itself\n    local_classes = [cls for name, cls in clsmembers if cls.__module__ == module.__name__]\n    return local_classes\n\n# Usage\nif __name__ == \"__main__\":\n    # Assuming the module is the current module\n    current_module = sys.modules[__name__]\n    local_classes = get_local_classes(current_module)\n    for cls in local_classes:\n        print(cls.__name__)\n```\n\nThis script will print only the classes that are defined within the current module. If you run this in your module, it will output:\n\n```\nNewClass\nAnotherClass\nYetAnotherClass\n```\n\nExplanation:\n1. `inspect.getmembers(module, inspect.isclass)` retrieves all class objects in the specified module.\n2. The list comprehension filters these classes to only include those whose `__module__` attribute matches the module's `__name__`, indicating they were defined in the module itself."
    }
]