[
    {
        "role": "user",
        "content": "I am using Python and BeautifulSoup for web scraping, and I have the following HTML code:\n\n```html\n<body>\n    <div class=\"product\">Product 1</div>\n    <div class=\"product\">Product 2</div>\n    <div class=\"product special\">Product 3</div>\n    <div class=\"product special\">Product 4</div>\n</body>\n```\nI want to find only the products with the attribute class=\"product\" (only Product 1 and 2), not the 'special' products. When I use the following code:\n\n```python\nresult = soup.find_all('div', {'class': 'product'})\n```\nthe result includes all the products (1,2,3, and 4). How can I modify my code to find products whose class exactly matches 'product'?"
    },
    {
        "role": "assistant",
        "content": "To find only the products with the class attribute exactly matching `'product'`, you can use a CSS selector with BeautifulSoup's `select` method. The `select` method allows you to be more specific with your search criteria. Here's how you can modify your code to achieve that:\n\n```python\nfrom bs4 import BeautifulSoup\n\nhtml_content = \"\"\"\n<body>\n    <div class=\"product\">Product 1</div>\n    <div class=\"product\">Product 2</div>\n    <div class=\"product special\">Product 3</div>\n    <div class=\"product special\">Product 4</div>\n</body>\n\"\"\"\n\nsoup = BeautifulSoup(html_content, 'html.parser')\n\n# Use the CSS selector to find elements with only the class 'product'\nresult = soup.select('div.product:not(.special)')\n\n# Print the text content of the matching elements\nfor item in result:\n    print(item.text)\n```\n\nIn this code, the CSS selector `div.product:not(.special)` is used. This selector finds all `div` elements with the class `product` but excludes those that also have the class `special`. As a result, it will only match `Product 1` and `Product 2`."
    }
]