[
    {
        "role": "user",
        "content": "How can I merge multiple dataframes in Python using pandas based on a common 'date' column? I have tried writing a recursive function for this purpose but it did not work. I received errors such as 'out of range', 'keyerror 0/1/2/3' and 'can not merge DataFrame with instance of type <class 'NoneType'>'. I need to merge these dataframes such that only those rows where the date is common to all dataframes are included. My current code is as follows:\n\n```python\ndfs = [df1, df2, df3] # list of dataframes\n\ndef mergefiles(dfs, countfiles, i=0):\n    if i == (countfiles - 2): # it gets to the second to last and merges it with the last\n        return\n\n    dfm = dfs[i].merge(mergefiles(dfs[i+1], countfiles, i=i+1), on='date')\n    return dfm\n\nprint(mergefiles(dfs, len(dfs)))\n```\n\nAn example of my dataframes are:\n\ndf_1:\n```\nMay 19, 2017;1,200.00;0.1%\nMay 18, 2017;1,100.00;0.1%\nMay 17, 2017;1,000.00;0.1%\nMay 15, 2017;1,901.00;0.1%\n```\n\ndf_2:\n```\nMay 20, 2017;2,200.00;1000000;0.2%\nMay 18, 2017;2,100.00;1590000;0.2%\nMay 16, 2017;2,000.00;1230000;0.2%\nMay 15, 2017;2,902.00;1000000;0.2%\n```\n\ndf_3:\n```\nMay 21, 2017;3,200.00;2000000;0.3%\nMay 17, 2017;3,100.00;2590000;0.3%\nMay 16, 2017;3,000.00;2230000;0.3%\nMay 15, 2017;3,903.00;2000000;0.3%\n```\n\nAnd the expected output is:\n```\nMay 15, 2017;  1,901.00;0.1%;  2,902.00;1000000;0.2%;   3,903.00;2000000;0.3%   \n```\n\nCan someone help me fix this?"
    },
    {
        "role": "assistant",
        "content": "To merge multiple dataframes based on a common column, such as 'date', and retain only those rows where the date is common to all dataframes, you can use the `reduce` function from the `functools` module along with `pandas.merge`. Let's restructure your code to achieve this.\n\nFirst, ensure your data is in an appropriate format, and then perform the merge operation:\n\n```python\nimport pandas as pd\nfrom functools import reduce\n\n# Sample data as pandas DataFrames\ndata1 = {\n    'date': ['May 19, 2017', 'May 18, 2017', 'May 17, 2017', 'May 15, 2017'],\n    'value1': [1200.00, 1100.00, 1000.00, 1901.00],\n    'percent1': ['0.1%', '0.1%', '0.1%', '0.1%']\n}\n\ndata2 = {\n    'date': ['May 20, 2017', 'May 18, 2017', 'May 16, 2017', 'May 15, 2017'],\n    'value2': [2200.00, 2100.00, 2000.00, 2902.00],\n    'volume2': [1000000, 1590000, 1230000, 1000000],\n    'percent2': ['0.2%', '0.2%', '0.2%', '0.2%']\n}\n\ndata3 = {\n    'date': ['May 21, 2017', 'May 17, 2017', 'May 16, 2017', 'May 15, 2017'],\n    'value3': [3200.00, 3100.00, 3000.00, 3903.00],\n    'volume3': [2000000, 2590000, 2230000, 2000000],\n    'percent3': ['0.3%', '0.3%', '0.3%', '0.3%']\n}\n\ndf1 = pd.DataFrame(data1)\ndf2 = pd.DataFrame(data2)\ndf3 = pd.DataFrame(data3)\n\n# List of dataframes\ndfs = [df1, df2, df3]\n\n# Merge all dataframes on 'date' using reduce\nmerged_df = reduce(lambda left, right: pd.merge(left, right, on='date', how='inner'), dfs)\n\n# Display the result\nprint(merged_df)\n```\n\n### Explanation:\n\n- **Data Preparation**: Ensure your data is in DataFrame format with a common 'date' column.\n- **Using `reduce`**: This function helps in applying a binary function cumulatively to the items of an iterable, from left to right, so as to reduce the iterable to a single value. Here, it helps in merging each DataFrame pairwise.\n- **Merge Operation**: We use `how='inner'` to ensure only the common dates across all dataframes are retained.\n\nRun the above code, and you should get the desired output with only the common dates."
    }
]