[
    {
        "role": "user",
        "content": "Is PyPI case sensitive? How does it handle case sensitivity? For example, I have come across a situation where PyPI refuses a new package named 'foobar' if a package named 'FooBar' already exists. When running 'pip' against pypi.python.org, it seems to convert to the canonical case for a package. For instance, whether I use 'pip install django' or 'pip install Django', both commands yield the same result. However, in my virtualenv, only some files appear to be in the canonical case. What does the XML-RPC API expect? Can I always assume that 'http://pypi.python.org/simple/foo' and 'http://pypi.python.org/simple/FoO' will both return HTTP 200? Where can I find PyPI's documentation regarding its position on case-sensitivity?"
    },
    {
        "role": "assistant",
        "content": "PyPI (Python Package Index) and pip handle package names in a case-insensitive manner, which is why you are seeing consistent behavior regardless of how you type the package name. This means that whether you install a package using lowercase, uppercase, or mixed case, PyPI treats these names as equivalent. This is why you cannot register a new package named 'foobar' if 'FooBar' already exists, since PyPI considers them the same.\n\nWhen you use pip to install packages, it normalizes the package name to lowercase, which is why 'pip install django' and 'pip install Django' yield the same result. The canonical form for package names in PyPI is lowercase, and this is why files in your virtual environment may appear in this canonical form.\n\nRegarding the XML-RPC API, it also treats package names in a case-insensitive manner. This means that when you query the API or access URLs like 'http://pypi.python.org/simple/foo' or 'http://pypi.python.org/simple/FoO', they should both resolve correctly and return HTTP 200, assuming the package exists.\n\nFor documentation on PyPI's case sensitivity and naming conventions, you can refer to the [Python Packaging User Guide](https://packaging.python.org/) and the [PEP 503 specification](https://www.python.org/dev/peps/pep-0503/), which outlines the rules for simple repository API, including normalization rules for package names.\n\nThese resources provide a comprehensive guide to understanding how PyPI handles package names and other related conventions."
    }
]