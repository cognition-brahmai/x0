[
    {
        "role": "user",
        "content": "How can I count the occurrences of specific words in a pandas DataFrame? I currently use `str.contains` as shown in the code below:\n\n```\na = df2[df2['col1'].str.contains(\"sample\")].groupby('col2').size()\nn = a.apply(lambda x: 1).sum()\n```\n\nHowever, I'm trying to find a method that matches regular expressions and returns the count of occurrences. In my use case, I have a large DataFrame and I want to match around 100 strings. Is there a more efficient way to do this?"
    },
    {
        "role": "assistant",
        "content": "To count occurrences of specific words using regular expressions in a pandas DataFrame, you can utilize the `str.count()` method. This method allows you to specify a regular expression pattern and returns the number of non-overlapping occurrences of the pattern in each string of the specified column. Here's how you can do it efficiently:\n\n1. Prepare a regular expression pattern to match your list of strings.\n2. Use the `str.count()` method to find occurrences in the specified column.\n3. Sum the counts to get the total number of matches.\n\nHere's an example code snippet:\n\n```python\nimport pandas as pd\n\n# Sample DataFrame\ndata = {'col1': ['sample text', 'another sample', 'sample data', 'no match here'],\n        'col2': ['A', 'B', 'A', 'C']}\ndf2 = pd.DataFrame(data)\n\n# List of words/phrases to match\nwords_to_match = ['sample', 'data', 'text']\n\n# Create a regular expression pattern\npattern = '|'.join(words_to_match)\n\n# Use str.count to count occurrences in each row of 'col1'\ndf2['match_count'] = df2['col1'].str.count(pattern)\n\n# Group by 'col2' and sum up the match counts\nresult = df2.groupby('col2')['match_count'].sum()\n\n# Total number of matches\ntotal_matches = df2['match_count'].sum()\n\nprint(result)\nprint(\"Total matches:\", total_matches)\n```\n\nThis approach counts the occurrences of any of the specified words in each entry of the `col1` column and groups the results by `col2`. The `str.count()` method is efficient for large DataFrames and can handle complex regular expressions, making it suitable for your use case."
    }
]