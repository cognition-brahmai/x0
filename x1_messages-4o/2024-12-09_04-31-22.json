[
    {
        "role": "user",
        "content": "How can I serialize a Python Enum member to JSON and then deserialize the resulting JSON back into a Python object? I tried the following code:\n\n```python\nfrom enum import Enum    \nimport json\n\nclass Status(Enum):\n    success = 0\n\njson.dumps(Status.success)\n```\n\nBut it results in a `TypeError: <Status.success: 0> is not JSON serializable`. How can I avoid this error?"
    },
    {
        "role": "assistant",
        "content": "To serialize a Python `Enum` member to JSON and then deserialize it back into a Python object, you'll need to define a custom way to handle the serialization and deserialization process. Python's default JSON encoder doesn't know how to handle `Enum` types, so you need to provide a method to convert the `Enum` into a JSON-compatible format, such as a string or an integer. Here's a way to achieve this:\n\n### Serialization\n\nTo serialize the `Enum`, you can override the default behavior of `json.dumps()` by providing a custom encoder function. This function will convert the `Enum` to a format that can be easily serialized, such as its name or value.\n\n### Deserialization\n\nFor deserialization, you need to convert the JSON-compatible format back into an `Enum` instance.\n\nHere's how you can implement this:\n\n```python\nfrom enum import Enum\nimport json\n\nclass Status(Enum):\n    success = 0\n    failure = 1\n\n# Custom encoder function\ndef enum_encoder(obj):\n    if isinstance(obj, Enum):\n        return obj.name  # or obj.value if you prefer to serialize the value\n    raise TypeError(f\"Object of type {obj.__class__.__name__} is not JSON serializable\")\n\n# Custom decoder function\ndef enum_decoder(dct):\n    if 'status' in dct:\n        return Status[dct['status']]  # or Status(dct['status']) if you serialized the value\n    return dct\n\n# Serialize\nstatus_json = json.dumps({'status': Status.success}, default=enum_encoder)\nprint(\"Serialized:\", status_json)\n\n# Deserialize\nstatus_obj = json.loads(status_json, object_hook=enum_decoder)\nprint(\"Deserialized:\", status_obj)\n```\n\n### Explanation\n\n1. **Serialization**:\n   - We define a `enum_encoder` function that checks if an object is an instance of `Enum`. If so, it returns the name or value of the enum.\n   - Use `json.dumps()` with the `default` parameter set to `enum_encoder` to serialize the `Enum`.\n\n2. **Deserialization**:\n   - Define a `enum_decoder` function that converts the JSON data back into the `Enum` object by matching the name or value.\n   - Use `json.loads()` with the `object_hook` parameter set to `enum_decoder` for deserialization.\n\nThis approach allows you to seamlessly convert `Enum` members to JSON and back into Python objects. Adjust the encoder and decoder functions as needed based on whether you prefer using names or values for serialization."
    }
]