[
    {
        "role": "user",
        "content": "In Python, how can I replace the last occurrence of an expression in a string? Instead of using the `replace` function which starts from the beginning, I want to start from the end. For example, I have the following function:\n\n```python\ndef rreplace(old, new, occurrence)\n    ... # Code to replace the last occurrences of old by new\n```\n\nI want to replace the last occurrence of `</div>` with `</bad>` in `<div><div>Hello</div></div>`, so the output of the function should be `<div><div>Hello</div></bad>` when using `rreplace('</div>','</bad>',1)`."
    },
    {
        "role": "assistant",
        "content": "You can achieve this by reversing the string, performing the replacement, and then reversing it back. Here's how you can implement the `rreplace` function to replace the last occurrence of a substring in a string:\n\n```python\ndef rreplace(s, old, new, occurrence):\n    # Reverse the strings\n    s_reversed = s[::-1]\n    old_reversed = old[::-1]\n    new_reversed = new[::-1]\n    \n    # Replace the first occurrence of the reversed old string\n    s_replaced = s_reversed.replace(old_reversed, new_reversed, occurrence)\n    \n    # Reverse the string back to the original order\n    return s_replaced[::-1]\n\n# Example usage\nresult = rreplace('<div><div>Hello</div></div>', '</div>', '</bad>', 1)\nprint(result)  # Output: <div><div>Hello</div></bad>\n```\n\nHere's how the function works:\n\n1. Reverse the original string and the substrings you're interested in replacing (`old` and `new`).\n2. Use `str.replace()` to replace the first occurrence of the reversed `old` substring in the reversed string. This effectively replaces the last occurrence in the original string.\n3. Reverse the string back to its original order to get the final result.\n\nThis method is efficient and leverages Python's built-in string manipulation functions to achieve the desired outcome."
    }
]