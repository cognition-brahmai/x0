[
    {
        "role": "user",
        "content": "How can I modify a polynomial regression in scikit-learn to remove the interaction terms? I am currently running a polynomial regression with 23 variables and a degree of 2. By setting interaction_only=True, I keep only the interaction terms such as X1*Y1, X2*Y2, etc. However, I want to keep only terms like X1, X1^2, Y1, Y1^2, etc. Is there a function or a way to achieve this in scikit-learn?"
    },
    {
        "role": "assistant",
        "content": "In scikit-learn, you can use the `PolynomialFeatures` class from the `preprocessing` module to generate polynomial features. By default, this class generates both interaction terms and polynomial terms. However, if you want to include only the individual terms and their powers (like \\(X_1, X_1^2, Y_1, Y_1^2\\), etc.) without interaction terms (like \\(X_1 \\times Y_1\\)), you can manually control the feature generation.\n\nUnfortunately, there is no direct parameter in `PolynomialFeatures` to exclude interaction terms while retaining higher-degree terms of individual features. However, you can achieve this by generating the full set of polynomial features and then filtering out the interaction terms programmatically.\n\nHere's how you can do it:\n\n```python\nfrom sklearn.preprocessing import PolynomialFeatures\nimport numpy as np\nimport pandas as pd\n\n# Example data\nn_samples = 5\nn_features = 3\nX = np.random.rand(n_samples, n_features)\n\n# Generate polynomial features up to degree 2\npoly = PolynomialFeatures(degree=2, include_bias=False)\nX_poly = poly.fit_transform(X)\n\n# Get the names of the features\nfeature_names = poly.get_feature_names_out()\n\n# Filter out interaction terms\n# Interaction terms will contain more than one variable, e.g., 'x0 x1'\nfiltered_feature_indices = [i for i, name in enumerate(feature_names) if '^' in name or name.count(' ') == 0]\n\n# Select only the filtered features\nX_filtered = X_poly[:, filtered_feature_indices]\n\n# Convert to a DataFrame for better readability\ndf_filtered = pd.DataFrame(X_filtered, columns=[feature_names[i] for i in filtered_feature_indices])\n\nprint(df_filtered)\n```\n\nHere's the explanation of the code:\n\n1. **PolynomialFeatures**: We use `PolynomialFeatures` to generate polynomial and interaction features up to the specified degree.\n\n2. **Feature Names**: We retrieve the names of the generated features using `get_feature_names_out`.\n\n3. **Filter**: We filter the features to include only those that do not contain spaces (which indicate interactions between different variables) or explicitly contain powers (e.g., `x0^2`).\n\n4. **Select and Display**: We select the filtered features from the generated polynomial feature matrix and optionally convert it to a DataFrame for better readability.\n\nThis approach allows you to keep only the original features and their higher-order terms while excluding interaction terms. Adjust the filtering logic as needed to match your specific requirements."
    }
]