[
    {
        "role": "user",
        "content": "I am trying to set attributes on an instance of the \"object\" class in Python, but I am encountering an error. Here's what I tried:\n\n```python\no = object()\no.attr = 'hello'\n```\n\nHowever, this results in an `AttributeError: 'object' object has no attribute 'attr'`. But, when I try to set attributes on a class inherited from object, it works fine. Here's what I tried:\n\n```python\nclass Sub(object):\n    pass\n\ns = Sub()\ns.attr = 'hello'\n```\n\nWhen I print `s.attr`, it correctly displays 'hello'. Why am I unable to assign attributes to instances of the vanilla object class in Python? Is there something in the Python language specification that prevents this?"
    },
    {
        "role": "assistant",
        "content": "In Python, the `object` class is the most basic built-in class and serves as the base class for all new-style classes. It is designed to be immutable, meaning you cannot add new attributes to it. When you create an instance of `object` directly using `o = object()`, you are working with an instance that doesn't have a `__dict__` attribute where instance-specific attributes are typically stored.\n\nThis behavior is by design. The `object` class provides a minimal base class with no instance-specific data, so it doesn't support the dynamic addition of attributes. This is why your attempt to assign `o.attr = 'hello'` results in an `AttributeError`.\n\nOn the other hand, when you create a subclass of `object`, like `Sub`, Python automatically provides a `__dict__` for instances of that class. This allows you to dynamically add attributes to instances of `Sub`, which is why `s.attr = 'hello'` works without any issues.\n\nIn summary, if you need to add attributes to an instance, you should subclass `object` or use another built-in type that supports attribute assignment. This is part of the design of Python's object model to keep the base `object` class simple and minimal."
    }
]