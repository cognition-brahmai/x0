[
    {
        "role": "user",
        "content": "I am trying to create a function in Python that accepts three arguments: the URL, a dictionary of parameters, and the type of HTTP request (POST or GET). The function should return the results along with the HTTP response code. I have not been able to find a suitable solution online. Could anyone provide a code snippet that accomplishes this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can use the `requests` library in Python to achieve this. If you don't have it installed, you can install it using `pip install requests`. Below is a code snippet that defines a function to perform HTTP requests based on your requirements:\n\n```python\nimport requests\n\ndef make_http_request(url, params, request_type):\n    try:\n        if request_type.upper() == 'GET':\n            response = requests.get(url, params=params)\n        elif request_type.upper() == 'POST':\n            response = requests.post(url, data=params)\n        else:\n            return \"Invalid request type. Please use 'GET' or 'POST'.\", None\n\n        # Return the response content and status code\n        return response.text, response.status_code\n    except requests.exceptions.RequestException as e:\n        # Handle any exceptions that occur during the request\n        return str(e), None\n\n# Example usage:\nurl = \"https://jsonplaceholder.typicode.com/posts\"\nparams = {'userId': 1}\nrequest_type = \"GET\"\n\nresult, status_code = make_http_request(url, params, request_type)\nprint(\"Status Code:\", status_code)\nprint(\"Response:\", result)\n```\n\n### Explanation:\n- `make_http_request` is a function that takes three arguments: `url`, `params`, and `request_type`.\n- It checks the `request_type` and performs either a GET or POST request using the `requests` library.\n- The `params` dictionary is passed as query parameters for GET requests or as form data for POST requests.\n- The function returns the response content and the status code.\n- Exception handling is provided in case of network-related errors or other request exceptions.\n\nYou can modify this function further based on your specific needs, such as handling headers, authentication, or timeouts."
    }
]