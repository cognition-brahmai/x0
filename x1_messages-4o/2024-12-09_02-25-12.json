[
    {
        "role": "user",
        "content": "Is there a simple and portable method in Python to test if an executable program exists? I'm looking for a solution similar to the 'which' command. I would prefer not to manually search PATH or attempt to execute it with 'Popen' and see if it fails. Currently, I'm using the 'Popen' method, but for the sake of this question, let's imagine the executable is 'launchmissiles'."
    },
    {
        "role": "assistant",
        "content": "Certainly! A simple and portable way in Python to check if an executable exists is to use the `shutil.which` function, which is available in Python 3.3 and later. This function is similar to the Unix `which` command and searches for the executable in the directories listed in the `PATH` environment variable.\n\nHere's how you can use `shutil.which` to check if an executable like `launchmissiles` exists:\n\n```python\nimport shutil\n\ndef is_executable_available(executable_name):\n    return shutil.which(executable_name) is not None\n\n# Example usage\nexecutable_name = 'launchmissiles'\nif is_executable_available(executable_name):\n    print(f\"{executable_name} is available.\")\nelse:\n    print(f\"{executable_name} is not available.\")\n```\n\nThis will return `True` if the executable exists in the `PATH`, and `False` otherwise. It's a straightforward and efficient way to check for the presence of an executable in a cross-platform manner."
    }
]