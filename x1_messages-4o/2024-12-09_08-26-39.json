[
    {
        "role": "user",
        "content": "I am using BeautifulSoup to parse HTML. I am interested in finding all <a> tags which are direct children of <li class=\"test\">. I know how to find an element with a particular class, using soup.find(\"li\", { \"class\" : \"test\" }), but am unsure how to find all <a> which are children of <li class=\"test\"> but not any others. For example, in the following HTML:\n\n<div>\n<li class=\"test\">\n    <a>link1</a>\n    <ul> \n       <li>  \n          <a>link2</a> \n       </li>\n    </ul>\n</li>\n</div>\n\nI want to select:\n\n<a>link1</a>\n\nbut not <a>link2</a>. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To achieve this, you can use BeautifulSoup's ability to search for tags within a specific context or hierarchy. In this case, you want to find all `<a>` tags that are direct children of `<li class=\"test\">` tags. You can accomplish this by first finding the `<li>` tag with the specific class and then finding its direct child `<a>` tags using the `.find_all()` method with the `recursive=False` argument. Here's how you can do it:\n\n```python\nfrom bs4 import BeautifulSoup\n\nhtml = '''\n<div>\n<li class=\"test\">\n    <a>link1</a>\n    <ul> \n       <li>  \n          <a>link2</a> \n       </li>\n    </ul>\n</li>\n</div>\n'''\n\nsoup = BeautifulSoup(html, 'html.parser')\n\n# Find the <li> tag with class \"test\"\nli_tag = soup.find('li', class_='test')\n\n# Find all direct <a> children of this <li> tag\na_tags = li_tag.find_all('a', recursive=False)\n\n# Print the found <a> tags\nfor a in a_tags:\n    print(a)\n```\n\nIn this code snippet:\n\n- We use `soup.find('li', class_='test')` to find the `<li>` tag with the class \"test\".\n- We then call `li_tag.find_all('a', recursive=False)` to find all `<a>` tags that are direct children of this `<li>`. The `recursive=False` argument ensures that only the direct children are considered, excluding any nested `<a>` tags like `<a>link2</a>`."
    }
]