[
    {
        "role": "user",
        "content": "In Scala, using Slick to interact with a PostgreSQL database and considering that the \"Users\" table has columns \"id\" and \"name\", I want to query the database to get all users whose names contain a certain substring. Additionally, I need to ensure that the query executes efficiently by minimizing the number of database roundtrips. How can I achieve this using Slick? Please provide specific Scala code."
    },
    {
        "role": "assistant",
        "content": "To efficiently query a PostgreSQL database using Slick for users whose names contain a specific substring, you can use the Slick query language to construct a query that utilizes SQL's `LIKE` operator. Here's an example of how you can achieve this in Scala:\n\nFirst, ensure that you have the necessary Slick dependencies in your build file. If you're using SBT, it might look something like this:\n\n```scala\nlibraryDependencies ++= Seq(\n  \"com.typesafe.slick\" %% \"slick\" % \"3.3.3\",\n  \"org.postgresql\" % \"postgresql\" % \"42.2.18\",\n  \"com.typesafe.slick\" %% \"slick-hikaricp\" % \"3.3.3\"\n)\n```\n\nNow, you can define the Slick table mapping and the query:\n\n```scala\nimport slick.jdbc.PostgresProfile.api._\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.Future\n\n// Define the Users table\nclass Users(tag: Tag) extends Table[(Int, String)](tag, \"Users\") {\n  def id = column[Int](\"id\", O.PrimaryKey)\n  def name = column[String](\"name\")\n\n  def * = (id, name)\n}\n\nval users = TableQuery[Users]\n\n// Function to get users whose names contain a specific substring\ndef getUsersByNameSubstring(substring: String): Future[Seq[(Int, String)]] = {\n  // Construct the query\n  val query = users.filter(_.name.like(s\"%$substring%\"))\n  \n  // Execute the query\n  db.run(query.result)\n}\n\n// Example of using the function\nval db = Database.forConfig(\"mydb\") // Assumes you have a configuration named \"mydb\"\nval resultFuture: Future[Seq[(Int, String)]] = getUsersByNameSubstring(\"John\")\n\nresultFuture.map { usersList =>\n  usersList.foreach { case (id, name) =>\n    println(s\"User ID: $id, Name: $name\")\n  }\n}\n```\n\n### Explanation:\n\n- **Table Definition:** The `Users` class defines the schema for the `Users` table with columns `id` and `name`.\n- **Query Construction:** The `getUsersByNameSubstring` function constructs a query using Slick's query composition. It uses the `like` method to filter rows where the `name` column contains the specified substring. The `%` symbols are used as wildcards in SQL to match any sequence of characters.\n- **Database Execution:** The `db.run(query.result)` statement executes the query and returns a `Future` containing the result set.\n- **Configuration:** Ensure that your database configuration (e.g., in `application.conf`) is set up correctly for Slick to connect to your PostgreSQL database.\n\nThis code will efficiently fetch all users whose names contain the given substring, minimizing database roundtrips by fetching all matching rows in a single query."
    }
]