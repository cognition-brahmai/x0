[
    {
        "role": "user",
        "content": "How can I send an HTML email with Django that includes dynamic content? I have a large HTML file, and it doesn't seem practical to copy the entire code into a variable and populate the dynamic code within it in Django views. Do you have any suggestions?"
    },
    {
        "role": "assistant",
        "content": "Sending an HTML email with dynamic content in Django can be efficiently managed by using Django's templating system. Here\u2019s a step-by-step guide on how to do it:\n\n1. **Create an HTML Template for Your Email:**\n   - Store your HTML email template in a separate file within your Django project, typically in a templates directory. For example, `templates/emails/my_email_template.html`.\n\n2. **Use Django's Template System:**\n   - Utilize Django's templating system to include dynamic content within your email. You can use template tags and filters to inject dynamic data.\n\n   ```html\n   <!-- my_email_template.html -->\n   <html>\n   <body>\n       <h1>Hello, {{ user.first_name }}!</h1>\n       <p>Thank you for using our service. Here are your details:</p>\n       <ul>\n           <li>Email: {{ user.email }}</li>\n           <li>Subscription Status: {{ subscription_status }}</li>\n       </ul>\n   </body>\n   </html>\n   ```\n\n3. **Load the Template and Render It:**\n   - In your Django view or task, load and render the template with the context data you want to include.\n\n   ```python\n   from django.core.mail import EmailMultiAlternatives\n   from django.template.loader import render_to_string\n   from django.utils.html import strip_tags\n\n   def send_email(user, subscription_status):\n       # Prepare the context for the template\n       context = {\n           'user': user,\n           'subscription_status': subscription_status,\n       }\n       \n       # Render the HTML email template\n       html_content = render_to_string('emails/my_email_template.html', context)\n       text_content = strip_tags(html_content)  # Fallback for non-HTML email clients\n\n       # Create the email\n       email = EmailMultiAlternatives(\n           subject='Your Subscription Details',\n           body=text_content,\n           from_email='from@example.com',\n           to=[user.email],\n       )\n       email.attach_alternative(html_content, \"text/html\")\n\n       # Send the email\n       email.send()\n\n   ```\n\n4. **Include CSS:**\n   - If you have CSS, you can include inline styles directly in your HTML or use a library like `premailer` to convert your CSS to inline styles automatically.\n\n5. **Send the Email:**\n   - Use Django\u2019s built-in email sending capabilities to send your email. If your email is complex or if you need to send a large number of emails, consider using a task queue like Celery.\n\nThis approach keeps your code clean and separates the HTML email design from your Python logic, making it easier to manage and update."
    }
]