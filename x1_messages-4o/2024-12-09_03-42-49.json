[
    {
        "role": "user",
        "content": "How can I make a 3D plot interactive in a Jupyter Notebook using Python and Matplotlib? I am currently using Jupyter Notebook for data analysis and have a number of 3D plots. I am looking for a way to enhance these plots by adding interactivity features, such as zoom, pan, and rotate functionalities. I have considered using matplotlib's %qt, mpld3, bokeh + visjs, and JavaScript 3D plot but I've run into various issues with each. Are there any other solutions to this problem?"
    },
    {
        "role": "assistant",
        "content": "To make a 3D plot interactive in a Jupyter Notebook, there are several options you can consider. Each has its strengths and potential issues, but here's a comprehensive guide to some of the most effective solutions:\n\n1. **Plotly**:\n   - Plotly is a popular library for creating interactive plots. It integrates well with Jupyter Notebooks and supports 3D plotting.\n   - To use Plotly, first install the library: `pip install plotly`.\n   - Here's a basic example of creating an interactive 3D plot with Plotly:\n\n     ```python\n     import plotly.graph_objects as go\n\n     # Sample data\n     x = [1, 2, 3, 4, 5]\n     y = [10, 11, 12, 13, 14]\n     z = [5, 6, 7, 8, 9]\n\n     # Create 3D scatter plot\n     fig = go.Figure(data=[go.Scatter3d(x=x, y=y, z=z, mode='markers')])\n     fig.update_layout(scene=dict(\n         xaxis_title='X AXIS',\n         yaxis_title='Y AXIS',\n         zaxis_title='Z AXIS'\n     ))\n     fig.show()\n     ```\n\n2. **ipywidgets and Matplotlib**:\n   - You can use `ipywidgets` to add interactivity to Matplotlib plots in Jupyter Notebooks.\n   - First, install ipywidgets: `pip install ipywidgets`.\n   - Here's an example of integrating ipywidgets with a Matplotlib 3D plot:\n\n     ```python\n     import matplotlib.pyplot as plt\n     from mpl_toolkits.mplot3d import Axes3D\n     import numpy as np\n     import ipywidgets as widgets\n     from IPython.display import display\n\n     # Sample data\n     x = np.linspace(-5, 5, 100)\n     y = np.linspace(-5, 5, 100)\n     x, y = np.meshgrid(x, y)\n     z = np.sin(np.sqrt(x**2 + y**2))\n\n     # Create a function to update the plot\n     def update_plot(elevation, azimuth):\n         fig = plt.figure(figsize=(8, 6))\n         ax = fig.add_subplot(111, projection='3d')\n         ax.plot_surface(x, y, z, cmap='viridis')\n         ax.view_init(elev=elevation, azim=azimuth)\n         plt.show()\n\n     # Create interactive widgets\n     elevation_slider = widgets.IntSlider(min=0, max=180, step=5, value=30, description='Elevation')\n     azimuth_slider = widgets.IntSlider(min=0, max=360, step=5, value=30, description='Azimuth')\n\n     # Link the widgets to the update function\n     widgets.interactive(update_plot, elevation=elevation_slider, azimuth=azimuth_slider)\n     ```\n\n3. **PyVista**:\n   - PyVista is a powerful library for 3D plotting and mesh analysis, built on top of VTK.\n   - First, install PyVista: `pip install pyvista`.\n   - Use PyVista's Jupyter Notebook support for interactive 3D plots.\n\n     ```python\n     import pyvista as pv\n     import numpy as np\n\n     # Sample data\n     x, y, z = np.meshgrid(np.linspace(-5, 5, 20),\n                           np.linspace(-5, 5, 20),\n                           np.linspace(-5, 5, 20))\n     grid = pv.StructuredGrid(x, y, z)\n     grid['values'] = np.sin(np.sqrt(x**2 + y**2 + z**2))\n\n     # Plot using PyVista\n     plotter = pv.Plotter(notebook=True)\n     plotter.add_mesh(grid, scalars='values', cmap='viridis')\n     plotter.show()\n     ```\n\n4. **Bokeh**:\n   - While Bokeh is primarily for 2D, it can be combined with other libraries for interactive 3D plotting.\n   - Consider using Bokeh for interactive 2D plots or combining it with other tools for 3D.\n\nEach of these options has its own installation and setup requirements, but they all offer robust interactivity for 3D plotting in Jupyter Notebooks. Plotly is often the most straightforward for those new to interactive plots, while PyVista is excellent for more complex 3D visualizations."
    }
]