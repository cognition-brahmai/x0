[
    {
        "role": "user",
        "content": "How can I reverse a get_dummies encoding in pandas? I have a dataframe in pandas where column names are ID,1,2,3,4,5,6,7,8,9 and the column values are either 0 or 1. I want the column names in front of the ID where the value in a row is 1. The dataframe I want should look like this:\n\n```\n ID      Col2\n1002       2    // has 1 at Col(2) and Col(4)\n1002       4    \n1004       1    // has 1 at col(1) and col(2)\n1004       2\n1005       5    // has 1 at col(5)\n1006       6    // has 1 at col(6)\n1007       1    // has 1 at col(1) and col(3)\n1007       3\n1009       3    // has 1 at col(3) and col(7)\n1009       7\n```\nCan you help me achieve this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can achieve this by using the `melt` function from pandas combined with some filtering. Here's a step-by-step approach to reverse the `get_dummies` encoding:\n\n1. Use `melt` to transform your dataframe from wide to long format.\n2. Filter out the rows where the value is 0.\n3. Sort the resulting dataframe if necessary.\n\nHere's how you can do it:\n\n```python\nimport pandas as pd\n\n# Assuming `df` is your original dataframe\ndata = {\n    'ID': [1002, 1004, 1005, 1006, 1007, 1009],\n    '1': [0, 1, 0, 0, 1, 0],\n    '2': [1, 1, 0, 0, 0, 0],\n    '3': [0, 0, 0, 0, 1, 1],\n    '4': [1, 0, 0, 0, 0, 0],\n    '5': [0, 0, 1, 0, 0, 0],\n    '6': [0, 0, 0, 1, 0, 0],\n    '7': [0, 0, 0, 0, 0, 1],\n    '8': [0, 0, 0, 0, 0, 0],\n    '9': [0, 0, 0, 0, 0, 0]\n}\n\ndf = pd.DataFrame(data)\n\n# Use melt to transform the dataframe\nmelted_df = df.melt(id_vars=['ID'], var_name='Col2', value_name='Value')\n\n# Filter rows where Value is 1\nresult_df = melted_df[melted_df['Value'] == 1].drop(columns='Value')\n\n# Sort the result if necessary\nresult_df = result_df.sort_values(by='ID').reset_index(drop=True)\n\nprint(result_df)\n```\n\nThis code will output the desired dataframe:\n\n```\n     ID Col2\n0  1002    2\n1  1002    4\n2  1004    1\n3  1004    2\n4  1005    5\n5  1006    6\n6  1007    1\n7  1007    3\n8  1009    3\n9  1009    7\n```\n\nThis transformed dataframe shows each individual occurrence of 1s in the original `get_dummies` encoded dataframe, with the corresponding column number."
    }
]