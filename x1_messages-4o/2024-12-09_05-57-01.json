[
    {
        "role": "user",
        "content": "How can I programmatically detect whether sys.stdout is attached to a console terminal or not in Python? Specifically, I want my program to be able to differentiate between scenarios where it is run directly from the console and scenarios where its output is redirected to another file or piped to another command. The purpose of this is to ensure that my progress bar is displayed only when the program is run directly from the console."
    },
    {
        "role": "assistant",
        "content": "To determine whether `sys.stdout` is attached to a console terminal or not, you can use the `os` module in Python, specifically the `os.isatty()` function. This function checks if a file descriptor is open and connected to a terminal.\n\nHere's a simple way to check if `sys.stdout` is connected to a terminal:\n\n```python\nimport sys\nimport os\n\ndef is_console():\n    return os.isatty(sys.stdout.fileno())\n\nif is_console():\n    print(\"Running in a console terminal.\")\nelse:\n    print(\"Output is redirected or piped.\")\n\n# Example usage\nif is_console():\n    # Display progress bar\n    print(\"Displaying progress bar...\")\nelse:\n    # Do not display progress bar\n    print(\"Not displaying progress bar.\")\n```\n\nIn this code, `os.isatty(sys.stdout.fileno())` returns `True` if `sys.stdout` is connected to a terminal, and `False` otherwise. This allows you to conditionally display the progress bar or handle output differently based on whether the program is run directly in a console or the output is redirected."
    }
]