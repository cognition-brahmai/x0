[
    {
        "role": "user",
        "content": "When should I use Python's Ellipsis instead of 'pass'? I came across the abc module while learning about abstract base classes in Python. I noticed that the Ellipsis was used in the definition of an abstract method. For example:\n\n```python\nclass C(ABC):\n    @abstractmethod\n    def my_abstract_method(self, ...):\n        ...\n    @classmethod\n    @abstractmethod\n    def my_abstract_classmethod(cls, ...):\n        ...\n```\n\nI am familiar with the use of Ellipsis with type hints but I am not sure why it is used in this context. Wouldn't it be preferable to use 'pass' or raise a RuntimeError in an abstract method as shown below:\n\n```python\ndef my_abstract_method(self):\n    raise RuntimeError(\"NotImplemented\")\n```\n\nor\n\n```python\ndef my_abstract_method(self):\n    pass\n```\n\nWhy is the Ellipsis preferred over 'pass' in the official documentation? Is this just a matter of preference?"
    },
    {
        "role": "assistant",
        "content": "In Python, both `Ellipsis` (`...`) and `pass` are often used as placeholders, but they serve slightly different purposes depending on the context. Here's a breakdown of when you might use each, particularly in the context of defining abstract methods:\n\n1. **Using `pass`:**\n   - `pass` is a no-operation statement in Python, meaning it does nothing when executed. It's commonly used in places where syntactically some code is required, but you don\u2019t want to execute anything, such as in the body of a method or a loop.\n   - In abstract methods, using `pass` is a straightforward way to indicate that the method intentionally has no implementation in the base class, and it needs to be implemented by subclasses.\n\n2. **Using `Ellipsis` (`...`):**\n   - The `Ellipsis` object (`...`) is a singleton in Python and can be used as an alternative to `pass` when you want to indicate an incomplete implementation or stub.\n   - In abstract methods, using `Ellipsis` can serve as a visual indicator that the method is intentionally left unimplemented. It also aligns with Python's usage in other contexts, such as slicing and type hints, giving a consistent feel when used as a placeholder.\n\n3. **Why `Ellipsis` in Abstract Methods:**\n   - **Clarity:** Using `Ellipsis` can make it visually clear that a method is abstract and intentionally lacks an implementation. While `pass` could serve the same purpose, `Ellipsis` can stand out more as a placeholder.\n   - **Consistency with Stubs:** In some codebases, `Ellipsis` is used to denote parts of the code that are stubs or need to be completed, similar to how one might use `TODO` comments.\n   - **Minimalist Syntax:** It's concise and minimal, which some developers prefer for aesthetic or readability reasons.\n\n4. **Raising Exceptions:**\n   - Raising `NotImplementedError` explicitly in an abstract method can be a good practice because it immediately signals to a developer or user that the method is expected to be overridden in a subclass. This can be more informative during runtime if an abstract method is mistakenly called without being overridden.\n\nUltimately, whether to use `Ellipsis`, `pass`, or raise a `NotImplementedError` boils down to coding style and team conventions. Each approach is valid, and the choice often depends on what conveys the developer\u2019s intentions most clearly to others reading the code. The use of `Ellipsis` in the official documentation, or elsewhere, is often a matter of stylistic preference."
    }
]