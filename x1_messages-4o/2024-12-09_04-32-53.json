[
    {
        "role": "user",
        "content": "I'm working with an image file that has point values ranging from -16000.00 to 16000.00, although the typical range may be much less. I am struggling to devise a method to compress these values into an integer range of 0-100, where 0 corresponds to the smallest point and 100 corresponds to the largest. The ratio of all points in between should be maintained despite a loss in precision. My primary language is Python, but I'm open to a general algorithm as well. Ideally, I'd like an algorithm that allows adjustments to the min/max of either range (for instance, the second range could be -50 to 800 instead of 0 to 100). How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To map your data from the original range to a new integer range while maintaining the ratio between points, you can use a simple linear transformation. Here's a general algorithm and a Python implementation to achieve this:\n\n### General Algorithm:\n1. **Identify the Minimum and Maximum of Original Range:**\n   - Let's denote the original minimum as `orig_min` and the original maximum as `orig_max`.\n\n2. **Decide on the New Range:**\n   - You want to map to a new range `[new_min, new_max]`.\n\n3. **Apply Linear Transformation:**\n   - For each value `x` in the original range, apply the transformation:\n   \\[\n   x_{new} = \\left(\\frac{x - orig\\_min}{orig\\_max - orig\\_min}\\right) \\times (new\\_max - new\\_min) + new\\_min\n   \\]\n\n4. **Round the Result:**\n   - Since the new range is meant to be integer, you can round the transformed value.\n\n### Python Implementation:\n```python\ndef compress_values(values, orig_min, orig_max, new_min, new_max):\n    def transform(x):\n        # Apply linear transformation\n        return ((x - orig_min) / (orig_max - orig_min)) * (new_max - new_min) + new_min\n    \n    # Transform all values\n    transformed_values = [round(transform(x)) for x in values]\n    return transformed_values\n\n# Example usage\ninput_values = [-16000.0, -8000.0, 0.0, 8000.0, 16000.0]  # Example data points\norig_min, orig_max = -16000.0, 16000.0  # Original range\nnew_min, new_max = 0, 100  # New range, can be customized\n\ncompressed_values = compress_values(input_values, orig_min, orig_max, new_min, new_max)\nprint(compressed_values)\n```\n\n### Explanation:\n- **Transformation Formula:** This formula scales the original data to a [0, 1] range first and then scales and shifts it to the desired `[new_min, new_max]` range.\n- **Rounding:** Since the output should be integers, rounding is applied to each transformed value.\n- **Flexibility:** The function allows specifying any desired new range by adjusting `new_min` and `new_max`.\n\nThis method should effectively compress your values into a desired integer range while maintaining their relative ratios. Adjust `orig_min` and `orig_max` to match the actual data range if it's narrower than `-16000` to `16000`."
    }
]