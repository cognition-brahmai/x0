[
    {
        "role": "user",
        "content": "How can I determine if a Python object is a numeric type? In Java, I would normally use \"x instanceof Number\" as numeric types all descend from Number. What would be the equivalent method in Python?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can determine if an object is of a numeric type by using the `isinstance()` function along with numeric type classes such as `int`, `float`, and `complex`. Unlike Java, Python does not have a single superclass for all numeric types, but you can check against a tuple of these types.\n\nHere's an example of how you can do this:\n\n```python\ndef is_numeric(obj):\n    return isinstance(obj, (int, float, complex))\n\n# Examples\nprint(is_numeric(42))         # True, because 42 is an int\nprint(is_numeric(3.14))       # True, because 3.14 is a float\nprint(is_numeric(1 + 2j))     # True, because 1 + 2j is a complex number\nprint(is_numeric(\"hello\"))    # False, because \"hello\" is a string\n```\n\nThis function checks if the given object `obj` is an instance of any of the numeric types in the tuple `(int, float, complex)`. If the object is an instance of one of these types, `isinstance()` will return `True`; otherwise, it will return `False`."
    }
]