[
    {
        "role": "user",
        "content": "I'm having trouble importing a custom local module, `helpers.py`, into my Jupyter notebook in my Python 3.6 project. My project structure is as follows:\n\n```\nmy_project/\n\u2502\n\u251c\u2500\u2500 my_project/\n\u2502   \u251c\u2500\u2500 notebooks/\n\u2502       \u2514\u2500\u2500 a_notebook.ipynb\n\u2502   \u251c\u2500\u2500 __init__.py     # suppose to make package `my_project` importable\n\u2502   \u2514\u2500\u2500 helpers.py\n\u2502\n\u251c\u2500\u2500 tests/\n\u2502   \u2514\u2500\u2500 helpers_tests.py\n\u2502\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 setup.py\n```\n\nIn my notebook, I've tried `import helpers` and `from my_project import helpers` but both result in a `ModuleNotFoundError`. As a temporary fix, I've used:\n\n```python\nimport sys\nsys.path.append('..')\nimport helpers\n```\n\nBut I'm not satisfied with this solution. What is the correct way to import a local custom module into a Jupyter notebook?"
    },
    {
        "role": "assistant",
        "content": "To import a local custom module like `helpers.py` into your Jupyter notebook without modifying the `sys.path` directly, you can follow these best practices:\n\n1. **Ensure Proper Package Structure**: Your project is almost correctly structured, but to make it work seamlessly, ensure that the `my_project` directory is treated as a package. To do this, make sure there is an `__init__.py` file in the `my_project/` directory. You've already added it, which is good.\n\n2. **Use Jupyter Notebook Configurations**: You can configure Jupyter to recognize your project's root directory by adding a `.env` file at the root of your project directory (`my_project/`) with the following content:\n\n   ```plaintext\n   PYTHONPATH=.\n   ```\n\n   This tells Jupyter to consider the current directory as part of the Python path when it's launched.\n\n3. **Launch Jupyter Notebook from the Project Root**: Make sure you start Jupyter Notebook from the root of your project directory. Open a terminal, navigate to `my_project/` and run:\n\n   ```bash\n   jupyter notebook\n   ```\n\n   By doing this, the notebook will have access to the directory structure as it recognizes `my_project` as a package.\n\n4. **Using Relative Imports**: In your notebook, you can then use:\n\n   ```python\n   from my_project import helpers\n   ```\n\n   This should work without any issues if the notebook is aware of the `my_project` package.\n\n5. **Check Kernel Working Directory**: Sometimes Jupyter might not be operating in the directory you assume. You can check the current working directory in your notebook by running:\n\n   ```python\n   import os\n   os.getcwd()\n   ```\n\n   Ensure that it points to the correct directory where your `my_project` directory resides.\n\nBy adhering to these steps, you should be able to import your `helpers.py` module into your Jupyter notebook without needing to manually adjust the `sys.path`."
    }
]