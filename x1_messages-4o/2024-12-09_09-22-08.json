[
    {
        "role": "user",
        "content": "I have a sorted array of integers and I want to find the number of occurrences of a certain integer in the array. However, I need the solution to have a time complexity of O(log n). Can someone help me with this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To find the number of occurrences of a certain integer in a sorted array with a time complexity of \\( O(\\log n) \\), you can use a modified binary search approach. Here's a step-by-step guide:\n\n### Steps:\n1. **Find the First Occurrence**: Use binary search to find the first occurrence of the target integer in the array.\n2. **Find the Last Occurrence**: Use binary search to find the last occurrence of the target integer in the array.\n3. **Calculate the Number of Occurrences**: If the target integer is found, the number of occurrences is the index of the last occurrence minus the index of the first occurrence, plus one.\n\n### Implementation:\n\nHere's a Python implementation of the above approach:\n\n```python\ndef binary_search_first(arr, target):\n    left, right = 0, len(arr) - 1\n    first_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            first_occurrence = mid\n            right = mid - 1  # Continue to search in the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return first_occurrence\n\ndef binary_search_last(arr, target):\n    left, right = 0, len(arr) - 1\n    last_occurrence = -1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] == target:\n            last_occurrence = mid\n            left = mid + 1  # Continue to search in the right half\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return last_occurrence\n\ndef count_occurrences(arr, target):\n    first = binary_search_first(arr, target)\n    if first == -1:\n        return 0  # Target not found\n    last = binary_search_last(arr, target)\n    return last - first + 1\n\n# Example usage:\nsorted_array = [1, 2, 2, 2, 3, 4, 5, 5, 6]\ntarget = 2\noccurrences = count_occurrences(sorted_array, target)\nprint(f\"The number of occurrences of {target} is: {occurrences}\")\n```\n\n### Explanation:\n- **binary_search_first**: This function finds the first occurrence of the target by moving the `right` pointer towards the `mid` when the target is found, ensuring it continues searching to the left.\n- **binary_search_last**: This function finds the last occurrence of the target by moving the `left` pointer towards the `mid` when the target is found, ensuring it continues searching to the right.\n- **count_occurrences**: This function calculates the number of occurrences using the indices returned by the first and last occurrence functions.\n\nThis approach ensures that the solution operates in \\( O(\\log n) \\) time complexity, making it efficient for large datasets."
    }
]