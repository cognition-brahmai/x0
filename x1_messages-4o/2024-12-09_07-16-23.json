[
    {
        "role": "user",
        "content": "I am working with a NumPy array, specifically an array of distances, represented as `a = np.array([20.5 ,5.3 ,60.7 ,3.0 ], 'double')`. I am trying to get the original indices of this array once it has been sorted, for example, `[3, 1, 0, 2]` when `a.sort()` is applied. Is there any function in NumPy that can help me achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this by using the `numpy.argsort()` function. This function returns the indices that would sort an array. \n\nHere's how you can use it with your array `a`:\n\n```python\nimport numpy as np\n\na = np.array([20.5, 5.3, 60.7, 3.0], 'double')\nsorted_indices = np.argsort(a)\n\nprint(sorted_indices)\n```\n\nWhen you run this code, `sorted_indices` will contain the array `[3, 1, 0, 2]`, which represents the indices of the original array `a` in the order that would sort it. This means that `a[3]`, `a[1]`, `a[0]`, and `a[2]` are the elements of the array in sorted order."
    }
]