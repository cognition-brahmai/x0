[
    {
        "role": "user",
        "content": "How can I downgrade from CUDA 10.1 to CUDA 10.0 in Arch Linux? I installed TensorFlow on CUDA 10.1, but didn't realize that TensorFlow-gpu requires CUDA 10.0 or lesser. When I try to import TensorFlow in python console, I get an error stating that 'libcublas.so.10.0' is not found. I already tried symlinking the required 10.0 libraries with new 10.1 libraries, but it didn't work. Also, 'pacman -S cuda==\"10.0\"' is not working. How can I solve this?"
    },
    {
        "role": "assistant",
        "content": "To downgrade CUDA from version 10.1 to 10.0 on Arch Linux, you need to manually download and install the CUDA 10.0 package, as Arch Linux's package manager, `pacman`, doesn't support version constraints directly in the way you might expect. Here's a step-by-step guide to help you with this process:\n\n1. **Remove Current CUDA Installation:**\n   First, ensure that your current CUDA installation is removed to avoid conflicts:\n   ```bash\n   sudo pacman -Rns cuda\n   ```\n\n2. **Download CUDA 10.0:**\n   Since Arch Linux keeps its packages up-to-date, older versions are not typically available in the main repositories. You can either find the package in the Arch Linux Archive or download it directly from NVIDIA:\n   \n   - If you want to use the Arch Linux Archive, you can follow the instructions to download the relevant package from a specific date when CUDA 10.0 was available.\n\n   - Alternatively, download the CUDA 10.0 runfile from NVIDIA's website:\n     - Visit [NVIDIA's CUDA Toolkit Archive](https://developer.nvidia.com/cuda-toolkit-archive).\n     - Download the runfile for Linux for CUDA 10.0.\n\n3. **Install CUDA 10.0:**\n   Once you have downloaded the runfile, install CUDA 10.0 using the following steps:\n   \n   ```bash\n   chmod +x cuda_10.0.<version>_linux.run\n   sudo ./cuda_10.0.<version>_linux.run\n   ```\n\n   Follow the prompts to install the CUDA toolkit. You might want to customize the installation to exclude the driver installation if you already have the appropriate NVIDIA driver version installed.\n\n4. **Environment Setup:**\n   Update your environment variables to point to the new CUDA installation. Add the following lines to your `.bashrc` or `.zshrc` file:\n   \n   ```bash\n   export PATH=/usr/local/cuda-10.0/bin${PATH:+:${PATH}}\n   export LD_LIBRARY_PATH=/usr/local/cuda-10.0/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}\n   ```\n\n   Then, source the file to apply the changes:\n   ```bash\n   source ~/.bashrc\n   ```\n\n5. **Verify Installation:**\n   Check if CUDA 10.0 is correctly installed by running:\n   ```bash\n   nvcc --version\n   ```\n\n   This should display the CUDA 10.0 version information.\n\n6. **Reinstall TensorFlow:**\n   Ensure that TensorFlow is correctly installed and set up to use the GPU. You may need to reinstall TensorFlow after downgrading CUDA to ensure compatibility:\n   ```bash\n   pip install --upgrade tensorflow-gpu\n   ```\n\n7. **Check TensorFlow with GPU:**\n   Verify that TensorFlow can detect the GPU by running a simple script in Python:\n   ```python\n   import tensorflow as tf\n   print(\"Num GPUs Available: \", len(tf.config.list_physical_devices('GPU')))\n   ```\n\nBy following these steps, you should be able to successfully downgrade to CUDA 10.0 and get TensorFlow-GPU working on your Arch Linux system."
    }
]