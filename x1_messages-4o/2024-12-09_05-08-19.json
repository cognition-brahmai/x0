[
    {
        "role": "user",
        "content": "What is the difference between MappingProxyType and PEP 416 frozendict in Python? Even though frozendict was rejected, MappingProxyType was added to the public API in Python 3.3. My understanding is that MappingProxyType is just a wrapper around the underlying dict, so isn't it functionally equivalent to frozendict? For example, consider the following code snippet:\n\n```python\nfrom types import MappingProxyType\ndef frozendict(*args, **kwargs):\n  return MappingProxyType(dict(*args, **kwargs))\n```\n\nMappingProxyType is not hashable as is, but just like the PEP suggested for frozendict, it can be made hashable after ensuring that all its values are hashable. MappingProxyType can't be subclassed, so it would require composition and forwarding of methods. So, what's the substantive difference between the original PEP 416 frozendict and this?"
    },
    {
        "role": "assistant",
        "content": "The discussion of PEP 416 and the subsequent introduction of `MappingProxyType` in Python highlight some interesting aspects of how immutability and dictionary-like behavior can be implemented in Python.\n\n### MappingProxyType\n\n1. **Nature**: `MappingProxyType` is essentially a read-only view of a dictionary. It doesn't copy the dictionary but provides a way to access the dictionary's items without allowing modifications.\n\n2. **Immutability**: While you cannot modify the dictionary through the `MappingProxyType`, the underlying dictionary itself is not immutable. If you hold a reference to the original dictionary, you can still modify it, and those changes will be reflected in the `MappingProxyType`.\n\n3. **Hashability**: `MappingProxyType` is not hashable because it doesn\u2019t enforce immutability on the underlying dictionary. If you need a hashable version, you would need to ensure that all values are hashable and create a custom implementation.\n\n4. **Subclassing**: `MappingProxyType` cannot be subclassed, which limits its extensibility compared to a hypothetical custom class like `frozendict`.\n\n### PEP 416: frozendict\n\n1. **Proposal for True Immutability**: The `frozendict` proposed in PEP 416 was intended to be a truly immutable dictionary. Once created, neither the dictionary nor its contents could be changed, which would also make it inherently hashable if all its contents were hashable.\n\n2. **Hashability**: A `frozendict` would be hashable out-of-the-box, provided all its elements were hashable, allowing it to be used as a key in other dictionaries or stored in sets.\n\n3. **Use Cases**: It would serve use cases where both read-only access and immutability guarantees are needed, such as keys in other dictionaries or in concurrent programming scenarios where immutability is beneficial.\n\n4. **Rejection**: The PEP was rejected primarily because the demand for such a structure wasn't considered strong enough, and the functionality could be approximated using existing types and patterns, like `MappingProxyType`.\n\n### Substantive Differences\n\n- **Immutability**: `MappingProxyType` provides immutability only at the interface level, while `frozendict` would enforce immutability at both the interface and data levels.\n- **Hashability**: `MappingProxyType` is not hashable as-is, whereas `frozendict` was intended to be hashable if its contents were hashable.\n- **Modification Reflection**: Changes to the original dictionary are reflected in `MappingProxyType`, but `frozendict` would not allow any such changes as it would be completely immutable.\n- **Implementation and Extensibility**: `MappingProxyType` is limited in terms of subclassing and extending behavior, whereas a `frozendict` could have been designed to be more flexible in terms of subclassing and additional functionality.\n\nIn summary, while `MappingProxyType` offers a form of read-only access to dictionaries, it does not provide the full immutability and hashability guarantees that `frozendict` aimed to offer. If you need those features, you would need to implement additional checks and constraints manually."
    }
]