[
    {
        "role": "user",
        "content": "How can I test whether two JSON objects are equal in Python, disregarding the order of elements in lists? For instance, consider two JSON documents 'a' and 'b' as shown below:\n\nJSON document 'a':\n```python\n{\n    \"errors\": [\n        {\"error\": \"invalid\", \"field\": \"email\"},\n        {\"error\": \"required\", \"field\": \"name\"}\n    ],\n    \"success\": false\n}\n```\n\nJSON document 'b':\n```python\n{\n    \"success\": false,\n    \"errors\": [\n        {\"error\": \"required\", \"field\": \"name\"},\n        {\"error\": \"invalid\", \"field\": \"email\"}\n    ]\n}\n```\nEven though the order of the \"errors\" lists are different, they should compare equal. How can I achieve that?"
    },
    {
        "role": "assistant",
        "content": "To test whether two JSON objects are equal in Python, disregarding the order of elements in lists, you can use a recursive function to compare the two JSON structures. The idea is to sort any lists you encounter and then perform a deep comparison. Here's a way to achieve this:\n\n```python\nimport json\n\ndef sort_json(obj):\n    \"\"\"Recursively sort lists within the JSON structure.\"\"\"\n    if isinstance(obj, dict):\n        return {key: sort_json(value) for key, value in obj.items()}\n    elif isinstance(obj, list):\n        return sorted((sort_json(item) for item in obj), key=lambda x: json.dumps(x, sort_keys=True))\n    else:\n        return obj\n\ndef are_json_equal(json1, json2):\n    \"\"\"Check if two JSON objects are equal, disregarding the order of lists.\"\"\"\n    return sort_json(json1) == sort_json(json2)\n\n# JSON objects a and b\na = {\n    \"errors\": [\n        {\"error\": \"invalid\", \"field\": \"email\"},\n        {\"error\": \"required\", \"field\": \"name\"}\n    ],\n    \"success\": False\n}\n\nb = {\n    \"success\": False,\n    \"errors\": [\n        {\"error\": \"required\", \"field\": \"name\"},\n        {\"error\": \"invalid\", \"field\": \"email\"}\n    ]\n}\n\n# Check if a and b are equal\nresult = are_json_equal(a, b)\nprint(result)  # Output: True\n```\n\n### Explanation:\n\n1. **`sort_json` Function**: This function recursively processes the JSON structure. If the object is a dictionary, it applies the function to each value. If the object is a list, it sorts the list's elements, including sorting nested lists and dictionaries. Sorting is based on the JSON string representation to ensure consistent ordering.\n\n2. **`are_json_equal` Function**: This function compares the sorted versions of the two JSON objects to determine if they are equal.\n\nThis approach ensures that lists within the JSON structure are compared without regard to order, allowing for an accurate equality check between JSON documents."
    }
]