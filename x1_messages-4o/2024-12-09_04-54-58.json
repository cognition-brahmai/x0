[
    {
        "role": "user",
        "content": "I have a list as follows:\n\n```python\nlist = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n```\n\nI want to delete multiple indexes, say 2, 3, 4, and 5, at the same time. I've tried using `pop` function but it doesn't accept multiple values. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To delete multiple indexes from a list in Python, you can use list comprehension or slicing. Here's one way to achieve this using list comprehension:\n\n```python\n# Original list\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n# Indexes to remove\nindexes_to_remove = {2, 3, 4, 5}\n\n# Create a new list excluding the specified indexes\nnew_list = [item for idx, item in enumerate(my_list) if idx not in indexes_to_remove]\n\nprint(new_list)\n```\n\nIn this code, `enumerate` is used to get both the index and the item from the list. The list comprehension then constructs a new list that includes only the elements whose indexes are not in the `indexes_to_remove` set.\n\nAlternatively, you can use slicing if the indexes you want to remove are contiguous:\n\n```python\n# Original list\nmy_list = ['a', 'b', 'c', 'd', 'e', 'f', 'g']\n\n# Remove elements from index 2 to 5 (inclusive)\ndel my_list[2:6]\n\nprint(my_list)\n```\n\nThis will directly modify the original list by deleting the elements from index 2 to 5."
    }
]