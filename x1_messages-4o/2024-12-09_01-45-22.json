[
    {
        "role": "user",
        "content": "I am trying to follow the pytest good practices for testing my Python code. However, I am encountering an issue where pytest cannot find my module. It seems pytest is not including the current directory in its PYTHONPATH. I have a source file with a function defined and a test file that imports the function from the source file. When I run pytest, it throws an ImportError stating that it cannot find the module 'junk'. But when I directly call pytest on the tests directory using Python, the tests run successfully. What could be the issue with my setup?\n\nHere are my files and output:\n\nSource file:\n```python\ndef add(x, y):\n    return x + y\n```\n\nTest file:\n```python\nimport pytest\nfrom junk.ook import add\n\ndef test_add_true():\n    assert add(1, 1) == 2\n```\n\nShell output:\n\n```bash\np3; pwd          \n/home/usr/tmp/junk\np3; ls           \ntotal 0\n0 junk/  0 tests/\np3; ls junk      \ntotal 4.0K\n4.0K ook.py     0 __init__.py\np3; ls tests \ntotal 4.0K\n4.0K test_ook.py     0 __pycache__/\np3; pytest\n============================= test session starts ==============================\nplatform linux -- Python 3.4.5, pytest-3.4.1, py-1.5.2, pluggy-0.6.0\nrootdir: /home/usr/tmp/junk, inifile:\ncollected 0 items / 1 errors                                                   \n\n==================================== ERRORS ====================================\n______________________ ERROR collecting tests/test_ook.py ______________________\nImportError while importing test module '/home/usr/tmp/junk/tests/test_ook.py'.\nHint: make sure your test modules/packages have valid Python names.\nTraceback:\ntests/test_ook.py:2: in &lt;module&gt;\n    from junk.ook import add\nE   ImportError: No module named 'junk'\n!!!!!!!!!!!!!!!!!!! Interrupted: 1 errors during collection !!!!!!!!!!!!!!!!!!!!\n=========================== 1 error in 0.08 seconds ============================\n    \ndef test_add_true():\n    assert add(1, 1) == 2\n```\n\nSuccessful test run:\n```bash\np3; python -m pytest tests/\n============================= test session starts ==============================\nplatform linux -- Python 3.4.5, pytest-3.4.1, py-1.5.2, pluggy-0.6.0\nrootdir: /home/usr/tmp/junk, inifile:\ncollected 1 item                                                               \n\ntests/test_ook.py .                                                      [100%]\n\n=========================== 1 passed in 0.02 seconds ===========================\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is related to how `pytest` determines the Python path. When you run `pytest` without specifying the module as `python -m pytest`, it doesn't automatically include the current directory or the parent directory of your test modules in `PYTHONPATH`. Let's go through a few steps to resolve this issue:\n\n1. **Directory Structure**: Ensure that your directory structure is set up correctly. It looks like it is, with `junk` being a package due to the presence of `__init__.py`.\n\n2. **Add PYTHONPATH**: You can manually specify the Python path to include the directory containing the `junk` module. You can do this by setting the `PYTHONPATH` environment variable before running `pytest`. For example:\n\n   ```bash\n   export PYTHONPATH=$PYTHONPATH:/home/usr/tmp\n   pytest\n   ```\n\n3. **Use Python Module Invocation**: As you've noticed, using `python -m pytest` works because it adjusts the `PYTHONPATH` to include the current working directory. This is a reliable way to run `pytest` and ensures that your modules are found:\n\n   ```bash\n   python -m pytest\n   ```\n\n4. **Pytest Configuration**: You can create a `pytest.ini` or `pyproject.toml` file in your root project directory to configure `pytest` and specify the path to include. For example, in `pytest.ini`:\n\n   ```ini\n   [pytest]\n   pythonpath = .\n   ```\n\n5. **Check Test Discovery**: Make sure your test file names start with `test_` and follow the conventions pytest uses for test discovery.\n\nBy following these practices, you ensure that `pytest` is aware of where to find your modules, eliminating the `ImportError`. Using the `python -m pytest` command is often the simplest fix and integrates well with many CI/CD systems."
    }
]