[
    {
        "role": "user",
        "content": "Can you provide an optimized solution in JavaScript for calculating the Fibonacci number at a given index?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Calculating Fibonacci numbers efficiently can be accomplished using methods like memoization or an iterative approach to avoid the exponential time complexity of a naive recursive solution. Below is an optimized solution using an iterative approach, which has a time complexity of O(n) and a space complexity of O(1):\n\n```javascript\nfunction fibonacci(n) {\n    if (n <= 1) {\n        return n;\n    }\n\n    let prev = 0;\n    let curr = 1;\n\n    for (let i = 2; i <= n; i++) {\n        let next = prev + curr;\n        prev = curr;\n        curr = next;\n    }\n\n    return curr;\n}\n\n// Example usage:\nconsole.log(fibonacci(10)); // Output: 55\n```\n\nIn this solution, we use two variables, `prev` and `curr`, to keep track of the last two Fibonacci numbers. We iterate from 2 to `n`, updating these variables to compute the next Fibonacci number in the sequence. This approach is efficient in both time and space, making it suitable for calculating Fibonacci numbers at relatively large indices."
    }
]