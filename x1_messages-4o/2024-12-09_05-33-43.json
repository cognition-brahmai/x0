[
    {
        "role": "user",
        "content": "I'm trying to use Python requests to connect to a URL that uses a self-signed SSL certificate. When I try to POST data to the URL, I get the following error: \"requests.exceptions.SSLError: [Errno 1] _ssl.c:507: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed\". The code I'm using is as follows:\n\n```python\nimport requests\ndata = {'foo':'bar'}\nurl = 'https://foo.com/bar'\nr = requests.post(url, data=data)\n```\n\nI'm aware that I can pass False to the verify parameter to bypass this error like so:\n\n```python\nr = requests.post(url, data=data, verify=False)\n```\n\nHowever, I want to point requests to a copy of the public key on disk and tell it to trust that certificate instead of just disabling verification. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To trust a specific self-signed SSL certificate in Python's `requests` library, you can use the `verify` parameter to point to a file containing the server's public key (the certificate). This way, you maintain SSL verification while trusting a specific certificate. Here\u2019s how you can do it:\n\n1. First, you need to have the self-signed certificate from the server saved as a `.pem` file. If you don't already have it, you can obtain it using a browser or a tool like `openssl`.\n\n2. Use the path to this certificate in your `requests.post` call.\n\nHere's how you can modify your code to use the certificate:\n\n```python\nimport requests\n\ndata = {'foo': 'bar'}\nurl = 'https://foo.com/bar'\n\n# Path to your self-signed certificate\ncert_path = '/path/to/your/certificate.pem'\n\n# Use the `verify` parameter to specify the certificate\nr = requests.post(url, data=data, verify=cert_path)\n\nprint(r.status_code)\nprint(r.text)\n```\n\n### Steps to Obtain the Certificate:\n\n- **Using a Browser**: You can view the certificate details in your browser and export it as a `.pem` file.\n  - In Chrome or Firefox, visit the URL, click on the padlock in the address bar, view the certificate, and export it.\n\n- **Using OpenSSL**: You can also use `openssl` to download and save the certificate:\n  ```bash\n  openssl s_client -showcerts -connect foo.com:443 </dev/null 2>/dev/null | openssl x509 -outform PEM > certificate.pem\n  ```\n\n### Important Considerations:\n\n- Ensure the certificate you are using is valid for the server you are connecting to.\n- By using a self-signed certificate, you are taking responsibility for ensuring its authenticity and integrity.\n- This approach keeps SSL verification enabled, which is crucial for maintaining a secure connection.\n\nBy following these steps, you can securely connect to a server with a self-signed certificate without globally disabling SSL verification."
    }
]