[
    {
        "role": "user",
        "content": "How can I programmatically disable Django's admin in a deployed project while still keeping it accessible for local development? I want to achieve this using the settings.py file."
    },
    {
        "role": "assistant",
        "content": "To programmatically disable Django's admin in a deployed project while keeping it accessible for local development, you can use different settings configurations for your development and production environments. A common practice is to create separate settings files or use environment variables to toggle certain features.\n\nHere's a simple way to achieve this using environment variables:\n\n1. **Install `python-decouple`**: This library helps in managing environment variables easily.\n\n   ```bash\n   pip install python-decouple\n   ```\n\n2. **Modify your `settings.py`**: Use `python-decouple` to manage the `INSTALLED_APPS` setting.\n\n   ```python\n   from decouple import config\n\n   # Other settings...\n\n   # Base installed apps\n   INSTALLED_APPS = [\n       # Other default apps...\n   ]\n\n   # Add 'django.contrib.admin' only in development\n   if config('DJANGO_ENV') == 'development':\n       INSTALLED_APPS.append('django.contrib.admin')\n\n   MIDDLEWARE = [\n       'django.middleware.security.SecurityMiddleware',\n       'django.contrib.sessions.middleware.SessionMiddleware',\n       'django.middleware.common.CommonMiddleware',\n       'django.middleware.csrf.CsrfViewMiddleware',\n       'django.contrib.auth.middleware.AuthenticationMiddleware',\n       'django.contrib.messages.middleware.MessageMiddleware',\n       'django.middleware.clickjacking.XFrameOptionsMiddleware',\n   ]\n\n   ROOT_URLCONF = 'your_project.urls'\n\n   # ... other settings\n   ```\n\n3. **Create a `.env` file for local development**: In your project's root directory, create a `.env` file to set the `DJANGO_ENV` variable.\n\n   ```\n   DJANGO_ENV=development\n   ```\n\n4. **Set the environment variable in production**: In your production environment, set the `DJANGO_ENV` environment variable to something other than `development`, like `production`. This can be done in your server configuration or deployment scripts.\n\n5. **Update `urls.py`**: Make sure to only include admin URLs when in development.\n\n   ```python\n   from django.conf import settings\n   from django.contrib import admin\n   from django.urls import path, include\n\n   urlpatterns = [\n       # Other URL patterns...\n   ]\n\n   if settings.DEBUG:  # Typically DEBUG=True in development\n       urlpatterns += [\n           path('admin/', admin.site.urls),\n       ]\n   ```\n\nBy following these steps, the Django admin will be included in development but excluded in production, based on the environment configuration. This approach leverages environment variables to switch between settings, which is a common practice in modern web development for managing different environments."
    }
]