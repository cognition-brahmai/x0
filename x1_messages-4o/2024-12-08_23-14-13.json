[
    {
        "role": "user",
        "content": "Suppose we have an XML document as follows:\n<orders>\n    <order>\n        <id>001</id>\n        <product>Apple</product>\n        <quantity>5</quantity>\n    </order>\n    <order>\n        <id>002</id>\n        <product>Orange</product>\n        <quantity>10</quantity>\n    </order>\n    <order>\n        <id>003</id>\n        <product>Banana</product>\n        <quantity>2</quantity>\n    </order>\n</orders>\nHow can we parse this XML document and extract the following information using Python?\nOrder ID    Product    Quantity\n001         Apple      5\n002         Orange     10\n003         Banana     2"
    },
    {
        "role": "assistant",
        "content": "To parse the XML document and extract the desired information in Python, you can use the `xml.etree.ElementTree` module, which is part of the Python standard library. Here's a simple example of how you can achieve this:\n\n```python\nimport xml.etree.ElementTree as ET\n\n# Define the XML document as a string\nxml_data = \"\"\"\n<orders>\n    <order>\n        <id>001</id>\n        <product>Apple</product>\n        <quantity>5</quantity>\n    </order>\n    <order>\n        <id>002</id>\n        <product>Orange</product>\n        <quantity>10</quantity>\n    </order>\n    <order>\n        <id>003</id>\n        <product>Banana</product>\n        <quantity>2</quantity>\n    </order>\n</orders>\n\"\"\"\n\n# Parse the XML document\nroot = ET.fromstring(xml_data)\n\n# Extract and print the order information\nprint(\"Order ID    Product    Quantity\")\nfor order in root.findall('order'):\n    order_id = order.find('id').text\n    product = order.find('product').text\n    quantity = order.find('quantity').text\n    print(f\"{order_id}         {product}      {quantity}\")\n```\n\nWhen you run this code, it will output the following:\n\n```\nOrder ID    Product    Quantity\n001         Apple      5\n002         Orange     10\n003         Banana     2\n```\n\nThis code first parses the XML string using `ET.fromstring()`, then iterates over each `order` element, extracting the text from the `id`, `product`, and `quantity` elements, and finally prints the extracted information in the desired format."
    }
]