[
    {
        "role": "user",
        "content": "How can I catch a specific HTTP error, particularly a 404 error, in Python? Currently, I am using urllib2 to open a URL and I'm using try-except to catch any HTTP errors. However, I want to specifically catch the error when the webpage does not exist. Here is my current code:\n\n```python\nimport urllib2\ntry:\n   urllib2.urlopen(\"some url\")\nexcept urllib2.HTTPError:\n   <whatever>\n```\n\nWith this code, I am catching all types of HTTP errors, but I only want to catch a 404 error. How can I modify my code to do this?"
    },
    {
        "role": "assistant",
        "content": "To catch a specific HTTP error, such as a 404 error, you can modify your code to check the specific HTTP error code in the except block. Here's how you can do that using `urllib2`:\n\n```python\nimport urllib2\n\ntry:\n    response = urllib2.urlopen(\"some url\")\nexcept urllib2.HTTPError as e:\n    if e.code == 404:\n        # Handle the 404 error specifically\n        print(\"Error 404: Page not found.\")\n    else:\n        # Handle other HTTP errors\n        print(f\"HTTPError: {e.code}\")\nexcept urllib2.URLError as e:\n    # Handle URL errors (e.g., network issues, invalid URL)\n    print(f\"URLError: {e.reason}\")\nelse:\n    # If no exceptions were raised, you can process the response\n    content = response.read()\n    print(content)\n```\n\nHere's what the code does:\n- It attempts to open a URL using `urllib2.urlopen()`.\n- If an `HTTPError` occurs, it checks the error code. If the error code is 404, it handles it specifically. Otherwise, it handles other HTTP errors.\n- If a `URLError` occurs (e.g., network issues or an invalid URL), it handles those separately.\n- If no exceptions occur, it reads and processes the response content. \n\nThis approach allows you to specifically target and handle a 404 error while still being able to manage other types of exceptions appropriately."
    }
]