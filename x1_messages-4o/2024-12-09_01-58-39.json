[
    {
        "role": "user",
        "content": "In Python, I am trying to work with multiple parent inheritance. I have two parent classes, parent and parent2, and a child class which inherits from both parents. Both parent classes have an `__init__` method, but when I call the super `__init__` method in the child class, only parent's `__init__` method seems to be called. Why does parent2's `__init__` method not get executed? Here's my code:\n\n```python\nclass parent(object):\n    var1=1\n    var2=2\n    def __init__(self,x=1,y=2):\n        self.var1=x\n        self.var2=y\n\nclass parent2(object):\n    var4=11\n    var5=12\n    def __init__(self,x=3,y=4):\n        self.var4=x\n        self.var5=y\n\n    def parprint(self):\n        print self.var4\n        print self.var5\n\nclass child(parent, parent2):\n    var3=5\n    def __init__(self,x,y):\n        super(child, self).__init__(x,y)\n\nchildobject = child(9,10)\nprint childobject.var1\nprint childobject.var2\nprint childobject.var3\nchildobject.parprint()\n```\n\nThe output I get is:\n\n```\n9\n10\n5\n11\n12\n```"
    },
    {
        "role": "assistant",
        "content": "In Python, when using multiple inheritance, the `super()` function only follows the method resolution order (MRO) of the class hierarchy. In your case, the `super()` call in the `child` class's `__init__` method will only call the `__init__` method of the first parent class in the MRO, which is `parent`. Therefore, the `__init__` method of `parent2` is not automatically called.\n\nTo ensure that both parent `__init__` methods are called, you have to explicitly call them. Here's how you can modify your `child` class's `__init__` method to achieve that:\n\n```python\nclass parent(object):\n    var1 = 1\n    var2 = 2\n    def __init__(self, x=1, y=2):\n        self.var1 = x\n        self.var2 = y\n\nclass parent2(object):\n    var4 = 11\n    var5 = 12\n    def __init__(self, x=3, y=4):\n        self.var4 = x\n        self.var5 = y\n\n    def parprint(self):\n        print(self.var4)\n        print(self.var5)\n\nclass child(parent, parent2):\n    var3 = 5\n    def __init__(self, x, y):\n        parent.__init__(self, x, y)\n        parent2.__init__(self, x+2, y+2)  # Adjust arguments as needed\n\nchildobject = child(9, 10)\nprint(childobject.var1)\nprint(childobject.var2)\nprint(childobject.var3)\nchildobject.parprint()\n```\n\nIn this modified version, `parent.__init__` and `parent2.__init__` are both called explicitly within the `child` class's `__init__` method. Note that you might want to adjust the arguments passed to `parent2.__init__` depending on your specific needs."
    }
]