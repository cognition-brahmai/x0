[
    {
        "role": "user",
        "content": "How can I check if an element of a list is a list in Python? For example, if we have the following list:\n\n```python\nmy_list = ['UMM', 'Uma', ['Ulaster','Ulter']]\n```\n\nI need to find out if an element in the list is itself a list. What should I replace `aValidList` with in the following code?\n\n```python\nfor e in my_list:\n    if e == aValidList:\n        return True\n```\n\nDo I need to import any special libraries? What is the best way of checking if a variable or an element is a list in Python?"
    },
    {
        "role": "assistant",
        "content": "To check if an element of a list is itself a list in Python, you can use the built-in `isinstance()` function. You do not need to import any special libraries to accomplish this. The `isinstance()` function is used to check if an object is an instance of a specific class or a subclass thereof.\n\nIn your example, you can replace `aValidList` with `isinstance(e, list)`. Here's how you can modify your code:\n\n```python\nmy_list = ['UMM', 'Uma', ['Ulaster', 'Ulter']]\n\ndef contains_list(lst):\n    for e in lst:\n        if isinstance(e, list):\n            return True\n    return False\n\n# Usage\nresult = contains_list(my_list)\nprint(result)  # This will print True because ['Ulaster', 'Ulter'] is a list\n```\n\nIn this code, `isinstance(e, list)` checks whether the element `e` is a list. If it is, the function returns `True`. If none of the elements in `my_list` are lists, it will return `False`."
    }
]