[
    {
        "role": "user",
        "content": "How can I code a more elegant or efficient version of a rolling window (also known as a sliding window) iterable over a sequence/iterator/generator in Python? I am currently using the following code:\n\n```python\ndef rolling_window(seq, window_size):\n    it = iter(seq)\n    win = [it.next() for cnt in xrange(window_size)] # First window\n    yield win\n    for e in it: # Subsequent windows\n        win[:-1] = win[1:]\n        win[-1] = e\n        yield win\n\nif __name__==\"__main__\":\n    for w in rolling_window(xrange(6), 3):\n        print w\n\n\"\"\"Example output:   \n   [0, 1, 2]\n   [1, 2, 3]\n   [2, 3, 4]\n   [3, 4, 5]\n\"\"\"\n```"
    },
    {
        "role": "assistant",
        "content": "To create a more efficient and elegant version of a rolling window in Python, you can use the `collections.deque` data structure. The `deque` provides an efficient way to append and pop elements from both ends, which is ideal for maintaining a sliding window. Here's how you can refactor your code:\n\n```python\nfrom collections import deque\nfrom itertools import islice\n\ndef rolling_window(seq, window_size):\n    it = iter(seq)\n    win = deque(islice(it, window_size), maxlen=window_size)\n    if len(win) == window_size:\n        yield list(win)\n    for e in it:\n        win.append(e)\n        yield list(win)\n\nif __name__ == \"__main__\":\n    for w in rolling_window(range(6), 3):\n        print(w)\n\n\"\"\"Example output:\n   [0, 1, 2]\n   [1, 2, 3]\n   [2, 3, 4]\n   [3, 4, 5]\n\"\"\"\n```\n\n### Key Improvements:\n\n1. **Use of `deque`:** The `deque` object from the `collections` module is ideal for this kind of operation since it allows for efficient appending and popping of elements with an automatic sliding window behavior through its `maxlen` attribute.\n\n2. **Use of `islice`:** The `islice` function from `itertools` allows you to efficiently consume the first `window_size` elements from the iterator without creating an intermediate list.\n\n3. **Cleaner Code:** The code is more readable and concise, focusing on the essentials of the sliding window mechanism.\n\nThis approach retains the functionality of your original code while improving performance and clarity."
    }
]