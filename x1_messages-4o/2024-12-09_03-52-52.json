[
    {
        "role": "user",
        "content": "How can I find the indexes of matching rows in a 2-dimensional Numpy array? For instance, I have an array as follows:\n\n```python\nvals = np.array([[0, 0],\n                 [1, 0],\n                 [2, 0],\n                 [0, 1],\n                 [1, 1],\n                 [2, 1],\n                 [0, 2],\n                 [1, 2],\n                 [2, 2],\n                 [0, 3],\n                 [1, 3],\n                 [2, 3],\n                 [0, 0],\n                 [1, 0],\n                 [2, 0],\n                 [0, 1],\n                 [1, 1],\n                 [2, 1],\n                 [0, 2],\n                 [1, 2],\n                 [2, 2],\n                 [0, 3],\n                 [1, 3],\n                 [2, 3]])\n```\n\nI want to find the indexes that match the row [0, 1], which in this case, are index 3 and 15. If I use `numpy.where(vals == [0 ,1])`, I get the following:\n\n```python\n(array([ 0,  3,  3,  4,  5,  6,  9, 12, 15, 15, 16, 17, 18, 21]), array([0, 0, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0]))\n```\n\nBut instead of this, I want `array([3, 15])`. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To find the indexes of rows in a 2-dimensional NumPy array that match a specific pattern, you can use the `numpy.all` function along with `numpy.where`. `numpy.all` allows you to check if all the elements in a row match the desired pattern. Here's how you can do it for your case:\n\n```python\nimport numpy as np\n\n# Your 2D NumPy array\nvals = np.array([[0, 0],\n                 [1, 0],\n                 [2, 0],\n                 [0, 1],\n                 [1, 1],\n                 [2, 1],\n                 [0, 2],\n                 [1, 2],\n                 [2, 2],\n                 [0, 3],\n                 [1, 3],\n                 [2, 3],\n                 [0, 0],\n                 [1, 0],\n                 [2, 0],\n                 [0, 1],\n                 [1, 1],\n                 [2, 1],\n                 [0, 2],\n                 [1, 2],\n                 [2, 2],\n                 [0, 3],\n                 [1, 3],\n                 [2, 3]])\n\n# The row pattern you're looking for\ntarget_row = np.array([0, 1])\n\n# Use numpy.all to check each row for a complete match with target_row\nmatching_indices = np.where(np.all(vals == target_row, axis=1))[0]\n\n# Print the indices\nprint(matching_indices)\n```\n\nThis code will output:\n```\n[ 3 15]\n```\n\nExplanation:\n- `vals == target_row` creates a boolean array where each element is compared with the corresponding element in `target_row`.\n- `np.all(..., axis=1)` checks if all elements in each row are `True` (i.e., the entire row matches the `target_row`).\n- `np.where(...)` returns the indices of rows where the condition is `True`.\n- The `[0]` is to get the first element from the tuple returned by `np.where`, which is the array of indices."
    }
]