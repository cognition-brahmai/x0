[
    {
        "role": "user",
        "content": "I am attempting to install a local directory as a python package using pip. When I run the command `pip install . --no-index`, pip just copies over the package to site-packages, as shown below:\n\n```bash\n(venv) C:\\(...)>pip install . --no-index\nIgnoring indexes: http://pypi.python.org/simple/\nUnpacking c:\\users\\fsantos\\desktop\\biskates.com\\biskates\\forks\\django-pipeline\n  Running setup.py egg_info for package from file:///(...)%5Cforks%5Cdjango-pipeline\n\nInstalling collected packages: django-pipeline\n  Running setup.py install for django-pipeline\n\nSuccessfully installed django-pipeline\nCleaning up...\n\n(venv) C:\\(...)>cd ..\n(venv) C:\\(...)>python\nPython 2.7.2 (default, Jun 12 2011, 15:08:59) [MSC v.1500 32 bit (Intel)] on win32\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> import pipeline\n>>> pipeline.__file__\n'C:\\\\(...)site-packages\\\\pipeline\\\\__init__.py'\n>>> \n```\n\nHow can I avoid this and use the package directly from its source folder? I'm trying to integrate django-pipeline into my Django project and want to add support for Django 1.4 first, so I have forked and cloned my fork."
    },
    {
        "role": "assistant",
        "content": "To use the package directly from its source folder rather than having pip copy it to site-packages, you can use the `pip install -e` command, which installs the package in \"editable\" mode. This allows you to make changes to the source code and have those changes immediately reflected in your environment without needing to reinstall the package. Here\u2019s how you can do it:\n\n1. **Navigate to the package directory**: Open your command prompt or terminal and navigate to the directory where your package's `setup.py` is located.\n\n2. **Install the package in editable mode**: Run the following command:\n\n   ```bash\n   pip install -e .\n   ```\n\nThe `-e` or `--editable` flag tells pip to create a symbolic link in the site-packages directory to the package's source directory. This way, any changes you make in the source folder will be reflected in your environment.\n\n3. **Verify the installation**: You can verify that the package is installed in editable mode by running:\n\n   ```bash\n   pip list\n   ```\n\n   You should see your package listed with `-e` at the beginning, indicating it's installed in editable mode.\n\n4. **Continue your development**: Now you can work on your package directly from its source directory, and any changes you make will be immediately available when you import and use the package in your Django project.\n\nBy using the editable mode, you can easily integrate and test changes for Django 1.4 support in your forked version of `django-pipeline`."
    }
]