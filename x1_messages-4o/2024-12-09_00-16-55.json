[
    {
        "role": "user",
        "content": "I'm trying to read Unicode characters from command-line arguments in Python 2.x on Windows. However, it seems that sys.argv is a string encoded in some local encoding, rather than Unicode. How can I read the command line in full Unicode? I've noticed that Python 3.0 handles this correctly and provides sys.argv as proper Unicode, but I'm not ready to transition to Python 3.0 yet because of the lack of support for certain 3rd party libraries. Here's my sample code and the results I'm getting:\n\n```python\nimport sys\n\nfirst_arg = sys.argv[1]\nprint first_arg\nprint type(first_arg)\nprint first_arg.encode(\"hex\")\nprint open(first_arg)\n```\n\nWhen my code runs on my PC, which is set up for a Japanese code page, I get the following output:\n\n```\nC:\\temp>argv.py \"PC\u30fb\u30bd\u30d5\u30c8\u7533\u8acb\u66f808.09.24.doc\"\nPC\u30fb\u30bd\u30d5\u30c8\u7533\u8acb\u66f808.09.24.doc\n<type 'str'>\n50438145835c83748367905c90bf8f9130382e30392e32342e646f63\n<open file 'PC\u30fb\u30bd\u30d5\u30c8\u7533\u8acb\u66f808.09.24.doc', mode 'r' at 0x00917D90>\n```\n\nBut it breaks for filenames with characters that aren't in the Shift-JIS character set as shown below:\n\n```\nC:\\temp>argv.py J\u00f6rgen.txt\nJorgen.txt\n<type 'str'>\n4a6f7267656e2e747874\nTraceback (most recent call last):\n  File \"C:\\temp\\argv.py\", line 7,\nin <module>\n    print open(first_arg)\nIOError: [Errno 2] No such file or directory: 'Jorgen.txt'\n```\n\nAdditionally, I have managed to enable drag-and-drop of files onto .py files in Windows Explorer and I have filenames with all sorts of characters, including some not in the system default code page. My Python script doesn't get the right Unicode filenames passed to it via sys.argv in all cases, when the characters aren't representable in the current code page encoding. There must be a Windows API to read the command line with full Unicode (which Python 3.0 is using) but I assume Python 2.x isn't using it."
    },
    {
        "role": "assistant",
        "content": "In Python 2.x, the `sys.argv` array is indeed treated as a list of byte strings encoded in the system's default encoding, which can lead to problems when dealing with Unicode characters that aren't representable in the current code page. To handle this properly, you can utilize the Windows API to retrieve the command-line arguments in full Unicode. Here's a method to achieve this by using the `ctypes` module to interface with the relevant Windows API functions:\n\n1. Use the `GetCommandLineW` function from the Windows API to retrieve the command line as a Unicode string.\n2. Use `CommandLineToArgvW` to parse this command line into individual arguments.\n\nHere's a complete example of how you can implement this:\n\n```python\nimport sys\nimport ctypes\nfrom ctypes import wintypes\n\ndef get_unicode_argv():\n    GetCommandLineW = ctypes.windll.kernel32.GetCommandLineW\n    CommandLineToArgvW = ctypes.windll.shell32.CommandLineToArgvW\n\n    GetCommandLineW.restype = wintypes.LPWSTR\n    CommandLineToArgvW.restype = ctypes.POINTER(wintypes.LPWSTR)\n\n    cmd_line = GetCommandLineW()\n    argc = ctypes.c_int()\n    argv = CommandLineToArgvW(cmd_line, ctypes.byref(argc))\n    if not argv:\n        raise ctypes.WinError()\n\n    try:\n        return [argv[i] for i in range(argc.value)]\n    finally:\n        ctypes.windll.kernel32.LocalFree(argv)\n\nif __name__ == \"__main__\":\n    argv = get_unicode_argv()\n    # Skip the first argument (script name)\n    for arg in argv[1:]:\n        print(arg)\n        print(type(arg))\n        print(arg.encode(\"utf-8\").encode(\"hex\"))\n        try:\n            with open(arg, 'r', encoding='utf-8') as f:\n                print(f.read())\n        except IOError as e:\n            print(f\"Error opening file: {e}\")\n```\n\n### Explanation:\n\n- **GetCommandLineW**: Retrieves the command line as a Unicode string.\n- **CommandLineToArgvW**: Parses the command line string into an array of Unicode strings.\n- **ctypes**: Used to interface with the Windows API.\n\nThis solution ensures that you can correctly handle filenames with non-ASCII characters, as the command line is parsed directly as Unicode, bypassing the limitations of the system\u2019s default code page. Note that when opening files, you might need to handle them as Unicode by specifying an appropriate encoding (such as `'utf-8'`).\n\nThis approach will allow you to work with a wider range of Unicode characters in Python 2.x on Windows."
    }
]