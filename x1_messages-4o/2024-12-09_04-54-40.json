[
    {
        "role": "user",
        "content": "I'm trying to run an asynchronous function with apscheduller every N minutes using Python 3.6 and APScheduler 3.3.1. My code is as follows:\n\n```python\nURL_LIST = ['<url1>',\n            '<url2>',\n            '<url2>',\n            ]\n\ndef demo_async(urls):\n    \"\"\"Fetch list of web pages asynchronously.\"\"\"\n    loop = asyncio.get_event_loop() # event loop\n    future = asyncio.ensure_future(fetch_all(urls)) # tasks to do\n    loop.run_until_complete(future) # loop until done\n\nasync def fetch_all(urls):\n    tasks = [] # dictionary of start times for each url\n    async with ClientSession() as session:\n        for url in urls:\n            task = asyncio.ensure_future(fetch(url, session))\n            tasks.append(task) # create list of tasks\n        _ = await asyncio.gather(*tasks) # gather task responses\n\nasync def fetch(url, session):\n    \"\"\"Fetch a url, using specified ClientSession.\"\"\"\n    async with session.get(url) as response:\n        resp = await response.read()\n        print(resp)\n\nif __name__ == '__main__':\n    scheduler = AsyncIOScheduler()\n    scheduler.add_job(demo_async, args=[URL_LIST], trigger='interval', seconds=15)\n    scheduler.start()\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        asyncio.get_event_loop().run_forever()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n```\n\nHowever, when I try to run it, I get the following error:\n\n```python\nJob \"demo_async (trigger: interval[0:00:15], next run at: 2017-10-12 18:21:12 +04)\" raised an exception.....\n..........\\lib\\asyncio\\events.py\", line 584, in get_event_loop\n    % threading.current_thread().name)\nRuntimeError: There is no current event loop in thread '<concurrent.futures.thread.ThreadPoolExecutor object at 0x0356B150>_0'.\n```\n\nCould you please help me to solve this issue?"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering is due to the fact that APScheduler is running the job in a separate thread, which doesn't have its own event loop by default. When using asyncio with APScheduler, you need to ensure that each thread that needs an event loop creates one.\n\nTo resolve this issue, you can modify the `demo_async` function to create its own event loop if one doesn't already exist. Additionally, since you're using Python 3.6, you should ensure that you're using the `asyncio.run()` function, which was introduced in Python 3.7, but you can mimic its behavior for Python 3.6.\n\nHere's how you can modify your code:\n\n```python\nimport asyncio\nimport os\nfrom aiohttp import ClientSession\nfrom apscheduler.schedulers.asyncio import AsyncIOScheduler\n\nURL_LIST = ['<url1>',\n            '<url2>',\n            '<url3>',\n            ]\n\ndef demo_async(urls):\n    \"\"\"Fetch list of web pages asynchronously.\"\"\"\n    loop = asyncio.new_event_loop()  # Create a new event loop\n    asyncio.set_event_loop(loop)     # Set it as the current loop\n    loop.run_until_complete(fetch_all(urls))\n    loop.close()                     # Close the loop after completion\n\nasync def fetch_all(urls):\n    tasks = []  # List of tasks\n    async with ClientSession() as session:\n        for url in urls:\n            task = asyncio.ensure_future(fetch(url, session))\n            tasks.append(task)  # Create list of tasks\n        await asyncio.gather(*tasks)  # Gather task responses\n\nasync def fetch(url, session):\n    \"\"\"Fetch a url, using specified ClientSession.\"\"\"\n    async with session.get(url) as response:\n        resp = await response.read()\n        print(resp)\n\nif __name__ == '__main__':\n    scheduler = AsyncIOScheduler()\n    scheduler.add_job(demo_async, args=[URL_LIST], trigger='interval', seconds=15)\n    scheduler.start()\n    print('Press Ctrl+{0} to exit'.format('Break' if os.name == 'nt' else 'C'))\n\n    # Execution will block here until Ctrl+C (Ctrl+Break on Windows) is pressed.\n    try:\n        asyncio.get_event_loop().run_forever()\n    except (KeyboardInterrupt, SystemExit):\n        pass\n```\n\n### Key Changes Made:\n1. **Event Loop Management**: Created a new event loop within the `demo_async` function and set it as the current loop. This ensures each thread has its own loop.\n2. **Loop Closing**: Closed the loop after completion to release resources properly.\n\nBy following these changes, each invocation of `demo_async` will have its own event loop, resolving the error you encountered."
    }
]