[
    {
        "role": "user",
        "content": "How can I use Flask to serve NPM packages? I have a small Flask application which currently sources jQuery and highlight.js from external servers. I would like to make these local dependencies which I pull in via NPM. What is the standard practice for this? Should I create a package.json file in the same directory as my static and templates directories and serve node_modules as a separate static directory, as suggested by this question? I'm packaging and distributing my application using pip, so I need a solution that is compatible with that."
    },
    {
        "role": "assistant",
        "content": "To serve NPM packages locally in a Flask application, you can indeed manage your JavaScript dependencies using NPM and then serve them as static files. Here\u2019s a step-by-step guide on how to set it up:\n\n### Step 1: Initialize NPM\n\nFirst, you'll need to initialize an NPM project in your Flask app directory. This will create a `package.json` file.\n\n```bash\nnpm init -y\n```\n\n### Step 2: Install the Packages\n\nInstall the packages you need, like jQuery and highlight.js, using NPM:\n\n```bash\nnpm install jquery highlight.js\n```\n\n### Step 3: Organize Your Directory Structure\n\nYou'll typically want to organize your Flask app with a structure like this:\n\n```\n/your-flask-app\n    /static\n        /js\n        /css\n    /templates\n    /node_modules\n    app.py\n    package.json\n    package-lock.json\n```\n\n### Step 4: Copy Required Files\n\nYou can either manually copy the necessary JavaScript and CSS files from `node_modules` to your `/static` directory, or you can automate this with a build step. For simplicity, I'll describe the manual approach:\n\n1. **JavaScript Files**: Copy the required JavaScript files from `node_modules` to your `/static/js` directory.\n\n    For example:\n    ```bash\n    cp node_modules/jquery/dist/jquery.min.js static/js/\n    cp node_modules/highlight.js/lib/core.js static/js/\n    # Add other specific files you need\n    ```\n\n2. **CSS Files**: If you need any CSS files, copy them similarly to `/static/css`.\n\n### Step 5: Update Flask Templates\n\nIn your Flask templates, reference these local static files instead of the CDN versions:\n\n```html\n<!doctype html>\n<html>\n<head>\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='css/your-styles.css') }}\">\n</head>\n<body>\n    <script src=\"{{ url_for('static', filename='js/jquery.min.js') }}\"></script>\n    <script src=\"{{ url_for('static', filename='js/core.js') }}\"></script>\n    <!-- Add other scripts and styles as needed -->\n</body>\n</html>\n```\n\n### Step 6: Automate (Optional)\n\nFor a more automated approach, you can use a build tool like Gulp or Webpack to handle copying files from `node_modules` to your `/static` directory. This can be set up in a `gulpfile.js` or `webpack.config.js`, but this adds complexity and is optional for smaller projects.\n\n### Step 7: Packaging with Pip\n\nSince you're distributing your application with pip, ensure your `setup.py` includes the static directory. Here\u2019s a basic example:\n\n```python\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='your_flask_app',\n    version='0.1',\n    packages=find_packages(),\n    include_package_data=True,\n    install_requires=[\n        'Flask',\n        # Other dependencies\n    ],\n)\n```\n\nEnsure that your `MANIFEST.in` includes static files as well:\n\n```\ngraft static\ngraft templates\n```\n\n### Conclusion\n\nBy following these steps, you can manage JavaScript dependencies with NPM and serve them locally in a Flask application. This setup is compatible with pip packaging and ensures that your app doesn't rely on external CDNs."
    }
]