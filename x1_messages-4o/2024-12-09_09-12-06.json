[
    {
        "role": "user",
        "content": "How can an AI code be updated to create a list that contains all pairs of numbers from a given array whose sum is equal to a specific number?"
    },
    {
        "role": "assistant",
        "content": "To update your AI code to create a list of all pairs of numbers from a given array whose sum equals a specific target number, you can implement a function that iterates through the array and checks for pairs whose sum matches the target. Here is an example of how you can achieve this in Python:\n\n```python\ndef find_pairs_with_sum(array, target_sum):\n    pairs = []\n    seen_numbers = set()\n\n    for number in array:\n        complement = target_sum - number\n        if complement in seen_numbers:\n            pairs.append((complement, number))\n        seen_numbers.add(number)\n\n    return pairs\n\n# Example usage\narray = [1, 2, 3, 4, 5, 6, 7, 8, 9]\ntarget_sum = 10\nresult = find_pairs_with_sum(array, target_sum)\nprint(\"Pairs with sum\", target_sum, \":\", result)\n```\n\n### Explanation:\n1. **Initialization**: We initialize an empty list `pairs` to store the resulting pairs and a set `seen_numbers` to keep track of numbers we've already encountered.\n\n2. **Iteration**: We iterate over each number in the array.\n\n3. **Complement Calculation**: For each number, calculate the complement that would add up to the target sum. The complement is `target_sum - number`.\n\n4. **Check and Store Pairs**: If the complement is already in the set `seen_numbers`, it means we have found a pair that sums to the target, so we add the pair `(complement, number)` to the `pairs` list.\n\n5. **Add to Seen Numbers**: Add the current number to the `seen_numbers` set.\n\n6. **Return Result**: After iterating through the array, we return the list of pairs.\n\nThis code efficiently finds all pairs with the desired sum using a single pass through the array and a constant time check for complements, resulting in an overall time complexity of O(n)."
    }
]