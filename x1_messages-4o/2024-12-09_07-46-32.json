[
    {
        "role": "user",
        "content": "How can I build a multi-level dictionary with variable depth from a large list? For instance, if I have a list like:\n\n```python\n[A][B1][C1]=1\n[A][B1][C2]=2\n[A][B2]=3\n[D][E][F][G]=4\n```\n\nI would like the dictionary to be structured as follows:\n\n```python\nA\n--B1\n-----C1=1\n-----C2=1\n--B2=3\nD\n--E\n----F\n------G=4\n```\n\nIf I use recursive defaultdict, I can write `table[A][B1][C1]=1` and `table[A][B2]=2`, but this only works if I hardcode the insertion statements. The problem arises when parsing the list because I don't know how many keys I'll need in advance to call `table[key1][key2][...]`. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To build a multi-level dictionary with variable depth from a list of keys and values, you can use a recursive approach with the `defaultdict` from the `collections` module. Here's how you can achieve this dynamically without hardcoding the depth:\n\n```python\nfrom collections import defaultdict\n\n# A helper function to create a nested defaultdict\ndef recursive_default_dict():\n    return defaultdict(recursive_default_dict)\n\n# Function to insert a value into the nested dictionary\ndef insert_into_dict(d, keys, value):\n    current_level = d\n    for key in keys[:-1]:  # Traverse through keys except the last one\n        current_level = current_level[key]  # Go deeper into the dictionary\n    current_level[keys[-1]] = value  # Set the value at the deepest level\n\n# Input list of strings\ninput_list = [\n    \"[A][B1][C1]=1\",\n    \"[A][B1][C2]=2\",\n    \"[A][B2]=3\",\n    \"[D][E][F][G]=4\"\n]\n\n# Create an empty recursive defaultdict\nnested_dict = recursive_default_dict()\n\n# Parse the input list and populate the dictionary\nfor item in input_list:\n    keys_part, value_part = item.split('=')  # Split the key path and value\n    keys = [key.strip('[]') for key in keys_part.split('][')]  # Extract keys\n    value = int(value_part)  # Convert the value to integer\n    insert_into_dict(nested_dict, keys, value)  # Insert into the dictionary\n\n# Function to print the nested dictionary in a structured form\ndef print_dict(d, indent=0):\n    for key, value in d.items():\n        print(' ' * indent + str(key))\n        if isinstance(value, dict):\n            print_dict(value, indent + 2)\n        else:\n            print(' ' * (indent + 2) + str(value))\n\n# Print the structured dictionary\nprint_dict(nested_dict)\n```\n\n### Explanation:\n\n1. **`recursive_default_dict` Function**: This is a helper function that creates a `defaultdict` that can nest itself recursively. This allows for creating an arbitrary depth of dictionaries.\n\n2. **`insert_into_dict` Function**: This function takes the dictionary, a list of keys, and a value. It traverses the dictionary following the keys and inserts the value at the correct depth.\n\n3. **Input Parsing**: The input list is split into key paths and values. The key path is further split into individual keys. The value is converted from a string to an integer.\n\n4. **Dictionary Population**: Using the parsed keys and values, the `insert_into_dict` function is used to build the nested dictionary.\n\n5. **Printing the Dictionary**: The `print_dict` function is a recursive function that prints the dictionary in a structured format, similar to the desired output.\n\nThis approach allows you to build a multi-level dictionary with variable depth based on your input list without knowing the depth in advance."
    }
]