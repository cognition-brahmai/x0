[
    {
        "role": "user",
        "content": "How can I assert successive calls to a mock method in Python? I am using the `assert_called_with()` method from the unittest.mock.Mock library, but it only checks the last call to a method. Is there a way to check three successive calls to the mocked method, each with different parameters?"
    },
    {
        "role": "assistant",
        "content": "To assert successive calls to a mock method in Python, you can use `unittest.mock`'s `call` objects along with the `assert_has_calls()` method. This approach lets you verify that a series of calls were made with specific arguments. Here's a step-by-step guide on how you can do this:\n\n1. **Import Necessary Modules:**\n\n   First, ensure you have imported the necessary components from the `unittest.mock` library.\n\n   ```python\n   from unittest.mock import Mock, call\n   ```\n\n2. **Create a Mock Object:**\n\n   Create a mock object that you will be calling.\n\n   ```python\n   my_mock = Mock()\n   ```\n\n3. **Simulate Method Calls:**\n\n   Simulate the method calls on the mock object with the specific arguments.\n\n   ```python\n   my_mock.some_method('first_call')\n   my_mock.some_method('second_call')\n   my_mock.some_method('third_call')\n   ```\n\n4. **Assert Successive Calls:**\n\n   Use the `assert_has_calls()` method to check if the calls were made in the specified order. The `any_order=False` parameter ensures that the calls must be in the exact order specified.\n\n   ```python\n   expected_calls = [call('first_call'), call('second_call'), call('third_call')]\n   my_mock.some_method.assert_has_calls(expected_calls, any_order=False)\n   ```\n\nThis will verify that the `some_method` was called three times in succession with the arguments `'first_call'`, `'second_call'`, and `'third_call'`.\n\nHere's a complete example for clarity:\n\n```python\nfrom unittest.mock import Mock, call\n\n# Create a mock object\nmy_mock = Mock()\n\n# Simulate method calls\nmy_mock.some_method('first_call')\nmy_mock.some_method('second_call')\nmy_mock.some_method('third_call')\n\n# Assert successive calls\nexpected_calls = [call('first_call'), call('second_call'), call('third_call')]\nmy_mock.some_method.assert_has_calls(expected_calls, any_order=False)\n```\n\nUsing this technique, you can effectively verify the sequence and parameters of multiple calls to a mocked method."
    }
]