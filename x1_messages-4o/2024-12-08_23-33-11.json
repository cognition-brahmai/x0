[
    {
        "role": "user",
        "content": "Can you write a recursive function in Scala to calculate the nth prime number? Provide an example of how to call the function with an input value of 10."
    },
    {
        "role": "assistant",
        "content": "Certainly! To calculate the nth prime number using a recursive function in Scala, we need to define a function that can check if a number is prime and then use recursion to find the desired nth prime number.\n\nHere's a Scala implementation:\n\n```scala\nobject PrimeCalculator {\n\n  // Function to check if a number is prime\n  def isPrime(num: Int, divisor: Int = 2): Boolean = {\n    if (num <= 2) {\n      num == 2\n    } else if (num % divisor == 0) {\n      false\n    } else if (divisor * divisor > num) {\n      true\n    } else {\n      isPrime(num, divisor + 1)\n    }\n  }\n\n  // Recursive function to find the nth prime number\n  def findNthPrime(n: Int, count: Int = 0, current: Int = 2): Int = {\n    if (count == n) {\n      current - 1\n    } else if (isPrime(current)) {\n      findNthPrime(n, count + 1, current + 1)\n    } else {\n      findNthPrime(n, count, current + 1)\n    }\n  }\n\n  def main(args: Array[String]): Unit = {\n    val nthPrime = findNthPrime(10)\n    println(s\"The 10th prime number is: $nthPrime\")\n  }\n}\n```\n\n### Explanation\n- `isPrime`: A helper function to determine if a number is prime, using recursion.\n- `findNthPrime`: A recursive function that finds the nth prime number. It keeps track of how many primes have been found (`count`) and the current number being checked (`current`).\n- `main`: Demonstrates how to call `findNthPrime` with an input value of 10.\n\n### Example of Calling the Function\nIn the `main` method, the function `findNthPrime(10)` is called to calculate the 10th prime number. When you run this program, it will output:\n\n```\nThe 10th prime number is: 29\n```\n\nThis implementation efficiently calculates the nth prime number using recursion in Scala."
    }
]