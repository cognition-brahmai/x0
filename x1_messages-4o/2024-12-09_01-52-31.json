[
    {
        "role": "user",
        "content": "How can I use fixtures as arguments in `pytest.mark.parametrize` in PyTest? I have an issue with the fixture parameters because each parameter of the fixture gets executed every time it is used. I want to have control over which fixtures will be used depending on the test. For instance, I have the following code:\n\n```python\nimport pytest\nimport my_package\n\n@pytest.fixture\ndef dir1_fixture():\n    return '/dir1'\n\n@pytest.fixture\ndef dir2_fixture():\n    return '/dir2'\n\n@pytest.parametrize('dirname, expected', [(dir1_fixture, 'expected1'), (dir2_fixture, 'expected2')])\ndef test_directory_command(dirname, expected):\n    result = my_package.directory_command(dirname)\n    assert result == expected\n```\nHere, I would like to use `dir1_fixture` and `dir2_fixture` as parameters of `pytest.mark.parametrize`. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To use fixtures as parameters in `pytest.mark.parametrize`, you'll need to use a slightly different approach. You cannot directly pass fixture names to `pytest.mark.parametrize` because it expects values, not fixtures. However, PyTest provides a way to achieve this by using the `request` fixture to access other fixtures dynamically.\n\nHere\u2019s how you can modify your code to achieve the desired behavior:\n\n```python\nimport pytest\nimport my_package\n\n@pytest.fixture\ndef dir1_fixture():\n    return '/dir1'\n\n@pytest.fixture\ndef dir2_fixture():\n    return '/dir2'\n\n@pytest.mark.parametrize('fixture_name, expected', [\n    ('dir1_fixture', 'expected1'),\n    ('dir2_fixture', 'expected2')\n])\ndef test_directory_command(request, fixture_name, expected):\n    # Use the request fixture to access other fixtures dynamically\n    dirname = request.getfixturevalue(fixture_name)\n    \n    result = my_package.directory_command(dirname)\n    assert result == expected\n```\n\n### Explanation:\n\n1. **Fixture Names as Strings**: In `pytest.mark.parametrize`, pass the names of the fixtures as strings. This allows you to control which fixtures are used for each test case.\n\n2. **`request` Fixture**: Use the `request` fixture, which is a built-in PyTest fixture that provides information about the executing test function. It has a method `getfixturevalue` that you can use to get the value of a fixture by its name.\n\n3. **Dynamic Fixture Access**: Inside the test function, use `request.getfixturevalue(fixture_name)` to dynamically access the desired fixture. This gives you the flexibility to parameterize tests with different fixtures without executing all of them unnecessarily.\n\nThis setup allows you to control which fixtures are used for each set of parameters, making your tests more efficient and organized."
    }
]