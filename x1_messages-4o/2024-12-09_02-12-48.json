[
    {
        "role": "user",
        "content": "How can I change Django templates based on user-agent? I have a Django site and I am looking to create an iPhone version. I have two potential solutions: making an entirely separate site like i.xxxx.com and tying it into the same database using Django's sites framework; or using middleware that reads the user-agent and changes the template directories dynamically. I am inclined towards the second option but I am aware that the Django documentation discourages changing settings on the fly. Is there a way to make the process seamless and automatic to the user?"
    },
    {
        "role": "assistant",
        "content": "To create a seamless experience where your Django application serves different templates based on the user-agent, you can indeed use middleware to detect the user-agent and select templates accordingly. Here's a step-by-step guide on how you can achieve this:\n\n1. **Create Middleware for User-Agent Detection**:\n   Write middleware that inspects the request's user-agent to determine whether the user is on an iPhone or another device. You can then set a request attribute or modify the template context to choose the appropriate template.\n\n   ```python\n   # middleware.py\n   class MobileTemplateMiddleware:\n       def __init__(self, get_response):\n           self.get_response = get_response\n\n       def __call__(self, request):\n           user_agent = request.META.get('HTTP_USER_AGENT', '').lower()\n           if 'iphone' in user_agent:\n               request.is_mobile = True\n           else:\n               request.is_mobile = False\n           response = self.get_response(request)\n           return response\n   ```\n\n2. **Add Middleware to Settings**:\n   Add your middleware to the `MIDDLEWARE` setting in your `settings.py`.\n\n   ```python\n   MIDDLEWARE = [\n       # other middleware classes\n       'myapp.middleware.MobileTemplateMiddleware',\n   ]\n   ```\n\n3. **Modify Views to Choose the Template**:\n   In your views, check for the `is_mobile` attribute and choose templates accordingly.\n\n   ```python\n   from django.shortcuts import render\n\n   def my_view(request):\n       if getattr(request, 'is_mobile', False):\n           template_name = 'mobile_template.html'\n       else:\n           template_name = 'desktop_template.html'\n       return render(request, template_name, {})\n   ```\n\n4. **Organize Templates**:\n   Create separate directories or naming conventions for mobile and desktop templates. This way, you keep your templates organized and can easily manage them.\n\n5. **Consider Using a Context Processor**:\n   If you want the mobile/desktop decision to be available in all templates, consider creating a context processor that adds this information to every request context.\n\n   ```python\n   # context_processors.py\n   def user_agent(request):\n       return {'is_mobile': getattr(request, 'is_mobile', False)}\n   ```\n\n   Then add it to your `TEMPLATES` setting:\n\n   ```python\n   TEMPLATES = [\n       {\n           'BACKEND': 'django.template.backends.django.DjangoTemplates',\n           'DIRS': [],\n           'APP_DIRS': True,\n           'OPTIONS': {\n               'context_processors': [\n                   # other context processors\n                   'myapp.context_processors.user_agent',\n               ],\n           },\n       },\n   ]\n   ```\n\n6. **Test Thoroughly**:\n   Test your implementation on different devices to ensure that the correct templates are served and that the user experience is consistent and seamless across platforms.\n\nThis approach allows you to serve different templates based on the user-agent without altering global settings dynamically, aligning with best practices and maintaining the integrity of your application's configuration."
    }
]