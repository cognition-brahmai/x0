[
    {
        "role": "user",
        "content": "I'm trying to figure out how to check whether a variable in Python is a class or not. I'm not interested in whether it's an instance of a class, but whether it's a class itself. I've tried using the function `isinstance(object, class_or_type_or_tuple)`, but I'm unsure what type a class would have. For instance, in the following example:\n\n```\nclass Foo: pass  \nisinstance(Foo, **???**) # I want this to return True.\n```\n\nHere, I tried to replace \"**???**\" with \"class\", but I realized that 'class' is a keyword in Python. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To check whether a variable is a class in Python, you can use the built-in `type` called `type`. In Python, classes are instances of the `type` metaclass. Therefore, you can use the `isinstance()` function to check if the variable is an instance of `type`. Here's how you can do it:\n\n```python\nclass Foo: \n    pass\n\n# Check if Foo is a class\nis_class = isinstance(Foo, type)\n\nprint(is_class)  # This will output: True\n```\n\nThis code will correctly identify that `Foo` is a class. The `type` metaclass is the most common metaclass in Python, and it's what Python uses by default when defining new classes."
    }
]