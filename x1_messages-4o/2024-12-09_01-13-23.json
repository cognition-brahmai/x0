[
    {
        "role": "user",
        "content": "I am working with nested function scopes in Python and encountering an UnboundLocalError. Here is the code:\n\n```python\ndef outer():\n    ctr = 0\n\n    def inner():\n        ctr += 1\n\n    inner()\n```\n\nWhile running this code, I get the following error:\n\n```python\nTraceback (most recent call last):\n  File \"foo.py\", line 9, in &lt;module&gt;\n    outer()\n  File \"foo.py\", line 7, in outer\n    inner()\n  File \"foo.py\", line 5, in inner\n    ctr += 1\nUnboundLocalError: local variable 'ctr' referenced before assignment\n```\n\nI thought nested scopes in Python would allow me to use the 'ctr' variable inside the inner function. I have also tried using the 'global' keyword but it didn't work either. How can I fix this issue?"
    },
    {
        "role": "assistant",
        "content": "The issue you're encountering is due to Python's scoping rules. When you use the `+=` operator within the `inner()` function, Python treats `ctr` as a local variable within that function. Since you haven't assigned a value to `ctr` within `inner()`, Python raises an `UnboundLocalError`.\n\nTo modify a variable from an enclosing scope (but not the global scope) in a nested function, you can use the `nonlocal` keyword. This tells Python that you want to use the variable from the nearest enclosing scope, not create a new local variable. Here's how you can fix your code:\n\n```python\ndef outer():\n    ctr = 0\n\n    def inner():\n        nonlocal ctr  # Use nonlocal to modify the outer function's ctr\n        ctr += 1\n\n    inner()\n    return ctr\n\n# Call the outer function and print the result\nresult = outer()\nprint(result)  # This will print 1\n```\n\nBy adding `nonlocal ctr` inside the `inner()` function, you inform Python that `ctr` should refer to the variable defined in the `outer()` function, allowing you to modify it."
    }
]