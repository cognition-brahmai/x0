[
    {
        "role": "user",
        "content": "How can I handle exceptions with the Python 'requests' library? For example, how can I check if a PC is connected to the internet? When I try to use the following code:\n\n```python\ntry:\n    requests.get('http://www.google.com')\nexcept ConnectionError:\n    # handle the exception\n```\nI get an error saying `ConnectionError` is not defined. How can I resolve this?"
    },
    {
        "role": "assistant",
        "content": "To handle exceptions using the `requests` library, you need to import the specific exception classes that you want to catch. The `ConnectionError` you're referring to is part of the `requests.exceptions` module, so you need to import it from there.\n\nHere's how you can modify your code to handle the `ConnectionError` properly:\n\n```python\nimport requests\nfrom requests.exceptions import ConnectionError\n\ntry:\n    response = requests.get('http://www.google.com')\n    # If the request is successful, response.status_code will be 200\n    if response.status_code == 200:\n        print(\"Connected to the internet.\")\n    else:\n        print(f\"Received HTTP status code: {response.status_code}\")\nexcept ConnectionError:\n    print(\"No internet connection.\")\n```\n\nThis code attempts to make a GET request to `http://www.google.com`. If the request fails due to a connection error (such as no internet connection), it will catch the `ConnectionError` and print a message indicating that there is no internet connection.\n\nAdditionally, you might want to consider handling other exceptions like `Timeout` or `HTTPError` depending on your use case:\n\n```python\nfrom requests.exceptions import Timeout, HTTPError\n\ntry:\n    response = requests.get('http://www.google.com', timeout=5)  # setting a timeout of 5 seconds\n    response.raise_for_status()  # raises an HTTPError for bad responses\n    print(\"Connected to the internet.\")\nexcept ConnectionError:\n    print(\"No internet connection.\")\nexcept Timeout:\n    print(\"The request timed out.\")\nexcept HTTPError as http_err:\n    print(f\"HTTP error occurred: {http_err}\")\nexcept Exception as err:\n    print(f\"An error occurred: {err}\")\n```\n\nBy including a `timeout`, you can prevent the request from hanging indefinitely if there's a network issue. The `raise_for_status()` method is useful for checking if the HTTP request returned an unsuccessful status code."
    }
]