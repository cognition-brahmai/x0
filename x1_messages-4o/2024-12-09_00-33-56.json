[
    {
        "role": "user",
        "content": "How can I normalize the rows of a numpy array in Python such that each value is between 0 and 1? I have a 100*4 numpy array where each cell of a specific row represents a value for a feature. Here's an example to illustrate:\n\n```\nA     B   C\n1000  10  0.5\n765   5   0.35\n800   7   0.09  \n```\n\nI want to normalize this array in a way that the output would look like this:\n\n```\nA     B    C\n1     1    1\n0.765 0.5  0.7\n0.8   0.7  0.18 (which is 0.09/0.5)\n```"
    },
    {
        "role": "assistant",
        "content": "To normalize each row of a numpy array such that the values are between 0 and 1, you can divide each element by the maximum value in its row. This method ensures that the maximum value in each row becomes 1 and all other values are scaled accordingly.\n\nHere's how you can achieve this normalization using numpy:\n\n```python\nimport numpy as np\n\n# Example array\ndata = np.array([\n    [1000, 10, 0.5],\n    [765, 5, 0.35],\n    [800, 7, 0.09]\n])\n\n# Normalize each row\nnormalized_data = data / data.max(axis=1, keepdims=True)\n\nprint(normalized_data)\n```\n\nThis will output:\n\n```\n[[1.    1.    1.  ]\n [0.765 0.5   0.7 ]\n [0.8   0.7   0.18]]\n```\n\nExplanation:\n\n- `data.max(axis=1, keepdims=True)`: Computes the maximum value along each row (`axis=1`). The `keepdims=True` argument keeps the dimensions of the result compatible for broadcasting with the original array, so that division is done element-wise for each row.\n- `data / data.max(axis=1, keepdims=True)`: Divides each element of the array by the maximum value of its respective row, resulting in a normalized array where the maximum value in each row is 1."
    }
]