[
    {
        "role": "user",
        "content": "What is the most efficient method to obtain an HTTP response code from a URL? I am not certain about the library I should utilize for this purpose."
    },
    {
        "role": "assistant",
        "content": "To obtain an HTTP response code from a URL efficiently, you can use various libraries depending on the programming language you are working with. Here are some examples in popular languages:\n\n### Python\nIn Python, you can use the `requests` library, which is simple and efficient for handling HTTP requests.\n\n```python\nimport requests\n\ndef get_http_status_code(url):\n    try:\n        response = requests.head(url)\n        return response.status_code\n    except requests.RequestException as e:\n        print(f\"An error occurred: {e}\")\n        return None\n\nurl = \"http://example.com\"\nstatus_code = get_http_status_code(url)\nprint(f\"HTTP Status Code: {status_code}\")\n```\n\n### JavaScript (Node.js)\nIn Node.js, you can use the `axios` library or the built-in `http` or `https` modules.\n\nUsing `axios`:\n\n```javascript\nconst axios = require('axios');\n\nasync function getHttpStatusCode(url) {\n  try {\n    const response = await axios.head(url);\n    return response.status;\n  } catch (error) {\n    console.error(`An error occurred: ${error.message}`);\n    return null;\n  }\n}\n\nconst url = 'http://example.com';\ngetHttpStatusCode(url).then(statusCode => {\n  console.log(`HTTP Status Code: ${statusCode}`);\n});\n```\n\n### Java\nIn Java, you can use the `HttpURLConnection` class.\n\n```java\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.URL;\n\npublic class HttpStatusCodeFetcher {\n    public static int getHttpStatusCode(String urlString) {\n        try {\n            URL url = new URL(urlString);\n            HttpURLConnection connection = (HttpURLConnection) url.openConnection();\n            connection.setRequestMethod(\"HEAD\");\n            connection.connect();\n            return connection.getResponseCode();\n        } catch (IOException e) {\n            System.err.println(\"An error occurred: \" + e.getMessage());\n            return -1;\n        }\n    }\n\n    public static void main(String[] args) {\n        String url = \"http://example.com\";\n        int statusCode = getHttpStatusCode(url);\n        System.out.println(\"HTTP Status Code: \" + statusCode);\n    }\n}\n```\n\n### Bash\nIn Bash, you can use `curl` to fetch the HTTP status code.\n\n```bash\nurl=\"http://example.com\"\nstatus_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \"$url\")\necho \"HTTP Status Code: $status_code\"\n```\n\nThese methods allow you to efficiently obtain the HTTP response code from a URL in different programming environments. Choose the one that fits your context."
    }
]