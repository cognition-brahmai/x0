[
    {
        "role": "user",
        "content": "In Python, I have a function that needs to accept either the address of another node in the network as a raw string address or a class Node which encapsulates the other node's information. I'm currently using the type() function to check the type of the arguments like so:\n\n```python\n    if type(n) == type(Node):\n        # do something\n    elif type(n) == type(str):\n        # do something else\n```\n\nIs this a good way to perform type checking of arguments in Python? I need to know if this is the correct way or if there are better practices or methods to do this. Also, I heard that Python 3 has annotation for function parameters, can this be used for type checks?"
    },
    {
        "role": "assistant",
        "content": "Using `type()` for type checking in Python is generally not considered the best practice, especially for distinguishing between different types when accepting function arguments. Instead, Python provides a more flexible and robust way to check types using `isinstance()`. This approach is preferred because it supports inheritance, meaning it will recognize subclasses as instances of the parent class, which `type()` will not.\n\nHere's how you could modify your function using `isinstance()`:\n\n```python\ndef process_node(n):\n    if isinstance(n, Node):\n        # do something for Node\n    elif isinstance(n, str):\n        # do something for raw string address\n```\n\nThis method is more Pythonic and aligns with the dynamic and flexible nature of the language.\n\nRegarding type annotations, Python 3 introduces type hints, which can be used to indicate the expected types of function parameters and return values. However, these are not used for runtime type checking; they serve as documentation and can be checked by external tools like `mypy`. Here's an example of how you can annotate your function:\n\n```python\nfrom typing import Union\n\ndef process_node(n: Union[Node, str]) -> None:\n    if isinstance(n, Node):\n        # do something for Node\n    elif isinstance(n, str):\n        # do something for raw string address\n```\n\nIn this example, the `Union` type hint indicates that the function accepts either a `Node` instance or a `str`. While Python itself won't enforce these types, using type annotations can improve code readability and help with static analysis tools."
    }
]