[
    {
        "role": "user",
        "content": "Can you provide a program that checks the balance of brackets in a given string?"
    },
    {
        "role": "assistant",
        "content": "Certainly! Checking the balance of brackets in a string is a common problem that can be solved using a stack data structure. Here's a Python program to achieve this:\n\n```python\ndef are_brackets_balanced(input_string):\n    # Stack to keep track of opening brackets\n    stack = []\n\n    # Dictionary to map closing brackets to their corresponding opening brackets\n    bracket_map = {')': '(', '}': '{', ']': '['}\n\n    # Iterate over each character in the input string\n    for char in input_string:\n        # If the character is an opening bracket, push it onto the stack\n        if char in bracket_map.values():\n            stack.append(char)\n        # If the character is a closing bracket\n        elif char in bracket_map.keys():\n            # Check if the stack is not empty and the top element is the matching opening bracket\n            if stack and stack[-1] == bracket_map[char]:\n                stack.pop()  # Pop the opening bracket from the stack\n            else:\n                return False  # Unmatched closing bracket found\n\n    # If the stack is empty, all brackets were matched; otherwise, there are unmatched opening brackets\n    return len(stack) == 0\n\n# Example usage\ninput_string = \"{[()]}()\"\nif are_brackets_balanced(input_string):\n    print(\"The brackets are balanced.\")\nelse:\n    print(\"The brackets are not balanced.\")\n```\n\nThis program defines a function `are_brackets_balanced` that takes an input string and checks for balanced brackets. It uses a stack to keep track of opening brackets and ensures that each closing bracket matches the most recent opening bracket. If the stack is empty at the end, all brackets are balanced."
    }
]