[
    {
        "role": "user",
        "content": "How can I sort a multidimensional array based on the 2nd element of each subarray in descending order in Python? For instance, if I have an array like:\n\n```python\n[['G', 10], ['A', 22], ['S', 1], ['P', 14], ['V', 13], ['T', 7], ['C', 0], ['I', 219]]\n```\n\nI would like to sort it to get:\n\n```python\n[['I', 219], ['A', 22], ['P', 14], ... ]\n```"
    },
    {
        "role": "assistant",
        "content": "To sort a multidimensional array (list of lists) based on the second element of each subarray in descending order in Python, you can use the `sorted()` function with a custom sorting key. Here's how you can achieve that:\n\n```python\n# Your initial array\narray = [['G', 10], ['A', 22], ['S', 1], ['P', 14], ['V', 13], ['T', 7], ['C', 0], ['I', 219]]\n\n# Sorting the array based on the second element of each subarray in descending order\nsorted_array = sorted(array, key=lambda x: x[1], reverse=True)\n\n# Printing the sorted array\nprint(sorted_array)\n```\n\nExplanation:\n- `sorted()` is a built-in function that returns a new sorted list from the elements of any iterable.\n- `key=lambda x: x[1]` specifies that the sorting should be based on the second element of each subarray (`x[1]` refers to the second element).\n- `reverse=True` sorts the array in descending order.\n\nThe result will be:\n\n```python\n[['I', 219], ['A', 22], ['P', 14], ['V', 13], ['G', 10], ['T', 7], ['S', 1], ['C', 0]]\n```"
    }
]