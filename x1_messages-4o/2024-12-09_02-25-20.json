[
    {
        "role": "user",
        "content": "Is there an equivalent built-in function in Python that performs the same function as `argsort()` does on a `numpy.array` for a standard Python array?"
    },
    {
        "role": "assistant",
        "content": "In standard Python, there isn't a direct equivalent to NumPy's `argsort()` function for lists, which returns the indices that would sort an array. However, you can achieve similar functionality using Python's built-in functions with a combination of `sorted()` and `enumerate()`.\n\nHere's how you can replicate `argsort()` for a standard Python list:\n\n```python\ndef argsort(seq):\n    return sorted(range(len(seq)), key=seq.__getitem__)\n\n# Example usage:\nmy_list = [3, 1, 2, 4]\nsorted_indices = argsort(my_list)\nprint(sorted_indices)  # Output: [1, 2, 0, 3]\n```\n\nIn this code, `range(len(seq))` generates a list of indices, `key=seq.__getitem__` sorts these indices based on the values in the original list, and `sorted()` returns the sorted list of indices. This mimics the behavior of NumPy's `argsort()` for a standard Python list."
    }
]