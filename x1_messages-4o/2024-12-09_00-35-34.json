[
    {
        "role": "user",
        "content": "How can I supply NumPy site.cfg arguments to pip? I am currently using NumPy built against Intel's Math Kernel Library, and I use virtualenv with pip to install packages. However, I am required to create a site.cfg file in the NumPy source directory before compiling it, so that NumPy can find the MKL libraries. Is there any simpler way to do this? Can I use any pip command line options to instruct it to copy a particular file to the source directory before building a package? Alternatively, can I use any environment variables instead of providing the library paths in a site.cfg file? Here is the site.cfg file I am using, taken almost verbatim from Intel's site:\n\n```\n[mkl]\nlibrary_dirs = /opt/intel/composer_xe_2013.1.117/mkl/lib/intel64\ninclude_dirs = /opt/intel/composer_xe_2013.1.117/mkl/include\nmkl_libs = mkl_rt\nlapack_libs =\n```\nFor your information, I am using Ubuntu, Python 2.7, and NumPy 1.6."
    },
    {
        "role": "assistant",
        "content": "To configure NumPy to use Intel's Math Kernel Library (MKL) during installation with pip, you have a few options that can simplify the process. Here are some approaches you can consider:\n\n1. **Use Environment Variables**: You can set environment variables to specify the library and include directories instead of using a `site.cfg` file. The environment variables you might need to set are `MKLROOT`, `LD_LIBRARY_PATH`, and `CPATH`.\n\n   ```sh\n   export MKLROOT=/opt/intel/composer_xe_2013.1.117/mkl\n   export LD_LIBRARY_PATH=$MKLROOT/lib/intel64:$LD_LIBRARY_PATH\n   export CPATH=$MKLROOT/include:$CPATH\n   ```\n\n   You can add these lines to your `.bashrc` or `.bash_profile` to make them persistent.\n\n2. **Custom Build with pip**: While pip itself doesn't provide direct options to copy files before building, you can use a custom build command. You might create a custom script that sets up your environment and uses pip to install NumPy:\n\n   ```sh\n   #!/bin/bash\n   export MKLROOT=/opt/intel/composer_xe_2013.1.117/mkl\n   export LD_LIBRARY_PATH=$MKLROOT/lib/intel64:$LD_LIBRARY_PATH\n   export CPATH=$MKLROOT/include:$CPATH\n\n   pip install numpy --no-binary :all: --global-option=build_ext\n   ```\n\n   Save this script and run it instead of directly using pip.\n\n3. **Using a `requirements.txt`**: If you are deploying this across multiple environments, consider using a `requirements.txt` file and adding any necessary pre-install scripts or instructions for setting environment variables.\n\n4. **Consider Conda**: If you're open to alternatives, consider using Conda, which simplifies managing dependencies like MKL. Conda can automatically handle MKL without needing manual configuration.\n\n5. **Virtualenv Hooks**: You can also create a `postactivate` script in your virtualenv's `bin/` directory that automatically sets these environment variables whenever you activate the virtualenv:\n\n   ```sh\n   # myenv/bin/postactivate\n   export MKLROOT=/opt/intel/composer_xe_2013.1.117/mkl\n   export LD_LIBRARY_PATH=$MKLROOT/lib/intel64:$LD_LIBRARY_PATH\n   export CPATH=$MKLROOT/include:$CPATH\n   ```\n\nBy using environment variables or customizing the build process, you can streamline the installation of NumPy with MKL without manually copying a `site.cfg` file each time."
    }
]