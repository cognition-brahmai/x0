[
    {
        "role": "user",
        "content": "How can I find the index of the n'th occurrence of an item in a list in Python? For example, if I have a list like `x=[False,True,True,False,True,False,True,False,False,False,True,False,True]`, how can I find the index of the fifth occurrence (4th if zero-indexed) of `True`? The answer should be `10`. I have tried using list comprehension and `enumerate`, but I am not sure if this is the most efficient way. Is there a solution that does not use numpy, as I am trying to implement the Sieve of Eratosthenes for a Project Euler problem and am concerned about performance?"
    },
    {
        "role": "assistant",
        "content": "To find the index of the nth occurrence of an item in a list in Python, you can iterate through the list while keeping a counter for the occurrences of the desired item. Once the counter reaches the desired nth occurrence, you can return the current index. Here\u2019s a simple way to achieve this without using any external libraries like `numpy`:\n\n```python\ndef find_nth_occurrence(lst, item, n):\n    occurrence_count = 0\n    for index, value in enumerate(lst):\n        if value == item:\n            occurrence_count += 1\n            if occurrence_count == n:\n                return index\n    return -1  # Return -1 if the nth occurrence is not found\n\n# Example usage\nx = [False, True, True, False, True, False, True, False, False, False, True, False, True]\nnth_occurrence_index = find_nth_occurrence(x, True, 5)\nprint(nth_occurrence_index)  # Output: 10\n```\n\nThis function `find_nth_occurrence` iterates through the list just once, keeping track of how many times the specified item has been found. When it reaches the nth occurrence, it returns the current index. If the nth occurrence is not found, it returns `-1`.\n\nThis approach should be efficient for your requirement, especially since it avoids using additional libraries and only performs a single pass through the list."
    }
]