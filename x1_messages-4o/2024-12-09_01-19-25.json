[
    {
        "role": "user",
        "content": "How can I merge multiple dictionaries with an unknown level of depth in Python? For example, if I have dictionaries like this:\n\n```python\ndict1 = {1:{\"a\":{A}}, 2:{\"b\":{B}}}\ndict2 = {2:{\"c\":{C}}, 3:{\"d\":{D}}}\n```\n\nWhere A, B, C and D are leaves of the tree, like {\"info1\":\"value\", \"info2\":\"value2\"}, and the depth is unknown, it could be {2:{\"c\":{\"z\":{\"y\":{C}}}}}. These dictionaries represent a directory/files structure with nodes being docs and leaves being files. \n\nI want to merge them to obtain a dictionary like this:\n\n```python\ndict3 = {1:{\"a\":{A}}, 2:{\"b\":{B},\"c\":{C}}, 3:{\"d\":{D}}}\n```\n\nHow can I achieve this in Python?"
    },
    {
        "role": "assistant",
        "content": "To merge multiple dictionaries with an unknown level of depth, you can create a recursive function that traverses the dictionaries and merges them correctly. This function will handle both the merging of dictionaries at each level and the merging of leaves.\n\nHere's a Python function to achieve this:\n\n```python\ndef merge_dicts(dict1, dict2):\n    \"\"\"Recursively merges dict2 into dict1.\"\"\"\n    for key in dict2:\n        if key in dict1:\n            # If the key is present in both dictionaries, we need to merge them\n            if isinstance(dict1[key], dict) and isinstance(dict2[key], dict):\n                merge_dicts(dict1[key], dict2[key])\n            else:\n                # If the key is a leaf, update dict1's value with dict2's value\n                dict1[key] = dict2[key]\n        else:\n            # If the key is not present in dict1, simply add it\n            dict1[key] = dict2[key]\n    return dict1\n\n# Example usage\ndict1 = {1: {\"a\": {\"info1\": \"A\", \"info2\": \"A2\"}}, 2: {\"b\": {\"info1\": \"B\"}}}\ndict2 = {2: {\"c\": {\"info1\": \"C\"}}, 3: {\"d\": {\"info1\": \"D\"}}}\n\nmerged_dict = merge_dicts(dict1.copy(), dict2)\nprint(merged_dict)\n```\n\nThis code defines a function `merge_dicts` that takes two dictionaries and merges `dict2` into `dict1`. It uses recursion to handle nested dictionaries of any depth. If a key exists in both dictionaries and the associated values are dictionaries themselves, it calls itself recursively to merge those dictionaries. Otherwise, it overwrites the value from `dict1` with the value from `dict2`.\n\nThe `merge_dicts` function returns the merged dictionary. Note that the `copy()` method is used on `dict1` when calling `merge_dicts` to prevent modifying `dict1` in place if you want to keep the original dictionaries unchanged."
    }
]