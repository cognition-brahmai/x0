[
    {
        "role": "user",
        "content": "In Python, is it possible to create an object from a dictionary such that each key becomes an attribute of the object? For example, if I have a dictionary as follows:\n\n```python\nd = { 'name': 'Oscar', 'lastName': 'Reyes', 'age':32 }\n```\n\nI want to use this dictionary to create an Employee object so I can access the attributes like this:\n\n```python\ne = Employee(d)\nprint e.name  # Oscar\nprint e.age + 10  # 42\n```\n\nThis seems to be the inverse of converting object fields into a Python dictionary. How can this be achieved?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this by defining an `Employee` class that takes a dictionary as an argument and sets each key-value pair as an attribute of the object. Here's how you can do it:\n\n```python\nclass Employee:\n    def __init__(self, attributes):\n        for key, value in attributes.items():\n            setattr(self, key, value)\n\n# Example usage:\nd = { 'name': 'Oscar', 'lastName': 'Reyes', 'age': 32 }\ne = Employee(d)\n\nprint(e.name)  # Outputs: Oscar\nprint(e.age + 10)  # Outputs: 42\n```\n\n### Explanation:\n- The `__init__` method of the `Employee` class takes a dictionary `attributes` as its parameter.\n- It iterates over each key-value pair in the dictionary.\n- The `setattr` function is used to set each key as an attribute of the instance with the corresponding value.\n\nThis approach will dynamically create attributes for each key in the dictionary, allowing you to access them as if they were regular attributes of the object."
    }
]