[
    {
        "role": "user",
        "content": "I have a Python application with a fixed layout that I want to wrap up using setuptools by writing a setup.py script. The application uses a lot of additional data files that are not part of any package. For example, my source tree includes a file named 'something.py' which reads two files - 'moredata.txt' and 'INFO.txt'. I'm able to add 'moredata.txt' to the setuptools by making 'additionalstuff' a package, but I'm unable to add 'INFO.txt' to my .egg. Can you suggest a way to add 'INFO.txt' and 'moredata.txt', which are a part of a separate folder and not of any individual package, to the setuptools?"
    },
    {
        "role": "assistant",
        "content": "To include additional data files like `INFO.txt` and `moredata.txt` in your Python package using `setuptools`, you'll need to use the `package_data` or `data_files` argument in your `setup.py` file. Here's a step-by-step guide on how you can achieve this:\n\n1. **Using `package_data`:** This is useful if the data files are located inside a package directory.\n\n   First, ensure your directory structure looks something like this:\n\n   ```\n   your_package/\n       __init__.py\n       something.py\n       data/\n           moredata.txt\n           INFO.txt\n   ```\n\n   Then, in your `setup.py`, you can specify the `package_data` like this:\n\n   ```python\n   from setuptools import setup, find_packages\n\n   setup(\n       name='your_package',\n       version='1.0',\n       packages=find_packages(),\n       package_data={\n           # If any package contains *.txt files, include them:\n           '': ['data/*.txt'],\n       },\n       include_package_data=True,\n   )\n   ```\n\n   This will include all `.txt` files located in the `data` directory of your package.\n\n2. **Using `data_files`:** This is useful if the data files are not within a package directory but you want to include them in your distribution.\n\n   Suppose `INFO.txt` is in a separate folder called `resources`:\n\n   ```\n   resources/\n       INFO.txt\n   ```\n\n   You can modify your `setup.py` to use the `data_files` argument:\n\n   ```python\n   from setuptools import setup, find_packages\n\n   setup(\n       name='your_package',\n       version='1.0',\n       packages=find_packages(),\n       data_files=[\n           ('resources', ['resources/INFO.txt']),\n           ('data', ['data/moredata.txt']),\n       ],\n   )\n   ```\n\n   This setup will include `INFO.txt` and `moredata.txt` in the specified directories in your installation.\n\n3. **Using MANIFEST.in:** To ensure that the files are included in the source distribution, you can use a `MANIFEST.in` file. This is particularly useful if you are creating source distributions with `sdist`.\n\n   Create a `MANIFEST.in` file in the same directory as your `setup.py`:\n\n   ```plaintext\n   include resources/INFO.txt\n   include data/moredata.txt\n   ```\n\n   This tells `setuptools` to include these files in the source distribution.\n\nBy combining these methods, you can ensure that all necessary data files are included in your package distribution. Adjust the directory paths according to your project's actual layout."
    }
]