[
    {
        "role": "user",
        "content": "I'm using Flask-WTF and have encountered an issue where the `validate_on_submit()` function is never executed. I have a form and a controller as shown below. However, when I look at my print statements, it always prints \"submitted\", but it never prints \"valid\" and `validate_on_submit()` is never executed. Can someone explain why this is happening and how to solve it?\n\nForm:\n```python\nfrom flask.ext.wtf import Form, TextField\n\nclass BookNewForm(Form):\n    name = TextField('Name')\n```\n\nController:\n```python\n@book.route('/book/new', methods=['GET', 'POST'])\ndef customers_new():\n    form = BookNewForm()\n    if form.is_submitted():\n        print \"submitted\"\n    if form.validate():\n        print \"valid\"\n    if form.validate_on_submit():\n        flash(\"Successfully created a new book\")\n        return redirect(url_for('.books_show'))\n    return render_template('views/books_new.html', form=form)\n```"
    },
    {
        "role": "assistant",
        "content": "The issue you're experiencing with `validate_on_submit()` not being executed can be attributed to a few potential problems. Let's walk through the code and identify possible reasons and solutions:\n\n1. **Form Import and Definition**: Ensure you're using the correct import statement for `Form` and `TextField`. Starting with Flask-WTF 0.13, it's recommended to import from `flask_wtf` instead of `flask.ext.wtf`.\n\n    ```python\n    from flask_wtf import FlaskForm\n    from wtforms import StringField\n    \n    class BookNewForm(FlaskForm):\n        name = StringField('Name')\n    ```\n\n2. **Form Validation Logic**: The `validate_on_submit()` method is a shortcut for checking both `form.is_submitted()` and `form.validate()`. Here's a breakdown:\n\n    - `form.is_submitted()`: Checks if the form was submitted, i.e., a POST request was made with the form data.\n    - `form.validate()`: Validates the form data according to the defined validators.\n    - `form.validate_on_submit()`: Returns `True` if both submission and validation are successful, useful for concise checking in POST requests.\n\n3. **Form Method and CSRF Token**: Ensure that your HTML form is correctly set up to use the POST method and includes a CSRF token if CSRF protection is enabled (which is the default in Flask-WTF).\n\n    ```html\n    <form method=\"post\" action=\"{{ url_for('customers_new') }}\">\n        {{ form.hidden_tag() }}\n        {{ form.name.label }} {{ form.name() }} \n        <input type=\"submit\" value=\"Submit\">\n    </form>\n    ```\n\n4. **Handling POST Requests**: Verify that the client is actually sending a POST request to your endpoint. You can use browser developer tools or a tool like Postman to inspect the requests being sent.\n\n5. **Debugging Output**: Add additional debugging output to ensure the form is being submitted correctly and the server is receiving the expected data:\n\n    ```python\n    @book.route('/book/new', methods=['GET', 'POST'])\n    def customers_new():\n        form = BookNewForm()\n        print(\"Request method:\", request.method)\n        print(\"Form data:\", request.form)\n        \n        if form.is_submitted():\n            print(\"submitted\")\n        if form.validate_on_submit():\n            print(\"valid\")\n            flash(\"Successfully created a new book\")\n            return redirect(url_for('.books_show'))\n        return render_template('views/books_new.html', form=form)\n    ```\n\nBy ensuring the form is correctly submitted with the required CSRF token and checking the form's methods and data, you should be able to resolve the issue of `validate_on_submit()` not being executed. If problems persist, consider checking server logs, ensuring the form submission is properly reaching the endpoint, and verifying that any additional form validators are correctly set up and not inadvertently causing validation to fail."
    }
]