[
    {
        "role": "user",
        "content": "How can I use the horizontal_filter with an inline ManyToMany field in the Django admin interface? I have a Django model field that I want to implement as an inline. This field defines a many-to-many relationship between \"Projects\" and \"User profiles\", meaning that each user profile can select any number of projects. I have managed to get the \"tabular\" inline view working, but I want to add a \"horizontal filter\" to make it easier to add or remove projects from a user profile. Below is the model code for the User Profile:\n\n```python\nclass UserProfile(models.Model):\n    user = models.OneToOneField(User, unique=True)\n    projects = models.ManyToManyField(Project, blank=True, help_text=\"Select the projects that this user is currently working on.\")\n```\nThe model code for a Project:\n\n```python\nclass Project(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    application_identifier = models.CharField(max_length=100)\n    type = models.IntegerField(choices=ProjectType)\n    account = models.ForeignKey(Account)\n    principle_investigator = models.ForeignKey(User)\n    active = models.BooleanField()\n```\nAnd the admin code for the view:\n\n```python\nclass UserProfileInline(admin.TabularInline):\n    model = UserProfile.projects.through\n    extra = 0\n    verbose_name = 'user'\n    verbose_name_plural = 'users'\n\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ('name', 'application_identifier', 'type', 'account', 'active')\n    search_fields = ('name', 'application_identifier', 'account__name')\n    list_filter = ('type', 'active')\n    inlines = [UserProfileInline,]\nadmin.site.register(Project, ProjectAdmin)\n```"
    },
    {
        "role": "assistant",
        "content": "To add a \"horizontal filter\" for managing a ManyToMany relationship in the Django admin interface, you should use the `filter_horizontal` attribute in your `ModelAdmin` class. This attribute allows you to use a filter interface that makes it easier to add or remove related objects.\n\nIn your case, you want to manage the `projects` field of the `UserProfile` model. To do this, you should define a separate `UserProfileAdmin` class and specify the `filter_horizontal` attribute for the `projects` field. Here's how you can achieve this:\n\nFirst, update your `UserProfileAdmin` to use `filter_horizontal`:\n\n```python\nfrom django.contrib import admin\nfrom .models import UserProfile, Project\n\nclass UserProfileAdmin(admin.ModelAdmin):\n    # Use filter_horizontal for the projects field\n    filter_horizontal = ('projects',)\n\n# Register the UserProfile model with the UserProfileAdmin\nadmin.site.register(UserProfile, UserProfileAdmin)\n```\n\nHere's the complete code including your `ProjectAdmin`:\n\n```python\nfrom django.contrib import admin\nfrom .models import UserProfile, Project\n\nclass UserProfileAdmin(admin.ModelAdmin):\n    filter_horizontal = ('projects',)\n\nclass UserProfileInline(admin.TabularInline):\n    model = UserProfile.projects.through\n    extra = 0\n    verbose_name = 'user'\n    verbose_name_plural = 'users'\n\nclass ProjectAdmin(admin.ModelAdmin):\n    list_display = ('name', 'application_identifier', 'type', 'account', 'active')\n    search_fields = ('name', 'application_identifier', 'account__name')\n    list_filter = ('type', 'active')\n    inlines = [UserProfileInline,]\n\nadmin.site.register(UserProfile, UserProfileAdmin)\nadmin.site.register(Project, ProjectAdmin)\n```\n\nBy doing this, the `UserProfile` admin interface will display a horizontal filter widget for the `projects` field, making it easier to manage project selections for each user profile. This horizontal filter will now appear when you edit a `UserProfile` object in the admin interface."
    }
]