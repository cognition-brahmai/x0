[
    {
        "role": "user",
        "content": "I am working on debugging a microcontroller I've built that writes raw HTTP requests line by line. I am utilizing Flask for my backend and I am interested in viewing the entire HTTP request in the following format:\n\n```\nGET / HTTP/1.1\nContent-length: 123\nUser-agent: blah\n...\n```\nSince Flask is based on WSGI, is there a way for me to achieve this?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can view the entire raw HTTP request in Flask by using a custom WSGI middleware. This middleware can intercept the request at a low level and print or log the raw HTTP request data. Here's a simple example of how you can achieve this:\n\n1. **Create a custom WSGI middleware** to capture the raw HTTP request:\n\n```python\nclass RawRequestLogger(object):\n    def __init__(self, app):\n        self.app = app\n\n    def __call__(self, environ, start_response):\n        # Retrieve the HTTP request method (GET, POST, etc.)\n        method = environ['REQUEST_METHOD']\n\n        # Retrieve the requested URL\n        path_info = environ['PATH_INFO']\n        query_string = environ['QUERY_STRING']\n        url = f\"{path_info}?{query_string}\" if query_string else path_info\n\n        # Retrieve HTTP version\n        http_version = environ['SERVER_PROTOCOL']\n\n        # Print the start line of the HTTP request\n        print(f\"{method} {url} {http_version}\")\n\n        # Print the headers\n        for key, value in environ.items():\n            if key.startswith('HTTP_'):\n                header_name = key[5:].replace('_', '-').title()\n                print(f\"{header_name}: {value}\")\n\n        # Print the body if it's a POST or PUT request\n        if method in ['POST', 'PUT']:\n            try:\n                request_body_size = int(environ.get('CONTENT_LENGTH', 0))\n            except (ValueError):\n                request_body_size = 0\n\n            request_body = environ['wsgi.input'].read(request_body_size)\n            print(f\"Body: {request_body.decode('utf-8')}\")\n            environ['wsgi.input'] = io.BytesIO(request_body)  # Reset input stream\n\n        return self.app(environ, start_response)\n```\n\n2. **Wrap your Flask app with the custom middleware**:\n\n```python\nfrom flask import Flask\n\napp = Flask(__name__)\napp.wsgi_app = RawRequestLogger(app.wsgi_app)\n\n@app.route('/')\ndef index():\n    return 'Hello, World!'\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\n\nThis code sets up a WSGI middleware that intercepts requests to your Flask app. It prints the HTTP method, URL, and headers as well as the body for POST and PUT requests. Note that for the request body, the `wsgi.input` stream needs to be reset after reading, as the application will need to read it later.\n\nMake sure to test this in a development environment, as logging raw HTTP requests can expose sensitive information in a production setting."
    }
]