[
    {
        "role": "user",
        "content": "How can I get the file name and path of the currently executing script in Python? For example, I have three scripts where `script_1.py` calls `script_2.py` and `script_2.py` in turn calls `script_3.py`. I want to get the file name and path of `script_3.py`, from the code within `script_3.py`, without having to pass that information as arguments from `script_2.py`. Currently, when I execute `os.getcwd()`, it returns the original starting script's filepath not the current file's. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To get the file name and path of the currently executing script from within that script itself, you can use Python's `__file__` attribute, which contains the path to the script file being executed. Here's how you can do it:\n\n```python\nimport os\n\n# Get the absolute path of the current script\ncurrent_script_path = os.path.abspath(__file__)\n\n# Get the directory of the current script\ncurrent_script_dir = os.path.dirname(current_script_path)\n\n# Get the base name (file name) of the current script\ncurrent_script_name = os.path.basename(current_script_path)\n\nprint(\"Current script path:\", current_script_path)\nprint(\"Current script directory:\", current_script_dir)\nprint(\"Current script name:\", current_script_name)\n```\n\nIn this code:\n- `__file__` gives you the relative path of the script.\n- `os.path.abspath(__file__)` converts it to an absolute path.\n- `os.path.dirname()` extracts the directory part of the path.\n- `os.path.basename()` extracts the file name from the path.\n\nWhen you run `script_3.py`, this code will output the full path and the name of `script_3.py` itself, regardless of how it was invoked by other scripts."
    }
]