[
    {
        "role": "user",
        "content": "What is the C++ code to implement a class for a linked list data structure? Please provide an example of how to insert a node into the list and how to delete a node from the list using this class.\n[C++ code]\nclass LinkedList {\nprivate:\n    struct Node {\n        int data;\n        Node* next;\n    };\n    Node* head;\npublic:\n    LinkedList() {\n        head = nullptr;\n    }\n    void insert(int value) {\n        Node* newNode = new Node;\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n    void remove(int value) {\n        Node* currNode = head;\n        Node* prevNode = nullptr;\n        while (currNode != nullptr) {\n            if (currNode->data == value) {\n                if (prevNode == nullptr) {\n                    head = currNode->next;\n                } else {\n                    prevNode->next = currNode->next;\n                }\n                delete currNode;\n                return;\n            }\n            prevNode = currNode;\n            currNode = currNode->next;\n        }\n    }\n};"
    },
    {
        "role": "assistant",
        "content": "Here's a basic implementation of a singly linked list in C++ using classes. This example includes methods for inserting a node at the beginning of the list and removing a node by value:\n\n```cpp\n#include <iostream>\n\nclass LinkedList {\nprivate:\n    struct Node {\n        int data;\n        Node* next;\n    };\n    Node* head;\n    \npublic:\n    LinkedList() : head(nullptr) {}\n\n    // Insert a node at the beginning of the list\n    void insert(int value) {\n        Node* newNode = new Node;\n        newNode->data = value;\n        newNode->next = head;\n        head = newNode;\n    }\n\n    // Remove a node by value\n    void remove(int value) {\n        Node* currNode = head;\n        Node* prevNode = nullptr;\n\n        while (currNode != nullptr) {\n            if (currNode->data == value) {\n                if (prevNode == nullptr) {\n                    // Node to be deleted is the head node\n                    head = currNode->next;\n                } else {\n                    // Bypass the node to be deleted\n                    prevNode->next = currNode->next;\n                }\n                delete currNode;\n                return;\n            }\n            prevNode = currNode;\n            currNode = currNode->next;\n        }\n    }\n\n    // Display the list\n    void display() const {\n        Node* current = head;\n        while (current != nullptr) {\n            std::cout << current->data << \" -> \";\n            current = current->next;\n        }\n        std::cout << \"nullptr\" << std::endl;\n    }\n\n    // Destructor to clean up memory\n    ~LinkedList() {\n        Node* current = head;\n        while (current != nullptr) {\n            Node* next = current->next;\n            delete current;\n            current = next;\n        }\n    }\n};\n\nint main() {\n    LinkedList list;\n\n    // Insert nodes into the list\n    list.insert(10);\n    list.insert(20);\n    list.insert(30);\n\n    std::cout << \"List after inserting nodes: \";\n    list.display();\n\n    // Remove a node from the list\n    list.remove(20);\n\n    std::cout << \"List after removing a node: \";\n    list.display();\n\n    return 0;\n}\n```\n\n### Explanation:\n- **Node Structure**: Each node contains an integer `data` and a pointer `next` to the next node.\n- **Insert Method**: Adds a new node with the given value at the beginning of the list.\n- **Remove Method**: Searches for the node with the specified value and removes it from the list. If the node is the head, it updates the head pointer.\n- **Display Method**: Traverses the list and prints the value of each node.\n- **Destructor**: Cleans up the memory allocated for the nodes to prevent memory leaks.\n\nThis code demonstrates basic operations on a singly linked list: insertion at the head, deletion by value, and traversal for display."
    }
]