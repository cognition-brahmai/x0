[
    {
        "role": "user",
        "content": "How can I get the number of modified rows after executing an UPDATE or INSERT SQL statement using sqlite3 in Python? The usual .fetch*() methods on the Cursor instance do not give me the number of rows modified. Also, what is the corresponding API in the Sqlite3 C interface?"
    },
    {
        "role": "assistant",
        "content": "To get the number of modified rows after executing an `UPDATE` or `INSERT` SQL statement using `sqlite3` in Python, you can use the `rowcount` attribute of the `Cursor` object. This attribute provides the number of rows that were modified by the last executed SQL statement.\n\nHere's how you can do it in Python:\n\n```python\nimport sqlite3\n\n# Connect to the SQLite database\nconnection = sqlite3.connect('example.db')\n\n# Create a cursor object\ncursor = connection.cursor()\n\n# Execute an UPDATE or INSERT statement\ncursor.execute(\"UPDATE your_table SET column_name = value WHERE condition\")\n\n# Get the number of modified rows\nmodified_rows = cursor.rowcount\n\n# Print the number of modified rows\nprint(f\"Number of rows modified: {modified_rows}\")\n\n# Commit the changes if necessary\nconnection.commit()\n\n# Close the connection\nconnection.close()\n```\n\nIn this example, after executing the SQL statement, `cursor.rowcount` is used to retrieve the number of rows that were modified.\n\nRegarding the corresponding API in the SQLite3 C interface, you can use the `sqlite3_changes()` function. This function returns the number of database rows that were changed or inserted or deleted by the most recently completed SQL statement on the database connection. Here is a brief example in C:\n\n```c\n#include <sqlite3.h>\n#include <stdio.h>\n\nint main() {\n    sqlite3 *db;\n    char *errMsg = 0;\n    int rc;\n\n    // Open the database\n    rc = sqlite3_open(\"example.db\", &db);\n\n    if (rc) {\n        fprintf(stderr, \"Can't open database: %s\\n\", sqlite3_errmsg(db));\n        return rc;\n    }\n\n    // Execute an SQL statement\n    rc = sqlite3_exec(db, \"UPDATE your_table SET column_name = value WHERE condition\", NULL, 0, &errMsg);\n\n    if (rc != SQLITE_OK) {\n        fprintf(stderr, \"SQL error: %s\\n\", errMsg);\n        sqlite3_free(errMsg);\n    } else {\n        // Get the number of modified rows\n        int changes = sqlite3_changes(db);\n        printf(\"Number of rows modified: %d\\n\", changes);\n    }\n\n    // Close the database\n    sqlite3_close(db);\n\n    return 0;\n}\n```\n\nIn this C example, after executing the SQL statement, `sqlite3_changes(db)` is called to obtain the number of rows modified by the most recent operation on the database connection."
    }
]