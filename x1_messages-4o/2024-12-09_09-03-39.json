[
    {
        "role": "user",
        "content": "I'm working on a Ruby program and I need help finding the length of the longest substring in a string that doesn't contain any repeating letters. Can someone help me with this?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To find the length of the longest substring without repeating characters in a string using Ruby, you can use a sliding window technique with two pointers. Here is a sample implementation:\n\n```ruby\ndef length_of_longest_substring(s)\n  char_index_map = {}\n  max_length = 0\n  start_idx = 0\n\n  s.each_char.with_index do |char, index|\n    # If the character is already in the map and the index is greater than or equal to start_idx\n    if char_index_map.key?(char) && char_index_map[char] >= start_idx\n      # Move the start index to the right of the last occurrence of the current character\n      start_idx = char_index_map[char] + 1\n    end\n\n    # Update the character's index in the map\n    char_index_map[char] = index\n\n    # Calculate the length of the current substring and update max_length if it's greater\n    current_length = index - start_idx + 1\n    max_length = [max_length, current_length].max\n  end\n\n  max_length\nend\n\n# Example usage:\nstring = \"abcabcbb\"\nputs length_of_longest_substring(string)  # Output: 3\n```\n\n### Explanation:\n\n1. **Hash Map (`char_index_map`)**: This keeps track of the last index at which each character appeared.\n\n2. **Two Pointers (`start_idx` and `index`)**: \n   - `start_idx` is the beginning of the current substring without repeating characters.\n   - `index` is the current position in the string as we iterate.\n\n3. **Loop through each character**: \n   - If the character has already been seen and its last index is within the current substring (`start_idx`), move the `start_idx` to one position after the last occurrence to ensure no repeats.\n   - Update the character's latest index in the hash map.\n   - Calculate the current length of the substring and update the `max_length` if it's greater.\n\nThis approach ensures that each character is processed in constant time, resulting in an overall time complexity of O(n), where n is the length of the input string."
    }
]