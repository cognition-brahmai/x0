[
    {
        "role": "user",
        "content": "I am a beginner to Mustache. In many templating languages like Django or Jinja, we have the ability to extend a \"parent\" template. For instance, consider the following example:\n\nbase.html\n```\n<html><head></head>\n    <body>\n    {% block content %}{% endblock %}\n    </body>\n</html>\n```\n\nfrontpage.html\n```\n{% extends \"base.html\" %}\n{% block content %}<h1>Foobar!</h1>{% endblock %}\n```\n\nWhen frontpage.html is rendered, the output is: \n```\n<html><head></head>\n    <body>\n    <h1>Foobar!</h1>\n    </body>\n</html>\n```\n\nI understand that in Mustache we have \"partials\" (e.g., `{{>content}}`), but these seem to work like includes. Is there a way to do template extension like the above example in Mustache? If not, is there a certain design pattern that could turn includes into something similar to template extension?"
    },
    {
        "role": "assistant",
        "content": "Mustache is a logic-less templating engine, which means it intentionally keeps things simple and doesn't support some of the more advanced features found in other templating languages like Django or Jinja, such as template inheritance or extensions.\n\nHowever, you can mimic template inheritance in Mustache using partials and some design patterns. Here's how you can achieve a similar effect:\n\n1. **Use Partials for Common Structures**: Use partials to include common structures or layouts. You can create a base template and include it in other templates. \n\nFor example, create a partial for the common structure:\n\n**base.mustache**\n```html\n<html><head></head>\n<body>\n    {{> content}}\n</body>\n</html>\n```\n\n2. **Define the Content in Separate Templates**: Create separate templates for different content sections that you want to render into the base template.\n\n**frontpage.mustache**\n```html\n{{< base}}\n  {{#content}}\n    <h1>Foobar!</h1>\n  {{/content}}\n{{/base}}\n```\n\n3. **Combine Templates at Render Time**: Use your Mustache rendering engine to combine these templates. You would typically load the base template and then render it with the context of your page-specific template.\n\nHere's a conceptual approach to how you might do this in code:\n\n```javascript\nconst Mustache = require('mustache');\nconst fs = require('fs');\n\n// Load the templates\nconst baseTemplate = fs.readFileSync('base.mustache', 'utf8');\nconst frontPageContent = fs.readFileSync('frontpage.mustache', 'utf8');\n\n// Render the final output\nconst output = Mustache.render(baseTemplate, { content: frontPageContent });\n\nconsole.log(output);\n```\n\nIn this pattern, you're effectively using partials to include different content sections. While it's not full template inheritance like in Jinja or Django, it allows you to modularize and reuse code within the logic-less constraints of Mustache."
    }
]