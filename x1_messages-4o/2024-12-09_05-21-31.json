[
    {
        "role": "user",
        "content": "How can I host multiple Django sites using Apache & mod_wsgi on the same server? I have site1, site2, and site3 that I want to host on an IP 155.55.55.1 with site1 on port 80, site2 on port 8080, and site3 on port 8090. The scripts for these sites are located at /opt/django/site1/, /opt/django/site2/, and /opt/django/site3/ respectively. I have already configured Apache for site1 and want to add configurations for site2 and site3. What are the steps I need to take to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To host multiple Django sites using Apache and mod_wsgi on the same server, you need to configure Apache to serve each site on its specified port and ensure that mod_wsgi is properly set up for each Django application. Here\u2019s a step-by-step guide to achieve this:\n\n### Prerequisites\n\n1. **Ensure Apache and mod_wsgi are installed** on your server.\n2. **Ensure Django is installed** for your Python environment.\n3. **Ensure each Django project is ready** to be served (i.e., migrations applied, static files collected, etc.).\n\n### Steps\n\n1. **Create a WSGI Entry Point for Each Site**\n   \n   Each Django project should have a `wsgi.py` file. Make sure it is configured correctly for each project.\n\n   Example content for `/opt/django/site1/site1/wsgi.py`:\n\n   ```python\n   import os\n   from django.core.wsgi import get_wsgi_application\n\n   os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'site1.settings')\n\n   application = get_wsgi_application()\n   ```\n\n   Do the same for `site2` and `site3`.\n\n2. **Configure Apache for site2 and site3**\n\n   You should have a configuration file for each site. Typically, these files are located in `/etc/httpd/conf.d/` or `/etc/apache2/sites-available/`.\n\n   Here\u2019s how you can create configurations for `site2` and `site3`:\n\n   - **Create a configuration file for `site2`:**\n\n     Create a file named `site2.conf` in the appropriate directory:\n\n     ```apache\n     <VirtualHost *:8080>\n         ServerName site2.example.com\n\n         DocumentRoot /opt/django/site2\n\n         <Directory /opt/django/site2>\n             <Files wsgi.py>\n                 Require all granted\n             </Files>\n         </Directory>\n\n         WSGIDaemonProcess site2 python-path=/opt/django/site2:/path/to/venv/lib/python3.x/site-packages\n         WSGIProcessGroup site2\n         WSGIScriptAlias / /opt/django/site2/site2/wsgi.py\n\n         Alias /static/ /opt/django/site2/static/\n         <Directory /opt/django/site2/static>\n             Require all granted\n         </Directory>\n\n         Alias /media/ /opt/django/site2/media/\n         <Directory /opt/django/site2/media>\n             Require all granted\n         </Directory>\n     </VirtualHost>\n     ```\n\n   - **Create a configuration file for `site3`:**\n\n     Create a file named `site3.conf` similarly:\n\n     ```apache\n     <VirtualHost *:8090>\n         ServerName site3.example.com\n\n         DocumentRoot /opt/django/site3\n\n         <Directory /opt/django/site3>\n             <Files wsgi.py>\n                 Require all granted\n             </Files>\n         </Directory>\n\n         WSGIDaemonProcess site3 python-path=/opt/django/site3:/path/to/venv/lib/python3.x/site-packages\n         WSGIProcessGroup site3\n         WSGIScriptAlias / /opt/django/site3/site3/wsgi.py\n\n         Alias /static/ /opt/django/site3/static/\n         <Directory /opt/django/site3/static>\n             Require all granted\n         </Directory>\n\n         Alias /media/ /opt/django/site3/media/\n         <Directory /opt/django/site3/media>\n             Require all granted\n         </Directory>\n     </VirtualHost>\n     ```\n\n   Make sure to replace `/path/to/venv` with the actual path to your virtual environment for each site.\n\n3. **Enable the New Configuration Files**\n\n   On Ubuntu/Debian, you might need to enable the site configurations:\n\n   ```shell\n   sudo a2ensite site2.conf\n   sudo a2ensite site3.conf\n   ```\n\n   Reload Apache to apply the changes:\n\n   ```shell\n   sudo systemctl reload apache2\n   ```\n\n   On CentOS/RHEL, the configuration files in `/etc/httpd/conf.d/` are included by default, so just restart Apache:\n\n   ```shell\n   sudo systemctl restart httpd\n   ```\n\n4. **Ensure Firewall Rules Allow the Ports**\n\n   Make sure that your server's firewall allows incoming connections on ports 8080 and 8090:\n\n   ```shell\n   sudo firewall-cmd --permanent --add-port=8080/tcp\n   sudo firewall-cmd --permanent --add-port=8090/tcp\n   sudo firewall-cmd --reload\n   ```\n\n5. **Test Your Configuration**\n\n   - Access `http://155.55.55.1:80` for `site1`.\n   - Access `http://155.55.55.1:8080` for `site2`.\n   - Access `http://155.55.55.1:8090` for `site3`.\n\n   Ensure each site loads properly, and debug any errors that may occur.\n\n### Additional Considerations\n\n- **Domain Names**: If you want to use domain names (like `site1.example.com`), you\u2019ll need to set up DNS records pointing to your server's IP address.\n- **SSL Configuration**: For production environments, consider adding SSL certificates for secure connections.\n- **Performance Tuning**: Depending on the traffic, you may need to tweak your `WSGIDaemonProcess` settings for optimal performance.\n\nBy following these steps, you should be able to host multiple Django sites on a single server using Apache and mod_wsgi."
    }
]