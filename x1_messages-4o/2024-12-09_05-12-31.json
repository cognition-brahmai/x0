[
    {
        "role": "user",
        "content": "How can I retrieve the parent class or classes of a specific Python class?"
    },
    {
        "role": "assistant",
        "content": "In Python, you can retrieve the parent class or classes of a specific class using the `__bases__` attribute. This attribute is a tuple that contains references to the base classes of the class in question. Here's how you can do it:\n\n```python\nclass Parent1:\n    pass\n\nclass Parent2:\n    pass\n\nclass Child(Parent1, Parent2):\n    pass\n\n# Retrieve the parent classes of Child\nparent_classes = Child.__bases__\n\n# Output the parent classes\nprint(parent_classes)\n```\n\nWhen you run this code, `parent_classes` will contain the tuple `(<class '__main__.Parent1'>, <class '__main__.Parent2'>)`, indicating that `Child` inherits from `Parent1` and `Parent2`.\n\nAdditionally, if you need to explore the entire inheritance hierarchy, you can use the `inspect` module's `getmro()` function, which provides the Method Resolution Order (MRO) of the class. This is particularly useful for understanding class hierarchies involving multiple inheritance:\n\n```python\nimport inspect\n\n# Get the MRO of the Child class\nmro = inspect.getmro(Child)\n\n# Output the MRO\nprint(mro)\n```\n\nThis will output a tuple of classes representing the full inheritance path, including the `Child` class itself and the built-in `object` class at the end."
    }
]