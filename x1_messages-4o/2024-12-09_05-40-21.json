[
    {
        "role": "user",
        "content": "How can I decode a URL encoded Unicode string in Python? I have a Unicode string, for instance, \"Tan\u0131m\", which is encoded as \"Tan%u0131m\". I am struggling to convert this encoded string back to its original Unicode form as urllib.unquote does not support Unicode. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To decode a URL-encoded Unicode string like \"Tan%u0131m\" in Python, you can use the `urllib.parse.unquote` function for the general URL-decoding and then handle the Unicode part separately. Python's `urllib.parse.unquote` function does not directly support decoding of the `%u`-style Unicode encoding, so you need to handle that manually.\n\nHere's a step-by-step approach to achieve this:\n\n1. First, use `urllib.parse.unquote` to decode the standard URL-encoded parts of the string.\n2. Then, use a regular expression to find and decode the `%uXXXX` sequences.\n\nHere's a code example to demonstrate this process:\n\n```python\nimport urllib.parse\nimport re\n\ndef decode_unicode_url(encoded_str):\n    # Decode standard URL-encoded parts\n    partially_decoded = urllib.parse.unquote(encoded_str)\n    \n    # Define a function to decode %uXXXX sequences\n    def unicode_replacer(match):\n        # Get the Unicode code point as an integer\n        code_point = int(match.group(1), 16)\n        # Convert the code point to a character\n        return chr(code_point)\n    \n    # Use a regular expression to find %uXXXX sequences and replace them\n    fully_decoded = re.sub(r'%u([0-9A-Fa-f]{4})', unicode_replacer, partially_decoded)\n    \n    return fully_decoded\n\n# Example usage\nencoded_string = \"Tan%u0131m\"\ndecoded_string = decode_unicode_url(encoded_string)\nprint(decoded_string)  # Output: Tan\u0131m\n```\n\nIn this code:\n\n- `urllib.parse.unquote` is used to decode any standard URL-encoded characters.\n- A regular expression is used to find patterns matching `%uXXXX`, where `XXXX` is a hexadecimal representation of a Unicode code point.\n- The `unicode_replacer` function converts each `%uXXXX` sequence to its corresponding Unicode character using Python's `chr` function.\n\nThis method should work for strings with mixed URL-encoded and `%u`-encoded Unicode characters."
    }
]