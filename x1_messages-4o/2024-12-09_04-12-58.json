[
    {
        "role": "user",
        "content": "My team and I are using Pytest along with Jenkins for automating our product testing, and we use Python's standard Logging library to generate logs. Currently, our logs have multiple layers, including ERROR, WARNING, INFO and DEBUG, with the default value set to INFO. The logger object is created at the start of the tests, and is passed down to every object created, ensuring that all our logs go to the same logger. When we develop a new feature or test, we work in DEBUG mode locally, and switch it back to INFO when we submit new code to our SVN. However, I am trying to find a way to change the logging level using the CLI, but haven't found any straightforward way to accomplish this. I've thought about using Fixtures, but my understanding is that those are only for the tests themselves, and not for the setup/tear-down phases, and the log is created regardless of the tests. Is there a way to add a Pytest option to the CLI command to support changing the logging level?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can add a custom command-line option in Pytest to change the logging level dynamically. This can be done by using Pytest hooks and adding a custom option to specify the logging level. Here's a step-by-step guide on how you can achieve this:\n\n1. **Create a Pytest configuration file:** You can add a `conftest.py` file in your test directory. This file will allow you to define hooks and custom options for your Pytest runs.\n\n2. **Add a custom command-line option:** Use the `pytest_addoption` hook to add a custom option for setting the logging level.\n\n3. **Set the logging level dynamically:** Use the `pytest_configure` hook to read the command-line option and set the logging level accordingly.\n\nHere's an example implementation:\n\n```python\n# conftest.py\n\nimport logging\nimport pytest\n\ndef pytest_addoption(parser):\n    parser.addoption(\n        \"--log-level\", \n        action=\"store\",\n        default=\"INFO\",  # Default level\n        help=\"Set the logging level. Options: DEBUG, INFO, WARNING, ERROR, CRITICAL\"\n    )\n\n@pytest.fixture(scope=\"session\", autouse=True)\ndef configure_logging(request):\n    log_level = request.config.getoption(\"--log-level\").upper()\n    logging.basicConfig(level=getattr(logging, log_level, logging.INFO))\n    logger = logging.getLogger()\n\n    # Optional: Output the current logging level for verification\n    logger.info(f\"Logging level set to {log_level}\")\n\n```\n\n**Usage:**\n\nWhen you run your tests, you can now specify the logging level through the command line:\n\n```sh\npytest --log-level=DEBUG\n```\n\nThis setup ensures that the logging level is configurable via the CLI, which should meet your requirement to toggle between different logging levels without altering the code. The `configure_logging` fixture is set to run automatically for the entire session, ensuring the logging level is set at the very start."
    }
]