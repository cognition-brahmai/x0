[
    {
        "role": "user",
        "content": "How can I sort a CSV table by date in Python? I have a CSV file structured as follows: \"id;file;description;date;author;platform;type;port\". The date is in ISO-8601 format (2003-04-22 for example) and I want to sort by date with the newest entries first. I have tried reading the CSV file with Python's CSV module but I am not sure how to get the data into a sortable structure. It seems the CSV module doesn't have a built-in sorting function. Is there a way to handle the CSV file like a database for sorting?"
    },
    {
        "role": "assistant",
        "content": "To sort a CSV file by date using Python, you can use the `csv` module to read the file and `sorted` function or `pandas` library to sort the data. Since you want to sort by the date column in descending order (newest first), both methods will work well. Here's how you can do it:\n\n### Method 1: Using `csv` Module and `sorted` Function\n\n```python\nimport csv\nfrom datetime import datetime\n\n# Read the CSV file\nwith open('your_file.csv', mode='r', newline='') as file:\n    reader = csv.DictReader(file, delimiter=';')\n    data = list(reader)\n\n# Sort the data by date in descending order\nsorted_data = sorted(data, key=lambda x: datetime.strptime(x['date'], '%Y-%m-%d'), reverse=True)\n\n# Optionally, write the sorted data back to a new CSV file\nwith open('sorted_file.csv', mode='w', newline='') as file:\n    writer = csv.DictWriter(file, fieldnames=reader.fieldnames, delimiter=';')\n    writer.writeheader()\n    writer.writerows(sorted_data)\n\nprint(\"CSV file sorted by date in descending order.\")\n```\n\n### Method 2: Using `pandas` Library\n\nIf you are comfortable using additional libraries, `pandas` provides a more straightforward and efficient approach:\n\n```python\nimport pandas as pd\n\n# Read the CSV file into a DataFrame\ndf = pd.read_csv('your_file.csv', delimiter=';')\n\n# Convert the date column to datetime format\ndf['date'] = pd.to_datetime(df['date'])\n\n# Sort the DataFrame by date in descending order\nsorted_df = df.sort_values(by='date', ascending=False)\n\n# Optionally, write the sorted DataFrame back to a new CSV file\nsorted_df.to_csv('sorted_file.csv', index=False, sep=';')\n\nprint(\"CSV file sorted by date in descending order.\")\n```\n\n### Explanation:\n\n1. **CSV Module**:\n   - Read the CSV file using `csv.DictReader` which allows you to access rows as dictionaries.\n   - Use the `sorted` function with a key that parses the date string into a `datetime` object for accurate sorting.\n   - Write the sorted data back to a new CSV file if needed.\n\n2. **Pandas**:\n   - Load the CSV file into a `DataFrame` using `pandas.read_csv`.\n   - Convert the 'date' column to a datetime object with `pd.to_datetime`.\n   - Use the `sort_values` method to sort by the 'date' column in descending order.\n   - Save the sorted DataFrame to a new CSV file using `to_csv`.\n\nChoose the method that best fits your needs and dependencies. Pandas is generally more powerful and easier to use for data manipulation."
    }
]