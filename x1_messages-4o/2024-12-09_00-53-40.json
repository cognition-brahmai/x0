[
    {
        "role": "user",
        "content": "I have installed uWSGI using pip and have set up an XML to load my application. The XML configuration includes the tag `<plugin>python</plugin>`. However, on my new server, this is causing an error. The error message I receive is:\n\n```\nopen(\"./python_plugin.so\"): No such file or directory [core/utils.c line 3321]\n!!! UNABLE to load uWSGI plugin: ./python_plugin.so: cannot open shared object file: No such file or directory !!!\n```\n\nI am able to locate the `.c` and `.o` versions with the following commands:\n\n```\nsudo find / -name 'python_plugin.c'\nsudo find / -name 'python_plugin.o'\n```\n\nBut I am unable to find the `.so` version using:\n\n```\nsudo find / -name 'python_plugin.so'\n```\n\nMy previous system had a uWSGI install through apt-get, but that's quite old. Some additional information about my system:\n\n- Ubuntu 12.0.4 LTS\n- Python 2.7 (virtualenv)\n- I've installed uWSGI in my venv, using the regular `pip install uwsgi` (no `sudo`)\n\nI'm unsure about what to do next. Should I compile the `.so` objects myself? If so, how? Or is there a different solution to this problem?"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering suggests that the uWSGI installation is not finding the `python_plugin.so` file, which is necessary for running Python applications. This can happen when the uWSGI installation doesn't include the Python plugin by default. Here's a step-by-step guide to resolve this issue:\n\n1. **Ensure Python Development Headers Are Installed:**\n   Make sure you have the Python development headers installed, as they are required to build uWSGI with Python support.\n\n   ```bash\n   sudo apt-get update\n   sudo apt-get install python-dev\n   ```\n\n2. **Reinstall uWSGI with Python Plugin:**\n   Sometimes, installing uWSGI with pip doesn't automatically build the Python plugin. You can try reinstalling uWSGI with the following command:\n\n   ```bash\n   pip uninstall uwsgi\n   pip install uwsgi\n   ```\n\n   If this still doesn't create the `python_plugin.so`, you may need to build uWSGI manually.\n\n3. **Manually Build uWSGI with Python Plugin:**\n   Follow these steps to manually compile uWSGI with the Python plugin:\n\n   ```bash\n   # Clone the uWSGI repository\n   git clone https://github.com/unbit/uwsgi.git\n   cd uwsgi\n\n   # Build uWSGI with the Python plugin\n   python uwsgiconfig.py --plugin plugins/python\n   make\n\n   # Install the compiled uWSGI\n   python setup.py install\n   ```\n\n4. **Verify Python Plugin Installation:**\n   After installation, you can verify that the Python plugin is available by running:\n\n   ```bash\n   uwsgi --plugins-list\n   ```\n\n   Look for a line that includes `python`.\n\n5. **Check uWSGI Configuration:**\n   Ensure your uWSGI XML configuration file is correctly set up to load the Python plugin. You can remove the `<plugin>python</plugin>` line if the plugin is built-in or ensure the path to the `.so` file is correct.\n\n6. **Using the System Version of uWSGI:**\n   Since you mentioned your previous server used an `apt-get` installation, you might want to use the system version of uWSGI if it works better for your setup. You can install it with:\n\n   ```bash\n   sudo apt-get install uwsgi uwsgi-plugin-python\n   ```\n\n   Adjust your uWSGI commands to call the system-installed version.\n\nIf you follow these steps and still encounter issues, make sure to check the uWSGI logs for more detailed error messages and verify that your environment variables and paths are correctly set up in your virtual environment."
    }
]