[
    {
        "role": "user",
        "content": "How can I create a standard colorbar for a series of plots in Python using Matplotlib? I have a series of NxM matrices containing frequency information and I'm using imshow() to create a 2D histogram where color denotes frequency. Each matrix has data in different but overlapping ranges. Imshow normalizes the data in each matrix to the range 0-1, causing the plot of matrix A to appear identical to the plot of the matrix 2*A, although the colour bar will show double the values. I want the same color, for example, red, to correspond to the same frequency across all the plots, meaning that a single color bar should suffice for all plots. Any suggestions on how I can achieve this?"
    },
    {
        "role": "assistant",
        "content": "To create a standard colorbar for a series of plots in Python using Matplotlib, where the same color corresponds to the same frequency across all plots, you need to ensure that all plots share the same normalization or color scale. Here's how you can achieve that:\n\n1. **Determine the Global Min/Max:**\n   First, determine the minimum and maximum values across all your matrices. This will help you set a consistent color scale.\n\n2. **Use a Shared Normalization:**\n   Use `matplotlib.colors.Normalize` to create a normalization object with your global min and max values. This will ensure all plots use the same color scale.\n\n3. **Create the Plots:**\n   When plotting each matrix, pass the normalization object to `imshow()`.\n\n4. **Add a Single Colorbar:**\n   Use a single colorbar that is shared among all the plots.\n\nHere's an example of how you might implement this:\n\n```python\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport matplotlib.colors as mcolors\n\n# Example data: replace these with your actual matrices\nmatrices = [np.random.rand(10, 10) * i for i in range(1, 5)]\n\n# Determine the global minimum and maximum\nglobal_min = min(matrix.min() for matrix in matrices)\nglobal_max = max(matrix.max() for matrix in matrices)\n\n# Create a normalization object\nnorm = mcolors.Normalize(vmin=global_min, vmax=global_max)\n\n# Create subplots\nfig, axes = plt.subplots(1, len(matrices), figsize=(12, 4))\n\n# Plot each matrix\nfor ax, matrix in zip(axes, matrices):\n    cax = ax.imshow(matrix, norm=norm, cmap='viridis')\n    ax.set_title('Matrix Plot')\n\n# Add a single colorbar\nfig.colorbar(cax, ax=axes, orientation='vertical', fraction=.1)\n\nplt.tight_layout()\nplt.show()\n```\n\n### Explanation:\n- **Global Min/Max:** By calculating the global min and max values, you ensure that the color scale is consistent across all plots.\n- **Normalization Object:** Using a `Normalize` object with `vmin` and `vmax` set to the global min and max ensures that the color scale is the same for all matrices.\n- **Single Colorbar:** The colorbar is created once and applied to all plots, providing a consistent reference for interpreting the colors in all plots. \n\nThis approach ensures that each color represents the same frequency across different plots, making it easier to visually compare them."
    }
]