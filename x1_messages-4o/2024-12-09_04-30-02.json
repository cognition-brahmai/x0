[
    {
        "role": "user",
        "content": "How can I specify a package from a custom git branch in the Pipfile using pipfile? I am able to specify packages from a custom Git repository. However, I am having difficulty finding comprehensive documentation on how to specify the exact branch or commit to be used for installation. Is there a complete reference on how to use Git URLs for Python packages in the Pipfile that are supported by the pipenv for specifying custom branches, versions, or commits? I would also appreciate having equivalent pipenv command line arguments."
    },
    {
        "role": "assistant",
        "content": "To specify a package from a custom Git branch in a `Pipfile`, you can use the `git`, `ref`, and `editable` parameters. Here's how you can do it:\n\n### Specifying a Custom Git Branch in Pipfile\n\nTo specify a package from a custom Git branch, you can use the following syntax in your `Pipfile`:\n\n```toml\n[packages]\nyour-package-name = { git = \"https://github.com/username/repo.git\", ref = \"branch-name\" }\n```\n\n### Specifying a Specific Commit\n\nIf you want to specify a particular commit, replace the `ref` value with the commit hash:\n\n```toml\n[packages]\nyour-package-name = { git = \"https://github.com/username/repo.git\", ref = \"commit-hash\" }\n```\n\n### Specifying a Tag\n\nSimilarly, you can specify a tag:\n\n```toml\n[packages]\nyour-package-name = { git = \"https://github.com/username/repo.git\", ref = \"tag-name\" }\n```\n\n### Using Editable Mode\n\nIf you wish to install the package in editable mode (similar to `pip install -e`), you can include the `editable` parameter:\n\n```toml\n[packages]\nyour-package-name = { git = \"https://github.com/username/repo.git\", ref = \"branch-name\", editable = true }\n```\n\n### Equivalent Pipenv Command Line Arguments\n\nTo achieve the same using `pipenv` command-line arguments, you can use the following syntax:\n\n- For installing from a specific branch:\n\n  ```bash\n  pipenv install -e git+https://github.com/username/repo.git@branch-name#egg=your-package-name\n  ```\n\n- For installing from a specific commit:\n\n  ```bash\n  pipenv install -e git+https://github.com/username/repo.git@commit-hash#egg=your-package-name\n  ```\n\n- For installing from a specific tag:\n\n  ```bash\n  pipenv install -e git+https://github.com/username/repo.git@tag-name#egg=your-package-name\n  ```\n\n### Reference Documentation\n\nWhile there isn't a single comprehensive official reference specifically for Git URLs in `Pipfile`, the syntax is based on `pip`'s VCS support. The `Pipfile` is essentially a higher-level abstraction over `pip` requirements, so understanding `pip`'s VCS URL format can be very helpful. The Pipenv documentation and the `pip` documentation on VCS support provide useful insights:\n\n- [Pipenv Documentation](https://pipenv.pypa.io/en/latest/)\n- [Pip VCS Support](https://pip.pypa.io/en/stable/topics/vcs-support/)\n\nThese resources can help you craft the entries in your `Pipfile` for various use cases with Git repositories."
    }
]