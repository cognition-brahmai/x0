[
    {
        "role": "user",
        "content": "How can I document class attributes in Python? In the class I'm writing, the attributes are meant to be publicly accessible and occasionally overridden in specific instances. I am currently using a method that adds lines for each attribute to the class's docstring via augmented assignment to `__doc__`. However, this is not mentioned as an option in the Python docstring style guidelines. Is there a better approach to document these attributes?\n\n<pre><code>class Albatross(object):\n    \"\"\"A bird with a flight speed exceeding that of an unladen swallow.\n\n    Attributes:\n    \"\"\"\n\n    flight_speed = 691\n    __doc__ += \"\"\"\n        flight_speed (691)\n          The maximum speed that such a bird can attain.\n    \"\"\"\n\n    nesting_grounds = \"Raymond Luxury-Yacht\"\n    __doc__ += \"\"\"\n        nesting_grounds (\"Raymond Luxury-Yacht\")\n          The locale where these birds congregate to reproduce.\n    \"\"\"\n\n    def __init__(self, **keyargs):\n        \"\"\"Initialize the Albatross from the keyword arguments.\"\"\"\n        self.__dict__.update(keyargs)\n</code></pre>"
    },
    {
        "role": "assistant",
        "content": "To document class attributes in Python, it is generally recommended to use the class docstring itself, possibly enhanced with some structured format like reStructuredText or Google style. Instead of manipulating the `__doc__` attribute directly, which can be cumbersome and error-prone, consider using a more structured approach. Here's how you can achieve that using different styles:\n\n### Google Style\n\nIn Google style, class attributes are documented under a separate section in the class docstring:\n\n```python\nclass Albatross:\n    \"\"\"A bird with a flight speed exceeding that of an unladen swallow.\n\n    Attributes:\n        flight_speed (int): The maximum speed that such a bird can attain.\n        nesting_grounds (str): The locale where these birds congregate to reproduce.\n    \"\"\"\n    \n    flight_speed = 691\n    nesting_grounds = \"Raymond Luxury-Yacht\"\n\n    def __init__(self, **keyargs):\n        \"\"\"Initialize the Albatross from the keyword arguments.\"\"\"\n        self.__dict__.update(keyargs)\n```\n\n### reStructuredText Style\n\nIf you prefer reStructuredText, which is commonly used in Sphinx documentation, you can format it like this:\n\n```python\nclass Albatross:\n    \"\"\"A bird with a flight speed exceeding that of an unladen swallow.\n\n    :cvar int flight_speed: The maximum speed that such a bird can attain.\n    :cvar str nesting_grounds: The locale where these birds congregate to reproduce.\n    \"\"\"\n    \n    flight_speed = 691\n    nesting_grounds = \"Raymond Luxury-Yacht\"\n\n    def __init__(self, **keyargs):\n        \"\"\"Initialize the Albatross from the keyword arguments.\"\"\"\n        self.__dict__.update(keyargs)\n```\n\n### Using Property Decorators\n\nIf you want to add more dynamic behavior to your class attributes, or if you need to add logic that happens when the attribute is accessed, consider using property decorators. You can then document them as methods:\n\n```python\nclass Albatross:\n    \"\"\"A bird with a flight speed exceeding that of an unladen swallow.\"\"\"\n    \n    def __init__(self, **keyargs):\n        \"\"\"Initialize the Albatross from the keyword arguments.\"\"\"\n        self._flight_speed = 691\n        self._nesting_grounds = \"Raymond Luxury-Yacht\"\n        self.__dict__.update(keyargs)\n    \n    @property\n    def flight_speed(self):\n        \"\"\"int: The maximum speed that such a bird can attain.\"\"\"\n        return self._flight_speed\n    \n    @property\n    def nesting_grounds(self):\n        \"\"\"str: The locale where these birds congregate to reproduce.\"\"\"\n        return self._nesting_grounds\n```\n\nThese approaches provide a clear and standardized way to document class attributes, making your code more readable and maintainable. They also align with common documentation tools and practices in the Python community."
    }
]