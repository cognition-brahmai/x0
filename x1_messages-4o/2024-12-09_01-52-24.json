[
    {
        "role": "user",
        "content": "I am working on a function that needs to accept an instance of any dataclass. I am struggling to find an appropriate type hint for it and haven't found any official solution in the Python documentation. I tried using `Any` with `NewType` as shown in the following code:\n\n```python\nfrom typing import Any, NewType\n\nDataClass = NewType('DataClass', Any)\ndef foo(obj: DataClass):\n    ...\n```\nHowever, I am unsure if this is the correct approach. I also have another idea to use a `Protocol` with class attributes `__dataclass_fields__` and `__dataclass_params__`. Can anyone help me figure out the correct type hint for an instance of a non-specific dataclass?"
    },
    {
        "role": "assistant",
        "content": "To type hint a function that accepts any instance of a dataclass, you can indeed use the `Protocol` from the `typing` module to achieve this. The `Protocol` approach is quite flexible and allows for a more structured way to define expected behaviors or attributes.\n\nHere's how you can define a protocol for a dataclass:\n\n```python\nfrom typing import Protocol\nfrom dataclasses import dataclass, is_dataclass\n\nclass DataClassProtocol(Protocol):\n    __dataclass_fields__: dict\n    __dataclass_params__: object\n\ndef foo(obj: DataClassProtocol):\n    if not is_dataclass(obj):\n        raise TypeError(\"The provided object is not a dataclass instance.\")\n    # Your function logic here\n\n# Example usage with a dataclass\n@dataclass\nclass Example:\n    field1: int\n    field2: str\n\nexample_instance = Example(1, \"test\")\nfoo(example_instance)  # This should work fine\n\n# If you try to pass a non-dataclass instance, it will raise a TypeError\nclass NotADataclass:\n    field1: int\n    field2: str\n\nnot_a_dataclass_instance = NotADataclass()\n# foo(not_a_dataclass_instance)  # This will raise a TypeError\n```\n\nIn this solution, `DataClassProtocol` is a protocol that any dataclass should satisfy because all dataclasses have the attributes `__dataclass_fields__` and `__dataclass_params__`. However, it's still a good idea to use `is_dataclass()` to ensure that the object is indeed a dataclass instance as a runtime check.\n\nThis approach provides both a static and runtime guarantee that the object passed to `foo` is a dataclass, addressing both type hinting and type checking needs."
    }
]