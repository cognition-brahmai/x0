[
    {
        "role": "user",
        "content": "Can you provide an algorithm for sorting a sequence of integers in ascending order?"
    },
    {
        "role": "assistant",
        "content": "Certainly! One of the most commonly used algorithms for sorting a sequence of integers in ascending order is the QuickSort algorithm. Here's a simple implementation of QuickSort in Python:\n\n```python\ndef quicksort(arr):\n    if len(arr) <= 1:\n        return arr\n    else:\n        pivot = arr[len(arr) // 2]\n        left = [x for x in arr if x < pivot]\n        middle = [x for x in arr if x == pivot]\n        right = [x for x in arr if x > pivot]\n        return quicksort(left) + middle + quicksort(right)\n\n# Example usage:\nnumbers = [3, 6, 8, 10, 1, 2, 1]\nsorted_numbers = quicksort(numbers)\nprint(sorted_numbers)\n```\n\n### Explanation:\n\n1. **Base Case**: If the array has 0 or 1 elements, it is already sorted, so we return it as is.\n\n2. **Pivot Selection**: We select a 'pivot' element from the array. A common choice is the middle element.\n\n3. **Partitioning**: We divide the array into three parts:\n   - `left`: All elements less than the pivot.\n   - `middle`: All elements equal to the pivot.\n   - `right`: All elements greater than the pivot.\n\n4. **Recursion**: We recursively apply the quicksort to the `left` and `right` subarrays, then concatenate the results with the `middle`.\n\nQuickSort is efficient for large datasets and has an average time complexity of \\(O(n \\log n)\\), but it is important to note that it has a worst-case time complexity of \\(O(n^2)\\), which can occur if the pivot elements are not chosen well (e.g., if the smallest or largest element is always chosen as the pivot)."
    }
]