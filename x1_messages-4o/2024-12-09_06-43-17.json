[
    {
        "role": "user",
        "content": "How can I normalize a NumPy array to within a specified range in a less verbose way? I have been doing some processing on an audio or image array and it has to be normalized within a range before it can be written back to a file. I have been normalizing like this:\n\n<pre><code>\n# Normalize audio channels to between -1.0 and +1.0\naudio[:,0] = audio[:,0]/abs(audio[:,0]).max()\naudio[:,1] = audio[:,1]/abs(audio[:,1]).max()\n\n# Normalize image to between 0 and 255\nimage = image/(image.max()/255.0)\n</code></pre>\n\nHowever, I'm looking for a more convenient way to do this. I've tried `matplotlib.colors.Normalize()` but it doesn't seem to be related. Is there an alternative way to achieve this?"
    },
    {
        "role": "assistant",
        "content": "To normalize a NumPy array to a specified range in a more concise manner, you can create a utility function that handles the normalization process for you. Here's a simple function that normalizes any NumPy array to a specified range, which can be used for audio or image data:\n\n```python\nimport numpy as np\n\ndef normalize_array(arr, new_min, new_max):\n    # Compute the min and max of the array\n    arr_min = arr.min()\n    arr_max = arr.max()\n    \n    # Scale the array to the range [0, 1]\n    scaled = (arr - arr_min) / (arr_max - arr_min)\n    \n    # Scale to the new range [new_min, new_max]\n    normalized = scaled * (new_max - new_min) + new_min\n    \n    return normalized\n\n# Example usage for audio normalization to [-1, 1]\naudio = np.random.rand(1000, 2)  # Example audio data\nnormalized_audio = normalize_array(audio, -1.0, 1.0)\n\n# Example usage for image normalization to [0, 255]\nimage = np.random.rand(100, 100, 3)  # Example image data\nnormalized_image = normalize_array(image, 0, 255).astype(np.uint8)\n```\n\n### Explanation\n- This function first scales the array to the range [0, 1].\n- Then, it rescales this range to the desired [new_min, new_max].\n- For image data, we convert the resultant array to `np.uint8` to make it suitable for image processing tasks.\n\nThis method is flexible and can be applied to any array. You can specify any range you want by providing `new_min` and `new_max` as parameters."
    }
]