[
    {
        "role": "user",
        "content": "I'm trying to check argparse choices in a case-insensitive manner using Python. However, it seems that the program is not able to recognize the choices when they're not in lower case. Here is the code that I'm using:\n\n```python\nimport argparse\nchoices = [\"win64\", \"win32\"]\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-p\", choices=choices)\nprint(parser.parse_args([\"-p\", \"Win32\"]))\n```\n\nWhen I run this, I get the following error:\n\n```python\nusage: choices.py [-h] [-p {win64,win32}]\nchoices.py: error: argument -p: invalid choice: 'Win32' (choose from 'win64','win32')\n```\n\nIs it possible to check argparse choices in a case-insensitive manner? If so, how can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "To handle `argparse` choices in a case-insensitive manner, you can create a custom action or a custom type that converts the input to lowercase (or any other consistent format) before checking against the choices. Here's how you can achieve this:\n\n### Method 1: Using a Custom Type\n\nYou can define a custom type function that converts the input to lowercase and then checks against the lowercase versions of your choices:\n\n```python\nimport argparse\n\ndef case_insensitive_choice(choices):\n    def check_choice(value):\n        value_lower = value.lower()\n        if value_lower not in choices:\n            raise argparse.ArgumentTypeError(f\"Invalid choice: {value} (choose from {', '.join(choices)})\")\n        return value_lower\n    return check_choice\n\nchoices = [\"win64\", \"win32\"]\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-p\", type=case_insensitive_choice(choices))\nargs = parser.parse_args([\"-p\", \"Win32\"])\nprint(args)\n```\n\n### Method 2: Using a Custom `Action`\n\nAlternatively, you could define a custom `Action` class to handle case-insensitivity:\n\n```python\nimport argparse\n\nclass CaseInsensitiveAction(argparse.Action):\n    def __call__(self, parser, namespace, values, option_string=None):\n        choices_lower = [choice.lower() for choice in self.choices]\n        if values.lower() not in choices_lower:\n            choices_str = ', '.join(self.choices)\n            message = f\"Invalid choice: {values} (choose from {choices_str})\"\n            raise argparse.ArgumentError(self, message)\n        setattr(namespace, self.dest, values.lower())\n\nchoices = [\"win64\", \"win32\"]\nparser = argparse.ArgumentParser()\nparser.add_argument(\"-p\", choices=choices, action=CaseInsensitiveAction)\nargs = parser.parse_args([\"-p\", \"Win32\"])\nprint(args)\n```\n\nBoth methods ensure that the input is processed in a case-insensitive manner while retaining the original functionality of `argparse`. The input is converted to lowercase before being checked against the list of valid choices."
    }
]