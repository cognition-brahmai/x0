[
    {
        "role": "user",
        "content": "How can I split a large Python list into smaller sublists or chunks? For instance, I have a list that contains thousands of items:\n\n```python\ndata=[\"I\",\"am\",\"a\",\"python\",\"programmer\".....]\n```\n\nThe length of this list (data) is, say, 1003. I would like to create a subset of this list by splitting the original list into chunks of 100. So, I'd like to have something like this:\n\n```python\ndata_chunk1=[.....] #first 100 items of list data\ndata_chunk2=[.....] #second 100 items of list data\n.\n.\n.\ndata_chunk11=[.....] # remainder of the entries, len(data_chunk_11)=3\n```\n\nI know I could use `data[0:100]` and so on, but I am looking for a more efficient and pythonic way to achieve this. Can you provide a solution?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can split a large list into smaller chunks in a more efficient and pythonic way using list comprehension or by defining a simple utility function. Here's one way to do it using a function:\n\n```python\ndef split_list(data, chunk_size):\n    \"\"\"Splits the list into chunks of specified size.\"\"\"\n    return [data[i:i + chunk_size] for i in range(0, len(data), chunk_size)]\n\n# Example usage\ndata = [\"I\", \"am\", \"a\", \"python\", \"programmer\"] * 200 + [\"end\"]  # Adjusted to create 1003 items\nchunks = split_list(data, 100)\n\n# To access specific chunks, you can do:\ndata_chunk1 = chunks[0]  # First 100 items\ndata_chunk2 = chunks[1]  # Second 100 items\n# ...\ndata_chunk11 = chunks[-1]  # Last 3 items\n\n# Check the length of each chunk to verify\nfor i, chunk in enumerate(chunks, 1):\n    print(f\"data_chunk{i}: Length = {len(chunk)}\")\n```\n\nThis function works by iterating over the range of indices of the `data` list in steps of `chunk_size`, creating sublists for each range. The list comprehension ensures that this is done in a concise and efficient manner."
    }
]