[
    {
        "role": "user",
        "content": "Can you provide a code that predicts if a given text is positive or negative?"
    },
    {
        "role": "assistant",
        "content": "Certainly! To create a simple sentiment analysis model that predicts if a given text is positive or negative, you can use Python with libraries like `scikit-learn` and `nltk` (Natural Language Toolkit). Here's a basic example using a Naive Bayes classifier:\n\n```python\nimport nltk\nfrom nltk.corpus import movie_reviews\nimport random\nimport string\nfrom sklearn.feature_extraction.text import CountVectorizer\nfrom sklearn.naive_bayes import MultinomialNB\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.pipeline import make_pipeline\n\n# Download the movie_reviews dataset\nnltk.download('movie_reviews')\n\n# Load the dataset\ndocuments = [(list(movie_reviews.words(fileid)), category)\n             for category in movie_reviews.categories()\n             for fileid in movie_reviews.fileids(category)]\n\n# Shuffle the documents\nrandom.shuffle(documents)\n\n# Prepare the data\ndata = [' '.join(doc) for doc, _ in documents]\nlabels = [label for _, label in documents]\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(data, labels, test_size=0.2, random_state=42)\n\n# Create a pipeline that combines a CountVectorizer with a Naive Bayes classifier\nmodel = make_pipeline(CountVectorizer(stop_words='english'), MultinomialNB())\n\n# Train the model\nmodel.fit(X_train, y_train)\n\n# Function to predict sentiment\ndef predict_sentiment(text):\n    pred = model.predict([text])[0]\n    return \"Positive\" if pred == 'pos' else \"Negative\"\n\n# Example usage\ntext = \"This movie was absolutely wonderful, with brilliant performances and a gripping storyline.\"\nprint(predict_sentiment(text))\n```\n\n### Explanation:\n- **Data Preparation**: We use the `movie_reviews` dataset from `nltk` which contains labeled positive and negative reviews.\n- **Text Processing**: We concatenate the words for each document into a single string.\n- **Model**: We use a Naive Bayes classifier, which is a simple yet effective model for text classification tasks.\n- **Pipeline**: We use `CountVectorizer` to transform text into a matrix of token counts and then apply `MultinomialNB` for classification.\n- **Prediction**: The `predict_sentiment` function takes a text input and returns \"Positive\" or \"Negative\" based on the model's prediction.\n\nRemember to install necessary packages using pip if they are not already installed:\n\n```bash\npip install nltk scikit-learn\n```\n\nThis is a basic implementation, and you can further improve it by using more sophisticated models or techniques like TF-IDF, word embeddings, or deep learning models for better accuracy."
    }
]