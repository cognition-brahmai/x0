[
    {
        "role": "user",
        "content": "I am working on making my git repository pip-installable and in preparation for this, I am restructuring the repository to follow the right conventions. I have observed that it is common for the source code to be put in a package that has the same name as the repository name. However, my repository has a hyphen in it for readability purposes, for example, 'my-repo'. I am considering making a package for it with the same name, which would also have a hyphen in it. However, according to a tutorial I found, it is generally advised against using hyphens for python package names. Yet, I have seen well-established packages like 'scikit-learn' that have hyphens in their names. I also noticed that the package name for 'scikit-learn' is 'sklearn', not the same as the repo name. My questions are: \n\n1. What is the relationship between the repository's name and the package's name when packaging a repo? Are there any potential issues if the names do not match?\n2. Is it acceptable to have hyphens in package names and repository names?\n3. If the package name for 'scikit-learn' is 'sklearn', why do I use 'pip install scikit-learn' instead of 'pip install sklearn' when installing it?"
    },
    {
        "role": "assistant",
        "content": "When preparing a repository to be pip-installable, there are some conventions and best practices regarding naming that can help avoid potential issues. Let's address your questions one by one:\n\n1. **Relationship Between Repository and Package Names:**\n   - The repository name and the package name do not necessarily have to match. The repository name is primarily for Git hosting services (like GitHub or GitLab) and is meant to be human-readable and descriptive. The package name, on the other hand, is what users will interact with when they install or import your package.\n   - It's common to have a different, more Pythonic name for your package to ensure compatibility and avoid issues with import statements. The key is consistency in documentation and communication with your users.\n\n2. **Hyphens in Package and Repository Names:**\n   - Repository names can have hyphens without issues because they are not directly related to Python's import system.\n   - Package names should avoid hyphens because Python identifiers (like package and module names) cannot contain hyphens. If you include them, users won't be able to import the package using the typical `import package_name` syntax.\n   - Instead of hyphens, underscores (`_`) are preferred for Python package names if needed.\n\n3. **'scikit-learn' vs. 'sklearn':**\n   - The package is distributed under the name 'scikit-learn', which is why you use `pip install scikit-learn`. This is the name registered on PyPI.\n   - Within the code, the package is imported as `import sklearn` because the actual Python package directory is named `sklearn`. This separation between distribution name and import name is fairly common and helps with branding or when the importable package name would conflict with Python's naming rules or existing packages.\n\nIn conclusion, when naming your Python package, use a name that is valid as a Python identifier (e.g., no hyphens). You can choose a different name for distribution if needed for clarity or consistency with an existing brand, but ensure that your documentation clearly explains any differences."
    }
]