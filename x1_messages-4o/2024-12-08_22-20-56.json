[
    {
        "role": "user",
        "content": "Can you write a Python code that will create a dictionary with the length of each word in a given sentence? The sentence is:\n\"Welcome to the world of Python programming\"\nThe resulting dictionary should have the following key-value pairs:\n{\n    \"Welcome\": 7,\n    \"to\": 2,\n    \"the\": 3,\n    \"world\": 5,\n    \"of\": 2,\n    \"Python\": 6,\n    \"programming\": 11\n}\nCan you write the code using list comprehension and dictionary comprehension techniques?"
    },
    {
        "role": "assistant",
        "content": "Certainly! You can achieve this with a combination of list comprehension and dictionary comprehension. Here's the Python code that creates a dictionary with the length of each word in the given sentence:\n\n```python\n# Given sentence\nsentence = \"Welcome to the world of Python programming\"\n\n# Using dictionary comprehension to map each word to its length\nword_length_dict = {word: len(word) for word in sentence.split()}\n\n# Printing the resulting dictionary\nprint(word_length_dict)\n```\n\nWhen you run this code, it will output the desired dictionary:\n\n```python\n{\n    \"Welcome\": 7,\n    \"to\": 2,\n    \"the\": 3,\n    \"world\": 5,\n    \"of\": 2,\n    \"Python\": 6,\n    \"programming\": 11\n}\n```\n\nThis code splits the sentence into words using `split()`, and then uses dictionary comprehension to iterate over each word, calculating its length with `len(word)` and storing it in the dictionary with the word as the key."
    }
]