[
    {
        "role": "user",
        "content": "How can I pretty print a JSON in Python, but keep the arrays that are nested within other arrays all on one line? I am using the `json.dumps` function with the `indent=2` and `separators=(',', ': ')` parameters. This is currently outputting my JSON as follows:\n\n```python\n{    \n    \"rows_parsed\": [\n        [\n          \"a\",\n          \"b\",\n          \"c\",\n          \"d\"\n        ],\n        [\n          \"e\",\n          \"f\",\n          \"g\",\n          \"i\"\n        ],\n    ]\n}\n```\n\nHowever, I want the output to look like this:\n\n```python\n{    \n    \"rows_parsed\": [\n        [\"a\",\"b\",\"c\",\"d\"],\n        [\"e\",\"f\",\"g\",\"i\"],\n    ]\n}\n```"
    },
    {
        "role": "assistant",
        "content": "To achieve the desired JSON formatting where nested arrays are kept on a single line while still maintaining pretty-printing for the rest of the JSON, you can implement a custom JSON encoder. The built-in `json` module doesn't directly support this style of formatting, so a custom approach is necessary.\n\nHere's a way to do it:\n\n```python\nimport json\n\nclass CustomJSONEncoder(json.JSONEncoder):\n    def __init__(self, *args, **kwargs):\n        # Use default separator and indent settings\n        super().__init__(separators=(',', ': '), indent=2, *args, **kwargs)\n\n    def encode(self, obj):\n        if isinstance(obj, list):\n            # Convert lists to a single line string\n            return '[' + ','.join(self.encode(el) for el in obj) + ']'\n        return super().encode(obj)\n\ndef pretty_print_json(data):\n    # Use custom encoder to pretty print JSON with specific list formatting\n    return json.dumps(data, cls=CustomJSONEncoder)\n\ndata = {\n    \"rows_parsed\": [\n        [\"a\", \"b\", \"c\", \"d\"],\n        [\"e\", \"f\", \"g\", \"i\"],\n    ]\n}\n\nformatted_json = pretty_print_json(data)\nprint(formatted_json)\n```\n\nThis code defines a `CustomJSONEncoder` class that overrides the `encode` method to ensure that lists are serialized on a single line. It then uses this encoder to convert the data to a JSON string with the desired formatting. You can adjust the `indent` parameter to change the indentation level if needed."
    }
]