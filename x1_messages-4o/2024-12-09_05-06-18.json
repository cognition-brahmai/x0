[
    {
        "role": "user",
        "content": "How can I make the nose test runner show logging even when tests pass? I am currently using `nosetests test.py` to run my unit tests. However, I'm having an issue where it only shows the logging information when a test fails. I've tried using the `--logging-filter` command to filter out some loggers but it doesn't show anything when the tests pass. I would ideally like to see the output of one specific logger when tests pass. I've tried using `-s` to show all stdout / stderr text but that's not exactly what I need as it prints everything. I've also attempted to use various settings such as `--nologcapture`, `--nocapture`, and `--logging-filter` but I haven't been able to achieve the desired effect. \n\n```python\nimport unittest\nimport logging\n\n\nclass Test(unittest.TestCase):\n    def test_pass(self):\n        logging.getLogger('do_not_want').info('HIDE THIS')\n        logging.getLogger('test').info('TEST PASS')\n        self.assertEqual(True, True)\n\n    def test_fail(self):\n        logging.getLogger('do_not_want').info('HIDE THIS')\n        logging.getLogger('test').info('TEST FAIL')\n        self.assertEqual(True, False)\n```\n\nWhen I run `nosetests test.py --verbosity=2 --logging-filter=test`, it shows:\n\n```\ntest_fail (test.Test) ... FAIL\ntest_pass (test.Test) ... ok\n\n======================================================================\nFAIL: test_fail (test.Test)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \".../test.py\", line 14, in test_fail\n    self.assertEqual(True, False)\nAssertionError: True != False\n-------------------- >> begin captured logging << --------------------\ntest: INFO: TEST FAIL\n--------------------- >> end captured logging << ---------------------\n\n----------------------------------------------------------------------\nRan 2 tests in 0.001s\n\nFAILED (failures=1)\n```\n\nBut it doesn't show anything when the tests pass."
    },
    {
        "role": "assistant",
        "content": "To have the logging output displayed even when the tests pass, you need to modify the behavior of the nose test runner with respect to how it handles logging. By default, nose captures log output and only displays it when tests fail. To ensure that logs are displayed for passing tests, you can configure logging in a way that bypasses this default behavior.\n\nHere's a way you can achieve this:\n\n1. **Configure the logging settings directly in your test code**: Set up the logging configuration at the beginning of your test file to ensure that logs are output directly to the console.\n\n2. **Use `-s` with specific log settings**: While `-s` shows all standard output, you can control what gets logged by setting up the logger properly.\n\nHere's how you can modify your test file:\n\n```python\nimport unittest\nimport logging\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger('test')\n\nclass Test(unittest.TestCase):\n    def test_pass(self):\n        logging.getLogger('do_not_want').info('HIDE THIS')\n        logger.info('TEST PASS')\n        self.assertEqual(True, True)\n\n    def test_fail(self):\n        logging.getLogger('do_not_want').info('HIDE THIS')\n        logger.info('TEST FAIL')\n        self.assertEqual(True, False)\n\nif __name__ == \"__main__\":\n    unittest.main()\n```\n\nHere's how you can run your tests:\n\n```bash\nnosetests test.py -s --logging-filter=test\n```\n\nThis setup ensures that you have configured a logger for your `test` logger that will output logs to the console at the `INFO` level. The `-s` option prevents nose from capturing and suppressing the output, allowing your logger configuration to take effect and display logs for both passing and failing tests.\n\nBy using this approach, you can control which logs are shown without displaying all standard output, thus achieving the desired effect of selectively logging output from specific loggers even when tests pass."
    }
]