[
    {
        "role": "user",
        "content": "What is the correct way to handle exceptions in Python, particularly when there are multiple dependent statements where one is a prerequisite for the other? I have an example code which is trying to send an email using the SMTP server. It seems unpythonic due to nested try...except blocks, and the error handling code is three times the size of the actual business code. I am also interested in how to ensure proper resource cleanup. \n\nHere is my current code:\n```python\ntry:\n    server = smtplib.SMTP(host) #can throw an exception\nexcept smtplib.socket.gaierror:\n    pass\nelse: \n    try:\n        server.login(username, password)\n    except SMTPAuthenticationError:\n        pass \n    finally:\n        server.quit() \n    else:\n        try:\n            server.sendmail(addr, [to], msg.as_string())\n            return True\n        except Exception:\n            return False\n        finally:\n            server.quit()\n\nreturn False\n```"
    },
    {
        "role": "assistant",
        "content": "To handle exceptions in Python more cleanly, especially when dealing with multiple dependent statements, it's important to structure your code to minimize redundancy and ensure clarity. Here\u2019s a refactored version of your code that addresses these issues:\n\n```python\nimport smtplib\nfrom smtplib import SMTPException, SMTPAuthenticationError\n\ndef send_email(host, username, password, from_addr, to_addr, message):\n    try:\n        # Establish connection to the SMTP server\n        with smtplib.SMTP(host) as server:  # Using 'with' for automatic resource management\n            try:\n                # Log in to the server\n                server.login(username, password)\n            except SMTPAuthenticationError:\n                print(\"Failed to authenticate with SMTP server.\")\n                return False\n\n            try:\n                # Send the email\n                server.sendmail(from_addr, [to_addr], message.as_string())\n                return True\n            except SMTPException as e:\n                print(f\"Failed to send email: {e}\")\n                return False\n\n    except smtplib.socket.gaierror:\n        print(\"Network error: Unable to connect to the SMTP server.\")\n        return False\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n        return False\n\n# Usage\n# result = send_email(host, username, password, from_addr, to_addr, message)\n```\n\n### Key Improvements:\n\n1. **`with` Statement**: Using the `with` statement when creating the SMTP server connection ensures that the resource is properly closed even if an exception is raised, eliminating the need for explicit `finally` blocks for cleanup.\n\n2. **Error Handling**: Each try block is focused on a specific operation. This reduces the nesting and makes it easier to read and maintain. Specific exceptions are caught and handled, which also allows for clearer logging or error messages.\n\n3. **Return Values and Messages**: The function returns `False` by default if any exception occurs, and prints specific error messages for different exceptions, making debugging easier.\n\n4. **Separation of Concerns**: The function is focused on a single task (sending an email), making it easier to understand and modify independently of other code.\n\nThis approach should make your code more Pythonic and easier to maintain."
    }
]