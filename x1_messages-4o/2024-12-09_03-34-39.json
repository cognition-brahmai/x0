[
    {
        "role": "user",
        "content": "I am trying to use Django's logging mechanism for debugging purposes and want to log each incoming request when it arrives at django-rest-framework's doorstep. Django provides logging of its requests with \"warning\" log level and above as shown in the code below:\n\n```python\n'django.request': {\n    'handlers': ['mail_admins'],\n    'level': 'ERROR',\n    'propagate': False,\n},\n```\n\nHowever, I want to achieve something similar but with a DEBUG log level as shown here:\n\n```python\n'rest_framework.request': {\n    'handlers': ['logfile'],\n    'level': 'DEBUG',\n    'propagate': False,\n},\n```\n\nIs there any way I can achieve this without having to embed a logger into Django Rest Framework's source code? Is there a \"Logging Backend\" option in Django Rest Framework that I might not be aware of?"
    },
    {
        "role": "assistant",
        "content": "Yes, you can achieve this by configuring Django's logging system without modifying the source code of Django Rest Framework (DRF). Django's logging configuration is quite flexible and allows you to define custom loggers for different parts of your application.\n\nHere is how you can configure Django to log each incoming request at the DEBUG level using DRF:\n\n1. **Define a Custom Logger**: You can add a custom logger in your Django settings specifically for DRF requests. In your `settings.py`, set up the logging configuration as follows:\n\n```python\nLOGGING = {\n    'version': 1,\n    'disable_existing_loggers': False,\n    'handlers': {\n        'logfile': {\n            'level': 'DEBUG',\n            'class': 'logging.FileHandler',\n            'filename': 'drf_requests.log',\n        },\n    },\n    'loggers': {\n        'django.request': {\n            'handlers': ['logfile'],\n            'level': 'ERROR',\n            'propagate': True,\n        },\n        'rest_framework.request': {\n            'handlers': ['logfile'],\n            'level': 'DEBUG',\n            'propagate': False,\n        },\n    },\n}\n```\n\n2. **Middleware for Logging**: If you want to log additional information about each request, you can create a custom middleware to log incoming requests. Here is an example:\n\n```python\nimport logging\n\nlogger = logging.getLogger('rest_framework.request')\n\nclass LogRequestsMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        # Log the request information\n        logger.debug(f\"Request: {request.method} {request.path} - Body: {request.body}\")\n        \n        # Get the response\n        response = self.get_response(request)\n        \n        return response\n```\n\n3. **Add Middleware to Settings**: Add your custom middleware to the `MIDDLEWARE` setting in `settings.py`:\n\n```python\nMIDDLEWARE = [\n    ...,\n    'path.to.your.LogRequestsMiddleware',\n    ...,\n]\n```\n\nThis setup will log all incoming requests handled by DRF to a file named `drf_requests.log` at the DEBUG level. You can adjust the `logger.debug` line in the middleware to log additional request details, such as headers, query parameters, etc., based on what you need for debugging purposes."
    }
]