[
    {
        "role": "user",
        "content": "I want to run Ansible in Python without having to specify the inventory file through the ANSIBLE_HOST. Instead, I want to specify the host directly as shown below:\n\n```python\nansible.run.Runner(\n  module_name='ping',\n  host='www.google.com'\n)\n```\n\nI know this can be done easily in Fabric, but I am uncertain about how to do it in Python. Moreover, I find the documentation of the Ansible API for python quite lacking. How can I achieve this?"
    },
    {
        "role": "assistant",
        "content": "Running Ansible from Python without specifying an inventory file can be a bit tricky, but it's certainly doable by using the Ansible Python API. Below is a simplified example of how you might achieve this by creating an in-memory inventory.\n\nHere's a basic example of how you could run a module like `ping` against a specific host without using an inventory file:\n\n```python\nfrom ansible.executor.task_queue_manager import TaskQueueManager\nfrom ansible.inventory.manager import InventoryManager\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.playbook.play import Play\nfrom ansible.vars.manager import VariableManager\nfrom ansible.module_utils.common.collections import ImmutableDict\nfrom ansible.plugins.callback import CallbackBase\n\n# Define a callback to capture the results\nclass ResultCallback(CallbackBase):\n    def __init__(self):\n        super(ResultCallback, self).__init__()\n        self.results = []\n\n    def v2_runner_on_ok(self, result):\n        self.results.append(result)\n\n# Initialize necessary objects\nloader = DataLoader()\ninventory = InventoryManager(loader=loader, sources=['localhost,'])\nvariable_manager = VariableManager(loader=loader, inventory=inventory)\noptions = ImmutableDict(connection='local', module_path=[], forks=10, become=None, become_method=None, become_user=None, check=False, diff=False)\n\n# Create a simple playbook\nplay_source = {\n    'name': \"Ansible Play\",\n    'hosts': 'all',\n    'gather_facts': 'no',\n    'tasks': [\n        {\n            'name': \"Ping host\",\n            'ping': {}\n        }\n    ]\n}\n\nplay = Play().load(play_source, variable_manager=variable_manager, loader=loader)\n\n# Run the playbook\nresults_callback = ResultCallback()\ntqm = None\ntry:\n    tqm = TaskQueueManager(\n              inventory=inventory,\n              variable_manager=variable_manager,\n              loader=loader,\n              options=options,\n              passwords={},\n              stdout_callback=results_callback,\n          )\n    tqm.run(play)\nfinally:\n    if tqm is not None:\n        tqm.cleanup()\n\n# Print the results\nfor result in results_callback.results:\n    print(result._result)\n```\n\n### Explanation:\n\n1. **InventoryManager**: You create an in-memory inventory using `localhost,` as a placeholder. This can be replaced with actual hostnames or IPs.\n\n2. **Play and Tasks**: You define a simple play with a single task using the `ping` module. This structure can be expanded to include more tasks or different modules.\n\n3. **TaskQueueManager**: This is the main execution engine that runs the play against the inventory.\n\n4. **Callback**: A custom callback class is used to capture and handle results from the Ansible run.\n\n### Note:\n- This is a basic example and is configured to run locally. For remote execution, you would need to adjust the options and inventory accordingly.\n- Ensure that you have the necessary privileges and SSH access configured for the host(s) you are targeting.\n\nThis setup allows you to run Ansible modules directly from Python without needing a separate inventory file, by specifying the hosts directly in the code. Adjust and expand upon this example as needed for your specific use case."
    }
]