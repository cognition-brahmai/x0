[
    {
        "role": "user",
        "content": "How can I determine if `urllib.urlretrieve` has successfully retrieved a file in Python? When I use this function to retrieve a file that doesn't exist on the server, such as abc.jpg from google.com server, it returns silently and saves a HTML page under the name 'abc.jpg' instead of a valid jpg file. I believe the returned headers (an instance of httplib.HTTPMessage) could indicate whether the retrieval was successful or not, but I can't find any documentation for httplib.HTTPMessage. Could anyone provide some information on this issue?"
    },
    {
        "role": "assistant",
        "content": "When using `urllib.urlretrieve` in Python, the function doesn't raise an exception if the file doesn't exist on the server. Instead, it retrieves whatever response the server sends back, which can often be an HTML error page. To determine if the retrieval was successful, you can inspect the headers or the content of the response.\n\nHere's a way to handle this situation:\n\n1. **Check the Headers**: You can look at the headers to verify if the content type matches what you expect (e.g., `image/jpeg` for a JPEG file). Here's how you could do it:\n\n```python\nimport urllib.request\n\nurl = 'http://example.com/abc.jpg'\nfilename, headers = urllib.request.urlretrieve(url)\n\n# Check the Content-Type header\ncontent_type = headers.get('Content-Type')\n\nif content_type == 'image/jpeg':\n    print(\"Successful image retrieval!\")\nelse:\n    print(f\"Unexpected content type: {content_type}\")\n```\n\n2. **Check the File Size**: If the file size is unusually small, it might be an error or HTML page:\n\n```python\nimport os\n\nfile_size = os.path.getsize(filename)\n\n# Assume a minimum file size for a valid image, e.g., 100 bytes\nif file_size < 100:\n    print(\"File size too small, likely an error page.\")\nelse:\n    print(\"File retrieved successfully.\")\n```\n\n3. **Read the Content**: You can also open the file and read the beginning of its content to check if it looks like an image:\n\n```python\nwith open(filename, 'rb') as f:\n    signature = f.read(10)\n\n# Check for JPEG file signature (first two bytes)\nif signature.startswith(b'\\xff\\xd8'):\n    print(\"This is a valid JPEG file.\")\nelse:\n    print(\"This is not a valid JPEG file.\")\n```\n\nBy combining these methods, you can have a more robust check to determine whether `urllib.urlretrieve` has successfully retrieved the desired file."
    }
]