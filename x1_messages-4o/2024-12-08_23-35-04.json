[
    {
        "role": "user",
        "content": "How can I create a custom UITableViewCell with a horizontal UICollectionView inside it? Can you provide some [Swift code] example for the implementation?"
    },
    {
        "role": "assistant",
        "content": "Creating a custom `UITableViewCell` with a `UICollectionView` inside is a common task in iOS development. Below is a step-by-step guide and Swift code example to achieve this.\n\n### Step 1: Create a Custom UITableViewCell\n\nFirst, you need to create a custom subclass of `UITableViewCell` which will contain a `UICollectionView`.\n\n```swift\nimport UIKit\n\nclass CollectionTableViewCell: UITableViewCell {\n\n    // Create a UICollectionView\n    lazy var collectionView: UICollectionView = {\n        let layout = UICollectionViewFlowLayout()\n        layout.scrollDirection = .horizontal\n        layout.minimumLineSpacing = 10\n        layout.minimumInteritemSpacing = 10\n        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: layout)\n        collectionView.backgroundColor = .white\n        collectionView.showsHorizontalScrollIndicator = false\n        collectionView.dataSource = self\n        collectionView.delegate = self\n        collectionView.register(UICollectionViewCell.self, forCellWithReuseIdentifier: \"CollectionViewCell\")\n        return collectionView\n    }()\n\n    override init(style: UITableViewCell.CellStyle, reuseIdentifier: String?) {\n        super.init(style: style, reuseIdentifier: reuseIdentifier)\n        setupCollectionView()\n    }\n\n    required init?(coder: NSCoder) {\n        super.init(coder: coder)\n        setupCollectionView()\n    }\n\n    private func setupCollectionView() {\n        contentView.addSubview(collectionView)\n        collectionView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            collectionView.topAnchor.constraint(equalTo: contentView.topAnchor),\n            collectionView.bottomAnchor.constraint(equalTo: contentView.bottomAnchor),\n            collectionView.leadingAnchor.constraint(equalTo: contentView.leadingAnchor),\n            collectionView.trailingAnchor.constraint(equalTo: contentView.trailingAnchor)\n        ])\n    }\n}\n\n// MARK: - UICollectionViewDataSource and UICollectionViewDelegate\n\nextension CollectionTableViewCell: UICollectionViewDataSource, UICollectionViewDelegate, UICollectionViewDelegateFlowLayout {\n\n    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {\n        return 10 // Return the number of items you want in the collection view\n    }\n\n    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {\n        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: \"CollectionViewCell\", for: indexPath)\n        cell.backgroundColor = .lightGray // Customize the cell\n        return cell\n    }\n\n    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {\n        return CGSize(width: 100, height: 100) // Customize the item size\n    }\n}\n```\n\n### Step 2: Setup UITableView in the ViewController\n\nNow, set up your `UITableView` in your `ViewController` and register the custom cell.\n\n```swift\nimport UIKit\n\nclass ViewController: UIViewController, UITableViewDataSource, UITableViewDelegate {\n\n    private let tableView = UITableView()\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        view.addSubview(tableView)\n        tableView.translatesAutoresizingMaskIntoConstraints = false\n        NSLayoutConstraint.activate([\n            tableView.topAnchor.constraint(equalTo: view.topAnchor),\n            tableView.bottomAnchor.constraint(equalTo: view.bottomAnchor),\n            tableView.leadingAnchor.constraint(equalTo: view.leadingAnchor),\n            tableView.trailingAnchor.constraint(equalTo: view.trailingAnchor)\n        ])\n\n        tableView.dataSource = self\n        tableView.delegate = self\n        tableView.register(CollectionTableViewCell.self, forCellReuseIdentifier: \"CollectionTableViewCell\")\n    }\n\n    // MARK: - UITableViewDataSource\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return 5 // Number of rows in the table view\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        guard let cell = tableView.dequeueReusableCell(withIdentifier: \"CollectionTableViewCell\", for: indexPath) as? CollectionTableViewCell else {\n            return UITableViewCell()\n        }\n        return cell\n    }\n\n    // MARK: - UITableViewDelegate\n\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 120 // Customize the height of the table view row\n    }\n}\n```\n\n### Explanation\n\n1. **`CollectionTableViewCell`**: This custom cell contains a `UICollectionView`. It sets up the collection view using Auto Layout constraints to fill the cell.\n\n2. **UICollectionViewDataSource and Delegate**: The cell itself acts as the data source and delegate for the collection view. You can customize the number of items and the appearance of the collection view cells.\n\n3. **ViewController**: Registers and uses the `CollectionTableViewCell` in the table view. It\u2019s crucial to set the `UITableViewDelegate` and `UITableViewDataSource` and define the methods to handle the table view data.\n\nThis setup allows each table view cell to contain a horizontally scrolling collection view, ideal for scenarios like displaying a list of products or images in a gallery format."
    }
]