[
    {
        "role": "user",
        "content": "I am trying to install psycopg2 using pip on my RHEL 5.5 system, but I am encountering an issue where the `pg_config` executable is not found. Despite `pg_config` being present in my PATH (`/usr/pgsql-9.1/bin/pg_config`), I am still getting an error that says 'pg_config executable not found.' I have also tried adding the `pg_config` path to the `setup.cfg` file and building it using the source files from the psycopg2 website, but I am getting an error message saying 'Unable to find 'pg_config' file in '/usr/pgsql-9.1/bin/.' Can anyone provide a solution to this issue?"
    },
    {
        "role": "assistant",
        "content": "The error you're encountering typically indicates that the `psycopg2` build process is unable to find the `pg_config` executable, which is necessary to compile the package. Here are some steps you can take to troubleshoot and resolve this issue:\n\n1. **Verify the Path:**\n   Ensure that `pg_config` is indeed located in the directory you mentioned and that it is executable. You can do this by running:\n\n   ```bash\n   ls -l /usr/pgsql-9.1/bin/pg_config\n   ```\n\n   If it's not executable, you can change its permissions:\n\n   ```bash\n   chmod +x /usr/pgsql-9.1/bin/pg_config\n   ```\n\n2. **Environment Variables:**\n   Make sure your environment variables are correctly set. You can explicitly set the `PATH` variable in your terminal session to include the directory where `pg_config` resides:\n\n   ```bash\n   export PATH=/usr/pgsql-9.1/bin:$PATH\n   ```\n\n   After setting the `PATH`, try running `pg_config` from the command line to ensure it's accessible:\n\n   ```bash\n   pg_config --version\n   ```\n\n3. **Set `PG_CONFIG` Environment Variable:**\n   You can also set the `PG_CONFIG` environment variable to point directly to the `pg_config` executable:\n\n   ```bash\n   export PG_CONFIG=/usr/pgsql-9.1/bin/pg_config\n   ```\n\n4. **Install Prerequisites:**\n   Ensure that all necessary PostgreSQL development packages are installed. This often includes packages like `postgresql-devel` or `libpq-dev`. You can install these using `yum`:\n\n   ```bash\n   sudo yum install postgresql91-devel\n   ```\n\n5. **Building from Source:**\n   If you are trying to build from source and setting the path in `setup.cfg` hasn't worked, you can try specifying the `pg_config` path directly when running `pip`:\n\n   ```bash\n   pip install psycopg2 --global-option=build_ext --global-option=\"-I/usr/pgsql-9.1/include\" --global-option=\"-L/usr/pgsql-9.1/lib\"\n   ```\n\n6. **Check for Multiple PostgreSQL Installations:**\n   If there are multiple PostgreSQL versions installed, make sure you are using the correct `pg_config` for the version of PostgreSQL that you want to use.\n\n7. **Re-login or Source Profile:**\n   If you've made changes to your `.bashrc` or `.bash_profile`, make sure to source the file or re-login to apply the changes:\n\n   ```bash\n   source ~/.bashrc\n   ```\n\n8. **Verify Python and Pip Versions:**\n   Ensure that you're using a compatible version of Python and `pip` with `psycopg2`. Sometimes compatibility issues can cause unexpected errors.\n\nBy following these steps, you should be able to resolve the issue with the `pg_config` executable. If problems persist, consider checking any additional error logs or messages for more clues."
    }
]