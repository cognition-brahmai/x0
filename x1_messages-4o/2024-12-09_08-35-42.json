[
    {
        "role": "user",
        "content": "How can I serve static files in a Flask application? Currently, my application just serves a single static HTML page with some links to CSS and JS. I'm having trouble finding where in the Flask documentation it describes returning static files. I've tried using `render_template`, `send_file`, and `url_for` but could not get these to work. In the meantime, I am opening the files, reading content, and creating a `Response` with the appropriate mimetype. Here is my current code:\n\n```python\nimport os.path\n\nfrom flask import Flask, Response\n\n\napp = Flask(__name__)\napp.config.from_object(__name__)\n\n\ndef root_dir():  # pragma: no cover\n    return os.path.abspath(os.path.dirname(__file__))\n\n\ndef get_file(filename):  # pragma: no cover\n    try:\n        src = os.path.join(root_dir(), filename)\n        return open(src).read()\n    except IOError as exc:\n        return str(exc)\n\n\n@app.route('/', methods=['GET'])\ndef metrics():  # pragma: no cover\n    content = get_file('jenkins_analytics.html')\n    return Response(content, mimetype=\"text/html\")\n\n\n@app.route('/', defaults={'path': ''})\n@app.route('/<path:path>')\ndef get_resource(path):  # pragma: no cover\n    mimetypes = {\n        \".css\": \"text/css\",\n        \".html\": \"text/html\",\n        \".js\": \"application/javascript\",\n    }\n    complete_path = os.path.join(root_dir(), path)\n    ext = os.path.splitext(path)[1]\n    mimetype = mimetypes.get(ext, \"text/html\")\n    content = get_file(complete_path)\n    return Response(content, mimetype=mimetype)\n\n\nif __name__ == '__main__':  # pragma: no cover\n    app.run(port=80)\n```\n\nCould someone provide a code sample or url that explains how to handle this? I believe this should be a straightforward solution."
    },
    {
        "role": "assistant",
        "content": "Serving static files in a Flask application is actually quite straightforward. Flask provides a built-in method for serving static files from a directory called `static`. Here\u2019s a step-by-step guide on how to set this up:\n\n1. **Create a `static` Directory:** By default, Flask will serve static files from a folder named `static` located in the root directory of your project.\n\n2. **Place Your Static Files:** Move your CSS, JavaScript, images, and any other static files into the `static` directory.\n\n3. **Reference Static Files in HTML:** Use the `url_for` function to reference static files in your HTML template. This ensures that the URLs are properly generated.\n\n4. **Serve HTML Using `render_template`:** Use the `render_template` function to render HTML templates from a `templates` directory.\n\nHere\u2019s a simplified example of how you can set up your application:\n\n```python\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\nif __name__ == '__main__':\n    app.run(port=80)\n```\n\n**Directory Structure:**\n\n```\n/yourproject\n    /static\n        style.css\n        script.js\n    /templates\n        index.html\n    app.py\n```\n\n**Example `index.html`:**\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link rel=\"stylesheet\" href=\"{{ url_for('static', filename='style.css') }}\">\n    <title>Flask App</title>\n</head>\n<body>\n    <h1>Welcome to the Flask app!</h1>\n    <script src=\"{{ url_for('static', filename='script.js') }}\"></script>\n</body>\n</html>\n```\n\n**Explanation:**\n\n- **`static` Directory:** This directory is automatically used by Flask to serve static files like CSS, JavaScript, and images.\n- **`url_for('static', filename='...')`:** This function generates the URL for static files, ensuring that the correct path is used.\n- **`render_template`:** This function is used to render HTML templates, which can contain placeholders that Flask will replace with actual values.\n\nBy placing your static files in the `static` directory and using the `url_for` function in your templates, Flask will handle serving these files for you. This setup is simple and leverages Flask's built-in capabilities."
    }
]