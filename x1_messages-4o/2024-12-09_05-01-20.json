[
    {
        "role": "user",
        "content": "How can I use Python's logging module to enable/disable logging from different functions within a single module? I am currently using the `debug` level to log messages and would like to understand how to use Python's logging filter mechanism to selectively enable or disable logging from `function_a` and `function_b`. Additionally, as I scale this to multiple modules and functions, can I maintain a single logger per module? Furthermore, is it possible to disable all messages with a specific prefix, such as \"parsing\", regardless of the module or function emitting the message?"
    },
    {
        "role": "assistant",
        "content": "To manage logging in Python efficiently, especially when dealing with multiple functions and modules, you can leverage the `logging` module's capabilities such as filters and custom loggers. Here's a step-by-step guide on how you can achieve this:\n\n### 1. **Basic Setup:**\n\nFirst, set up a basic logging configuration. You can create a logger per module by using the module's `__name__` attribute.\n\n```python\nimport logging\n\n# Create a logger for your module\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)  # This sets the lowest-severity log message level to be handled\n\n# Create a console handler and set its level\nch = logging.StreamHandler()\nch.setLevel(logging.DEBUG)\n\n# Create a formatter and set it to the handler\nformatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')\nch.setFormatter(formatter)\n\n# Add the handler to the logger\nlogger.addHandler(ch)\n```\n\n### 2. **Using Filters to Control Logging:**\n\nTo enable or disable logging for specific functions, you can create custom filters. A filter is a class that implements a `filter` method, which returns `True` if the log should be propagated, or `False` otherwise.\n\n#### Example of a Function-Specific Filter:\n\n```python\nclass FunctionFilter(logging.Filter):\n    def __init__(self, function_name):\n        super().__init__()\n        self.function_name = function_name\n\n    def filter(self, record):\n        if hasattr(record, 'funcName'):\n            return record.funcName == self.function_name\n        return False\n\n# Add filters to enable logging only from specific functions\nfunction_a_filter = FunctionFilter('function_a')\nfunction_b_filter = FunctionFilter('function_b')\n\nch.addFilter(function_a_filter)  # Apply this filter to the handler\n# Alternatively, you can add the filter directly to the logger, but typically handlers are filtered\n```\n\n### 3. **Disabling Messages with Specific Prefix:**\n\nTo disable messages with a specific prefix, you can use another filter that checks the log message content.\n\n#### Example of a Prefix Filter:\n\n```python\nclass PrefixFilter(logging.Filter):\n    def __init__(self, prefix):\n        super().__init__()\n        self.prefix = prefix\n\n    def filter(self, record):\n        return not record.getMessage().startswith(self.prefix)\n\n# Add a filter to the handler\nprefix_filter = PrefixFilter('parsing')\nch.addFilter(prefix_filter)\n```\n\n### 4. **Scaling to Multiple Modules:**\n\nWhen scaling to multiple modules, you should use a consistent logging configuration pattern. Each module can have its logger defined similarly:\n\n```python\n# in module_a.py\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n\n# in module_b.py\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n```\n\nEnsure that your main application (or the entry point) sets up the handlers and logging configuration, so all module loggers inherit this setup.\n\n### 5. **Example Usage:**\n\nHere's how you might define and use logging in functions:\n\n```python\ndef function_a():\n    logger.debug('This is a debug message from function_a')\n\ndef function_b():\n    logger.debug('This is a debug message from function_b')\n\ndef function_c():\n    logger.debug('parsing: This should be filtered out')\n```\n\nBy applying the filters as shown, you can selectively enable or disable logging for specific functions and filter out messages with unwanted prefixes. This setup provides flexible control over logging output as your application grows."
    }
]