[
    {
        "role": "user",
        "content": "What is the fastest method to convert a dictionary's keys and values from `unicode` to `str`? I am currently dealing with a dictionary from one layer of code where some computations/modifications are performed before passing it onto another layer. The original dictionary's keys and \"string\" values are in `unicode`, but the layer to which they are being passed only accepts `str`. This operation is going to be called frequently, so I am looking for the most efficient solution. How can I convert a dictionary like `{ u'spam': u'eggs', u'foo': True, u'bar': { u'baz': 97 } }` to `{ 'spam': 'eggs', 'foo': True, 'bar': { 'baz': 97 } }`, while keeping the non-\"string\" values in their original type?"
    },
    {
        "role": "assistant",
        "content": "To convert a dictionary's keys and values from `unicode` to `str` efficiently in Python 2, you can use a recursive function that traverses the dictionary and converts only the keys and values that are of type `unicode` to `str`. Here's a function that performs this conversion:\n\n```python\ndef unicode_to_str(data):\n    if isinstance(data, dict):\n        return {unicode_to_str(key): unicode_to_str(value) for key, value in data.items()}\n    elif isinstance(data, list):\n        return [unicode_to_str(element) for element in data]\n    elif isinstance(data, unicode):\n        return data.encode('utf-8')\n    else:\n        return data\n\n# Example usage\ninput_dict = {u'spam': u'eggs', u'foo': True, u'bar': {u'baz': 97}}\noutput_dict = unicode_to_str(input_dict)\nprint(output_dict)\n```\n\n### Explanation:\n\n1. **Dictionary Handling**: The function checks if the data is a dictionary. If so, it uses a dictionary comprehension to recursively convert both the keys and values by calling `unicode_to_str` on them.\n\n2. **List Handling**: If the data is a list, the function uses a list comprehension to recursively convert each element.\n\n3. **Unicode Handling**: If the data is of type `unicode`, it converts it to `str` using the `encode` method with `'utf-8'`.\n\n4. **Other Types**: If the data is neither a dictionary, list, nor `unicode`, it is returned unchanged.\n\nThis method is efficient for handling nested dictionaries and lists, ensuring that only `unicode` keys and values are converted to `str`, while other types are preserved."
    }
]