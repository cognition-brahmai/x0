[
    {
        "role": "user",
        "content": "In Python, how can I determine if an argument to a function was passed positionally or via its keyword? Specifically, given a function\n```python\ndef foo(x, y):\n    pass\n```\nI want to be able to determine within the function whether `y` was passed positionally or with its keyword, similar to this desired functionality:\n```python\ndef foo(x, y):\n    if passed_positionally(y):\n        print('y was passed positionally!')\n    else:\n        print('y was passed with its keyword')\n```\nso that the output would be\n```python\n>>> foo(3, 4)\ny was passed positionally\n>>> foo(3, y=4)\ny was passed with its keyword\n```\nIs it also possible to implement this while preserving type annotations?"
    },
    {
        "role": "assistant",
        "content": "In Python, there isn't a built-in way to directly determine within a function whether an argument was passed positionally or via a keyword. However, you can achieve this by using the `inspect` module, which provides several useful functions to retrieve information about live objects, including functions and their arguments.\n\nHere's how you can implement this functionality:\n\n```python\nimport inspect\n\ndef foo(x, y):\n    # Get the current frame of the caller\n    frame = inspect.currentframe()\n    # Get the arguments of the caller\n    args, _, _, values = inspect.getargvalues(frame)\n\n    # Check if 'y' is in the positional arguments\n    if 'y' in args:\n        print('y was passed positionally!')\n    else:\n        print('y was passed with its keyword')\n\n# Test cases\nfoo(3, 4)  # y was passed positionally!\nfoo(3, y=4)  # y was passed with its keyword\n```\n\nTo preserve type annotations, you can simply add them to your function definition as usual. Type annotations do not interfere with the `inspect` module's functionality. Here's the same function with type annotations:\n\n```python\nimport inspect\nfrom typing import Any\n\ndef foo(x: Any, y: Any) -> None:\n    frame = inspect.currentframe()\n    args, _, _, values = inspect.getargvalues(frame)\n\n    if 'y' in args:\n        print('y was passed positionally!')\n    else:\n        print('y was passed with its keyword')\n\n# Test cases\nfoo(3, 4)  # y was passed positionally!\nfoo(3, y=4)  # y was passed with its keyword\n```\n\nThis approach relies on inspecting the current frame and checking the arguments passed to the function. Note that this technique might have limitations or overhead due to the use of frame inspection, so it should be used judiciously, especially in performance-critical applications."
    }
]