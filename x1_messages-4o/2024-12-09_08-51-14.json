[
    {
        "role": "user",
        "content": "How can I sort an array of integers using the selection sort algorithm in C++?"
    },
    {
        "role": "assistant",
        "content": "Certainly! The selection sort algorithm is a simple comparison-based sorting algorithm. It works by dividing the array into a sorted and an unsorted region. Initially, the sorted region is empty, and the unsorted region is the entire array. The algorithm repeatedly selects the smallest (or largest, depending on sorting order) element from the unsorted region, swaps it with the first element of the unsorted region, and moves the boundary between the sorted and unsorted regions one element to the right.\n\nHere's how you can implement the selection sort algorithm in C++:\n\n```cpp\n#include <iostream>\n#include <vector>\n\nvoid selectionSort(std::vector<int>& arr) {\n    int n = arr.size();\n    for (int i = 0; i < n - 1; ++i) {\n        // Assume the minimum is the first element in the unsorted region\n        int minIndex = i;\n\n        // Find the index of the minimum element in the unsorted region\n        for (int j = i + 1; j < n; ++j) {\n            if (arr[j] < arr[minIndex]) {\n                minIndex = j;\n            }\n        }\n\n        // Swap the found minimum element with the first element of the unsorted region\n        std::swap(arr[i], arr[minIndex]);\n    }\n}\n\nvoid printArray(const std::vector<int>& arr) {\n    for (int num : arr) {\n        std::cout << num << \" \";\n    }\n    std::cout << std::endl;\n}\n\nint main() {\n    std::vector<int> data = {64, 25, 12, 22, 11};\n    \n    std::cout << \"Original array: \";\n    printArray(data);\n    \n    selectionSort(data);\n    \n    std::cout << \"Sorted array: \";\n    printArray(data);\n    \n    return 0;\n}\n```\n\n### Explanation:\n\n1. **Outer Loop (`i`)**: This loop iterates through each element of the array. It marks the boundary between the sorted and unsorted regions.\n\n2. **Inner Loop (`j`)**: This loop searches for the smallest element in the unsorted region of the array, starting from the first unsorted element.\n\n3. **Swap**: Once the smallest element is found, it is swapped with the first element of the unsorted region (`arr[i]`).\n\n4. **Repeat**: The process is repeated until the entire array is sorted.\n\nThis implementation sorts the array in ascending order. If you want to sort in descending order, you can modify the comparison condition within the inner loop."
    }
]