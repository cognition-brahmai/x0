[
    {
        "role": "user",
        "content": "How can I pretty-print a JSON file in Python?"
    },
    {
        "role": "assistant",
        "content": "To pretty-print a JSON file in Python, you can use the `json` module, which provides a simple method to format JSON data with indentation. Here's a step-by-step guide to do it:\n\n1. **Read the JSON file**: Load the JSON data from your file.\n2. **Use `json.dumps` or `json.dump`**: To pretty-print the JSON data, use the `json.dumps` method if you are printing to the console or `json.dump` if you are writing the formatted JSON back to a file.\n3. **Specify indentation**: Use the `indent` parameter to define the number of spaces for indentation.\n\nHere's a complete example:\n\n```python\nimport json\n\n# Step 1: Read the JSON file\nwith open('yourfile.json', 'r') as file:\n    data = json.load(file)\n\n# Step 2: Pretty-print the JSON data\npretty_json = json.dumps(data, indent=4)\n\n# Print to console\nprint(pretty_json)\n\n# Alternatively, write the pretty-printed JSON to a new file\nwith open('pretty_yourfile.json', 'w') as pretty_file:\n    json.dump(data, pretty_file, indent=4)\n```\n\n### Explanation:\n- **`json.load(file)`**: Reads the JSON data from the file and parses it into a Python dictionary.\n- **`json.dumps(data, indent=4)`**: Converts the Python dictionary back into a JSON string with an indentation of 4 spaces for better readability.\n- **`json.dump(data, pretty_file, indent=4)`**: Writes the pretty-printed JSON directly to a new file with the specified indentation.\n\nYou can adjust the `indent` value to change the spacing according to your preference."
    }
]