[
    {
        "role": "user",
        "content": "How can I access the configuration parameters passed to Airflow through CLI while triggering a dag run?\n\nFor instance, here is the `trigger_dag` command I am using:\n\n```python\nairflow trigger_dag  -c '{\"account_list\":\"[1,2,3,4,5]\", \"start_date\":\"2016-04-25\"}'  insights_assembly_9900 \n```\n\nMy issue is figuring out how to access these configuration parameters inside an operator during the dag run."
    },
    {
        "role": "assistant",
        "content": "When you trigger a DAG in Apache Airflow using the `trigger_dag` command with the `-c` option, you are passing a JSON configuration object. Inside your DAG, you can access these parameters using the `dag_run` object, which contains the parameters passed during the trigger.\n\nHere's how you can access these parameters within an operator in your DAG:\n\n1. **Accessing the Parameters in PythonOperator or any Custom Operator:**\n\n   If you are using a `PythonOperator`, you can access the parameters by using the `kwargs` argument that is passed to the Python callable. You can extract the configuration parameters from `dag_run.conf`.\n\n   ```python\n   from airflow import DAG\n   from airflow.operators.python_operator import PythonOperator\n   from datetime import datetime\n\n   def my_task(**kwargs):\n       # Accessing the dag_run object\n       dag_run = kwargs.get('dag_run')\n\n       # Accessing the configuration parameters\n       if dag_run and dag_run.conf:\n           account_list = dag_run.conf.get('account_list')\n           start_date = dag_run.conf.get('start_date')\n\n           # You can now use account_list and start_date in your logic\n           print(f\"Account List: {account_list}\")\n           print(f\"Start Date: {start_date}\")\n\n   default_args = {\n       'owner': 'airflow',\n       'start_date': datetime(2023, 1, 1),\n   }\n\n   with DAG('insights_assembly_9900', default_args=default_args, schedule_interval=None) as dag:\n       task = PythonOperator(\n           task_id='my_task',\n           python_callable=my_task,\n           provide_context=True\n       )\n   ```\n\n2. **Accessing Parameters in Other Operators:**\n\n   If you're using other operators, you can still access `dag_run.conf` by using the `{{ dag_run.conf['key'] }}` Jinja templating within the operator's parameters. For example, if you are using a `BashOperator`:\n\n   ```python\n   from airflow import DAG\n   from airflow.operators.bash_operator import BashOperator\n   from datetime import datetime\n\n   default_args = {\n       'owner': 'airflow',\n       'start_date': datetime(2023, 1, 1),\n   }\n\n   with DAG('insights_assembly_9900', default_args=default_args, schedule_interval=None) as dag:\n       bash_task = BashOperator(\n           task_id='print_params',\n           bash_command='echo \"Account List: {{ dag_run.conf[\"account_list\"] }}\" && echo \"Start Date: {{ dag_run.conf[\"start_date\"] }}\"',\n       )\n   ```\n\nRemember that `dag_run.conf` is a dictionary, so you can access the parameters using the keys you passed via the CLI. Always ensure that you handle cases where `dag_run.conf` might be `None`, especially if the DAG can be triggered through other means where no configuration is passed."
    }
]