[
    {
        "role": "user",
        "content": "How can I process a SIGTERM signal in Python without interrupting the current execution of my code? I have a daemon written in Python, and I use the `start-stop-daemon` to daemonize it. When I send a `--stop` command, it sends a `SIGTERM` (TERM) signal and the execution terminates immediately. I want to handle the `TERM` signal in a separate thread, so I can set a `shutdown_flag = True` and allow the `mainloop()` function to stop gracefully. I have found that I can use `signal.signal(signal.SIGTERM, handler)` to handle the signal event, but this still interrupts the current execution and passes the control to the handler. Here is my current code:\n\n```python\ndef mainloop():\n    while True:\n        # 1. do\n        # 2. some\n        # 3. important\n        # 4. job\n        # 5. sleep\n\nmainloop()\n```"
    },
    {
        "role": "assistant",
        "content": "To handle the `SIGTERM` signal in a way that allows your main loop to shut down gracefully without immediately interrupting the current execution, you can use a signal handler to set a shutdown flag. Then, in your main loop, you can periodically check this flag and exit the loop if it's set. Here's how you can modify your code to achieve this:\n\n1. Use a signal handler to set a shutdown flag when the `SIGTERM` signal is received.\n2. Modify the `mainloop` function to check the shutdown flag and exit the loop gracefully when it's set.\n\nHere is a sample implementation:\n\n```python\nimport signal\nimport threading\nimport time\n\nshutdown_flag = False\n\ndef handle_sigterm(signum, frame):\n    global shutdown_flag\n    shutdown_flag = True\n    print(\"Received SIGTERM, shutting down gracefully...\")\n\ndef mainloop():\n    global shutdown_flag\n    while not shutdown_flag:\n        # 1. do\n        print(\"Doing important job...\")\n        # 2. some\n        time.sleep(1)  # Simulate work with a sleep\n        # 3. important\n        # 4. job\n        # 5. sleep\n    \n    print(\"Cleanup and exit.\")\n\ndef run():\n    # Register the SIGTERM handler\n    signal.signal(signal.SIGTERM, handle_sigterm)\n\n    # Start the main loop\n    mainloop()\n\nif __name__ == \"__main__\":\n    run()\n```\n\n### Explanation:\n\n- **Signal Handling**: The `handle_sigterm` function sets the `shutdown_flag` to `True` when a `SIGTERM` signal is received. This function is registered as the handler for `SIGTERM` using `signal.signal`.\n\n- **Graceful Shutdown**: The `mainloop` checks the `shutdown_flag` in each iteration. When the flag is `True`, the loop exits, allowing you to perform any necessary cleanup before the program terminates.\n\n- **Non-blocking Signal Handling**: Python's signal handling is already non-blocking, but setting a flag allows you to control when to exit the loop based on your application's logic.\n\n- **Thread Safety**: If your application is multithreaded, consider using a `threading.Event` instead of a simple boolean for the `shutdown_flag` to ensure thread safety."
    }
]