[
    {
        "role": "user",
        "content": "I'm working with the Python Imaging Library (PIL) version 1.1.7 on Linux and trying to apply text on images of varying but known dimensions as a watermark. I want the text size to dynamically scale in relation to the image dimensions, not necessarily taking up the whole surface area but being visible enough to be easily identifiable and difficult to remove. Ideally, I would like to set the ratio of the text size to the image dimensions, for example, 1/10 the size. I've tried using the font size attribute to change the size but haven't been able to develop a successful algorithm to scale it. Is there a better way to accomplish this?"
    },
    {
        "role": "assistant",
        "content": "To achieve dynamic text scaling for watermarking images with the Python Imaging Library (PIL), you can use the `ImageDraw` module to draw text, and the `ImageFont` module to load a font. Here's a step-by-step guide to help you dynamically scale the text size in proportion to the image dimensions:\n\n1. **Determine Image Dimensions**: First, get the dimensions of your image.\n\n2. **Calculate Text Size**: Calculate the appropriate text size based on the image dimensions. For example, you can use a fraction of the image's width or height to determine the font size.\n\n3. **Load a Font**: Use a TrueType font (.ttf) to allow for scalable fonts. You can specify the calculated font size when loading the font.\n\n4. **Draw the Text**: Use the `ImageDraw` module to draw the text onto the image.\n\nHere's a code example to illustrate this process:\n\n```python\nfrom PIL import Image, ImageDraw, ImageFont\n\ndef add_watermark(image_path, text, output_path, scale_factor=0.1):\n    # Open the original image\n    image = Image.open(image_path)\n    draw = ImageDraw.Draw(image)\n\n    # Get image dimensions\n    width, height = image.size\n\n    # Calculate font size (as a fraction of the image height)\n    font_size = int(height * scale_factor)\n\n    # Load a TrueType font\n    # Make sure you have a .ttf font file available, e.g., \"arial.ttf\"\n    try:\n        font = ImageFont.truetype(\"arial.ttf\", font_size)\n    except IOError:\n        font = ImageFont.load_default()\n        print(\"Default font loaded as 'arial.ttf' is not found.\")\n\n    # Calculate text size and position\n    text_width, text_height = draw.textsize(text, font=font)\n    x = width - text_width - 10  # 10 pixels from the right edge\n    y = height - text_height - 10  # 10 pixels from the bottom edge\n\n    # Draw text on the image\n    draw.text((x, y), text, font=font, fill=(255, 255, 255, 128))  # White text with some transparency\n\n    # Save the result\n    image.save(output_path)\n\n# Example usage\nadd_watermark(\"input_image.jpg\", \"Sample Watermark\", \"output_image.jpg\")\n```\n\n**Key Points:**\n\n- **Font Loading**: Make sure you have access to a TrueType font file like \"arial.ttf\". You may need to specify the path to a font file on your system.\n\n- **Scaling Factor**: The `scale_factor` parameter determines how large the text will be in relation to the image height. Adjust this to achieve the desired visibility.\n\n- **Text Positioning**: The example positions the text 10 pixels from the bottom-right corner. You can adjust this as needed.\n\n- **Transparency**: The fill color includes an alpha value (128) to make the text semi-transparent, which can help it blend into the image without being too intrusive.\n\nThis approach should help you achieve a dynamically scaled watermark that's easily identifiable and proportionate to the image dimensions."
    }
]