[
    {
        "role": "user",
        "content": "How can I validate the size and aspect ratio of an image in a Django admin form before it is uploaded? I want to restrict the users to only upload an image of size 100x200 and aspect ratio of 16:9. If the image does not conform to these parameters, the form should be invalidated. I am currently able to get the width and height of the image, but only server-side after the image is already uploaded and the form is successfully submitted. Is there a way to check this earlier?"
    },
    {
        "role": "assistant",
        "content": "To validate the size and aspect ratio of an image in a Django admin form before it is uploaded, you can implement client-side validation using JavaScript and server-side validation using a custom form validator. Here's a step-by-step guide for both approaches:\n\n### Client-side Validation\n\n1. **JavaScript Validation:**\n   You can use JavaScript to check the image size and aspect ratio before the form is submitted. Add a script to your admin form template to handle this validation.\n\n   ```html\n   <script type=\"text/javascript\">\n       document.addEventListener('DOMContentLoaded', function () {\n           const imageInput = document.querySelector('#id_your_image_field');\n           const form = imageInput.closest('form');\n\n           imageInput.addEventListener('change', function () {\n               const file = this.files[0];\n               if (file) {\n                   const img = new Image();\n                   img.onload = function () {\n                       const width = img.width;\n                       const height = img.height;\n                       const aspectRatio = width / height;\n                       if (width !== 100 || height !== 200 || Math.abs(aspectRatio - (16 / 9)) > 0.01) {\n                           alert('Invalid image size or aspect ratio. Expected 100x200 and 16:9.');\n                           imageInput.value = '';\n                       }\n                   };\n                   img.src = URL.createObjectURL(file);\n               }\n           });\n\n           form.addEventListener('submit', function (e) {\n               if (!imageInput.value) {\n                   e.preventDefault();\n               }\n           });\n       });\n   </script>\n   ```\n\n### Server-side Validation\n\n2. **Django Form Validator:**\n   Implement a custom form validator to validate the image dimensions server-side. This ensures that even if a user bypasses client-side checks, the server will still enforce the rules.\n\n   ```python\n   from django import forms\n   from django.core.exceptions import ValidationError\n   from PIL import Image\n\n   class ImageUploadForm(forms.ModelForm):\n       class Meta:\n           model = YourModel\n           fields = ['your_image_field']\n\n       def clean_your_image_field(self):\n           image = self.cleaned_data.get('your_image_field')\n           if not image:\n               raise ValidationError(\"No image provided!\")\n\n           try:\n               img = Image.open(image)\n               width, height = img.size\n               aspect_ratio = width / height\n\n               if width != 100 or height != 200 or abs(aspect_ratio - (16 / 9)) > 0.01:\n                   raise ValidationError(\"Invalid image size or aspect ratio. Expected 100x200 and 16:9.\")\n           except Exception as e:\n               raise ValidationError(\"Invalid image file.\")\n\n           return image\n   ```\n\n3. **Admin Form Integration:**\n   Ensure your custom form is used in the Django admin by overriding the `get_form` method in your admin class.\n\n   ```python\n   from django.contrib import admin\n   from .models import YourModel\n   from .forms import ImageUploadForm\n\n   class YourModelAdmin(admin.ModelAdmin):\n       form = ImageUploadForm\n\n   admin.site.register(YourModel, YourModelAdmin)\n   ```\n\n### Explanation\n\n- **Client-side:** JavaScript checks the image dimensions and aspect ratio before the form is submitted. This provides immediate feedback to the user and reduces server load.\n- **Server-side:** A custom form validator ensures that any images that bypass the client-side check are validated on the server. This is crucial for maintaining security and data integrity.\n\nBy combining both client-side and server-side validation, you can effectively restrict users to uploading images that meet your specific size and aspect ratio requirements."
    }
]