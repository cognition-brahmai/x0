[
    {
        "role": "user",
        "content": "How can I generate a C++ program that finds all pairs of numbers in an array that add up to a given sum?"
    },
    {
        "role": "assistant",
        "content": "To generate a C++ program that finds all pairs of numbers in an array that add up to a given sum, you can follow these steps. Below is an example of such a program:\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nvoid findPairsWithGivenSum(const std::vector<int>& arr, int targetSum) {\n    std::unordered_map<int, int> numCounts;\n    std::vector<std::pair<int, int>> pairs;\n\n    for (int num : arr) {\n        int complement = targetSum - num;\n        if (numCounts[complement] > 0) {\n            pairs.emplace_back(complement, num);\n            numCounts[complement]--;\n        } else {\n            numCounts[num]++;\n        }\n    }\n\n    if (!pairs.empty()) {\n        std::cout << \"Pairs with sum \" << targetSum << \" are:\\n\";\n        for (const auto& pair : pairs) {\n            std::cout << \"(\" << pair.first << \", \" << pair.second << \")\\n\";\n        }\n    } else {\n        std::cout << \"No pairs found with sum \" << targetSum << \".\\n\";\n    }\n}\n\nint main() {\n    std::vector<int> arr = {1, 5, 7, -1, 5};\n    int targetSum = 6;\n\n    findPairsWithGivenSum(arr, targetSum);\n\n    return 0;\n}\n```\n\n### Explanation:\n1. **Data Structures**:\n   - `std::unordered_map<int, int>` is used to store the counts of each number in the array. This helps in quickly checking if a complement (the number needed to reach the target sum) has been seen before.\n   - `std::vector<std::pair<int, int>>` stores pairs of numbers that add up to the target sum.\n\n2. **Logic**:\n   - For each number in the array, calculate its complement with respect to the target sum.\n   - Check if the complement exists in the map with a count greater than zero.\n   - If it exists, record the pair and decrease the count of the complement.\n   - If it doesn't exist, increment the count of the current number in the map.\n\n3. **Output**:\n   - If pairs are found, they are printed.\n   - If no pairs are found, a message is displayed.\n\nThis program efficiently finds all pairs in the array that sum up to the given target using a hash map, making it faster than a naive O(n^2) approach."
    }
]